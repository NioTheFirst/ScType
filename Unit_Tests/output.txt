Checking FieldsMapsAndArraysTest
Checking ITypicalOracle
Checking ITypicalTokenWrapper
Finding type for reserveTokenA...
address
prev address? u
global assignment: 1
1
Head Addr: 1
    Norm: 0
    Set: {1}
Finding type for reserveTokenB...
address
prev address? u
global assignment: 2
2
Head Addr: 2
    Norm: 6
    Set: {2}



constructor
Finding type for _reserveTokenA...
address
prev address? u
-999
Head Addr: -999
    Norm: 0
    Set: {-999}
Finding type for _reserveTokenB...
address
prev address? u
-998
Head Addr: -998
    Norm: 6
    Set: {-998}
Param: 0
    num: []
    den: []
    norm: u
    link: _reserveTokenA
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: _reserveTokenB
    fields: []
    fintype: -1


reserveTokenA_1(address) := _reserveTokenA_1(address)
reserveTokenB_1(address) := _reserveTokenB_1(address)


reserveTokenA_1(address) := _reserveTokenA_1(address)
[i]Type for reserveTokenA

Name: reserveTokenA Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: _reserveTokenA
Value: u
Fields: 
Finance Type: undef
Copied reserveTokenA
 To type: None
reserveTokenB_1(address) := _reserveTokenB_1(address)
[i]Type for reserveTokenB

Name: reserveTokenB Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: _reserveTokenB
Value: u
Fields: 
Finance Type: undef
Copied reserveTokenB
 To type: None


reserveTokenA_1(address) := _reserveTokenA_1(address)
reserveTokenB_1(address) := _reserveTokenB_1(address)


reserveTokenA_1(address) := _reserveTokenA_1(address)
[i]Type for reserveTokenA

Name: reserveTokenA Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: _reserveTokenA
Value: u
Fields: 
Finance Type: undef
Copied reserveTokenA
 To type: None
reserveTokenB_1(address) := _reserveTokenB_1(address)
[i]Type for reserveTokenB

Name: reserveTokenB Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: _reserveTokenB
Value: u
Fields: 
Finance Type: undef
Copied reserveTokenB
 To type: None



testFieldGood
Finding type for myfield...
MyField
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


reserveTokenA_2(address) := ϕ(['reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_1', 'reserveTokenA_3'])
REF_0(uint256) -> myfield_1.amount
TMP_0 = CONVERT reserveTokenA_2 to ITypicalTokenWrapper
TMP_1(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
reserveTokenA_3(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_2', 'reserveTokenA_1', 'reserveTokenA_5'])
myfield_2(MyField) := ϕ(['myfield_1'])
REF_0(-> myfield_2) = REF_0 (c)+ TMP_1


reserveTokenA_2(address) := ϕ(['reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_1', 'reserveTokenA_3'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testFieldGood
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_0(uint256) -> myfield_1.amount
[i]Type for REF_0

Name: myfield.amount Function: testFieldGood
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserveTokenA_2 to ITypicalTokenWrapper
Converting reserveTokenA_2

Name: reserveTokenA Function: testFieldGood
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: testFieldGood
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_1

Name: TMP_1 Function: testFieldGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenA_3(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_2', 'reserveTokenA_1', 'reserveTokenA_5'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testFieldGood
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
myfield_2(MyField) := ϕ(['myfield_1'])
[i]Type for myfield

Name: myfield Function: testFieldGood
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_0(-> myfield_2) = REF_0 (c)+ TMP_1
[i]Type for REF_0

Name: REF_0 Function: testFieldGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef


reserveTokenA_2(address) := ϕ(['reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_1', 'reserveTokenA_3'])
REF_0(uint256) -> myfield_1.amount
TMP_0 = CONVERT reserveTokenA_2 to ITypicalTokenWrapper
TMP_1(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
reserveTokenA_3(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_2', 'reserveTokenA_1', 'reserveTokenA_5'])
myfield_2(MyField) := ϕ(['myfield_1'])
REF_0(-> myfield_2) = REF_0 (c)+ TMP_1


reserveTokenA_2(address) := ϕ(['reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_1', 'reserveTokenA_3'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testFieldGood
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
REF_0(uint256) -> myfield_1.amount
[i]Type for REF_0

Name: myfield.amount Function: testFieldGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserveTokenA_2 to ITypicalTokenWrapper
Converting reserveTokenA_2

Name: reserveTokenA Function: testFieldGood
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: testFieldGood
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_1

Name: TMP_1 Function: testFieldGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenA_3(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_2', 'reserveTokenA_1', 'reserveTokenA_5'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testFieldGood
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
myfield_2(MyField) := ϕ(['myfield_1'])
[i]Type for myfield

Name: myfield Function: testFieldGood
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_0(-> myfield_2) = REF_0 (c)+ TMP_1
[i]Type for REF_0

Name: REF_0 Function: testFieldGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef


reserveTokenA_2(address) := ϕ(['reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_1', 'reserveTokenA_3'])
REF_0(uint256) -> myfield_1.amount
TMP_0 = CONVERT reserveTokenA_2 to ITypicalTokenWrapper
TMP_1(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
reserveTokenA_3(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_2', 'reserveTokenA_1', 'reserveTokenA_5'])
myfield_2(MyField) := ϕ(['myfield_1'])
REF_0(-> myfield_2) = REF_0 (c)+ TMP_1


reserveTokenA_2(address) := ϕ(['reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_1', 'reserveTokenA_3'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testFieldGood
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
REF_0(uint256) -> myfield_1.amount
[i]Type for REF_0

Name: myfield.amount Function: testFieldGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserveTokenA_2 to ITypicalTokenWrapper
Converting reserveTokenA_2

Name: reserveTokenA Function: testFieldGood
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: testFieldGood
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_1

Name: TMP_1 Function: testFieldGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenA_3(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_2', 'reserveTokenA_1', 'reserveTokenA_5'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testFieldGood
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
myfield_2(MyField) := ϕ(['myfield_1'])
[i]Type for myfield

Name: myfield Function: testFieldGood
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_0(-> myfield_2) = REF_0 (c)+ TMP_1
[i]Type for REF_0

Name: REF_0 Function: testFieldGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef



testFieldBad
Finding type for myfield...
MyField
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


reserveTokenA_4(address) := ϕ(['reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_1', 'reserveTokenA_3'])
reserveTokenB_2(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_4', 'reserveTokenB_0'])
REF_2(uint256) -> myfield_1.amount
TMP_2 = CONVERT reserveTokenA_4 to ITypicalTokenWrapper
TMP_3(uint256) = HIGH_LEVEL_CALL, dest:TMP_2(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
reserveTokenA_5(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_1', 'reserveTokenA_5', 'reserveTokenA_4'])
reserveTokenB_3(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_2', 'reserveTokenB_4'])
myfield_2(MyField) := ϕ(['myfield_1'])
REF_2(-> myfield_2) = REF_2 (c)+ TMP_3
REF_4(uint256) -> myfield_2.amount
TMP_4 = CONVERT reserveTokenB_3 to ITypicalTokenWrapper
TMP_5(uint256) = HIGH_LEVEL_CALL, dest:TMP_4(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
reserveTokenB_4(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_3', 'reserveTokenB_4'])
myfield_3(MyField) := ϕ(['myfield_2'])
REF_4(-> myfield_3) = REF_4 (c)+ TMP_5


reserveTokenA_4(address) := ϕ(['reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_1', 'reserveTokenA_3'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenB_2(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_4', 'reserveTokenB_0'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_2(uint256) -> myfield_1.amount
[i]Type for REF_2

Name: myfield.amount Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_2 = CONVERT reserveTokenA_4 to ITypicalTokenWrapper
Converting reserveTokenA_4

Name: reserveTokenA Function: testFieldBad
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_2

Name: TMP_2 Function: testFieldBad
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = HIGH_LEVEL_CALL, dest:TMP_2(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_3

Name: TMP_3 Function: testFieldBad
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenA_5(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_1', 'reserveTokenA_5', 'reserveTokenA_4'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenB_3(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_2', 'reserveTokenB_4'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
myfield_2(MyField) := ϕ(['myfield_1'])
[i]Type for myfield

Name: myfield Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_2(-> myfield_2) = REF_2 (c)+ TMP_3
[i]Type for REF_2

Name: REF_2 Function: testFieldBad
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint256) -> myfield_2.amount
[i]Type for REF_4

Name: myfield.amount Function: testFieldBad
Num: 1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_4 = CONVERT reserveTokenB_3 to ITypicalTokenWrapper
Converting reserveTokenB_3

Name: reserveTokenB Function: testFieldBad
Num: -1
Den: -1
Address: 2
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_4

Name: TMP_4 Function: testFieldBad
Num: -1
Den: -1
Address: 2
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_5(uint256) = HIGH_LEVEL_CALL, dest:TMP_4(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
2
[i]Type for TMP_5

Name: TMP_5 Function: testFieldBad
Num: 2
Den: 
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenB_4(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_3', 'reserveTokenB_4'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
myfield_3(MyField) := ϕ(['myfield_2'])
[i]Type for myfield

Name: myfield Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_4(-> myfield_3) = REF_4 (c)+ TMP_5
Error with REF_4 in function testFieldBad
Error with: REF_4 in function testFieldBad
[i]Type for REF_4

Name: REF_4 Function: testFieldBad
Num: 2
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Error with amount in function None
Error with: amount in function None


reserveTokenA_4(address) := ϕ(['reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_1', 'reserveTokenA_3'])
reserveTokenB_2(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_4', 'reserveTokenB_0'])
REF_2(uint256) -> myfield_1.amount
TMP_2 = CONVERT reserveTokenA_4 to ITypicalTokenWrapper
TMP_3(uint256) = HIGH_LEVEL_CALL, dest:TMP_2(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
reserveTokenA_5(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_1', 'reserveTokenA_5', 'reserveTokenA_4'])
reserveTokenB_3(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_2', 'reserveTokenB_4'])
myfield_2(MyField) := ϕ(['myfield_1'])
REF_2(-> myfield_2) = REF_2 (c)+ TMP_3
REF_4(uint256) -> myfield_2.amount
TMP_4 = CONVERT reserveTokenB_3 to ITypicalTokenWrapper
TMP_5(uint256) = HIGH_LEVEL_CALL, dest:TMP_4(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
reserveTokenB_4(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_3', 'reserveTokenB_4'])
myfield_3(MyField) := ϕ(['myfield_2'])
REF_4(-> myfield_3) = REF_4 (c)+ TMP_5


reserveTokenA_4(address) := ϕ(['reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_1', 'reserveTokenA_3'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testFieldBad
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
reserveTokenB_2(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_4', 'reserveTokenB_0'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_2(uint256) -> myfield_1.amount
[i]Type for REF_2

Name: myfield.amount Function: testFieldBad
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_2 = CONVERT reserveTokenA_4 to ITypicalTokenWrapper
Converting reserveTokenA_4

Name: reserveTokenA Function: testFieldBad
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_2

Name: TMP_2 Function: testFieldBad
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = HIGH_LEVEL_CALL, dest:TMP_2(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_3

Name: TMP_3 Function: testFieldBad
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenA_5(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_1', 'reserveTokenA_5', 'reserveTokenA_4'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenB_3(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_2', 'reserveTokenB_4'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: testFieldBad
Num: -1
Den: -1
Address: 2
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
myfield_2(MyField) := ϕ(['myfield_1'])
[i]Type for myfield

Name: myfield Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_2(-> myfield_2) = REF_2 (c)+ TMP_3
[i]Type for REF_2

Name: REF_2 Function: testFieldBad
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint256) -> myfield_2.amount
[i]Type for REF_4

Name: myfield.amount Function: testFieldBad
Num: 2
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_4 = CONVERT reserveTokenB_3 to ITypicalTokenWrapper
Converting reserveTokenB_3

Name: reserveTokenB Function: testFieldBad
Num: -1
Den: -1
Address: 2
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_4

Name: TMP_4 Function: testFieldBad
Num: -1
Den: -1
Address: 2
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_5(uint256) = HIGH_LEVEL_CALL, dest:TMP_4(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
2
[i]Type for TMP_5

Name: TMP_5 Function: testFieldBad
Num: 2
Den: 
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenB_4(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_3', 'reserveTokenB_4'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
myfield_3(MyField) := ϕ(['myfield_2'])
[i]Type for myfield

Name: myfield Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_4(-> myfield_3) = REF_4 (c)+ TMP_5
[i]Type for REF_4

Name: REF_4 Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


reserveTokenA_4(address) := ϕ(['reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_1', 'reserveTokenA_3'])
reserveTokenB_2(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_4', 'reserveTokenB_0'])
REF_2(uint256) -> myfield_1.amount
TMP_2 = CONVERT reserveTokenA_4 to ITypicalTokenWrapper
TMP_3(uint256) = HIGH_LEVEL_CALL, dest:TMP_2(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
reserveTokenA_5(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_1', 'reserveTokenA_5', 'reserveTokenA_4'])
reserveTokenB_3(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_2', 'reserveTokenB_4'])
myfield_2(MyField) := ϕ(['myfield_1'])
REF_2(-> myfield_2) = REF_2 (c)+ TMP_3
REF_4(uint256) -> myfield_2.amount
TMP_4 = CONVERT reserveTokenB_3 to ITypicalTokenWrapper
TMP_5(uint256) = HIGH_LEVEL_CALL, dest:TMP_4(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
reserveTokenB_4(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_3', 'reserveTokenB_4'])
myfield_3(MyField) := ϕ(['myfield_2'])
REF_4(-> myfield_3) = REF_4 (c)+ TMP_5


reserveTokenA_4(address) := ϕ(['reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_1', 'reserveTokenA_3'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testFieldBad
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
reserveTokenB_2(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_4', 'reserveTokenB_0'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_2(uint256) -> myfield_1.amount
[i]Type for REF_2

Name: myfield.amount Function: testFieldBad
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_2 = CONVERT reserveTokenA_4 to ITypicalTokenWrapper
Converting reserveTokenA_4

Name: reserveTokenA Function: testFieldBad
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_2

Name: TMP_2 Function: testFieldBad
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = HIGH_LEVEL_CALL, dest:TMP_2(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_3

Name: TMP_3 Function: testFieldBad
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenA_5(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_1', 'reserveTokenA_5', 'reserveTokenA_4'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenB_3(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_2', 'reserveTokenB_4'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: testFieldBad
Num: -1
Den: -1
Address: 2
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
myfield_2(MyField) := ϕ(['myfield_1'])
[i]Type for myfield

Name: myfield Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_2(-> myfield_2) = REF_2 (c)+ TMP_3
[i]Type for REF_2

Name: REF_2 Function: testFieldBad
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4(uint256) -> myfield_2.amount
[i]Type for REF_4

Name: myfield.amount Function: testFieldBad
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_4 = CONVERT reserveTokenB_3 to ITypicalTokenWrapper
Converting reserveTokenB_3

Name: reserveTokenB Function: testFieldBad
Num: -1
Den: -1
Address: 2
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_4

Name: TMP_4 Function: testFieldBad
Num: -1
Den: -1
Address: 2
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_5(uint256) = HIGH_LEVEL_CALL, dest:TMP_4(ITypicalTokenWrapper), function:balanceOf, arguments:['msg.sender']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
2
[i]Type for TMP_5

Name: TMP_5 Function: testFieldBad
Num: 2
Den: 
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenB_4(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_3', 'reserveTokenB_4'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
myfield_3(MyField) := ϕ(['myfield_2'])
[i]Type for myfield

Name: myfield Function: testFieldBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
REF_4(-> myfield_3) = REF_4 (c)+ TMP_5
[i]Type for REF_4

Name: REF_4 Function: testFieldBad
Num: 2
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Address: 1, Label: global:reserveTokenA
Address: 2, Label: global:reserveTokenB
Address: -999, Label: constructor:_reserveTokenA
Address: -998, Label: constructor:_reserveTokenB
Head Addr: 1
    Norm: 0
    Set: {1}
Head Addr: 2
    Norm: 6
    Set: {2}
Head Addr: -999
    Norm: 0
    Set: {-999}
Head Addr: -998
    Norm: 6
    Set: {-998}
Function count: 3
