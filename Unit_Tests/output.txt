Checking CrossContractTest
Checking IImportedContract
Checking ITypicalOracle
Checking ITypicalTokenWrapper
Finding type for importedContract(address ... )
prev address? u
global assignment: 1
1
Head Addr: 1
    Norm: 0
    Set: {1}
Finding type for reserveTokenA(address ... )
prev address? u
global assignment: 2
2
Head Addr: 2
    Norm: 0
    Set: {2}
Finding type for reserveTokenB(address ... )
prev address? u
global assignment: 3
3
Head Addr: 3
    Norm: 0
    Set: {3}



constructor
Finding type for _reserveTokenA(address ... )
prev address? u
-999
Head Addr: -999
    Norm: 0
    Set: {-999}
Finding type for _reserveTokenB(address ... )
prev address? u
-998
Head Addr: -998
    Norm: 0
    Set: {-998}
Param: 0
    num: []
    den: []
    norm: u
    link: _reserveTokenA
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: _reserveTokenB
    fields: []
    fintype: -1


reserveTokenA_1(address) := _reserveTokenA_1(address)
reserveTokenB_1(address) := _reserveTokenB_1(address)


_reserveTokenA_1
_reserveTokenA
reserveTokenA_1(address) := _reserveTokenA_1(address)
[i]Type for reserveTokenA

Name: reserveTokenA Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserveTokenA
 To type: None
_reserveTokenB_1
_reserveTokenB
reserveTokenB_1(address) := _reserveTokenB_1(address)
[i]Type for reserveTokenB

Name: reserveTokenB Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserveTokenB
 To type: None


reserveTokenA_1(address) := _reserveTokenA_1(address)
reserveTokenB_1(address) := _reserveTokenB_1(address)


_reserveTokenA_1
_reserveTokenA
reserveTokenA_1(address) := _reserveTokenA_1(address)
[i]Type for reserveTokenA

Name: reserveTokenA Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserveTokenA
 To type: None
_reserveTokenB_1
_reserveTokenB
reserveTokenB_1(address) := _reserveTokenB_1(address)
[i]Type for reserveTokenB

Name: reserveTokenB Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserveTokenB
 To type: None



testCrossContract


reserveTokenA_2(address) := ϕ(['reserveTokenA_7', 'reserveTokenA_1', 'reserveTokenA_0'])
reserveTokenB_2(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_0', 'reserveTokenB_7'])
importedContract_1(address) := ϕ(['importedContract_0'])
TMP_0 = CONVERT importedContract_1 to IImportedContract
ic_1(IImportedContract) := TMP_0(IImportedContract)
HIGH_LEVEL_CALL, dest:ic_1(IImportedContract), function:setAToken, arguments:['reserveTokenA_2']  
reserveTokenA_3(address) := ϕ(['reserveTokenA_7', 'reserveTokenA_1', 'reserveTokenA_2'])
reserveTokenB_3(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_7', 'reserveTokenB_2'])
HIGH_LEVEL_CALL, dest:ic_1(IImportedContract), function:setBToken, arguments:['reserveTokenB_3']  
reserveTokenA_4(address) := ϕ(['reserveTokenA_7', 'reserveTokenA_1', 'reserveTokenA_3'])
reserveTokenB_4(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_3', 'reserveTokenB_7'])
TMP_3(uint256) = INTERNAL_CALL, CrossContractTest.seeReserveTotal(address,uint256)(reserveTokenA_4,0)
TMP_4(uint256) = INTERNAL_CALL, CrossContractTest.seeReserveTotal(address,uint256)(reserveTokenB_5,0)
TUPLE_0(uint256,uint256) = HIGH_LEVEL_CALL, dest:ic_1(IImportedContract), function:mixAdd, arguments:['TMP_3', 'TMP_4']  
reserveTokenA_7(address) := ϕ(['reserveTokenA_7', 'reserveTokenA_1', 'reserveTokenA_6'])
reserveTokenB_7(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_7', 'reserveTokenB_6'])
newA_1(uint256)= UNPACK TUPLE_0 index: 0 
newB_1(uint256)= UNPACK TUPLE_0 index: 1 
TMP_5(uint256) = newA_1 (c)+ newB_1
badSum_1(uint256) := TMP_5(uint256)


reserveTokenA
reserveTokenB
importedContract
reserveTokenA_2(address) := ϕ(['reserveTokenA_7', 'reserveTokenA_1', 'reserveTokenA_0'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testCrossContract
Num: -1
Den: -1
Address: 2
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
XXXX
reserveTokenB_2(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_0', 'reserveTokenB_7'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: testCrossContract
Num: -1
Den: -1
Address: 3
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
XXXX
importedContract_1(address) := ϕ(['importedContract_0'])
[i]Type for importedContract

Name: importedContract Function: testCrossContract
Num: -1
Den: -1
Address: 1
Norm: u
LF: importedContract
Value: u
Fields: 
Finance Type: undef
XXXX
importedContract_1
TMP_0 = CONVERT importedContract_1 to IImportedContract
Converting importedContract_1

Name: importedContract Function: testCrossContract
Num: -1
Den: -1
Address: 1
Norm: u
LF: importedContract
Value: u
Fields: 
Finance Type: undef
ImportedContract
[i]Type for TMP_0

Name: TMP_0 Function: testCrossContract
Num: -1
Den: -1
Address: 1
Norm: u
LF: ImportedContract
Value: u
Fields: 
Finance Type: undef
XXXX
ic_1(IImportedContract) := TMP_0(IImportedContract)
[i]Type for ic

Name: ic Function: testCrossContract
Num: -1
Den: -1
Address: 1
Norm: u
LF: ImportedContract
Value: u
Fields: 
Finance Type: undef
XXXX
ic_1
reserveTokenA_2
reserveTokenA
reserveTokenB
HIGH_LEVEL_CALL, dest:ic_1(IImportedContract), function:setAToken, arguments:['reserveTokenA_2']  
High Call: setAToken
reserveTokenA_3(address) := ϕ(['reserveTokenA_7', 'reserveTokenA_1', 'reserveTokenA_2'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testCrossContract
Num: -1
Den: -1
Address: 2
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
XXXX
reserveTokenB_3(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_7', 'reserveTokenB_2'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: testCrossContract
Num: -1
Den: -1
Address: 3
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
XXXX
reserveTokenB_3
ic_1
reserveTokenA
reserveTokenB
HIGH_LEVEL_CALL, dest:ic_1(IImportedContract), function:setBToken, arguments:['reserveTokenB_3']  
High Call: setBToken
reserveTokenA_4(address) := ϕ(['reserveTokenA_7', 'reserveTokenA_1', 'reserveTokenA_3'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: testCrossContract
Num: -1
Den: -1
Address: 2
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
XXXX
reserveTokenB_4(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_3', 'reserveTokenB_7'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: testCrossContract
Num: -1
Den: -1
Address: 3
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
XXXX
reserveTokenA_4
reserveTokenB_5
reserveTokenB
ic_1
reserveTokenA
reserveTokenB
TMP_3(uint256) = INTERNAL_CALL, CrossContractTest.seeReserveTotal(address,uint256)(reserveTokenA_4,0)
reserve
reserve_1(address) := ϕ(['reserveTokenA_4', 'reserveTokenB_5'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
reserve_1
reserve
amount_1
amount
TMP_6 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_6

Name: TMP_6 Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_7 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 4
4
4
[i]Type for TMP_7

Name: TMP_7 Function: seeReserveTotal
Num: -1
Den: -1
Address: 4
Norm: u
LF: CrossContractTest
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_8(uint256) = HIGH_LEVEL_CALL, dest:TMP_6(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_7']  
High Call: balanceOf
Running querryfc
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
u
