Checking BalanceAndNormTest
Checking ITypicalTokenWrapper
Finding type for reserveTokenA(address ... )
Finding type for reserveTokenB(address ... )



constructor
Finding type for _reserveTokenA(address ... )
Finding type for _reserveTokenB(address ... )
Param: 0
    num: []
    den: []
    norm: u
    link: _reserveTokenA
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: _reserveTokenB
    fields: []
    fintype: -1


reserveTokenA_1(address) := _reserveTokenA_1(address)
reserveTokenB_1(address) := _reserveTokenB_1(address)


_reserveTokenA_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserveTokenA
reserveTokenA_1(address) := _reserveTokenA_1(address)
[i]Type for reserveTokenA

Name: reserveTokenA Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserveTokenA
 To type: None
_reserveTokenB_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_reserveTokenB
reserveTokenB_1(address) := _reserveTokenB_1(address)
[i]Type for reserveTokenB

Name: reserveTokenB Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserveTokenB
 To type: None


reserveTokenA_1(address) := _reserveTokenA_1(address)
reserveTokenB_1(address) := _reserveTokenB_1(address)


_reserveTokenA_1

Name: _reserveTokenA Function: None
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Value: u
Fields: 
Finance Type: undef
_reserveTokenA
reserveTokenA_1(address) := _reserveTokenA_1(address)
[i]Type for reserveTokenA

Name: reserveTokenA Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserveTokenA
 To type: None
_reserveTokenB_1

Name: _reserveTokenB Function: None
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenB
Value: u
Fields: 
Finance Type: undef
_reserveTokenB
reserveTokenB_1(address) := _reserveTokenB_1(address)
[i]Type for reserveTokenB

Name: reserveTokenB Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserveTokenB
 To type: None



seeReserveTotal
Finding type for reserve(address ... )
Finding type for amount(uint256 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: reserve
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_12', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenA_9', 'reserveTokenB_3'])
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
TMP_1 = CONVERT this to address
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
TMP_3(uint256) = TMP_2 (c)+ amount_1
amt_1(uint256) := TMP_3(uint256)
RETURN amt_1


reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_12', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenA_9', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount
reserve_1

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserve
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 1
1
1
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
High Call: balanceOf
Running querryfc
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
u
