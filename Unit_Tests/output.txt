Checking ITypicalOracle
Checking ITypicalTokenWrapper
Checking PriceAndExtTest
Finding type for oracle(address ... )
prev address? u
global assignment: 1
1
Head Addr: 1
    Norm: 0
    Set: {1}
Finding type for priceAInB(uint256 ... )
Finding type for reserveTokenA(address ... )
prev address? u
global assignment: 2
2
Head Addr: 2
    Norm: 0
    Set: {2}
Finding type for reserveTokenB(address ... )
prev address? u
global assignment: 3
3
Head Addr: 3
    Norm: 0
    Set: {3}



constructor
Finding type for _reserveTokenA(address ... )
prev address? u
-999
Head Addr: -999
    Norm: 0
    Set: {-999}
Finding type for _reserveTokenB(address ... )
prev address? u
-998
Head Addr: -998
    Norm: 0
    Set: {-998}
Param: 0
    num: []
    den: []
    norm: u
    link: _reserveTokenA
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: _reserveTokenB
    fields: []
    fintype: -1


reserveTokenA_1(address) := _reserveTokenA_1(address)
reserveTokenB_1(address) := _reserveTokenB_1(address)


reserveTokenA_1(address) := _reserveTokenA_1(address)
[i]Type for reserveTokenA

Name: reserveTokenA Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: _reserveTokenA
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserveTokenA
 To type: None
reserveTokenB_1(address) := _reserveTokenB_1(address)
[i]Type for reserveTokenB

Name: reserveTokenB Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: _reserveTokenB
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserveTokenB
 To type: None


reserveTokenA_1(address) := _reserveTokenA_1(address)
reserveTokenB_1(address) := _reserveTokenB_1(address)


reserveTokenA_1(address) := _reserveTokenA_1(address)
[i]Type for reserveTokenA

Name: reserveTokenA Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: _reserveTokenA
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserveTokenA
 To type: None
reserveTokenB_1(address) := _reserveTokenB_1(address)
[i]Type for reserveTokenB

Name: reserveTokenB Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: _reserveTokenB
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reserveTokenB
 To type: None



priceIncluded
Finding type for A(address ... )
prev address? u
-997
Head Addr: -997
    Norm: 0
    Set: {-997}
Finding type for B(address ... )
prev address? u
-996
Head Addr: -996
    Norm: 0
    Set: {-996}
Param: 0
    num: []
    den: []
    norm: u
    link: A
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: B
    fields: []
    fintype: -1


A_1(address) := ϕ(['reserveTokenA_4'])
B_1(address) := ϕ(['reserveTokenB_4'])
TMP_0 = CONVERT A_1 to ITypicalTokenWrapper
TMP_1 = CONVERT this to address
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
TMP_3 = CONVERT B_1 to ITypicalTokenWrapper
TMP_4 = CONVERT this to address
TMP_5(uint256) = HIGH_LEVEL_CALL, dest:TMP_3(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_4']  
TMP_6(uint256) = TMP_2 (c)/ TMP_5
price_1(uint256) := TMP_6(uint256)
RETURN price_1


A_1(address) := ϕ(['reserveTokenA_4'])
[i]Type for A

Name: A Function: priceIncluded
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
B_1(address) := ϕ(['reserveTokenB_4'])
[i]Type for B

Name: B Function: priceIncluded
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_0 = CONVERT A_1 to ITypicalTokenWrapper
Converting A_1

Name: A_1 Function: priceIncluded
Num: 
Den: 
Address: -997
Norm: u
LF: A
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: priceIncluded
Num: 
Den: 
Address: -997
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 4
4
4
[i]Type for TMP_1

Name: TMP_1 Function: priceIncluded
Num: -1
Den: -1
Address: 4
Norm: u
LF: PriceAndExtTest
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
High Call: balanceOf
Running querryfc
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-997
[i]Type for TMP_2

Name: TMP_2 Function: priceIncluded
Num: -997
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_3 = CONVERT B_1 to ITypicalTokenWrapper
Converting B_1

Name: B_1 Function: priceIncluded
Num: 
Den: 
Address: -996
Norm: u
LF: B
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_3

Name: TMP_3 Function: priceIncluded
Num: 
Den: 
Address: -996
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_4 = CONVERT this to address
Converting this
4
[i]Type for TMP_4

Name: TMP_4 Function: priceIncluded
Num: -1
Den: -1
Address: 4
Norm: u
LF: PriceAndExtTest
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_5(uint256) = HIGH_LEVEL_CALL, dest:TMP_3(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_4']  
High Call: balanceOf
Running querryfc
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-996
[i]Type for TMP_5

Name: TMP_5 Function: priceIncluded
Num: -996
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_6(uint256) = TMP_2 (c)/ TMP_5
[i]Type for TMP_6

Name: TMP_6 Function: priceIncluded
Num: -997
Den: -996
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(uint256) := TMP_6(uint256)
[i]Type for price

Name: price Function: priceIncluded
Num: -997
Den: -996
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN price_1


A_1(address) := ϕ(['reserveTokenA_4'])
B_1(address) := ϕ(['reserveTokenB_4'])
TMP_0 = CONVERT A_1 to ITypicalTokenWrapper
TMP_1 = CONVERT this to address
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
TMP_3 = CONVERT B_1 to ITypicalTokenWrapper
TMP_4 = CONVERT this to address
TMP_5(uint256) = HIGH_LEVEL_CALL, dest:TMP_3(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_4']  
TMP_6(uint256) = TMP_2 (c)/ TMP_5
price_1(uint256) := TMP_6(uint256)
RETURN price_1


A_1(address) := ϕ(['reserveTokenA_4'])
[i]Type for A

Name: A Function: priceIncluded
Num: 
Den: 
Address: u
Norm: u
LF: A
Value: u
Fields: 
Finance Type: undef
XXXX
B_1(address) := ϕ(['reserveTokenB_4'])
[i]Type for B

Name: B Function: priceIncluded
Num: 
Den: 
Address: u
Norm: u
LF: B
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_0 = CONVERT A_1 to ITypicalTokenWrapper
Converting A_1

Name: A_1 Function: priceIncluded
Num: 
Den: 
Address: -997
Norm: u
LF: A
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: priceIncluded
Num: 
Den: 
Address: -997
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1 = CONVERT this to address
Converting this
4
[i]Type for TMP_1

Name: TMP_1 Function: priceIncluded
Num: 
Den: 
Address: 4
Norm: u
LF: PriceAndExtTest
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
High Call: balanceOf
Running querryfc
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-997
[i]Type for TMP_2

Name: TMP_2 Function: priceIncluded
Num: -997
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_3 = CONVERT B_1 to ITypicalTokenWrapper
Converting B_1

Name: B_1 Function: priceIncluded
Num: 
Den: 
Address: -996
Norm: u
LF: B
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_3

Name: TMP_3 Function: priceIncluded
Num: 
Den: 
Address: -996
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_4 = CONVERT this to address
Converting this
4
[i]Type for TMP_4

Name: TMP_4 Function: priceIncluded
Num: 
Den: 
Address: 4
Norm: u
LF: PriceAndExtTest
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_5(uint256) = HIGH_LEVEL_CALL, dest:TMP_3(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_4']  
High Call: balanceOf
Running querryfc
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-996
[i]Type for TMP_5

Name: TMP_5 Function: priceIncluded
Num: -996
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_6(uint256) = TMP_2 (c)/ TMP_5
[i]Type for TMP_6

Name: TMP_6 Function: priceIncluded
Num: -997
Den: -996
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
price_1(uint256) := TMP_6(uint256)
[i]Type for price

Name: price Function: priceIncluded
Num: -997
Den: -996
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN price_1



priceGlobal


priceAInB_1(uint256) := ϕ(['priceAInB_5', 'priceAInB_0'])
RETURN priceAInB_1


priceAInB_1(uint256) := ϕ(['priceAInB_5', 'priceAInB_0'])
[i]Type for priceAInB

Name: priceAInB Function: priceGlobal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN priceAInB_1


priceAInB_1(uint256) := ϕ(['priceAInB_5', 'priceAInB_0'])
RETURN priceAInB_1


priceAInB_1(uint256) := ϕ(['priceAInB_5', 'priceAInB_0'])
[i]Type for priceAInB

Name: priceAInB Function: priceGlobal
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN priceAInB_1



priceExternal
Finding type for A(address ... )
prev address? u
-995
Head Addr: -995
    Norm: 0
    Set: {-995}
Finding type for B(address ... )
prev address? u
-994
Head Addr: -994
    Norm: 0
    Set: {-994}
Param: 0
    num: []
    den: []
    norm: u
    link: A
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: B
    fields: []
    fintype: -1


A_1(address) := ϕ(['reserveTokenA_10'])
B_1(address) := ϕ(['reserveTokenB_11'])
oracle_1(address) := ϕ(['oracle_2', 'oracle_0'])
TMP_7 = CONVERT oracle_1 to ITypicalOracle
TMP_8(uint256) = HIGH_LEVEL_CALL, dest:TMP_7(ITypicalOracle), function:price, arguments:['A_1', 'B_1']  
oracle_2(address) := ϕ(['oracle_2', 'oracle_1'])
RETURN TMP_8


A_1(address) := ϕ(['reserveTokenA_10'])
[i]Type for A

Name: A Function: priceExternal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
B_1(address) := ϕ(['reserveTokenB_11'])
[i]Type for B

Name: B Function: priceExternal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
oracle_1(address) := ϕ(['oracle_2', 'oracle_0'])
[i]Type for oracle

Name: oracle Function: priceExternal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_7 = CONVERT oracle_1 to ITypicalOracle
Converting oracle_1

Name: oracle Function: priceExternal
Num: -1
Den: -1
Address: 1
Norm: u
LF: oracle
Value: u
Fields: 
Finance Type: undef
TypicalOracle
[i]Type for TMP_7

Name: TMP_7 Function: priceExternal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalOracle
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_8(uint256) = HIGH_LEVEL_CALL, dest:TMP_7(ITypicalOracle), function:price, arguments:['A_1', 'B_1']  
High Call: price
Running querryfc
Written func info: TypicalOracle, price
