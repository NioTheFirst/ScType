Checking BalanceAndNormTest
Checking ITypicalTokenWrapper
Finding type for reserveTokenA...
address
prev address? u
global assignment: 1
1
Finding type for reserveTokenB...
address
prev address? u
global assignment: 2
2



constructor
Finding type for _reserveTokenA...
address
prev address? u
-999
Finding type for _reserveTokenB...
address
prev address? u
-998
Param: 0
    num: []
    den: []
    norm: u
    link: _reserveTokenA
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: _reserveTokenB
    fields: []
    fintype: -1


reserveTokenA_1(address) := _reserveTokenA_1(address)
reserveTokenB_1(address) := _reserveTokenB_1(address)


reserveTokenA_1(address) := _reserveTokenA_1(address)
[i]Type for reserveTokenA

Name: reserveTokenA Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
Copied reserveTokenA

Name: reserveTokenA Function: constructor
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
reserveTokenB_1(address) := _reserveTokenB_1(address)
[i]Type for reserveTokenB

Name: reserveTokenB Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: _reserveTokenB
Fields: 
Finance Type: undef
Copied reserveTokenB

Name: reserveTokenB Function: constructor
Num: -1
Den: -1
Address: -998
Norm: u
LF: _reserveTokenB
Fields: 
Finance Type: undef


reserveTokenA_1(address) := _reserveTokenA_1(address)
reserveTokenB_1(address) := _reserveTokenB_1(address)


reserveTokenA_1(address) := _reserveTokenA_1(address)
[i]Type for reserveTokenA

Name: reserveTokenA Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
Copied reserveTokenA

Name: reserveTokenA Function: constructor
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
reserveTokenB_1(address) := _reserveTokenB_1(address)
[i]Type for reserveTokenB

Name: reserveTokenB Function: constructor
Num: 
Den: 
Address: -998
Norm: u
LF: _reserveTokenB
Fields: 
Finance Type: undef
Copied reserveTokenB

Name: reserveTokenB Function: constructor
Num: -1
Den: -1
Address: -998
Norm: u
LF: _reserveTokenB
Fields: 
Finance Type: undef



seeReserveTotal
Finding type for reserve...
address
prev address? u
-997
Finding type for amount...
uint256
Param: 0
    num: []
    den: []
    norm: u
    link: reserve
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
TMP_1 = CONVERT this to address
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
TMP_3(uint256) = TMP_2 + amount_1
amt_1(uint256) := TMP_3(uint256)
RETURN amt_1


reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: 
Den: 
Address: -997
Norm: u
LF: reserve
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: 
Den: 
Address: -997
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
new address made
prev address? u
global assignment: 3
3
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-997
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -997
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -997
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -997
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1


reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
TMP_1 = CONVERT this to address
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
TMP_3(uint256) = TMP_2 + amount_1
amt_1(uint256) := TMP_3(uint256)
RETURN amt_1


reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserve
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: 
Den: 
Address: -997
Norm: u
LF: reserve
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: 
Den: 
Address: -997
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-997
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -997
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -997
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -997
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1



addBalanceGood
Finding type for amountA...
uint256
Finding type for amountB...
uint256
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


reserveTokenA_2(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
TMP_4(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_2,amountA_1)
totalA_1(uint256) := TMP_4(uint256)
TMP_5(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_3,amountB_1)
totalB_1(uint256) := TMP_5(uint256)
TMP_6(uint256) = totalA_1 + totalB_1
total_1(uint256) := TMP_6(uint256)
RETURN total_1


reserveTokenA_2(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: addBalanceGood
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_4(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_2,amountA_1)
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserve
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_4

Name: TMP_4 Function: addBalanceGood
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
totalA_1(uint256) := TMP_4(uint256)
[i]Type for totalA

Name: totalA Function: addBalanceGood
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_5(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_3,amountB_1)
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_5

Name: TMP_5 Function: addBalanceGood
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
totalB_1(uint256) := TMP_5(uint256)
[i]Type for totalB

Name: totalB Function: addBalanceGood
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_6(uint256) = totalA_1 + totalB_1
[i]Type for TMP_6

Name: TMP_6 Function: addBalanceGood
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
total_1(uint256) := TMP_6(uint256)
[i]Type for total

Name: total Function: addBalanceGood
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN total_1


reserveTokenA_2(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
TMP_4(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_2,amountA_1)
totalA_1(uint256) := TMP_4(uint256)
TMP_5(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_3,amountB_1)
totalB_1(uint256) := TMP_5(uint256)
TMP_6(uint256) = totalA_1 + totalB_1
total_1(uint256) := TMP_6(uint256)
RETURN total_1


reserveTokenA_2(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: addBalanceGood
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TMP_4(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_2,amountA_1)
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_4

Name: TMP_4 Function: addBalanceGood
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
totalA_1(uint256) := TMP_4(uint256)
[i]Type for totalA

Name: totalA Function: addBalanceGood
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_5(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_3,amountB_1)
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_5

Name: TMP_5 Function: addBalanceGood
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
totalB_1(uint256) := TMP_5(uint256)
[i]Type for totalB

Name: totalB Function: addBalanceGood
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_6(uint256) = totalA_1 + totalB_1
[i]Type for TMP_6

Name: TMP_6 Function: addBalanceGood
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
total_1(uint256) := TMP_6(uint256)
[i]Type for total

Name: total Function: addBalanceGood
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN total_1



addBalanceBuild
Finding type for amountA...
uint256
Finding type for tokenC...
address
prev address? u
-996
Finding type for amountC...
uint256
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: tokenC
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


reserveTokenA_5(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
TMP_7(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_5,amountA_1)
totalA_1(uint256) := TMP_7(uint256)
TMP_8(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(tokenC_1,amountC_1)
totalC_1(uint256) := TMP_8(uint256)
TMP_9(uint256) = totalA_1 + totalC_1
total_1(uint256) := TMP_9(uint256)
RETURN total_1


reserveTokenA_5(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: addBalanceBuild
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_7(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_5,amountA_1)
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_7

Name: TMP_7 Function: addBalanceBuild
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
totalA_1(uint256) := TMP_7(uint256)
[i]Type for totalA

Name: totalA Function: addBalanceBuild
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_8(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(tokenC_1,amountC_1)
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: 
Den: 
Address: -996
Norm: u
LF: tokenC
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: 
Den: 
Address: -996
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-996
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: tokenC
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: 
Den: 
Address: -996
Norm: u
LF: tokenC
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: 
Den: 
Address: -996
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-996
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_8

Name: TMP_8 Function: addBalanceBuild
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
totalC_1(uint256) := TMP_8(uint256)
[i]Type for totalC

Name: totalC Function: addBalanceBuild
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_9(uint256) = totalA_1 + totalC_1
{-996: 1, -999: -1}
{-996: -999, -999: -996}
Error with TMP_9 in function addBalanceBuild
Error with: TMP_9 in function addBalanceBuild
[i]Type for TMP_9

Name: TMP_9 Function: addBalanceBuild
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
total_1(uint256) := TMP_9(uint256)
[i]Type for total

Name: total Function: addBalanceBuild
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN total_1


reserveTokenA_5(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
TMP_7(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_5,amountA_1)
totalA_1(uint256) := TMP_7(uint256)
TMP_8(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(tokenC_1,amountC_1)
totalC_1(uint256) := TMP_8(uint256)
TMP_9(uint256) = totalA_1 + totalC_1
total_1(uint256) := TMP_9(uint256)
RETURN total_1


reserveTokenA_5(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: addBalanceBuild
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TMP_7(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_5,amountA_1)
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: tokenC
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_7

Name: TMP_7 Function: addBalanceBuild
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
totalA_1(uint256) := TMP_7(uint256)
[i]Type for totalA

Name: totalA Function: addBalanceBuild
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_8(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(tokenC_1,amountC_1)
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: 
Den: 
Address: -996
Norm: u
LF: tokenC
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: 
Den: 
Address: -996
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-996
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: tokenC
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: 
Den: 
Address: -996
Norm: u
LF: tokenC
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: 
Den: 
Address: -996
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-996
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_8

Name: TMP_8 Function: addBalanceBuild
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
totalC_1(uint256) := TMP_8(uint256)
[i]Type for totalC

Name: totalC Function: addBalanceBuild
Num: -996
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_9(uint256) = totalA_1 + totalC_1
{-996: 1, -999: -1}
{-996: -999, -999: -996}
[i]Type for TMP_9

Name: TMP_9 Function: addBalanceBuild
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
total_1(uint256) := TMP_9(uint256)
[i]Type for total

Name: total Function: addBalanceBuild
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN total_1



addBalanceBad
Finding type for amountA...
uint256
Finding type for amountB...
uint256
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


reserveTokenA_7(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
reserveTokenB_2(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_0', 'reserveTokenB_4'])
TMP_10(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_7,amountA_1)
totalA_1(uint256) := TMP_10(uint256)
TMP_11(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenB_3,amountB_1)
totalB_1(uint256) := TMP_11(uint256)
TMP_12(uint256) = totalA_1 + totalB_1
total_1(uint256) := TMP_12(uint256)
RETURN total_1


reserveTokenA_7(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: addBalanceBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
reserveTokenB_2(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_0', 'reserveTokenB_4'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: addBalanceBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_10(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_7,amountA_1)
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: tokenC
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_10

Name: TMP_10 Function: addBalanceBad
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
totalA_1(uint256) := TMP_10(uint256)
[i]Type for totalA

Name: totalA Function: addBalanceBad
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_11(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenB_3,amountB_1)
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -998
Norm: u
LF: _reserveTokenB
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -998
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-998
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenB
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -998
Norm: u
LF: _reserveTokenB
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -998
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-998
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_11

Name: TMP_11 Function: addBalanceBad
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
totalB_1(uint256) := TMP_11(uint256)
[i]Type for totalB

Name: totalB Function: addBalanceBad
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_12(uint256) = totalA_1 + totalB_1
{-998: 1, -999: -1}
{-998: -999, -999: -998}
Error with TMP_12 in function addBalanceBad
Error with: TMP_12 in function addBalanceBad
[i]Type for TMP_12

Name: TMP_12 Function: addBalanceBad
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
total_1(uint256) := TMP_12(uint256)
[i]Type for total

Name: total Function: addBalanceBad
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN total_1


reserveTokenA_7(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
reserveTokenB_2(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_0', 'reserveTokenB_4'])
TMP_10(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_7,amountA_1)
totalA_1(uint256) := TMP_10(uint256)
TMP_11(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenB_3,amountB_1)
totalB_1(uint256) := TMP_11(uint256)
TMP_12(uint256) = totalA_1 + totalB_1
total_1(uint256) := TMP_12(uint256)
RETURN total_1


reserveTokenA_7(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: addBalanceBad
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
reserveTokenB_2(address) := ϕ(['reserveTokenB_1', 'reserveTokenB_0', 'reserveTokenB_4'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: addBalanceBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_10(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_7,amountA_1)
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenB
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_10

Name: TMP_10 Function: addBalanceBad
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
totalA_1(uint256) := TMP_10(uint256)
[i]Type for totalA

Name: totalA Function: addBalanceBad
Num: -999
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_11(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenB_3,amountB_1)
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -998
Norm: u
LF: _reserveTokenB
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -998
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-998
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_2', 'reserveTokenA_7', 'tokenC_1', 'reserveTokenA_3', 'reserveTokenA_5', 'reserveTokenB_3'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenB
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountC_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: -998
Norm: u
LF: _reserveTokenB
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: -998
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-998
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_11

Name: TMP_11 Function: addBalanceBad
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
totalB_1(uint256) := TMP_11(uint256)
[i]Type for totalB

Name: totalB Function: addBalanceBad
Num: -998
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_12(uint256) = totalA_1 + totalB_1
{-998: 1, -999: -1}
{-998: -999, -999: -998}
[i]Type for TMP_12

Name: TMP_12 Function: addBalanceBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
total_1(uint256) := TMP_12(uint256)
[i]Type for total

Name: total Function: addBalanceBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN total_1



normalizeToken
Finding type for token...
address
prev address? u
-995
Finding type for amount...
uint256
Param: 0
    num: []
    den: []
    norm: u
    link: token
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


token_1(address) := ϕ(['reserveTokenA_11', 'reserveTokenA_9'])
amount_1(uint256) := ϕ(['amountA_1', 'amountA_1'])
TMP_13 = CONVERT token_1 to ITypicalTokenWrapper
TMP_14(uint8) = HIGH_LEVEL_CALL, dest:TMP_13(ITypicalTokenWrapper), function:decimals, arguments:[]  
decimals_1(uint256) := TMP_14(uint8)
TMP_15(uint256) = 18 - decimals_1
TMP_16(uint256) = 10 ** TMP_15
TMP_17(uint256) = amount_1 * TMP_16
amount_2(uint256) := TMP_17(uint256)
RETURN amount_2


token_1(address) := ϕ(['reserveTokenA_11', 'reserveTokenA_9'])
[i]Type for token

Name: token Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_13 = CONVERT token_1 to ITypicalTokenWrapper
Converting token_1

Name: token_1 Function: normalizeToken
Num: 
Den: 
Address: -995
Norm: u
LF: token
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_13

Name: TMP_13 Function: normalizeToken
Num: 
Den: 
Address: -995
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_14(uint8) = HIGH_LEVEL_CALL, dest:TMP_13(ITypicalTokenWrapper), function:decimals, arguments:[]  
Written func info: TypicalTokenWrapper, decimals
Handling balance function!
-995
[i]Type for TMP_14

Name: TMP_14 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
decimals_1(uint256) := TMP_14(uint8)
[i]Type for decimals

Name: decimals Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_15(uint256) = 18 - decimals_1
[i]Type for TMP_15

Name: TMP_15 Function: normalizeToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Fields: 
Finance Type: undef
TMP_16(uint256) = 10 ** TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: normalizeToken
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_17(uint256) = amount_1 * TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: normalizeToken
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
amount_2(uint256) := TMP_17(uint256)
[i]Type for amount

Name: amount Function: normalizeToken
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
RETURN amount_2


token_1(address) := ϕ(['reserveTokenA_11', 'reserveTokenA_9'])
amount_1(uint256) := ϕ(['amountA_1', 'amountA_1'])
TMP_13 = CONVERT token_1 to ITypicalTokenWrapper
TMP_14(uint8) = HIGH_LEVEL_CALL, dest:TMP_13(ITypicalTokenWrapper), function:decimals, arguments:[]  
decimals_1(uint256) := TMP_14(uint8)
TMP_15(uint256) = 18 - decimals_1
TMP_16(uint256) = 10 ** TMP_15
TMP_17(uint256) = amount_1 * TMP_16
amount_2(uint256) := TMP_17(uint256)
RETURN amount_2


token_1(address) := ϕ(['reserveTokenA_11', 'reserveTokenA_9'])
[i]Type for token

Name: token Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: token
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_13 = CONVERT token_1 to ITypicalTokenWrapper
Converting token_1

Name: token_1 Function: normalizeToken
Num: 
Den: 
Address: -995
Norm: u
LF: token
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_13

Name: TMP_13 Function: normalizeToken
Num: 
Den: 
Address: -995
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_14(uint8) = HIGH_LEVEL_CALL, dest:TMP_13(ITypicalTokenWrapper), function:decimals, arguments:[]  
Written func info: TypicalTokenWrapper, decimals
Handling balance function!
-995
[i]Type for TMP_14

Name: TMP_14 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
decimals_1(uint256) := TMP_14(uint8)
[i]Type for decimals

Name: decimals Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_15(uint256) = 18 - decimals_1
[i]Type for TMP_15

Name: TMP_15 Function: normalizeToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Fields: 
Finance Type: undef
TMP_16(uint256) = 10 ** TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_17(uint256) = amount_1 * TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
amount_2(uint256) := TMP_17(uint256)
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
RETURN amount_2



normComarisonBad
Finding type for amountA...
uint256
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


reserveTokenA_9(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
TMP_18(uint256) = INTERNAL_CALL, BalanceAndNormTest.normalizeToken(address,uint256)(reserveTokenA_9,amountA_1)
normAmtA_1(uint256) := TMP_18(uint256)
TMP_19(uint256) = normAmtA_1 + amountA_1
badSum_1(uint256) := TMP_19(uint256)
RETURN badSum_1


reserveTokenA_9(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: normComarisonBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_18(uint256) = INTERNAL_CALL, BalanceAndNormTest.normalizeToken(address,uint256)(reserveTokenA_9,amountA_1)
token_1(address) := ϕ(['reserveTokenA_11', 'reserveTokenA_9'])
[i]Type for token

Name: token Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: token
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_13 = CONVERT token_1 to ITypicalTokenWrapper
Converting token_1

Name: token_1 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_13

Name: TMP_13 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_14(uint8) = HIGH_LEVEL_CALL, dest:TMP_13(ITypicalTokenWrapper), function:decimals, arguments:[]  
Written func info: TypicalTokenWrapper, decimals
Handling balance function!
-999
[i]Type for TMP_14

Name: TMP_14 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
decimals_1(uint256) := TMP_14(uint8)
[i]Type for decimals

Name: decimals Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_15(uint256) = 18 - decimals_1
[i]Type for TMP_15

Name: TMP_15 Function: normalizeToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Fields: 
Finance Type: undef
TMP_16(uint256) = 10 ** TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_17(uint256) = amount_1 * TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
amount_2(uint256) := TMP_17(uint256)
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
RETURN amount_2
token_1(address) := ϕ(['reserveTokenA_11', 'reserveTokenA_9'])
[i]Type for token

Name: token Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_13 = CONVERT token_1 to ITypicalTokenWrapper
Converting token_1

Name: token_1 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_13

Name: TMP_13 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_14(uint8) = HIGH_LEVEL_CALL, dest:TMP_13(ITypicalTokenWrapper), function:decimals, arguments:[]  
Written func info: TypicalTokenWrapper, decimals
Handling balance function!
-999
[i]Type for TMP_14

Name: TMP_14 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
decimals_1(uint256) := TMP_14(uint8)
[i]Type for decimals

Name: decimals Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_15(uint256) = 18 - decimals_1
[i]Type for TMP_15

Name: TMP_15 Function: normalizeToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Fields: 
Finance Type: undef
TMP_16(uint256) = 10 ** TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_17(uint256) = amount_1 * TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
amount_2(uint256) := TMP_17(uint256)
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
RETURN amount_2
[i]Type for TMP_18

Name: TMP_18 Function: normComarisonBad
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
normAmtA_1(uint256) := TMP_18(uint256)
[i]Type for normAmtA

Name: normAmtA Function: normComarisonBad
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_19(uint256) = normAmtA_1 + amountA_1
[i]Type for TMP_19

Name: TMP_19 Function: normComarisonBad
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
badSum_1(uint256) := TMP_19(uint256)
[i]Type for badSum

Name: badSum Function: normComarisonBad
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
RETURN badSum_1


reserveTokenA_9(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
TMP_18(uint256) = INTERNAL_CALL, BalanceAndNormTest.normalizeToken(address,uint256)(reserveTokenA_9,amountA_1)
normAmtA_1(uint256) := TMP_18(uint256)
TMP_19(uint256) = normAmtA_1 + amountA_1
badSum_1(uint256) := TMP_19(uint256)
RETURN badSum_1


reserveTokenA_9(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: normComarisonBad
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TMP_18(uint256) = INTERNAL_CALL, BalanceAndNormTest.normalizeToken(address,uint256)(reserveTokenA_9,amountA_1)
token_1(address) := ϕ(['reserveTokenA_11', 'reserveTokenA_9'])
[i]Type for token

Name: token Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_13 = CONVERT token_1 to ITypicalTokenWrapper
Converting token_1

Name: token_1 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_13

Name: TMP_13 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_14(uint8) = HIGH_LEVEL_CALL, dest:TMP_13(ITypicalTokenWrapper), function:decimals, arguments:[]  
Written func info: TypicalTokenWrapper, decimals
Handling balance function!
-999
[i]Type for TMP_14

Name: TMP_14 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
decimals_1(uint256) := TMP_14(uint8)
[i]Type for decimals

Name: decimals Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_15(uint256) = 18 - decimals_1
[i]Type for TMP_15

Name: TMP_15 Function: normalizeToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Fields: 
Finance Type: undef
TMP_16(uint256) = 10 ** TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_17(uint256) = amount_1 * TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
amount_2(uint256) := TMP_17(uint256)
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
RETURN amount_2
token_1(address) := ϕ(['reserveTokenA_11', 'reserveTokenA_9'])
[i]Type for token

Name: token Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_13 = CONVERT token_1 to ITypicalTokenWrapper
Converting token_1

Name: token_1 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_13

Name: TMP_13 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_14(uint8) = HIGH_LEVEL_CALL, dest:TMP_13(ITypicalTokenWrapper), function:decimals, arguments:[]  
Written func info: TypicalTokenWrapper, decimals
Handling balance function!
-999
[i]Type for TMP_14

Name: TMP_14 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
decimals_1(uint256) := TMP_14(uint8)
[i]Type for decimals

Name: decimals Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_15(uint256) = 18 - decimals_1
[i]Type for TMP_15

Name: TMP_15 Function: normalizeToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Fields: 
Finance Type: undef
TMP_16(uint256) = 10 ** TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_17(uint256) = amount_1 * TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
amount_2(uint256) := TMP_17(uint256)
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
RETURN amount_2
[i]Type for TMP_18

Name: TMP_18 Function: normComarisonBad
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
normAmtA_1(uint256) := TMP_18(uint256)
[i]Type for normAmtA

Name: normAmtA Function: normComarisonBad
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_19(uint256) = normAmtA_1 + amountA_1
[i]Type for TMP_19

Name: TMP_19 Function: normComarisonBad
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
badSum_1(uint256) := TMP_19(uint256)
[i]Type for badSum

Name: badSum Function: normComarisonBad
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
RETURN badSum_1



normComarisonGood
Finding type for amountA...
uint256
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


reserveTokenA_11(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
TMP_20(uint256) = INTERNAL_CALL, BalanceAndNormTest.normalizeToken(address,uint256)(reserveTokenA_11,amountA_1)
normAmtA_1(uint256) := TMP_20(uint256)
TMP_21(uint256) = normAmtA_1 + normAmtA_1
goodSum_1(uint256) := TMP_21(uint256)
RETURN goodSum_1


reserveTokenA_11(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: normComarisonGood
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_20(uint256) = INTERNAL_CALL, BalanceAndNormTest.normalizeToken(address,uint256)(reserveTokenA_11,amountA_1)
token_1(address) := ϕ(['reserveTokenA_11', 'reserveTokenA_9'])
[i]Type for token

Name: token Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_13 = CONVERT token_1 to ITypicalTokenWrapper
Converting token_1

Name: token_1 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_13

Name: TMP_13 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_14(uint8) = HIGH_LEVEL_CALL, dest:TMP_13(ITypicalTokenWrapper), function:decimals, arguments:[]  
Written func info: TypicalTokenWrapper, decimals
Handling balance function!
-999
[i]Type for TMP_14

Name: TMP_14 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
decimals_1(uint256) := TMP_14(uint8)
[i]Type for decimals

Name: decimals Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_15(uint256) = 18 - decimals_1
[i]Type for TMP_15

Name: TMP_15 Function: normalizeToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Fields: 
Finance Type: undef
TMP_16(uint256) = 10 ** TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_17(uint256) = amount_1 * TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
amount_2(uint256) := TMP_17(uint256)
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
RETURN amount_2
token_1(address) := ϕ(['reserveTokenA_11', 'reserveTokenA_9'])
[i]Type for token

Name: token Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_13 = CONVERT token_1 to ITypicalTokenWrapper
Converting token_1

Name: token_1 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_13

Name: TMP_13 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_14(uint8) = HIGH_LEVEL_CALL, dest:TMP_13(ITypicalTokenWrapper), function:decimals, arguments:[]  
Written func info: TypicalTokenWrapper, decimals
Handling balance function!
-999
[i]Type for TMP_14

Name: TMP_14 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
decimals_1(uint256) := TMP_14(uint8)
[i]Type for decimals

Name: decimals Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_15(uint256) = 18 - decimals_1
[i]Type for TMP_15

Name: TMP_15 Function: normalizeToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Fields: 
Finance Type: undef
TMP_16(uint256) = 10 ** TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_17(uint256) = amount_1 * TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
amount_2(uint256) := TMP_17(uint256)
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
RETURN amount_2
[i]Type for TMP_20

Name: TMP_20 Function: normComarisonGood
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
normAmtA_1(uint256) := TMP_20(uint256)
[i]Type for normAmtA

Name: normAmtA Function: normComarisonGood
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_21(uint256) = normAmtA_1 + normAmtA_1
Error with TMP_21 in function normComarisonGood
Error with: TMP_21 in function normComarisonGood
[i]Type for TMP_21

Name: TMP_21 Function: normComarisonGood
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
goodSum_1(uint256) := TMP_21(uint256)
[i]Type for goodSum

Name: goodSum Function: normComarisonGood
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN goodSum_1


reserveTokenA_11(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
TMP_20(uint256) = INTERNAL_CALL, BalanceAndNormTest.normalizeToken(address,uint256)(reserveTokenA_11,amountA_1)
normAmtA_1(uint256) := TMP_20(uint256)
TMP_21(uint256) = normAmtA_1 + normAmtA_1
goodSum_1(uint256) := TMP_21(uint256)
RETURN goodSum_1


reserveTokenA_11(address) := ϕ(['reserveTokenA_10', 'reserveTokenA_0', 'reserveTokenA_8', 'reserveTokenA_4', 'reserveTokenA_6', 'reserveTokenA_1', 'reserveTokenA_12'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: normComarisonGood
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TMP_20(uint256) = INTERNAL_CALL, BalanceAndNormTest.normalizeToken(address,uint256)(reserveTokenA_11,amountA_1)
token_1(address) := ϕ(['reserveTokenA_11', 'reserveTokenA_9'])
[i]Type for token

Name: token Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_13 = CONVERT token_1 to ITypicalTokenWrapper
Converting token_1

Name: token_1 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_13

Name: TMP_13 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_14(uint8) = HIGH_LEVEL_CALL, dest:TMP_13(ITypicalTokenWrapper), function:decimals, arguments:[]  
Written func info: TypicalTokenWrapper, decimals
Handling balance function!
-999
[i]Type for TMP_14

Name: TMP_14 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
decimals_1(uint256) := TMP_14(uint8)
[i]Type for decimals

Name: decimals Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_15(uint256) = 18 - decimals_1
[i]Type for TMP_15

Name: TMP_15 Function: normalizeToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Fields: 
Finance Type: undef
TMP_16(uint256) = 10 ** TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_17(uint256) = amount_1 * TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
amount_2(uint256) := TMP_17(uint256)
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
RETURN amount_2
token_1(address) := ϕ(['reserveTokenA_11', 'reserveTokenA_9'])
[i]Type for token

Name: token Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountA_1'])
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_13 = CONVERT token_1 to ITypicalTokenWrapper
Converting token_1

Name: token_1 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: _reserveTokenA
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_13

Name: TMP_13 Function: normalizeToken
Num: -1
Den: -1
Address: -999
Norm: u
LF: TypicalTokenWrapper
Fields: 
Finance Type: undef
TMP_14(uint8) = HIGH_LEVEL_CALL, dest:TMP_13(ITypicalTokenWrapper), function:decimals, arguments:[]  
Written func info: TypicalTokenWrapper, decimals
Handling balance function!
-999
[i]Type for TMP_14

Name: TMP_14 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
decimals_1(uint256) := TMP_14(uint8)
[i]Type for decimals

Name: decimals Function: normalizeToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
TMP_15(uint256) = 18 - decimals_1
[i]Type for TMP_15

Name: TMP_15 Function: normalizeToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Fields: 
Finance Type: undef
TMP_16(uint256) = 10 ** TMP_15
[i]Type for TMP_16

Name: TMP_16 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_17(uint256) = amount_1 * TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
amount_2(uint256) := TMP_17(uint256)
[i]Type for amount

Name: amount Function: normalizeToken
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
RETURN amount_2
[i]Type for TMP_20

Name: TMP_20 Function: normComarisonGood
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
normAmtA_1(uint256) := TMP_20(uint256)
[i]Type for normAmtA

Name: normAmtA Function: normComarisonGood
Num: 
Den: 
Address: u
Norm: *
LF: None
Fields: 
Finance Type: undef
TMP_21(uint256) = normAmtA_1 + normAmtA_1
[i]Type for TMP_21

Name: TMP_21 Function: normComarisonGood
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
goodSum_1(uint256) := TMP_21(uint256)
[i]Type for goodSum

Name: goodSum Function: normComarisonGood
Num: 
Den: 
Address: u
Norm: u
LF: None
Fields: 
Finance Type: undef
RETURN goodSum_1
Address: 1, Label: global:reserveTokenA
Address: 2, Label: global:reserveTokenB
Address: -999, Label: constructor:_reserveTokenA
Address: -998, Label: constructor:_reserveTokenB
Address: -997, Label: seeReserveTotal:reserve
Address: 3, Label: seeReserveTotal:TMP_1
Address: 3, Label: global:this
Address: -996, Label: addBalanceBuild:tokenC
Address: -995, Label: normalizeToken:token
Function count: 24
