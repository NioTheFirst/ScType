Checking BalanceAndNormTest
Checking ITypicalTokenWrapper
Finding type for reserveTokenA...
address
prev address? u
global assignment: 1
1
Head Addr: 1
    Norm: 0
    Set: {1}
Finding type for reserveTokenB...
address
prev address? u
global assignment: 2
2
Head Addr: 2
    Norm: 0
    Set: {2}



seeReserveTotal
Finding type for reserve...
address
prev address? u
-999
Head Addr: -999
    Norm: 0
    Set: {-999}
Finding type for amount...
uint256
Param: 0
    num: []
    den: []
    norm: u
    link: reserve
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
TMP_1 = CONVERT this to address
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
TMP_3(uint256) = TMP_2 + amount_1
amt_1(uint256) := TMP_3(uint256)
RETURN amt_1


reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: 
Den: 
Address: -999
Norm: u
LF: reserve
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: 
Den: 
Address: -999
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 3
3
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1


reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
TMP_1 = CONVERT this to address
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
TMP_3(uint256) = TMP_2 + amount_1
amt_1(uint256) := TMP_3(uint256)
RETURN amt_1


reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserve
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: 
Den: 
Address: -999
Norm: u
LF: reserve
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: 
Den: 
Address: -999
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-999
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -999
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1



addBalanceGood
Finding type for amountA...
uint256
Finding type for amountB...
uint256
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


reserveTokenA_1(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_7'])
TMP_4(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_1,amountA_1)
totalA_1(uint256) := TMP_4(uint256)
TMP_5(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_2,amountB_1)
totalB_1(uint256) := TMP_5(uint256)
TMP_6(uint256) = totalA_1 + totalB_1
total_1(uint256) := TMP_6(uint256)
RETURN total_1


reserveTokenA_1(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_7'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: addBalanceGood
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_4(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_1,amountA_1)
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserve
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_4

Name: TMP_4 Function: addBalanceGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
totalA_1(uint256) := TMP_4(uint256)
[i]Type for totalA

Name: totalA Function: addBalanceGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_5(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_2,amountB_1)
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_5

Name: TMP_5 Function: addBalanceGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
totalB_1(uint256) := TMP_5(uint256)
[i]Type for totalB

Name: totalB Function: addBalanceGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_6(uint256) = totalA_1 + totalB_1
[i]Type for TMP_6

Name: TMP_6 Function: addBalanceGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
total_1(uint256) := TMP_6(uint256)
[i]Type for total

Name: total Function: addBalanceGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN total_1


reserveTokenA_1(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_7'])
TMP_4(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_1,amountA_1)
totalA_1(uint256) := TMP_4(uint256)
TMP_5(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_2,amountB_1)
totalB_1(uint256) := TMP_5(uint256)
TMP_6(uint256) = totalA_1 + totalB_1
total_1(uint256) := TMP_6(uint256)
RETURN total_1


reserveTokenA_1(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_7'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: addBalanceGood
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TMP_4(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_1,amountA_1)
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_4

Name: TMP_4 Function: addBalanceGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
totalA_1(uint256) := TMP_4(uint256)
[i]Type for totalA

Name: totalA Function: addBalanceGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_5(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_2,amountB_1)
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_5

Name: TMP_5 Function: addBalanceGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
totalB_1(uint256) := TMP_5(uint256)
[i]Type for totalB

Name: totalB Function: addBalanceGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_6(uint256) = totalA_1 + totalB_1
[i]Type for TMP_6

Name: TMP_6 Function: addBalanceGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
total_1(uint256) := TMP_6(uint256)
[i]Type for total

Name: total Function: addBalanceGood
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN total_1



addBalanceBuild
Finding type for amountA...
uint256
Finding type for tokenC...
address
prev address? u
-998
Head Addr: -998
    Norm: 0
    Set: {-998}
Finding type for amountC...
uint256
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: tokenC
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


reserveTokenA_4(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_7'])
TMP_7(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_4,amountA_1)
totalA_1(uint256) := TMP_7(uint256)
TMP_8(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(tokenC_1,amountC_1)
totalC_1(uint256) := TMP_8(uint256)
TMP_9(uint256) = totalA_1 + totalC_1
total_1(uint256) := TMP_9(uint256)
RETURN total_1


reserveTokenA_4(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_7'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: addBalanceBuild
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_7(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_4,amountA_1)
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_7

Name: TMP_7 Function: addBalanceBuild
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
totalA_1(uint256) := TMP_7(uint256)
[i]Type for totalA

Name: totalA Function: addBalanceBuild
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_8(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(tokenC_1,amountC_1)
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: 
Den: 
Address: -998
Norm: u
LF: tokenC
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: 
Den: 
Address: -998
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-998
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: tokenC
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: 
Den: 
Address: -998
Norm: u
LF: tokenC
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: 
Den: 
Address: -998
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-998
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_8

Name: TMP_8 Function: addBalanceBuild
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
totalC_1(uint256) := TMP_8(uint256)
[i]Type for totalC

Name: totalC Function: addBalanceBuild
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_9(uint256) = totalA_1 + totalC_1
{-998: 1, 1: -1}
{-998: 1}
{}
{-998: 1}
[{-998: 1}]
[i]Type for TMP_9

Name: TMP_9 Function: addBalanceBuild
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
total_1(uint256) := TMP_9(uint256)
[i]Type for total

Name: total Function: addBalanceBuild
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN total_1


reserveTokenA_4(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_7'])
TMP_7(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_4,amountA_1)
totalA_1(uint256) := TMP_7(uint256)
TMP_8(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(tokenC_1,amountC_1)
totalC_1(uint256) := TMP_8(uint256)
TMP_9(uint256) = totalA_1 + totalC_1
total_1(uint256) := TMP_9(uint256)
RETURN total_1


reserveTokenA_4(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_7'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: addBalanceBuild
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TMP_7(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_4,amountA_1)
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: tokenC
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_7

Name: TMP_7 Function: addBalanceBuild
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
totalA_1(uint256) := TMP_7(uint256)
[i]Type for totalA

Name: totalA Function: addBalanceBuild
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_8(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(tokenC_1,amountC_1)
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: 
Den: 
Address: -998
Norm: u
LF: tokenC
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: 
Den: 
Address: -998
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-998
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: tokenC
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: 
Den: 
Address: -998
Norm: u
LF: tokenC
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: 
Den: 
Address: -998
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
-998
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_8

Name: TMP_8 Function: addBalanceBuild
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
totalC_1(uint256) := TMP_8(uint256)
[i]Type for totalC

Name: totalC Function: addBalanceBuild
Num: -998
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_9(uint256) = totalA_1 + totalC_1
{-998: 1, 1: -1}
{-998: 1}
{}
{-998: 1}
[{-998: 1}]
[i]Type for TMP_9

Name: TMP_9 Function: addBalanceBuild
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
total_1(uint256) := TMP_9(uint256)
[i]Type for total

Name: total Function: addBalanceBuild
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN total_1



addBalanceBad
Finding type for amountA...
uint256
Finding type for amountB...
uint256
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


reserveTokenA_6(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_7'])
reserveTokenB_1(address) := ϕ(['reserveTokenB_3', 'reserveTokenB_0'])
TMP_10(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_6,amountA_1)
totalA_1(uint256) := TMP_10(uint256)
TMP_11(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenB_2,amountB_1)
totalB_1(uint256) := TMP_11(uint256)
TMP_12(uint256) = totalA_1 + totalB_1
total_1(uint256) := TMP_12(uint256)
RETURN total_1


reserveTokenA_6(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_7'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: addBalanceBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserveTokenB_1(address) := ϕ(['reserveTokenB_3', 'reserveTokenB_0'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: addBalanceBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_6,amountA_1)
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: tokenC
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_10

Name: TMP_10 Function: addBalanceBad
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
totalA_1(uint256) := TMP_10(uint256)
[i]Type for totalA

Name: totalA Function: addBalanceBad
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_11(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenB_2,amountB_1)
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 2
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 2
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
2
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 2
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 2
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
2
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_11

Name: TMP_11 Function: addBalanceBad
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
totalB_1(uint256) := TMP_11(uint256)
[i]Type for totalB

Name: totalB Function: addBalanceBad
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_12(uint256) = totalA_1 + totalB_1
Error with TMP_12 in function addBalanceBad
Error with: TMP_12 in function addBalanceBad
[i]Type for TMP_12

Name: TMP_12 Function: addBalanceBad
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
total_1(uint256) := TMP_12(uint256)
[i]Type for total

Name: total Function: addBalanceBad
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN total_1


reserveTokenA_6(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_7'])
reserveTokenB_1(address) := ϕ(['reserveTokenB_3', 'reserveTokenB_0'])
TMP_10(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_6,amountA_1)
totalA_1(uint256) := TMP_10(uint256)
TMP_11(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenB_2,amountB_1)
totalB_1(uint256) := TMP_11(uint256)
TMP_12(uint256) = totalA_1 + totalB_1
total_1(uint256) := TMP_12(uint256)
RETURN total_1


reserveTokenA_6(address) := ϕ(['reserveTokenA_3', 'reserveTokenA_0', 'reserveTokenA_5', 'reserveTokenA_7'])
[i]Type for reserveTokenA

Name: reserveTokenA Function: addBalanceBad
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
reserveTokenB_1(address) := ϕ(['reserveTokenB_3', 'reserveTokenB_0'])
[i]Type for reserveTokenB

Name: reserveTokenB Function: addBalanceBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenA_6,amountA_1)
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 1
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
1
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_10

Name: TMP_10 Function: addBalanceBad
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
totalA_1(uint256) := TMP_10(uint256)
[i]Type for totalA

Name: totalA Function: addBalanceBad
Num: 1
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_11(uint256) = INTERNAL_CALL, BalanceAndNormTest.seeReserveTotal(address,uint256)(reserveTokenB_2,amountB_1)
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenA
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 2
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 2
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
2
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
reserve_1(address) := ϕ(['reserveTokenA_1', 'reserveTokenA_6', 'tokenC_1', 'reserveTokenA_2', 'reserveTokenA_4', 'reserveTokenB_2'])
[i]Type for reserve

Name: reserve Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := ϕ(['amountA_1', 'amountB_1', 'amountA_1', 'amountB_1', 'amountA_1', 'amountC_1'])
[i]Type for amount

Name: amount Function: seeReserveTotal
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0 = CONVERT reserve_1 to ITypicalTokenWrapper
Converting reserve_1

Name: reserve_1 Function: seeReserveTotal
Num: -1
Den: -1
Address: 2
Norm: u
LF: reserveTokenB
Value: u
Fields: 
Finance Type: undef
TypicalTokenWrapper
[i]Type for TMP_0

Name: TMP_0 Function: seeReserveTotal
Num: -1
Den: -1
Address: 2
Norm: u
LF: TypicalTokenWrapper
Value: u
Fields: 
Finance Type: undef
TMP_1 = CONVERT this to address
Converting this
3
[i]Type for TMP_1

Name: TMP_1 Function: seeReserveTotal
Num: 
Den: 
Address: 3
Norm: u
LF: BalanceAndNormTest
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = HIGH_LEVEL_CALL, dest:TMP_0(ITypicalTokenWrapper), function:balanceOf, arguments:['TMP_1']  
Written func info: TypicalTokenWrapper, balanceOf
Handling balance function!
2
[i]Type for TMP_2

Name: TMP_2 Function: seeReserveTotal
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_2 + amount_1
[i]Type for TMP_3

Name: TMP_3 Function: seeReserveTotal
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
amt_1(uint256) := TMP_3(uint256)
[i]Type for amt

Name: amt Function: seeReserveTotal
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amt_1
[i]Type for TMP_11

Name: TMP_11 Function: addBalanceBad
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
totalB_1(uint256) := TMP_11(uint256)
[i]Type for totalB

Name: totalB Function: addBalanceBad
Num: 2
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_12(uint256) = totalA_1 + totalB_1
[i]Type for TMP_12

Name: TMP_12 Function: addBalanceBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
total_1(uint256) := TMP_12(uint256)
[i]Type for total

Name: total Function: addBalanceBad
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN total_1



values


A_1(int256) := 10(int256)
B_1(int256) := 18(int256)
TMP_13(int256) = A_1 + 9
C_1(int256) := TMP_13(int256)


A_1(int256) := 10(int256)
[i]Type for A

Name: A Function: values
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 10
Fields: 
Finance Type: undef
B_1(int256) := 18(int256)
[i]Type for B

Name: B Function: values
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
TMP_13(int256) = A_1 + 9
[i]Type for TMP_13

Name: TMP_13 Function: values
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 19
Fields: 
Finance Type: undef
C_1(int256) := TMP_13(int256)
[i]Type for C

Name: C Function: values
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 19
Fields: 
Finance Type: undef


A_1(int256) := 10(int256)
B_1(int256) := 18(int256)
TMP_13(int256) = A_1 + 9
C_1(int256) := TMP_13(int256)


A_1(int256) := 10(int256)
[i]Type for A

Name: A Function: values
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 10
Fields: 
Finance Type: undef
B_1(int256) := 18(int256)
[i]Type for B

Name: B Function: values
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
TMP_13(int256) = A_1 + 9
[i]Type for TMP_13

Name: TMP_13 Function: values
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 19
Fields: 
Finance Type: undef
C_1(int256) := TMP_13(int256)
[i]Type for C

Name: C Function: values
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 19
Fields: 
Finance Type: undef



passValue


A_1(uint256) := 18(uint256)
TMP_14(uint256) = INTERNAL_CALL, BalanceAndNormTest.addTen(uint256)(A_1)
A_2(uint256) := TMP_14(uint256)
A_3(uint256) = A_2 - 20
A_4(uint256) = A_3 * 2
A_5(uint256) = A_4 / 4
TMP_15(uint256) = 10 ** A_5
normAmt_1(uint256) := TMP_15(uint256)


A_1(uint256) := 18(uint256)
[i]Type for A

Name: A Function: passValue
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
TMP_14(uint256) = INTERNAL_CALL, BalanceAndNormTest.addTen(uint256)(A_1)
x_1(uint256) := ϕ(['A_1'])
[i]Type for x

Name: x Function: addTen
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_16(uint256) = x_1 + 10
[i]Type for TMP_16

Name: TMP_16 Function: addTen
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 28
Fields: 
Finance Type: undef
RETURN TMP_16
x_1(uint256) := ϕ(['A_1'])
[i]Type for x

Name: x Function: addTen
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
TMP_16(uint256) = x_1 + 10
[i]Type for TMP_16

Name: TMP_16 Function: addTen
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 28
Fields: 
Finance Type: undef
RETURN TMP_16
[i]Type for TMP_14

Name: TMP_14 Function: passValue
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 28
Fields: 
Finance Type: undef
A_2(uint256) := TMP_14(uint256)
[i]Type for A

Name: A Function: passValue
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 28
Fields: 
Finance Type: undef
A_3(uint256) = A_2 - 20
[i]Type for A

Name: A Function: passValue
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 8
Fields: 
Finance Type: undef
A_4(uint256) = A_3 * 2
[i]Type for A

Name: A Function: passValue
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 16
Fields: 
Finance Type: undef
A_5(uint256) = A_4 / 4
[i]Type for A

Name: A Function: passValue
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 4.0
Fields: 
Finance Type: undef
TMP_15(uint256) = 10 ** A_5
[i]Type for TMP_15

Name: TMP_15 Function: passValue
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
normAmt_1(uint256) := TMP_15(uint256)
[i]Type for normAmt

Name: normAmt Function: passValue
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef


A_1(uint256) := 18(uint256)
TMP_14(uint256) = INTERNAL_CALL, BalanceAndNormTest.addTen(uint256)(A_1)
A_2(uint256) := TMP_14(uint256)
A_3(uint256) = A_2 - 20
A_4(uint256) = A_3 * 2
A_5(uint256) = A_4 / 4
TMP_15(uint256) = 10 ** A_5
normAmt_1(uint256) := TMP_15(uint256)


A_1(uint256) := 18(uint256)
[i]Type for A

Name: A Function: passValue
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
TMP_14(uint256) = INTERNAL_CALL, BalanceAndNormTest.addTen(uint256)(A_1)
[i]Type for TMP_14

Name: TMP_14 Function: passValue
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 28
Fields: 
Finance Type: undef
A_2(uint256) := TMP_14(uint256)
[i]Type for A

Name: A Function: passValue
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 28
Fields: 
Finance Type: undef
A_3(uint256) = A_2 - 20
[i]Type for A

Name: A Function: passValue
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 8
Fields: 
Finance Type: undef
A_4(uint256) = A_3 * 2
[i]Type for A

Name: A Function: passValue
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 16
Fields: 
Finance Type: undef
A_5(uint256) = A_4 / 4
[i]Type for A

Name: A Function: passValue
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4.0
Fields: 
Finance Type: undef
TMP_15(uint256) = 10 ** A_5
[i]Type for TMP_15

Name: TMP_15 Function: passValue
Num: 
Den: 
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
normAmt_1(uint256) := TMP_15(uint256)
[i]Type for normAmt

Name: normAmt Function: passValue
Num: 
Den: 
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef



addTen
Finding type for x...
uint256
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


x_1(uint256) := ϕ(['A_1'])
TMP_16(uint256) = x_1 + 10
RETURN TMP_16


x_1(uint256) := ϕ(['A_1'])
[i]Type for x

Name: x Function: addTen
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
TMP_16(uint256) = x_1 + 10
[i]Type for TMP_16

Name: TMP_16 Function: addTen
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 28
Fields: 
Finance Type: undef
RETURN TMP_16


x_1(uint256) := ϕ(['A_1'])
TMP_16(uint256) = x_1 + 10
RETURN TMP_16


x_1(uint256) := ϕ(['A_1'])
[i]Type for x

Name: x Function: addTen
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 18
Fields: 
Finance Type: undef
TMP_16(uint256) = x_1 + 10
[i]Type for TMP_16

Name: TMP_16 Function: addTen
Num: -1
Den: -1
Address: u
Norm: 1
LF: None
Value: 28
Fields: 
Finance Type: undef
RETURN TMP_16
Address: 1, Label: global:reserveTokenA
Address: 2, Label: global:reserveTokenB
Address: -999, Label: seeReserveTotal:reserve
Address: 3, Label: seeReserveTotal:TMP_1
Address: 3, Label: global:this
Address: -998, Label: addBalanceBuild:tokenC
Head Addr: 1
    Norm: 0
    Set: {1, -998}
Head Addr: 2
    Norm: 0
    Set: {2}
Head Addr: -999
    Norm: 0
    Set: {-999}
Head Addr: 3
    Norm: *
    Set: {3}
Head Addr: -998
    Norm: 0
    Set: {1, -998}
Function count: 20
