contract name: Utils
WARNING!!!!
Utils_types.txt
"Utils_types.txt" opened successfully.
xcxcxcPOOLS
xcxcxcUSDV
xcxcxcVADER
xcxcxcROUTER
xcxcxcone
xcxcxcFACTORY
xcxcxc_year
xcxcxcinited
xcxcxc_10k
xcxcxc_vader
xcxcxc_usdv
xcxcxc_router
xcxcxc_pools
xcxcxc_factory
xcxcxccollateralAsset
xcxcxcdebtAsset
xcxcxchlc_0
xcxcxchlc_1
xcxcxchlc_2
xcxcxchlc_3
xcxcxchlc_4
xcxcxchlc_5
xcxcxchlc_6
xcxcxchlc_7
xcxcxchlc_8
xcxcxchlc_9
xcxcxctoken
xcxcxctoken
xcxcxchlc_0
xcxcxchlc_1
xcxcxctoken
xcxcxcamount
xcxcxchlc_0
xcxcxc_baseAmt
xcxcxc_tokenAmt
xcxcxctoken
xcxcxcamount
xcxcxchlc_0
xcxcxc_baseAmt
xcxcxc_tokenAmt
xcxcxctoken
xcxcxcbound
xcxcxcinside
xcxcxctargetPrice
xcxcxctoken
xcxcxcrewardReductionFactor
xcxcxchlc_0
xcxcxchlc_1
xcxcxchlc_2
xcxcxchlc_3
xcxcxchlc_4
xcxcxchlc_5
xcxcxchlc_6
xcxcxcmember
xcxcxctoken
xcxcxcbasisPoints
xcxcxctimeForFullProtection
xcxcxchlc_0
xcxcxchlc_1
xcxcxchlc_2
xcxcxchlc_3
xcxcxchlc_4
xcxcxchlc_0
xcxcxchlc_1
xcxcxcmember
xcxcxccollateral
xcxcxccollateralAsset
xcxcxcdebtAsset
xcxcxchlc_2
xcxcxchlc_3
xcxcxchlc_4
xcxcxchlc_0
xcxcxchlc_0
xcxcxc_baseAmt
xcxcxc_tokenAmt
xcxcxccollateralAsset
xcxcxcdebtAsset
xcxcxchlc_0
xcxcxchlc_1
xcxcxchlc_2
xcxcxccollateralAsset
xcxcxcdebtAsset
xcxcxcbp
xcxcxctotal
xcxcxcpart
xcxcxctotal
xcxcxcamount
xcxcxcx
xcxcxcX
xcxcxcY
xcxcxcx
xcxcxcX
xcxcxcY
xcxcxcx
xcxcxcX
xcxcxcb
xcxcxcB
xcxcxct
xcxcxcT
xcxcxcP
xcxcxcb
xcxcxcB
xcxcxct
xcxcxcT
xcxcxcb
xcxcxcB
xcxcxcP
xcxcxcu
xcxcxcU
xcxcxcA
xcxcxcB0
xcxcxcT0
xcxcxcB1
xcxcxcT1
[*] Utils run
Checking... constructor
[x] No Binary
Checking... init
[o] Marked
Checking... getFeeOnTransfer
[x] No Binary
Checking... assetChecks
[o] Marked
Checking... isBase
[o] Marked
Checking... isPool
[o] Marked
Checking... calcValueInBase
[o] Marked
Checking... calcValueInToken
[o] Marked
Checking... calcValueOfTokenInToken
[x] No Binary
Checking... calcSwapValueInBase
[x] No Binary
Checking... calcSwapValueInToken
[x] No Binary
Checking... requirePriceBounds
[o] Marked
Checking... getRewardShare
[o] Marked
Checking... getReducedShare
[x] No Binary
Checking... getProtection
[o] Marked
Checking... getCoverage
[x] No Binary
Checking... getCollateralValueInBase
[o] Marked
Checking... getDebtValueInCollateral
[x] No Binary
Checking... getInterestOwed
[x] No Binary
Checking... getInterestPayment
[o] Marked
Checking... getDebtLoading
[o] Marked
Checking... calcPart
[o] Marked
Checking... calcShare
[o] Marked
Checking... calcSwapOutput
[o] Marked
Checking... calcSwapFee
[o] Marked
Checking... calcSwapSlip
[o] Marked
Checking... calcLiquidityUnits
[o] Marked
Checking... getSlipAdustment
[o] Marked
Checking... calcSynthUnits
[o] Marked
Checking... calcAsymmetricShare
[o] Marked
Checking... calcCoverage
[o] Marked
Checking... sortArray
[o] Marked
Checking... slitherConstructorVariables
[x] No Binary
State_var: _10k
Finding type for _10k...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: one
Finding type for one...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
Finding type for POOLS...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: POOLS
State_var: USDV
Finding type for USDV...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: ROUTER
Finding type for ROUTER...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: VADER
State_var: ROUTER
State_var: one
State_var: USDV
State_var: VADER
State_var: FACTORY
State_var: _year
Finding type for _year...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: one
State_var: POOLS
State_var: POOLS
State_var: ROUTER
State_var: POOLS
State_var: ROUTER
State_var: ROUTER
State_var: inited
Finding type for inited...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: POOLS
State_var: ROUTER
State_var: POOLS
lolcheck?
Reading Function: constructor
Function constructor not marked
Reading Function: init
Function name: init
Function Visibility: public
_vader
Finding type for _vader...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
_usdv
Finding type for _usdv...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
_router
Finding type for _router...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
_pools
Finding type for _pools...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
_factory
Finding type for _factory...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [-2]
    den: [-1]
Param: 2
    num: [-2]
    den: [-1]
Param: 3
    num: [-2]
    den: [-1]
Param: 4
    num: [-2]
    den: [-1]
clearning node...
clearing ir...?
inited_1(bool) := ϕ(['inited_0', 'inited_2'])
typecheckig node...
inited_1(bool) := ϕ(['inited_0', 'inited_2'])
checking inited
State IR  variable: inited
State variable: inited
Function name: init
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for inited
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_0(bool) = inited_1 == False
has variable
[i] TMP_0 cleared
clearing ir...?
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,inited)
typecheckig node...
TMP_0(bool) = inited_1 == False
checking tmp_0
Temp variable: tmp_0
Function name: init
[i]Type for TMP_0
Num:
Den:
Norm:
-100
done.
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,inited)
checking tmp_1
Temp variable: tmp_1
Function name: init
checking tmp_1
[i]Type for TMP_1
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
inited_2(bool) := True(bool)
has variable
typecheckig node...
inited_2(bool) := True(bool)
checking inited
State IR  variable: inited
State variable: inited
Function name: init
asgn
Constatn varible: true
Num:
Den:
Norm:
-100
Constatn varible: true
val: True
0
Constatn varible: true
val: True
[i]Type for inited
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
VADER_1(address) := _vader_1(address)
has variable
typecheckig node...
VADER_1(address) := _vader_1(address)
checking vader
State IR  variable: vader
State variable: vader
Function name: init
asgn
Num:
-2
Den:
-1
Norm:
-100
Num:
Den:
Norm:
-100
0
[i]Type for VADER
Num:
-2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
USDV_1(address) := _usdv_1(address)
has variable
typecheckig node...
USDV_1(address) := _usdv_1(address)
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: init
asgn
Num:
-2
Den:
-1
Norm:
-100
Num:
Den:
Norm:
-100
0
[i]Type for USDV
Num:
-2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
ROUTER_1(address) := _router_1(address)
has variable
typecheckig node...
ROUTER_1(address) := _router_1(address)
checking router
State IR  variable: router
State variable: router
Function name: init
asgn
Num:
-2
Den:
-1
Norm:
-100
Num:
Den:
Norm:
-100
0
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
POOLS_1(address) := _pools_1(address)
has variable
typecheckig node...
POOLS_1(address) := _pools_1(address)
checking pools
State IR  variable: pools
State variable: pools
Function name: init
asgn
Num:
-2
Den:
-1
Norm:
-100
Num:
Den:
Norm:
-100
0
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
FACTORY_1(address) := _factory_1(address)
has variable
typecheckig node...
FACTORY_1(address) := _factory_1(address)
checking factory
State IR  variable: factory
State variable: factory
Function name: init
asgn
Num:
-2
Den:
-1
Norm:
-100
Num:
Den:
Norm:
-100
0
[i]Type for FACTORY
Num:
-2
Den:
-1
Norm:
0
done.
Reading Function: getFeeOnTransfer
Function getFeeOnTransfer not marked
Reading Function: assetChecks
Function name: assetChecks
Function Visibility: external
collateralAsset
Finding type for collateralAsset...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
debtAsset
Finding type for debtAsset...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [-2]
    den: [-1]
clearning node...
clearing ir...?
VADER_2(address) := ϕ(['VADER_1', 'VADER_6', 'VADER_0'])
clearing ir...?
USDV_2(address) := ϕ(['USDV_1', 'USDV_0'])
clearing ir...?
POOLS_2(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
typecheckig node...
VADER_2(address) := ϕ(['VADER_1', 'VADER_6', 'VADER_0'])
checking vader
State IR  variable: vader
State variable: vader
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for VADER
Num:
-2
Den:
-1
Norm:
-100
done.
USDV_2(address) := ϕ(['USDV_1', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_2(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_3(bool) = collateralAsset_1 == VADER_2
has variable
[i] TMP_3 cleared
clearing ir...?
CONDITION TMP_3
typecheckig node...
TMP_3(bool) = collateralAsset_1 == VADER_2
checking tmp_3
Temp variable: tmp_3
Function name: assetChecks
[i]Type for TMP_3
Num:
Den:
Norm:
-100
done.
CONDITION TMP_3
Condition...
Conidtion: 
TMP_3
TMP_3
clearning node...
clearing ir...?
TMP_7(bool) = collateralAsset_1 == USDV_2
has variable
[i] TMP_7 cleared
clearing ir...?
CONDITION TMP_7
typecheckig node...
TMP_7(bool) = collateralAsset_1 == USDV_2
checking tmp_7
Temp variable: tmp_7
Function name: assetChecks
[i]Type for TMP_7
Num:
Den:
Norm:
-100
done.
CONDITION TMP_7
Condition...
Conidtion: 
TMP_7
TMP_7
clearning node...
clearing ir...?
TMP_4 = CONVERT POOLS_2 to iPOOLS
clearing ir...?
TMP_5(bool) = HIGH_LEVEL_CALL, dest:TMP_4(iPOOLS), function:isAnchor, arguments:['debtAsset_1']  
has variable
[i] TMP_5 cleared
clearing ir...?
POOLS_12(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
clearing ir...?
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,Bad Combo)
typecheckig node...
TMP_4 = CONVERT POOLS_2 to iPOOLS
checking tmp_4
Temp variable: tmp_4
Function name: assetChecks
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_4
Num:
-2
Den:
-1
Norm:
0
done.
TMP_5(bool) = HIGH_LEVEL_CALL, dest:TMP_4(iPOOLS), function:isAnchor, arguments:['debtAsset_1']  
High Level Call: isanchor
checking tmp_5
Temp variable: tmp_5
Function name: assetChecks
High Call: isAnchor
func name:isAnchor
TMP_5
TMP_5
Finding type for hlc_0...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_5
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_12(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,Bad Combo)
checking tmp_6
Temp variable: tmp_6
Function name: assetChecks
checking tmp_6
[i]Type for TMP_6
Num:
Den:
Norm:
-100
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_11 = CONVERT POOLS_2 to iPOOLS
clearing ir...?
TMP_12(bool) = HIGH_LEVEL_CALL, dest:TMP_11(iPOOLS), function:isSynth, arguments:['collateralAsset_1']  
has variable
[i] TMP_12 cleared
clearing ir...?
POOLS_3(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_2', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_13 = CONVERT POOLS_3 to iPOOLS
clearing ir...?
TMP_14 = CONVERT collateralAsset_1 to iSYNTH
clearing ir...?
TMP_15(address) = HIGH_LEVEL_CALL, dest:TMP_14(iSYNTH), function:TOKEN, arguments:[]  
has variable
[i] TMP_15 cleared
clearing ir...?
POOLS_4(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_3', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_16(bool) = HIGH_LEVEL_CALL, dest:TMP_13(iPOOLS), function:isAnchor, arguments:['TMP_15']  
has variable
[i] TMP_16 cleared
clearing ir...?
POOLS_5(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_4', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_17(bool) = TMP_12 && TMP_16
has variable
[i] TMP_17 cleared
clearing ir...?
CONDITION TMP_17
typecheckig node...
TMP_11 = CONVERT POOLS_2 to iPOOLS
checking tmp_11
Temp variable: tmp_11
Function name: assetChecks
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_11
Num:
-2
Den:
-1
Norm:
0
done.
TMP_12(bool) = HIGH_LEVEL_CALL, dest:TMP_11(iPOOLS), function:isSynth, arguments:['collateralAsset_1']  
High Level Call: issynth
checking tmp_12
Temp variable: tmp_12
Function name: assetChecks
High Call: isSynth
func name:isSynth
TMP_12
TMP_12
Finding type for hlc_1...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_12
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_3(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_2', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_13 = CONVERT POOLS_3 to iPOOLS
checking tmp_13
Temp variable: tmp_13
Function name: assetChecks
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_13
Num:
-2
Den:
-1
Norm:
0
done.
TMP_14 = CONVERT collateralAsset_1 to iSYNTH
checking tmp_14
Temp variable: tmp_14
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Num:
Den:
Norm:
-100
0
collateralAsset
[i]Type for TMP_14
Num:
-2
Den:
-1
Norm:
0
done.
TMP_15(address) = HIGH_LEVEL_CALL, dest:TMP_14(iSYNTH), function:TOKEN, arguments:[]  
High Level Call: token
checking tmp_15
Temp variable: tmp_15
Function name: assetChecks
High Call: TOKEN
func name:TOKEN
TMP_15
TMP_15
Finding type for hlc_2...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_15
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_4(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_3', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_16(bool) = HIGH_LEVEL_CALL, dest:TMP_13(iPOOLS), function:isAnchor, arguments:['TMP_15']  
High Level Call: isanchor
checking tmp_16
Temp variable: tmp_16
Function name: assetChecks
High Call: isAnchor
func name:isAnchor
TMP_16
TMP_16
Finding type for hlc_3...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_16
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_5(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_4', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_17(bool) = TMP_12 && TMP_16
checking tmp_17
Temp variable: tmp_17
Function name: assetChecks
[i]Type for TMP_17
Num:
Den:
Norm:
-100
done.
CONDITION TMP_17
Condition...
Conidtion: 
TMP_17
TMP_17
clearning node...
clearing ir...?
TMP_8 = CONVERT POOLS_2 to iPOOLS
clearing ir...?
TMP_9(bool) = HIGH_LEVEL_CALL, dest:TMP_8(iPOOLS), function:isAsset, arguments:['debtAsset_1']  
has variable
[i] TMP_9 cleared
clearing ir...?
POOLS_11(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
clearing ir...?
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,Bad Combo)
typecheckig node...
TMP_8 = CONVERT POOLS_2 to iPOOLS
checking tmp_8
Temp variable: tmp_8
Function name: assetChecks
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_8
Num:
-2
Den:
-1
Norm:
0
done.
TMP_9(bool) = HIGH_LEVEL_CALL, dest:TMP_8(iPOOLS), function:isAsset, arguments:['debtAsset_1']  
High Level Call: isasset
checking tmp_9
Temp variable: tmp_9
Function name: assetChecks
High Call: isAsset
func name:isAsset
TMP_9
TMP_9
Finding type for hlc_4...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_9
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_11(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,Bad Combo)
checking tmp_10
Temp variable: tmp_10
Function name: assetChecks
checking tmp_10
[i]Type for TMP_10
Num:
Den:
Norm:
-100
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_21 = CONVERT POOLS_5 to iPOOLS
clearing ir...?
TMP_22(bool) = HIGH_LEVEL_CALL, dest:TMP_21(iPOOLS), function:isSynth, arguments:['collateralAsset_1']  
has variable
[i] TMP_22 cleared
clearing ir...?
POOLS_6(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_5', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_23 = CONVERT POOLS_6 to iPOOLS
clearing ir...?
TMP_24 = CONVERT collateralAsset_1 to iSYNTH
clearing ir...?
TMP_25(address) = HIGH_LEVEL_CALL, dest:TMP_24(iSYNTH), function:TOKEN, arguments:[]  
has variable
[i] TMP_25 cleared
clearing ir...?
POOLS_7(address) := ϕ(['POOLS_6', 'POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_26(bool) = HIGH_LEVEL_CALL, dest:TMP_23(iPOOLS), function:isAsset, arguments:['TMP_25']  
has variable
[i] TMP_26 cleared
clearing ir...?
POOLS_8(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_7', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_27(bool) = TMP_22 && TMP_26
has variable
[i] TMP_27 cleared
clearing ir...?
CONDITION TMP_27
typecheckig node...
TMP_21 = CONVERT POOLS_5 to iPOOLS
checking tmp_21
Temp variable: tmp_21
Function name: assetChecks
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_21
Num:
-2
Den:
-1
Norm:
0
done.
TMP_22(bool) = HIGH_LEVEL_CALL, dest:TMP_21(iPOOLS), function:isSynth, arguments:['collateralAsset_1']  
High Level Call: issynth
checking tmp_22
Temp variable: tmp_22
Function name: assetChecks
High Call: isSynth
func name:isSynth
TMP_22
TMP_22
Finding type for hlc_5...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_22
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_6(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_5', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_23 = CONVERT POOLS_6 to iPOOLS
checking tmp_23
Temp variable: tmp_23
Function name: assetChecks
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_23
Num:
-2
Den:
-1
Norm:
0
done.
TMP_24 = CONVERT collateralAsset_1 to iSYNTH
checking tmp_24
Temp variable: tmp_24
Function name: assetChecks
Num:
Den:
Norm:
-100
0
collateralAsset
[i]Type for TMP_24
Num:
-2
Den:
-1
Norm:
0
done.
TMP_25(address) = HIGH_LEVEL_CALL, dest:TMP_24(iSYNTH), function:TOKEN, arguments:[]  
High Level Call: token
checking tmp_25
Temp variable: tmp_25
Function name: assetChecks
High Call: TOKEN
func name:TOKEN
TMP_25
TMP_25
Finding type for hlc_6...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_25
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_7(address) := ϕ(['POOLS_6', 'POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_26(bool) = HIGH_LEVEL_CALL, dest:TMP_23(iPOOLS), function:isAsset, arguments:['TMP_25']  
High Level Call: isasset
checking tmp_26
Temp variable: tmp_26
Function name: assetChecks
High Call: isAsset
func name:isAsset
TMP_26
TMP_26
Finding type for hlc_7...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_26
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_8(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_7', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_27(bool) = TMP_22 && TMP_26
checking tmp_27
Temp variable: tmp_27
Function name: assetChecks
[i]Type for TMP_27
Num:
Den:
Norm:
-100
done.
CONDITION TMP_27
Condition...
Conidtion: 
TMP_27
TMP_27
clearning node...
clearing ir...?
TMP_18 = CONVERT POOLS_5 to iPOOLS
clearing ir...?
TMP_19(bool) = HIGH_LEVEL_CALL, dest:TMP_18(iPOOLS), function:isAnchor, arguments:['debtAsset_1']  
has variable
[i] TMP_19 cleared
clearing ir...?
POOLS_10(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
clearing ir...?
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,Bad Combo)
typecheckig node...
TMP_18 = CONVERT POOLS_5 to iPOOLS
checking tmp_18
Temp variable: tmp_18
Function name: assetChecks
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_18
Num:
-2
Den:
-1
Norm:
0
done.
TMP_19(bool) = HIGH_LEVEL_CALL, dest:TMP_18(iPOOLS), function:isAnchor, arguments:['debtAsset_1']  
High Level Call: isanchor
checking tmp_19
Temp variable: tmp_19
Function name: assetChecks
High Call: isAnchor
func name:isAnchor
TMP_19
TMP_19
Finding type for hlc_8...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_19
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_10(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,Bad Combo)
checking tmp_20
Temp variable: tmp_20
Function name: assetChecks
checking tmp_20
[i]Type for TMP_20
Num:
Den:
Norm:
-100
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_28 = CONVERT POOLS_8 to iPOOLS
clearing ir...?
TMP_29(bool) = HIGH_LEVEL_CALL, dest:TMP_28(iPOOLS), function:isAsset, arguments:['debtAsset_1']  
has variable
[i] TMP_29 cleared
clearing ir...?
POOLS_9(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
clearing ir...?
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,Bad Combo)
typecheckig node...
TMP_28 = CONVERT POOLS_8 to iPOOLS
checking tmp_28
Temp variable: tmp_28
Function name: assetChecks
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_28
Num:
-2
Den:
-1
Norm:
0
done.
TMP_29(bool) = HIGH_LEVEL_CALL, dest:TMP_28(iPOOLS), function:isAsset, arguments:['debtAsset_1']  
High Level Call: isasset
checking tmp_29
Temp variable: tmp_29
Function name: assetChecks
High Call: isAsset
func name:isAsset
TMP_29
TMP_29
Finding type for hlc_9...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_29
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_9(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: assetChecks
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,Bad Combo)
checking tmp_30
Temp variable: tmp_30
Function name: assetChecks
checking tmp_30
[i]Type for TMP_30
Num:
Den:
Norm:
-100
done.
clearning node...
typecheckig node...
Reading Function: isBase
Function name: isBase
Function Visibility: public
token
Finding type for token...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-2]
    den: [-1]
clearning node...
clearing ir...?
token_1(address) := ϕ(['collateralAsset_1', 'collateralAsset_1'])
clearing ir...?
VADER_3(address) := ϕ(['VADER_1', 'VADER_6', 'VADER_0'])
clearing ir...?
USDV_3(address) := ϕ(['USDV_1', 'USDV_0'])
typecheckig node...
token_1(address) := ϕ(['collateralAsset_1', 'collateralAsset_1'])
checking token
Local variable: token
Function name: isBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
done.
VADER_3(address) := ϕ(['VADER_1', 'VADER_6', 'VADER_0'])
checking vader
State IR  variable: vader
State variable: vader
Function name: isBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for VADER
Num:
-2
Den:
-1
Norm:
-100
done.
USDV_3(address) := ϕ(['USDV_1', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: isBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_31(bool) = token_1 == VADER_3
has variable
[i] TMP_31 cleared
clearing ir...?
TMP_32(bool) = token_1 == USDV_3
has variable
[i] TMP_32 cleared
clearing ir...?
TMP_33(bool) = TMP_31 || TMP_32
has variable
[i] TMP_33 cleared
clearing ir...?
CONDITION TMP_33
typecheckig node...
TMP_31(bool) = token_1 == VADER_3
checking tmp_31
Temp variable: tmp_31
Function name: isBase
[i]Type for TMP_31
Num:
Den:
Norm:
-100
done.
TMP_32(bool) = token_1 == USDV_3
checking tmp_32
Temp variable: tmp_32
Function name: isBase
[i]Type for TMP_32
Num:
Den:
Norm:
-100
done.
TMP_33(bool) = TMP_31 || TMP_32
checking tmp_33
Temp variable: tmp_33
Function name: isBase
[i]Type for TMP_33
Num:
Den:
Norm:
-100
done.
CONDITION TMP_33
Condition...
Conidtion: 
TMP_33
TMP_33
clearning node...
clearing ir...?
RETURN True
typecheckig node...
RETURN True
Return...
isBase
base_0
True
clearning node...
typecheckig node...
Reading Function: isPool
Function name: isPool
Function Visibility: public
token
Finding type for token...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-2]
    den: [-1]
clearning node...
clearing ir...?
token_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
POOLS_13(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
typecheckig node...
token_1(address) := ϕ(['collateralAsset_1'])
checking token
Local variable: token
Function name: isPool
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_13(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: isPool
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_34 = CONVERT POOLS_13 to iPOOLS
clearing ir...?
TMP_35(bool) = HIGH_LEVEL_CALL, dest:TMP_34(iPOOLS), function:isAnchor, arguments:['token_1']  
has variable
[i] TMP_35 cleared
clearing ir...?
POOLS_14(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_13', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_36 = CONVERT POOLS_14 to iPOOLS
clearing ir...?
TMP_37(bool) = HIGH_LEVEL_CALL, dest:TMP_36(iPOOLS), function:isAsset, arguments:['token_1']  
has variable
[i] TMP_37 cleared
clearing ir...?
POOLS_15(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_14', 'POOLS_31'])
clearing ir...?
TMP_38(bool) = TMP_35 || TMP_37
has variable
[i] TMP_38 cleared
clearing ir...?
CONDITION TMP_38
typecheckig node...
TMP_34 = CONVERT POOLS_13 to iPOOLS
checking tmp_34
Temp variable: tmp_34
Function name: isPool
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_34
Num:
-2
Den:
-1
Norm:
0
done.
TMP_35(bool) = HIGH_LEVEL_CALL, dest:TMP_34(iPOOLS), function:isAnchor, arguments:['token_1']  
High Level Call: isanchor
checking tmp_35
Temp variable: tmp_35
Function name: isPool
High Call: isAnchor
func name:isAnchor
TMP_35
TMP_35
Finding type for hlc_0...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_35
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_14(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_13', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: isPool
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_36 = CONVERT POOLS_14 to iPOOLS
checking tmp_36
Temp variable: tmp_36
Function name: isPool
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_36
Num:
-2
Den:
-1
Norm:
0
done.
TMP_37(bool) = HIGH_LEVEL_CALL, dest:TMP_36(iPOOLS), function:isAsset, arguments:['token_1']  
High Level Call: isasset
checking tmp_37
Temp variable: tmp_37
Function name: isPool
High Call: isAsset
func name:isAsset
TMP_37
TMP_37
Finding type for hlc_1...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_37
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_15(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_14', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: isPool
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_38(bool) = TMP_35 || TMP_37
checking tmp_38
Temp variable: tmp_38
Function name: isPool
[i]Type for TMP_38
Num:
Den:
Norm:
-100
done.
CONDITION TMP_38
Condition...
Conidtion: 
TMP_38
TMP_38
clearning node...
clearing ir...?
pool_1(bool) := True(bool)
has variable
[i] pool cleared
typecheckig node...
pool_1(bool) := True(bool)
checking pool
Local variable: pool
Function name: isPool
asgn
Constatn varible: true
Num:
Den:
Norm:
-100
Constatn varible: true
val: True
0
Constatn varible: true
val: True
[i]Type for pool
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Reading Function: calcValueInBase
Function name: calcValueInBase
Function Visibility: public
token
Finding type for token...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
amount
Finding type for amount...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
token_1(address) := ϕ(['token1_1', 'debtAsset_1', 'token_1'])
clearing ir...?
amount_1(uint256) := ϕ(['amount_1', '_interestPayment_1', 'one_1'])
clearing ir...?
POOLS_16(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
typecheckig node...
token_1(address) := ϕ(['token1_1', 'debtAsset_1', 'token_1'])
checking token
Local variable: token
Function name: calcValueInBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
done.
amount_1(uint256) := ϕ(['amount_1', '_interestPayment_1', 'one_1'])
checking amount
Local variable: amount
Function name: calcValueInBase
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for amount
Num:
-1
Den:
-1
Norm:
-100
done.
POOLS_16(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: calcValueInBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_39 = CONVERT POOLS_16 to iPOOLS
clearing ir...?
TUPLE_0(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_39(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
has variable
clearing ir...?
POOLS_17(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_16', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
_baseAmt_1(uint256)= UNPACK TUPLE_0 index: 0 
clearing ir...?
_tokenAmt_1(uint256)= UNPACK TUPLE_0 index: 1 
typecheckig node...
TMP_39 = CONVERT POOLS_16 to iPOOLS
checking tmp_39
Temp variable: tmp_39
Function name: calcValueInBase
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_39
Num:
-2
Den:
-1
Norm:
0
done.
TUPLE_0(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_39(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
High Level Call: getpoolamounts
checking tuple_0
TUple variable: tuple_0
Function name: calcValueInBase
High Call: getPoolAmounts
func name:getPoolAmounts
TUPLE_0
TUPLE_0
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TUPLE_0
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_17(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_16', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: calcValueInBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
_baseAmt_1(uint256)= UNPACK TUPLE_0 index: 0 
checking _baseamt
Local variable: _baseamt
Function name: calcValueInBase
Reading tuple TUPLE_0 index 0
Finding type for _baseAmt...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for _baseAmt
Num:
1
Den:
-1
Norm:
0
done.
_tokenAmt_1(uint256)= UNPACK TUPLE_0 index: 1 
checking _tokenamt
Local variable: _tokenamt
Function name: calcValueInBase
Reading tuple TUPLE_0 index 1
Finding type for _tokenAmt...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for _tokenAmt
Num:
2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_40(bool) = _baseAmt_1 > 0
has variable
[i] TMP_40 cleared
clearing ir...?
TMP_41(bool) = _tokenAmt_1 > 0
has variable
[i] TMP_41 cleared
clearing ir...?
TMP_42(bool) = TMP_40 && TMP_41
has variable
[i] TMP_42 cleared
clearing ir...?
CONDITION TMP_42
typecheckig node...
TMP_40(bool) = _baseAmt_1 > 0
checking tmp_40
Temp variable: tmp_40
Function name: calcValueInBase
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_40
Num:
-1
Den:
-1
Norm:
0
done.
TMP_41(bool) = _tokenAmt_1 > 0
checking tmp_41
Temp variable: tmp_41
Function name: calcValueInBase
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_41
Num:
-1
Den:
-1
Norm:
0
done.
TMP_42(bool) = TMP_40 && TMP_41
checking tmp_42
Temp variable: tmp_42
Function name: calcValueInBase
[i]Type for TMP_42
Num:
Den:
Norm:
-100
done.
CONDITION TMP_42
Condition...
Conidtion: 
TMP_42
TMP_42
clearning node...
clearing ir...?
TMP_43(uint256) = amount_1 (c)* _baseAmt_1
has variable
[i] TMP_43 cleared
clearing ir...?
TMP_44(uint256) = TMP_43 (c)/ _tokenAmt_1
has variable
[i] TMP_44 cleared
clearing ir...?
RETURN TMP_44
typecheckig node...
TMP_43(uint256) = amount_1 (c)* _baseAmt_1
checking tmp_43
Temp variable: tmp_43
Function name: calcValueInBase
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
0
***
False
False
True
False
Num:
Den:
Norm:
0
[i]Type for TMP_43
Num:
1
Den:
-1
Norm:
0
done.
TMP_44(uint256) = TMP_43 (c)/ _tokenAmt_1
checking tmp_44
Temp variable: tmp_44
Function name: calcValueInBase
Num:
Den:
Norm:
0
[i]Type for TMP_44
Num:
1
Den:
2
Norm:
0
done.
RETURN TMP_44
Return...
calcValueInBase
value_0
TMP_44
clearning node...
typecheckig node...
Reading Function: calcValueInToken
Function name: calcValueInToken
Function Visibility: public
token
Finding type for token...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
amount
Finding type for amount...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
token_1(address) := ϕ(['token2_1'])
clearing ir...?
amount_1(uint256) := ϕ(['TMP_51'])
clearing ir...?
POOLS_18(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
typecheckig node...
token_1(address) := ϕ(['token2_1'])
checking token
Local variable: token
Function name: calcValueInToken
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
done.
amount_1(uint256) := ϕ(['TMP_51'])
checking amount
Local variable: amount
Function name: calcValueInToken
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for amount
Num:
-1
Den:
-1
Norm:
-100
done.
POOLS_18(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: calcValueInToken
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_45 = CONVERT POOLS_18 to iPOOLS
clearing ir...?
TUPLE_1(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_45(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
has variable
clearing ir...?
POOLS_19(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_18', 'POOLS_45', 'POOLS_31'])
clearing ir...?
_baseAmt_1(uint256)= UNPACK TUPLE_1 index: 0 
clearing ir...?
_tokenAmt_1(uint256)= UNPACK TUPLE_1 index: 1 
typecheckig node...
TMP_45 = CONVERT POOLS_18 to iPOOLS
checking tmp_45
Temp variable: tmp_45
Function name: calcValueInToken
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_45
Num:
-2
Den:
-1
Norm:
0
done.
TUPLE_1(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_45(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
High Level Call: getpoolamounts
checking tuple_1
TUple variable: tuple_1
Function name: calcValueInToken
High Call: getPoolAmounts
func name:getPoolAmounts
TUPLE_1
TUPLE_1
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TUPLE_1
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_19(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_18', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: calcValueInToken
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
_baseAmt_1(uint256)= UNPACK TUPLE_1 index: 0 
checking _baseamt
Local variable: _baseamt
Function name: calcValueInToken
Reading tuple TUPLE_1 index 0
Finding type for _baseAmt...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for _baseAmt
Num:
1
Den:
-1
Norm:
0
done.
_tokenAmt_1(uint256)= UNPACK TUPLE_1 index: 1 
checking _tokenamt
Local variable: _tokenamt
Function name: calcValueInToken
Reading tuple TUPLE_1 index 1
Finding type for _tokenAmt...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for _tokenAmt
Num:
2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_46(bool) = _baseAmt_1 > 0
has variable
[i] TMP_46 cleared
clearing ir...?
TMP_47(bool) = _tokenAmt_1 > 0
has variable
[i] TMP_47 cleared
clearing ir...?
TMP_48(bool) = TMP_46 && TMP_47
has variable
[i] TMP_48 cleared
clearing ir...?
CONDITION TMP_48
typecheckig node...
TMP_46(bool) = _baseAmt_1 > 0
checking tmp_46
Temp variable: tmp_46
Function name: calcValueInToken
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_46
Num:
-1
Den:
-1
Norm:
0
done.
TMP_47(bool) = _tokenAmt_1 > 0
checking tmp_47
Temp variable: tmp_47
Function name: calcValueInToken
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_47
Num:
-1
Den:
-1
Norm:
0
done.
TMP_48(bool) = TMP_46 && TMP_47
checking tmp_48
Temp variable: tmp_48
Function name: calcValueInToken
[i]Type for TMP_48
Num:
Den:
Norm:
-100
done.
CONDITION TMP_48
Condition...
Conidtion: 
TMP_48
TMP_48
clearning node...
clearing ir...?
TMP_49(uint256) = amount_1 (c)* _tokenAmt_1
has variable
[i] TMP_49 cleared
clearing ir...?
TMP_50(uint256) = TMP_49 (c)/ _baseAmt_1
has variable
[i] TMP_50 cleared
clearing ir...?
RETURN TMP_50
typecheckig node...
TMP_49(uint256) = amount_1 (c)* _tokenAmt_1
checking tmp_49
Temp variable: tmp_49
Function name: calcValueInToken
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
2
Den:
-1
Norm:
0
***
False
False
True
False
Num:
Den:
Norm:
0
[i]Type for TMP_49
Num:
2
Den:
-1
Norm:
0
done.
TMP_50(uint256) = TMP_49 (c)/ _baseAmt_1
checking tmp_50
Temp variable: tmp_50
Function name: calcValueInToken
Num:
Den:
Norm:
0
[i]Type for TMP_50
Num:
2
Den:
1
Norm:
0
done.
RETURN TMP_50
Return...
calcValueInToken
value_0
TMP_50
clearning node...
typecheckig node...
Reading Function: calcValueOfTokenInToken
Function calcValueOfTokenInToken not marked
Reading Function: calcSwapValueInBase
Function calcSwapValueInBase not marked
Reading Function: calcSwapValueInToken
Function calcSwapValueInToken not marked
Reading Function: requirePriceBounds
Function name: requirePriceBounds
Function Visibility: external
token
Finding type for token...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
bound
Finding type for bound...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
inside
Finding type for inside...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
targetPrice
Finding type for targetPrice...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-2]
    den: [-1]
Param: 3
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
one_1(uint256) := ϕ(['one_4', 'one_0', 'one_2'])
clearing ir...?
_10k_1(uint256) := ϕ(['_10k_0', '_10k_3'])
typecheckig node...
one_1(uint256) := ϕ(['one_4', 'one_0', 'one_2'])
checking one
State IR  variable: one
State variable: one
Function name: requirePriceBounds
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
_10k_1(uint256) := ϕ(['_10k_0', '_10k_3'])
checking _10k
State IR  variable: _10k
State variable: _10k
Function name: requirePriceBounds
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _10k
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_57(uint256) = INTERNAL_CALL, Utils.calcValueInBase(address,uint256)(token_1,one_1)
clearing ir...?
_testingPrice_1(uint256) := TMP_57(uint256)
has variable
[i] _testingPrice cleared
typecheckig node...
TMP_57(uint256) = INTERNAL_CALL, Utils.calcValueInBase(address,uint256)(token_1,one_1)
Internal call...
calcValueInBase
token
one
Function: calcValueInBase
ic
Num:
-2
Den:
-1
Norm:
-100
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
added
xyz
Function name: calcValueInBase
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['token1_1', 'debtAsset_1', 'token_1'])
clearing ir...?
amount_1(uint256) := ϕ(['amount_1', '_interestPayment_1', 'one_1'])
clearing ir...?
POOLS_16(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
typecheckig node...
token_1(address) := ϕ(['token1_1', 'debtAsset_1', 'token_1'])
checking token
Local variable: token
Function name: calcValueInBase
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
done.
amount_1(uint256) := ϕ(['amount_1', '_interestPayment_1', 'one_1'])
checking amount
Local variable: amount
Function name: calcValueInBase
Phi
[i]Type for amount
Num:
-1
Den:
-1
Norm:
-100
done.
POOLS_16(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: calcValueInBase
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_39 = CONVERT POOLS_16 to iPOOLS
clearing ir...?
TUPLE_0(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_39(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
has variable
clearing ir...?
POOLS_17(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_16', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
_baseAmt_1(uint256)= UNPACK TUPLE_0 index: 0 
clearing ir...?
_tokenAmt_1(uint256)= UNPACK TUPLE_0 index: 1 
typecheckig node...
TMP_39 = CONVERT POOLS_16 to iPOOLS
checking tmp_39
Temp variable: tmp_39
Function name: calcValueInBase
Num:
-2
Den:
-1
Norm:
0
0
POOLS
[i]Type for TMP_39
Num:
-2
Den:
-1
Norm:
0
done.
TUPLE_0(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_39(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
High Level Call: getpoolamounts
checking tuple_0
TUple variable: tuple_0
Function name: calcValueInBase
High Call: getPoolAmounts
func name:getPoolAmounts
TUPLE_0
TUPLE_0
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TUPLE_0
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_17(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_16', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: calcValueInBase
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
_baseAmt_1(uint256)= UNPACK TUPLE_0 index: 0 
checking _baseamt
Local variable: _baseamt
Function name: calcValueInBase
Reading tuple TUPLE_0 index 0
Finding type for _baseAmt...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for _baseAmt
Num:
1
Den:
-1
Norm:
0
done.
_tokenAmt_1(uint256)= UNPACK TUPLE_0 index: 1 
checking _tokenamt
Local variable: _tokenamt
Function name: calcValueInBase
Reading tuple TUPLE_0 index 1
Finding type for _tokenAmt...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for _tokenAmt
Num:
2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_40(bool) = _baseAmt_1 > 0
has variable
[i] TMP_40 cleared
clearing ir...?
TMP_41(bool) = _tokenAmt_1 > 0
has variable
[i] TMP_41 cleared
clearing ir...?
TMP_42(bool) = TMP_40 && TMP_41
has variable
[i] TMP_42 cleared
clearing ir...?
CONDITION TMP_42
typecheckig node...
TMP_40(bool) = _baseAmt_1 > 0
checking tmp_40
Temp variable: tmp_40
Function name: calcValueInBase
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_40
Num:
-1
Den:
-1
Norm:
0
done.
TMP_41(bool) = _tokenAmt_1 > 0
checking tmp_41
Temp variable: tmp_41
Function name: calcValueInBase
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_41
Num:
-1
Den:
-1
Norm:
0
done.
TMP_42(bool) = TMP_40 && TMP_41
checking tmp_42
Temp variable: tmp_42
Function name: calcValueInBase
[i]Type for TMP_42
Num:
Den:
Norm:
-100
done.
CONDITION TMP_42
Condition...
Conidtion: 
TMP_42
TMP_42
clearning node...
clearing ir...?
TMP_43(uint256) = amount_1 (c)* _baseAmt_1
has variable
[i] TMP_43 cleared
clearing ir...?
TMP_44(uint256) = TMP_43 (c)/ _tokenAmt_1
has variable
[i] TMP_44 cleared
clearing ir...?
RETURN TMP_44
typecheckig node...
TMP_43(uint256) = amount_1 (c)* _baseAmt_1
checking tmp_43
Temp variable: tmp_43
Function name: calcValueInBase
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
0
***
False
False
True
False
Num:
Den:
Norm:
0
[i]Type for TMP_43
Num:
1
Den:
-1
Norm:
0
done.
TMP_44(uint256) = TMP_43 (c)/ _tokenAmt_1
checking tmp_44
Temp variable: tmp_44
Function name: calcValueInBase
Num:
Den:
Norm:
0
[i]Type for TMP_44
Num:
1
Den:
2
Norm:
0
done.
RETURN TMP_44
Return...
calcValueInBase
TMP_44
TMP_44
clearning node...
typecheckig node...
Checking return valuecalcValueInBase
TMP_44
&&
TMP_44
Num:
Den:
Norm:
-100
[i]Type for TMP_57
Num:
1
Den:
2
Norm:
-100
done.
_testingPrice_1(uint256) := TMP_57(uint256)
checking _testingprice
Local variable: _testingprice
Function name: requirePriceBounds
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _testingPrice
Num:
1
Den:
2
Norm:
0
done.
clearning node...
clearing ir...?
TMP_58(uint256) = _10k_2 (c)- bound_1
has variable
[i] TMP_58 cleared
clearing ir...?
TMP_59(uint256) = INTERNAL_CALL, Utils.calcPart(uint256,uint256)(TMP_58,targetPrice_1)
clearing ir...?
_lower_1(uint256) := TMP_59(uint256)
has variable
[i] _lower cleared
typecheckig node...
TMP_58(uint256) = _10k_2 (c)- bound_1
checking tmp_58
Temp variable: tmp_58
Function name: requirePriceBounds
Num:
-1
Den:
-1
Norm:
-100
Num:
-1
Den:
-1
Norm:
-100
Num:
-1
Den:
-1
Norm:
-100
Num:
-1
Den:
-1
Norm:
-100
Num:
Den:
Norm:
0
[i]Type for TMP_58
Num:
-1
Den:
-1
Norm:
0
done.
TMP_59(uint256) = INTERNAL_CALL, Utils.calcPart(uint256,uint256)(TMP_58,targetPrice_1)
Internal call...
calcPart
TMP_58
targetPrice
Function: calcPart
ic
Num:
-1
Den:
-1
Norm:
-100
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
added
xyz
Function name: calcPart
Function Visibility: public
clearning node...
clearing ir...?
bp_1(uint256) := ϕ(['TMP_58', 'basisPoints_1'])
clearing ir...?
total_1(uint256) := ϕ(['protection_3', 'targetPrice_1'])
typecheckig node...
bp_1(uint256) := ϕ(['TMP_58', 'basisPoints_1'])
checking bp
Local variable: bp
Function name: calcPart
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for bp
Num:
-1
Den:
-1
Norm:
-100
done.
total_1(uint256) := ϕ(['protection_3', 'targetPrice_1'])
checking total
Local variable: total
Function name: calcPart
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for total
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_164(bool) = bp_1 <= 10000
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(bool) = bp_1 >= 0
has variable
[i] TMP_165 cleared
clearing ir...?
TMP_166(bool) = TMP_164 && TMP_165
has variable
[i] TMP_166 cleared
clearing ir...?
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,Must be correct BP)
typecheckig node...
TMP_164(bool) = bp_1 <= 10000
checking tmp_164
Temp variable: tmp_164
Function name: calcPart
testing lt...
Constatn varible: 10000
Constatn varible: 10000
val: 10000
4
Error with: TMP_164 in function calcPart
[i]Type for TMP_164
Num:
-1
Den:
-1
Norm:
0
done.
TMP_165(bool) = bp_1 >= 0
checking tmp_165
Temp variable: tmp_165
Function name: calcPart
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
[i]Type for TMP_165
Num:
-1
Den:
-1
Norm:
0
done.
TMP_166(bool) = TMP_164 && TMP_165
checking tmp_166
Temp variable: tmp_166
Function name: calcPart
[i]Type for TMP_166
Num:
Den:
Norm:
-100
done.
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,Must be correct BP)
checking tmp_167
Temp variable: tmp_167
Function name: calcPart
checking tmp_167
[i]Type for TMP_167
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
clearing ir...?
RETURN TMP_168
typecheckig node...
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
Internal call...
calcShare
bp
10000
total
Function: calcShare
ic
Constatn varible: 10000
Constatn varible: 10000
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
clearing ir...?
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
clearing ir...?
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
typecheckig node...
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
checking part
Local variable: part
Function name: calcShare
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
checking total
Local variable: total
Function name: calcShare
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for total
Num:
-1
Den:
-1
Norm:
-100
done.
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
checking amount
Local variable: amount
Function name: calcShare
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for amount
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
checking tmp_169
Temp variable: tmp_169
Function name: calcShare
testing gt...
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_169
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
checking part
Local variable: part
Function name: calcShare
asgn
Num:
Den:
Norm:
-100
0
[i]Type for part
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
checking part
Local variable: part
Function name: calcShare
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
checking tmp_170
Temp variable: tmp_170
Function name: calcShare
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_170
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
checking tmp_171
Temp variable: tmp_171
Function name: calcShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_171
Num:
-1
Den:
-1
Norm:
0
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
checking tmp_172
Temp variable: tmp_172
Function name: calcShare
Num:
Den:
Norm:
0
[i]Type for TMP_172
Num:
-1
Den:
-1
Norm:
0
done.
share_1(uint256) := TMP_172(uint256)
checking share
Local variable: share
Function name: calcShare
asgn
Num:
Den:
Norm:
-100
0
[i]Type for share
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Checking return valuecalcShare
share
&&
share
Num:
Den:
Norm:
-100
[i]Type for TMP_168
Num:
Den:
Norm:
-100
done.
RETURN TMP_168
Return...
calcPart
TMP_168
Checking return valuecalcPart
TMP_168
&&
TMP_168
Num:
Den:
Norm:
-100
[i]Type for TMP_59
Num:
Den:
Norm:
-100
done.
_lower_1(uint256) := TMP_59(uint256)
checking _lower
Local variable: _lower
Function name: requirePriceBounds
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _lower
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_60(uint256) = _10k_3 (c)+ bound_1
has variable
[i] TMP_60 cleared
clearing ir...?
TMP_61(uint256) = targetPrice_1 (c)* TMP_60
has variable
[i] TMP_61 cleared
clearing ir...?
TMP_62(uint256) = TMP_61 (c)/ _10k_3
has variable
[i] TMP_62 cleared
clearing ir...?
_upper_1(uint256) := TMP_62(uint256)
has variable
[i] _upper cleared
typecheckig node...
TMP_60(uint256) = _10k_3 (c)+ bound_1
checking tmp_60
Temp variable: tmp_60
Function name: requirePriceBounds
Num:
-1
Den:
-1
Norm:
-100
Num:
Den:
Norm:
0
[i]Type for TMP_60
Num:
-1
Den:
-1
Norm:
0
done.
TMP_61(uint256) = targetPrice_1 (c)* TMP_60
checking tmp_61
Temp variable: tmp_61
Function name: requirePriceBounds
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
0
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_61
Num:
-1
Den:
-1
Norm:
0
done.
TMP_62(uint256) = TMP_61 (c)/ _10k_3
checking tmp_62
Temp variable: tmp_62
Function name: requirePriceBounds
Num:
Den:
Norm:
0
[i]Type for TMP_62
Num:
-1
Den:
-1
Norm:
0
done.
_upper_1(uint256) := TMP_62(uint256)
checking _upper
Local variable: _upper
Function name: requirePriceBounds
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _upper
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
CONDITION inside_1
typecheckig node...
CONDITION inside_1
Condition...
Conidtion: 
inside_1
inside_1
clearning node...
clearing ir...?
TMP_67(bool) = _testingPrice_1 <= _lower_1
has variable
[i] TMP_67 cleared
clearing ir...?
TMP_68(bool) = _testingPrice_1 >= _upper_1
has variable
[i] TMP_68 cleared
clearing ir...?
TMP_69(bool) = TMP_67 || TMP_68
has variable
[i] TMP_69 cleared
clearing ir...?
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,Not outside)
typecheckig node...
TMP_67(bool) = _testingPrice_1 <= _lower_1
checking tmp_67
Temp variable: tmp_67
Function name: requirePriceBounds
testing lt...
Num:
Den:
Norm:
0
[i]Type for TMP_67
Num:
1
Den:
2
Norm:
0
done.
TMP_68(bool) = _testingPrice_1 >= _upper_1
checking tmp_68
Temp variable: tmp_68
Function name: requirePriceBounds
testing gt...
[i]Type for TMP_68
Num:
-1
Den:
-1
Norm:
0
done.
TMP_69(bool) = TMP_67 || TMP_68
checking tmp_69
Temp variable: tmp_69
Function name: requirePriceBounds
[i]Type for TMP_69
Num:
Den:
Norm:
-100
done.
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,Not outside)
checking tmp_70
Temp variable: tmp_70
Function name: requirePriceBounds
checking tmp_70
[i]Type for TMP_70
Num:
Den:
Norm:
-100
done.
[x]node added back
clearning node...
clearing ir...?
TMP_63(bool) = _testingPrice_1 >= _lower_1
has variable
[i] TMP_63 cleared
clearing ir...?
TMP_64(bool) = _testingPrice_1 <= _upper_1
has variable
[i] TMP_64 cleared
clearing ir...?
TMP_65(bool) = TMP_63 && TMP_64
has variable
[i] TMP_65 cleared
clearing ir...?
TMP_66(None) = SOLIDITY_CALL require(bool,string)(TMP_65,Not inside)
typecheckig node...
TMP_63(bool) = _testingPrice_1 >= _lower_1
checking tmp_63
Temp variable: tmp_63
Function name: requirePriceBounds
testing gt...
Num:
Den:
Norm:
0
[i]Type for TMP_63
Num:
1
Den:
2
Norm:
0
done.
TMP_64(bool) = _testingPrice_1 <= _upper_1
checking tmp_64
Temp variable: tmp_64
Function name: requirePriceBounds
testing lt...
[i]Type for TMP_64
Num:
-1
Den:
-1
Norm:
0
done.
TMP_65(bool) = TMP_63 && TMP_64
checking tmp_65
Temp variable: tmp_65
Function name: requirePriceBounds
[i]Type for TMP_65
Num:
Den:
Norm:
-100
done.
TMP_66(None) = SOLIDITY_CALL require(bool,string)(TMP_65,Not inside)
checking tmp_66
Temp variable: tmp_66
Function name: requirePriceBounds
checking tmp_66
[i]Type for TMP_66
Num:
Den:
Norm:
-100
done.
[x]node added back
clearning node...
typecheckig node...
Reading Function: getRewardShare
Function name: getRewardShare
Function Visibility: external
token
Finding type for token...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
rewardReductionFactor
Finding type for rewardReductionFactor...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
VADER_4(address) := ϕ(['VADER_1', 'VADER_6', 'VADER_0'])
clearing ir...?
ROUTER_2(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_0', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
POOLS_24(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
typecheckig node...
VADER_4(address) := ϕ(['VADER_1', 'VADER_6', 'VADER_0'])
checking vader
State IR  variable: vader
State variable: vader
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for VADER
Num:
-2
Den:
-1
Norm:
-100
done.
ROUTER_2(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_0', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_24(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_71 = CONVERT VADER_4 to iVADER
clearing ir...?
TMP_72(bool) = HIGH_LEVEL_CALL, dest:TMP_71(iVADER), function:emitting, arguments:[]  
has variable
[i] TMP_72 cleared
clearing ir...?
VADER_5(address) := ϕ(['VADER_1', 'VADER_4', 'VADER_6'])
clearing ir...?
ROUTER_3(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_2', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
POOLS_25(address) := ϕ(['POOLS_24', 'POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_73 = CONVERT ROUTER_3 to iROUTER
clearing ir...?
TMP_74(bool) = HIGH_LEVEL_CALL, dest:TMP_73(iROUTER), function:isCurated, arguments:['token_1']  
has variable
[i] TMP_74 cleared
clearing ir...?
VADER_6(address) := ϕ(['VADER_1', 'VADER_5', 'VADER_6'])
clearing ir...?
ROUTER_4(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_3', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
POOLS_26(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_25', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_75(bool) = TMP_72 && TMP_74
has variable
[i] TMP_75 cleared
clearing ir...?
CONDITION TMP_75
typecheckig node...
TMP_71 = CONVERT VADER_4 to iVADER
checking tmp_71
Temp variable: tmp_71
Function name: getRewardShare
Num:
Den:
Norm:
-100
0
VADER
[i]Type for TMP_71
Num:
-2
Den:
-1
Norm:
0
done.
TMP_72(bool) = HIGH_LEVEL_CALL, dest:TMP_71(iVADER), function:emitting, arguments:[]  
High Level Call: emitting
checking tmp_72
Temp variable: tmp_72
Function name: getRewardShare
High Call: emitting
func name:emitting
TMP_72
TMP_72
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_72
Num:
-1
Den:
-1
Norm:
0
done.
VADER_5(address) := ϕ(['VADER_1', 'VADER_4', 'VADER_6'])
checking vader
State IR  variable: vader
State variable: vader
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for VADER
Num:
-2
Den:
-1
Norm:
-100
done.
ROUTER_3(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_2', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_25(address) := ϕ(['POOLS_24', 'POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_73 = CONVERT ROUTER_3 to iROUTER
checking tmp_73
Temp variable: tmp_73
Function name: getRewardShare
Num:
Den:
Norm:
-100
0
ROUTER
[i]Type for TMP_73
Num:
-2
Den:
-1
Norm:
0
done.
TMP_74(bool) = HIGH_LEVEL_CALL, dest:TMP_73(iROUTER), function:isCurated, arguments:['token_1']  
High Level Call: iscurated
checking tmp_74
Temp variable: tmp_74
Function name: getRewardShare
High Call: isCurated
func name:isCurated
TMP_74
TMP_74
Finding type for hlc_1...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_74
Num:
-1
Den:
-1
Norm:
0
done.
VADER_6(address) := ϕ(['VADER_1', 'VADER_5', 'VADER_6'])
checking vader
State IR  variable: vader
State variable: vader
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for VADER
Num:
-2
Den:
-1
Norm:
-100
done.
ROUTER_4(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_3', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_26(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_25', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_75(bool) = TMP_72 && TMP_74
checking tmp_75
Temp variable: tmp_75
Function name: getRewardShare
[i]Type for TMP_75
Num:
Den:
Norm:
-100
done.
CONDITION TMP_75
Condition...
Conidtion: 
TMP_75
TMP_75
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_76 = CONVERT POOLS_26 to iPOOLS
clearing ir...?
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:TMP_76(iPOOLS), function:getBaseAmount, arguments:['token_1']  
has variable
[i] TMP_77 cleared
clearing ir...?
ROUTER_5(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
POOLS_27(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
clearing ir...?
_baseAmount_1(uint256) := TMP_77(uint256)
has variable
[i] _baseAmount cleared
typecheckig node...
TMP_76 = CONVERT POOLS_26 to iPOOLS
checking tmp_76
Temp variable: tmp_76
Function name: getRewardShare
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_76
Num:
-2
Den:
-1
Norm:
0
done.
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:TMP_76(iPOOLS), function:getBaseAmount, arguments:['token_1']  
High Level Call: getbaseamount
checking tmp_77
Temp variable: tmp_77
Function name: getRewardShare
High Call: getBaseAmount
func name:getBaseAmount
TMP_77
TMP_77
Finding type for hlc_2...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_77
Num:
1
Den:
-1
Norm:
0
done.
ROUTER_5(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_27(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
_baseAmount_1(uint256) := TMP_77(uint256)
checking _baseamount
Local variable: _baseamount
Function name: getRewardShare
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _baseAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_78 = CONVERT POOLS_27 to iPOOLS
clearing ir...?
TMP_79(bool) = HIGH_LEVEL_CALL, dest:TMP_78(iPOOLS), function:isAsset, arguments:['token_1']  
has variable
[i] TMP_79 cleared
clearing ir...?
ROUTER_6(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_5', 'ROUTER_20'])
clearing ir...?
POOLS_28(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_27', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
CONDITION TMP_79
typecheckig node...
TMP_78 = CONVERT POOLS_27 to iPOOLS
checking tmp_78
Temp variable: tmp_78
Function name: getRewardShare
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_78
Num:
-2
Den:
-1
Norm:
0
done.
TMP_79(bool) = HIGH_LEVEL_CALL, dest:TMP_78(iPOOLS), function:isAsset, arguments:['token_1']  
High Level Call: isasset
checking tmp_79
Temp variable: tmp_79
Function name: getRewardShare
High Call: isAsset
func name:isAsset
TMP_79
TMP_79
Finding type for hlc_3...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_79
Num:
-1
Den:
-1
Norm:
0
done.
ROUTER_6(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_5', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_28(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_27', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
CONDITION TMP_79
Condition...
Conidtion: 
TMP_79
TMP_79
clearning node...
clearing ir...?
TMP_80 = CONVERT POOLS_28 to iPOOLS
clearing ir...?
TMP_81(uint256) = HIGH_LEVEL_CALL, dest:TMP_80(iPOOLS), function:pooledUSDV, arguments:[]  
has variable
[i] TMP_81 cleared
clearing ir...?
ROUTER_7(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_6', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
POOLS_29(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_28', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_82 = CONVERT ROUTER_7 to iROUTER
clearing ir...?
TMP_83(uint256) = HIGH_LEVEL_CALL, dest:TMP_82(iROUTER), function:reserveUSDV, arguments:[]  
has variable
[i] TMP_83 cleared
clearing ir...?
ROUTER_8(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_7', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
POOLS_30(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_29', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_84(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_baseAmount_1,TMP_81,TMP_83)
clearing ir...?
_share_1(uint256) := TMP_84(uint256)
has variable
[i] _share cleared
typecheckig node...
TMP_80 = CONVERT POOLS_28 to iPOOLS
checking tmp_80
Temp variable: tmp_80
Function name: getRewardShare
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_80
Num:
-2
Den:
-1
Norm:
0
done.
TMP_81(uint256) = HIGH_LEVEL_CALL, dest:TMP_80(iPOOLS), function:pooledUSDV, arguments:[]  
High Level Call: pooledusdv
checking tmp_81
Temp variable: tmp_81
Function name: getRewardShare
High Call: pooledUSDV
func name:pooledUSDV
TMP_81
TMP_81
Finding type for hlc_4...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_81
Num:
-1
Den:
-1
Norm:
0
done.
ROUTER_7(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_6', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_29(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_28', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_82 = CONVERT ROUTER_7 to iROUTER
checking tmp_82
Temp variable: tmp_82
Function name: getRewardShare
Num:
Den:
Norm:
-100
0
ROUTER
[i]Type for TMP_82
Num:
-2
Den:
-1
Norm:
0
done.
TMP_83(uint256) = HIGH_LEVEL_CALL, dest:TMP_82(iROUTER), function:reserveUSDV, arguments:[]  
High Level Call: reserveusdv
checking tmp_83
Temp variable: tmp_83
Function name: getRewardShare
High Call: reserveUSDV
func name:reserveUSDV
TMP_83
TMP_83
Finding type for hlc_5...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_83
Num:
1
Den:
-1
Norm:
0
done.
ROUTER_8(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_7', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_30(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_29', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_84(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_baseAmount_1,TMP_81,TMP_83)
Internal call...
calcShare
_baseAmount
TMP_81
TMP_83
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [1]
    den: [-1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
clearing ir...?
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
clearing ir...?
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
typecheckig node...
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
checking part
Local variable: part
Function name: calcShare
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
checking total
Local variable: total
Function name: calcShare
Phi
[i]Type for total
Num:
-1
Den:
-1
Norm:
-100
done.
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
checking amount
Local variable: amount
Function name: calcShare
Phi
[i]Type for amount
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
checking tmp_169
Temp variable: tmp_169
Function name: calcShare
testing gt...
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_169
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
checking part
Local variable: part
Function name: calcShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for part
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
checking part
Local variable: part
Function name: calcShare
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
checking tmp_170
Temp variable: tmp_170
Function name: calcShare
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_170
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
checking tmp_171
Temp variable: tmp_171
Function name: calcShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_171
Num:
-1
Den:
-1
Norm:
0
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
checking tmp_172
Temp variable: tmp_172
Function name: calcShare
Num:
Den:
Norm:
0
[i]Type for TMP_172
Num:
-1
Den:
-1
Norm:
0
done.
share_1(uint256) := TMP_172(uint256)
checking share
Local variable: share
Function name: calcShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for share
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Checking return valuecalcShare
share
&&
share
Num:
Den:
Norm:
-100
[i]Type for TMP_84
Num:
Den:
Norm:
-100
done.
_share_1(uint256) := TMP_84(uint256)
checking _share
Local variable: _share
Function name: getRewardShare
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _share
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_86 = CONVERT POOLS_28 to iPOOLS
clearing ir...?
TMP_87(bool) = HIGH_LEVEL_CALL, dest:TMP_86(iPOOLS), function:isAnchor, arguments:['token_1']  
has variable
[i] TMP_87 cleared
clearing ir...?
ROUTER_10(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
POOLS_32(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
clearing ir...?
CONDITION TMP_87
typecheckig node...
TMP_86 = CONVERT POOLS_28 to iPOOLS
checking tmp_86
Temp variable: tmp_86
Function name: getRewardShare
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_86
Num:
-2
Den:
-1
Norm:
0
done.
TMP_87(bool) = HIGH_LEVEL_CALL, dest:TMP_86(iPOOLS), function:isAnchor, arguments:['token_1']  
High Level Call: isanchor
checking tmp_87
Temp variable: tmp_87
Function name: getRewardShare
High Call: isAnchor
func name:isAnchor
TMP_87
TMP_87
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_87
Num:
-1
Den:
-1
Norm:
0
done.
ROUTER_10(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_32(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
CONDITION TMP_87
Condition...
Conidtion: 
TMP_87
TMP_87
clearning node...
clearing ir...?
TMP_85(uint256) = INTERNAL_CALL, Utils.getReducedShare(uint256,uint256)(_share_1,rewardReductionFactor_1)
clearing ir...?
rewardShare_1(uint256) := TMP_85(uint256)
has variable
[i] rewardShare cleared
typecheckig node...
TMP_85(uint256) = INTERNAL_CALL, Utils.getReducedShare(uint256,uint256)(_share_1,rewardReductionFactor_1)
Internal call...
getReducedShare
_share
rewardReductionFactor
Function: getReducedShare
ic
[i]Type for TMP_85
Num:
Den:
Norm:
-100
done.
rewardShare_1(uint256) := TMP_85(uint256)
checking rewardshare
Local variable: rewardshare
Function name: getRewardShare
asgn
Num:
Den:
Norm:
-100
0
[i]Type for rewardShare
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_88 = CONVERT POOLS_32 to iPOOLS
clearing ir...?
TMP_89(uint256) = HIGH_LEVEL_CALL, dest:TMP_88(iPOOLS), function:pooledVADER, arguments:[]  
has variable
[i] TMP_89 cleared
clearing ir...?
ROUTER_11(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
POOLS_33(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
clearing ir...?
TMP_90 = CONVERT ROUTER_11 to iROUTER
clearing ir...?
TMP_91(uint256) = HIGH_LEVEL_CALL, dest:TMP_90(iROUTER), function:reserveVADER, arguments:[]  
has variable
[i] TMP_91 cleared
clearing ir...?
ROUTER_12(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_11', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
POOLS_34(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_33', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_92(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_baseAmount_1,TMP_89,TMP_91)
clearing ir...?
_share_scope_0_1(uint256) := TMP_92(uint256)
has variable
[i] _share_scope_0 cleared
typecheckig node...
TMP_88 = CONVERT POOLS_32 to iPOOLS
checking tmp_88
Temp variable: tmp_88
Function name: getRewardShare
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_88
Num:
-2
Den:
-1
Norm:
0
done.
TMP_89(uint256) = HIGH_LEVEL_CALL, dest:TMP_88(iPOOLS), function:pooledVADER, arguments:[]  
High Level Call: pooledvader
checking tmp_89
Temp variable: tmp_89
Function name: getRewardShare
High Call: pooledVADER
func name:pooledVADER
TMP_89
TMP_89
Finding type for hlc_1...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_89
Num:
-1
Den:
-1
Norm:
0
done.
ROUTER_11(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_33(address) := ϕ(['POOLS_26', 'POOLS_1', 'POOLS_19', 'POOLS_21', 'POOLS_9', 'POOLS_23', 'POOLS_35', 'POOLS_47', 'POOLS_10', 'POOLS_11', 'POOLS_12', 'POOLS_54', 'POOLS_17', 'POOLS_8', 'POOLS_45', 'POOLS_15', 'POOLS_32', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_90 = CONVERT ROUTER_11 to iROUTER
checking tmp_90
Temp variable: tmp_90
Function name: getRewardShare
Num:
Den:
Norm:
-100
0
ROUTER
[i]Type for TMP_90
Num:
-2
Den:
-1
Norm:
0
done.
TMP_91(uint256) = HIGH_LEVEL_CALL, dest:TMP_90(iROUTER), function:reserveVADER, arguments:[]  
High Level Call: reservevader
checking tmp_91
Temp variable: tmp_91
Function name: getRewardShare
High Call: reserveVADER
func name:reserveVADER
TMP_91
TMP_91
Finding type for hlc_2...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_91
Num:
1
Den:
-1
Norm:
0
done.
ROUTER_12(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_11', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_34(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_33', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getRewardShare
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_92(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_baseAmount_1,TMP_89,TMP_91)
Internal call...
calcShare
_baseAmount
TMP_89
TMP_91
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [1]
    den: [-1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
clearing ir...?
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
clearing ir...?
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
typecheckig node...
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
checking part
Local variable: part
Function name: calcShare
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
checking total
Local variable: total
Function name: calcShare
Phi
[i]Type for total
Num:
-1
Den:
-1
Norm:
-100
done.
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
checking amount
Local variable: amount
Function name: calcShare
Phi
[i]Type for amount
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
checking tmp_169
Temp variable: tmp_169
Function name: calcShare
testing gt...
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_169
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
checking part
Local variable: part
Function name: calcShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for part
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
checking part
Local variable: part
Function name: calcShare
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
checking tmp_170
Temp variable: tmp_170
Function name: calcShare
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_170
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
checking tmp_171
Temp variable: tmp_171
Function name: calcShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_171
Num:
-1
Den:
-1
Norm:
0
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
checking tmp_172
Temp variable: tmp_172
Function name: calcShare
Num:
Den:
Norm:
0
[i]Type for TMP_172
Num:
-1
Den:
-1
Norm:
0
done.
share_1(uint256) := TMP_172(uint256)
checking share
Local variable: share
Function name: calcShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for share
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Checking return valuecalcShare
share
&&
share
Num:
Den:
Norm:
-100
[i]Type for TMP_92
Num:
Den:
Norm:
-100
done.
_share_scope_0_1(uint256) := TMP_92(uint256)
checking _share_scope_0
Local variable: _share_scope_0
Function name: getRewardShare
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _share_scope_0
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_93(uint256) = INTERNAL_CALL, Utils.getReducedShare(uint256,uint256)(_share_scope_0_1,rewardReductionFactor_1)
clearing ir...?
rewardShare_2(uint256) := TMP_93(uint256)
has variable
[i] rewardShare cleared
typecheckig node...
TMP_93(uint256) = INTERNAL_CALL, Utils.getReducedShare(uint256,uint256)(_share_scope_0_1,rewardReductionFactor_1)
Internal call...
getReducedShare
_share_scope_0
rewardReductionFactor
Function: getReducedShare
ic
[i]Type for TMP_93
Num:
Den:
Norm:
-100
done.
rewardShare_2(uint256) := TMP_93(uint256)
checking rewardshare
Local variable: rewardshare
Function name: getRewardShare
asgn
Num:
Den:
Norm:
-100
0
[i]Type for rewardShare
Num:
Den:
Norm:
0
done.
[x]node added back
Reading Function: getReducedShare
Function getReducedShare not marked
Reading Function: getProtection
Function name: getProtection
Function Visibility: public
member
Finding type for member...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
token
Finding type for token...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
basisPoints
Finding type for basisPoints...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
timeForFullProtection
Finding type for timeForFullProtection...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [-2]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
Param: 3
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
ROUTER_14(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_0', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
typecheckig node...
ROUTER_14(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_0', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getProtection
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_95(uint256) = INTERNAL_CALL, Utils.getCoverage(address,address)(member_1,token_1)
clearing ir...?
ROUTER_15(address) := ϕ(['ROUTER_20'])
clearing ir...?
_coverage_1(uint256) := TMP_95(uint256)
has variable
[i] _coverage cleared
typecheckig node...
TMP_95(uint256) = INTERNAL_CALL, Utils.getCoverage(address,address)(member_1,token_1)
Internal call...
getCoverage
member
token
Function: getCoverage
ic
Num:
-2
Den:
-1
Norm:
-100
Num:
-2
Den:
-1
Norm:
-100
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [-2]
    den: [-1]
added
xyz
Function name: getCoverage
Function Visibility: public
clearning node...
clearing ir...?
member_1(address) := ϕ(['member_1'])
clearing ir...?
token_1(address) := ϕ(['token_1'])
clearing ir...?
ROUTER_18(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_0', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
POOLS_36(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
typecheckig node...
member_1(address) := ϕ(['member_1'])
checking member
Local variable: member
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for member
Num:
-2
Den:
-1
Norm:
-100
done.
token_1(address) := ϕ(['token_1'])
checking token
Local variable: token
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
done.
ROUTER_18(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_0', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_36(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_104 = CONVERT ROUTER_18 to iROUTER
clearing ir...?
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:TMP_104(iROUTER), function:getMemberBaseDeposit, arguments:['member_1', 'token_1']  
has variable
[i] TMP_105 cleared
clearing ir...?
ROUTER_19(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_18', 'ROUTER_20'])
clearing ir...?
POOLS_37(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_36', 'POOLS_45', 'POOLS_31'])
clearing ir...?
_B0_1(uint256) := TMP_105(uint256)
has variable
[i] _B0 cleared
typecheckig node...
TMP_104 = CONVERT ROUTER_18 to iROUTER
checking tmp_104
Temp variable: tmp_104
Function name: getCoverage
Num:
Den:
Norm:
-100
0
ROUTER
[i]Type for TMP_104
Num:
-2
Den:
-1
Norm:
0
done.
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:TMP_104(iROUTER), function:getMemberBaseDeposit, arguments:['member_1', 'token_1']  
High Level Call: getmemberbasedeposit
checking tmp_105
Temp variable: tmp_105
Function name: getCoverage
High Call: getMemberBaseDeposit
func name:getMemberBaseDeposit
TMP_105
TMP_105
Finding type for hlc_0...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_105
Num:
1
Den:
-1
Norm:
0
done.
ROUTER_19(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_18', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_37(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_36', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
_B0_1(uint256) := TMP_105(uint256)
checking _b0
Local variable: _b0
Function name: getCoverage
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _B0
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_106 = CONVERT ROUTER_19 to iROUTER
clearing ir...?
TMP_107(uint256) = HIGH_LEVEL_CALL, dest:TMP_106(iROUTER), function:getMemberTokenDeposit, arguments:['member_1', 'token_1']  
has variable
[i] TMP_107 cleared
clearing ir...?
ROUTER_20(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_19', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
POOLS_38(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_37', 'POOLS_45', 'POOLS_31'])
clearing ir...?
_T0_1(uint256) := TMP_107(uint256)
has variable
[i] _T0 cleared
typecheckig node...
TMP_106 = CONVERT ROUTER_19 to iROUTER
checking tmp_106
Temp variable: tmp_106
Function name: getCoverage
Num:
Den:
Norm:
-100
0
ROUTER
[i]Type for TMP_106
Num:
-2
Den:
-1
Norm:
0
done.
TMP_107(uint256) = HIGH_LEVEL_CALL, dest:TMP_106(iROUTER), function:getMemberTokenDeposit, arguments:['member_1', 'token_1']  
High Level Call: getmembertokendeposit
checking tmp_107
Temp variable: tmp_107
Function name: getCoverage
High Call: getMemberTokenDeposit
func name:getMemberTokenDeposit
TMP_107
TMP_107
Finding type for hlc_1...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_107
Num:
2
Den:
-1
Norm:
0
done.
ROUTER_20(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_19', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_38(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_37', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
_T0_1(uint256) := TMP_107(uint256)
checking _t0
Local variable: _t0
Function name: getCoverage
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _T0
Num:
2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_108 = CONVERT POOLS_38 to iPOOLS
clearing ir...?
TMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_108(iPOOLS), function:getMemberUnits, arguments:['token_1', 'member_1']  
has variable
[i] TMP_109 cleared
clearing ir...?
POOLS_39(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_38', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
_units_1(uint256) := TMP_109(uint256)
has variable
[i] _units cleared
typecheckig node...
TMP_108 = CONVERT POOLS_38 to iPOOLS
checking tmp_108
Temp variable: tmp_108
Function name: getCoverage
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_108
Num:
-2
Den:
-1
Norm:
0
done.
TMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_108(iPOOLS), function:getMemberUnits, arguments:['token_1', 'member_1']  
High Level Call: getmemberunits
checking tmp_109
Temp variable: tmp_109
Function name: getCoverage
High Call: getMemberUnits
func name:getMemberUnits
TMP_109
TMP_109
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_109
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_39(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_38', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
_units_1(uint256) := TMP_109(uint256)
checking _units
Local variable: _units
Function name: getCoverage
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _units
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_110 = CONVERT POOLS_39 to iPOOLS
clearing ir...?
TMP_111(uint256) = HIGH_LEVEL_CALL, dest:TMP_110(iPOOLS), function:getUnits, arguments:['token_1']  
has variable
[i] TMP_111 cleared
clearing ir...?
POOLS_40(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_39', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_112 = CONVERT POOLS_40 to iPOOLS
clearing ir...?
TMP_113(uint256) = HIGH_LEVEL_CALL, dest:TMP_112(iPOOLS), function:getBaseAmount, arguments:['token_1']  
has variable
[i] TMP_113 cleared
clearing ir...?
POOLS_41(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_40', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_114(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_111,TMP_113)
clearing ir...?
_B1_1(uint256) := TMP_114(uint256)
has variable
[i] _B1 cleared
typecheckig node...
TMP_110 = CONVERT POOLS_39 to iPOOLS
checking tmp_110
Temp variable: tmp_110
Function name: getCoverage
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_110
Num:
-2
Den:
-1
Norm:
0
done.
TMP_111(uint256) = HIGH_LEVEL_CALL, dest:TMP_110(iPOOLS), function:getUnits, arguments:['token_1']  
High Level Call: getunits
checking tmp_111
Temp variable: tmp_111
Function name: getCoverage
High Call: getUnits
func name:getUnits
TMP_111
TMP_111
Finding type for hlc_3...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_111
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_40(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_39', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_112 = CONVERT POOLS_40 to iPOOLS
checking tmp_112
Temp variable: tmp_112
Function name: getCoverage
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_112
Num:
-2
Den:
-1
Norm:
0
done.
TMP_113(uint256) = HIGH_LEVEL_CALL, dest:TMP_112(iPOOLS), function:getBaseAmount, arguments:['token_1']  
High Level Call: getbaseamount
checking tmp_113
Temp variable: tmp_113
Function name: getCoverage
High Call: getBaseAmount
func name:getBaseAmount
TMP_113
TMP_113
Finding type for hlc_4...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_113
Num:
1
Den:
-1
Norm:
0
done.
POOLS_41(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_40', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_114(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_111,TMP_113)
Internal call...
calcShare
_units
TMP_111
TMP_113
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [1]
    den: [-1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
clearing ir...?
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
clearing ir...?
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
typecheckig node...
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
checking part
Local variable: part
Function name: calcShare
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
checking total
Local variable: total
Function name: calcShare
Phi
[i]Type for total
Num:
-1
Den:
-1
Norm:
-100
done.
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
checking amount
Local variable: amount
Function name: calcShare
Phi
[i]Type for amount
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
checking tmp_169
Temp variable: tmp_169
Function name: calcShare
testing gt...
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_169
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
checking part
Local variable: part
Function name: calcShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for part
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
checking part
Local variable: part
Function name: calcShare
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
checking tmp_170
Temp variable: tmp_170
Function name: calcShare
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_170
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
checking tmp_171
Temp variable: tmp_171
Function name: calcShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_171
Num:
-1
Den:
-1
Norm:
0
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
checking tmp_172
Temp variable: tmp_172
Function name: calcShare
Num:
Den:
Norm:
0
[i]Type for TMP_172
Num:
-1
Den:
-1
Norm:
0
done.
share_1(uint256) := TMP_172(uint256)
checking share
Local variable: share
Function name: calcShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for share
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Checking return valuecalcShare
share
&&
share
Num:
Den:
Norm:
-100
[i]Type for TMP_114
Num:
Den:
Norm:
-100
done.
_B1_1(uint256) := TMP_114(uint256)
checking _b1
Local variable: _b1
Function name: getCoverage
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _B1
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_115 = CONVERT POOLS_42 to iPOOLS
clearing ir...?
TMP_116(uint256) = HIGH_LEVEL_CALL, dest:TMP_115(iPOOLS), function:getUnits, arguments:['token_1']  
has variable
[i] TMP_116 cleared
clearing ir...?
POOLS_43(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_42', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_117 = CONVERT POOLS_43 to iPOOLS
clearing ir...?
TMP_118(uint256) = HIGH_LEVEL_CALL, dest:TMP_117(iPOOLS), function:getTokenAmount, arguments:['token_1']  
has variable
[i] TMP_118 cleared
clearing ir...?
POOLS_44(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_43', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_119(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_116,TMP_118)
clearing ir...?
_T1_1(uint256) := TMP_119(uint256)
has variable
[i] _T1 cleared
typecheckig node...
TMP_115 = CONVERT POOLS_42 to iPOOLS
checking tmp_115
Temp variable: tmp_115
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_115
Num:
-2
Den:
-1
Norm:
0
done.
TMP_116(uint256) = HIGH_LEVEL_CALL, dest:TMP_115(iPOOLS), function:getUnits, arguments:['token_1']  
High Level Call: getunits
checking tmp_116
Temp variable: tmp_116
Function name: getCoverage
High Call: getUnits
func name:getUnits
TMP_116
TMP_116
Finding type for hlc_0...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_116
Num:
1
Den:
-1
Norm:
0
done.
POOLS_43(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_42', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_117 = CONVERT POOLS_43 to iPOOLS
checking tmp_117
Temp variable: tmp_117
Function name: getCoverage
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_117
Num:
-2
Den:
-1
Norm:
0
done.
TMP_118(uint256) = HIGH_LEVEL_CALL, dest:TMP_117(iPOOLS), function:getTokenAmount, arguments:['token_1']  
High Level Call: gettokenamount
checking tmp_118
Temp variable: tmp_118
Function name: getCoverage
High Call: getTokenAmount
func name:getTokenAmount
TMP_118
TMP_118
Finding type for hlc_1...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_118
Num:
2
Den:
-1
Norm:
0
done.
POOLS_44(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_43', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getCoverage
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_119(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_116,TMP_118)
Internal call...
calcShare
_units
TMP_116
TMP_118
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
Param: 2
    num: [2]
    den: [-1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
clearing ir...?
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
clearing ir...?
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
typecheckig node...
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
checking part
Local variable: part
Function name: calcShare
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
checking total
Local variable: total
Function name: calcShare
Phi
[i]Type for total
Num:
-1
Den:
-1
Norm:
-100
done.
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
checking amount
Local variable: amount
Function name: calcShare
Phi
[i]Type for amount
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
checking tmp_169
Temp variable: tmp_169
Function name: calcShare
testing gt...
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_169
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
checking part
Local variable: part
Function name: calcShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for part
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
checking part
Local variable: part
Function name: calcShare
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
checking tmp_170
Temp variable: tmp_170
Function name: calcShare
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_170
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
checking tmp_171
Temp variable: tmp_171
Function name: calcShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_171
Num:
-1
Den:
-1
Norm:
0
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
checking tmp_172
Temp variable: tmp_172
Function name: calcShare
Num:
Den:
Norm:
0
[i]Type for TMP_172
Num:
-1
Den:
-1
Norm:
0
done.
share_1(uint256) := TMP_172(uint256)
checking share
Local variable: share
Function name: calcShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for share
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Checking return valuecalcShare
share
&&
share
Num:
Den:
Norm:
-100
[i]Type for TMP_119
Num:
Den:
Norm:
-100
done.
_T1_1(uint256) := TMP_119(uint256)
checking _t1
Local variable: _t1
Function name: getCoverage
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _T1
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_120(uint256) = INTERNAL_CALL, Utils.calcCoverage(uint256,uint256,uint256,uint256)(_B0_1,_T0_1,_B1_1,_T1_1)
clearing ir...?
RETURN TMP_120
typecheckig node...
TMP_120(uint256) = INTERNAL_CALL, Utils.calcCoverage(uint256,uint256,uint256,uint256)(_B0_1,_T0_1,_B1_1,_T1_1)
Internal call...
calcCoverage
_B0
_T0
_B1
_T1
Function: calcCoverage
ic
[i]Type for TMP_120
Num:
Den:
Norm:
-100
done.
RETURN TMP_120
Return...
getCoverage
TMP_120
Checking return valuegetCoverage
TMP_120
&&
TMP_120
Num:
Den:
Norm:
-100
[i]Type for TMP_95
Num:
Den:
Norm:
-100
done.
ROUTER_15(address) := ϕ(['ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getProtection
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
_coverage_1(uint256) := TMP_95(uint256)
checking _coverage
Local variable: _coverage
Function name: getProtection
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _coverage
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_96 = CONVERT ROUTER_15 to iROUTER
clearing ir...?
TMP_97(bool) = HIGH_LEVEL_CALL, dest:TMP_96(iROUTER), function:isCurated, arguments:['token_1']  
has variable
[i] TMP_97 cleared
clearing ir...?
ROUTER_16(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_15', 'ROUTER_20'])
clearing ir...?
CONDITION TMP_97
typecheckig node...
TMP_96 = CONVERT ROUTER_15 to iROUTER
checking tmp_96
Temp variable: tmp_96
Function name: getProtection
Num:
Den:
Norm:
-100
0
ROUTER
[i]Type for TMP_96
Num:
-2
Den:
-1
Norm:
0
done.
TMP_97(bool) = HIGH_LEVEL_CALL, dest:TMP_96(iROUTER), function:isCurated, arguments:['token_1']  
High Level Call: iscurated
checking tmp_97
Temp variable: tmp_97
Function name: getProtection
High Call: isCurated
func name:isCurated
TMP_97
TMP_97
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_97
Num:
-1
Den:
-1
Norm:
0
done.
ROUTER_16(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_15', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getProtection
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
CONDITION TMP_97
Condition...
Conidtion: 
TMP_97
TMP_97
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_103(uint256) = INTERNAL_CALL, Utils.calcPart(uint256,uint256)(basisPoints_1,protection_3)
clearing ir...?
RETURN TMP_103
typecheckig node...
TMP_103(uint256) = INTERNAL_CALL, Utils.calcPart(uint256,uint256)(basisPoints_1,protection_3)
Internal call...
calcPart
basisPoints
protection
Function: calcPart
ic
Num:
-1
Den:
-1
Norm:
-100
[i]Type for TMP_103
Num:
Den:
Norm:
-100
done.
RETURN TMP_103
Return...
getProtection
protection_0
TMP_103
clearning node...
clearing ir...?
TMP_98 = CONVERT ROUTER_16 to iROUTER
clearing ir...?
TMP_99(uint256) = HIGH_LEVEL_CALL, dest:TMP_98(iROUTER), function:getMemberLastDeposit, arguments:['member_1', 'token_1']  
has variable
[i] TMP_99 cleared
clearing ir...?
ROUTER_17(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
TMP_100(uint256) = block.timestamp (c)- TMP_99
has variable
[i] TMP_100 cleared
clearing ir...?
_duration_1(uint256) := TMP_100(uint256)
has variable
[i] _duration cleared
typecheckig node...
TMP_98 = CONVERT ROUTER_16 to iROUTER
checking tmp_98
Temp variable: tmp_98
Function name: getProtection
Num:
Den:
Norm:
-100
0
ROUTER
[i]Type for TMP_98
Num:
-2
Den:
-1
Norm:
0
done.
TMP_99(uint256) = HIGH_LEVEL_CALL, dest:TMP_98(iROUTER), function:getMemberLastDeposit, arguments:['member_1', 'token_1']  
High Level Call: getmemberlastdeposit
checking tmp_99
Temp variable: tmp_99
Function name: getProtection
High Call: getMemberLastDeposit
func name:getMemberLastDeposit
TMP_99
TMP_99
Finding type for hlc_1...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_99
Num:
-1
Den:
-1
Norm:
0
done.
ROUTER_17(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getProtection
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_100(uint256) = block.timestamp (c)- TMP_99
checking tmp_100
Temp variable: tmp_100
Function name: getProtection
[i]Type for TMP_100
Num:
Den:
Norm:
-100
done.
_duration_1(uint256) := TMP_100(uint256)
checking _duration
Local variable: _duration
Function name: getProtection
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _duration
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_101(bool) = _duration_1 <= timeForFullProtection_1
has variable
[i] TMP_101 cleared
clearing ir...?
CONDITION TMP_101
typecheckig node...
TMP_101(bool) = _duration_1 <= timeForFullProtection_1
checking tmp_101
Temp variable: tmp_101
Function name: getProtection
testing lt...
Num:
-1
Den:
-1
Norm:
-100
Num:
Den:
Norm:
0
[i]Type for TMP_101
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_101
Condition...
Conidtion: 
TMP_101
TMP_101
[x]node added back
clearning node...
clearing ir...?
TMP_102(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_duration_1,timeForFullProtection_1,_coverage_1)
clearing ir...?
protection_1(uint256) := TMP_102(uint256)
has variable
[i] protection cleared
typecheckig node...
TMP_102(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_duration_1,timeForFullProtection_1,_coverage_1)
Internal call...
calcShare
_duration
timeForFullProtection
_coverage
Function: calcShare
ic
[i]Type for TMP_102
Num:
Den:
Norm:
-100
done.
protection_1(uint256) := TMP_102(uint256)
checking protection
Local variable: protection
Function name: getProtection
asgn
Num:
Den:
Norm:
-100
0
[i]Type for protection
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
protection_2(uint256) := _coverage_1(uint256)
has variable
[i] protection cleared
typecheckig node...
protection_2(uint256) := _coverage_1(uint256)
checking protection
Local variable: protection
Function name: getProtection
asgn
Num:
Den:
Norm:
-100
0
[i]Type for protection
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
protection_3(uint256) := ϕ(['protection_1', 'protection_2'])
typecheckig node...
protection_3(uint256) := ϕ(['protection_1', 'protection_2'])
checking protection
Local variable: protection
Function name: getProtection
Phi
[i]Type for protection
Num:
Den:
Norm:
-100
done.
Reading Function: getCoverage
Function getCoverage not marked
Reading Function: getCollateralValueInBase
Function name: getCollateralValueInBase
Function Visibility: external
member
Finding type for member...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
collateral
Finding type for collateral...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
collateralAsset
Finding type for collateralAsset...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
debtAsset
Finding type for debtAsset...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
Param: 2
    num: [-2]
    den: [-1]
Param: 3
    num: [-2]
    den: [-1]
clearning node...
clearing ir...?
POOLS_46(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
FACTORY_2(address) := ϕ(['FACTORY_9', 'FACTORY_10', 'FACTORY_0', 'FACTORY_1', 'FACTORY_3'])
typecheckig node...
POOLS_46(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getCollateralValueInBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
FACTORY_2(address) := ϕ(['FACTORY_9', 'FACTORY_10', 'FACTORY_0', 'FACTORY_1', 'FACTORY_3'])
checking factory
State IR  variable: factory
State variable: factory
Function name: getCollateralValueInBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for FACTORY
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_121(uint256) = collateral_1 (c)* 6666
has variable
[i] TMP_121 cleared
clearing ir...?
TMP_122(uint256) = TMP_121 (c)/ 10000
has variable
[i] TMP_122 cleared
clearing ir...?
_collateralAdjusted_1(uint256) := TMP_122(uint256)
has variable
[i] _collateralAdjusted cleared
typecheckig node...
TMP_121(uint256) = collateral_1 (c)* 6666
checking tmp_121
Temp variable: tmp_121
Function name: getCollateralValueInBase
testing mul...
Num:
1
Den:
-1
Norm:
-100
Constatn varible: 6666
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: 6666
val: 6666
***
False
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_121
Num:
1
Den:
-1
Norm:
0
done.
TMP_122(uint256) = TMP_121 (c)/ 10000
checking tmp_122
Temp variable: tmp_122
Function name: getCollateralValueInBase
Constatn varible: 10000
Constatn varible: 10000
val: 10000
4
Num:
Den:
Norm:
-4
[i]Type for TMP_122
Num:
1
Den:
-1
Norm:
-4
done.
_collateralAdjusted_1(uint256) := TMP_122(uint256)
checking _collateraladjusted
Local variable: _collateraladjusted
Function name: getCollateralValueInBase
asgn
Num:
Den:
Norm:
-100
-4
[i]Type for _collateralAdjusted
Num:
1
Den:
-1
Norm:
-4
done.
clearning node...
clearing ir...?
TMP_123(bool) = INTERNAL_CALL, Utils.isBase(address)(collateralAsset_1)
clearing ir...?
CONDITION TMP_123
typecheckig node...
TMP_123(bool) = INTERNAL_CALL, Utils.isBase(address)(collateralAsset_1)
Internal call...
isBase
collateralAsset
Function: isBase
ic
Num:
-2
Den:
-1
Norm:
-100
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
added
xyz
Function name: isBase
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['collateralAsset_1', 'collateralAsset_1'])
clearing ir...?
VADER_3(address) := ϕ(['VADER_1', 'VADER_6', 'VADER_0'])
clearing ir...?
USDV_3(address) := ϕ(['USDV_1', 'USDV_0'])
typecheckig node...
token_1(address) := ϕ(['collateralAsset_1', 'collateralAsset_1'])
checking token
Local variable: token
Function name: isBase
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
done.
VADER_3(address) := ϕ(['VADER_1', 'VADER_6', 'VADER_0'])
checking vader
State IR  variable: vader
State variable: vader
Function name: isBase
Phi
[i]Type for VADER
Num:
-2
Den:
-1
Norm:
-100
done.
USDV_3(address) := ϕ(['USDV_1', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: isBase
Phi
[i]Type for USDV
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_31(bool) = token_1 == VADER_3
has variable
[i] TMP_31 cleared
clearing ir...?
TMP_32(bool) = token_1 == USDV_3
has variable
[i] TMP_32 cleared
clearing ir...?
TMP_33(bool) = TMP_31 || TMP_32
has variable
[i] TMP_33 cleared
clearing ir...?
CONDITION TMP_33
typecheckig node...
TMP_31(bool) = token_1 == VADER_3
checking tmp_31
Temp variable: tmp_31
Function name: isBase
[i]Type for TMP_31
Num:
Den:
Norm:
-100
done.
TMP_32(bool) = token_1 == USDV_3
checking tmp_32
Temp variable: tmp_32
Function name: isBase
[i]Type for TMP_32
Num:
Den:
Norm:
-100
done.
TMP_33(bool) = TMP_31 || TMP_32
checking tmp_33
Temp variable: tmp_33
Function name: isBase
[i]Type for TMP_33
Num:
Den:
Norm:
-100
done.
CONDITION TMP_33
Condition...
Conidtion: 
TMP_33
TMP_33
clearning node...
clearing ir...?
RETURN True
typecheckig node...
RETURN True
Return...
isBase
True
True
clearning node...
typecheckig node...
Checking return valueisBase
True
&&
True
Constatn varible: true
Num:
Den:
Norm:
-100
[i]Type for TMP_123
Num:
-1
Den:
-1
Norm:
-100
done.
CONDITION TMP_123
Condition...
Conidtion: 
TMP_123
TMP_123
clearning node...
clearing ir...?
baseValue_5(uint256) := _collateralAdjusted_1(uint256)
has variable
[i] baseValue cleared
typecheckig node...
baseValue_5(uint256) := _collateralAdjusted_1(uint256)
checking basevalue
Local variable: basevalue
Function name: getCollateralValueInBase
asgn
Num:
Den:
Norm:
-100
-4
[i]Type for baseValue
Num:
1
Den:
-1
Norm:
-4
done.
clearning node...
clearing ir...?
TMP_124(bool) = INTERNAL_CALL, Utils.isPool(address)(collateralAsset_1)
clearing ir...?
POOLS_48(address) := ϕ(['POOLS_15'])
clearing ir...?
CONDITION TMP_124
typecheckig node...
TMP_124(bool) = INTERNAL_CALL, Utils.isPool(address)(collateralAsset_1)
Internal call...
isPool
collateralAsset
Function: isPool
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
added
xyz
Function name: isPool
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
POOLS_13(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
typecheckig node...
token_1(address) := ϕ(['collateralAsset_1'])
checking token
Local variable: token
Function name: isPool
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_13(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: isPool
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_34 = CONVERT POOLS_13 to iPOOLS
clearing ir...?
TMP_35(bool) = HIGH_LEVEL_CALL, dest:TMP_34(iPOOLS), function:isAnchor, arguments:['token_1']  
has variable
[i] TMP_35 cleared
clearing ir...?
POOLS_14(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_13', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_36 = CONVERT POOLS_14 to iPOOLS
clearing ir...?
TMP_37(bool) = HIGH_LEVEL_CALL, dest:TMP_36(iPOOLS), function:isAsset, arguments:['token_1']  
has variable
[i] TMP_37 cleared
clearing ir...?
POOLS_15(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_14', 'POOLS_31'])
clearing ir...?
TMP_38(bool) = TMP_35 || TMP_37
has variable
[i] TMP_38 cleared
clearing ir...?
CONDITION TMP_38
typecheckig node...
TMP_34 = CONVERT POOLS_13 to iPOOLS
checking tmp_34
Temp variable: tmp_34
Function name: isPool
Num:
-2
Den:
-1
Norm:
0
0
POOLS
[i]Type for TMP_34
Num:
-2
Den:
-1
Norm:
0
done.
TMP_35(bool) = HIGH_LEVEL_CALL, dest:TMP_34(iPOOLS), function:isAnchor, arguments:['token_1']  
High Level Call: isanchor
checking tmp_35
Temp variable: tmp_35
Function name: isPool
High Call: isAnchor
func name:isAnchor
TMP_35
TMP_35
Finding type for hlc_0...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_35
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_14(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_13', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: isPool
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_36 = CONVERT POOLS_14 to iPOOLS
checking tmp_36
Temp variable: tmp_36
Function name: isPool
Num:
-2
Den:
-1
Norm:
0
0
POOLS
[i]Type for TMP_36
Num:
-2
Den:
-1
Norm:
0
done.
TMP_37(bool) = HIGH_LEVEL_CALL, dest:TMP_36(iPOOLS), function:isAsset, arguments:['token_1']  
High Level Call: isasset
checking tmp_37
Temp variable: tmp_37
Function name: isPool
High Call: isAsset
func name:isAsset
TMP_37
TMP_37
Finding type for hlc_1...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_37
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_15(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_14', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: isPool
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_38(bool) = TMP_35 || TMP_37
checking tmp_38
Temp variable: tmp_38
Function name: isPool
[i]Type for TMP_38
Num:
Den:
Norm:
-100
done.
CONDITION TMP_38
Condition...
Conidtion: 
TMP_38
TMP_38
clearning node...
clearing ir...?
pool_1(bool) := True(bool)
has variable
[i] pool cleared
typecheckig node...
pool_1(bool) := True(bool)
checking pool
Local variable: pool
Function name: isPool
asgn
Constatn varible: true
Num:
Den:
Norm:
0
Constatn varible: true
val: True
0
Constatn varible: true
val: True
[i]Type for pool
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Checking return valueisPool
pool
&&
pool
Num:
Den:
Norm:
-100
[i]Type for TMP_124
Num:
Den:
Norm:
-100
done.
POOLS_48(address) := ϕ(['POOLS_15'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getCollateralValueInBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
CONDITION TMP_124
Condition...
Conidtion: 
TMP_124
TMP_124
clearning node...
clearing ir...?
baseValue_6(uint256) := ϕ(['baseValue_0', 'baseValue_5'])
typecheckig node...
baseValue_6(uint256) := ϕ(['baseValue_0', 'baseValue_5'])
checking basevalue
Local variable: basevalue
Function name: getCollateralValueInBase
Phi
[i]Type for baseValue
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_130 = CONVERT FACTORY_4 to iFACTORY
clearing ir...?
TMP_131(bool) = HIGH_LEVEL_CALL, dest:TMP_130(iFACTORY), function:isSynth, arguments:['collateralAsset_1']  
has variable
[i] TMP_131 cleared
clearing ir...?
FACTORY_5(address) := ϕ(['FACTORY_9', 'FACTORY_10', 'FACTORY_1', 'FACTORY_3', 'FACTORY_4'])
clearing ir...?
CONDITION TMP_131
typecheckig node...
TMP_130 = CONVERT FACTORY_4 to iFACTORY
checking tmp_130
Temp variable: tmp_130
Function name: getCollateralValueInBase
Num:
-2
Den:
-1
Norm:
-100
Num:
Den:
Norm:
-100
0
FACTORY
[i]Type for TMP_130
Num:
-2
Den:
-1
Norm:
0
done.
TMP_131(bool) = HIGH_LEVEL_CALL, dest:TMP_130(iFACTORY), function:isSynth, arguments:['collateralAsset_1']  
High Level Call: issynth
checking tmp_131
Temp variable: tmp_131
Function name: getCollateralValueInBase
High Call: isSynth
func name:isSynth
TMP_131
TMP_131
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_131
Num:
-1
Den:
-1
Norm:
0
done.
FACTORY_5(address) := ϕ(['FACTORY_9', 'FACTORY_10', 'FACTORY_1', 'FACTORY_3', 'FACTORY_4'])
checking factory
State IR  variable: factory
State variable: factory
Function name: getCollateralValueInBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for FACTORY
Num:
-2
Den:
-1
Norm:
-100
done.
CONDITION TMP_131
Condition...
Conidtion: 
TMP_131
TMP_131
clearning node...
clearing ir...?
TMP_125 = CONVERT POOLS_48 to iPOOLS
clearing ir...?
TMP_126(uint256) = HIGH_LEVEL_CALL, dest:TMP_125(iPOOLS), function:getMemberUnits, arguments:['collateralAsset_1', 'member_1']  
has variable
[i] TMP_126 cleared
clearing ir...?
POOLS_49(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_48', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_127 = CONVERT POOLS_49 to iPOOLS
clearing ir...?
TMP_128(uint256) = HIGH_LEVEL_CALL, dest:TMP_127(iPOOLS), function:getBaseAmount, arguments:['collateralAsset_1']  
has variable
[i] TMP_128 cleared
clearing ir...?
POOLS_50(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_49', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
TMP_129(uint256) = INTERNAL_CALL, Utils.calcAsymmetricShare(uint256,uint256,uint256)(_collateralAdjusted_1,TMP_126,TMP_128)
clearing ir...?
baseValue_3(uint256) := TMP_129(uint256)
has variable
[i] baseValue cleared
typecheckig node...
TMP_125 = CONVERT POOLS_48 to iPOOLS
checking tmp_125
Temp variable: tmp_125
Function name: getCollateralValueInBase
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_125
Num:
-2
Den:
-1
Norm:
0
done.
TMP_126(uint256) = HIGH_LEVEL_CALL, dest:TMP_125(iPOOLS), function:getMemberUnits, arguments:['collateralAsset_1', 'member_1']  
High Level Call: getmemberunits
checking tmp_126
Temp variable: tmp_126
Function name: getCollateralValueInBase
High Call: getMemberUnits
func name:getMemberUnits
TMP_126
TMP_126
Finding type for hlc_3...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_126
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_49(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_48', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getCollateralValueInBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_127 = CONVERT POOLS_49 to iPOOLS
checking tmp_127
Temp variable: tmp_127
Function name: getCollateralValueInBase
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_127
Num:
-2
Den:
-1
Norm:
0
done.
TMP_128(uint256) = HIGH_LEVEL_CALL, dest:TMP_127(iPOOLS), function:getBaseAmount, arguments:['collateralAsset_1']  
High Level Call: getbaseamount
checking tmp_128
Temp variable: tmp_128
Function name: getCollateralValueInBase
High Call: getBaseAmount
func name:getBaseAmount
TMP_128
TMP_128
Finding type for hlc_4...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_128
Num:
1
Den:
-1
Norm:
0
done.
POOLS_50(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_49', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getCollateralValueInBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_129(uint256) = INTERNAL_CALL, Utils.calcAsymmetricShare(uint256,uint256,uint256)(_collateralAdjusted_1,TMP_126,TMP_128)
Internal call...
calcAsymmetricShare
_collateralAdjusted
TMP_126
TMP_128
Function: calcAsymmetricShare
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [1]
    den: [-1]
added
xyz
Function name: calcAsymmetricShare
Function Visibility: public
clearning node...
clearing ir...?
u_1(uint256) := ϕ(['_collateralAdjusted_1'])
clearing ir...?
U_1(uint256) := ϕ(['TMP_126'])
clearing ir...?
A_1(uint256) := ϕ(['TMP_128'])
typecheckig node...
u_1(uint256) := ϕ(['_collateralAdjusted_1'])
checking u
Local variable: u
Function name: calcAsymmetricShare
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for u
Num:
1
Den:
-1
Norm:
-100
done.
U_1(uint256) := ϕ(['TMP_126'])
checking u
Local variable: u
Function name: calcAsymmetricShare
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for U
Num:
-1
Den:
-1
Norm:
-100
done.
A_1(uint256) := ϕ(['TMP_128'])
checking a
Local variable: a
Function name: calcAsymmetricShare
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for A
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_215(uint256) = u_1 (c)* A_1
has variable
[i] TMP_215 cleared
clearing ir...?
part1_1(uint256) := TMP_215(uint256)
has variable
[i] part1 cleared
typecheckig node...
TMP_215(uint256) = u_1 (c)* A_1
checking tmp_215
Temp variable: tmp_215
Function name: calcAsymmetricShare
testing mul...
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_215
Num:
1
1
Den:
-1
Norm:
0
done.
part1_1(uint256) := TMP_215(uint256)
checking part1
Local variable: part1
Function name: calcAsymmetricShare
asgn
Num:
Den:
Norm:
-100
0
[i]Type for part1
Num:
1
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_216(uint256) = U_1 (c)* U_1
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(uint256) = TMP_216 (c)* 2
has variable
[i] TMP_217 cleared
clearing ir...?
part2_1(uint256) := TMP_217(uint256)
has variable
[i] part2 cleared
typecheckig node...
TMP_216(uint256) = U_1 (c)* U_1
checking tmp_216
Temp variable: tmp_216
Function name: calcAsymmetricShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_216
Num:
-1
Den:
-1
Norm:
0
done.
TMP_217(uint256) = TMP_216 (c)* 2
checking tmp_217
Temp variable: tmp_217
Function name: calcAsymmetricShare
testing mul...
Constatn varible: 2
---
Num:
-1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: 2
val: 2
***
False
False
True
True
Constatn varible: 2
Num:
Den:
Norm:
0
[i]Type for TMP_217
Num:
-1
Den:
-1
Norm:
0
done.
part2_1(uint256) := TMP_217(uint256)
checking part2
Local variable: part2
Function name: calcAsymmetricShare
asgn
Num:
Den:
Norm:
-100
0
[i]Type for part2
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_218(uint256) = U_1 (c)* u_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(uint256) = TMP_218 (c)* 2
has variable
[i] TMP_219 cleared
clearing ir...?
part3_1(uint256) := TMP_219(uint256)
has variable
[i] part3 cleared
typecheckig node...
TMP_218(uint256) = U_1 (c)* u_1
checking tmp_218
Temp variable: tmp_218
Function name: calcAsymmetricShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
True
False
Num:
Den:
Norm:
0
[i]Type for TMP_218
Num:
1
Den:
-1
Norm:
0
done.
TMP_219(uint256) = TMP_218 (c)* 2
checking tmp_219
Temp variable: tmp_219
Function name: calcAsymmetricShare
testing mul...
Constatn varible: 2
---
Num:
1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: 2
val: 2
***
False
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_219
Num:
1
Den:
-1
Norm:
0
done.
part3_1(uint256) := TMP_219(uint256)
checking part3
Local variable: part3
Function name: calcAsymmetricShare
asgn
Num:
Den:
Norm:
-100
0
[i]Type for part3
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_220(uint256) = u_1 (c)* u_1
has variable
[i] TMP_220 cleared
clearing ir...?
part4_1(uint256) := TMP_220(uint256)
has variable
[i] part4 cleared
typecheckig node...
TMP_220(uint256) = u_1 (c)* u_1
checking tmp_220
Temp variable: tmp_220
Function name: calcAsymmetricShare
testing mul...
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_220
Num:
1
1
Den:
-1
Norm:
0
done.
part4_1(uint256) := TMP_220(uint256)
checking part4
Local variable: part4
Function name: calcAsymmetricShare
asgn
Num:
Den:
Norm:
-100
0
[i]Type for part4
Num:
1
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_221(uint256) = part1_1 (c)* part2_1
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(uint256) = TMP_221 (c)- part3_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(uint256) = TMP_222 (c)+ part4_1
has variable
[i] TMP_223 cleared
clearing ir...?
numerator_1(uint256) := TMP_223(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_221(uint256) = part1_1 (c)* part2_1
checking tmp_221
Temp variable: tmp_221
Function name: calcAsymmetricShare
testing mul...
---
Num:
1
1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
0
***
False
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_221
Num:
1
1
Den:
-1
Norm:
0
done.
TMP_222(uint256) = TMP_221 (c)- part3_1
checking tmp_222
Temp variable: tmp_222
Function name: calcAsymmetricShare
Num:
1
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Error with: TMP_222 in function calcAsymmetricShare
[i]Type for TMP_222
Num:
-1
Den:
-1
Norm:
0
done.
TMP_223(uint256) = TMP_222 (c)+ part4_1
checking tmp_223
Temp variable: tmp_223
Function name: calcAsymmetricShare
Num:
Den:
Norm:
0
[i]Type for TMP_223
Num:
1
1
Den:
-1
Norm:
0
done.
numerator_1(uint256) := TMP_223(uint256)
checking numerator
Local variable: numerator
Function name: calcAsymmetricShare
asgn
Num:
Den:
Norm:
-100
0
[i]Type for numerator
Num:
1
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_224(uint256) = U_1 (c)* U_1
has variable
[i] TMP_224 cleared
clearing ir...?
TMP_225(uint256) = TMP_224 (c)* U_1
has variable
[i] TMP_225 cleared
clearing ir...?
part5_1(uint256) := TMP_225(uint256)
has variable
[i] part5 cleared
typecheckig node...
TMP_224(uint256) = U_1 (c)* U_1
checking tmp_224
Temp variable: tmp_224
Function name: calcAsymmetricShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_224
Num:
-1
Den:
-1
Norm:
0
done.
TMP_225(uint256) = TMP_224 (c)* U_1
checking tmp_225
Temp variable: tmp_225
Function name: calcAsymmetricShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_225
Num:
-1
Den:
-1
Norm:
0
done.
part5_1(uint256) := TMP_225(uint256)
checking part5
Local variable: part5
Function name: calcAsymmetricShare
asgn
Num:
Den:
Norm:
-100
0
[i]Type for part5
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_226(uint256) = numerator_1 (c)/ part5_1
has variable
[i] TMP_226 cleared
clearing ir...?
RETURN TMP_226
typecheckig node...
TMP_226(uint256) = numerator_1 (c)/ part5_1
checking tmp_226
Temp variable: tmp_226
Function name: calcAsymmetricShare
Num:
Den:
Norm:
0
[i]Type for TMP_226
Num:
1
1
Den:
-1
Norm:
0
done.
RETURN TMP_226
Return...
calcAsymmetricShare
TMP_226
Checking return valuecalcAsymmetricShare
TMP_226
&&
TMP_226
Num:
Den:
Norm:
-100
[i]Type for TMP_129
Num:
1
1
Den:
-1
Norm:
-100
done.
baseValue_3(uint256) := TMP_129(uint256)
checking basevalue
Local variable: basevalue
Function name: getCollateralValueInBase
asgn
Num:
Den:
Norm:
-100
0
[i]Type for baseValue
Num:
1
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
baseValue_2(uint256) := ϕ(['baseValue_0', 'baseValue_1'])
typecheckig node...
baseValue_2(uint256) := ϕ(['baseValue_0', 'baseValue_1'])
checking basevalue
Local variable: basevalue
Function name: getCollateralValueInBase
Phi
[i]Type for baseValue
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_132 = CONVERT collateralAsset_1 to iSYNTH
clearing ir...?
TMP_133(address) = HIGH_LEVEL_CALL, dest:TMP_132(iSYNTH), function:TOKEN, arguments:[]  
has variable
[i] TMP_133 cleared
clearing ir...?
TMP_134(uint256) = INTERNAL_CALL, Utils.calcSwapValueInBase(address,uint256)(TMP_133,_collateralAdjusted_1)
clearing ir...?
baseValue_1(uint256) := TMP_134(uint256)
has variable
[i] baseValue cleared
typecheckig node...
TMP_132 = CONVERT collateralAsset_1 to iSYNTH
checking tmp_132
Temp variable: tmp_132
Function name: getCollateralValueInBase
Num:
Den:
Norm:
-100
0
collateralAsset
[i]Type for TMP_132
Num:
-2
Den:
-1
Norm:
0
done.
TMP_133(address) = HIGH_LEVEL_CALL, dest:TMP_132(iSYNTH), function:TOKEN, arguments:[]  
High Level Call: token
checking tmp_133
Temp variable: tmp_133
Function name: getCollateralValueInBase
High Call: TOKEN
func name:TOKEN
TMP_133
TMP_133
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_133
Num:
-1
Den:
-1
Norm:
0
done.
TMP_134(uint256) = INTERNAL_CALL, Utils.calcSwapValueInBase(address,uint256)(TMP_133,_collateralAdjusted_1)
Internal call...
calcSwapValueInBase
TMP_133
_collateralAdjusted
Function: calcSwapValueInBase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
added
xyz
Function name: calcSwapValueInBase
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['TMP_133'])
clearing ir...?
amount_1(uint256) := ϕ(['_collateralAdjusted_1'])
clearing ir...?
POOLS_20(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
typecheckig node...
token_1(address) := ϕ(['TMP_133'])
checking token
Local variable: token
Function name: calcSwapValueInBase
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for token
Num:
-1
Den:
-1
Norm:
-100
done.
amount_1(uint256) := ϕ(['_collateralAdjusted_1'])
checking amount
Local variable: amount
Function name: calcSwapValueInBase
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for amount
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_20(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: calcSwapValueInBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_53 = CONVERT POOLS_20 to iPOOLS
clearing ir...?
TUPLE_2(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_53(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
has variable
clearing ir...?
POOLS_21(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_20', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
_baseAmt_1(uint256)= UNPACK TUPLE_2 index: 0 
clearing ir...?
_tokenAmt_1(uint256)= UNPACK TUPLE_2 index: 1 
typecheckig node...
TMP_53 = CONVERT POOLS_20 to iPOOLS
checking tmp_53
Temp variable: tmp_53
Function name: calcSwapValueInBase
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_53
Num:
-2
Den:
-1
Norm:
0
done.
TUPLE_2(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_53(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
High Level Call: getpoolamounts
checking tuple_2
TUple variable: tuple_2
Function name: calcSwapValueInBase
High Call: getPoolAmounts
func name:getPoolAmounts
TUPLE_2
TUPLE_2
Finding type for hlc_0...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TUPLE_2
Num:
1
Den:
-1
Norm:
0
done.
POOLS_21(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_20', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: calcSwapValueInBase
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
_baseAmt_1(uint256)= UNPACK TUPLE_2 index: 0 
checking _baseamt
Local variable: _baseamt
Function name: calcSwapValueInBase
Reading tuple TUPLE_2 index 0
Finding type for _baseAmt...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for _baseAmt
Num:
1
Den:
-1
Norm:
0
done.
_tokenAmt_1(uint256)= UNPACK TUPLE_2 index: 1 
checking _tokenamt
Local variable: _tokenamt
Function name: calcSwapValueInBase
Reading tuple TUPLE_2 index 1
Finding type for _tokenAmt...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for _tokenAmt
Num:
2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_54(uint256) = INTERNAL_CALL, Utils.calcSwapOutput(uint256,uint256,uint256)(amount_1,_tokenAmt_1,_baseAmt_1)
clearing ir...?
RETURN TMP_54
typecheckig node...
TMP_54(uint256) = INTERNAL_CALL, Utils.calcSwapOutput(uint256,uint256,uint256)(amount_1,_tokenAmt_1,_baseAmt_1)
Internal call...
calcSwapOutput
amount
_tokenAmt
_baseAmt
Function: calcSwapOutput
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [2]
    den: [-1]
Param: 2
    num: [1]
    den: [-1]
added
xyz
Function name: calcSwapOutput
Function Visibility: public
clearning node...
clearing ir...?
x_1(uint256) := ϕ(['amount_1', 'amount_1'])
clearing ir...?
X_1(uint256) := ϕ(['_tokenAmt_1', '_baseAmt_1'])
clearing ir...?
Y_1(uint256) := ϕ(['_tokenAmt_1', '_baseAmt_1'])
typecheckig node...
x_1(uint256) := ϕ(['amount_1', 'amount_1'])
checking x
Local variable: x
Function name: calcSwapOutput
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for x
Num:
1
Den:
-1
Norm:
-100
done.
X_1(uint256) := ϕ(['_tokenAmt_1', '_baseAmt_1'])
checking x
Local variable: x
Function name: calcSwapOutput
Num:
2
Den:
-1
Norm:
-100
Phi
[i]Type for X
Num:
2
Den:
-1
Norm:
-100
done.
Y_1(uint256) := ϕ(['_tokenAmt_1', '_baseAmt_1'])
checking y
Local variable: y
Function name: calcSwapOutput
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for Y
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_173(uint256) = x_1 (c)* X_1
has variable
[i] TMP_173 cleared
clearing ir...?
TMP_174(uint256) = TMP_173 (c)* Y_1
has variable
[i] TMP_174 cleared
clearing ir...?
numerator_1(uint256) := TMP_174(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_173(uint256) = x_1 (c)* X_1
checking tmp_173
Temp variable: tmp_173
Function name: calcSwapOutput
testing mul...
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
2
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_173
Num:
1
2
Den:
-1
Norm:
0
done.
TMP_174(uint256) = TMP_173 (c)* Y_1
checking tmp_174
Temp variable: tmp_174
Function name: calcSwapOutput
testing mul...
---
Num:
1
2
Den:
-1
Norm:
0
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_174
Num:
1
2
1
Den:
-1
Norm:
0
done.
numerator_1(uint256) := TMP_174(uint256)
checking numerator
Local variable: numerator
Function name: calcSwapOutput
asgn
Num:
Den:
Norm:
-100
0
[i]Type for numerator
Num:
1
2
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_175(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_175 cleared
clearing ir...?
TMP_176(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_176 cleared
clearing ir...?
TMP_177(uint256) = TMP_175 (c)* TMP_176
has variable
[i] TMP_177 cleared
clearing ir...?
denominator_1(uint256) := TMP_177(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_175(uint256) = x_1 (c)+ X_1
checking tmp_175
Temp variable: tmp_175
Function name: calcSwapOutput
Error with: TMP_175 in function calcSwapOutput
[i]Type for TMP_175
Num:
-1
Den:
-1
Norm:
0
done.
TMP_176(uint256) = x_1 (c)+ X_1
checking tmp_176
Temp variable: tmp_176
Function name: calcSwapOutput
Error with: TMP_176 in function calcSwapOutput
[i]Type for TMP_176
Num:
-1
Den:
-1
Norm:
0
done.
TMP_177(uint256) = TMP_175 (c)* TMP_176
checking tmp_177
Temp variable: tmp_177
Function name: calcSwapOutput
testing mul...
---
Num:
-1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
0
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_177
Num:
-1
Den:
-1
Norm:
0
done.
denominator_1(uint256) := TMP_177(uint256)
checking denominator
Local variable: denominator
Function name: calcSwapOutput
asgn
Num:
Den:
Norm:
-100
0
[i]Type for denominator
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_178(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_178 cleared
clearing ir...?
RETURN TMP_178
typecheckig node...
TMP_178(uint256) = numerator_1 (c)/ denominator_1
checking tmp_178
Temp variable: tmp_178
Function name: calcSwapOutput
Num:
Den:
Norm:
0
[i]Type for TMP_178
Num:
1
2
1
Den:
-1
Norm:
0
done.
RETURN TMP_178
Return...
calcSwapOutput
TMP_178
Checking return valuecalcSwapOutput
TMP_178
&&
TMP_178
Num:
Den:
Norm:
-100
[i]Type for TMP_54
Num:
1
2
1
Den:
-1
Norm:
-100
done.
RETURN TMP_54
Return...
calcSwapValueInBase
TMP_54
Checking return valuecalcSwapValueInBase
TMP_54
&&
TMP_54
Num:
Den:
Norm:
-100
[i]Type for TMP_134
Num:
1
2
1
Den:
-1
Norm:
-100
done.
baseValue_1(uint256) := TMP_134(uint256)
checking basevalue
Local variable: basevalue
Function name: getCollateralValueInBase
asgn
Num:
Den:
Norm:
-100
0
[i]Type for baseValue
Num:
1
2
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_135(uint256) = INTERNAL_CALL, Utils.calcSwapValueInToken(address,uint256)(debtAsset_1,baseValue_6)
clearing ir...?
debt_1(uint256) := TMP_135(uint256)
has variable
[i] debt cleared
typecheckig node...
TMP_135(uint256) = INTERNAL_CALL, Utils.calcSwapValueInToken(address,uint256)(debtAsset_1,baseValue_6)
Internal call...
calcSwapValueInToken
debtAsset
baseValue
Function: calcSwapValueInToken
ic
Num:
-2
Den:
-1
Norm:
-100
[i]Type for TMP_135
Num:
Den:
Norm:
-100
done.
debt_1(uint256) := TMP_135(uint256)
checking debt
Local variable: debt
Function name: getCollateralValueInBase
asgn
Num:
Den:
Norm:
-100
0
[i]Type for debt
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
baseValue_4(uint256) := ϕ(['baseValue_3', 'baseValue_0'])
typecheckig node...
baseValue_4(uint256) := ϕ(['baseValue_3', 'baseValue_0'])
checking basevalue
Local variable: basevalue
Function name: getCollateralValueInBase
Phi
[i]Type for baseValue
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
RETURN debt_1,baseValue_6
typecheckig node...
RETURN debt_1,baseValue_6
Return...
getCollateralValueInBase
debt_0
baseValue_0
debt_1
baseValue_6
Reading Function: getDebtValueInCollateral
Function getDebtValueInCollateral not marked
Reading Function: getInterestOwed
Function getInterestOwed not marked
Reading Function: getInterestPayment
Function name: getInterestPayment
Function Visibility: public
collateralAsset
Finding type for collateralAsset...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
debtAsset
Finding type for debtAsset...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [-2]
    den: [-1]
clearning node...
clearing ir...?
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
debtAsset_1(address) := ϕ(['debtAsset_1'])
clearing ir...?
ROUTER_26(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_0', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
typecheckig node...
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking collateralasset
Local variable: collateralasset
Function name: getInterestPayment
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for collateralAsset
Num:
-2
Den:
-1
Norm:
-100
done.
debtAsset_1(address) := ϕ(['debtAsset_1'])
checking debtasset
Local variable: debtasset
Function name: getInterestPayment
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for debtAsset
Num:
-2
Den:
-1
Norm:
-100
done.
ROUTER_26(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_0', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getInterestPayment
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_153(uint256) = INTERNAL_CALL, Utils.getDebtLoading(address,address)(collateralAsset_1,debtAsset_1)
clearing ir...?
ROUTER_27(address) := ϕ(['ROUTER_30'])
clearing ir...?
_debtLoading_1(uint256) := TMP_153(uint256)
has variable
[i] _debtLoading cleared
typecheckig node...
TMP_153(uint256) = INTERNAL_CALL, Utils.getDebtLoading(address,address)(collateralAsset_1,debtAsset_1)
Internal call...
getDebtLoading
collateralAsset
debtAsset
Function: getDebtLoading
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [-2]
    den: [-1]
added
xyz
Function name: getDebtLoading
Function Visibility: public
clearning node...
clearing ir...?
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
debtAsset_1(address) := ϕ(['debtAsset_1'])
clearing ir...?
ROUTER_29(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_0', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
POOLS_52(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
typecheckig node...
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking collateralasset
Local variable: collateralasset
Function name: getDebtLoading
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for collateralAsset
Num:
-2
Den:
-1
Norm:
-100
done.
debtAsset_1(address) := ϕ(['debtAsset_1'])
checking debtasset
Local variable: debtasset
Function name: getDebtLoading
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for debtAsset
Num:
-2
Den:
-1
Norm:
-100
done.
ROUTER_29(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_0', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getDebtLoading
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_52(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getDebtLoading
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_158 = CONVERT ROUTER_29 to iROUTER
clearing ir...?
TMP_159(uint256) = HIGH_LEVEL_CALL, dest:TMP_158(iROUTER), function:getSystemDebt, arguments:['collateralAsset_1', 'debtAsset_1']  
has variable
[i] TMP_159 cleared
clearing ir...?
ROUTER_30(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_29', 'ROUTER_20'])
clearing ir...?
POOLS_53(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_52', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
_debtIssued_1(uint256) := TMP_159(uint256)
has variable
[i] _debtIssued cleared
typecheckig node...
TMP_158 = CONVERT ROUTER_29 to iROUTER
checking tmp_158
Temp variable: tmp_158
Function name: getDebtLoading
Num:
Den:
Norm:
-100
0
ROUTER
[i]Type for TMP_158
Num:
-2
Den:
-1
Norm:
0
done.
TMP_159(uint256) = HIGH_LEVEL_CALL, dest:TMP_158(iROUTER), function:getSystemDebt, arguments:['collateralAsset_1', 'debtAsset_1']  
High Level Call: getsystemdebt
checking tmp_159
Temp variable: tmp_159
Function name: getDebtLoading
High Call: getSystemDebt
func name:getSystemDebt
TMP_159
TMP_159
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_159
Num:
-1
Den:
-1
Norm:
0
done.
ROUTER_30(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_29', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getDebtLoading
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_53(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_52', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getDebtLoading
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
_debtIssued_1(uint256) := TMP_159(uint256)
checking _debtissued
Local variable: _debtissued
Function name: getDebtLoading
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _debtIssued
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_160 = CONVERT POOLS_53 to iPOOLS
clearing ir...?
TMP_161(uint256) = HIGH_LEVEL_CALL, dest:TMP_160(iPOOLS), function:getTokenAmount, arguments:['debtAsset_1']  
has variable
[i] TMP_161 cleared
clearing ir...?
POOLS_54(address) := ϕ(['POOLS_53', 'POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
_debtDepth_1(uint256) := TMP_161(uint256)
has variable
[i] _debtDepth cleared
typecheckig node...
TMP_160 = CONVERT POOLS_53 to iPOOLS
checking tmp_160
Temp variable: tmp_160
Function name: getDebtLoading
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_160
Num:
-2
Den:
-1
Norm:
0
done.
TMP_161(uint256) = HIGH_LEVEL_CALL, dest:TMP_160(iPOOLS), function:getTokenAmount, arguments:['debtAsset_1']  
High Level Call: gettokenamount
checking tmp_161
Temp variable: tmp_161
Function name: getDebtLoading
High Call: getTokenAmount
func name:getTokenAmount
TMP_161
TMP_161
Finding type for hlc_1...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_161
Num:
2
Den:
-1
Norm:
0
done.
POOLS_54(address) := ϕ(['POOLS_53', 'POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getDebtLoading
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
_debtDepth_1(uint256) := TMP_161(uint256)
checking _debtdepth
Local variable: _debtdepth
Function name: getDebtLoading
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _debtDepth
Num:
2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_162(uint256) = _debtIssued_1 (c)* 10000
has variable
[i] TMP_162 cleared
clearing ir...?
TMP_163(uint256) = TMP_162 (c)/ _debtDepth_1
has variable
[i] TMP_163 cleared
clearing ir...?
RETURN TMP_163
typecheckig node...
TMP_162(uint256) = _debtIssued_1 (c)* 10000
checking tmp_162
Temp variable: tmp_162
Function name: getDebtLoading
testing mul...
Constatn varible: 10000
---
Num:
-1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: 10000
val: 10000
4
***
False
False
True
True
Constatn varible: 10000
Num:
Den:
Norm:
4
[i]Type for TMP_162
Num:
-1
Den:
-1
Norm:
4
done.
TMP_163(uint256) = TMP_162 (c)/ _debtDepth_1
checking tmp_163
Temp variable: tmp_163
Function name: getDebtLoading
Num:
Den:
Norm:
4
[i]Type for TMP_163
Num:
2
Den:
-1
Norm:
4
done.
RETURN TMP_163
Return...
getDebtLoading
TMP_163
Checking return valuegetDebtLoading
TMP_163
&&
TMP_163
Num:
Den:
Norm:
-100
[i]Type for TMP_153
Num:
2
Den:
-1
Norm:
-100
done.
ROUTER_27(address) := ϕ(['ROUTER_30'])
checking router
State IR  variable: router
State variable: router
Function name: getInterestPayment
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
_debtLoading_1(uint256) := TMP_153(uint256)
checking _debtloading
Local variable: _debtloading
Function name: getInterestPayment
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _debtLoading
Num:
2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_154 = CONVERT ROUTER_27 to iROUTER
clearing ir...?
TMP_155(uint256) = HIGH_LEVEL_CALL, dest:TMP_154(iROUTER), function:getSystemDebt, arguments:['collateralAsset_1', 'debtAsset_1']  
has variable
[i] TMP_155 cleared
clearing ir...?
ROUTER_28(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_27', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
TMP_156(uint256) = _debtLoading_1 (c)* TMP_155
has variable
[i] TMP_156 cleared
clearing ir...?
TMP_157(uint256) = TMP_156 (c)/ 10000
has variable
[i] TMP_157 cleared
clearing ir...?
RETURN TMP_157
typecheckig node...
TMP_154 = CONVERT ROUTER_27 to iROUTER
checking tmp_154
Temp variable: tmp_154
Function name: getInterestPayment
Num:
Den:
Norm:
-100
0
ROUTER
[i]Type for TMP_154
Num:
-2
Den:
-1
Norm:
0
done.
TMP_155(uint256) = HIGH_LEVEL_CALL, dest:TMP_154(iROUTER), function:getSystemDebt, arguments:['collateralAsset_1', 'debtAsset_1']  
High Level Call: getsystemdebt
checking tmp_155
Temp variable: tmp_155
Function name: getInterestPayment
High Call: getSystemDebt
func name:getSystemDebt
TMP_155
TMP_155
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_155
Num:
-1
Den:
-1
Norm:
0
done.
ROUTER_28(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_27', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getInterestPayment
Num:
-2
Den:
-1
Norm:
-100
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
TMP_156(uint256) = _debtLoading_1 (c)* TMP_155
checking tmp_156
Temp variable: tmp_156
Function name: getInterestPayment
testing mul...
---
Num:
2
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
0
***
False
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_156
Num:
2
Den:
-1
Norm:
0
done.
TMP_157(uint256) = TMP_156 (c)/ 10000
checking tmp_157
Temp variable: tmp_157
Function name: getInterestPayment
Constatn varible: 10000
Constatn varible: 10000
val: 10000
4
Num:
Den:
Norm:
-4
[i]Type for TMP_157
Num:
2
Den:
-1
Norm:
-4
done.
RETURN TMP_157
Return...
getInterestPayment
TMP_157
Reading Function: getDebtLoading
Function name: getDebtLoading
Function Visibility: public
collateralAsset
Finding type for collateralAsset...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
debtAsset
Finding type for debtAsset...
Num:
-2
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [-2]
    den: [-1]
clearning node...
clearing ir...?
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
debtAsset_1(address) := ϕ(['debtAsset_1'])
clearing ir...?
ROUTER_29(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_0', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
clearing ir...?
POOLS_52(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
typecheckig node...
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking collateralasset
Local variable: collateralasset
Function name: getDebtLoading
Phi
[i]Type for collateralAsset
Num:
-2
Den:
-1
Norm:
-100
done.
debtAsset_1(address) := ϕ(['debtAsset_1'])
checking debtasset
Local variable: debtasset
Function name: getDebtLoading
Phi
[i]Type for debtAsset
Num:
-2
Den:
-1
Norm:
-100
done.
ROUTER_29(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_0', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getDebtLoading
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_52(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_0', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getDebtLoading
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_158 = CONVERT ROUTER_29 to iROUTER
clearing ir...?
TMP_159(uint256) = HIGH_LEVEL_CALL, dest:TMP_158(iROUTER), function:getSystemDebt, arguments:['collateralAsset_1', 'debtAsset_1']  
has variable
[i] TMP_159 cleared
clearing ir...?
ROUTER_30(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_29', 'ROUTER_20'])
clearing ir...?
POOLS_53(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_52', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
_debtIssued_1(uint256) := TMP_159(uint256)
has variable
[i] _debtIssued cleared
typecheckig node...
TMP_158 = CONVERT ROUTER_29 to iROUTER
checking tmp_158
Temp variable: tmp_158
Function name: getDebtLoading
Num:
-2
Den:
-1
Norm:
0
0
ROUTER
[i]Type for TMP_158
Num:
-2
Den:
-1
Norm:
0
done.
TMP_159(uint256) = HIGH_LEVEL_CALL, dest:TMP_158(iROUTER), function:getSystemDebt, arguments:['collateralAsset_1', 'debtAsset_1']  
High Level Call: getsystemdebt
checking tmp_159
Temp variable: tmp_159
Function name: getDebtLoading
High Call: getSystemDebt
func name:getSystemDebt
TMP_159
TMP_159
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_159
Num:
-1
Den:
-1
Norm:
0
done.
ROUTER_30(address) := ϕ(['ROUTER_25', 'ROUTER_30', 'ROUTER_13', 'ROUTER_16', 'ROUTER_10', 'ROUTER_9', 'ROUTER_4', 'ROUTER_1', 'ROUTER_28', 'ROUTER_29', 'ROUTER_20'])
checking router
State IR  variable: router
State variable: router
Function name: getDebtLoading
Phi
[i]Type for ROUTER
Num:
-2
Den:
-1
Norm:
-100
done.
POOLS_53(address) := ϕ(['POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_52', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getDebtLoading
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
_debtIssued_1(uint256) := TMP_159(uint256)
checking _debtissued
Local variable: _debtissued
Function name: getDebtLoading
asgn
Num:
Den:
Norm:
0
0
[i]Type for _debtIssued
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_160 = CONVERT POOLS_53 to iPOOLS
clearing ir...?
TMP_161(uint256) = HIGH_LEVEL_CALL, dest:TMP_160(iPOOLS), function:getTokenAmount, arguments:['debtAsset_1']  
has variable
[i] TMP_161 cleared
clearing ir...?
POOLS_54(address) := ϕ(['POOLS_53', 'POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
clearing ir...?
_debtDepth_1(uint256) := TMP_161(uint256)
has variable
[i] _debtDepth cleared
typecheckig node...
TMP_160 = CONVERT POOLS_53 to iPOOLS
checking tmp_160
Temp variable: tmp_160
Function name: getDebtLoading
Num:
-2
Den:
-1
Norm:
0
0
POOLS
[i]Type for TMP_160
Num:
-2
Den:
-1
Norm:
0
done.
TMP_161(uint256) = HIGH_LEVEL_CALL, dest:TMP_160(iPOOLS), function:getTokenAmount, arguments:['debtAsset_1']  
High Level Call: gettokenamount
checking tmp_161
Temp variable: tmp_161
Function name: getDebtLoading
High Call: getTokenAmount
func name:getTokenAmount
TMP_161
TMP_161
Finding type for hlc_1...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_161
Num:
2
Den:
-1
Norm:
0
done.
POOLS_54(address) := ϕ(['POOLS_53', 'POOLS_23', 'POOLS_10', 'POOLS_17', 'POOLS_15', 'POOLS_26', 'POOLS_21', 'POOLS_35', 'POOLS_47', 'POOLS_54', 'POOLS_11', 'POOLS_8', 'POOLS_32', 'POOLS_19', 'POOLS_12', 'POOLS_1', 'POOLS_9', 'POOLS_45', 'POOLS_31'])
checking pools
State IR  variable: pools
State variable: pools
Function name: getDebtLoading
Phi
[i]Type for POOLS
Num:
-2
Den:
-1
Norm:
-100
done.
_debtDepth_1(uint256) := TMP_161(uint256)
checking _debtdepth
Local variable: _debtdepth
Function name: getDebtLoading
asgn
Num:
Den:
Norm:
0
0
[i]Type for _debtDepth
Num:
2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_162(uint256) = _debtIssued_1 (c)* 10000
has variable
[i] TMP_162 cleared
clearing ir...?
TMP_163(uint256) = TMP_162 (c)/ _debtDepth_1
has variable
[i] TMP_163 cleared
clearing ir...?
RETURN TMP_163
typecheckig node...
TMP_162(uint256) = _debtIssued_1 (c)* 10000
checking tmp_162
Temp variable: tmp_162
Function name: getDebtLoading
testing mul...
Constatn varible: 10000
---
Num:
-1
Den:
-1
Norm:
0
Error with: TMP_162 in function getDebtLoading
r
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: 10000
val: 10000
4
***
False
False
True
True
Constatn varible: 10000
Num:
-1
Den:
-1
Norm:
8
[i]Type for TMP_162
Num:
-1
Den:
-1
Norm:
8
done.
TMP_163(uint256) = TMP_162 (c)/ _debtDepth_1
checking tmp_163
Temp variable: tmp_163
Function name: getDebtLoading
Error with: TMP_163 in function getDebtLoading
Num:
-1
Den:
-1
Norm:
4
Error with: TMP_163 in function getDebtLoading
[i]Type for TMP_163
Num:
-1
Den:
-1
Norm:
4
done.
RETURN TMP_163
Return...
getDebtLoading
TMP_163
TMP_163
Reading Function: calcPart
Function name: calcPart
Function Visibility: public
bp
Finding type for bp...
Num:
-1
Den:
-1
Norm:
4
[*]Type fetched successfully
total
Finding type for total...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
bp_1(uint256) := ϕ(['TMP_58', 'basisPoints_1'])
clearing ir...?
total_1(uint256) := ϕ(['protection_3', 'targetPrice_1'])
typecheckig node...
bp_1(uint256) := ϕ(['TMP_58', 'basisPoints_1'])
checking bp
Local variable: bp
Function name: calcPart
Phi
[i]Type for bp
Num:
-1
Den:
-1
Norm:
-100
done.
total_1(uint256) := ϕ(['protection_3', 'targetPrice_1'])
checking total
Local variable: total
Function name: calcPart
Phi
[i]Type for total
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_164(bool) = bp_1 <= 10000
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(bool) = bp_1 >= 0
has variable
[i] TMP_165 cleared
clearing ir...?
TMP_166(bool) = TMP_164 && TMP_165
has variable
[i] TMP_166 cleared
clearing ir...?
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,Must be correct BP)
typecheckig node...
TMP_164(bool) = bp_1 <= 10000
checking tmp_164
Temp variable: tmp_164
Function name: calcPart
testing lt...
Constatn varible: 10000
Constatn varible: 10000
val: 10000
4
Error with: TMP_164 in function calcPart
[i]Type for TMP_164
Num:
-1
Den:
-1
Norm:
0
done.
TMP_165(bool) = bp_1 >= 0
checking tmp_165
Temp variable: tmp_165
Function name: calcPart
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
[i]Type for TMP_165
Num:
-1
Den:
-1
Norm:
0
done.
TMP_166(bool) = TMP_164 && TMP_165
checking tmp_166
Temp variable: tmp_166
Function name: calcPart
[i]Type for TMP_166
Num:
Den:
Norm:
-100
done.
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,Must be correct BP)
checking tmp_167
Temp variable: tmp_167
Function name: calcPart
checking tmp_167
[i]Type for TMP_167
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
clearing ir...?
RETURN TMP_168
typecheckig node...
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
Internal call...
calcShare
bp
10000
total
Function: calcShare
ic
Constatn varible: 10000
Constatn varible: 10000
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
clearing ir...?
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
clearing ir...?
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
typecheckig node...
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
checking part
Local variable: part
Function name: calcShare
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
checking total
Local variable: total
Function name: calcShare
Phi
[i]Type for total
Num:
-1
Den:
-1
Norm:
-100
done.
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
checking amount
Local variable: amount
Function name: calcShare
Phi
[i]Type for amount
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
checking tmp_169
Temp variable: tmp_169
Function name: calcShare
testing gt...
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_169
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
checking part
Local variable: part
Function name: calcShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for part
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
checking part
Local variable: part
Function name: calcShare
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
checking tmp_170
Temp variable: tmp_170
Function name: calcShare
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_170
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
checking tmp_171
Temp variable: tmp_171
Function name: calcShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_171
Num:
-1
Den:
-1
Norm:
0
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
checking tmp_172
Temp variable: tmp_172
Function name: calcShare
Num:
Den:
Norm:
0
[i]Type for TMP_172
Num:
-1
Den:
-1
Norm:
0
done.
share_1(uint256) := TMP_172(uint256)
checking share
Local variable: share
Function name: calcShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for share
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Checking return valuecalcShare
share
&&
share
Num:
Den:
Norm:
-100
[i]Type for TMP_168
Num:
Den:
Norm:
-100
done.
RETURN TMP_168
Return...
calcPart
TMP_168
TMP_168
Reading Function: calcShare
Function name: calcShare
Function Visibility: public
part
Finding type for part...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
total
Finding type for total...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
amount
Finding type for amount...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
clearing ir...?
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
clearing ir...?
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
typecheckig node...
part_1(uint256) := ϕ(['totalSupply_1', 'timeElapsed_1', '_duration_1', '_baseAmount_1', 'bp_1', '_memberCollateral_1', '_units_1', 'debt_1'])
checking part
Local variable: part
Function name: calcShare
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
total_1(uint256) := ϕ(['TMP_116', '_year_2', 'rewardReductionFactor_1', 'maxSupply_1', 'TMP_111', '_memberDebt_1', 'TMP_81', 'TMP_89', '_collateral_1', 'timeForFullProtection_1'])
checking total
Local variable: total
Function name: calcShare
Phi
[i]Type for total
Num:
-1
Den:
-1
Norm:
-100
done.
amount_1(uint256) := ϕ(['_interestPaid_1', 'amount_1', 'TMP_113', '_coverage_1', 'total_1', 'TMP_83', 'TMP_146', '_memberCollateral_1', 'TMP_118', 'TMP_91'])
checking amount
Local variable: amount
Function name: calcShare
Phi
[i]Type for amount
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
checking tmp_169
Temp variable: tmp_169
Function name: calcShare
testing gt...
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_169
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
checking part
Local variable: part
Function name: calcShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for part
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
checking part
Local variable: part
Function name: calcShare
Phi
[i]Type for part
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
checking tmp_170
Temp variable: tmp_170
Function name: calcShare
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_170
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
checking tmp_171
Temp variable: tmp_171
Function name: calcShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_171
Num:
-1
Den:
-1
Norm:
0
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
checking tmp_172
Temp variable: tmp_172
Function name: calcShare
Num:
Den:
Norm:
0
[i]Type for TMP_172
Num:
-1
Den:
-1
Norm:
0
done.
share_1(uint256) := TMP_172(uint256)
checking share
Local variable: share
Function name: calcShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for share
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Reading Function: calcSwapOutput
Function name: calcSwapOutput
Function Visibility: public
x
Finding type for x...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
X
Finding type for X...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Y
Finding type for Y...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
x_1(uint256) := ϕ(['amount_1', 'amount_1'])
clearing ir...?
X_1(uint256) := ϕ(['_tokenAmt_1', '_baseAmt_1'])
clearing ir...?
Y_1(uint256) := ϕ(['_tokenAmt_1', '_baseAmt_1'])
typecheckig node...
x_1(uint256) := ϕ(['amount_1', 'amount_1'])
checking x
Local variable: x
Function name: calcSwapOutput
Phi
[i]Type for x
Num:
1
Den:
-1
Norm:
-100
done.
X_1(uint256) := ϕ(['_tokenAmt_1', '_baseAmt_1'])
checking x
Local variable: x
Function name: calcSwapOutput
Phi
[i]Type for X
Num:
2
Den:
-1
Norm:
-100
done.
Y_1(uint256) := ϕ(['_tokenAmt_1', '_baseAmt_1'])
checking y
Local variable: y
Function name: calcSwapOutput
Phi
[i]Type for Y
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_173(uint256) = x_1 (c)* X_1
has variable
[i] TMP_173 cleared
clearing ir...?
TMP_174(uint256) = TMP_173 (c)* Y_1
has variable
[i] TMP_174 cleared
clearing ir...?
numerator_1(uint256) := TMP_174(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_173(uint256) = x_1 (c)* X_1
checking tmp_173
Temp variable: tmp_173
Function name: calcSwapOutput
testing mul...
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
2
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_173
Num:
1
2
Den:
-1
Norm:
0
done.
TMP_174(uint256) = TMP_173 (c)* Y_1
checking tmp_174
Temp variable: tmp_174
Function name: calcSwapOutput
testing mul...
---
Num:
1
2
Den:
-1
Norm:
0
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_174
Num:
1
2
1
Den:
-1
Norm:
0
done.
numerator_1(uint256) := TMP_174(uint256)
checking numerator
Local variable: numerator
Function name: calcSwapOutput
asgn
Num:
Den:
Norm:
0
0
[i]Type for numerator
Num:
1
2
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_175(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_175 cleared
clearing ir...?
TMP_176(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_176 cleared
clearing ir...?
TMP_177(uint256) = TMP_175 (c)* TMP_176
has variable
[i] TMP_177 cleared
clearing ir...?
denominator_1(uint256) := TMP_177(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_175(uint256) = x_1 (c)+ X_1
checking tmp_175
Temp variable: tmp_175
Function name: calcSwapOutput
Error with: TMP_175 in function calcSwapOutput
[i]Type for TMP_175
Num:
-1
Den:
-1
Norm:
0
done.
TMP_176(uint256) = x_1 (c)+ X_1
checking tmp_176
Temp variable: tmp_176
Function name: calcSwapOutput
Error with: TMP_176 in function calcSwapOutput
[i]Type for TMP_176
Num:
-1
Den:
-1
Norm:
0
done.
TMP_177(uint256) = TMP_175 (c)* TMP_176
checking tmp_177
Temp variable: tmp_177
Function name: calcSwapOutput
testing mul...
---
Num:
-1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
0
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_177
Num:
-1
Den:
-1
Norm:
0
done.
denominator_1(uint256) := TMP_177(uint256)
checking denominator
Local variable: denominator
Function name: calcSwapOutput
asgn
Num:
Den:
Norm:
0
0
[i]Type for denominator
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_178(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_178 cleared
clearing ir...?
RETURN TMP_178
typecheckig node...
TMP_178(uint256) = numerator_1 (c)/ denominator_1
checking tmp_178
Temp variable: tmp_178
Function name: calcSwapOutput
Num:
Den:
Norm:
0
[i]Type for TMP_178
Num:
1
2
1
Den:
-1
Norm:
0
done.
RETURN TMP_178
Return...
calcSwapOutput
TMP_178
TMP_178
Reading Function: calcSwapFee
Function name: calcSwapFee
Function Visibility: external
x
Finding type for x...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
X
Finding type for X...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Y
Finding type for Y...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_179(uint256) = x_1 (c)* x_1
has variable
[i] TMP_179 cleared
clearing ir...?
TMP_180(uint256) = TMP_179 (c)* Y_1
has variable
[i] TMP_180 cleared
clearing ir...?
numerator_1(uint256) := TMP_180(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_179(uint256) = x_1 (c)* x_1
checking tmp_179
Temp variable: tmp_179
Function name: calcSwapFee
testing mul...
Num:
-1
Den:
-1
Norm:
-100
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_179
Num:
-1
Den:
-1
Norm:
0
done.
TMP_180(uint256) = TMP_179 (c)* Y_1
checking tmp_180
Temp variable: tmp_180
Function name: calcSwapFee
testing mul...
Num:
-1
Den:
-1
Norm:
-100
---
Num:
-1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_180
Num:
-1
Den:
-1
Norm:
0
done.
numerator_1(uint256) := TMP_180(uint256)
checking numerator
Local variable: numerator
Function name: calcSwapFee
asgn
Num:
Den:
Norm:
-100
0
[i]Type for numerator
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_181(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_181 cleared
clearing ir...?
TMP_182(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_182 cleared
clearing ir...?
TMP_183(uint256) = TMP_181 (c)* TMP_182
has variable
[i] TMP_183 cleared
clearing ir...?
denominator_1(uint256) := TMP_183(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_181(uint256) = x_1 (c)+ X_1
checking tmp_181
Temp variable: tmp_181
Function name: calcSwapFee
Num:
-1
Den:
-1
Norm:
-100
Num:
Den:
Norm:
0
[i]Type for TMP_181
Num:
-1
Den:
-1
Norm:
0
done.
TMP_182(uint256) = x_1 (c)+ X_1
checking tmp_182
Temp variable: tmp_182
Function name: calcSwapFee
Num:
Den:
Norm:
0
[i]Type for TMP_182
Num:
-1
Den:
-1
Norm:
0
done.
TMP_183(uint256) = TMP_181 (c)* TMP_182
checking tmp_183
Temp variable: tmp_183
Function name: calcSwapFee
testing mul...
---
Num:
-1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
0
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_183
Num:
-1
Den:
-1
Norm:
0
done.
denominator_1(uint256) := TMP_183(uint256)
checking denominator
Local variable: denominator
Function name: calcSwapFee
asgn
Num:
Den:
Norm:
-100
0
[i]Type for denominator
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_184(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_184 cleared
clearing ir...?
RETURN TMP_184
typecheckig node...
TMP_184(uint256) = numerator_1 (c)/ denominator_1
checking tmp_184
Temp variable: tmp_184
Function name: calcSwapFee
Num:
Den:
Norm:
0
[i]Type for TMP_184
Num:
-1
Den:
-1
Norm:
0
done.
RETURN TMP_184
Return...
calcSwapFee
TMP_184
Reading Function: calcSwapSlip
Function name: calcSwapSlip
Function Visibility: external
x
Finding type for x...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
X
Finding type for X...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_185(uint256) = x_1 (c)* 10000
has variable
[i] TMP_185 cleared
clearing ir...?
TMP_186(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187(uint256) = TMP_185 (c)/ TMP_186
has variable
[i] TMP_187 cleared
clearing ir...?
RETURN TMP_187
typecheckig node...
TMP_185(uint256) = x_1 (c)* 10000
checking tmp_185
Temp variable: tmp_185
Function name: calcSwapSlip
testing mul...
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: 10000
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: 10000
val: 10000
4
***
False
False
True
True
Constatn varible: 10000
Num:
Den:
Norm:
4
[i]Type for TMP_185
Num:
-1
Den:
-1
Norm:
4
done.
TMP_186(uint256) = x_1 (c)+ X_1
checking tmp_186
Temp variable: tmp_186
Function name: calcSwapSlip
Num:
-1
Den:
-1
Norm:
-100
Num:
Den:
Norm:
0
[i]Type for TMP_186
Num:
-1
Den:
-1
Norm:
0
done.
TMP_187(uint256) = TMP_185 (c)/ TMP_186
checking tmp_187
Temp variable: tmp_187
Function name: calcSwapSlip
Num:
Den:
Norm:
4
[i]Type for TMP_187
Num:
-1
Den:
-1
Norm:
4
done.
RETURN TMP_187
Return...
calcSwapSlip
TMP_187
Reading Function: calcLiquidityUnits
Function name: calcLiquidityUnits
Function Visibility: external
b
Finding type for b...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
B
Finding type for B...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
t
Finding type for t...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
T
Finding type for T...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
P
Finding type for P...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
Param: 2
    num: [2]
    den: [-1]
Param: 3
    num: [1]
    den: [-1]
Param: 4
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
one_3(uint256) := ϕ(['one_4', 'one_0', 'one_2'])
typecheckig node...
one_3(uint256) := ϕ(['one_4', 'one_0', 'one_2'])
checking one
State IR  variable: one
State variable: one
Function name: calcLiquidityUnits
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_188(bool) = P_1 == 0
has variable
[i] TMP_188 cleared
clearing ir...?
CONDITION TMP_188
typecheckig node...
TMP_188(bool) = P_1 == 0
checking tmp_188
Temp variable: tmp_188
Function name: calcLiquidityUnits
[i]Type for TMP_188
Num:
Den:
Norm:
-100
done.
CONDITION TMP_188
Condition...
Conidtion: 
TMP_188
TMP_188
clearning node...
clearing ir...?
RETURN b_1
typecheckig node...
RETURN b_1
Return...
calcLiquidityUnits
b_1
clearning node...
clearing ir...?
TMP_189(uint256) = INTERNAL_CALL, Utils.getSlipAdustment(uint256,uint256,uint256,uint256)(b_1,B_1,t_1,T_1)
clearing ir...?
slipAdjustment_1(uint256) := TMP_189(uint256)
has variable
[i] slipAdjustment cleared
typecheckig node...
TMP_189(uint256) = INTERNAL_CALL, Utils.getSlipAdustment(uint256,uint256,uint256,uint256)(b_1,B_1,t_1,T_1)
Internal call...
getSlipAdustment
b
B
t
T
Function: getSlipAdustment
ic
Num:
1
Den:
-1
Norm:
-100
Num:
1
Den:
-1
Norm:
-100
Num:
2
Den:
-1
Norm:
-100
Num:
1
Den:
-1
Norm:
-100
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
Param: 2
    num: [2]
    den: [-1]
Param: 3
    num: [1]
    den: [-1]
added
xyz
Function name: getSlipAdustment
Function Visibility: public
clearning node...
clearing ir...?
b_1(uint256) := ϕ(['b_1'])
clearing ir...?
B_1(uint256) := ϕ(['B_1'])
clearing ir...?
t_1(uint256) := ϕ(['t_1'])
clearing ir...?
T_1(uint256) := ϕ(['T_1'])
clearing ir...?
one_5(uint256) := ϕ(['one_4', 'one_0', 'one_2'])
typecheckig node...
b_1(uint256) := ϕ(['b_1'])
checking b
Local variable: b
Function name: getSlipAdustment
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for b
Num:
1
Den:
-1
Norm:
-100
done.
B_1(uint256) := ϕ(['B_1'])
checking b
Local variable: b
Function name: getSlipAdustment
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for B
Num:
1
Den:
-1
Norm:
-100
done.
t_1(uint256) := ϕ(['t_1'])
checking t
Local variable: t
Function name: getSlipAdustment
Num:
2
Den:
-1
Norm:
-100
Phi
[i]Type for t
Num:
2
Den:
-1
Norm:
-100
done.
T_1(uint256) := ϕ(['T_1'])
checking t
Local variable: t
Function name: getSlipAdustment
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for T
Num:
1
Den:
-1
Norm:
-100
done.
one_5(uint256) := ϕ(['one_4', 'one_0', 'one_2'])
checking one
State IR  variable: one
State variable: one
Function name: getSlipAdustment
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_199(uint256) = B_1 (c)* t_1
has variable
[i] TMP_199 cleared
clearing ir...?
part1_1(uint256) := TMP_199(uint256)
has variable
[i] part1 cleared
typecheckig node...
TMP_199(uint256) = B_1 (c)* t_1
checking tmp_199
Temp variable: tmp_199
Function name: getSlipAdustment
testing mul...
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
2
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_199
Num:
1
2
Den:
-1
Norm:
0
done.
part1_1(uint256) := TMP_199(uint256)
checking part1
Local variable: part1
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
-100
0
[i]Type for part1
Num:
1
2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_200(uint256) = b_1 (c)* T_1
has variable
[i] TMP_200 cleared
clearing ir...?
part2_1(uint256) := TMP_200(uint256)
has variable
[i] part2 cleared
typecheckig node...
TMP_200(uint256) = b_1 (c)* T_1
checking tmp_200
Temp variable: tmp_200
Function name: getSlipAdustment
testing mul...
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_200
Num:
1
1
Den:
-1
Norm:
0
done.
part2_1(uint256) := TMP_200(uint256)
checking part2
Local variable: part2
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
-100
0
[i]Type for part2
Num:
1
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_201(uint256) = b_1 (c)* 2
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(uint256) = TMP_201 (c)+ B_1
has variable
[i] TMP_202 cleared
clearing ir...?
part3_1(uint256) := TMP_202(uint256)
has variable
[i] part3 cleared
typecheckig node...
TMP_201(uint256) = b_1 (c)* 2
checking tmp_201
Temp variable: tmp_201
Function name: getSlipAdustment
testing mul...
Constatn varible: 2
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: 2
val: 2
***
False
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_201
Num:
1
Den:
-1
Norm:
0
done.
TMP_202(uint256) = TMP_201 (c)+ B_1
checking tmp_202
Temp variable: tmp_202
Function name: getSlipAdustment
Num:
Den:
Norm:
0
[i]Type for TMP_202
Num:
1
Den:
-1
Norm:
0
done.
part3_1(uint256) := TMP_202(uint256)
checking part3
Local variable: part3
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
-100
0
[i]Type for part3
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_203(uint256) = t_1 (c)+ T_1
has variable
[i] TMP_203 cleared
clearing ir...?
part4_1(uint256) := TMP_203(uint256)
has variable
[i] part4 cleared
typecheckig node...
TMP_203(uint256) = t_1 (c)+ T_1
checking tmp_203
Temp variable: tmp_203
Function name: getSlipAdustment
Error with: TMP_203 in function getSlipAdustment
[i]Type for TMP_203
Num:
-1
Den:
-1
Norm:
0
done.
part4_1(uint256) := TMP_203(uint256)
checking part4
Local variable: part4
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
-100
0
[i]Type for part4
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_204(bool) = part1_1 > part2_1
has variable
[i] TMP_204 cleared
clearing ir...?
CONDITION TMP_204
typecheckig node...
TMP_204(bool) = part1_1 > part2_1
checking tmp_204
Temp variable: tmp_204
Function name: getSlipAdustment
testing gt...
Num:
1
1
Den:
-1
Norm:
0
False
Error with: TMP_204 in function getSlipAdustment
[i]Type for TMP_204
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_204
Condition...
Conidtion: 
TMP_204
TMP_204
clearning node...
clearing ir...?
TMP_206(uint256) = part2_1 (c)- part1_1
has variable
[i] TMP_206 cleared
clearing ir...?
numerator_2(uint256) := TMP_206(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_206(uint256) = part2_1 (c)- part1_1
checking tmp_206
Temp variable: tmp_206
Function name: getSlipAdustment
Num:
1
1
Den:
-1
Norm:
0
Num:
1
2
Den:
-1
Norm:
0
Error with: TMP_206 in function getSlipAdustment
[i]Type for TMP_206
Num:
-1
Den:
-1
Norm:
0
done.
numerator_2(uint256) := TMP_206(uint256)
checking numerator
Local variable: numerator
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
-100
0
[i]Type for numerator
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_205(uint256) = part1_1 (c)- part2_1
has variable
[i] TMP_205 cleared
clearing ir...?
numerator_1(uint256) := TMP_205(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_205(uint256) = part1_1 (c)- part2_1
checking tmp_205
Temp variable: tmp_205
Function name: getSlipAdustment
Num:
1
2
Den:
-1
Norm:
0
Num:
1
1
Den:
-1
Norm:
0
Error with: TMP_205 in function getSlipAdustment
[i]Type for TMP_205
Num:
-1
Den:
-1
Norm:
0
done.
numerator_1(uint256) := TMP_205(uint256)
checking numerator
Local variable: numerator
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
-100
0
[i]Type for numerator
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
numerator_3(uint256) := ϕ(['numerator_1', 'numerator_2'])
typecheckig node...
numerator_3(uint256) := ϕ(['numerator_1', 'numerator_2'])
checking numerator
Local variable: numerator
Function name: getSlipAdustment
Phi
[i]Type for numerator
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_207(uint256) = part3_1 (c)* part4_1
has variable
[i] TMP_207 cleared
clearing ir...?
denominator_1(uint256) := TMP_207(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_207(uint256) = part3_1 (c)* part4_1
checking tmp_207
Temp variable: tmp_207
Function name: getSlipAdustment
testing mul...
---
Num:
1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
0
***
False
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_207
Num:
1
Den:
-1
Norm:
0
done.
denominator_1(uint256) := TMP_207(uint256)
checking denominator
Local variable: denominator
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
-100
0
[i]Type for denominator
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_208(uint256) = numerator_3 (c)* one_5
has variable
[i] TMP_208 cleared
clearing ir...?
TMP_209(uint256) = TMP_208 (c)/ denominator_1
has variable
[i] TMP_209 cleared
clearing ir...?
TMP_210(uint256) = one_5 (c)- TMP_209
has variable
[i] TMP_210 cleared
clearing ir...?
RETURN TMP_210
typecheckig node...
TMP_208(uint256) = numerator_3 (c)* one_5
checking tmp_208
Temp variable: tmp_208
Function name: getSlipAdustment
testing mul...
---
Num:
Den:
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
True
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_208
Num:
-1
Den:
-1
Norm:
0
done.
TMP_209(uint256) = TMP_208 (c)/ denominator_1
checking tmp_209
Temp variable: tmp_209
Function name: getSlipAdustment
Num:
Den:
Norm:
0
[i]Type for TMP_209
Num:
1
Den:
-1
Norm:
0
done.
TMP_210(uint256) = one_5 (c)- TMP_209
checking tmp_210
Temp variable: tmp_210
Function name: getSlipAdustment
Num:
-1
Den:
-1
Norm:
-100
Num:
1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
[i]Type for TMP_210
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_210
Return...
getSlipAdustment
TMP_210
[x]node added back
Checking return valuegetSlipAdustment
TMP_210
&&
TMP_210
Num:
Den:
Norm:
-100
[i]Type for TMP_189
Num:
1
Den:
-1
Norm:
-100
done.
slipAdjustment_1(uint256) := TMP_189(uint256)
checking slipadjustment
Local variable: slipadjustment
Function name: calcLiquidityUnits
asgn
Num:
Den:
Norm:
-100
0
[i]Type for slipAdjustment
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_190(uint256) = t_1 (c)* B_1
has variable
[i] TMP_190 cleared
clearing ir...?
part1_1(uint256) := TMP_190(uint256)
has variable
[i] part1 cleared
typecheckig node...
TMP_190(uint256) = t_1 (c)* B_1
checking tmp_190
Temp variable: tmp_190
Function name: calcLiquidityUnits
testing mul...
---
Num:
2
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_190
Num:
2
1
Den:
-1
Norm:
0
done.
part1_1(uint256) := TMP_190(uint256)
checking part1
Local variable: part1
Function name: calcLiquidityUnits
asgn
Num:
Den:
Norm:
-100
0
[i]Type for part1
Num:
2
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_191(uint256) = T_1 (c)* b_1
has variable
[i] TMP_191 cleared
clearing ir...?
part2_1(uint256) := TMP_191(uint256)
has variable
[i] part2 cleared
typecheckig node...
TMP_191(uint256) = T_1 (c)* b_1
checking tmp_191
Temp variable: tmp_191
Function name: calcLiquidityUnits
testing mul...
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_191
Num:
1
1
Den:
-1
Norm:
0
done.
part2_1(uint256) := TMP_191(uint256)
checking part2
Local variable: part2
Function name: calcLiquidityUnits
asgn
Num:
Den:
Norm:
-100
0
[i]Type for part2
Num:
1
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_192(uint256) = T_1 (c)* B_1
has variable
[i] TMP_192 cleared
clearing ir...?
TMP_193(uint256) = TMP_192 (c)* 2
has variable
[i] TMP_193 cleared
clearing ir...?
part3_1(uint256) := TMP_193(uint256)
has variable
[i] part3 cleared
typecheckig node...
TMP_192(uint256) = T_1 (c)* B_1
checking tmp_192
Temp variable: tmp_192
Function name: calcLiquidityUnits
testing mul...
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_192
Num:
1
1
Den:
-1
Norm:
0
done.
TMP_193(uint256) = TMP_192 (c)* 2
checking tmp_193
Temp variable: tmp_193
Function name: calcLiquidityUnits
testing mul...
Constatn varible: 2
---
Num:
1
1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: 2
val: 2
***
False
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_193
Num:
1
1
Den:
-1
Norm:
0
done.
part3_1(uint256) := TMP_193(uint256)
checking part3
Local variable: part3
Function name: calcLiquidityUnits
asgn
Num:
Den:
Norm:
-100
0
[i]Type for part3
Num:
1
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_194(uint256) = P_1 (c)* part1_1
has variable
[i] TMP_194 cleared
clearing ir...?
TMP_195(uint256) = TMP_194 (c)+ part2_1
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = TMP_195 (c)/ part3_1
has variable
[i] TMP_196 cleared
clearing ir...?
_units_1(uint256) := TMP_196(uint256)
has variable
[i] _units cleared
typecheckig node...
TMP_194(uint256) = P_1 (c)* part1_1
checking tmp_194
Temp variable: tmp_194
Function name: calcLiquidityUnits
testing mul...
Num:
-1
Den:
-1
Norm:
-100
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
2
1
Den:
-1
Norm:
0
***
False
False
True
False
Num:
Den:
Norm:
0
[i]Type for TMP_194
Num:
2
1
Den:
-1
Norm:
0
done.
TMP_195(uint256) = TMP_194 (c)+ part2_1
checking tmp_195
Temp variable: tmp_195
Function name: calcLiquidityUnits
Error with: TMP_195 in function calcLiquidityUnits
[i]Type for TMP_195
Num:
-1
Den:
-1
Norm:
0
done.
TMP_196(uint256) = TMP_195 (c)/ part3_1
checking tmp_196
Temp variable: tmp_196
Function name: calcLiquidityUnits
Num:
Den:
Norm:
0
[i]Type for TMP_196
Num:
1
1
Den:
-1
Norm:
0
done.
_units_1(uint256) := TMP_196(uint256)
checking _units
Local variable: _units
Function name: calcLiquidityUnits
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _units
Num:
1
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_197(uint256) = _units_1 (c)* slipAdjustment_1
has variable
[i] TMP_197 cleared
clearing ir...?
TMP_198(uint256) = TMP_197 (c)/ one_4
has variable
[i] TMP_198 cleared
clearing ir...?
RETURN TMP_198
typecheckig node...
TMP_197(uint256) = _units_1 (c)* slipAdjustment_1
checking tmp_197
Temp variable: tmp_197
Function name: calcLiquidityUnits
testing mul...
---
Num:
1
1
Den:
-1
Norm:
0
r
Num:
1
Den:
-1
Norm:
0
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_197
Num:
1
1
1
Den:
-1
Norm:
0
done.
TMP_198(uint256) = TMP_197 (c)/ one_4
checking tmp_198
Temp variable: tmp_198
Function name: calcLiquidityUnits
Num:
-1
Den:
-1
Norm:
-100
Num:
Den:
Norm:
0
[i]Type for TMP_198
Num:
1
1
1
Den:
-1
Norm:
0
done.
RETURN TMP_198
Return...
calcLiquidityUnits
b_1
TMP_198
Reading Function: getSlipAdustment
Function name: getSlipAdustment
Function Visibility: public
b
Finding type for b...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
B
Finding type for B...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
t
Finding type for t...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
T
Finding type for T...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
Param: 2
    num: [2]
    den: [-1]
Param: 3
    num: [2]
    den: [-1]
clearning node...
clearing ir...?
b_1(uint256) := ϕ(['b_1'])
clearing ir...?
B_1(uint256) := ϕ(['B_1'])
clearing ir...?
t_1(uint256) := ϕ(['t_1'])
clearing ir...?
T_1(uint256) := ϕ(['T_1'])
clearing ir...?
one_5(uint256) := ϕ(['one_4', 'one_0', 'one_2'])
typecheckig node...
b_1(uint256) := ϕ(['b_1'])
checking b
Local variable: b
Function name: getSlipAdustment
Phi
[i]Type for b
Num:
1
Den:
-1
Norm:
-100
done.
B_1(uint256) := ϕ(['B_1'])
checking b
Local variable: b
Function name: getSlipAdustment
Phi
[i]Type for B
Num:
1
Den:
-1
Norm:
-100
done.
t_1(uint256) := ϕ(['t_1'])
checking t
Local variable: t
Function name: getSlipAdustment
Phi
[i]Type for t
Num:
2
Den:
-1
Norm:
-100
done.
T_1(uint256) := ϕ(['T_1'])
checking t
Local variable: t
Function name: getSlipAdustment
Phi
[i]Type for T
Num:
1
Den:
-1
Norm:
-100
done.
one_5(uint256) := ϕ(['one_4', 'one_0', 'one_2'])
checking one
State IR  variable: one
State variable: one
Function name: getSlipAdustment
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_199(uint256) = B_1 (c)* t_1
has variable
[i] TMP_199 cleared
clearing ir...?
part1_1(uint256) := TMP_199(uint256)
has variable
[i] part1 cleared
typecheckig node...
TMP_199(uint256) = B_1 (c)* t_1
checking tmp_199
Temp variable: tmp_199
Function name: getSlipAdustment
testing mul...
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
2
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_199
Num:
1
2
Den:
-1
Norm:
0
done.
part1_1(uint256) := TMP_199(uint256)
checking part1
Local variable: part1
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
0
0
[i]Type for part1
Num:
1
2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_200(uint256) = b_1 (c)* T_1
has variable
[i] TMP_200 cleared
clearing ir...?
part2_1(uint256) := TMP_200(uint256)
has variable
[i] part2 cleared
typecheckig node...
TMP_200(uint256) = b_1 (c)* T_1
checking tmp_200
Temp variable: tmp_200
Function name: getSlipAdustment
testing mul...
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_200
Num:
1
1
Den:
-1
Norm:
0
done.
part2_1(uint256) := TMP_200(uint256)
checking part2
Local variable: part2
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
0
0
[i]Type for part2
Num:
1
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_201(uint256) = b_1 (c)* 2
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(uint256) = TMP_201 (c)+ B_1
has variable
[i] TMP_202 cleared
clearing ir...?
part3_1(uint256) := TMP_202(uint256)
has variable
[i] part3 cleared
typecheckig node...
TMP_201(uint256) = b_1 (c)* 2
checking tmp_201
Temp variable: tmp_201
Function name: getSlipAdustment
testing mul...
Constatn varible: 2
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: 2
val: 2
***
False
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_201
Num:
1
Den:
-1
Norm:
0
done.
TMP_202(uint256) = TMP_201 (c)+ B_1
checking tmp_202
Temp variable: tmp_202
Function name: getSlipAdustment
Num:
Den:
Norm:
0
[i]Type for TMP_202
Num:
1
Den:
-1
Norm:
0
done.
part3_1(uint256) := TMP_202(uint256)
checking part3
Local variable: part3
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
0
0
[i]Type for part3
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_203(uint256) = t_1 (c)+ T_1
has variable
[i] TMP_203 cleared
clearing ir...?
part4_1(uint256) := TMP_203(uint256)
has variable
[i] part4 cleared
typecheckig node...
TMP_203(uint256) = t_1 (c)+ T_1
checking tmp_203
Temp variable: tmp_203
Function name: getSlipAdustment
Error with: TMP_203 in function getSlipAdustment
[i]Type for TMP_203
Num:
-1
Den:
-1
Norm:
0
done.
part4_1(uint256) := TMP_203(uint256)
checking part4
Local variable: part4
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
0
0
[i]Type for part4
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_204(bool) = part1_1 > part2_1
has variable
[i] TMP_204 cleared
clearing ir...?
CONDITION TMP_204
typecheckig node...
TMP_204(bool) = part1_1 > part2_1
checking tmp_204
Temp variable: tmp_204
Function name: getSlipAdustment
testing gt...
Num:
1
1
Den:
-1
Norm:
0
False
Error with: TMP_204 in function getSlipAdustment
[i]Type for TMP_204
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_204
Condition...
Conidtion: 
TMP_204
TMP_204
clearning node...
clearing ir...?
TMP_206(uint256) = part2_1 (c)- part1_1
has variable
[i] TMP_206 cleared
clearing ir...?
numerator_2(uint256) := TMP_206(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_206(uint256) = part2_1 (c)- part1_1
checking tmp_206
Temp variable: tmp_206
Function name: getSlipAdustment
Num:
1
1
Den:
-1
Norm:
0
Num:
1
2
Den:
-1
Norm:
0
Error with: TMP_206 in function getSlipAdustment
[i]Type for TMP_206
Num:
-1
Den:
-1
Norm:
0
done.
numerator_2(uint256) := TMP_206(uint256)
checking numerator
Local variable: numerator
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
0
0
[i]Type for numerator
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_205(uint256) = part1_1 (c)- part2_1
has variable
[i] TMP_205 cleared
clearing ir...?
numerator_1(uint256) := TMP_205(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_205(uint256) = part1_1 (c)- part2_1
checking tmp_205
Temp variable: tmp_205
Function name: getSlipAdustment
Num:
1
2
Den:
-1
Norm:
0
Num:
1
1
Den:
-1
Norm:
0
Error with: TMP_205 in function getSlipAdustment
[i]Type for TMP_205
Num:
-1
Den:
-1
Norm:
0
done.
numerator_1(uint256) := TMP_205(uint256)
checking numerator
Local variable: numerator
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
0
0
[i]Type for numerator
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
numerator_3(uint256) := ϕ(['numerator_1', 'numerator_2'])
typecheckig node...
numerator_3(uint256) := ϕ(['numerator_1', 'numerator_2'])
checking numerator
Local variable: numerator
Function name: getSlipAdustment
Phi
[i]Type for numerator
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_207(uint256) = part3_1 (c)* part4_1
has variable
[i] TMP_207 cleared
clearing ir...?
denominator_1(uint256) := TMP_207(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_207(uint256) = part3_1 (c)* part4_1
checking tmp_207
Temp variable: tmp_207
Function name: getSlipAdustment
testing mul...
---
Num:
1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
0
***
False
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_207
Num:
1
Den:
-1
Norm:
0
done.
denominator_1(uint256) := TMP_207(uint256)
checking denominator
Local variable: denominator
Function name: getSlipAdustment
asgn
Num:
Den:
Norm:
0
0
[i]Type for denominator
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_208(uint256) = numerator_3 (c)* one_5
has variable
[i] TMP_208 cleared
clearing ir...?
TMP_209(uint256) = TMP_208 (c)/ denominator_1
has variable
[i] TMP_209 cleared
clearing ir...?
TMP_210(uint256) = one_5 (c)- TMP_209
has variable
[i] TMP_210 cleared
clearing ir...?
RETURN TMP_210
typecheckig node...
TMP_208(uint256) = numerator_3 (c)* one_5
checking tmp_208
Temp variable: tmp_208
Function name: getSlipAdustment
testing mul...
---
Num:
Den:
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
True
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_208
Num:
-1
Den:
-1
Norm:
0
done.
TMP_209(uint256) = TMP_208 (c)/ denominator_1
checking tmp_209
Temp variable: tmp_209
Function name: getSlipAdustment
Num:
Den:
Norm:
0
[i]Type for TMP_209
Num:
1
Den:
-1
Norm:
0
done.
TMP_210(uint256) = one_5 (c)- TMP_209
checking tmp_210
Temp variable: tmp_210
Function name: getSlipAdustment
Num:
-1
Den:
-1
Norm:
-100
Num:
1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
[i]Type for TMP_210
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_210
Return...
getSlipAdustment
TMP_210
TMP_210
[x]node added back
Reading Function: calcSynthUnits
Function name: calcSynthUnits
Function Visibility: external
b
Finding type for b...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
B
Finding type for B...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
P
Finding type for P...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_211(uint256) = P_1 (c)* b_1
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(uint256) = b_1 (c)+ B_1
has variable
[i] TMP_212 cleared
clearing ir...?
TMP_213(uint256) = 2 (c)* TMP_212
has variable
[i] TMP_213 cleared
clearing ir...?
TMP_214(uint256) = TMP_211 (c)/ TMP_213
has variable
[i] TMP_214 cleared
clearing ir...?
RETURN TMP_214
typecheckig node...
TMP_211(uint256) = P_1 (c)* b_1
checking tmp_211
Temp variable: tmp_211
Function name: calcSynthUnits
testing mul...
Num:
-1
Den:
-1
Norm:
-100
Num:
1
Den:
-1
Norm:
-100
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
True
False
Num:
Den:
Norm:
0
[i]Type for TMP_211
Num:
1
Den:
-1
Norm:
0
done.
TMP_212(uint256) = b_1 (c)+ B_1
checking tmp_212
Temp variable: tmp_212
Function name: calcSynthUnits
Num:
1
Den:
-1
Norm:
-100
Num:
Den:
Norm:
0
[i]Type for TMP_212
Num:
1
Den:
-1
Norm:
0
done.
TMP_213(uint256) = 2 (c)* TMP_212
checking tmp_213
Temp variable: tmp_213
Function name: calcSynthUnits
testing mul...
Constatn varible: 2
---
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: 2
val: 2
r
Num:
1
Den:
-1
Norm:
0
***
False
False
True
False
Num:
Den:
Norm:
0
[i]Type for TMP_213
Num:
1
Den:
-1
Norm:
0
done.
TMP_214(uint256) = TMP_211 (c)/ TMP_213
checking tmp_214
Temp variable: tmp_214
Function name: calcSynthUnits
Num:
Den:
Norm:
0
[i]Type for TMP_214
Num:
-1
Den:
-1
Norm:
0
done.
RETURN TMP_214
Return...
calcSynthUnits
TMP_214
Reading Function: calcAsymmetricShare
Function name: calcAsymmetricShare
Function Visibility: public
u
Finding type for u...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
U
Finding type for U...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
A
Finding type for A...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
Param: 2
    num: [1]
    den: [-1]
clearning node...
clearing ir...?
u_1(uint256) := ϕ(['_collateralAdjusted_1'])
clearing ir...?
U_1(uint256) := ϕ(['TMP_126'])
clearing ir...?
A_1(uint256) := ϕ(['TMP_128'])
typecheckig node...
u_1(uint256) := ϕ(['_collateralAdjusted_1'])
checking u
Local variable: u
Function name: calcAsymmetricShare
Phi
[i]Type for u
Num:
1
Den:
-1
Norm:
-100
done.
U_1(uint256) := ϕ(['TMP_126'])
checking u
Local variable: u
Function name: calcAsymmetricShare
Phi
[i]Type for U
Num:
-1
Den:
-1
Norm:
-100
done.
A_1(uint256) := ϕ(['TMP_128'])
checking a
Local variable: a
Function name: calcAsymmetricShare
Phi
[i]Type for A
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_215(uint256) = u_1 (c)* A_1
has variable
[i] TMP_215 cleared
clearing ir...?
part1_1(uint256) := TMP_215(uint256)
has variable
[i] part1 cleared
typecheckig node...
TMP_215(uint256) = u_1 (c)* A_1
checking tmp_215
Temp variable: tmp_215
Function name: calcAsymmetricShare
testing mul...
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_215
Num:
1
1
Den:
-1
Norm:
0
done.
part1_1(uint256) := TMP_215(uint256)
checking part1
Local variable: part1
Function name: calcAsymmetricShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for part1
Num:
1
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_216(uint256) = U_1 (c)* U_1
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(uint256) = TMP_216 (c)* 2
has variable
[i] TMP_217 cleared
clearing ir...?
part2_1(uint256) := TMP_217(uint256)
has variable
[i] part2 cleared
typecheckig node...
TMP_216(uint256) = U_1 (c)* U_1
checking tmp_216
Temp variable: tmp_216
Function name: calcAsymmetricShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_216
Num:
-1
Den:
-1
Norm:
0
done.
TMP_217(uint256) = TMP_216 (c)* 2
checking tmp_217
Temp variable: tmp_217
Function name: calcAsymmetricShare
testing mul...
Constatn varible: 2
---
Num:
-1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: 2
val: 2
***
False
False
True
True
Constatn varible: 2
Num:
Den:
Norm:
0
[i]Type for TMP_217
Num:
-1
Den:
-1
Norm:
0
done.
part2_1(uint256) := TMP_217(uint256)
checking part2
Local variable: part2
Function name: calcAsymmetricShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for part2
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_218(uint256) = U_1 (c)* u_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(uint256) = TMP_218 (c)* 2
has variable
[i] TMP_219 cleared
clearing ir...?
part3_1(uint256) := TMP_219(uint256)
has variable
[i] part3 cleared
typecheckig node...
TMP_218(uint256) = U_1 (c)* u_1
checking tmp_218
Temp variable: tmp_218
Function name: calcAsymmetricShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
True
False
Num:
Den:
Norm:
0
[i]Type for TMP_218
Num:
1
Den:
-1
Norm:
0
done.
TMP_219(uint256) = TMP_218 (c)* 2
checking tmp_219
Temp variable: tmp_219
Function name: calcAsymmetricShare
testing mul...
Constatn varible: 2
---
Num:
1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: 2
val: 2
***
False
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_219
Num:
1
Den:
-1
Norm:
0
done.
part3_1(uint256) := TMP_219(uint256)
checking part3
Local variable: part3
Function name: calcAsymmetricShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for part3
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_220(uint256) = u_1 (c)* u_1
has variable
[i] TMP_220 cleared
clearing ir...?
part4_1(uint256) := TMP_220(uint256)
has variable
[i] part4 cleared
typecheckig node...
TMP_220(uint256) = u_1 (c)* u_1
checking tmp_220
Temp variable: tmp_220
Function name: calcAsymmetricShare
testing mul...
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_220
Num:
1
1
Den:
-1
Norm:
0
done.
part4_1(uint256) := TMP_220(uint256)
checking part4
Local variable: part4
Function name: calcAsymmetricShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for part4
Num:
1
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_221(uint256) = part1_1 (c)* part2_1
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(uint256) = TMP_221 (c)- part3_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(uint256) = TMP_222 (c)+ part4_1
has variable
[i] TMP_223 cleared
clearing ir...?
numerator_1(uint256) := TMP_223(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_221(uint256) = part1_1 (c)* part2_1
checking tmp_221
Temp variable: tmp_221
Function name: calcAsymmetricShare
testing mul...
---
Num:
1
1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
0
***
False
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_221
Num:
1
1
Den:
-1
Norm:
0
done.
TMP_222(uint256) = TMP_221 (c)- part3_1
checking tmp_222
Temp variable: tmp_222
Function name: calcAsymmetricShare
Num:
1
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Error with: TMP_222 in function calcAsymmetricShare
[i]Type for TMP_222
Num:
-1
Den:
-1
Norm:
0
done.
TMP_223(uint256) = TMP_222 (c)+ part4_1
checking tmp_223
Temp variable: tmp_223
Function name: calcAsymmetricShare
Num:
Den:
Norm:
0
[i]Type for TMP_223
Num:
1
1
Den:
-1
Norm:
0
done.
numerator_1(uint256) := TMP_223(uint256)
checking numerator
Local variable: numerator
Function name: calcAsymmetricShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for numerator
Num:
1
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_224(uint256) = U_1 (c)* U_1
has variable
[i] TMP_224 cleared
clearing ir...?
TMP_225(uint256) = TMP_224 (c)* U_1
has variable
[i] TMP_225 cleared
clearing ir...?
part5_1(uint256) := TMP_225(uint256)
has variable
[i] part5 cleared
typecheckig node...
TMP_224(uint256) = U_1 (c)* U_1
checking tmp_224
Temp variable: tmp_224
Function name: calcAsymmetricShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_224
Num:
-1
Den:
-1
Norm:
0
done.
TMP_225(uint256) = TMP_224 (c)* U_1
checking tmp_225
Temp variable: tmp_225
Function name: calcAsymmetricShare
testing mul...
---
Num:
-1
Den:
-1
Norm:
0
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
True
True
Num:
Den:
Norm:
0
[i]Type for TMP_225
Num:
-1
Den:
-1
Norm:
0
done.
part5_1(uint256) := TMP_225(uint256)
checking part5
Local variable: part5
Function name: calcAsymmetricShare
asgn
Num:
Den:
Norm:
0
0
[i]Type for part5
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_226(uint256) = numerator_1 (c)/ part5_1
has variable
[i] TMP_226 cleared
clearing ir...?
RETURN TMP_226
typecheckig node...
TMP_226(uint256) = numerator_1 (c)/ part5_1
checking tmp_226
Temp variable: tmp_226
Function name: calcAsymmetricShare
Num:
Den:
Norm:
0
[i]Type for TMP_226
Num:
1
1
Den:
-1
Norm:
0
done.
RETURN TMP_226
Return...
calcAsymmetricShare
TMP_226
TMP_226
Reading Function: calcCoverage
Function name: calcCoverage
Function Visibility: public
B0
Finding type for B0...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
T0
Finding type for T0...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
B1
Finding type for B1...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
T1
Finding type for T1...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [2]
    den: [-1]
Param: 2
    num: [1]
    den: [-1]
Param: 3
    num: [2]
    den: [-1]
clearning node...
clearing ir...?
B0_1(uint256) := ϕ(['_B0_1'])
clearing ir...?
T0_1(uint256) := ϕ(['_T0_1'])
clearing ir...?
B1_1(uint256) := ϕ(['_B1_1'])
clearing ir...?
T1_1(uint256) := ϕ(['_T1_1'])
typecheckig node...
B0_1(uint256) := ϕ(['_B0_1'])
checking b0
Local variable: b0
Function name: calcCoverage
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for B0
Num:
1
Den:
-1
Norm:
-100
done.
T0_1(uint256) := ϕ(['_T0_1'])
checking t0
Local variable: t0
Function name: calcCoverage
Num:
2
Den:
-1
Norm:
-100
Phi
[i]Type for T0
Num:
2
Den:
-1
Norm:
-100
done.
B1_1(uint256) := ϕ(['_B1_1'])
checking b1
Local variable: b1
Function name: calcCoverage
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for B1
Num:
1
Den:
-1
Norm:
-100
done.
T1_1(uint256) := ϕ(['_T1_1'])
checking t1
Local variable: t1
Function name: calcCoverage
Num:
2
Den:
-1
Norm:
-100
Phi
[i]Type for T1
Num:
2
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_227(bool) = B0_1 > 0
has variable
[i] TMP_227 cleared
clearing ir...?
TMP_228(bool) = T1_1 > 0
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(bool) = TMP_227 && TMP_228
has variable
[i] TMP_229 cleared
clearing ir...?
CONDITION TMP_229
typecheckig node...
TMP_227(bool) = B0_1 > 0
checking tmp_227
Temp variable: tmp_227
Function name: calcCoverage
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_227
Num:
-1
Den:
-1
Norm:
0
done.
TMP_228(bool) = T1_1 > 0
checking tmp_228
Temp variable: tmp_228
Function name: calcCoverage
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_228
Num:
-1
Den:
-1
Norm:
0
done.
TMP_229(bool) = TMP_227 && TMP_228
checking tmp_229
Temp variable: tmp_229
Function name: calcCoverage
[i]Type for TMP_229
Num:
Den:
Norm:
-100
done.
CONDITION TMP_229
Condition...
Conidtion: 
TMP_229
TMP_229
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_230(uint256) = T0_1 (c)* B1_1
has variable
[i] TMP_230 cleared
clearing ir...?
TMP_231(uint256) = TMP_230 (c)/ T1_1
has variable
[i] TMP_231 cleared
clearing ir...?
TMP_232(uint256) = B0_1 (c)+ TMP_231
has variable
[i] TMP_232 cleared
clearing ir...?
_depositValue_1(uint256) := TMP_232(uint256)
has variable
[i] _depositValue cleared
typecheckig node...
TMP_230(uint256) = T0_1 (c)* B1_1
checking tmp_230
Temp variable: tmp_230
Function name: calcCoverage
testing mul...
---
Num:
2
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_230
Num:
2
1
Den:
-1
Norm:
0
done.
TMP_231(uint256) = TMP_230 (c)/ T1_1
checking tmp_231
Temp variable: tmp_231
Function name: calcCoverage
Num:
Den:
Norm:
0
[i]Type for TMP_231
Num:
1
Den:
-1
Norm:
0
done.
TMP_232(uint256) = B0_1 (c)+ TMP_231
checking tmp_232
Temp variable: tmp_232
Function name: calcCoverage
Num:
Den:
Norm:
0
[i]Type for TMP_232
Num:
1
Den:
-1
Norm:
0
done.
_depositValue_1(uint256) := TMP_232(uint256)
checking _depositvalue
Local variable: _depositvalue
Function name: calcCoverage
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _depositValue
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_233(uint256) = T1_1 (c)* B1_1
has variable
[i] TMP_233 cleared
clearing ir...?
TMP_234(uint256) = TMP_233 (c)/ T1_1
has variable
[i] TMP_234 cleared
clearing ir...?
TMP_235(uint256) = B1_1 (c)+ TMP_234
has variable
[i] TMP_235 cleared
clearing ir...?
_redemptionValue_1(uint256) := TMP_235(uint256)
has variable
[i] _redemptionValue cleared
typecheckig node...
TMP_233(uint256) = T1_1 (c)* B1_1
checking tmp_233
Temp variable: tmp_233
Function name: calcCoverage
testing mul...
---
Num:
2
Den:
-1
Norm:
-100
r
Num:
1
Den:
-1
Norm:
-100
***
False
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_233
Num:
2
1
Den:
-1
Norm:
0
done.
TMP_234(uint256) = TMP_233 (c)/ T1_1
checking tmp_234
Temp variable: tmp_234
Function name: calcCoverage
Num:
Den:
Norm:
0
[i]Type for TMP_234
Num:
1
Den:
-1
Norm:
0
done.
TMP_235(uint256) = B1_1 (c)+ TMP_234
checking tmp_235
Temp variable: tmp_235
Function name: calcCoverage
Num:
Den:
Norm:
0
[i]Type for TMP_235
Num:
1
Den:
-1
Norm:
0
done.
_redemptionValue_1(uint256) := TMP_235(uint256)
checking _redemptionvalue
Local variable: _redemptionvalue
Function name: calcCoverage
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _redemptionValue
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_236(bool) = _redemptionValue_1 <= _depositValue_1
has variable
[i] TMP_236 cleared
clearing ir...?
CONDITION TMP_236
typecheckig node...
TMP_236(bool) = _redemptionValue_1 <= _depositValue_1
checking tmp_236
Temp variable: tmp_236
Function name: calcCoverage
testing lt...
[i]Type for TMP_236
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_236
Condition...
Conidtion: 
TMP_236
TMP_236
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_237(uint256) = _depositValue_1 (c)- _redemptionValue_1
has variable
[i] TMP_237 cleared
clearing ir...?
coverage_1(uint256) := TMP_237(uint256)
has variable
[i] coverage cleared
typecheckig node...
TMP_237(uint256) = _depositValue_1 (c)- _redemptionValue_1
checking tmp_237
Temp variable: tmp_237
Function name: calcCoverage
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
[i]Type for TMP_237
Num:
1
Den:
-1
Norm:
0
done.
coverage_1(uint256) := TMP_237(uint256)
checking coverage
Local variable: coverage
Function name: calcCoverage
asgn
Num:
Den:
Norm:
-100
0
[i]Type for coverage
Num:
1
Den:
-1
Norm:
0
done.
Reading Function: sortArray
[x] sortArray barred
wooo
Reading Function: slitherConstructorVariables
Function slitherConstructorVariables not marked
------
typecheckig node...
TMP_208(uint256) = numerator_3 (c)* one_5
checking tmp_208
Temp variable: tmp_208
testing mul...
---
Num:
Den:
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
True
False
False
True
Num:
-1
Den:
-1
Norm:
0
[i]Type for TMP_208
Num:
-1
Den:
-1
Norm:
0
done.
TMP_209(uint256) = TMP_208 (c)/ denominator_1
checking tmp_209
Temp variable: tmp_209
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_209
Num:
1
Den:
-1
Norm:
0
done.
TMP_210(uint256) = one_5 (c)- TMP_209
checking tmp_210
Temp variable: tmp_210
Num:
-1
Den:
-1
Norm:
-100
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_210
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_210
Return...
getSlipAdustment
TMP_210
TMP_210
[x]node added back
------
typecheckig node...
TMP_208(uint256) = numerator_3 (c)* one_5
checking tmp_208
Temp variable: tmp_208
testing mul...
---
Num:
Den:
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
True
False
False
True
Num:
-1
Den:
-1
Norm:
0
[i]Type for TMP_208
Num:
-1
Den:
-1
Norm:
0
done.
TMP_209(uint256) = TMP_208 (c)/ denominator_1
checking tmp_209
Temp variable: tmp_209
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_209
Num:
1
Den:
-1
Norm:
0
done.
TMP_210(uint256) = one_5 (c)- TMP_209
checking tmp_210
Temp variable: tmp_210
Num:
-1
Den:
-1
Norm:
-100
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_210
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_210
Return...
getSlipAdustment
TMP_210
TMP_210
[x]node added back
------
typecheckig node...
TMP_208(uint256) = numerator_3 (c)* one_5
checking tmp_208
Temp variable: tmp_208
testing mul...
---
Num:
Den:
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
True
False
False
True
Num:
-1
Den:
-1
Norm:
0
[i]Type for TMP_208
Num:
-1
Den:
-1
Norm:
0
done.
TMP_209(uint256) = TMP_208 (c)/ denominator_1
checking tmp_209
Temp variable: tmp_209
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_209
Num:
1
Den:
-1
Norm:
0
done.
TMP_210(uint256) = one_5 (c)- TMP_209
checking tmp_210
Temp variable: tmp_210
Num:
-1
Den:
-1
Norm:
-100
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_210
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_210
Return...
getSlipAdustment
TMP_210
TMP_210
[x]node added back
------
typecheckig node...
TMP_208(uint256) = numerator_3 (c)* one_5
checking tmp_208
Temp variable: tmp_208
testing mul...
---
Num:
Den:
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
True
False
False
True
Num:
-1
Den:
-1
Norm:
0
[i]Type for TMP_208
Num:
-1
Den:
-1
Norm:
0
done.
TMP_209(uint256) = TMP_208 (c)/ denominator_1
checking tmp_209
Temp variable: tmp_209
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_209
Num:
1
Den:
-1
Norm:
0
done.
TMP_210(uint256) = one_5 (c)- TMP_209
checking tmp_210
Temp variable: tmp_210
Num:
-1
Den:
-1
Norm:
-100
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_210
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_210
Return...
getSlipAdustment
TMP_210
TMP_210
[x]node added back
------
typecheckig node...
TMP_208(uint256) = numerator_3 (c)* one_5
checking tmp_208
Temp variable: tmp_208
testing mul...
---
Num:
Den:
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
True
False
False
True
Num:
-1
Den:
-1
Norm:
0
[i]Type for TMP_208
Num:
-1
Den:
-1
Norm:
0
done.
TMP_209(uint256) = TMP_208 (c)/ denominator_1
checking tmp_209
Temp variable: tmp_209
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_209
Num:
1
Den:
-1
Norm:
0
done.
TMP_210(uint256) = one_5 (c)- TMP_209
checking tmp_210
Temp variable: tmp_210
Num:
-1
Den:
-1
Norm:
-100
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_210
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_210
Return...
getSlipAdustment
TMP_210
TMP_210
[x]node added back
------
typecheckig node...
TMP_208(uint256) = numerator_3 (c)* one_5
checking tmp_208
Temp variable: tmp_208
testing mul...
---
Num:
Den:
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
True
False
False
True
Num:
-1
Den:
-1
Norm:
0
[i]Type for TMP_208
Num:
-1
Den:
-1
Norm:
0
done.
TMP_209(uint256) = TMP_208 (c)/ denominator_1
checking tmp_209
Temp variable: tmp_209
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_209
Num:
1
Den:
-1
Norm:
0
done.
TMP_210(uint256) = one_5 (c)- TMP_209
checking tmp_210
Temp variable: tmp_210
Num:
-1
Den:
-1
Norm:
-100
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_210
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_210
Return...
getSlipAdustment
TMP_210
TMP_210
[x]node added back
contract name: iERC20
WARNING!!!!
iERC20_types.txt
Type File not found.
[x] iERC20 not run
contract name: iFACTORY
WARNING!!!!
iFACTORY_types.txt
Type File not found.
[x] iFACTORY not run
contract name: iPOOLS
WARNING!!!!
iPOOLS_types.txt
Type File not found.
[x] iPOOLS not run
contract name: iROUTER
WARNING!!!!
iROUTER_types.txt
Type File not found.
[x] iROUTER not run
contract name: iSYNTH
WARNING!!!!
iSYNTH_types.txt
Type File not found.
[x] iSYNTH not run
contract name: iVADER
WARNING!!!!
iVADER_types.txt
Type File not found.
[x] iVADER not run
contract name: console
WARNING!!!!
console_types.txt
Type File not found.
[x] console not run
