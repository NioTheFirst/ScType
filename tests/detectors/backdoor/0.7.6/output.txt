contract name: Router
WARNING!!!!
Router_types.txt
"Router_types.txt" opened successfully.
[*c], Router



[sef], XXX, isAsset



[sef], XXX, swap, [2], [-1], 0



[tref], arrayPrices, -1, -1, 0



[tref], arrayAnchors, -1, -1, 0



[tref], mapMemberToken_lastDeposited, 1, -1, 0



[tref], mapMemberToken_depositBase, 2, -1, 0



[tref], mapMemberToken_depositToken, 1, -1, 0



[tref], mapCollateralAsset_NextEra, -1, -1, 0



[t], global, USDV, 1, -1, 0



[t], global, one, -1, -1, 0



[t], global, POOLS, -1, -1, 0, XXX



[t], global, mapMember_Collateral, -1, -1, 0



[t], global, curatedPoolCount, -1, -1, 0



[t], global, curatedPoolLimit, -1, -1, 0



[t], global, VADER, -1, -1, 0, XXX



[t], global, mapCollateralDebt_Debt, -1, -1, 0



[t], global, rewardReductionFactor, -1, -1, 0



[t], global, mapCollateralDebt_Collateral, -1, -1, 0



[t], global, mapMemberToken_lastDeposited, -1, -1, 0



[t], global, mapCollateralDebt_interestPaid, -1, -1, 0



[t], global, _isCurated, -1, -1, 0



[t], global, arrayPrices, -1, -1, 0



[t], global, mapMemberToken_depositBase, -1, -1, 0



[t], global, mapMemberToken_depositToken, -1, -1, 0



[t], global, anchorLimit, -1, -1, 0



[t], global, arrayAnchors, -1, -1, 0



[t], global, mapCollateralAsset_NextEra, -1, -1, 0



[t], global, inited, -1, -1, 0



[t], global, insidePriceLimit, -1, -1, 0



[t], global, outsidePriceLimit, -1, -1, 0



[t], global, timeForFullProtection, -1, -1, 0



[t], init, _vader, -1, -1, 0, XXX



[t], init, _usdv, -1, -1, 0, XXX



[t], init, _pool, -1, -1, 0, XXX



[t], swapWithSynthsWithLimit, inputAmount, 1, -1, 0



[t], swapWithSynthsWithLimit, inputToken, -2, -1, 0, XXX



[t], swapWithSynthsWithLimit, inSynth, -1, -1, 0



[t], swapWithSynthsWithLimit, outputToken, -2, -1, 0, XXX



[t], swapWithSynthsWithLimit, outSynth, -1, -1, 0



[t], swapWithSynthsWithLimit, slipLimit, -1, -1, 0



[t], swapWithSynthsWithLimit, hlc_0, -1, -1, 0, XXX



[t], moveTokenToPools, hlc_0, -1, -1, 0



[t], moveTokenToPools, hlc_1, 1, -1, 0



[t], moveTokenToPools, hlc_2, -1, -1, 0



[t], moveTokenToPools, hlc_3, -1, -1, 0



[t], moveTokenToPools, hlc_4, -1, -1, 0



[t], moveTokenToPools, hlc_5, 1, -1, 0



[t], swapWithSynthsWithLimit, hlc_6, -1, -1, 0, XXX



[t], swapWithSynthsWithLimit, hlc_7, -1, -1, 0



[t], UTILS, hlc_0, -1, -1, 0, XXX



[t], swapWithSynthsWithLimit, hlc_1, 2, -1, 0



[t], swapWithSynthsWithLimit, hlc_2, -1, -1, 0



[t], swapWithSynthsWithLimit, hlc_3, 1, -1, 0



[t], swapWithSynthsWithLimit, hlc_4, -1, -1, 0



[t], swapWithSynthsWithLimit, hlc_5, 1, -1, 0



[t], swapWithSynthsWithLimit, hlc_7, -1, -1, 0



[t], swapWithSynthsWithLimit, hlc_8, 1, -1, 0



[t], swapWithSynthsWithLimit, hlc_9, -1, -1, 0



[t], swapWithSynthsWithLimit, hlc_10, 1, -1, 0



[t], swapWithSynthsWithLimit, hlc_11, -1, -1, 0



[t], swapWithSynthsWithLimit, hlc_12, 1, -1, 0



[t], swapWithSynthsWithLimit, hlc_13, 2, -1, 0



[t], swapWithSynthsWithLimit, hlc_14, -1, -1, 0



[t], _handleAnchorPriceUpdate, hlc_0, -1, -1, 0



[t], updateAnchorPrice, ref_0, -1, -1, 0



[t], updateAnchorPrice, ref_1, -1, -1, 0, XXX



[t], updateAnchorPrice, ref_2, 2, -1, 0



[t], updateAnchorPrice, ref_3, -1, -1, 0, XXX



[t], calcValueInBase, hlc_0, 2, -1, 0



[t], addDepositData, member, -1, -1, 0, XXX



[t], addDepositData, token, -1, -1, 0, XXX



[t], addDepositData, amountBase, 2, -1, 0



[t], addDepositData, amountToken, 1, -1, 0



[t], addDepositData, ref_0, -1, -1, 0



[t], addDepositData, ref_1, 2, -1, 0



[t], addDepositData, ref_2, -1, -1, 0



[t], addDepositData, ref_3, 1, -1, 0



[t], addDepositData, ref_4, -1, -1, 0



[t], addDepositData, ref_5, -1, -1, 0



[t], removeDepositData, member, -1, -1, 0, XXX



[t], removeDepositData, token, -1, -1, 0, XXX



[t], removeDepositData, basisPoints, -1, -1, 0



[t], removeDepositData, protection, -1, -1, 0



[t], updateAnchorPrice, hlc_0, 2, -1, 0



[t], removeDepositData, ref_0, -1, -1, 0



[t], removeDepositData, ref_1, 1, -1, 0



[t], removeDepositData, ref_2, -1, -1, 0



[t], removeDepositData, ref_3, 1, -1, 0



[t], removeDepositData, hlc_0, 2, -1, 0



[t], removeDepositData, ref_4, -1, -1, 0



[t], removeDepositData, ref_5, -1, -1, 0



[t], removeDepositData, hlc_1, 1, -1, 0



[t], removeDepositData, ref_6, -1, -1, 0



[t], removeDepositData, ref_7, 2, -1, 0



[t], removeDepositData, ref_8, -1, -1, 0



[t], removeDepositData, ref_9, 1, -1, 0



[t], getILProtection, member, -1, -1, 0, XXX



[t], getILProtection, base, -1, -1, 0, XXX



[t], getILProtection, token, -1, -1, 0, XXX



[t], getILProtection, basisPoints, -1, -1, 0



[t], getILProtection, hlc_0, -1, -1, 0



[t], reserveVADER, hlc_0, 1, -1, 0



[t], reserveUSDV, hlc_0, 2, -1, 0



[t], curatePool, token, -1, -1, 0, XXX



[t], curatePool, hlc_0, -1, -1, 0



[t], curatePool, hlc_1, -1, -1, 0



[t], isCurated, ref_0, -1, -1, 0



[t], curatePool, ref_1, -1, -1, 0



[t], replacePool, oldToken, -1, -1, 0, XXX



[t], replacePool, newToken, -1, -1, 0, XXX



[t], replacePool, hlc_0, -1, -1, 0



[t], replacePool, hlc_1, -1, -1, 0



[t], replacePool, hlc_2, 2, -1, 0



[t], replacePool, ref_0, -1, -1, 0



[t], replacePool, ref_1, -1, -1, 0



[t], listAnchor, token, -1, -1, 0, XXX



[t], listAnchor, ref_0, -1, -1, 0



[t], listAnchor, hlc_0, -1, -1, 0



[t], listAnchor, ref_1, -1, -1, 0



[t], listAnchor, ref_2, -1, -1, 0, XXX



[t], swapWithSynthsWithLimit, hlc_15, -1, -1, 0



[t], listAnchor, hlc_1, 2, -1, 0



[t], listAnchor, ref_3, -1, -1, 0



[t], listAnchor, ref_4, 2, -1, 0



[t], listAnchor, ref_5, -1, -1, 0



[t], replaceAnchor, oldToken, -1, -1, 0, XXX



[t], replaceAnchor, newToken, -1, -1, 0, XXX



[t], replaceAnchor, hlc_0, -1, -1, 0



[t], replaceAnchor, hlc_1, 2, -1, 0



[t], replaceAnchor, hlc_2, 2, -1, 0



[t], getAnchorPrice, ref_0, -1, -1, 0



[t], getAnchorPrice, hlc_0, -1, -1, 0



[t], getAnchorPrice, ref_1, -1, -1, 0



[t], replaceAnchor, ref_2, -1, -1, 0



[t], replaceAnchor, ref_3, -1, -1, 0



[t], replaceAnchor, ref_4, -1, -1, 0



[t], replaceAnchor, ref_5, -1, -1, 0



[t], replaceAnchor, ref_6, -1, -1, 0, XXX



[t], updateAnchorPrice, token, -1, -1, 0, XXX



[t], getVADERAmount, USDVAmount, 2, -1, 0



[t], getUSDVAmount, vaderAmount, 1, -1, 0



[t], borrowForMember, member, -1, -1, 0, XXX



[t], borrowForMember, amount, -1, -1, 0



[t], borrowForMember, collateralAsset, -1, -1, 0, XXX



[t], borrowForMember, debtAsset, -1, -1, 0, XXX



[t], _handleTransferIn, hlc_0, -1, -1, 0



[t], isPool, hlc_0, -1, -1, 0



[t], isPool, hlc_1, -1, -1, 0



[t], _getFunds, hlc_0, 1, -1, 0



[t], _getFunds, hlc_1, -1, -1, 0



[t], _getFunds, hlc_2, -1, -1, 0



[t], _getFunds, hlc_3, 1, -1, 0



[t], _getFunds, hlc_4, 2, -1, 0



[t], borrowForMember, _debtIssued, -1, -1, 0



[t], borrowForMember, _baseBorrowed, -1, -1, 0



[t], borrowForMember, ref_0, -1, -1, 0



[t], borrowForMember, ref_1, -1, -1, 0



[t], borrowForMember, ref_2, -1, -1, 0



[t], borrowForMember, ref_3, -1, -1, 0



[t], borrowForMember, hlc_5, -1, -1, 0



[t], borrowForMember, hlc_6, -1, -1, 0



[t], borrowForMember, hlc_7, -1, -1, 0



[t], borrowForMember, hlc_8, -1, -1, 0



[t], borrowForMember, hlc_9, 1, -1, 0



[t], borrowForMember, hlc_10, 2, -1, 0



[t], getNextEraTime, ref_0, -1, -1, 0



[t], getNextEraTime, ref_1, -1, -1, 0



[t], emitting, hlc_0, -1, -1, 0



[t], payInterest, ref_0, -1, -1, 0



[t], payInterest, ref_1, -1, -1, 0



[t], payInterest, ref_2, -1, -1, 0



[t], payInterest, ref_3, -1, -1, 0



[t], payInterest, hlc_1, -1, -1, 0



[t], payInterest, hlc_2, -1, -1, 0



[t], payInterest, ref_4, -1, -1, 0



[t], payInterest, ref_5, -1, -1, 0



[t], _removeCollateral, ref_0,-1, -1, 0



[t], _removeCollateral, ref_1,-1, -1, 0



[t], payInterest, hlc_0, -1, -1, 0



[t], borrowForMember, hlc_4, 2, -1, 0



[t], payInterest, hlc_3, -1, -1, 0, XXX



[t], repayForMember, member, -1, -1, 0, XXX



[t], repayForMember, basisPoints, -1, -1, 0



[t], repayForMember, collateralAsset, -1, -1, 0, XXX



[t], repayForMember, debtAsset, -1, -1, 0, XXX



[t], getMemberDebt, ref_0, -1, -1, 0



[t], getMemberDebt, ref_1, -1, -1, 0



[t], getMemberDebt, ref_2, -1, -1, 0



[t], getMemberDebt, ref_3, -1, -1, 0



[t], getMemberDebt, ref_4, -1, -1, 0



[t], repayForMember, hlc_0, -1, -1, 0



[t], repayForMember, hlc_6, -1, -1, 0



[t], repayForMember, hlc_7, -1, -1, 0



[t], repayForMember, hlc_8, 1, -1, 0



[t], repayForMember, hlc_9, 2, -1, 0



[t], repayForMember, hlc_10, 1, -1, 0



[t], repayForMember, _collateralUnlocked, 1, -1, 0



[t], repayForMember, _memberInterestShare, -1, -1, 0



[t], repayForMember, ref_0, -1, -1, 0



[t], repayForMember, ref_1, 1, -1, 0



[t], repayForMember, ref_2, -1, -1, 0



[t], repayForMember, ref_3, -1, -1, 0



[t], repayForMember, ref_4, -1, -1, 0



[t], repayForMember, ref_5, -1, -1, 0



[t], _handleTransferOut, hlc_0, -1, -1, 0



[t], _sendFunds, hlc_0, -1, -1, 0



[t], payInterest, collateralAsset, -1, -1, 0, XXX



[t], payInterest, debtAsset, -1, -1, 0, XXX



[t], _handleTransferIn, _member, -1, -1, 0, XXX



[t], _handleTransferIn, _collateralAsset, -1, -1, 0, XXX



[t], _handleTransferIn, _amount, 1, -1, 0



[t], _handleTransferOut, _member, -1, -1, 0, XXX



[t], _handleTransferOut, _collateralAsset, -1, -1, 0, XXX



[t], _handleTransferOut, _amount, 1, -1, 0



[t], _handleTransferOut, hlc_0, -1, 1, 0



[t], _getFunds, _token, -1, -1, 0, XXX



[t], _getFunds, _amount, 1, -1, 0



[t], addDebtToMember, _member, -1, -1, 0, XXX



[t], addDebtToMember, _collateral, -1, -1, 0, XXX



[t], borrowForMember, hlc_2, 2, -1, 0



[t], borrowForMember, hlc_3, -1, -1, 0



[t], _addDebtToMember, _member, -1, -1, 0, XXX



[t], _addDebtToMember, _collateral, -1, -1, 0



[t], _addDebtToMember, _collateralAsset, -1, -1, 0, XXX



[t], _addDebtToMember, _debt, -1, -1, 0



[t], _addDebtToMember, _debtAsset, -1, -1, 0, XXX



[t], _addDebtToMember, ref_0, -1, -1, 0



[t], _addDebtToMember, ref_1, -1, -1, 0



[t], _addDebtToMember, ref_2, -1, -1, 0



[t], _addDebtToMember, ref_3, -1, -1, 0



[t], _addDebtToMember, ref_4, -1, -1, 0



[t], _addDebtToMember, ref_5, -1, -1, 0



[t], _addDebtToMember, ref_6, -1, -1, 0



[t], _addDebtToMember, ref_7, -1, -1, 0



[t], _addDebtToMember, ref_8, -1, -1, 0



[t], _addDebtToMember, ref_9, -1, -1, 0



[t], _removeDebtFromMember, _member, -1, -1, 0, XXX



[t], _removeDebtFromMember, _collateral, -1, -1, 0



[t], _removeDebtFromMember, _collateralAsset, -1, -1, 0, XXX



[t], _removeDebtFromMember, _debt, -1, -1, 0



[t], _removeDebtFromMember, _debtAsset, -1, -1, 0, XXX



[t], _removeDebtFromMember, ref_0, -1, -1, 0



[t], _removeDebtFromMember, ref_1, -1, -1, 0



[t], _removeDebtFromMember, ref_2, -1, -1, 0



[t], _removeDebtFromMember, ref_3, -1, -1, 0



[t], _removeDebtFromMember, ref_4, -1, -1, 0



[t], _removeDebtFromMember, ref_5, -1, -1, 0



[t], _removeDebtFromMember, ref_6, -1, -1, 0



[t], _removeDebtFromMember, ref_7, -1, -1, 0



[t], _removeDebtFromMember, ref_8, -1, -1, 0



[t], _removeDebtFromMember, ref_9, -1, -1, 0



[t], _removeCollateral, _collateral, -1, -1, 0



[t], _removeCollateral, _collateralAsset, -1, -1, 0, XXX



[t], _removeCollateral, _debtAsset, -1, -1, 0, XXX



[t], isBase, token, -1, -1, 0, XXX



[t], moveTokenToPools, _token, -1, -1, 0, XXX



[t], moveTokenToPools, _amount, 1, -1, 0



[t], isPool, token, -1, -1, 0, XXX



[t], _getFunds, hlc_5, 1, -1, 0



[t], _getFunds, hlc_6, 1, -1, 0



[t], _getFunds, hlc_7, 1, -1, 0



[*] Router run
Checking... constructor
[x] No Binary
Checking... init
[o] Marked
Checking... setParams
[x] No Binary
Checking... setAnchorParams
[x] No Binary
Checking... addLiquidity
[x] No Binary
Checking... removeLiquidity
[x] No Binary
Checking... swap
[x] No Binary
Checking... swapWithLimit
[x] No Binary
Checking... swapWithSynths
[x] No Binary
Checking... swapWithSynthsWithLimit
[o] Marked
Checking... _handlePoolReward
[x] No Binary
Checking... addDepositData
[o] Marked
Checking... removeDepositData
[o] Marked
Checking... getILProtection
[o] Marked
Checking... curatePool
[o] Marked
Checking... replacePool
[o] Marked
Checking... listAnchor
[o] Marked
Checking... replaceAnchor
[o] Marked
Checking... updateAnchorPrice
[o] Marked
Checking... _handleAnchorPriceUpdate
[x] No Binary
Checking... getAnchorPrice
[o] Marked
Checking... getVADERAmount
[o] Marked
Checking... getUSDVAmount
[o] Marked
Checking... borrow
[x] No Binary
Checking... borrowForMember
[o] Marked
Checking... repay
[x] No Binary
Checking... repayForMember
[o] Marked
Checking... payInterest
[o] Marked
Checking... checkLiquidate
[x] No Binary
Checking... _handleTransferIn
[o] Marked
Checking... _handleTransferOut
[o] Marked
Checking... _getFunds
[o] Marked
Checking... _sendFunds
[x] No Binary
Checking... _addDebtToMember
[o] Marked
Checking... _removeDebtFromMember
[o] Marked
Checking... _removeCollateral
[o] Marked
Checking... isBase
[o] Marked
Checking... reserveVADER
[x] No Binary
Checking... reserveUSDV
[x] No Binary
Checking... moveTokenToPools
[o] Marked
Checking... UTILS
[x] No Binary
Checking... DAO
[x] No Binary
Checking... emitting
[x] No Binary
Checking... isCurated
[x] No Binary
Checking... isPool
[o] Marked
Checking... getMemberBaseDeposit
[x] No Binary
Checking... getMemberTokenDeposit
[x] No Binary
Checking... getMemberLastDeposit
[x] No Binary
Checking... getMemberCollateral
[x] No Binary
Checking... getMemberDebt
[x] No Binary
Checking... getSystemCollateral
[x] No Binary
Checking... getSystemDebt
[x] No Binary
Checking... getSystemInterestPaid
[x] No Binary
Checking... getNextEraTime
[x] No Binary
Checking... slitherConstructorVariables
[x] No Binary
State_var: mapCollateralAsset_NextEra
Finding type for mapCollateralAsset_NextEra...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
Finding type for POOLS...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
State_var: POOLS
State_var: one
Finding type for one...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: mapCollateralDebt_Collateral
Finding type for mapCollateralDebt_Collateral...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: mapMemberToken_depositBase
Finding type for mapMemberToken_depositBase...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: mapMemberToken_depositToken
Finding type for mapMemberToken_depositToken...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: USDV
Finding type for USDV...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
State_var: mapCollateralDebt_Collateral
State_var: mapCollateralDebt_Debt
Finding type for mapCollateralDebt_Debt...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: mapCollateralDebt_interestPaid
Finding type for mapCollateralDebt_interestPaid...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: mapMember_Collateral
Finding type for mapMember_Collateral...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: arrayAnchors
Finding type for arrayAnchors...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: insidePriceLimit
Finding type for insidePriceLimit...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: outsidePriceLimit
Finding type for outsidePriceLimit...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: VADER
State_var: one
State_var: USDV
State_var: VADER
State_var: mapMemberToken_depositBase
State_var: VADER
State_var: timeForFullProtection
Finding type for timeForFullProtection...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: VADER
State_var: mapCollateralAsset_NextEra
State_var: mapCollateralDebt_interestPaid
State_var: POOLS
State_var: mapCollateralDebt_Collateral
State_var: arrayAnchors
State_var: one
State_var: VADER
State_var: POOLS
State_var: USDV
State_var: VADER
State_var: mapMemberToken_depositToken
State_var: VADER
State_var: POOLS
State_var: curatedPoolCount
Finding type for curatedPoolCount...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: curatedPoolLimit
Finding type for curatedPoolLimit...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: mapCollateralDebt_Debt
State_var: POOLS
State_var: VADER
State_var: inited
Finding type for inited...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: rewardReductionFactor
Finding type for rewardReductionFactor...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: mapMember_Collateral
State_var: POOLS
State_var: USDV
State_var: VADER
State_var: mapCollateralDebt_Collateral
State_var: mapCollateralDebt_Debt
State_var: mapMemberToken_lastDeposited
Finding type for mapMemberToken_lastDeposited...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: USDV
State_var: POOLS
State_var: POOLS
State_var: mapCollateralDebt_interestPaid
State_var: _isCurated
Finding type for _isCurated...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: arrayPrices
Finding type for arrayPrices...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: one
State_var: mapMemberToken_depositBase
State_var: mapMemberToken_depositToken
State_var: mapMember_Collateral
State_var: mapMember_Collateral
State_var: POOLS
State_var: USDV
State_var: VADER
State_var: POOLS
State_var: anchorLimit
Finding type for anchorLimit...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: arrayAnchors
State_var: arrayPrices
State_var: one
lolcheck?
Reading Function: constructor
Function constructor not marked
Reading Function: init
Function name: init
Function Visibility: public
_vader
Finding type for _vader...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_usdv
Finding type for _usdv...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_pool
Finding type for _pool...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
inited_1(bool) := ϕ(['inited_2', 'inited_0'])
typecheckig node...
inited_1(bool) := ϕ(['inited_2', 'inited_0'])
checking inited
State IR  variable: inited
State variable: inited
Function name: init
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for inited
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_0(bool) = inited_1 == False
has variable
[i] TMP_0 cleared
clearing ir...?
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,inited)
typecheckig node...
TMP_0(bool) = inited_1 == False
checking tmp_0
Temp variable: tmp_0
Function name: init
[i]Type for TMP_0
Num:
Den:
Norm:
-100
done.
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,inited)
checking tmp_1
Temp variable: tmp_1
Function name: init
[i]Type for TMP_1
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
inited_2(bool) := True(bool)
has variable
typecheckig node...
inited_2(bool) := True(bool)
checking inited
State IR  variable: inited
State variable: inited
Function name: init
asgn
Constatn varible: true
Num:
Den:
Norm:
-100
Constatn varible: true
val: True
0
Constatn varible: true
val: True
[i]Type for inited
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
VADER_1(address) := _vader_1(address)
has variable
typecheckig node...
VADER_1(address) := _vader_1(address)
checking vader
State IR  variable: vader
State variable: vader
Function name: init
asgn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
clearning node...
clearing ir...?
USDV_1(address) := _usdv_1(address)
has variable
typecheckig node...
USDV_1(address) := _usdv_1(address)
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: init
asgn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
[i]Type for USDV
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
clearning node...
clearing ir...?
POOLS_1(address) := _pool_1(address)
has variable
typecheckig node...
POOLS_1(address) := _pool_1(address)
checking pools
State IR  variable: pools
State variable: pools
Function name: init
asgn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
clearning node...
clearing ir...?
rewardReductionFactor_1(uint256) := 1(uint256)
has variable
typecheckig node...
rewardReductionFactor_1(uint256) := 1(uint256)
checking rewardreductionfactor
State IR  variable: rewardreductionfactor
State variable: rewardreductionfactor
Function name: init
asgn
Constatn varible: 1
Num:
Den:
Norm:
-100
Constatn varible: 1
val: 1
0
Constatn varible: 1
val: 1
[i]Type for rewardReductionFactor
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
timeForFullProtection_1(uint256) := 1(uint256)
has variable
typecheckig node...
timeForFullProtection_1(uint256) := 1(uint256)
checking timeforfullprotection
State IR  variable: timeforfullprotection
State variable: timeforfullprotection
Function name: init
asgn
Constatn varible: 1
Num:
Den:
Norm:
-100
Constatn varible: 1
val: 1
0
Constatn varible: 1
val: 1
[i]Type for timeForFullProtection
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
curatedPoolLimit_1(uint256) := 1(uint256)
has variable
typecheckig node...
curatedPoolLimit_1(uint256) := 1(uint256)
checking curatedpoollimit
State IR  variable: curatedpoollimit
State variable: curatedpoollimit
Function name: init
asgn
Constatn varible: 1
Num:
Den:
Norm:
-100
Constatn varible: 1
val: 1
0
Constatn varible: 1
val: 1
[i]Type for curatedPoolLimit
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
anchorLimit_1(uint256) := 5(uint256)
has variable
typecheckig node...
anchorLimit_1(uint256) := 5(uint256)
checking anchorlimit
State IR  variable: anchorlimit
State variable: anchorlimit
Function name: init
asgn
Constatn varible: 5
Num:
Den:
Norm:
-100
Constatn varible: 5
val: 5
0
Constatn varible: 5
val: 5
[i]Type for anchorLimit
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
insidePriceLimit_1(uint256) := 200(uint256)
has variable
typecheckig node...
insidePriceLimit_1(uint256) := 200(uint256)
checking insidepricelimit
State IR  variable: insidepricelimit
State variable: insidepricelimit
Function name: init
asgn
Constatn varible: 200
Num:
Den:
Norm:
-100
Constatn varible: 200
val: 200
0
Constatn varible: 200
val: 200
[i]Type for insidePriceLimit
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
outsidePriceLimit_1(uint256) := 500(uint256)
has variable
typecheckig node...
outsidePriceLimit_1(uint256) := 500(uint256)
checking outsidepricelimit
State IR  variable: outsidepricelimit
State variable: outsidepricelimit
Function name: init
asgn
Constatn varible: 500
Num:
Den:
Norm:
-100
Constatn varible: 500
val: 500
0
Constatn varible: 500
val: 500
[i]Type for outsidePriceLimit
Num:
-1
Den:
-1
Norm:
0
done.
Reading Function: setParams
Function setParams not marked
Reading Function: setAnchorParams
Function setAnchorParams not marked
Reading Function: addLiquidity
Function addLiquidity not marked
Reading Function: removeLiquidity
Function removeLiquidity not marked
Reading Function: swap
Function swap not marked
Reading Function: swapWithLimit
Function swapWithLimit not marked
Reading Function: swapWithSynths
Function swapWithSynths not marked
Reading Function: swapWithSynthsWithLimit
Function name: swapWithSynthsWithLimit
Function Visibility: public
inputAmount
Finding type for inputAmount...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
inputToken
Finding type for inputToken...
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
inSynth
Finding type for inSynth...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
outputToken
Finding type for outputToken...
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
outSynth
Finding type for outSynth...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
slipLimit
Finding type for slipLimit...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [-2]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
Param: 3
    num: [-2]
    den: [-1]
Param: 4
    num: [-1]
    den: [-1]
Param: 5
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
inputAmount_1(uint256) := ϕ(['inputAmount_1', 'inputAmount_1', 'inputAmount_1'])
clearing ir...?
inputToken_1(address) := ϕ(['inputToken_1', 'inputToken_1', 'inputToken_1'])
clearing ir...?
inSynth_1(bool) := ϕ(['inSynth_1'])
clearing ir...?
outputToken_1(address) := ϕ(['outputToken_1', 'outputToken_1', 'outputToken_1'])
clearing ir...?
outSynth_1(bool) := ϕ(['outSynth_1'])
clearing ir...?
slipLimit_1(uint256) := ϕ(['slipLimit_1'])
clearing ir...?
VADER_2(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_2(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
clearing ir...?
POOLS_9(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
inputAmount_1(uint256) := ϕ(['inputAmount_1', 'inputAmount_1', 'inputAmount_1'])
checking inputamount
Local variable: inputamount
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for inputAmount
Num:
1
Den:
-1
Norm:
-100
done.
inputToken_1(address) := ϕ(['inputToken_1', 'inputToken_1', 'inputToken_1'])
checking inputtoken
Local variable: inputtoken
Function name: swapWithSynthsWithLimit
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for inputToken
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
inSynth_1(bool) := ϕ(['inSynth_1'])
checking insynth
Local variable: insynth
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for inSynth
Num:
-1
Den:
-1
Norm:
-100
done.
outputToken_1(address) := ϕ(['outputToken_1', 'outputToken_1', 'outputToken_1'])
checking outputtoken
Local variable: outputtoken
Function name: swapWithSynthsWithLimit
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for outputToken
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
outSynth_1(bool) := ϕ(['outSynth_1'])
checking outsynth
Local variable: outsynth
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for outSynth
Num:
-1
Den:
-1
Norm:
-100
done.
slipLimit_1(uint256) := ϕ(['slipLimit_1'])
checking sliplimit
Local variable: sliplimit
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for slipLimit
Num:
-1
Den:
-1
Norm:
-100
done.
VADER_2(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_2(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_9(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
_member_1(address) := msg.sender(address)
has variable
[i] _member cleared
typecheckig node...
_member_1(address) := msg.sender(address)
checking _member
Local variable: _member
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
not variable
0
[i]Type for _member
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_17 = ! inSynth_1 
clearing ir...?
CONDITION TMP_17
typecheckig node...
TMP_17 = ! inSynth_1 
checking tmp_17
Temp variable: tmp_17
Function name: swapWithSynthsWithLimit
[i]Type for TMP_17
Num:
Den:
Norm:
-100
done.
CONDITION TMP_17
Condition...
Conidtion: 
TMP_17
TMP_17
clearning node...
clearing ir...?
TMP_18(uint256) = INTERNAL_CALL, Router.moveTokenToPools(address,uint256)(inputToken_1,inputAmount_1)
clearing ir...?
VADER_3(address) := ϕ(['VADER_36'])
clearing ir...?
USDV_3(address) := ϕ(['USDV_31'])
clearing ir...?
POOLS_10(address) := ϕ(['POOLS_112', 'POOLS_109', 'POOLS_108'])
typecheckig node...
TMP_18(uint256) = INTERNAL_CALL, Router.moveTokenToPools(address,uint256)(inputToken_1,inputAmount_1)
Internal call...
moveTokenToPools
inputToken
inputAmount
Function: moveTokenToPools
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
added
xyz
Function name: moveTokenToPools
Function Visibility: internal
clearning node...
clearing ir...?
_token_1(address) := ϕ(['token_1', 'TMP_20', 'inputToken_1', 'base_1', 'debtAsset_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['inputToken_1', 'inputBase_1', 'inputAmount_1', '_amount_1'])
clearing ir...?
VADER_35(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_30(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
clearing ir...?
POOLS_106(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
_token_1(address) := ϕ(['token_1', 'TMP_20', 'inputToken_1', 'base_1', 'debtAsset_1'])
checking _token
Local variable: _token
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
_amount_1(uint256) := ϕ(['inputToken_1', 'inputBase_1', 'inputAmount_1', '_amount_1'])
checking _amount
Local variable: _amount
Function name: moveTokenToPools
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for _amount
Num:
1
Den:
-1
Norm:
-100
done.
VADER_35(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_30(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: moveTokenToPools
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_106(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_307(bool) = _token_1 == VADER_35
has variable
[i] TMP_307 cleared
clearing ir...?
TMP_308(bool) = _token_1 == USDV_30
has variable
[i] TMP_308 cleared
clearing ir...?
TMP_309(bool) = TMP_307 || TMP_308
has variable
[i] TMP_309 cleared
clearing ir...?
TMP_310 = CONVERT POOLS_106 to iPOOLS
clearing ir...?
TMP_311(bool) = HIGH_LEVEL_CALL, dest:TMP_310(iPOOLS), function:isSynth, arguments:['_token_1']  
has variable
[i] TMP_311 cleared
clearing ir...?
VADER_36(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_35', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_31(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_30', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_107(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_106'])
clearing ir...?
TMP_312(bool) = TMP_309 || TMP_311
has variable
[i] TMP_312 cleared
clearing ir...?
CONDITION TMP_312
typecheckig node...
TMP_307(bool) = _token_1 == VADER_35
checking tmp_307
Temp variable: tmp_307
Function name: moveTokenToPools
[i]Type for TMP_307
Num:
Den:
Norm:
-100
done.
TMP_308(bool) = _token_1 == USDV_30
checking tmp_308
Temp variable: tmp_308
Function name: moveTokenToPools
[i]Type for TMP_308
Num:
Den:
Norm:
-100
done.
TMP_309(bool) = TMP_307 || TMP_308
checking tmp_309
Temp variable: tmp_309
Function name: moveTokenToPools
[i]Type for TMP_309
Num:
Den:
Norm:
-100
done.
TMP_310 = CONVERT POOLS_106 to iPOOLS
checking tmp_310
Temp variable: tmp_310
Function name: moveTokenToPools
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_310
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_311(bool) = HIGH_LEVEL_CALL, dest:TMP_310(iPOOLS), function:isSynth, arguments:['_token_1']  
High Level Call: issynth
checking tmp_311
Temp variable: tmp_311
Function name: moveTokenToPools
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_311
WIP
hlc contract name: XXX func_name: isSynth
TMP_311
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_311
Num:
-1
Den:
-1
Norm:
0
done.
VADER_36(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_35', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_31(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_30', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: moveTokenToPools
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_107(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_106'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_312(bool) = TMP_309 || TMP_311
checking tmp_312
Temp variable: tmp_312
Function name: moveTokenToPools
[i]Type for TMP_312
Num:
Den:
Norm:
-100
done.
CONDITION TMP_312
Condition...
Conidtion: 
TMP_312
TMP_312
clearning node...
clearing ir...?
TMP_318 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:TMP_318(iERC20), function:balanceOf, arguments:['POOLS_107']  
has variable
[i] TMP_319 cleared
clearing ir...?
POOLS_110(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
_startBal_1(uint256) := TMP_319(uint256)
has variable
[i] _startBal cleared
typecheckig node...
TMP_318 = CONVERT _token_1 to iERC20
checking tmp_318
Temp variable: tmp_318
Function name: moveTokenToPools
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_318
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:TMP_318(iERC20), function:balanceOf, arguments:['POOLS_107']  
High Level Call: balanceof
checking tmp_319
Temp variable: tmp_319
Function name: moveTokenToPools
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_319
WIP
hlc contract name: XXX func_name: balanceOf
TMP_319
Finding type for hlc_1...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_319
Num:
1
Den:
-1
Norm:
0
done.
POOLS_110(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_startBal_1(uint256) := TMP_319(uint256)
checking _startbal
Local variable: _startbal
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _startBal
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_320 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_321(bool) = HIGH_LEVEL_CALL, dest:TMP_320(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_110', '_amount_1']  
has variable
[i] TMP_321 cleared
clearing ir...?
POOLS_111(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_110', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_320 = CONVERT _token_1 to iERC20
checking tmp_320
Temp variable: tmp_320
Function name: moveTokenToPools
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_320
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_321(bool) = HIGH_LEVEL_CALL, dest:TMP_320(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_110', '_amount_1']  
High Level Call: transferfrom
checking tmp_321
Temp variable: tmp_321
Function name: moveTokenToPools
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_321
WIP
hlc contract name: XXX func_name: transferFrom
TMP_321
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_321
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_111(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_110', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
safeAmount_1(uint256) := _amount_1(uint256)
has variable
[i] safeAmount cleared
typecheckig node...
safeAmount_1(uint256) := _amount_1(uint256)
checking safeamount
Local variable: safeamount
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
-100
0
[i]Type for safeAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_322 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_323(uint256) = HIGH_LEVEL_CALL, dest:TMP_322(iERC20), function:balanceOf, arguments:['POOLS_111']  
has variable
[i] TMP_323 cleared
clearing ir...?
POOLS_112(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_111', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_324(uint256) = TMP_323 (c)- _startBal_1
has variable
[i] TMP_324 cleared
clearing ir...?
safeAmount_2(uint256) := TMP_324(uint256)
has variable
[i] safeAmount cleared
typecheckig node...
TMP_322 = CONVERT _token_1 to iERC20
checking tmp_322
Temp variable: tmp_322
Function name: moveTokenToPools
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_322
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_323(uint256) = HIGH_LEVEL_CALL, dest:TMP_322(iERC20), function:balanceOf, arguments:['POOLS_111']  
High Level Call: balanceof
checking tmp_323
Temp variable: tmp_323
Function name: moveTokenToPools
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_323
WIP
hlc contract name: XXX func_name: balanceOf
TMP_323
Finding type for hlc_3...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_323
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_112(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_111', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_324(uint256) = TMP_323 (c)- _startBal_1
checking tmp_324
Temp variable: tmp_324
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
[i]Type for TMP_324
Num:
1
Den:
-1
Norm:
0
done.
safeAmount_2(uint256) := TMP_324(uint256)
checking safeamount
Local variable: safeamount
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
-100
0
[i]Type for safeAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_313(bool) = tx.origin == msg.sender
has variable
[i] TMP_313 cleared
clearing ir...?
CONDITION TMP_313
typecheckig node...
TMP_313(bool) = tx.origin == msg.sender
checking tmp_313
Temp variable: tmp_313
Function name: moveTokenToPools
[i]Type for TMP_313
Num:
Den:
Norm:
-100
done.
CONDITION TMP_313
Condition...
Conidtion: 
TMP_313
TMP_313
clearning node...
clearing ir...?
TMP_316 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_317(bool) = HIGH_LEVEL_CALL, dest:TMP_316(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_107', '_amount_1']  
has variable
[i] TMP_317 cleared
clearing ir...?
POOLS_108(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_107', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_316 = CONVERT _token_1 to iERC20
checking tmp_316
Temp variable: tmp_316
Function name: moveTokenToPools
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_316
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_317(bool) = HIGH_LEVEL_CALL, dest:TMP_316(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_107', '_amount_1']  
High Level Call: transferfrom
checking tmp_317
Temp variable: tmp_317
Function name: moveTokenToPools
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_317
WIP
hlc contract name: XXX func_name: transferFrom
TMP_317
Finding type for hlc_4...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_317
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_108(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_107', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_314 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_315(bool) = HIGH_LEVEL_CALL, dest:TMP_314(iERC20), function:transferTo, arguments:['POOLS_107', '_amount_1']  
has variable
[i] TMP_315 cleared
clearing ir...?
POOLS_109(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_314 = CONVERT _token_1 to iERC20
checking tmp_314
Temp variable: tmp_314
Function name: moveTokenToPools
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_314
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_315(bool) = HIGH_LEVEL_CALL, dest:TMP_314(iERC20), function:transferTo, arguments:['POOLS_107', '_amount_1']  
High Level Call: transferto
checking tmp_315
Temp variable: tmp_315
Function name: moveTokenToPools
High Call: transferTo
func name:transferTo
other func name:transferTo
TMP_315
WIP
hlc contract name: XXX func_name: transferTo
TMP_315
Finding type for hlc_5...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_315
Num:
1
Den:
-1
Norm:
0
done.
POOLS_109(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
Checking return valuemoveTokenToPools
safeAmount
&&
safeAmount
Num:
Den:
Norm:
-100
[i]Type for TMP_18
Num:
Den:
Norm:
-100
done.
VADER_3(address) := ϕ(['VADER_36'])
checking vader
State IR  variable: vader
State variable: vader
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_3(address) := ϕ(['USDV_31'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_10(address) := ϕ(['POOLS_112', 'POOLS_109', 'POOLS_108'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_19 = CONVERT POOLS_9 to iPOOLS
clearing ir...?
TMP_20(address) = HIGH_LEVEL_CALL, dest:TMP_19(iPOOLS), function:getSynth, arguments:['inputToken_1']  
has variable
[i] TMP_20 cleared
clearing ir...?
VADER_4(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_3', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_4(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_3', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_11(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_10'])
clearing ir...?
TMP_21(uint256) = INTERNAL_CALL, Router.moveTokenToPools(address,uint256)(TMP_20,inputAmount_1)
clearing ir...?
VADER_5(address) := ϕ(['VADER_36'])
clearing ir...?
USDV_5(address) := ϕ(['USDV_31'])
clearing ir...?
POOLS_12(address) := ϕ(['POOLS_112', 'POOLS_109', 'POOLS_108'])
typecheckig node...
TMP_19 = CONVERT POOLS_9 to iPOOLS
checking tmp_19
Temp variable: tmp_19
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_19
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_20(address) = HIGH_LEVEL_CALL, dest:TMP_19(iPOOLS), function:getSynth, arguments:['inputToken_1']  
High Level Call: getsynth
checking tmp_20
Temp variable: tmp_20
Function name: swapWithSynthsWithLimit
High Call: getSynth
func name:getSynth
other func name:getSynth
TMP_20
WIP
hlc contract name: XXX func_name: getSynth
TMP_20
Finding type for hlc_6...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
[i]Type for TMP_20
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
VADER_4(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_3', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_4(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_3', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_11(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_10'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_21(uint256) = INTERNAL_CALL, Router.moveTokenToPools(address,uint256)(TMP_20,inputAmount_1)
Internal call...
moveTokenToPools
TMP_20
inputAmount
Function: moveTokenToPools
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
added
xyz
Function name: moveTokenToPools
Function Visibility: internal
clearning node...
clearing ir...?
_token_1(address) := ϕ(['token_1', 'TMP_20', 'inputToken_1', 'base_1', 'debtAsset_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['inputToken_1', 'inputBase_1', 'inputAmount_1', '_amount_1'])
clearing ir...?
VADER_35(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_30(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
clearing ir...?
POOLS_106(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
_token_1(address) := ϕ(['token_1', 'TMP_20', 'inputToken_1', 'base_1', 'debtAsset_1'])
checking _token
Local variable: _token
Function name: moveTokenToPools
Phi
[i]Type for _token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
_amount_1(uint256) := ϕ(['inputToken_1', 'inputBase_1', 'inputAmount_1', '_amount_1'])
checking _amount
Local variable: _amount
Function name: moveTokenToPools
Phi
[i]Type for _amount
Num:
1
Den:
-1
Norm:
-100
done.
VADER_35(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: moveTokenToPools
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_30(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: moveTokenToPools
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_106(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_307(bool) = _token_1 == VADER_35
has variable
[i] TMP_307 cleared
clearing ir...?
TMP_308(bool) = _token_1 == USDV_30
has variable
[i] TMP_308 cleared
clearing ir...?
TMP_309(bool) = TMP_307 || TMP_308
has variable
[i] TMP_309 cleared
clearing ir...?
TMP_310 = CONVERT POOLS_106 to iPOOLS
clearing ir...?
TMP_311(bool) = HIGH_LEVEL_CALL, dest:TMP_310(iPOOLS), function:isSynth, arguments:['_token_1']  
has variable
[i] TMP_311 cleared
clearing ir...?
VADER_36(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_35', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_31(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_30', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_107(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_106'])
clearing ir...?
TMP_312(bool) = TMP_309 || TMP_311
has variable
[i] TMP_312 cleared
clearing ir...?
CONDITION TMP_312
typecheckig node...
TMP_307(bool) = _token_1 == VADER_35
checking tmp_307
Temp variable: tmp_307
Function name: moveTokenToPools
[i]Type for TMP_307
Num:
Den:
Norm:
-100
done.
TMP_308(bool) = _token_1 == USDV_30
checking tmp_308
Temp variable: tmp_308
Function name: moveTokenToPools
[i]Type for TMP_308
Num:
Den:
Norm:
-100
done.
TMP_309(bool) = TMP_307 || TMP_308
checking tmp_309
Temp variable: tmp_309
Function name: moveTokenToPools
[i]Type for TMP_309
Num:
Den:
Norm:
-100
done.
TMP_310 = CONVERT POOLS_106 to iPOOLS
checking tmp_310
Temp variable: tmp_310
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
POOLS
[i]Type for TMP_310
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_311(bool) = HIGH_LEVEL_CALL, dest:TMP_310(iPOOLS), function:isSynth, arguments:['_token_1']  
High Level Call: issynth
checking tmp_311
Temp variable: tmp_311
Function name: moveTokenToPools
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_311
WIP
hlc contract name: XXX func_name: isSynth
TMP_311
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_311
Num:
-1
Den:
-1
Norm:
0
done.
VADER_36(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_35', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: moveTokenToPools
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_31(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_30', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: moveTokenToPools
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_107(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_106'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_312(bool) = TMP_309 || TMP_311
checking tmp_312
Temp variable: tmp_312
Function name: moveTokenToPools
[i]Type for TMP_312
Num:
Den:
Norm:
-100
done.
CONDITION TMP_312
Condition...
Conidtion: 
TMP_312
TMP_312
clearning node...
clearing ir...?
TMP_318 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:TMP_318(iERC20), function:balanceOf, arguments:['POOLS_107']  
has variable
[i] TMP_319 cleared
clearing ir...?
POOLS_110(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
_startBal_1(uint256) := TMP_319(uint256)
has variable
[i] _startBal cleared
typecheckig node...
TMP_318 = CONVERT _token_1 to iERC20
checking tmp_318
Temp variable: tmp_318
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_318
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:TMP_318(iERC20), function:balanceOf, arguments:['POOLS_107']  
High Level Call: balanceof
checking tmp_319
Temp variable: tmp_319
Function name: moveTokenToPools
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_319
WIP
hlc contract name: XXX func_name: balanceOf
TMP_319
Finding type for hlc_1...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_319
Num:
1
Den:
-1
Norm:
0
done.
POOLS_110(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_startBal_1(uint256) := TMP_319(uint256)
checking _startbal
Local variable: _startbal
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
0
0
[i]Type for _startBal
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_320 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_321(bool) = HIGH_LEVEL_CALL, dest:TMP_320(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_110', '_amount_1']  
has variable
[i] TMP_321 cleared
clearing ir...?
POOLS_111(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_110', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_320 = CONVERT _token_1 to iERC20
checking tmp_320
Temp variable: tmp_320
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_320
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_321(bool) = HIGH_LEVEL_CALL, dest:TMP_320(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_110', '_amount_1']  
High Level Call: transferfrom
checking tmp_321
Temp variable: tmp_321
Function name: moveTokenToPools
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_321
WIP
hlc contract name: XXX func_name: transferFrom
TMP_321
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_321
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_111(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_110', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
safeAmount_1(uint256) := _amount_1(uint256)
has variable
[i] safeAmount cleared
typecheckig node...
safeAmount_1(uint256) := _amount_1(uint256)
checking safeamount
Local variable: safeamount
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
0
0
[i]Type for safeAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_322 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_323(uint256) = HIGH_LEVEL_CALL, dest:TMP_322(iERC20), function:balanceOf, arguments:['POOLS_111']  
has variable
[i] TMP_323 cleared
clearing ir...?
POOLS_112(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_111', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_324(uint256) = TMP_323 (c)- _startBal_1
has variable
[i] TMP_324 cleared
clearing ir...?
safeAmount_2(uint256) := TMP_324(uint256)
has variable
[i] safeAmount cleared
typecheckig node...
TMP_322 = CONVERT _token_1 to iERC20
checking tmp_322
Temp variable: tmp_322
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_322
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_323(uint256) = HIGH_LEVEL_CALL, dest:TMP_322(iERC20), function:balanceOf, arguments:['POOLS_111']  
High Level Call: balanceof
checking tmp_323
Temp variable: tmp_323
Function name: moveTokenToPools
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_323
WIP
hlc contract name: XXX func_name: balanceOf
TMP_323
Finding type for hlc_3...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_323
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_112(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_111', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_324(uint256) = TMP_323 (c)- _startBal_1
checking tmp_324
Temp variable: tmp_324
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
[i]Type for TMP_324
Num:
1
Den:
-1
Norm:
0
done.
safeAmount_2(uint256) := TMP_324(uint256)
checking safeamount
Local variable: safeamount
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
0
0
[i]Type for safeAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_313(bool) = tx.origin == msg.sender
has variable
[i] TMP_313 cleared
clearing ir...?
CONDITION TMP_313
typecheckig node...
TMP_313(bool) = tx.origin == msg.sender
checking tmp_313
Temp variable: tmp_313
Function name: moveTokenToPools
[i]Type for TMP_313
Num:
Den:
Norm:
-100
done.
CONDITION TMP_313
Condition...
Conidtion: 
TMP_313
TMP_313
clearning node...
clearing ir...?
TMP_316 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_317(bool) = HIGH_LEVEL_CALL, dest:TMP_316(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_107', '_amount_1']  
has variable
[i] TMP_317 cleared
clearing ir...?
POOLS_108(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_107', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_316 = CONVERT _token_1 to iERC20
checking tmp_316
Temp variable: tmp_316
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_316
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_317(bool) = HIGH_LEVEL_CALL, dest:TMP_316(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_107', '_amount_1']  
High Level Call: transferfrom
checking tmp_317
Temp variable: tmp_317
Function name: moveTokenToPools
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_317
WIP
hlc contract name: XXX func_name: transferFrom
TMP_317
Finding type for hlc_4...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_317
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_108(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_107', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_314 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_315(bool) = HIGH_LEVEL_CALL, dest:TMP_314(iERC20), function:transferTo, arguments:['POOLS_107', '_amount_1']  
has variable
[i] TMP_315 cleared
clearing ir...?
POOLS_109(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_314 = CONVERT _token_1 to iERC20
checking tmp_314
Temp variable: tmp_314
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_314
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_315(bool) = HIGH_LEVEL_CALL, dest:TMP_314(iERC20), function:transferTo, arguments:['POOLS_107', '_amount_1']  
High Level Call: transferto
checking tmp_315
Temp variable: tmp_315
Function name: moveTokenToPools
High Call: transferTo
func name:transferTo
other func name:transferTo
TMP_315
WIP
hlc contract name: XXX func_name: transferTo
TMP_315
Finding type for hlc_5...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_315
Num:
1
Den:
-1
Norm:
0
done.
POOLS_109(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
Checking return valuemoveTokenToPools
safeAmount
&&
safeAmount
Num:
Den:
Norm:
-100
[i]Type for TMP_21
Num:
Den:
Norm:
-100
done.
VADER_5(address) := ϕ(['VADER_36'])
checking vader
State IR  variable: vader
State variable: vader
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_5(address) := ϕ(['USDV_31'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_12(address) := ϕ(['POOLS_112', 'POOLS_109', 'POOLS_108'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_22 = CONVERT POOLS_12 to iPOOLS
clearing ir...?
TMP_23(bool) = HIGH_LEVEL_CALL, dest:TMP_22(iPOOLS), function:isAnchor, arguments:['inputToken_1']  
has variable
[i] TMP_23 cleared
clearing ir...?
VADER_6(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26', 'VADER_5'])
clearing ir...?
USDV_6(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_5', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_13(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_12', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_24 = CONVERT POOLS_13 to iPOOLS
clearing ir...?
TMP_25(bool) = HIGH_LEVEL_CALL, dest:TMP_24(iPOOLS), function:isAnchor, arguments:['outputToken_1']  
has variable
[i] TMP_25 cleared
clearing ir...?
VADER_7(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_6', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_7(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_6', 'USDV_25'])
clearing ir...?
POOLS_14(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_13', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_26(bool) = TMP_23 || TMP_25
has variable
[i] TMP_26 cleared
clearing ir...?
CONDITION TMP_26
typecheckig node...
TMP_22 = CONVERT POOLS_12 to iPOOLS
checking tmp_22
Temp variable: tmp_22
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_22
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_23(bool) = HIGH_LEVEL_CALL, dest:TMP_22(iPOOLS), function:isAnchor, arguments:['inputToken_1']  
High Level Call: isanchor
checking tmp_23
Temp variable: tmp_23
Function name: swapWithSynthsWithLimit
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_23
WIP
hlc contract name: XXX func_name: isAnchor
TMP_23
Finding type for hlc_6...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_23
Num:
-1
Den:
-1
Norm:
0
done.
VADER_6(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26', 'VADER_5'])
checking vader
State IR  variable: vader
State variable: vader
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_6(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_5', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_13(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_12', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_24 = CONVERT POOLS_13 to iPOOLS
checking tmp_24
Temp variable: tmp_24
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_24
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_25(bool) = HIGH_LEVEL_CALL, dest:TMP_24(iPOOLS), function:isAnchor, arguments:['outputToken_1']  
High Level Call: isanchor
checking tmp_25
Temp variable: tmp_25
Function name: swapWithSynthsWithLimit
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_25
WIP
hlc contract name: XXX func_name: isAnchor
TMP_25
Finding type for hlc_7...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_25
Num:
-1
Den:
-1
Norm:
0
done.
VADER_7(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_6', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_7(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_6', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_14(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_13', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_26(bool) = TMP_23 || TMP_25
checking tmp_26
Temp variable: tmp_26
Function name: swapWithSynthsWithLimit
[i]Type for TMP_26
Num:
Den:
Norm:
-100
done.
CONDITION TMP_26
Condition...
Conidtion: 
TMP_26
TMP_26
clearning node...
clearing ir...?
_base_2(address) := USDV_7(address)
has variable
[i] _base cleared
typecheckig node...
_base_2(address) := USDV_7(address)
checking _base
Local variable: _base
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _base
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
_base_1(address) := VADER_7(address)
has variable
[i] _base cleared
typecheckig node...
_base_1(address) := VADER_7(address)
checking _base
Local variable: _base
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _base
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
clearning node...
clearing ir...?
_base_3(address) := ϕ(['_base_1', '_base_2'])
typecheckig node...
_base_3(address) := ϕ(['_base_1', '_base_2'])
checking _base
Local variable: _base
Function name: swapWithSynthsWithLimit
Phi
[i]Type for _base
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_27(bool) = INTERNAL_CALL, Router.isBase(address)(outputToken_1)
clearing ir...?
CONDITION TMP_27
typecheckig node...
TMP_27(bool) = INTERNAL_CALL, Router.isBase(address)(outputToken_1)
Internal call...
isBase
outputToken
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
added
xyz
Function name: isBase
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
clearing ir...?
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
typecheckig node...
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
checking token
Local variable: token
Function name: isBase
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: isBase
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: isBase
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_298(bool) = token_1 == VADER_32
has variable
[i] TMP_298 cleared
clearing ir...?
TMP_299(bool) = token_1 == USDV_27
has variable
[i] TMP_299 cleared
clearing ir...?
TMP_300(bool) = TMP_298 || TMP_299
has variable
[i] TMP_300 cleared
clearing ir...?
CONDITION TMP_300
typecheckig node...
TMP_298(bool) = token_1 == VADER_32
checking tmp_298
Temp variable: tmp_298
Function name: isBase
[i]Type for TMP_298
Num:
Den:
Norm:
-100
done.
TMP_299(bool) = token_1 == USDV_27
checking tmp_299
Temp variable: tmp_299
Function name: isBase
[i]Type for TMP_299
Num:
Den:
Norm:
-100
done.
TMP_300(bool) = TMP_298 || TMP_299
checking tmp_300
Temp variable: tmp_300
Function name: isBase
[i]Type for TMP_300
Num:
Den:
Norm:
-100
done.
CONDITION TMP_300
Condition...
Conidtion: 
TMP_300
TMP_300
clearning node...
clearing ir...?
RETURN True
typecheckig node...
RETURN True
Return...
isBase
base_0
True
clearning node...
typecheckig node...
Checking return valueisBase
True
&&
True
Constatn varible: true
Num:
Den:
Norm:
-100
[i]Type for TMP_27
Num:
-1
Den:
-1
Norm:
-100
done.
CONDITION TMP_27
Condition...
Conidtion: 
TMP_27
TMP_27
clearning node...
clearing ir...?
TMP_28(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_29 = CONVERT TMP_28 to iUTILS
clearing ir...?
TMP_30 = CONVERT POOLS_34 to iPOOLS
clearing ir...?
TMP_31(uint256) = HIGH_LEVEL_CALL, dest:TMP_30(iPOOLS), function:getTokenAmount, arguments:['inputToken_1']  
has variable
[i] TMP_31 cleared
clearing ir...?
POOLS_35(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_34', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_32(uint256) = HIGH_LEVEL_CALL, dest:TMP_29(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_31']  
has variable
[i] TMP_32 cleared
clearing ir...?
POOLS_36(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_35', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_33(bool) = TMP_32 <= slipLimit_1
has variable
[i] TMP_33 cleared
clearing ir...?
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)
typecheckig node...
TMP_28(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
added
xyz
Function name: UTILS
Function Visibility: public
clearning node...
clearing ir...?
VADER_37(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
typecheckig node...
VADER_37(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: UTILS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_325 = CONVERT VADER_37 to iVADER
clearing ir...?
TMP_326(address) = HIGH_LEVEL_CALL, dest:TMP_325(iVADER), function:UTILS, arguments:[]  
has variable
[i] TMP_326 cleared
clearing ir...?
VADER_38(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_37', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
RETURN TMP_326
typecheckig node...
TMP_325 = CONVERT VADER_37 to iVADER
checking tmp_325
Temp variable: tmp_325
Function name: UTILS
Num:
Den:
Norm:
-100
0
VADER
[i]Type for TMP_325
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_326(address) = HIGH_LEVEL_CALL, dest:TMP_325(iVADER), function:UTILS, arguments:[]  
High Level Call: utils
checking tmp_326
Temp variable: tmp_326
Function name: UTILS
High Call: UTILS
func name:UTILS
other func name:UTILS
TMP_326
WIP
hlc contract name: XXX func_name: UTILS
TMP_326
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
[i]Type for TMP_326
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
VADER_38(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_37', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: UTILS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
RETURN TMP_326
Return...
UTILS
TMP_326
Checking return valueUTILS
TMP_326
&&
TMP_326
Num:
Den:
Norm:
-100
[i]Type for TMP_28
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_29 = CONVERT TMP_28 to iUTILS
checking tmp_29
Temp variable: tmp_29
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
TMP_28
[i]Type for TMP_29
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_30 = CONVERT POOLS_34 to iPOOLS
checking tmp_30
Temp variable: tmp_30
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_30
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_31(uint256) = HIGH_LEVEL_CALL, dest:TMP_30(iPOOLS), function:getTokenAmount, arguments:['inputToken_1']  
High Level Call: gettokenamount
checking tmp_31
Temp variable: tmp_31
Function name: swapWithSynthsWithLimit
High Call: getTokenAmount
func name:getTokenAmount
other func name:getTokenAmount
TMP_31
WIP
hlc contract name: XXX func_name: getTokenAmount
TMP_31
Finding type for hlc_1...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_31
Num:
2
Den:
-1
Norm:
0
done.
POOLS_35(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_34', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_32(uint256) = HIGH_LEVEL_CALL, dest:TMP_29(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_31']  
High Level Call: calcswapslip
checking tmp_32
Temp variable: tmp_32
Function name: swapWithSynthsWithLimit
High Call: calcSwapSlip
func name:calcSwapSlip
other func name:calcSwapSlip
TMP_32
WIP
hlc contract name: XXX func_name: calcSwapSlip
TMP_32
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_32
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_36(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_35', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_33(bool) = TMP_32 <= slipLimit_1
checking tmp_33
Temp variable: tmp_33
Function name: swapWithSynthsWithLimit
testing lt...
[i]Type for TMP_33
Num:
-1
Den:
-1
Norm:
0
done.
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)
checking tmp_34
Temp variable: tmp_34
Function name: swapWithSynthsWithLimit
[i]Type for TMP_34
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_40(bool) = INTERNAL_CALL, Router.isBase(address)(inputToken_1)
clearing ir...?
CONDITION TMP_40
typecheckig node...
TMP_40(bool) = INTERNAL_CALL, Router.isBase(address)(inputToken_1)
Internal call...
isBase
inputToken
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
[i]Type for TMP_40
Num:
Den:
Norm:
-100
done.
CONDITION TMP_40
Condition...
Conidtion: 
TMP_40
TMP_40
clearning node...
clearing ir...?
TMP_35 = ! inSynth_1 
clearing ir...?
CONDITION TMP_35
typecheckig node...
TMP_35 = ! inSynth_1 
checking tmp_35
Temp variable: tmp_35
Function name: swapWithSynthsWithLimit
[i]Type for TMP_35
Num:
Den:
Norm:
-100
done.
CONDITION TMP_35
Condition...
Conidtion: 
TMP_35
TMP_35
clearning node...
clearing ir...?
TMP_41(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_42 = CONVERT TMP_41 to iUTILS
clearing ir...?
TMP_43 = CONVERT POOLS_17 to iPOOLS
clearing ir...?
TMP_44(uint256) = HIGH_LEVEL_CALL, dest:TMP_43(iPOOLS), function:getBaseAmount, arguments:['outputToken_1']  
has variable
[i] TMP_44 cleared
clearing ir...?
POOLS_18(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_17', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_45(uint256) = HIGH_LEVEL_CALL, dest:TMP_42(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_44']  
has variable
[i] TMP_45 cleared
clearing ir...?
POOLS_19(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_18', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_46(bool) = TMP_45 <= slipLimit_1
has variable
[i] TMP_46 cleared
clearing ir...?
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)
typecheckig node...
TMP_41(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_41
Num:
Den:
Norm:
-100
done.
TMP_42 = CONVERT TMP_41 to iUTILS
checking tmp_42
Temp variable: tmp_42
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
TMP_41
[i]Type for TMP_42
Num:
Den:
Norm:
0
done.
TMP_43 = CONVERT POOLS_17 to iPOOLS
checking tmp_43
Temp variable: tmp_43
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_43
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_44(uint256) = HIGH_LEVEL_CALL, dest:TMP_43(iPOOLS), function:getBaseAmount, arguments:['outputToken_1']  
High Level Call: getbaseamount
checking tmp_44
Temp variable: tmp_44
Function name: swapWithSynthsWithLimit
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_44
WIP
hlc contract name: XXX func_name: getBaseAmount
TMP_44
Finding type for hlc_3...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_44
Num:
1
Den:
-1
Norm:
0
done.
POOLS_18(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_17', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_45(uint256) = HIGH_LEVEL_CALL, dest:TMP_42(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_44']  
High Level Call: calcswapslip
checking tmp_45
Temp variable: tmp_45
Function name: swapWithSynthsWithLimit
High Call: calcSwapSlip
func name:calcSwapSlip
other func name:calcSwapSlip
TMP_45
WIP
TMP_45
Finding type for hlc_4...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_45
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_19(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_18', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_46(bool) = TMP_45 <= slipLimit_1
checking tmp_46
Temp variable: tmp_46
Function name: swapWithSynthsWithLimit
testing lt...
[i]Type for TMP_46
Num:
-1
Den:
-1
Norm:
0
done.
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)
checking tmp_47
Temp variable: tmp_47
Function name: swapWithSynthsWithLimit
[i]Type for TMP_47
Num:
Den:
Norm:
-100
done.
[x]node added back
clearning node...
clearing ir...?
TMP_53(bool) = INTERNAL_CALL, Router.isBase(address)(inputToken_1)
clearing ir...?
TMP_54 = ! TMP_53 
clearing ir...?
TMP_55(bool) = INTERNAL_CALL, Router.isBase(address)(outputToken_1)
clearing ir...?
TMP_56 = ! TMP_55 
clearing ir...?
TMP_57(bool) = TMP_54 && TMP_56
has variable
[i] TMP_57 cleared
clearing ir...?
CONDITION TMP_57
typecheckig node...
TMP_53(bool) = INTERNAL_CALL, Router.isBase(address)(inputToken_1)
Internal call...
isBase
inputToken
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
[i]Type for TMP_53
Num:
Den:
Norm:
-100
done.
TMP_54 = ! TMP_53 
checking tmp_54
Temp variable: tmp_54
Function name: swapWithSynthsWithLimit
[i]Type for TMP_54
Num:
Den:
Norm:
-100
done.
TMP_55(bool) = INTERNAL_CALL, Router.isBase(address)(outputToken_1)
Internal call...
isBase
outputToken
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
[i]Type for TMP_55
Num:
Den:
Norm:
-100
done.
TMP_56 = ! TMP_55 
checking tmp_56
Temp variable: tmp_56
Function name: swapWithSynthsWithLimit
[i]Type for TMP_56
Num:
Den:
Norm:
-100
done.
TMP_57(bool) = TMP_54 && TMP_56
checking tmp_57
Temp variable: tmp_57
Function name: swapWithSynthsWithLimit
[i]Type for TMP_57
Num:
Den:
Norm:
-100
done.
CONDITION TMP_57
Condition...
Conidtion: 
TMP_57
TMP_57
clearning node...
clearing ir...?
TMP_58(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_59 = CONVERT TMP_58 to iUTILS
clearing ir...?
TMP_60 = CONVERT POOLS_24 to iPOOLS
clearing ir...?
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:TMP_60(iPOOLS), function:getTokenAmount, arguments:['inputToken_1']  
has variable
[i] TMP_61 cleared
clearing ir...?
POOLS_25(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_24', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_62(uint256) = HIGH_LEVEL_CALL, dest:TMP_59(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_61']  
has variable
[i] TMP_62 cleared
clearing ir...?
POOLS_26(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_25', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_63(bool) = TMP_62 <= slipLimit_1
has variable
[i] TMP_63 cleared
clearing ir...?
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)
typecheckig node...
TMP_58(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_58
Num:
Den:
Norm:
-100
done.
TMP_59 = CONVERT TMP_58 to iUTILS
checking tmp_59
Temp variable: tmp_59
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
TMP_58
[i]Type for TMP_59
Num:
Den:
Norm:
0
done.
TMP_60 = CONVERT POOLS_24 to iPOOLS
checking tmp_60
Temp variable: tmp_60
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_60
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:TMP_60(iPOOLS), function:getTokenAmount, arguments:['inputToken_1']  
High Level Call: gettokenamount
checking tmp_61
Temp variable: tmp_61
Function name: swapWithSynthsWithLimit
High Call: getTokenAmount
func name:getTokenAmount
other func name:getTokenAmount
TMP_61
WIP
hlc contract name: XXX func_name: getTokenAmount
TMP_61
Finding type for hlc_5...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_61
Num:
1
Den:
-1
Norm:
0
done.
POOLS_25(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_24', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_62(uint256) = HIGH_LEVEL_CALL, dest:TMP_59(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_61']  
High Level Call: calcswapslip
checking tmp_62
Temp variable: tmp_62
Function name: swapWithSynthsWithLimit
High Call: calcSwapSlip
func name:calcSwapSlip
other func name:calcSwapSlip
TMP_62
WIP
TMP_62
Finding type for hlc_6...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_62
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_26(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_25', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_63(bool) = TMP_62 <= slipLimit_1
checking tmp_63
Temp variable: tmp_63
Function name: swapWithSynthsWithLimit
testing lt...
[i]Type for TMP_63
Num:
-1
Den:
-1
Norm:
0
done.
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)
checking tmp_64
Temp variable: tmp_64
Function name: swapWithSynthsWithLimit
[i]Type for TMP_64
Num:
Den:
Norm:
-100
done.
[x]node added back
clearning node...
clearing ir...?
TMP_36 = CONVERT POOLS_36 to iPOOLS
clearing ir...?
TMP_37(uint256) = HIGH_LEVEL_CALL, dest:TMP_36(iPOOLS), function:swap, arguments:['_base_3', 'inputToken_1', '_member_1', 'True']  
has variable
[i] TMP_37 cleared
clearing ir...?
POOLS_38(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
outputAmount_6(uint256) := TMP_37(uint256)
has variable
[i] outputAmount cleared
typecheckig node...
TMP_36 = CONVERT POOLS_36 to iPOOLS
checking tmp_36
Temp variable: tmp_36
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_36
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_37(uint256) = HIGH_LEVEL_CALL, dest:TMP_36(iPOOLS), function:swap, arguments:['_base_3', 'inputToken_1', '_member_1', 'True']  
High Level Call: swap
checking tmp_37
Temp variable: tmp_37
Function name: swapWithSynthsWithLimit
High Call: swap
func name:swap
other func name:swap
TMP_37
WIP
hlc contract name: XXX func_name: swap
COPIED
[i]Type for TMP_37
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_38(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
outputAmount_6(uint256) := TMP_37(uint256)
checking outputamount
Local variable: outputamount
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for outputAmount
Num:
-2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_48 = ! outSynth_1 
clearing ir...?
CONDITION TMP_48
typecheckig node...
TMP_48 = ! outSynth_1 
checking tmp_48
Temp variable: tmp_48
Function name: swapWithSynthsWithLimit
[i]Type for TMP_48
Num:
Den:
Norm:
-100
done.
CONDITION TMP_48
Condition...
Conidtion: 
TMP_48
TMP_48
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_65 = ! inSynth_1 
clearing ir...?
CONDITION TMP_65
typecheckig node...
TMP_65 = ! inSynth_1 
checking tmp_65
Temp variable: tmp_65
Function name: swapWithSynthsWithLimit
[i]Type for TMP_65
Num:
Den:
Norm:
-100
done.
CONDITION TMP_65
Condition...
Conidtion: 
TMP_65
TMP_65
clearning node...
clearing ir...?
TMP_38 = CONVERT POOLS_36 to iPOOLS
clearing ir...?
TMP_39(uint256) = HIGH_LEVEL_CALL, dest:TMP_38(iPOOLS), function:burnSynth, arguments:['_base_3', 'inputToken_1', '_member_1']  
has variable
[i] TMP_39 cleared
clearing ir...?
POOLS_37(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_36', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
outputAmount_5(uint256) := TMP_39(uint256)
has variable
[i] outputAmount cleared
typecheckig node...
TMP_38 = CONVERT POOLS_36 to iPOOLS
checking tmp_38
Temp variable: tmp_38
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_38
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_39(uint256) = HIGH_LEVEL_CALL, dest:TMP_38(iPOOLS), function:burnSynth, arguments:['_base_3', 'inputToken_1', '_member_1']  
High Level Call: burnsynth
checking tmp_39
Temp variable: tmp_39
Function name: swapWithSynthsWithLimit
High Call: burnSynth
func name:burnSynth
other func name:burnSynth
TMP_39
WIP
hlc contract name: XXX func_name: burnSynth
TMP_39
Finding type for hlc_7...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_39
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_37(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_36', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
outputAmount_5(uint256) := TMP_39(uint256)
checking outputamount
Local variable: outputamount
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for outputAmount
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_51 = CONVERT POOLS_19 to iPOOLS
clearing ir...?
TMP_52(uint256) = HIGH_LEVEL_CALL, dest:TMP_51(iPOOLS), function:mintSynth, arguments:['_base_3', 'outputToken_1', '_member_1']  
has variable
[i] TMP_52 cleared
clearing ir...?
POOLS_21(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
outputAmount_2(uint256) := TMP_52(uint256)
has variable
[i] outputAmount cleared
typecheckig node...
TMP_51 = CONVERT POOLS_19 to iPOOLS
checking tmp_51
Temp variable: tmp_51
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_51
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_52(uint256) = HIGH_LEVEL_CALL, dest:TMP_51(iPOOLS), function:mintSynth, arguments:['_base_3', 'outputToken_1', '_member_1']  
High Level Call: mintsynth
checking tmp_52
Temp variable: tmp_52
Function name: swapWithSynthsWithLimit
High Call: mintSynth
func name:mintSynth
other func name:mintSynth
TMP_52
WIP
hlc contract name: XXX func_name: mintSynth
TMP_52
Finding type for hlc_8...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_52
Num:
1
Den:
-1
Norm:
0
done.
POOLS_21(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
outputAmount_2(uint256) := TMP_52(uint256)
checking outputamount
Local variable: outputamount
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for outputAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_49 = CONVERT POOLS_19 to iPOOLS
clearing ir...?
TMP_50(uint256) = HIGH_LEVEL_CALL, dest:TMP_49(iPOOLS), function:swap, arguments:['_base_3', 'outputToken_1', '_member_1', 'False']  
has variable
[i] TMP_50 cleared
clearing ir...?
POOLS_20(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_19', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
outputAmount_1(uint256) := TMP_50(uint256)
has variable
[i] outputAmount cleared
typecheckig node...
TMP_49 = CONVERT POOLS_19 to iPOOLS
checking tmp_49
Temp variable: tmp_49
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_49
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_50(uint256) = HIGH_LEVEL_CALL, dest:TMP_49(iPOOLS), function:swap, arguments:['_base_3', 'outputToken_1', '_member_1', 'False']  
High Level Call: swap
checking tmp_50
Temp variable: tmp_50
Function name: swapWithSynthsWithLimit
High Call: swap
func name:swap
other func name:swap
TMP_50
WIP
hlc contract name: XXX func_name: swap
COPIED
[i]Type for TMP_50
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_20(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_19', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
outputAmount_1(uint256) := TMP_50(uint256)
checking outputamount
Local variable: outputamount
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for outputAmount
Num:
-2
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_68 = CONVERT POOLS_26 to iPOOLS
clearing ir...?
TMP_69(uint256) = HIGH_LEVEL_CALL, dest:TMP_68(iPOOLS), function:burnSynth, arguments:['_base_3', 'inputToken_1', 'POOLS_26']  
has variable
[i] TMP_69 cleared
clearing ir...?
POOLS_27(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_26', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_68 = CONVERT POOLS_26 to iPOOLS
checking tmp_68
Temp variable: tmp_68
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_68
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_69(uint256) = HIGH_LEVEL_CALL, dest:TMP_68(iPOOLS), function:burnSynth, arguments:['_base_3', 'inputToken_1', 'POOLS_26']  
High Level Call: burnsynth
checking tmp_69
Temp variable: tmp_69
Function name: swapWithSynthsWithLimit
High Call: burnSynth
func name:burnSynth
other func name:burnSynth
TMP_69
WIP
hlc contract name: XXX func_name: burnSynth
TMP_69
Finding type for hlc_9...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_69
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_27(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_26', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_66 = CONVERT POOLS_26 to iPOOLS
clearing ir...?
TMP_67(uint256) = HIGH_LEVEL_CALL, dest:TMP_66(iPOOLS), function:swap, arguments:['_base_3', 'inputToken_1', 'POOLS_26', 'True']  
has variable
[i] TMP_67 cleared
clearing ir...?
POOLS_28(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_27', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_66 = CONVERT POOLS_26 to iPOOLS
checking tmp_66
Temp variable: tmp_66
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_66
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_67(uint256) = HIGH_LEVEL_CALL, dest:TMP_66(iPOOLS), function:swap, arguments:['_base_3', 'inputToken_1', 'POOLS_26', 'True']  
High Level Call: swap
checking tmp_67
Temp variable: tmp_67
Function name: swapWithSynthsWithLimit
High Call: swap
func name:swap
other func name:swap
TMP_67
WIP
hlc contract name: XXX func_name: swap
COPIED
[i]Type for TMP_67
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_28(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_27', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
INTERNAL_CALL, Router._handlePoolReward(address,address)(_base_3,inputToken_1)
typecheckig node...
INTERNAL_CALL, Router._handlePoolReward(address,address)(_base_3,inputToken_1)
Internal call...
_handlePoolReward
_base
inputToken
Function: _handlePoolReward
ic
done.
clearning node...
clearing ir...?
INTERNAL_CALL, Router._handlePoolReward(address,address)(_base_3,outputToken_1)
typecheckig node...
INTERNAL_CALL, Router._handlePoolReward(address,address)(_base_3,outputToken_1)
Internal call...
_handlePoolReward
_base
outputToken
Function: _handlePoolReward
ic
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, Router._handleAnchorPriceUpdate(address)(inputToken_1)
typecheckig node...
INTERNAL_CALL, Router._handleAnchorPriceUpdate(address)(inputToken_1)
Internal call...
_handleAnchorPriceUpdate
inputToken
Function: _handleAnchorPriceUpdate
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
added
xyz
Function name: _handleAnchorPriceUpdate
Function Visibility: internal
clearning node...
clearing ir...?
_token_1(address) := ϕ(['outputToken_1', 'inputToken_1'])
clearing ir...?
POOLS_58(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
_token_1(address) := ϕ(['outputToken_1', 'inputToken_1'])
checking _token
Local variable: _token
Function name: _handleAnchorPriceUpdate
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
POOLS_58(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleAnchorPriceUpdate
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_173 = CONVERT POOLS_58 to iPOOLS
clearing ir...?
TMP_174(bool) = HIGH_LEVEL_CALL, dest:TMP_173(iPOOLS), function:isAnchor, arguments:['_token_1']  
has variable
[i] TMP_174 cleared
clearing ir...?
POOLS_59(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_58', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
CONDITION TMP_174
typecheckig node...
TMP_173 = CONVERT POOLS_58 to iPOOLS
checking tmp_173
Temp variable: tmp_173
Function name: _handleAnchorPriceUpdate
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_173
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_174(bool) = HIGH_LEVEL_CALL, dest:TMP_173(iPOOLS), function:isAnchor, arguments:['_token_1']  
High Level Call: isanchor
checking tmp_174
Temp variable: tmp_174
Function name: _handleAnchorPriceUpdate
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_174
WIP
hlc contract name: XXX func_name: isAnchor
TMP_174
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_174
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_59(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_58', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleAnchorPriceUpdate
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
CONDITION TMP_174
Condition...
Conidtion: 
TMP_174
TMP_174
clearning node...
clearing ir...?
INTERNAL_CALL, Router.updateAnchorPrice(address)(_token_1)
typecheckig node...
INTERNAL_CALL, Router.updateAnchorPrice(address)(_token_1)
Internal call...
updateAnchorPrice
_token
Function: updateAnchorPrice
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
added
xyz
Function name: updateAnchorPrice
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['newToken_1', '_token_1', 'token_1'])
clearing ir...?
one_5(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
clearing ir...?
arrayAnchors_16(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_0', 'arrayAnchors_14'])
typecheckig node...
token_1(address) := ϕ(['newToken_1', '_token_1', 'token_1'])
checking token
Local variable: token
Function name: updateAnchorPrice
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
one_5(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: updateAnchorPrice
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_16(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_0', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: updateAnchorPrice
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
i_1(uint256) := 0(uint256)
has variable
[i] i cleared
typecheckig node...
i_1(uint256) := 0(uint256)
checking i
Local variable: i
Function name: updateAnchorPrice
asgn
Constatn varible: 0
Num:
Den:
Norm:
-100
Constatn varible: 0
val: 0
0
Constatn varible: 0
val: 0
[i]Type for i
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
i_2(uint256) := ϕ(['i_1', 'i_3'])
clearing ir...?
REF_72 -> LENGTH arrayAnchors_16
clearing ir...?
TMP_167(bool) = i_2 < REF_72
has variable
[i] TMP_167 cleared
clearing ir...?
CONDITION TMP_167
typecheckig node...
i_2(uint256) := ϕ(['i_1', 'i_3'])
checking i
Local variable: i
Function name: updateAnchorPrice
Phi
[i]Type for i
Num:
Den:
Norm:
-100
done.
REF_72 -> LENGTH arrayAnchors_16
checking ref_72
Refernce variable: ref_72
Function name: updateAnchorPrice
[i]Type for REF_72
Num:
Den:
Norm:
-100
done.
TMP_167(bool) = i_2 < REF_72
checking tmp_167
Temp variable: tmp_167
Function name: updateAnchorPrice
testing lt...
Num:
Den:
Norm:
0
[i]Type for TMP_167
Num:
Den:
Norm:
0
done.
CONDITION TMP_167
Condition...
Conidtion: 
TMP_167
TMP_167
[x]node added back
clearning node...
clearing ir...?
REF_73(address) -> arrayAnchors_16[i_2]
clearing ir...?
TMP_168(bool) = REF_73 == token_1
has variable
[i] TMP_168 cleared
clearing ir...?
CONDITION TMP_168
typecheckig node...
REF_73(address) -> arrayAnchors_16[i_2]
checking ref_73
Refernce variable: ref_73
Function name: updateAnchorPrice
INDEX
Num:
-1
Den:
-1
Norm:
-100
TMP_168(bool) = REF_73 == token_1
checking tmp_168
Temp variable: tmp_168
Function name: updateAnchorPrice
[i]Type for TMP_168
Num:
Den:
Norm:
-100
done.
CONDITION TMP_168
Condition...
Conidtion: 
TMP_168
TMP_168
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_74(uint256) -> arrayPrices_6[i_2]
clearing ir...?
TMP_169(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_170 = CONVERT TMP_169 to iUTILS
clearing ir...?
REF_76(address) -> arrayAnchors_17[i_2]
clearing ir...?
TMP_171(uint256) = HIGH_LEVEL_CALL, dest:TMP_170(iUTILS), function:calcValueInBase, arguments:['REF_76', 'one_6']  
has variable
[i] TMP_171 cleared
clearing ir...?
one_7(uint256) := ϕ(['one_4', 'one_6', 'one_7', 'one_12', 'one_10'])
clearing ir...?
arrayAnchors_18(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_17', 'arrayAnchors_14'])
clearing ir...?
arrayPrices_7(uint256[]) := ϕ(['arrayPrices_6'])
clearing ir...?
REF_74 (->arrayPrices_7) := TMP_171(uint256)
has variable
typecheckig node...
REF_74(uint256) -> arrayPrices_6[i_2]
checking ref_74
Refernce variable: ref_74
Function name: updateAnchorPrice
INDEX
Num:
Den:
Norm:
-100
arrayPrices
TMP_169(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_169
Num:
Den:
Norm:
-100
done.
TMP_170 = CONVERT TMP_169 to iUTILS
checking tmp_170
Temp variable: tmp_170
Function name: updateAnchorPrice
Num:
Den:
Norm:
-100
0
TMP_169
[i]Type for TMP_170
Num:
Den:
Norm:
0
done.
REF_76(address) -> arrayAnchors_17[i_2]
checking ref_76
Refernce variable: ref_76
Function name: updateAnchorPrice
INDEX
Num:
Den:
Norm:
-100
arrayAnchors
TMP_171(uint256) = HIGH_LEVEL_CALL, dest:TMP_170(iUTILS), function:calcValueInBase, arguments:['REF_76', 'one_6']  
High Level Call: calcvalueinbase
checking tmp_171
Temp variable: tmp_171
Function name: updateAnchorPrice
High Call: calcValueInBase
func name:calcValueInBase
other func name:calcValueInBase
TMP_171
WIP
TMP_171
Finding type for hlc_0...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_171
Num:
2
Den:
-1
Norm:
0
done.
one_7(uint256) := ϕ(['one_4', 'one_6', 'one_7', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: updateAnchorPrice
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_18(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_17', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: updateAnchorPrice
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
arrayPrices_7(uint256[]) := ϕ(['arrayPrices_6'])
checking arrayprices
State IR  variable: arrayprices
State variable: arrayprices
Function name: updateAnchorPrice
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayPrices
Num:
-1
Den:
-1
Norm:
-100
done.
REF_74 (->arrayPrices_7) := TMP_171(uint256)
checking ref_74
Refernce variable: ref_74
Function name: updateAnchorPrice
asgn
Num:
-1
Den:
-1
Norm:
0
Error with: REF_74 in function updateAnchorPrice
0
[i]Type for REF_74
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_172(uint256) := i_2(uint256)
has variable
[i] TMP_172 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
has variable
[i] i cleared
typecheckig node...
TMP_172(uint256) := i_2(uint256)
checking tmp_172
Temp variable: tmp_172
Function name: updateAnchorPrice
asgn
Num:
Den:
Norm:
-100
0
[i]Type for TMP_172
Num:
Den:
Norm:
0
done.
i_3(uint256) = i_2 (c)+ 1
checking i
Local variable: i
Function name: updateAnchorPrice
Constatn varible: 1
Constatn varible: 1
val: 1
Constatn varible: 1
Num:
Den:
Norm:
0
[i]Type for i
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
Checking return valueupdateAnchorPrice
done.
clearning node...
typecheckig node...
Checking return value_handleAnchorPriceUpdate
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, Router._handleAnchorPriceUpdate(address)(outputToken_1)
typecheckig node...
INTERNAL_CALL, Router._handleAnchorPriceUpdate(address)(outputToken_1)
Internal call...
_handleAnchorPriceUpdate
outputToken
Function: _handleAnchorPriceUpdate
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
done.
clearning node...
clearing ir...?
TMP_70(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_71 = CONVERT TMP_70 to iUTILS
clearing ir...?
TMP_72 = CONVERT POOLS_29 to iPOOLS
clearing ir...?
TMP_73(uint256) = HIGH_LEVEL_CALL, dest:TMP_72(iPOOLS), function:getBaseAmount, arguments:['outputToken_1']  
has variable
[i] TMP_73 cleared
clearing ir...?
POOLS_30(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_29', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_74(uint256) = HIGH_LEVEL_CALL, dest:TMP_71(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_73']  
has variable
[i] TMP_74 cleared
clearing ir...?
POOLS_31(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_30', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_75(bool) = TMP_74 <= slipLimit_1
has variable
[i] TMP_75 cleared
clearing ir...?
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)
typecheckig node...
TMP_70(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_70
Num:
Den:
Norm:
-100
done.
TMP_71 = CONVERT TMP_70 to iUTILS
checking tmp_71
Temp variable: tmp_71
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
TMP_70
[i]Type for TMP_71
Num:
Den:
Norm:
0
done.
TMP_72 = CONVERT POOLS_29 to iPOOLS
checking tmp_72
Temp variable: tmp_72
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_72
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_73(uint256) = HIGH_LEVEL_CALL, dest:TMP_72(iPOOLS), function:getBaseAmount, arguments:['outputToken_1']  
High Level Call: getbaseamount
checking tmp_73
Temp variable: tmp_73
Function name: swapWithSynthsWithLimit
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_73
WIP
hlc contract name: XXX func_name: getBaseAmount
TMP_73
Finding type for hlc_1...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_73
Num:
2
Den:
-1
Norm:
0
done.
POOLS_30(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_29', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_74(uint256) = HIGH_LEVEL_CALL, dest:TMP_71(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_73']  
High Level Call: calcswapslip
checking tmp_74
Temp variable: tmp_74
Function name: swapWithSynthsWithLimit
High Call: calcSwapSlip
func name:calcSwapSlip
other func name:calcSwapSlip
TMP_74
WIP
TMP_74
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_74
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_31(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_30', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_75(bool) = TMP_74 <= slipLimit_1
checking tmp_75
Temp variable: tmp_75
Function name: swapWithSynthsWithLimit
testing lt...
[i]Type for TMP_75
Num:
-1
Den:
-1
Norm:
0
done.
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)
checking tmp_76
Temp variable: tmp_76
Function name: swapWithSynthsWithLimit
[i]Type for TMP_76
Num:
Den:
Norm:
-100
done.
[x]node added back
clearning node...
clearing ir...?
TMP_77 = ! outSynth_1 
clearing ir...?
CONDITION TMP_77
typecheckig node...
TMP_77 = ! outSynth_1 
checking tmp_77
Temp variable: tmp_77
Function name: swapWithSynthsWithLimit
[i]Type for TMP_77
Num:
Den:
Norm:
-100
done.
CONDITION TMP_77
Condition...
Conidtion: 
TMP_77
TMP_77
clearning node...
clearing ir...?
TMP_80 = CONVERT POOLS_31 to iPOOLS
clearing ir...?
TMP_81(uint256) = HIGH_LEVEL_CALL, dest:TMP_80(iPOOLS), function:mintSynth, arguments:['_base_3', 'outputToken_1', '_member_1']  
has variable
[i] TMP_81 cleared
clearing ir...?
POOLS_32(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_31', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
outputAmount_3(uint256) := TMP_81(uint256)
has variable
[i] outputAmount cleared
typecheckig node...
TMP_80 = CONVERT POOLS_31 to iPOOLS
checking tmp_80
Temp variable: tmp_80
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_80
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_81(uint256) = HIGH_LEVEL_CALL, dest:TMP_80(iPOOLS), function:mintSynth, arguments:['_base_3', 'outputToken_1', '_member_1']  
High Level Call: mintsynth
checking tmp_81
Temp variable: tmp_81
Function name: swapWithSynthsWithLimit
High Call: mintSynth
func name:mintSynth
other func name:mintSynth
TMP_81
WIP
hlc contract name: XXX func_name: mintSynth
TMP_81
Finding type for hlc_3...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_81
Num:
1
Den:
-1
Norm:
0
done.
POOLS_32(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_31', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
outputAmount_3(uint256) := TMP_81(uint256)
checking outputamount
Local variable: outputamount
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for outputAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_78 = CONVERT POOLS_31 to iPOOLS
clearing ir...?
TMP_79(uint256) = HIGH_LEVEL_CALL, dest:TMP_78(iPOOLS), function:swap, arguments:['_base_3', 'outputToken_1', '_member_1', 'False']  
has variable
[i] TMP_79 cleared
clearing ir...?
POOLS_33(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_32', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
outputAmount_4(uint256) := TMP_79(uint256)
has variable
[i] outputAmount cleared
typecheckig node...
TMP_78 = CONVERT POOLS_31 to iPOOLS
checking tmp_78
Temp variable: tmp_78
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_78
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_79(uint256) = HIGH_LEVEL_CALL, dest:TMP_78(iPOOLS), function:swap, arguments:['_base_3', 'outputToken_1', '_member_1', 'False']  
High Level Call: swap
checking tmp_79
Temp variable: tmp_79
Function name: swapWithSynthsWithLimit
High Call: swap
func name:swap
other func name:swap
TMP_79
WIP
hlc contract name: XXX func_name: swap
COPIED
[i]Type for TMP_79
Num:
-2
Den:
-1
Norm:
0
done.
POOLS_33(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_32', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
outputAmount_4(uint256) := TMP_79(uint256)
checking outputamount
Local variable: outputamount
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for outputAmount
Num:
-2
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Reading Function: _handlePoolReward
Function _handlePoolReward not marked
Reading Function: addDepositData
Function name: addDepositData
Function Visibility: internal
member
Finding type for member...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
token
Finding type for token...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
amountBase
Finding type for amountBase...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
amountToken
Finding type for amountToken...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [2]
    den: [-1]
Param: 3
    num: [1]
    den: [-1]
clearning node...
clearing ir...?
member_1(address) := ϕ(['msg.sender'])
clearing ir...?
token_1(address) := ϕ(['token_1'])
clearing ir...?
amountBase_1(uint256) := ϕ(['_actualInputBase_1'])
clearing ir...?
amountToken_1(uint256) := ϕ(['_actualInputToken_1'])
clearing ir...?
mapMemberToken_depositBase_1(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_2', 'mapMemberToken_depositBase_9', 'mapMemberToken_depositBase_10', 'mapMemberToken_depositBase_0'])
clearing ir...?
mapMemberToken_depositToken_1(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositToken_2', 'mapMemberToken_depositToken_8', 'mapMemberToken_depositToken_0', 'mapMemberToken_depositToken_9'])
typecheckig node...
member_1(address) := ϕ(['msg.sender'])
checking member
Local variable: member
Function name: addDepositData
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for member
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
token_1(address) := ϕ(['token_1'])
checking token
Local variable: token
Function name: addDepositData
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for token
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
amountBase_1(uint256) := ϕ(['_actualInputBase_1'])
checking amountbase
Local variable: amountbase
Function name: addDepositData
Num:
2
Den:
-1
Norm:
-100
Phi
[i]Type for amountBase
Num:
2
Den:
-1
Norm:
-100
done.
amountToken_1(uint256) := ϕ(['_actualInputToken_1'])
checking amounttoken
Local variable: amounttoken
Function name: addDepositData
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for amountToken
Num:
1
Den:
-1
Norm:
-100
done.
mapMemberToken_depositBase_1(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_2', 'mapMemberToken_depositBase_9', 'mapMemberToken_depositBase_10', 'mapMemberToken_depositBase_0'])
checking mapmembertoken_depositbase
State IR  variable: mapmembertoken_depositbase
State variable: mapmembertoken_depositbase
Function name: addDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_depositBase
Num:
-1
Den:
-1
Norm:
-100
done.
mapMemberToken_depositToken_1(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositToken_2', 'mapMemberToken_depositToken_8', 'mapMemberToken_depositToken_0', 'mapMemberToken_depositToken_9'])
checking mapmembertoken_deposittoken
State IR  variable: mapmembertoken_deposittoken
State variable: mapmembertoken_deposittoken
Function name: addDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_depositToken
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
REF_25(mapping(address => uint256)) -> mapMemberToken_depositBase_1[member_1]
clearing ir...?
REF_26(uint256) -> REF_25[token_1]
clearing ir...?
mapMemberToken_depositBase_2(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_1'])
clearing ir...?
REF_26(-> mapMemberToken_depositBase_2) = REF_26 (c)+ amountBase_1
has variable
typecheckig node...
REF_25(mapping(address => uint256)) -> mapMemberToken_depositBase_1[member_1]
checking ref_25
Refernce variable: ref_25
Function name: addDepositData
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_26(uint256) -> REF_25[token_1]
checking ref_26
Refernce variable: ref_26
Function name: addDepositData
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapMemberToken_depositBase_2(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_1'])
checking mapmembertoken_depositbase
State IR  variable: mapmembertoken_depositbase
State variable: mapmembertoken_depositbase
Function name: addDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_depositBase
Num:
-1
Den:
-1
Norm:
-100
done.
REF_26(-> mapMemberToken_depositBase_2) = REF_26 (c)+ amountBase_1
checking ref_26
Refernce variable: ref_26
Function name: addDepositData
Num:
-1
Den:
-1
Norm:
0
Error with: REF_26 in function addDepositData
[i]Type for REF_26
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
REF_27(mapping(address => uint256)) -> mapMemberToken_depositToken_1[member_1]
clearing ir...?
REF_28(uint256) -> REF_27[token_1]
clearing ir...?
mapMemberToken_depositToken_2(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositToken_1'])
clearing ir...?
REF_28(-> mapMemberToken_depositToken_2) = REF_28 (c)+ amountToken_1
has variable
typecheckig node...
REF_27(mapping(address => uint256)) -> mapMemberToken_depositToken_1[member_1]
checking ref_27
Refernce variable: ref_27
Function name: addDepositData
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_28(uint256) -> REF_27[token_1]
checking ref_28
Refernce variable: ref_28
Function name: addDepositData
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapMemberToken_depositToken_2(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositToken_1'])
checking mapmembertoken_deposittoken
State IR  variable: mapmembertoken_deposittoken
State variable: mapmembertoken_deposittoken
Function name: addDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_depositToken
Num:
-1
Den:
-1
Norm:
-100
done.
REF_28(-> mapMemberToken_depositToken_2) = REF_28 (c)+ amountToken_1
checking ref_28
Refernce variable: ref_28
Function name: addDepositData
Num:
-1
Den:
-1
Norm:
0
Error with: REF_28 in function addDepositData
[i]Type for REF_28
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
REF_29(mapping(address => uint256)) -> mapMemberToken_lastDeposited_0[member_1]
clearing ir...?
REF_30(uint256) -> REF_29[token_1]
clearing ir...?
mapMemberToken_lastDeposited_1(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_lastDeposited_0'])
clearing ir...?
REF_30 (->mapMemberToken_lastDeposited_1) := block.timestamp(uint256)
has variable
typecheckig node...
REF_29(mapping(address => uint256)) -> mapMemberToken_lastDeposited_0[member_1]
checking ref_29
Refernce variable: ref_29
Function name: addDepositData
INDEX
Num:
Den:
Norm:
-100
mapMemberToken_lastDeposited
REF_30(uint256) -> REF_29[token_1]
checking ref_30
Refernce variable: ref_30
Function name: addDepositData
INDEX
Num:
1
Den:
-1
Norm:
0
mapMemberToken_lastDeposited_1(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_lastDeposited_0'])
checking mapmembertoken_lastdeposited
State IR  variable: mapmembertoken_lastdeposited
State variable: mapmembertoken_lastdeposited
Function name: addDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_lastDeposited
Num:
-1
Den:
-1
Norm:
-100
done.
REF_30 (->mapMemberToken_lastDeposited_1) := block.timestamp(uint256)
checking ref_30
Refernce variable: ref_30
Function name: addDepositData
asgn
Num:
1
Den:
-1
Norm:
-100
not variable
0
[i]Type for REF_30
Num:
1
Den:
-1
Norm:
0
done.
[x]node added back
Reading Function: removeDepositData
Function name: removeDepositData
Function Visibility: internal
member
Finding type for member...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
token
Finding type for token...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
basisPoints
Finding type for basisPoints...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
protection
Finding type for protection...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
Param: 3
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
member_1(address) := ϕ(['msg.sender'])
clearing ir...?
token_1(address) := ϕ(['token_1'])
clearing ir...?
basisPoints_1(uint256) := ϕ(['basisPoints_1'])
clearing ir...?
protection_1(uint256) := ϕ(['_protection_1'])
clearing ir...?
mapMemberToken_depositBase_3(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_2', 'mapMemberToken_depositBase_9', 'mapMemberToken_depositBase_10', 'mapMemberToken_depositBase_0'])
clearing ir...?
mapMemberToken_depositToken_3(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositToken_2', 'mapMemberToken_depositToken_8', 'mapMemberToken_depositToken_0', 'mapMemberToken_depositToken_9'])
typecheckig node...
member_1(address) := ϕ(['msg.sender'])
checking member
Local variable: member
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for member
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
token_1(address) := ϕ(['token_1'])
checking token
Local variable: token
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for token
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
basisPoints_1(uint256) := ϕ(['basisPoints_1'])
checking basispoints
Local variable: basispoints
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for basisPoints
Num:
-1
Den:
-1
Norm:
-100
done.
protection_1(uint256) := ϕ(['_protection_1'])
checking protection
Local variable: protection
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for protection
Num:
-1
Den:
-1
Norm:
-100
done.
mapMemberToken_depositBase_3(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_2', 'mapMemberToken_depositBase_9', 'mapMemberToken_depositBase_10', 'mapMemberToken_depositBase_0'])
checking mapmembertoken_depositbase
State IR  variable: mapmembertoken_depositbase
State variable: mapmembertoken_depositbase
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_depositBase
Num:
-1
Den:
-1
Norm:
-100
done.
mapMemberToken_depositToken_3(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositToken_2', 'mapMemberToken_depositToken_8', 'mapMemberToken_depositToken_0', 'mapMemberToken_depositToken_9'])
checking mapmembertoken_deposittoken
State IR  variable: mapmembertoken_deposittoken
State variable: mapmembertoken_deposittoken
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_depositToken
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
REF_31(mapping(address => uint256)) -> mapMemberToken_depositBase_3[member_1]
clearing ir...?
REF_32(uint256) -> REF_31[token_1]
clearing ir...?
mapMemberToken_depositBase_4(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_3'])
clearing ir...?
REF_32(-> mapMemberToken_depositBase_4) = REF_32 (c)+ protection_1
has variable
typecheckig node...
REF_31(mapping(address => uint256)) -> mapMemberToken_depositBase_3[member_1]
checking ref_31
Refernce variable: ref_31
Function name: removeDepositData
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_32(uint256) -> REF_31[token_1]
checking ref_32
Refernce variable: ref_32
Function name: removeDepositData
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapMemberToken_depositBase_4(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_3'])
checking mapmembertoken_depositbase
State IR  variable: mapmembertoken_depositbase
State variable: mapmembertoken_depositbase
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_depositBase
Num:
-1
Den:
-1
Norm:
-100
done.
REF_32(-> mapMemberToken_depositBase_4) = REF_32 (c)+ protection_1
checking ref_32
Refernce variable: ref_32
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
0
[i]Type for REF_32
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_96(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_97 = CONVERT TMP_96 to iUTILS
clearing ir...?
REF_34(mapping(address => uint256)) -> mapMemberToken_depositBase_5[member_1]
clearing ir...?
REF_35(uint256) -> REF_34[token_1]
clearing ir...?
TMP_98(uint256) = HIGH_LEVEL_CALL, dest:TMP_97(iUTILS), function:calcPart, arguments:['basisPoints_1', 'REF_35']  
has variable
[i] TMP_98 cleared
clearing ir...?
mapMemberToken_depositBase_6(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_2', 'mapMemberToken_depositBase_5', 'mapMemberToken_depositBase_9', 'mapMemberToken_depositBase_10'])
clearing ir...?
mapMemberToken_depositToken_5(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositToken_2', 'mapMemberToken_depositToken_4', 'mapMemberToken_depositToken_8', 'mapMemberToken_depositToken_9'])
clearing ir...?
_baseToRemove_1(uint256) := TMP_98(uint256)
has variable
[i] _baseToRemove cleared
typecheckig node...
TMP_96(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_96
Num:
Den:
Norm:
-100
done.
TMP_97 = CONVERT TMP_96 to iUTILS
checking tmp_97
Temp variable: tmp_97
Function name: removeDepositData
Num:
Den:
Norm:
-100
0
TMP_96
[i]Type for TMP_97
Num:
Den:
Norm:
0
done.
REF_34(mapping(address => uint256)) -> mapMemberToken_depositBase_5[member_1]
checking ref_34
Refernce variable: ref_34
Function name: removeDepositData
INDEX
Num:
Den:
Norm:
-100
mapMemberToken_depositBase
REF_35(uint256) -> REF_34[token_1]
checking ref_35
Refernce variable: ref_35
Function name: removeDepositData
INDEX
Num:
2
Den:
-1
Norm:
0
TMP_98(uint256) = HIGH_LEVEL_CALL, dest:TMP_97(iUTILS), function:calcPart, arguments:['basisPoints_1', 'REF_35']  
High Level Call: calcpart
checking tmp_98
Temp variable: tmp_98
Function name: removeDepositData
High Call: calcPart
func name:calcPart
other func name:calcPart
TMP_98
WIP
TMP_98
Finding type for hlc_0...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_98
Num:
2
Den:
-1
Norm:
0
done.
mapMemberToken_depositBase_6(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_2', 'mapMemberToken_depositBase_5', 'mapMemberToken_depositBase_9', 'mapMemberToken_depositBase_10'])
checking mapmembertoken_depositbase
State IR  variable: mapmembertoken_depositbase
State variable: mapmembertoken_depositbase
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_depositBase
Num:
-1
Den:
-1
Norm:
-100
done.
mapMemberToken_depositToken_5(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositToken_2', 'mapMemberToken_depositToken_4', 'mapMemberToken_depositToken_8', 'mapMemberToken_depositToken_9'])
checking mapmembertoken_deposittoken
State IR  variable: mapmembertoken_deposittoken
State variable: mapmembertoken_deposittoken
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_depositToken
Num:
-1
Den:
-1
Norm:
-100
done.
_baseToRemove_1(uint256) := TMP_98(uint256)
checking _basetoremove
Local variable: _basetoremove
Function name: removeDepositData
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _baseToRemove
Num:
2
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_99(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_100 = CONVERT TMP_99 to iUTILS
clearing ir...?
REF_37(mapping(address => uint256)) -> mapMemberToken_depositToken_6[member_1]
clearing ir...?
REF_38(uint256) -> REF_37[token_1]
clearing ir...?
TMP_101(uint256) = HIGH_LEVEL_CALL, dest:TMP_100(iUTILS), function:calcPart, arguments:['basisPoints_1', 'REF_38']  
has variable
[i] TMP_101 cleared
clearing ir...?
mapMemberToken_depositBase_8(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_2', 'mapMemberToken_depositBase_7', 'mapMemberToken_depositBase_9', 'mapMemberToken_depositBase_10'])
clearing ir...?
mapMemberToken_depositToken_7(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositToken_2', 'mapMemberToken_depositToken_6', 'mapMemberToken_depositToken_8', 'mapMemberToken_depositToken_9'])
clearing ir...?
_tokenToRemove_1(uint256) := TMP_101(uint256)
has variable
[i] _tokenToRemove cleared
typecheckig node...
TMP_99(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_99
Num:
Den:
Norm:
-100
done.
TMP_100 = CONVERT TMP_99 to iUTILS
checking tmp_100
Temp variable: tmp_100
Function name: removeDepositData
Num:
Den:
Norm:
-100
0
TMP_99
[i]Type for TMP_100
Num:
Den:
Norm:
0
done.
REF_37(mapping(address => uint256)) -> mapMemberToken_depositToken_6[member_1]
checking ref_37
Refernce variable: ref_37
Function name: removeDepositData
INDEX
Num:
Den:
Norm:
-100
mapMemberToken_depositToken
REF_38(uint256) -> REF_37[token_1]
checking ref_38
Refernce variable: ref_38
Function name: removeDepositData
INDEX
Num:
1
Den:
-1
Norm:
0
TMP_101(uint256) = HIGH_LEVEL_CALL, dest:TMP_100(iUTILS), function:calcPart, arguments:['basisPoints_1', 'REF_38']  
High Level Call: calcpart
checking tmp_101
Temp variable: tmp_101
Function name: removeDepositData
High Call: calcPart
func name:calcPart
other func name:calcPart
TMP_101
WIP
TMP_101
Finding type for hlc_1...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_101
Num:
1
Den:
-1
Norm:
0
done.
mapMemberToken_depositBase_8(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_2', 'mapMemberToken_depositBase_7', 'mapMemberToken_depositBase_9', 'mapMemberToken_depositBase_10'])
checking mapmembertoken_depositbase
State IR  variable: mapmembertoken_depositbase
State variable: mapmembertoken_depositbase
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_depositBase
Num:
-1
Den:
-1
Norm:
-100
done.
mapMemberToken_depositToken_7(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositToken_2', 'mapMemberToken_depositToken_6', 'mapMemberToken_depositToken_8', 'mapMemberToken_depositToken_9'])
checking mapmembertoken_deposittoken
State IR  variable: mapmembertoken_deposittoken
State variable: mapmembertoken_deposittoken
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_depositToken
Num:
-1
Den:
-1
Norm:
-100
done.
_tokenToRemove_1(uint256) := TMP_101(uint256)
checking _tokentoremove
Local variable: _tokentoremove
Function name: removeDepositData
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _tokenToRemove
Num:
1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
REF_39(mapping(address => uint256)) -> mapMemberToken_depositBase_8[member_1]
clearing ir...?
REF_40(uint256) -> REF_39[token_1]
clearing ir...?
mapMemberToken_depositBase_9(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_8'])
clearing ir...?
REF_40(-> mapMemberToken_depositBase_9) = REF_40 (c)- _baseToRemove_1
has variable
typecheckig node...
REF_39(mapping(address => uint256)) -> mapMemberToken_depositBase_8[member_1]
checking ref_39
Refernce variable: ref_39
Function name: removeDepositData
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_40(uint256) -> REF_39[token_1]
checking ref_40
Refernce variable: ref_40
Function name: removeDepositData
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapMemberToken_depositBase_9(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositBase_8'])
checking mapmembertoken_depositbase
State IR  variable: mapmembertoken_depositbase
State variable: mapmembertoken_depositbase
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_depositBase
Num:
-1
Den:
-1
Norm:
-100
done.
REF_40(-> mapMemberToken_depositBase_9) = REF_40 (c)- _baseToRemove_1
checking ref_40
Refernce variable: ref_40
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
0
Num:
2
Den:
-1
Norm:
0
Num:
-1
Den:
-1
Norm:
0
Error with: REF_40 in function removeDepositData
[i]Type for REF_40
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
REF_41(mapping(address => uint256)) -> mapMemberToken_depositToken_7[member_1]
clearing ir...?
REF_42(uint256) -> REF_41[token_1]
clearing ir...?
mapMemberToken_depositToken_8(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositToken_7'])
clearing ir...?
REF_42(-> mapMemberToken_depositToken_8) = REF_42 (c)- _tokenToRemove_1
has variable
typecheckig node...
REF_41(mapping(address => uint256)) -> mapMemberToken_depositToken_7[member_1]
checking ref_41
Refernce variable: ref_41
Function name: removeDepositData
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_42(uint256) -> REF_41[token_1]
checking ref_42
Refernce variable: ref_42
Function name: removeDepositData
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapMemberToken_depositToken_8(mapping(address => mapping(address => uint256))) := ϕ(['mapMemberToken_depositToken_7'])
checking mapmembertoken_deposittoken
State IR  variable: mapmembertoken_deposittoken
State variable: mapmembertoken_deposittoken
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMemberToken_depositToken
Num:
-1
Den:
-1
Norm:
-100
done.
REF_42(-> mapMemberToken_depositToken_8) = REF_42 (c)- _tokenToRemove_1
checking ref_42
Refernce variable: ref_42
Function name: removeDepositData
Num:
-1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
-1
Den:
-1
Norm:
0
Error with: REF_42 in function removeDepositData
[i]Type for REF_42
Num:
-1
Den:
-1
Norm:
0
done.
Reading Function: getILProtection
Function name: getILProtection
Function Visibility: public
member
Finding type for member...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
base
Finding type for base...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
token
Finding type for token...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
basisPoints
Finding type for basisPoints...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
Param: 3
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
member_1(address) := ϕ(['msg.sender'])
clearing ir...?
base_1(address) := ϕ(['base_1'])
clearing ir...?
token_1(address) := ϕ(['token_1'])
clearing ir...?
basisPoints_1(uint256) := ϕ(['basisPoints_1'])
clearing ir...?
timeForFullProtection_3(uint256) := ϕ(['timeForFullProtection_2', 'timeForFullProtection_0', 'timeForFullProtection_5', 'timeForFullProtection_1'])
clearing ir...?
VADER_8(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
typecheckig node...
member_1(address) := ϕ(['msg.sender'])
checking member
Local variable: member
Function name: getILProtection
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for member
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
base_1(address) := ϕ(['base_1'])
checking base
Local variable: base
Function name: getILProtection
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for base
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
token_1(address) := ϕ(['token_1'])
checking token
Local variable: token
Function name: getILProtection
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for token
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
basisPoints_1(uint256) := ϕ(['basisPoints_1'])
checking basispoints
Local variable: basispoints
Function name: getILProtection
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for basisPoints
Num:
-1
Den:
-1
Norm:
-100
done.
timeForFullProtection_3(uint256) := ϕ(['timeForFullProtection_2', 'timeForFullProtection_0', 'timeForFullProtection_5', 'timeForFullProtection_1'])
checking timeforfullprotection
State IR  variable: timeforfullprotection
State variable: timeforfullprotection
Function name: getILProtection
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for timeForFullProtection
Num:
-1
Den:
-1
Norm:
-100
done.
VADER_8(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: getILProtection
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_102(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
VADER_9(address) := ϕ(['VADER_38'])
clearing ir...?
TMP_103 = CONVERT TMP_102 to iUTILS
clearing ir...?
TMP_104(uint256) = HIGH_LEVEL_CALL, dest:TMP_103(iUTILS), function:getProtection, arguments:['member_1', 'token_1', 'basisPoints_1', 'timeForFullProtection_4']  
has variable
[i] TMP_104 cleared
clearing ir...?
timeForFullProtection_5(uint256) := ϕ(['timeForFullProtection_4', 'timeForFullProtection_2', 'timeForFullProtection_1', 'timeForFullProtection_5'])
clearing ir...?
VADER_10(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_9', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
protection_1(uint256) := TMP_104(uint256)
has variable
[i] protection cleared
typecheckig node...
TMP_102(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_102
Num:
Den:
Norm:
-100
done.
VADER_9(address) := ϕ(['VADER_38'])
checking vader
State IR  variable: vader
State variable: vader
Function name: getILProtection
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_103 = CONVERT TMP_102 to iUTILS
checking tmp_103
Temp variable: tmp_103
Function name: getILProtection
Num:
Den:
Norm:
-100
0
TMP_102
[i]Type for TMP_103
Num:
Den:
Norm:
0
done.
TMP_104(uint256) = HIGH_LEVEL_CALL, dest:TMP_103(iUTILS), function:getProtection, arguments:['member_1', 'token_1', 'basisPoints_1', 'timeForFullProtection_4']  
High Level Call: getprotection
checking tmp_104
Temp variable: tmp_104
Function name: getILProtection
High Call: getProtection
func name:getProtection
other func name:getProtection
TMP_104
WIP
TMP_104
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_104
Num:
-1
Den:
-1
Norm:
0
done.
timeForFullProtection_5(uint256) := ϕ(['timeForFullProtection_4', 'timeForFullProtection_2', 'timeForFullProtection_1', 'timeForFullProtection_5'])
checking timeforfullprotection
State IR  variable: timeforfullprotection
State variable: timeforfullprotection
Function name: getILProtection
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for timeForFullProtection
Num:
-1
Den:
-1
Norm:
-100
done.
VADER_10(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_9', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: getILProtection
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
protection_1(uint256) := TMP_104(uint256)
checking protection
Local variable: protection
Function name: getILProtection
asgn
Num:
Den:
Norm:
-100
0
[i]Type for protection
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_105(bool) = base_1 == VADER_10
has variable
[i] TMP_105 cleared
clearing ir...?
CONDITION TMP_105
typecheckig node...
TMP_105(bool) = base_1 == VADER_10
checking tmp_105
Temp variable: tmp_105
Function name: getILProtection
[i]Type for TMP_105
Num:
Den:
Norm:
-100
done.
CONDITION TMP_105
Condition...
Conidtion: 
TMP_105
TMP_105
clearning node...
clearing ir...?
TMP_106(uint256) = INTERNAL_CALL, Router.reserveVADER()()
clearing ir...?
TMP_107(bool) = protection_1 >= TMP_106
has variable
[i] TMP_107 cleared
clearing ir...?
CONDITION TMP_107
typecheckig node...
TMP_106(uint256) = INTERNAL_CALL, Router.reserveVADER()()
Internal call...
reserveVADER
Function: reserveVADER
ic
Internal cal param_cache
added
xyz
Function name: reserveVADER
Function Visibility: public
clearning node...
clearing ir...?
VADER_33(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
typecheckig node...
VADER_33(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: reserveVADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_301 = CONVERT VADER_33 to iERC20
clearing ir...?
TMP_302 = CONVERT this to address
clearing ir...?
TMP_303(uint256) = HIGH_LEVEL_CALL, dest:TMP_301(iERC20), function:balanceOf, arguments:['TMP_302']  
has variable
[i] TMP_303 cleared
clearing ir...?
VADER_34(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_33', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
RETURN TMP_303
typecheckig node...
TMP_301 = CONVERT VADER_33 to iERC20
checking tmp_301
Temp variable: tmp_301
Function name: reserveVADER
Num:
Den:
Norm:
-100
0
VADER
[i]Type for TMP_301
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_302 = CONVERT this to address
checking tmp_302
Temp variable: tmp_302
Function name: reserveVADER
Num:
Den:
Norm:
-100
not variable
0
this
[i]Type for TMP_302
Num:
Den:
Norm:
0
done.
TMP_303(uint256) = HIGH_LEVEL_CALL, dest:TMP_301(iERC20), function:balanceOf, arguments:['TMP_302']  
High Level Call: balanceof
checking tmp_303
Temp variable: tmp_303
Function name: reserveVADER
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_303
WIP
hlc contract name: XXX func_name: balanceOf
TMP_303
Finding type for hlc_0...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_303
Num:
1
Den:
-1
Norm:
0
done.
VADER_34(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_33', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: reserveVADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
RETURN TMP_303
Return...
reserveVADER
TMP_303
[x]node added back
Checking return valuereserveVADER
TMP_303
&&
TMP_303
Num:
Den:
Norm:
-100
[i]Type for TMP_106
Num:
1
Den:
-1
Norm:
-100
done.
TMP_107(bool) = protection_1 >= TMP_106
checking tmp_107
Temp variable: tmp_107
Function name: getILProtection
testing gt...
[i]Type for TMP_107
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_107
Condition...
Conidtion: 
TMP_107
TMP_107
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_108(uint256) = INTERNAL_CALL, Router.reserveVADER()()
clearing ir...?
protection_2(uint256) := TMP_108(uint256)
has variable
[i] protection cleared
typecheckig node...
TMP_108(uint256) = INTERNAL_CALL, Router.reserveVADER()()
Internal call...
reserveVADER
Function: reserveVADER
ic
Internal cal param_cache
[i]Type for TMP_108
Num:
Den:
Norm:
-100
done.
protection_2(uint256) := TMP_108(uint256)
checking protection
Local variable: protection
Function name: getILProtection
asgn
Num:
Den:
Norm:
-100
0
[i]Type for protection
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_109(uint256) = INTERNAL_CALL, Router.reserveUSDV()()
clearing ir...?
TMP_110(bool) = protection_1 >= TMP_109
has variable
[i] TMP_110 cleared
clearing ir...?
CONDITION TMP_110
typecheckig node...
TMP_109(uint256) = INTERNAL_CALL, Router.reserveUSDV()()
Internal call...
reserveUSDV
Function: reserveUSDV
ic
Internal cal param_cache
added
xyz
Function name: reserveUSDV
Function Visibility: public
clearning node...
clearing ir...?
USDV_28(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
typecheckig node...
USDV_28(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: reserveUSDV
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_304 = CONVERT USDV_28 to iERC20
clearing ir...?
TMP_305 = CONVERT this to address
clearing ir...?
TMP_306(uint256) = HIGH_LEVEL_CALL, dest:TMP_304(iERC20), function:balanceOf, arguments:['TMP_305']  
has variable
[i] TMP_306 cleared
clearing ir...?
USDV_29(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_28', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
clearing ir...?
RETURN TMP_306
typecheckig node...
TMP_304 = CONVERT USDV_28 to iERC20
checking tmp_304
Temp variable: tmp_304
Function name: reserveUSDV
Num:
Den:
Norm:
-100
0
USDV
[i]Type for TMP_304
Num:
1
Den:
-1
Norm:
0
done.
TMP_305 = CONVERT this to address
checking tmp_305
Temp variable: tmp_305
Function name: reserveUSDV
Num:
Den:
Norm:
-100
not variable
0
this
[i]Type for TMP_305
Num:
Den:
Norm:
0
done.
TMP_306(uint256) = HIGH_LEVEL_CALL, dest:TMP_304(iERC20), function:balanceOf, arguments:['TMP_305']  
High Level Call: balanceof
checking tmp_306
Temp variable: tmp_306
Function name: reserveUSDV
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_306
WIP
TMP_306
Finding type for hlc_0...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_306
Num:
2
Den:
-1
Norm:
0
done.
USDV_29(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_28', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: reserveUSDV
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
RETURN TMP_306
Return...
reserveUSDV
TMP_306
[x]node added back
Checking return valuereserveUSDV
TMP_306
&&
TMP_306
Num:
Den:
Norm:
-100
[i]Type for TMP_109
Num:
2
Den:
-1
Norm:
-100
done.
TMP_110(bool) = protection_1 >= TMP_109
checking tmp_110
Temp variable: tmp_110
Function name: getILProtection
testing gt...
[i]Type for TMP_110
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_110
Condition...
Conidtion: 
TMP_110
TMP_110
clearning node...
clearing ir...?
TMP_111(uint256) = INTERNAL_CALL, Router.reserveUSDV()()
clearing ir...?
protection_3(uint256) := TMP_111(uint256)
has variable
[i] protection cleared
typecheckig node...
TMP_111(uint256) = INTERNAL_CALL, Router.reserveUSDV()()
Internal call...
reserveUSDV
Function: reserveUSDV
ic
Internal cal param_cache
[i]Type for TMP_111
Num:
Den:
Norm:
-100
done.
protection_3(uint256) := TMP_111(uint256)
checking protection
Local variable: protection
Function name: getILProtection
asgn
Num:
Den:
Norm:
-100
0
[i]Type for protection
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
typecheckig node...
Reading Function: curatePool
Function name: curatePool
Function Visibility: external
token
Finding type for token...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
curatedPoolLimit_3(uint256) := ϕ(['curatedPoolLimit_0', 'curatedPoolLimit_1', 'curatedPoolLimit_6', 'curatedPoolLimit_2'])
clearing ir...?
curatedPoolCount_1(uint256) := ϕ(['curatedPoolCount_5', 'curatedPoolCount_0', 'curatedPoolCount_4'])
clearing ir...?
POOLS_45(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
curatedPoolLimit_3(uint256) := ϕ(['curatedPoolLimit_0', 'curatedPoolLimit_1', 'curatedPoolLimit_6', 'curatedPoolLimit_2'])
checking curatedpoollimit
State IR  variable: curatedpoollimit
State variable: curatedpoollimit
Function name: curatePool
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for curatedPoolLimit
Num:
-1
Den:
-1
Norm:
-100
done.
curatedPoolCount_1(uint256) := ϕ(['curatedPoolCount_5', 'curatedPoolCount_0', 'curatedPoolCount_4'])
checking curatedpoolcount
State IR  variable: curatedpoolcount
State variable: curatedpoolcount
Function name: curatePool
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for curatedPoolCount
Num:
-1
Den:
-1
Norm:
-100
done.
POOLS_45(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: curatePool
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_112 = CONVERT POOLS_45 to iPOOLS
clearing ir...?
TMP_113(bool) = HIGH_LEVEL_CALL, dest:TMP_112(iPOOLS), function:isAsset, arguments:['token_1']  
has variable
[i] TMP_113 cleared
clearing ir...?
curatedPoolLimit_4(uint256) := ϕ(['curatedPoolLimit_1', 'curatedPoolLimit_3', 'curatedPoolLimit_6', 'curatedPoolLimit_2'])
clearing ir...?
curatedPoolCount_2(uint256) := ϕ(['curatedPoolCount_5', 'curatedPoolCount_1', 'curatedPoolCount_4'])
clearing ir...?
POOLS_46(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_45', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_114 = CONVERT POOLS_46 to iPOOLS
clearing ir...?
TMP_115(bool) = HIGH_LEVEL_CALL, dest:TMP_114(iPOOLS), function:isAnchor, arguments:['token_1']  
has variable
[i] TMP_115 cleared
clearing ir...?
curatedPoolLimit_5(uint256) := ϕ(['curatedPoolLimit_1', 'curatedPoolLimit_4', 'curatedPoolLimit_6', 'curatedPoolLimit_2'])
clearing ir...?
curatedPoolCount_3(uint256) := ϕ(['curatedPoolCount_5', 'curatedPoolCount_2', 'curatedPoolCount_4'])
clearing ir...?
POOLS_47(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_46', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_116(bool) = TMP_113 || TMP_115
has variable
[i] TMP_116 cleared
clearing ir...?
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)
typecheckig node...
TMP_112 = CONVERT POOLS_45 to iPOOLS
checking tmp_112
Temp variable: tmp_112
Function name: curatePool
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_112
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_113(bool) = HIGH_LEVEL_CALL, dest:TMP_112(iPOOLS), function:isAsset, arguments:['token_1']  
High Level Call: isasset
checking tmp_113
Temp variable: tmp_113
Function name: curatePool
High Call: isAsset
func name:isAsset
other func name:isAsset
TMP_113
WIP
hlc contract name: XXX func_name: isAsset
COPIED
[i]Type for TMP_113
Num:
-1
Den:
-1
Norm:
0
done.
curatedPoolLimit_4(uint256) := ϕ(['curatedPoolLimit_1', 'curatedPoolLimit_3', 'curatedPoolLimit_6', 'curatedPoolLimit_2'])
checking curatedpoollimit
State IR  variable: curatedpoollimit
State variable: curatedpoollimit
Function name: curatePool
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for curatedPoolLimit
Num:
-1
Den:
-1
Norm:
-100
done.
curatedPoolCount_2(uint256) := ϕ(['curatedPoolCount_5', 'curatedPoolCount_1', 'curatedPoolCount_4'])
checking curatedpoolcount
State IR  variable: curatedpoolcount
State variable: curatedpoolcount
Function name: curatePool
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for curatedPoolCount
Num:
-1
Den:
-1
Norm:
-100
done.
POOLS_46(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_45', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: curatePool
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_114 = CONVERT POOLS_46 to iPOOLS
checking tmp_114
Temp variable: tmp_114
Function name: curatePool
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_114
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_115(bool) = HIGH_LEVEL_CALL, dest:TMP_114(iPOOLS), function:isAnchor, arguments:['token_1']  
High Level Call: isanchor
checking tmp_115
Temp variable: tmp_115
Function name: curatePool
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_115
WIP
hlc contract name: XXX func_name: isAnchor
TMP_115
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_115
Num:
-1
Den:
-1
Norm:
0
done.
curatedPoolLimit_5(uint256) := ϕ(['curatedPoolLimit_1', 'curatedPoolLimit_4', 'curatedPoolLimit_6', 'curatedPoolLimit_2'])
checking curatedpoollimit
State IR  variable: curatedpoollimit
State variable: curatedpoollimit
Function name: curatePool
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for curatedPoolLimit
Num:
-1
Den:
-1
Norm:
-100
done.
curatedPoolCount_3(uint256) := ϕ(['curatedPoolCount_5', 'curatedPoolCount_2', 'curatedPoolCount_4'])
checking curatedpoolcount
State IR  variable: curatedpoolcount
State variable: curatedpoolcount
Function name: curatePool
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for curatedPoolCount
Num:
-1
Den:
-1
Norm:
-100
done.
POOLS_47(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_46', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: curatePool
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_116(bool) = TMP_113 || TMP_115
checking tmp_116
Temp variable: tmp_116
Function name: curatePool
[i]Type for TMP_116
Num:
Den:
Norm:
-100
done.
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)
checking tmp_117
Temp variable: tmp_117
Function name: curatePool
[i]Type for TMP_117
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_118(bool) = INTERNAL_CALL, Router.isCurated(address)(token_1)
clearing ir...?
TMP_119 = ! TMP_118 
clearing ir...?
CONDITION TMP_119
typecheckig node...
TMP_118(bool) = INTERNAL_CALL, Router.isCurated(address)(token_1)
Internal call...
isCurated
token
Function: isCurated
ic
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
added
xyz
Function name: isCurated
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['token_1'])
clearing ir...?
_isCurated_7(mapping(address => bool)) := ϕ(['_isCurated_6', '_isCurated_7', '_isCurated_4', '_isCurated_3', '_isCurated_0', '_isCurated_1'])
typecheckig node...
token_1(address) := ϕ(['token_1'])
checking token
Local variable: token
Function name: isCurated
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for token
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_isCurated_7(mapping(address => bool)) := ϕ(['_isCurated_6', '_isCurated_7', '_isCurated_4', '_isCurated_3', '_isCurated_0', '_isCurated_1'])
checking _iscurated
State IR  variable: _iscurated
State variable: _iscurated
Function name: isCurated
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _isCurated
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
REF_161(bool) -> _isCurated_7[token_1]
clearing ir...?
CONDITION REF_161
typecheckig node...
REF_161(bool) -> _isCurated_7[token_1]
checking ref_161
Refernce variable: ref_161
Function name: isCurated
INDEX
Num:
-1
Den:
-1
Norm:
-100
CONDITION REF_161
Condition...
Conidtion: 
REF_161
REF_161
clearning node...
clearing ir...?
curated_1(bool) := True(bool)
has variable
[i] curated cleared
typecheckig node...
curated_1(bool) := True(bool)
checking curated
Local variable: curated
Function name: isCurated
asgn
Constatn varible: true
Num:
Den:
Norm:
-100
Constatn varible: true
val: True
0
Constatn varible: true
val: True
[i]Type for curated
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Checking return valueisCurated
curated
&&
curated
Num:
Den:
Norm:
-100
[i]Type for TMP_118
Num:
Den:
Norm:
-100
done.
TMP_119 = ! TMP_118 
checking tmp_119
Temp variable: tmp_119
Function name: curatePool
[i]Type for TMP_119
Num:
Den:
Norm:
-100
done.
CONDITION TMP_119
Condition...
Conidtion: 
TMP_119
TMP_119
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_120(bool) = curatedPoolCount_4 < curatedPoolLimit_6
has variable
[i] TMP_120 cleared
clearing ir...?
CONDITION TMP_120
typecheckig node...
TMP_120(bool) = curatedPoolCount_4 < curatedPoolLimit_6
checking tmp_120
Temp variable: tmp_120
Function name: curatePool
testing lt...
Num:
-1
Den:
-1
Norm:
-100
Num:
-1
Den:
-1
Norm:
-100
[i]Type for TMP_120
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_120
Condition...
Conidtion: 
TMP_120
TMP_120
clearning node...
clearing ir...?
Emit Curated(msg.sender,token_1)
typecheckig node...
Emit Curated(msg.sender,token_1)
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_46(bool) -> _isCurated_0[token_1]
clearing ir...?
_isCurated_1(mapping(address => bool)) := ϕ(['_isCurated_0'])
clearing ir...?
REF_46 (->_isCurated_1) := True(bool)
has variable
typecheckig node...
REF_46(bool) -> _isCurated_0[token_1]
checking ref_46
Refernce variable: ref_46
Function name: curatePool
INDEX
Num:
Den:
Norm:
-100
_isCurated_1(mapping(address => bool)) := ϕ(['_isCurated_0'])
checking _iscurated
State IR  variable: _iscurated
State variable: _iscurated
Function name: curatePool
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _isCurated
Num:
-1
Den:
-1
Norm:
-100
done.
REF_46 (->_isCurated_1) := True(bool)
checking ref_46
Refernce variable: ref_46
Function name: curatePool
asgn
Constatn varible: true
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: true
val: True
0
Constatn varible: true
val: True
[i]Type for REF_46
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
curatedPoolCount_5(uint256) = curatedPoolCount_4 (c)+ 1
has variable
typecheckig node...
curatedPoolCount_5(uint256) = curatedPoolCount_4 (c)+ 1
checking curatedpoolcount
State IR  variable: curatedpoolcount
State variable: curatedpoolcount
Function name: curatePool
Constatn varible: 1
Constatn varible: 1
val: 1
Constatn varible: 1
Num:
Den:
Norm:
0
[i]Type for curatedPoolCount
Num:
-1
Den:
-1
Norm:
0
done.
Reading Function: replacePool
Function name: replacePool
Function Visibility: external
oldToken
Finding type for oldToken...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
newToken
Finding type for newToken...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
POOLS_48(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
POOLS_48(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: replacePool
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_122 = CONVERT POOLS_48 to iPOOLS
clearing ir...?
TMP_123(bool) = HIGH_LEVEL_CALL, dest:TMP_122(iPOOLS), function:isAsset, arguments:['newToken_1']  
has variable
[i] TMP_123 cleared
clearing ir...?
POOLS_49(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_48', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_124(None) = SOLIDITY_CALL require(bool)(TMP_123)
typecheckig node...
TMP_122 = CONVERT POOLS_48 to iPOOLS
checking tmp_122
Temp variable: tmp_122
Function name: replacePool
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_122
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_123(bool) = HIGH_LEVEL_CALL, dest:TMP_122(iPOOLS), function:isAsset, arguments:['newToken_1']  
High Level Call: isasset
checking tmp_123
Temp variable: tmp_123
Function name: replacePool
High Call: isAsset
func name:isAsset
other func name:isAsset
TMP_123
WIP
hlc contract name: XXX func_name: isAsset
COPIED
[i]Type for TMP_123
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_49(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_48', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: replacePool
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_124(None) = SOLIDITY_CALL require(bool)(TMP_123)
checking tmp_124
Temp variable: tmp_124
Function name: replacePool
[i]Type for TMP_124
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_125 = CONVERT POOLS_49 to iPOOLS
clearing ir...?
TMP_126(uint256) = HIGH_LEVEL_CALL, dest:TMP_125(iPOOLS), function:getBaseAmount, arguments:['newToken_1']  
has variable
[i] TMP_126 cleared
clearing ir...?
POOLS_50(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_49', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_127 = CONVERT POOLS_50 to iPOOLS
clearing ir...?
TMP_128(uint256) = HIGH_LEVEL_CALL, dest:TMP_127(iPOOLS), function:getBaseAmount, arguments:['oldToken_1']  
has variable
[i] TMP_128 cleared
clearing ir...?
POOLS_51(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_50', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_129(bool) = TMP_126 > TMP_128
has variable
[i] TMP_129 cleared
clearing ir...?
CONDITION TMP_129
typecheckig node...
TMP_125 = CONVERT POOLS_49 to iPOOLS
checking tmp_125
Temp variable: tmp_125
Function name: replacePool
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_125
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_126(uint256) = HIGH_LEVEL_CALL, dest:TMP_125(iPOOLS), function:getBaseAmount, arguments:['newToken_1']  
High Level Call: getbaseamount
checking tmp_126
Temp variable: tmp_126
Function name: replacePool
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_126
WIP
hlc contract name: XXX func_name: getBaseAmount
TMP_126
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_126
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_50(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_49', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: replacePool
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_127 = CONVERT POOLS_50 to iPOOLS
checking tmp_127
Temp variable: tmp_127
Function name: replacePool
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_127
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_128(uint256) = HIGH_LEVEL_CALL, dest:TMP_127(iPOOLS), function:getBaseAmount, arguments:['oldToken_1']  
High Level Call: getbaseamount
checking tmp_128
Temp variable: tmp_128
Function name: replacePool
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_128
WIP
hlc contract name: XXX func_name: getBaseAmount
TMP_128
Finding type for hlc_1...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_128
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_51(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_50', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: replacePool
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_129(bool) = TMP_126 > TMP_128
checking tmp_129
Temp variable: tmp_129
Function name: replacePool
testing gt...
Num:
-1
Den:
-1
Norm:
0
True
[i]Type for TMP_129
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_129
Condition...
Conidtion: 
TMP_129
TMP_129
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_50(bool) -> _isCurated_1[oldToken_1]
clearing ir...?
_isCurated_2(mapping(address => bool)) := ϕ(['_isCurated_1'])
clearing ir...?
REF_50 (->_isCurated_2) := False(bool)
has variable
typecheckig node...
REF_50(bool) -> _isCurated_1[oldToken_1]
checking ref_50
Refernce variable: ref_50
Function name: replacePool
INDEX
Num:
-1
Den:
-1
Norm:
-100
_isCurated_2(mapping(address => bool)) := ϕ(['_isCurated_1'])
checking _iscurated
State IR  variable: _iscurated
State variable: _iscurated
Function name: replacePool
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _isCurated
Num:
-1
Den:
-1
Norm:
-100
done.
REF_50 (->_isCurated_2) := False(bool)
checking ref_50
Refernce variable: ref_50
Function name: replacePool
asgn
Constatn varible: false
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: false
val: False
0
Constatn varible: false
val: False
[i]Type for REF_50
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
REF_51(bool) -> _isCurated_2[newToken_1]
clearing ir...?
_isCurated_3(mapping(address => bool)) := ϕ(['_isCurated_2'])
clearing ir...?
REF_51 (->_isCurated_3) := True(bool)
has variable
typecheckig node...
REF_51(bool) -> _isCurated_2[newToken_1]
checking ref_51
Refernce variable: ref_51
Function name: replacePool
INDEX
Num:
-1
Den:
-1
Norm:
-100
_isCurated_3(mapping(address => bool)) := ϕ(['_isCurated_2'])
checking _iscurated
State IR  variable: _iscurated
State variable: _iscurated
Function name: replacePool
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _isCurated
Num:
-1
Den:
-1
Norm:
-100
done.
REF_51 (->_isCurated_3) := True(bool)
checking ref_51
Refernce variable: ref_51
Function name: replacePool
asgn
Constatn varible: true
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: true
val: True
0
Constatn varible: true
val: True
[i]Type for REF_51
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
Emit Curated(msg.sender,newToken_1)
typecheckig node...
Emit Curated(msg.sender,newToken_1)
Reading Function: listAnchor
Function name: listAnchor
Function Visibility: external
token
Finding type for token...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
one_1(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
clearing ir...?
POOLS_52(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
anchorLimit_3(uint256) := ϕ(['anchorLimit_0', 'anchorLimit_2', 'anchorLimit_1'])
clearing ir...?
arrayAnchors_1(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_0', 'arrayAnchors_14'])
clearing ir...?
arrayPrices_1(uint256[]) := ϕ(['arrayPrices_0', 'arrayPrices_7', 'arrayPrices_10', 'arrayPrices_6', 'arrayPrices_8'])
typecheckig node...
one_1(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
POOLS_52(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
anchorLimit_3(uint256) := ϕ(['anchorLimit_0', 'anchorLimit_2', 'anchorLimit_1'])
checking anchorlimit
State IR  variable: anchorlimit
State variable: anchorlimit
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for anchorLimit
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_1(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_0', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
arrayPrices_1(uint256[]) := ϕ(['arrayPrices_0', 'arrayPrices_7', 'arrayPrices_10', 'arrayPrices_6', 'arrayPrices_8'])
checking arrayprices
State IR  variable: arrayprices
State variable: arrayprices
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayPrices
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
REF_52 -> LENGTH arrayAnchors_1
clearing ir...?
TMP_131(bool) = REF_52 < anchorLimit_3
has variable
[i] TMP_131 cleared
clearing ir...?
TMP_132(None) = SOLIDITY_CALL require(bool)(TMP_131)
typecheckig node...
REF_52 -> LENGTH arrayAnchors_1
checking ref_52
Refernce variable: ref_52
Function name: listAnchor
[i]Type for REF_52
Num:
Den:
Norm:
-100
done.
TMP_131(bool) = REF_52 < anchorLimit_3
checking tmp_131
Temp variable: tmp_131
Function name: listAnchor
testing lt...
Num:
Den:
Norm:
0
[i]Type for TMP_131
Num:
-1
Den:
-1
Norm:
0
done.
TMP_132(None) = SOLIDITY_CALL require(bool)(TMP_131)
checking tmp_132
Temp variable: tmp_132
Function name: listAnchor
[i]Type for TMP_132
Num:
Den:
Norm:
-100
done.
[x]node added back
clearning node...
clearing ir...?
TMP_133 = CONVERT POOLS_52 to iPOOLS
clearing ir...?
TMP_134(bool) = HIGH_LEVEL_CALL, dest:TMP_133(iPOOLS), function:isAnchor, arguments:['token_1']  
has variable
[i] TMP_134 cleared
clearing ir...?
one_2(uint256) := ϕ(['one_4', 'one_1', 'one_7', 'one_12', 'one_10'])
clearing ir...?
POOLS_53(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_52', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
arrayAnchors_2(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_1', 'arrayAnchors_14'])
clearing ir...?
arrayPrices_2(uint256[]) := ϕ(['arrayPrices_7', 'arrayPrices_10', 'arrayPrices_1', 'arrayPrices_6', 'arrayPrices_8'])
clearing ir...?
TMP_135(None) = SOLIDITY_CALL require(bool)(TMP_134)
typecheckig node...
TMP_133 = CONVERT POOLS_52 to iPOOLS
checking tmp_133
Temp variable: tmp_133
Function name: listAnchor
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_133
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_134(bool) = HIGH_LEVEL_CALL, dest:TMP_133(iPOOLS), function:isAnchor, arguments:['token_1']  
High Level Call: isanchor
checking tmp_134
Temp variable: tmp_134
Function name: listAnchor
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_134
WIP
hlc contract name: XXX func_name: isAnchor
TMP_134
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_134
Num:
-1
Den:
-1
Norm:
0
done.
one_2(uint256) := ϕ(['one_4', 'one_1', 'one_7', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
POOLS_53(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_52', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
arrayAnchors_2(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_1', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
arrayPrices_2(uint256[]) := ϕ(['arrayPrices_7', 'arrayPrices_10', 'arrayPrices_1', 'arrayPrices_6', 'arrayPrices_8'])
checking arrayprices
State IR  variable: arrayprices
State variable: arrayprices
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayPrices
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_135(None) = SOLIDITY_CALL require(bool)(TMP_134)
checking tmp_135
Temp variable: tmp_135
Function name: listAnchor
[i]Type for TMP_135
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
REF_55 -> LENGTH arrayAnchors_2
clearing ir...?
TMP_137(uint256) := REF_55(uint256)
has variable
[i] TMP_137 cleared
clearing ir...?
TMP_138(uint256) = TMP_137 (c)+ 1
has variable
[i] TMP_138 cleared
clearing ir...?
arrayAnchors_3(address[]) := ϕ(['arrayAnchors_2'])
clearing ir...?
REF_55 (->arrayAnchors_3) := TMP_138(uint256)
has variable
clearing ir...?
REF_56(address) -> arrayAnchors_3[TMP_137]
clearing ir...?
arrayAnchors_4(address[]) := ϕ(['arrayAnchors_3'])
clearing ir...?
REF_56 (->arrayAnchors_4) := token_1(address)
has variable
typecheckig node...
REF_55 -> LENGTH arrayAnchors_2
checking ref_55
Refernce variable: ref_55
Function name: listAnchor
[i]Type for REF_55
Num:
Den:
Norm:
-100
done.
TMP_137(uint256) := REF_55(uint256)
checking tmp_137
Temp variable: tmp_137
Function name: listAnchor
asgn
Num:
Den:
Norm:
-100
0
[i]Type for TMP_137
Num:
Den:
Norm:
0
done.
TMP_138(uint256) = TMP_137 (c)+ 1
checking tmp_138
Temp variable: tmp_138
Function name: listAnchor
Constatn varible: 1
Constatn varible: 1
val: 1
Constatn varible: 1
Num:
Den:
Norm:
0
[i]Type for TMP_138
Num:
-1
Den:
-1
Norm:
0
done.
arrayAnchors_3(address[]) := ϕ(['arrayAnchors_2'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
REF_55 (->arrayAnchors_3) := TMP_138(uint256)
checking ref_55
Refernce variable: ref_55
Function name: listAnchor
asgn
Num:
Den:
Norm:
-100
0
[i]Type for REF_55
Num:
-1
Den:
-1
Norm:
0
done.
REF_56(address) -> arrayAnchors_3[TMP_137]
checking ref_56
Refernce variable: ref_56
Function name: listAnchor
INDEX
Num:
-1
Den:
-1
Norm:
-100
arrayAnchors_4(address[]) := ϕ(['arrayAnchors_3'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
REF_56 (->arrayAnchors_4) := token_1(address)
checking ref_56
Refernce variable: ref_56
Function name: listAnchor
asgn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
-1
Den:
-1
Norm:
-100
0
[i]Type for REF_56
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_139(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_140 = CONVERT TMP_139 to iUTILS
clearing ir...?
TMP_141(uint256) = HIGH_LEVEL_CALL, dest:TMP_140(iUTILS), function:calcValueInBase, arguments:['token_1', 'one_3']  
has variable
[i] TMP_141 cleared
clearing ir...?
one_4(uint256) := ϕ(['one_4', 'one_7', 'one_12', 'one_3', 'one_10'])
clearing ir...?
arrayPrices_4(uint256[]) := ϕ(['arrayPrices_7', 'arrayPrices_10', 'arrayPrices_3', 'arrayPrices_6', 'arrayPrices_8'])
clearing ir...?
REF_59 -> LENGTH arrayPrices_4
clearing ir...?
TMP_143(uint256) := REF_59(uint256)
has variable
[i] TMP_143 cleared
clearing ir...?
TMP_144(uint256) = TMP_143 (c)+ 1
has variable
[i] TMP_144 cleared
clearing ir...?
arrayPrices_5(uint256[]) := ϕ(['arrayPrices_4'])
clearing ir...?
REF_59 (->arrayPrices_5) := TMP_144(uint256)
has variable
clearing ir...?
REF_60(uint256) -> arrayPrices_5[TMP_143]
clearing ir...?
arrayPrices_6(uint256[]) := ϕ(['arrayPrices_5'])
clearing ir...?
REF_60 (->arrayPrices_6) := TMP_141(uint256)
has variable
typecheckig node...
TMP_139(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_139
Num:
Den:
Norm:
-100
done.
TMP_140 = CONVERT TMP_139 to iUTILS
checking tmp_140
Temp variable: tmp_140
Function name: listAnchor
Num:
Den:
Norm:
-100
0
TMP_139
[i]Type for TMP_140
Num:
Den:
Norm:
0
done.
TMP_141(uint256) = HIGH_LEVEL_CALL, dest:TMP_140(iUTILS), function:calcValueInBase, arguments:['token_1', 'one_3']  
High Level Call: calcvalueinbase
checking tmp_141
Temp variable: tmp_141
Function name: listAnchor
High Call: calcValueInBase
func name:calcValueInBase
other func name:calcValueInBase
TMP_141
WIP
TMP_141
Finding type for hlc_1...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_141
Num:
2
Den:
-1
Norm:
0
done.
one_4(uint256) := ϕ(['one_4', 'one_7', 'one_12', 'one_3', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
arrayPrices_4(uint256[]) := ϕ(['arrayPrices_7', 'arrayPrices_10', 'arrayPrices_3', 'arrayPrices_6', 'arrayPrices_8'])
checking arrayprices
State IR  variable: arrayprices
State variable: arrayprices
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayPrices
Num:
-1
Den:
-1
Norm:
-100
done.
REF_59 -> LENGTH arrayPrices_4
checking ref_59
Refernce variable: ref_59
Function name: listAnchor
[i]Type for REF_59
Num:
Den:
Norm:
-100
done.
TMP_143(uint256) := REF_59(uint256)
checking tmp_143
Temp variable: tmp_143
Function name: listAnchor
asgn
Num:
Den:
Norm:
-100
0
[i]Type for TMP_143
Num:
Den:
Norm:
0
done.
TMP_144(uint256) = TMP_143 (c)+ 1
checking tmp_144
Temp variable: tmp_144
Function name: listAnchor
Constatn varible: 1
Constatn varible: 1
val: 1
Constatn varible: 1
Num:
Den:
Norm:
0
[i]Type for TMP_144
Num:
-1
Den:
-1
Norm:
0
done.
arrayPrices_5(uint256[]) := ϕ(['arrayPrices_4'])
checking arrayprices
State IR  variable: arrayprices
State variable: arrayprices
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayPrices
Num:
-1
Den:
-1
Norm:
-100
done.
REF_59 (->arrayPrices_5) := TMP_144(uint256)
checking ref_59
Refernce variable: ref_59
Function name: listAnchor
asgn
Num:
Den:
Norm:
-100
0
[i]Type for REF_59
Num:
-1
Den:
-1
Norm:
0
done.
REF_60(uint256) -> arrayPrices_5[TMP_143]
checking ref_60
Refernce variable: ref_60
Function name: listAnchor
INDEX
Num:
-1
Den:
-1
Norm:
-100
arrayPrices_6(uint256[]) := ϕ(['arrayPrices_5'])
checking arrayprices
State IR  variable: arrayprices
State variable: arrayprices
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayPrices
Num:
-1
Den:
-1
Norm:
-100
done.
REF_60 (->arrayPrices_6) := TMP_141(uint256)
checking ref_60
Refernce variable: ref_60
Function name: listAnchor
asgn
Num:
-1
Den:
-1
Norm:
-100
Error with: REF_60 in function listAnchor
0
[i]Type for REF_60
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
REF_61(bool) -> _isCurated_3[token_1]
clearing ir...?
_isCurated_4(mapping(address => bool)) := ϕ(['_isCurated_3'])
clearing ir...?
REF_61 (->_isCurated_4) := True(bool)
has variable
typecheckig node...
REF_61(bool) -> _isCurated_3[token_1]
checking ref_61
Refernce variable: ref_61
Function name: listAnchor
INDEX
Num:
-1
Den:
-1
Norm:
-100
_isCurated_4(mapping(address => bool)) := ϕ(['_isCurated_3'])
checking _iscurated
State IR  variable: _iscurated
State variable: _iscurated
Function name: listAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _isCurated
Num:
-1
Den:
-1
Norm:
-100
done.
REF_61 (->_isCurated_4) := True(bool)
checking ref_61
Refernce variable: ref_61
Function name: listAnchor
asgn
Constatn varible: true
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: true
val: True
0
Constatn varible: true
val: True
[i]Type for REF_61
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
INTERNAL_CALL, Router.updateAnchorPrice(address)(token_1)
typecheckig node...
INTERNAL_CALL, Router.updateAnchorPrice(address)(token_1)
Internal call...
updateAnchorPrice
token
Function: updateAnchorPrice
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
added
xyz
Function name: updateAnchorPrice
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['newToken_1', '_token_1', 'token_1'])
clearing ir...?
one_5(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
clearing ir...?
arrayAnchors_16(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_0', 'arrayAnchors_14'])
typecheckig node...
token_1(address) := ϕ(['newToken_1', '_token_1', 'token_1'])
checking token
Local variable: token
Function name: updateAnchorPrice
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
one_5(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: updateAnchorPrice
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_16(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_0', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: updateAnchorPrice
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
i_1(uint256) := 0(uint256)
has variable
[i] i cleared
typecheckig node...
i_1(uint256) := 0(uint256)
checking i
Local variable: i
Function name: updateAnchorPrice
asgn
Constatn varible: 0
Num:
Den:
Norm:
0
Constatn varible: 0
val: 0
0
Constatn varible: 0
val: 0
[i]Type for i
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
i_2(uint256) := ϕ(['i_1', 'i_3'])
clearing ir...?
REF_72 -> LENGTH arrayAnchors_16
clearing ir...?
TMP_167(bool) = i_2 < REF_72
has variable
[i] TMP_167 cleared
clearing ir...?
CONDITION TMP_167
typecheckig node...
i_2(uint256) := ϕ(['i_1', 'i_3'])
checking i
Local variable: i
Function name: updateAnchorPrice
Phi
[i]Type for i
Num:
Den:
Norm:
-100
done.
REF_72 -> LENGTH arrayAnchors_16
checking ref_72
Refernce variable: ref_72
Function name: updateAnchorPrice
[i]Type for REF_72
Num:
Den:
Norm:
-100
done.
TMP_167(bool) = i_2 < REF_72
checking tmp_167
Temp variable: tmp_167
Function name: updateAnchorPrice
testing lt...
Num:
Den:
Norm:
0
[i]Type for TMP_167
Num:
Den:
Norm:
0
done.
CONDITION TMP_167
Condition...
Conidtion: 
TMP_167
TMP_167
[x]node added back
clearning node...
clearing ir...?
REF_73(address) -> arrayAnchors_16[i_2]
clearing ir...?
TMP_168(bool) = REF_73 == token_1
has variable
[i] TMP_168 cleared
clearing ir...?
CONDITION TMP_168
typecheckig node...
REF_73(address) -> arrayAnchors_16[i_2]
checking ref_73
Refernce variable: ref_73
Function name: updateAnchorPrice
INDEX
Num:
-1
Den:
-1
Norm:
-100
TMP_168(bool) = REF_73 == token_1
checking tmp_168
Temp variable: tmp_168
Function name: updateAnchorPrice
[i]Type for TMP_168
Num:
Den:
Norm:
-100
done.
CONDITION TMP_168
Condition...
Conidtion: 
TMP_168
TMP_168
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_74(uint256) -> arrayPrices_6[i_2]
clearing ir...?
TMP_169(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_170 = CONVERT TMP_169 to iUTILS
clearing ir...?
REF_76(address) -> arrayAnchors_17[i_2]
clearing ir...?
TMP_171(uint256) = HIGH_LEVEL_CALL, dest:TMP_170(iUTILS), function:calcValueInBase, arguments:['REF_76', 'one_6']  
has variable
[i] TMP_171 cleared
clearing ir...?
one_7(uint256) := ϕ(['one_4', 'one_6', 'one_7', 'one_12', 'one_10'])
clearing ir...?
arrayAnchors_18(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_17', 'arrayAnchors_14'])
clearing ir...?
arrayPrices_7(uint256[]) := ϕ(['arrayPrices_6'])
clearing ir...?
REF_74 (->arrayPrices_7) := TMP_171(uint256)
has variable
typecheckig node...
REF_74(uint256) -> arrayPrices_6[i_2]
checking ref_74
Refernce variable: ref_74
Function name: updateAnchorPrice
INDEX
Num:
-1
Den:
-1
Norm:
-100
TMP_169(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_169
Num:
Den:
Norm:
-100
done.
TMP_170 = CONVERT TMP_169 to iUTILS
checking tmp_170
Temp variable: tmp_170
Function name: updateAnchorPrice
Num:
Den:
Norm:
0
0
TMP_169
[i]Type for TMP_170
Num:
Den:
Norm:
0
done.
REF_76(address) -> arrayAnchors_17[i_2]
checking ref_76
Refernce variable: ref_76
Function name: updateAnchorPrice
INDEX
Num:
Den:
Norm:
-100
arrayAnchors
TMP_171(uint256) = HIGH_LEVEL_CALL, dest:TMP_170(iUTILS), function:calcValueInBase, arguments:['REF_76', 'one_6']  
High Level Call: calcvalueinbase
checking tmp_171
Temp variable: tmp_171
Function name: updateAnchorPrice
High Call: calcValueInBase
func name:calcValueInBase
other func name:calcValueInBase
TMP_171
WIP
TMP_171
Finding type for hlc_0...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_171
Num:
2
Den:
-1
Norm:
0
done.
one_7(uint256) := ϕ(['one_4', 'one_6', 'one_7', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: updateAnchorPrice
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_18(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_17', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: updateAnchorPrice
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
arrayPrices_7(uint256[]) := ϕ(['arrayPrices_6'])
checking arrayprices
State IR  variable: arrayprices
State variable: arrayprices
Function name: updateAnchorPrice
Phi
[i]Type for arrayPrices
Num:
-1
Den:
-1
Norm:
-100
done.
REF_74 (->arrayPrices_7) := TMP_171(uint256)
checking ref_74
Refernce variable: ref_74
Function name: updateAnchorPrice
asgn
Num:
-1
Den:
-1
Norm:
0
Error with: REF_74 in function updateAnchorPrice
0
[i]Type for REF_74
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_172(uint256) := i_2(uint256)
has variable
[i] TMP_172 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
has variable
[i] i cleared
typecheckig node...
TMP_172(uint256) := i_2(uint256)
checking tmp_172
Temp variable: tmp_172
Function name: updateAnchorPrice
asgn
Num:
Den:
Norm:
0
0
[i]Type for TMP_172
Num:
Den:
Norm:
0
done.
i_3(uint256) = i_2 (c)+ 1
checking i
Local variable: i
Function name: updateAnchorPrice
Constatn varible: 1
Constatn varible: 1
val: 1
Constatn varible: 1
Num:
Den:
Norm:
0
[i]Type for i
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
Checking return valueupdateAnchorPrice
done.
Reading Function: replaceAnchor
Function name: replaceAnchor
Function Visibility: external
oldToken
Finding type for oldToken...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
newToken
Finding type for newToken...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
POOLS_54(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
insidePriceLimit_3(uint256) := ϕ(['insidePriceLimit_0', 'insidePriceLimit_1', 'insidePriceLimit_12', 'insidePriceLimit_2'])
clearing ir...?
outsidePriceLimit_3(uint256) := ϕ(['outsidePriceLimit_9', 'outsidePriceLimit_2', 'outsidePriceLimit_1', 'outsidePriceLimit_0'])
clearing ir...?
arrayAnchors_5(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_0', 'arrayAnchors_14'])
typecheckig node...
POOLS_54(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
insidePriceLimit_3(uint256) := ϕ(['insidePriceLimit_0', 'insidePriceLimit_1', 'insidePriceLimit_12', 'insidePriceLimit_2'])
checking insidepricelimit
State IR  variable: insidepricelimit
State variable: insidepricelimit
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for insidePriceLimit
Num:
-1
Den:
-1
Norm:
-100
done.
outsidePriceLimit_3(uint256) := ϕ(['outsidePriceLimit_9', 'outsidePriceLimit_2', 'outsidePriceLimit_1', 'outsidePriceLimit_0'])
checking outsidepricelimit
State IR  variable: outsidepricelimit
State variable: outsidepricelimit
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for outsidePriceLimit
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_5(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_0', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_146 = CONVERT POOLS_54 to iPOOLS
clearing ir...?
TMP_147(bool) = HIGH_LEVEL_CALL, dest:TMP_146(iPOOLS), function:isAnchor, arguments:['newToken_1']  
has variable
[i] TMP_147 cleared
clearing ir...?
POOLS_55(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_54', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
insidePriceLimit_4(uint256) := ϕ(['insidePriceLimit_12', 'insidePriceLimit_1', 'insidePriceLimit_3', 'insidePriceLimit_2'])
clearing ir...?
outsidePriceLimit_4(uint256) := ϕ(['outsidePriceLimit_9', 'outsidePriceLimit_2', 'outsidePriceLimit_1', 'outsidePriceLimit_3'])
clearing ir...?
arrayAnchors_6(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_5', 'arrayAnchors_14'])
clearing ir...?
TMP_148(None) = SOLIDITY_CALL require(bool,string)(TMP_147,Not anchor)
typecheckig node...
TMP_146 = CONVERT POOLS_54 to iPOOLS
checking tmp_146
Temp variable: tmp_146
Function name: replaceAnchor
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_146
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_147(bool) = HIGH_LEVEL_CALL, dest:TMP_146(iPOOLS), function:isAnchor, arguments:['newToken_1']  
High Level Call: isanchor
checking tmp_147
Temp variable: tmp_147
Function name: replaceAnchor
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_147
WIP
hlc contract name: XXX func_name: isAnchor
TMP_147
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_147
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_55(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_54', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
insidePriceLimit_4(uint256) := ϕ(['insidePriceLimit_12', 'insidePriceLimit_1', 'insidePriceLimit_3', 'insidePriceLimit_2'])
checking insidepricelimit
State IR  variable: insidepricelimit
State variable: insidepricelimit
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for insidePriceLimit
Num:
-1
Den:
-1
Norm:
-100
done.
outsidePriceLimit_4(uint256) := ϕ(['outsidePriceLimit_9', 'outsidePriceLimit_2', 'outsidePriceLimit_1', 'outsidePriceLimit_3'])
checking outsidepricelimit
State IR  variable: outsidepricelimit
State variable: outsidepricelimit
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for outsidePriceLimit
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_6(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_5', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_148(None) = SOLIDITY_CALL require(bool,string)(TMP_147,Not anchor)
checking tmp_148
Temp variable: tmp_148
Function name: replaceAnchor
[i]Type for TMP_148
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_149 = CONVERT POOLS_55 to iPOOLS
clearing ir...?
TMP_150(uint256) = HIGH_LEVEL_CALL, dest:TMP_149(iPOOLS), function:getBaseAmount, arguments:['newToken_1']  
has variable
[i] TMP_150 cleared
clearing ir...?
POOLS_56(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_55', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
insidePriceLimit_5(uint256) := ϕ(['insidePriceLimit_12', 'insidePriceLimit_1', 'insidePriceLimit_4', 'insidePriceLimit_2'])
clearing ir...?
outsidePriceLimit_5(uint256) := ϕ(['outsidePriceLimit_9', 'outsidePriceLimit_2', 'outsidePriceLimit_4', 'outsidePriceLimit_1'])
clearing ir...?
arrayAnchors_7(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_6', 'arrayAnchors_14'])
clearing ir...?
TMP_151 = CONVERT POOLS_56 to iPOOLS
clearing ir...?
TMP_152(uint256) = HIGH_LEVEL_CALL, dest:TMP_151(iPOOLS), function:getBaseAmount, arguments:['oldToken_1']  
has variable
[i] TMP_152 cleared
clearing ir...?
POOLS_57(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_56', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
insidePriceLimit_6(uint256) := ϕ(['insidePriceLimit_12', 'insidePriceLimit_1', 'insidePriceLimit_5', 'insidePriceLimit_2'])
clearing ir...?
outsidePriceLimit_6(uint256) := ϕ(['outsidePriceLimit_9', 'outsidePriceLimit_2', 'outsidePriceLimit_5', 'outsidePriceLimit_1'])
clearing ir...?
arrayAnchors_8(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_7', 'arrayAnchors_14'])
clearing ir...?
TMP_153(bool) = TMP_150 > TMP_152
has variable
[i] TMP_153 cleared
clearing ir...?
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,Not deeper)
typecheckig node...
TMP_149 = CONVERT POOLS_55 to iPOOLS
checking tmp_149
Temp variable: tmp_149
Function name: replaceAnchor
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_149
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_150(uint256) = HIGH_LEVEL_CALL, dest:TMP_149(iPOOLS), function:getBaseAmount, arguments:['newToken_1']  
High Level Call: getbaseamount
checking tmp_150
Temp variable: tmp_150
Function name: replaceAnchor
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_150
WIP
hlc contract name: XXX func_name: getBaseAmount
TMP_150
Finding type for hlc_1...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_150
Num:
2
Den:
-1
Norm:
0
done.
POOLS_56(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_55', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
insidePriceLimit_5(uint256) := ϕ(['insidePriceLimit_12', 'insidePriceLimit_1', 'insidePriceLimit_4', 'insidePriceLimit_2'])
checking insidepricelimit
State IR  variable: insidepricelimit
State variable: insidepricelimit
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for insidePriceLimit
Num:
-1
Den:
-1
Norm:
-100
done.
outsidePriceLimit_5(uint256) := ϕ(['outsidePriceLimit_9', 'outsidePriceLimit_2', 'outsidePriceLimit_4', 'outsidePriceLimit_1'])
checking outsidepricelimit
State IR  variable: outsidepricelimit
State variable: outsidepricelimit
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for outsidePriceLimit
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_7(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_6', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_151 = CONVERT POOLS_56 to iPOOLS
checking tmp_151
Temp variable: tmp_151
Function name: replaceAnchor
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_151
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_152(uint256) = HIGH_LEVEL_CALL, dest:TMP_151(iPOOLS), function:getBaseAmount, arguments:['oldToken_1']  
High Level Call: getbaseamount
checking tmp_152
Temp variable: tmp_152
Function name: replaceAnchor
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_152
WIP
hlc contract name: XXX func_name: getBaseAmount
TMP_152
Finding type for hlc_2...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_152
Num:
2
Den:
-1
Norm:
0
done.
POOLS_57(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_56', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
insidePriceLimit_6(uint256) := ϕ(['insidePriceLimit_12', 'insidePriceLimit_1', 'insidePriceLimit_5', 'insidePriceLimit_2'])
checking insidepricelimit
State IR  variable: insidepricelimit
State variable: insidepricelimit
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for insidePriceLimit
Num:
-1
Den:
-1
Norm:
-100
done.
outsidePriceLimit_6(uint256) := ϕ(['outsidePriceLimit_9', 'outsidePriceLimit_2', 'outsidePriceLimit_5', 'outsidePriceLimit_1'])
checking outsidepricelimit
State IR  variable: outsidepricelimit
State variable: outsidepricelimit
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for outsidePriceLimit
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_8(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_7', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_153(bool) = TMP_150 > TMP_152
checking tmp_153
Temp variable: tmp_153
Function name: replaceAnchor
testing gt...
Num:
2
Den:
-1
Norm:
0
False
[i]Type for TMP_153
Num:
-1
Den:
-1
Norm:
0
done.
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,Not deeper)
checking tmp_154
Temp variable: tmp_154
Function name: replaceAnchor
[i]Type for TMP_154
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_155(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_156 = CONVERT TMP_155 to iUTILS
clearing ir...?
TMP_157(uint256) = INTERNAL_CALL, Router.getAnchorPrice()()
clearing ir...?
HIGH_LEVEL_CALL, dest:TMP_156(iUTILS), function:requirePriceBounds, arguments:['oldToken_1', 'outsidePriceLimit_8', 'False', 'TMP_157']  
clearing ir...?
insidePriceLimit_9(uint256) := ϕ(['insidePriceLimit_12', 'insidePriceLimit_1', 'insidePriceLimit_8', 'insidePriceLimit_2'])
clearing ir...?
outsidePriceLimit_9(uint256) := ϕ(['outsidePriceLimit_9', 'outsidePriceLimit_2', 'outsidePriceLimit_1', 'outsidePriceLimit_8'])
clearing ir...?
arrayAnchors_11(address[]) := ϕ(['arrayAnchors_10', 'arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_14'])
typecheckig node...
TMP_155(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_155
Num:
Den:
Norm:
-100
done.
TMP_156 = CONVERT TMP_155 to iUTILS
checking tmp_156
Temp variable: tmp_156
Function name: replaceAnchor
Num:
Den:
Norm:
-100
0
TMP_155
[i]Type for TMP_156
Num:
Den:
Norm:
0
done.
TMP_157(uint256) = INTERNAL_CALL, Router.getAnchorPrice()()
Internal call...
getAnchorPrice
Function: getAnchorPrice
ic
Internal cal param_cache
added
xyz
Function name: getAnchorPrice
Function Visibility: public
clearning node...
clearing ir...?
one_8(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
clearing ir...?
arrayPrices_8(uint256[]) := ϕ(['arrayPrices_0', 'arrayPrices_7', 'arrayPrices_10', 'arrayPrices_6', 'arrayPrices_8'])
typecheckig node...
one_8(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: getAnchorPrice
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
arrayPrices_8(uint256[]) := ϕ(['arrayPrices_0', 'arrayPrices_7', 'arrayPrices_10', 'arrayPrices_6', 'arrayPrices_8'])
checking arrayprices
State IR  variable: arrayprices
State variable: arrayprices
Function name: getAnchorPrice
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayPrices
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
REF_78 -> LENGTH arrayPrices_8
clearing ir...?
TMP_176(bool) = REF_78 > 0
has variable
[i] TMP_176 cleared
clearing ir...?
CONDITION TMP_176
typecheckig node...
REF_78 -> LENGTH arrayPrices_8
checking ref_78
Refernce variable: ref_78
Function name: getAnchorPrice
[i]Type for REF_78
Num:
Den:
Norm:
-100
done.
TMP_176(bool) = REF_78 > 0
checking tmp_176
Temp variable: tmp_176
Function name: getAnchorPrice
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
Constatn varible: 0
Num:
Den:
Norm:
0
[i]Type for TMP_176
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_176
Condition...
Conidtion: 
TMP_176
TMP_176
[x]node added back
clearning node...
clearing ir...?
TMP_177(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_178 = CONVERT TMP_177 to iUTILS
clearing ir...?
TMP_179(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_178(iUTILS), function:sortArray, arguments:['arrayPrices_9']  
has variable
[i] TMP_179 cleared
clearing ir...?
arrayPrices_10(uint256[]) := ϕ(['arrayPrices_7', 'arrayPrices_10', 'arrayPrices_9', 'arrayPrices_6', 'arrayPrices_8'])
clearing ir...?
_sortedAnchorFeed_1(uint256[]) := TMP_179(uint256[])
has variable
[i] _sortedAnchorFeed cleared
typecheckig node...
TMP_177(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_177
Num:
Den:
Norm:
-100
done.
TMP_178 = CONVERT TMP_177 to iUTILS
checking tmp_178
Temp variable: tmp_178
Function name: getAnchorPrice
Num:
Den:
Norm:
-100
0
TMP_177
[i]Type for TMP_178
Num:
Den:
Norm:
0
done.
TMP_179(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_178(iUTILS), function:sortArray, arguments:['arrayPrices_9']  
High Level Call: sortarray
checking tmp_179
Temp variable: tmp_179
Function name: getAnchorPrice
High Call: sortArray
func name:sortArray
other func name:sortArray
TMP_179
WIP
TMP_179
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_179
Num:
-1
Den:
-1
Norm:
0
done.
arrayPrices_10(uint256[]) := ϕ(['arrayPrices_7', 'arrayPrices_10', 'arrayPrices_9', 'arrayPrices_6', 'arrayPrices_8'])
checking arrayprices
State IR  variable: arrayprices
State variable: arrayprices
Function name: getAnchorPrice
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayPrices
Num:
-1
Den:
-1
Norm:
-100
done.
_sortedAnchorFeed_1(uint256[]) := TMP_179(uint256[])
checking _sortedanchorfeed
Local variable: _sortedanchorfeed
Function name: getAnchorPrice
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _sortedAnchorFeed
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
anchorPrice_2(uint256) := one_8(uint256)
has variable
[i] anchorPrice cleared
typecheckig node...
anchorPrice_2(uint256) := one_8(uint256)
checking anchorprice
Local variable: anchorprice
Function name: getAnchorPrice
asgn
Num:
Den:
Norm:
-100
0
[i]Type for anchorPrice
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
REF_80(uint256) -> _sortedAnchorFeed_1[2]
clearing ir...?
anchorPrice_1(uint256) := REF_80(uint256)
has variable
[i] anchorPrice cleared
typecheckig node...
REF_80(uint256) -> _sortedAnchorFeed_1[2]
checking ref_80
Refernce variable: ref_80
Function name: getAnchorPrice
INDEX
Num:
-1
Den:
-1
Norm:
0
anchorPrice_1(uint256) := REF_80(uint256)
checking anchorprice
Local variable: anchorprice
Function name: getAnchorPrice
asgn
Num:
Den:
Norm:
-100
0
[i]Type for anchorPrice
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Checking return valuegetAnchorPrice
anchorPrice
&&
anchorPrice
Num:
Den:
Norm:
-100
[i]Type for TMP_157
Num:
Den:
Norm:
-100
done.
HIGH_LEVEL_CALL, dest:TMP_156(iUTILS), function:requirePriceBounds, arguments:['oldToken_1', 'outsidePriceLimit_8', 'False', 'TMP_157']  
High Level Call: requirepricebounds
High Call: requirePriceBounds
func name:requirePriceBounds
other func name:requirePriceBounds
done.
insidePriceLimit_9(uint256) := ϕ(['insidePriceLimit_12', 'insidePriceLimit_1', 'insidePriceLimit_8', 'insidePriceLimit_2'])
checking insidepricelimit
State IR  variable: insidepricelimit
State variable: insidepricelimit
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for insidePriceLimit
Num:
-1
Den:
-1
Norm:
-100
done.
outsidePriceLimit_9(uint256) := ϕ(['outsidePriceLimit_9', 'outsidePriceLimit_2', 'outsidePriceLimit_1', 'outsidePriceLimit_8'])
checking outsidepricelimit
State IR  variable: outsidepricelimit
State variable: outsidepricelimit
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for outsidePriceLimit
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_11(address[]) := ϕ(['arrayAnchors_10', 'arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
[x]node added back
clearning node...
clearing ir...?
TMP_159(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_160 = CONVERT TMP_159 to iUTILS
clearing ir...?
TMP_161(uint256) = INTERNAL_CALL, Router.getAnchorPrice()()
clearing ir...?
HIGH_LEVEL_CALL, dest:TMP_160(iUTILS), function:requirePriceBounds, arguments:['newToken_1', 'insidePriceLimit_11', 'True', 'TMP_161']  
clearing ir...?
insidePriceLimit_12(uint256) := ϕ(['insidePriceLimit_12', 'insidePriceLimit_1', 'insidePriceLimit_11', 'insidePriceLimit_2'])
clearing ir...?
arrayAnchors_14(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_13', 'arrayAnchors_14'])
typecheckig node...
TMP_159(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_159
Num:
Den:
Norm:
-100
done.
TMP_160 = CONVERT TMP_159 to iUTILS
checking tmp_160
Temp variable: tmp_160
Function name: replaceAnchor
Num:
Den:
Norm:
-100
0
TMP_159
[i]Type for TMP_160
Num:
Den:
Norm:
0
done.
TMP_161(uint256) = INTERNAL_CALL, Router.getAnchorPrice()()
Internal call...
getAnchorPrice
Function: getAnchorPrice
ic
Internal cal param_cache
[i]Type for TMP_161
Num:
Den:
Norm:
-100
done.
HIGH_LEVEL_CALL, dest:TMP_160(iUTILS), function:requirePriceBounds, arguments:['newToken_1', 'insidePriceLimit_11', 'True', 'TMP_161']  
High Level Call: requirepricebounds
High Call: requirePriceBounds
func name:requirePriceBounds
other func name:requirePriceBounds
done.
insidePriceLimit_12(uint256) := ϕ(['insidePriceLimit_12', 'insidePriceLimit_1', 'insidePriceLimit_11', 'insidePriceLimit_2'])
checking insidepricelimit
State IR  variable: insidepricelimit
State variable: insidepricelimit
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for insidePriceLimit
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_14(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_13', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
[x]node added back
clearning node...
clearing ir...?
REF_67(bool) -> _isCurated_4[oldToken_1]
clearing ir...?
_isCurated_5(mapping(address => bool)) := ϕ(['_isCurated_4'])
clearing ir...?
REF_67 (->_isCurated_5) := False(bool)
has variable
typecheckig node...
REF_67(bool) -> _isCurated_4[oldToken_1]
checking ref_67
Refernce variable: ref_67
Function name: replaceAnchor
INDEX
Num:
-1
Den:
-1
Norm:
-100
_isCurated_5(mapping(address => bool)) := ϕ(['_isCurated_4'])
checking _iscurated
State IR  variable: _iscurated
State variable: _iscurated
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _isCurated
Num:
-1
Den:
-1
Norm:
-100
done.
REF_67 (->_isCurated_5) := False(bool)
checking ref_67
Refernce variable: ref_67
Function name: replaceAnchor
asgn
Constatn varible: false
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: false
val: False
0
Constatn varible: false
val: False
[i]Type for REF_67
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
REF_68(bool) -> _isCurated_5[newToken_1]
clearing ir...?
_isCurated_6(mapping(address => bool)) := ϕ(['_isCurated_5'])
clearing ir...?
REF_68 (->_isCurated_6) := True(bool)
has variable
typecheckig node...
REF_68(bool) -> _isCurated_5[newToken_1]
checking ref_68
Refernce variable: ref_68
Function name: replaceAnchor
INDEX
Num:
-1
Den:
-1
Norm:
-100
_isCurated_6(mapping(address => bool)) := ϕ(['_isCurated_5'])
checking _iscurated
State IR  variable: _iscurated
State variable: _iscurated
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _isCurated
Num:
-1
Den:
-1
Norm:
-100
done.
REF_68 (->_isCurated_6) := True(bool)
checking ref_68
Refernce variable: ref_68
Function name: replaceAnchor
asgn
Constatn varible: true
Num:
-1
Den:
-1
Norm:
-100
Constatn varible: true
val: True
0
Constatn varible: true
val: True
[i]Type for REF_68
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
i_1(uint256) := 0(uint256)
has variable
[i] i cleared
typecheckig node...
i_1(uint256) := 0(uint256)
checking i
Local variable: i
Function name: replaceAnchor
asgn
Constatn varible: 0
Num:
Den:
Norm:
-100
Constatn varible: 0
val: 0
0
Constatn varible: 0
val: 0
[i]Type for i
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
i_2(uint256) := ϕ(['i_1', 'i_3'])
clearing ir...?
REF_69 -> LENGTH arrayAnchors_14
clearing ir...?
TMP_163(bool) = i_2 < REF_69
has variable
[i] TMP_163 cleared
clearing ir...?
CONDITION TMP_163
typecheckig node...
i_2(uint256) := ϕ(['i_1', 'i_3'])
checking i
Local variable: i
Function name: replaceAnchor
Phi
[i]Type for i
Num:
Den:
Norm:
-100
done.
REF_69 -> LENGTH arrayAnchors_14
checking ref_69
Refernce variable: ref_69
Function name: replaceAnchor
[i]Type for REF_69
Num:
Den:
Norm:
-100
done.
TMP_163(bool) = i_2 < REF_69
checking tmp_163
Temp variable: tmp_163
Function name: replaceAnchor
testing lt...
Num:
Den:
Norm:
0
[i]Type for TMP_163
Num:
Den:
Norm:
0
done.
CONDITION TMP_163
Condition...
Conidtion: 
TMP_163
TMP_163
[x]node added back
clearning node...
clearing ir...?
REF_70(address) -> arrayAnchors_14[i_2]
clearing ir...?
TMP_164(bool) = REF_70 == oldToken_1
has variable
[i] TMP_164 cleared
clearing ir...?
CONDITION TMP_164
typecheckig node...
REF_70(address) -> arrayAnchors_14[i_2]
checking ref_70
Refernce variable: ref_70
Function name: replaceAnchor
INDEX
Num:
-1
Den:
-1
Norm:
-100
TMP_164(bool) = REF_70 == oldToken_1
checking tmp_164
Temp variable: tmp_164
Function name: replaceAnchor
[i]Type for TMP_164
Num:
Den:
Norm:
-100
done.
CONDITION TMP_164
Condition...
Conidtion: 
TMP_164
TMP_164
clearning node...
clearing ir...?
REF_71(address) -> arrayAnchors_14[i_2]
clearing ir...?
arrayAnchors_15(address[]) := ϕ(['arrayAnchors_14'])
clearing ir...?
REF_71 (->arrayAnchors_15) := newToken_1(address)
has variable
typecheckig node...
REF_71(address) -> arrayAnchors_14[i_2]
checking ref_71
Refernce variable: ref_71
Function name: replaceAnchor
INDEX
Num:
-1
Den:
-1
Norm:
-100
arrayAnchors_15(address[]) := ϕ(['arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: replaceAnchor
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
REF_71 (->arrayAnchors_15) := newToken_1(address)
checking ref_71
Refernce variable: ref_71
Function name: replaceAnchor
asgn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
-1
Den:
-1
Norm:
-100
0
[i]Type for REF_71
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, Router.updateAnchorPrice(address)(newToken_1)
typecheckig node...
INTERNAL_CALL, Router.updateAnchorPrice(address)(newToken_1)
Internal call...
updateAnchorPrice
newToken
Function: updateAnchorPrice
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
added
xyz
Function name: updateAnchorPrice
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['newToken_1', '_token_1', 'token_1'])
clearing ir...?
one_5(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
clearing ir...?
arrayAnchors_16(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_0', 'arrayAnchors_14'])
typecheckig node...
token_1(address) := ϕ(['newToken_1', '_token_1', 'token_1'])
checking token
Local variable: token
Function name: updateAnchorPrice
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
one_5(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: updateAnchorPrice
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_16(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_0', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: updateAnchorPrice
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
i_1(uint256) := 0(uint256)
has variable
[i] i cleared
typecheckig node...
i_1(uint256) := 0(uint256)
checking i
Local variable: i
Function name: updateAnchorPrice
asgn
Constatn varible: 0
Num:
Den:
Norm:
0
Constatn varible: 0
val: 0
0
Constatn varible: 0
val: 0
[i]Type for i
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
i_2(uint256) := ϕ(['i_1', 'i_3'])
clearing ir...?
REF_72 -> LENGTH arrayAnchors_16
clearing ir...?
TMP_167(bool) = i_2 < REF_72
has variable
[i] TMP_167 cleared
clearing ir...?
CONDITION TMP_167
typecheckig node...
i_2(uint256) := ϕ(['i_1', 'i_3'])
checking i
Local variable: i
Function name: updateAnchorPrice
Phi
[i]Type for i
Num:
Den:
Norm:
-100
done.
REF_72 -> LENGTH arrayAnchors_16
checking ref_72
Refernce variable: ref_72
Function name: updateAnchorPrice
[i]Type for REF_72
Num:
Den:
Norm:
-100
done.
TMP_167(bool) = i_2 < REF_72
checking tmp_167
Temp variable: tmp_167
Function name: updateAnchorPrice
testing lt...
Num:
Den:
Norm:
0
[i]Type for TMP_167
Num:
Den:
Norm:
0
done.
CONDITION TMP_167
Condition...
Conidtion: 
TMP_167
TMP_167
[x]node added back
clearning node...
clearing ir...?
REF_73(address) -> arrayAnchors_16[i_2]
clearing ir...?
TMP_168(bool) = REF_73 == token_1
has variable
[i] TMP_168 cleared
clearing ir...?
CONDITION TMP_168
typecheckig node...
REF_73(address) -> arrayAnchors_16[i_2]
checking ref_73
Refernce variable: ref_73
Function name: updateAnchorPrice
INDEX
Num:
-1
Den:
-1
Norm:
-100
TMP_168(bool) = REF_73 == token_1
checking tmp_168
Temp variable: tmp_168
Function name: updateAnchorPrice
[i]Type for TMP_168
Num:
Den:
Norm:
-100
done.
CONDITION TMP_168
Condition...
Conidtion: 
TMP_168
TMP_168
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_74(uint256) -> arrayPrices_6[i_2]
clearing ir...?
TMP_169(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_170 = CONVERT TMP_169 to iUTILS
clearing ir...?
REF_76(address) -> arrayAnchors_17[i_2]
clearing ir...?
TMP_171(uint256) = HIGH_LEVEL_CALL, dest:TMP_170(iUTILS), function:calcValueInBase, arguments:['REF_76', 'one_6']  
has variable
[i] TMP_171 cleared
clearing ir...?
one_7(uint256) := ϕ(['one_4', 'one_6', 'one_7', 'one_12', 'one_10'])
clearing ir...?
arrayAnchors_18(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_17', 'arrayAnchors_14'])
clearing ir...?
arrayPrices_7(uint256[]) := ϕ(['arrayPrices_6'])
clearing ir...?
REF_74 (->arrayPrices_7) := TMP_171(uint256)
has variable
typecheckig node...
REF_74(uint256) -> arrayPrices_6[i_2]
checking ref_74
Refernce variable: ref_74
Function name: updateAnchorPrice
INDEX
Num:
-1
Den:
-1
Norm:
-100
TMP_169(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_169
Num:
Den:
Norm:
-100
done.
TMP_170 = CONVERT TMP_169 to iUTILS
checking tmp_170
Temp variable: tmp_170
Function name: updateAnchorPrice
Num:
Den:
Norm:
0
0
TMP_169
[i]Type for TMP_170
Num:
Den:
Norm:
0
done.
REF_76(address) -> arrayAnchors_17[i_2]
checking ref_76
Refernce variable: ref_76
Function name: updateAnchorPrice
INDEX
Num:
Den:
Norm:
-100
arrayAnchors
TMP_171(uint256) = HIGH_LEVEL_CALL, dest:TMP_170(iUTILS), function:calcValueInBase, arguments:['REF_76', 'one_6']  
High Level Call: calcvalueinbase
checking tmp_171
Temp variable: tmp_171
Function name: updateAnchorPrice
High Call: calcValueInBase
func name:calcValueInBase
other func name:calcValueInBase
TMP_171
WIP
TMP_171
Finding type for hlc_0...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_171
Num:
2
Den:
-1
Norm:
0
done.
one_7(uint256) := ϕ(['one_4', 'one_6', 'one_7', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: updateAnchorPrice
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_18(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_17', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: updateAnchorPrice
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
arrayPrices_7(uint256[]) := ϕ(['arrayPrices_6'])
checking arrayprices
State IR  variable: arrayprices
State variable: arrayprices
Function name: updateAnchorPrice
Phi
[i]Type for arrayPrices
Num:
-1
Den:
-1
Norm:
-100
done.
REF_74 (->arrayPrices_7) := TMP_171(uint256)
checking ref_74
Refernce variable: ref_74
Function name: updateAnchorPrice
asgn
Num:
-1
Den:
-1
Norm:
0
Error with: REF_74 in function updateAnchorPrice
0
[i]Type for REF_74
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_172(uint256) := i_2(uint256)
has variable
[i] TMP_172 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
has variable
[i] i cleared
typecheckig node...
TMP_172(uint256) := i_2(uint256)
checking tmp_172
Temp variable: tmp_172
Function name: updateAnchorPrice
asgn
Num:
Den:
Norm:
0
0
[i]Type for TMP_172
Num:
Den:
Norm:
0
done.
i_3(uint256) = i_2 (c)+ 1
checking i
Local variable: i
Function name: updateAnchorPrice
Constatn varible: 1
Constatn varible: 1
val: 1
Constatn varible: 1
Num:
Den:
Norm:
0
[i]Type for i
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
Checking return valueupdateAnchorPrice
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_165(uint256) := i_2(uint256)
has variable
[i] TMP_165 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
has variable
[i] i cleared
typecheckig node...
TMP_165(uint256) := i_2(uint256)
checking tmp_165
Temp variable: tmp_165
Function name: replaceAnchor
asgn
Num:
Den:
Norm:
-100
0
[i]Type for TMP_165
Num:
Den:
Norm:
0
done.
i_3(uint256) = i_2 (c)+ 1
checking i
Local variable: i
Function name: replaceAnchor
Constatn varible: 1
Constatn varible: 1
val: 1
Constatn varible: 1
Num:
Den:
Norm:
0
[i]Type for i
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
Reading Function: updateAnchorPrice
Function name: updateAnchorPrice
Function Visibility: public
token
Finding type for token...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
token_1(address) := ϕ(['newToken_1', '_token_1', 'token_1'])
clearing ir...?
one_5(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
clearing ir...?
arrayAnchors_16(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_0', 'arrayAnchors_14'])
typecheckig node...
token_1(address) := ϕ(['newToken_1', '_token_1', 'token_1'])
checking token
Local variable: token
Function name: updateAnchorPrice
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
one_5(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: updateAnchorPrice
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_16(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_0', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: updateAnchorPrice
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
i_1(uint256) := 0(uint256)
has variable
[i] i cleared
typecheckig node...
i_1(uint256) := 0(uint256)
checking i
Local variable: i
Function name: updateAnchorPrice
asgn
Constatn varible: 0
Num:
Den:
Norm:
0
Constatn varible: 0
val: 0
0
Constatn varible: 0
val: 0
[i]Type for i
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
i_2(uint256) := ϕ(['i_1', 'i_3'])
clearing ir...?
REF_72 -> LENGTH arrayAnchors_16
clearing ir...?
TMP_167(bool) = i_2 < REF_72
has variable
[i] TMP_167 cleared
clearing ir...?
CONDITION TMP_167
typecheckig node...
i_2(uint256) := ϕ(['i_1', 'i_3'])
checking i
Local variable: i
Function name: updateAnchorPrice
Phi
[i]Type for i
Num:
Den:
Norm:
-100
done.
REF_72 -> LENGTH arrayAnchors_16
checking ref_72
Refernce variable: ref_72
Function name: updateAnchorPrice
[i]Type for REF_72
Num:
Den:
Norm:
-100
done.
TMP_167(bool) = i_2 < REF_72
checking tmp_167
Temp variable: tmp_167
Function name: updateAnchorPrice
testing lt...
Num:
Den:
Norm:
0
[i]Type for TMP_167
Num:
Den:
Norm:
0
done.
CONDITION TMP_167
Condition...
Conidtion: 
TMP_167
TMP_167
[x]node added back
clearning node...
clearing ir...?
REF_73(address) -> arrayAnchors_16[i_2]
clearing ir...?
TMP_168(bool) = REF_73 == token_1
has variable
[i] TMP_168 cleared
clearing ir...?
CONDITION TMP_168
typecheckig node...
REF_73(address) -> arrayAnchors_16[i_2]
checking ref_73
Refernce variable: ref_73
Function name: updateAnchorPrice
INDEX
Num:
-1
Den:
-1
Norm:
-100
TMP_168(bool) = REF_73 == token_1
checking tmp_168
Temp variable: tmp_168
Function name: updateAnchorPrice
[i]Type for TMP_168
Num:
Den:
Norm:
-100
done.
CONDITION TMP_168
Condition...
Conidtion: 
TMP_168
TMP_168
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_74(uint256) -> arrayPrices_6[i_2]
clearing ir...?
TMP_169(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_170 = CONVERT TMP_169 to iUTILS
clearing ir...?
REF_76(address) -> arrayAnchors_17[i_2]
clearing ir...?
TMP_171(uint256) = HIGH_LEVEL_CALL, dest:TMP_170(iUTILS), function:calcValueInBase, arguments:['REF_76', 'one_6']  
has variable
[i] TMP_171 cleared
clearing ir...?
one_7(uint256) := ϕ(['one_4', 'one_6', 'one_7', 'one_12', 'one_10'])
clearing ir...?
arrayAnchors_18(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_17', 'arrayAnchors_14'])
clearing ir...?
arrayPrices_7(uint256[]) := ϕ(['arrayPrices_6'])
clearing ir...?
REF_74 (->arrayPrices_7) := TMP_171(uint256)
has variable
typecheckig node...
REF_74(uint256) -> arrayPrices_6[i_2]
checking ref_74
Refernce variable: ref_74
Function name: updateAnchorPrice
INDEX
Num:
-1
Den:
-1
Norm:
-100
TMP_169(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_169
Num:
Den:
Norm:
-100
done.
TMP_170 = CONVERT TMP_169 to iUTILS
checking tmp_170
Temp variable: tmp_170
Function name: updateAnchorPrice
Num:
Den:
Norm:
0
0
TMP_169
[i]Type for TMP_170
Num:
Den:
Norm:
0
done.
REF_76(address) -> arrayAnchors_17[i_2]
checking ref_76
Refernce variable: ref_76
Function name: updateAnchorPrice
INDEX
Num:
Den:
Norm:
-100
arrayAnchors
TMP_171(uint256) = HIGH_LEVEL_CALL, dest:TMP_170(iUTILS), function:calcValueInBase, arguments:['REF_76', 'one_6']  
High Level Call: calcvalueinbase
checking tmp_171
Temp variable: tmp_171
Function name: updateAnchorPrice
High Call: calcValueInBase
func name:calcValueInBase
other func name:calcValueInBase
TMP_171
WIP
TMP_171
Finding type for hlc_0...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_171
Num:
2
Den:
-1
Norm:
0
done.
one_7(uint256) := ϕ(['one_4', 'one_6', 'one_7', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: updateAnchorPrice
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_18(address[]) := ϕ(['arrayAnchors_4', 'arrayAnchors_16', 'arrayAnchors_17', 'arrayAnchors_14'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: updateAnchorPrice
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
arrayPrices_7(uint256[]) := ϕ(['arrayPrices_6'])
checking arrayprices
State IR  variable: arrayprices
State variable: arrayprices
Function name: updateAnchorPrice
Phi
[i]Type for arrayPrices
Num:
-1
Den:
-1
Norm:
-100
done.
REF_74 (->arrayPrices_7) := TMP_171(uint256)
checking ref_74
Refernce variable: ref_74
Function name: updateAnchorPrice
asgn
Num:
-1
Den:
-1
Norm:
0
Error with: REF_74 in function updateAnchorPrice
0
[i]Type for REF_74
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_172(uint256) := i_2(uint256)
has variable
[i] TMP_172 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
has variable
[i] i cleared
typecheckig node...
TMP_172(uint256) := i_2(uint256)
checking tmp_172
Temp variable: tmp_172
Function name: updateAnchorPrice
asgn
Num:
Den:
Norm:
0
0
[i]Type for TMP_172
Num:
Den:
Norm:
0
done.
i_3(uint256) = i_2 (c)+ 1
checking i
Local variable: i
Function name: updateAnchorPrice
Constatn varible: 1
Constatn varible: 1
val: 1
Constatn varible: 1
Num:
Den:
Norm:
0
[i]Type for i
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
Reading Function: _handleAnchorPriceUpdate
Function _handleAnchorPriceUpdate not marked
Reading Function: getAnchorPrice
Function name: getAnchorPrice
Function Visibility: public
clearning node...
clearing ir...?
one_8(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
clearing ir...?
arrayPrices_8(uint256[]) := ϕ(['arrayPrices_0', 'arrayPrices_7', 'arrayPrices_10', 'arrayPrices_6', 'arrayPrices_8'])
typecheckig node...
one_8(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: getAnchorPrice
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
arrayPrices_8(uint256[]) := ϕ(['arrayPrices_0', 'arrayPrices_7', 'arrayPrices_10', 'arrayPrices_6', 'arrayPrices_8'])
checking arrayprices
State IR  variable: arrayprices
State variable: arrayprices
Function name: getAnchorPrice
Phi
[i]Type for arrayPrices
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
REF_78 -> LENGTH arrayPrices_8
clearing ir...?
TMP_176(bool) = REF_78 > 0
has variable
[i] TMP_176 cleared
clearing ir...?
CONDITION TMP_176
typecheckig node...
REF_78 -> LENGTH arrayPrices_8
checking ref_78
Refernce variable: ref_78
Function name: getAnchorPrice
[i]Type for REF_78
Num:
Den:
Norm:
-100
done.
TMP_176(bool) = REF_78 > 0
checking tmp_176
Temp variable: tmp_176
Function name: getAnchorPrice
testing gt...
Constatn varible: 0
Constatn varible: 0
val: 0
Num:
-1
Den:
-1
Norm:
-100
True
Constatn varible: 0
Num:
Den:
Norm:
0
[i]Type for TMP_176
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_176
Condition...
Conidtion: 
TMP_176
TMP_176
[x]node added back
clearning node...
clearing ir...?
TMP_177(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_178 = CONVERT TMP_177 to iUTILS
clearing ir...?
TMP_179(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_178(iUTILS), function:sortArray, arguments:['arrayPrices_9']  
has variable
[i] TMP_179 cleared
clearing ir...?
arrayPrices_10(uint256[]) := ϕ(['arrayPrices_7', 'arrayPrices_10', 'arrayPrices_9', 'arrayPrices_6', 'arrayPrices_8'])
clearing ir...?
_sortedAnchorFeed_1(uint256[]) := TMP_179(uint256[])
has variable
[i] _sortedAnchorFeed cleared
typecheckig node...
TMP_177(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_177
Num:
Den:
Norm:
-100
done.
TMP_178 = CONVERT TMP_177 to iUTILS
checking tmp_178
Temp variable: tmp_178
Function name: getAnchorPrice
Num:
Den:
Norm:
0
0
TMP_177
[i]Type for TMP_178
Num:
Den:
Norm:
0
done.
TMP_179(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_178(iUTILS), function:sortArray, arguments:['arrayPrices_9']  
High Level Call: sortarray
checking tmp_179
Temp variable: tmp_179
Function name: getAnchorPrice
High Call: sortArray
func name:sortArray
other func name:sortArray
TMP_179
WIP
TMP_179
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_179
Num:
-1
Den:
-1
Norm:
0
done.
arrayPrices_10(uint256[]) := ϕ(['arrayPrices_7', 'arrayPrices_10', 'arrayPrices_9', 'arrayPrices_6', 'arrayPrices_8'])
checking arrayprices
State IR  variable: arrayprices
State variable: arrayprices
Function name: getAnchorPrice
Phi
[i]Type for arrayPrices
Num:
-1
Den:
-1
Norm:
-100
done.
_sortedAnchorFeed_1(uint256[]) := TMP_179(uint256[])
checking _sortedanchorfeed
Local variable: _sortedanchorfeed
Function name: getAnchorPrice
asgn
Num:
Den:
Norm:
0
0
[i]Type for _sortedAnchorFeed
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
anchorPrice_2(uint256) := one_8(uint256)
has variable
[i] anchorPrice cleared
typecheckig node...
anchorPrice_2(uint256) := one_8(uint256)
checking anchorprice
Local variable: anchorprice
Function name: getAnchorPrice
asgn
Num:
Den:
Norm:
0
0
[i]Type for anchorPrice
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
REF_80(uint256) -> _sortedAnchorFeed_1[2]
clearing ir...?
anchorPrice_1(uint256) := REF_80(uint256)
has variable
[i] anchorPrice cleared
typecheckig node...
REF_80(uint256) -> _sortedAnchorFeed_1[2]
checking ref_80
Refernce variable: ref_80
Function name: getAnchorPrice
INDEX
Num:
-1
Den:
-1
Norm:
0
anchorPrice_1(uint256) := REF_80(uint256)
checking anchorprice
Local variable: anchorprice
Function name: getAnchorPrice
asgn
Num:
Den:
Norm:
0
0
[i]Type for anchorPrice
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Reading Function: getVADERAmount
Function name: getVADERAmount
Function Visibility: public
USDVAmount
Finding type for USDVAmount...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [2]
    den: [-1]
clearning node...
clearing ir...?
one_9(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
typecheckig node...
one_9(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: getVADERAmount
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_180(uint256) = INTERNAL_CALL, Router.getAnchorPrice()()
clearing ir...?
_price_1(uint256) := TMP_180(uint256)
has variable
[i] _price cleared
typecheckig node...
TMP_180(uint256) = INTERNAL_CALL, Router.getAnchorPrice()()
Internal call...
getAnchorPrice
Function: getAnchorPrice
ic
Internal cal param_cache
[i]Type for TMP_180
Num:
Den:
Norm:
-100
done.
_price_1(uint256) := TMP_180(uint256)
checking _price
Local variable: _price
Function name: getVADERAmount
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _price
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_181(uint256) = _price_1 (c)* USDVAmount_1
has variable
[i] TMP_181 cleared
clearing ir...?
TMP_182(uint256) = TMP_181 (c)/ one_10
has variable
[i] TMP_182 cleared
clearing ir...?
RETURN TMP_182
typecheckig node...
TMP_181(uint256) = _price_1 (c)* USDVAmount_1
checking tmp_181
Temp variable: tmp_181
Function name: getVADERAmount
testing mul...
Num:
2
Den:
-1
Norm:
-100
---
Num:
Den:
Norm:
0
r
Num:
2
Den:
-1
Norm:
-100
***
True
False
False
False
Num:
Den:
Norm:
0
[i]Type for TMP_181
Num:
2
Den:
-1
Norm:
0
done.
TMP_182(uint256) = TMP_181 (c)/ one_10
checking tmp_182
Temp variable: tmp_182
Function name: getVADERAmount
Num:
-1
Den:
-1
Norm:
-100
Num:
Den:
Norm:
0
[i]Type for TMP_182
Num:
2
Den:
-1
Norm:
0
done.
RETURN TMP_182
Return...
getVADERAmount
vaderAmount_0
TMP_182
[x]node added back
Reading Function: getUSDVAmount
Function name: getUSDVAmount
Function Visibility: public
vaderAmount
Finding type for vaderAmount...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [1]
    den: [-1]
clearning node...
clearing ir...?
one_11(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
typecheckig node...
one_11(uint256) := ϕ(['one_4', 'one_7', 'one_0', 'one_12', 'one_10'])
checking one
State IR  variable: one
State variable: one
Function name: getUSDVAmount
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_183(uint256) = INTERNAL_CALL, Router.getAnchorPrice()()
clearing ir...?
_price_1(uint256) := TMP_183(uint256)
has variable
[i] _price cleared
typecheckig node...
TMP_183(uint256) = INTERNAL_CALL, Router.getAnchorPrice()()
Internal call...
getAnchorPrice
Function: getAnchorPrice
ic
Internal cal param_cache
[i]Type for TMP_183
Num:
Den:
Norm:
-100
done.
_price_1(uint256) := TMP_183(uint256)
checking _price
Local variable: _price
Function name: getUSDVAmount
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _price
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_184(uint256) = vaderAmount_1 (c)* one_12
has variable
[i] TMP_184 cleared
clearing ir...?
TMP_185(uint256) = TMP_184 (c)/ _price_1
has variable
[i] TMP_185 cleared
clearing ir...?
RETURN TMP_185
typecheckig node...
TMP_184(uint256) = vaderAmount_1 (c)* one_12
checking tmp_184
Temp variable: tmp_184
Function name: getUSDVAmount
testing mul...
Num:
1
Den:
-1
Norm:
-100
Num:
-1
Den:
-1
Norm:
-100
---
Num:
1
Den:
-1
Norm:
-100
r
Num:
-1
Den:
-1
Norm:
-100
***
False
False
False
True
Num:
Den:
Norm:
0
[i]Type for TMP_184
Num:
1
Den:
-1
Norm:
0
done.
TMP_185(uint256) = TMP_184 (c)/ _price_1
checking tmp_185
Temp variable: tmp_185
Function name: getUSDVAmount
Num:
Den:
Norm:
0
[i]Type for TMP_185
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_185
Return...
getUSDVAmount
USDVAmount_0
TMP_185
[x]node added back
Reading Function: borrow
Function borrow not marked
Reading Function: borrowForMember
Function name: borrowForMember
Function Visibility: public
member
Finding type for member...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
amount
Finding type for amount...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
collateralAsset
Finding type for collateralAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
debtAsset
Finding type for debtAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
Param: 3
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
member_1(address) := ϕ(['msg.sender'])
clearing ir...?
amount_1(uint256) := ϕ(['amount_1'])
clearing ir...?
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
debtAsset_1(address) := ϕ(['debtAsset_1'])
clearing ir...?
VADER_11(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_8(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
clearing ir...?
POOLS_60(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_Collateral_1(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_0', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
clearing ir...?
mapCollateralDebt_Debt_1(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_0', 'mapCollateralDebt_Debt_7'])
typecheckig node...
member_1(address) := ϕ(['msg.sender'])
checking member
Local variable: member
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for member
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
amount_1(uint256) := ϕ(['amount_1'])
checking amount
Local variable: amount
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for amount
Num:
-1
Den:
-1
Norm:
-100
done.
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking collateralasset
Local variable: collateralasset
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
debtAsset_1(address) := ϕ(['debtAsset_1'])
checking debtasset
Local variable: debtasset
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for debtAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
VADER_11(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_8(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: borrowForMember
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_60(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_Collateral_1(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_0', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_Debt_1(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_0', 'mapCollateralDebt_Debt_7'])
checking mapcollateraldebt_debt
State IR  variable: mapcollateraldebt_debt
State variable: mapcollateraldebt_debt
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Debt
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_187(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
VADER_12(address) := ϕ(['VADER_38'])
clearing ir...?
TMP_188 = CONVERT TMP_187 to iUTILS
clearing ir...?
HIGH_LEVEL_CALL, dest:TMP_188(iUTILS), function:assetChecks, arguments:['collateralAsset_1', 'debtAsset_1']  
clearing ir...?
VADER_13(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_12', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_10(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_9', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_62(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_61', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_Collateral_3(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_2', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
clearing ir...?
mapCollateralDebt_Debt_3(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7', 'mapCollateralDebt_Debt_2'])
typecheckig node...
TMP_187(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_187
Num:
Den:
Norm:
-100
done.
VADER_12(address) := ϕ(['VADER_38'])
checking vader
State IR  variable: vader
State variable: vader
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_188 = CONVERT TMP_187 to iUTILS
checking tmp_188
Temp variable: tmp_188
Function name: borrowForMember
Num:
Den:
Norm:
-100
0
TMP_187
[i]Type for TMP_188
Num:
Den:
Norm:
0
done.
HIGH_LEVEL_CALL, dest:TMP_188(iUTILS), function:assetChecks, arguments:['collateralAsset_1', 'debtAsset_1']  
High Level Call: assetchecks
High Call: assetChecks
func name:assetChecks
other func name:assetChecks
done.
VADER_13(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_12', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_10(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_9', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: borrowForMember
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_62(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_61', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_Collateral_3(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_2', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_Debt_3(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7', 'mapCollateralDebt_Debt_2'])
checking mapcollateraldebt_debt
State IR  variable: mapcollateraldebt_debt
State variable: mapcollateraldebt_debt
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Debt
Num:
-1
Den:
-1
Norm:
-100
done.
[x]node added back
clearning node...
clearing ir...?
TMP_190(uint256) = INTERNAL_CALL, Router._handleTransferIn(address,address,uint256)(member_1,collateralAsset_1,amount_1)
clearing ir...?
POOLS_63(address) := ϕ(['POOLS_100', 'POOLS_98', 'POOLS_99'])
clearing ir...?
_collateral_1(uint256) := TMP_190(uint256)
has variable
[i] _collateral cleared
typecheckig node...
TMP_190(uint256) = INTERNAL_CALL, Router._handleTransferIn(address,address,uint256)(member_1,collateralAsset_1,amount_1)
Internal call...
_handleTransferIn
member
collateralAsset
amount
Function: _handleTransferIn
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
added
xyz
Function name: _handleTransferIn
Function Visibility: internal
clearning node...
clearing ir...?
_member_1(address) := ϕ(['member_1'])
clearing ir...?
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['amount_1'])
clearing ir...?
POOLS_96(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
_member_1(address) := ϕ(['member_1'])
checking _member
Local variable: _member
Function name: _handleTransferIn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _member
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking _collateralasset
Local variable: _collateralasset
Function name: _handleTransferIn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_amount_1(uint256) := ϕ(['amount_1'])
checking _amount
Local variable: _amount
Function name: _handleTransferIn
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _amount
Num:
-1
Den:
-1
Norm:
-100
done.
POOLS_96(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferIn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_263(bool) = INTERNAL_CALL, Router.isBase(address)(_collateralAsset_1)
clearing ir...?
TMP_264 = CONVERT POOLS_97 to iPOOLS
clearing ir...?
TMP_265(bool) = HIGH_LEVEL_CALL, dest:TMP_264(iPOOLS), function:isSynth, arguments:['_collateralAsset_1']  
has variable
[i] TMP_265 cleared
clearing ir...?
POOLS_98(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_97', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_266(bool) = TMP_263 || TMP_265
has variable
[i] TMP_266 cleared
clearing ir...?
CONDITION TMP_266
typecheckig node...
TMP_263(bool) = INTERNAL_CALL, Router.isBase(address)(_collateralAsset_1)
Internal call...
isBase
_collateralAsset
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
added
xyz
Function name: isBase
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
clearing ir...?
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
typecheckig node...
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
checking token
Local variable: token
Function name: isBase
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: isBase
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: isBase
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_298(bool) = token_1 == VADER_32
has variable
[i] TMP_298 cleared
clearing ir...?
TMP_299(bool) = token_1 == USDV_27
has variable
[i] TMP_299 cleared
clearing ir...?
TMP_300(bool) = TMP_298 || TMP_299
has variable
[i] TMP_300 cleared
clearing ir...?
CONDITION TMP_300
typecheckig node...
TMP_298(bool) = token_1 == VADER_32
checking tmp_298
Temp variable: tmp_298
Function name: isBase
[i]Type for TMP_298
Num:
Den:
Norm:
-100
done.
TMP_299(bool) = token_1 == USDV_27
checking tmp_299
Temp variable: tmp_299
Function name: isBase
[i]Type for TMP_299
Num:
Den:
Norm:
-100
done.
TMP_300(bool) = TMP_298 || TMP_299
checking tmp_300
Temp variable: tmp_300
Function name: isBase
[i]Type for TMP_300
Num:
Den:
Norm:
-100
done.
CONDITION TMP_300
Condition...
Conidtion: 
TMP_300
TMP_300
clearning node...
clearing ir...?
RETURN True
typecheckig node...
RETURN True
Return...
isBase
True
True
clearning node...
typecheckig node...
Checking return valueisBase
True
&&
True
Constatn varible: true
Num:
Den:
Norm:
-100
[i]Type for TMP_263
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_264 = CONVERT POOLS_97 to iPOOLS
checking tmp_264
Temp variable: tmp_264
Function name: _handleTransferIn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_264
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_265(bool) = HIGH_LEVEL_CALL, dest:TMP_264(iPOOLS), function:isSynth, arguments:['_collateralAsset_1']  
High Level Call: issynth
checking tmp_265
Temp variable: tmp_265
Function name: _handleTransferIn
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_265
WIP
hlc contract name: XXX func_name: isSynth
TMP_265
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_265
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_98(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_97', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferIn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_266(bool) = TMP_263 || TMP_265
checking tmp_266
Temp variable: tmp_266
Function name: _handleTransferIn
[i]Type for TMP_266
Num:
Den:
Norm:
-100
done.
CONDITION TMP_266
Condition...
Conidtion: 
TMP_266
TMP_266
clearning node...
clearing ir...?
TMP_268(bool) = INTERNAL_CALL, Router.isPool(address)(_collateralAsset_1)
clearing ir...?
POOLS_99(address) := ϕ(['POOLS_115'])
clearing ir...?
CONDITION TMP_268
typecheckig node...
TMP_268(bool) = INTERNAL_CALL, Router.isPool(address)(_collateralAsset_1)
Internal call...
isPool
_collateralAsset
Function: isPool
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
added
xyz
Function name: isPool
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['_collateralAsset_1', '_collateralAsset_1'])
clearing ir...?
POOLS_113(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
token_1(address) := ϕ(['_collateralAsset_1', '_collateralAsset_1'])
checking token
Local variable: token
Function name: isPool
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for token
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
POOLS_113(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: isPool
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_331 = CONVERT POOLS_113 to iPOOLS
clearing ir...?
TMP_332(bool) = HIGH_LEVEL_CALL, dest:TMP_331(iPOOLS), function:isAnchor, arguments:['token_1']  
has variable
[i] TMP_332 cleared
clearing ir...?
POOLS_114(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_113'])
clearing ir...?
TMP_333 = CONVERT POOLS_114 to iPOOLS
clearing ir...?
TMP_334(bool) = HIGH_LEVEL_CALL, dest:TMP_333(iPOOLS), function:isAsset, arguments:['token_1']  
has variable
[i] TMP_334 cleared
clearing ir...?
POOLS_115(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_114', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_335(bool) = TMP_332 || TMP_334
has variable
[i] TMP_335 cleared
clearing ir...?
CONDITION TMP_335
typecheckig node...
TMP_331 = CONVERT POOLS_113 to iPOOLS
checking tmp_331
Temp variable: tmp_331
Function name: isPool
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_331
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_332(bool) = HIGH_LEVEL_CALL, dest:TMP_331(iPOOLS), function:isAnchor, arguments:['token_1']  
High Level Call: isanchor
checking tmp_332
Temp variable: tmp_332
Function name: isPool
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_332
WIP
hlc contract name: XXX func_name: isAnchor
TMP_332
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_332
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_114(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_113'])
checking pools
State IR  variable: pools
State variable: pools
Function name: isPool
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_333 = CONVERT POOLS_114 to iPOOLS
checking tmp_333
Temp variable: tmp_333
Function name: isPool
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_333
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_334(bool) = HIGH_LEVEL_CALL, dest:TMP_333(iPOOLS), function:isAsset, arguments:['token_1']  
High Level Call: isasset
checking tmp_334
Temp variable: tmp_334
Function name: isPool
High Call: isAsset
func name:isAsset
other func name:isAsset
TMP_334
WIP
hlc contract name: XXX func_name: isAsset
COPIED
[i]Type for TMP_334
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_115(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_114', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: isPool
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_335(bool) = TMP_332 || TMP_334
checking tmp_335
Temp variable: tmp_335
Function name: isPool
[i]Type for TMP_335
Num:
Den:
Norm:
-100
done.
CONDITION TMP_335
Condition...
Conidtion: 
TMP_335
TMP_335
clearning node...
clearing ir...?
pool_1(bool) := True(bool)
has variable
[i] pool cleared
typecheckig node...
pool_1(bool) := True(bool)
checking pool
Local variable: pool
Function name: isPool
asgn
Constatn varible: true
Num:
Den:
Norm:
-100
Constatn varible: true
val: True
0
Constatn varible: true
val: True
[i]Type for pool
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Checking return valueisPool
pool
&&
pool
Num:
Den:
Norm:
-100
[i]Type for TMP_268
Num:
Den:
Norm:
-100
done.
POOLS_99(address) := ϕ(['POOLS_115'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferIn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
CONDITION TMP_268
Condition...
Conidtion: 
TMP_268
TMP_268
clearning node...
clearing ir...?
TMP_269 = CONVERT POOLS_99 to iPOOLS
clearing ir...?
HIGH_LEVEL_CALL, dest:TMP_269(iPOOLS), function:lockUnits, arguments:['_amount_1', '_collateralAsset_1', '_member_1']  
clearing ir...?
POOLS_100(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_269 = CONVERT POOLS_99 to iPOOLS
checking tmp_269
Temp variable: tmp_269
Function name: _handleTransferIn
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_269
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
HIGH_LEVEL_CALL, dest:TMP_269(iPOOLS), function:lockUnits, arguments:['_amount_1', '_collateralAsset_1', '_member_1']  
High Level Call: lockunits
High Call: lockUnits
func name:lockUnits
other func name:lockUnits
done.
POOLS_100(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferIn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_267(uint256) = INTERNAL_CALL, Router._getFunds(address,uint256)(_collateralAsset_1,_amount_1)
clearing ir...?
_inputAmount_2(uint256) := TMP_267(uint256)
has variable
[i] _inputAmount cleared
typecheckig node...
TMP_267(uint256) = INTERNAL_CALL, Router._getFunds(address,uint256)(_collateralAsset_1,_amount_1)
Internal call...
_getFunds
_collateralAsset
_amount
Function: _getFunds
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
added
xyz
Function name: _getFunds
Function Visibility: internal
clearning node...
clearing ir...?
_token_1(address) := ϕ(['_collateralAsset_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['_amount_1'])
typecheckig node...
_token_1(address) := ϕ(['_collateralAsset_1'])
checking _token
Local variable: _token
Function name: _getFunds
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _token
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_amount_1(uint256) := ϕ(['_amount_1'])
checking _amount
Local variable: _amount
Function name: _getFunds
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _amount
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_279 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_280 = CONVERT this to address
clearing ir...?
TMP_281(uint256) = HIGH_LEVEL_CALL, dest:TMP_279(iERC20), function:balanceOf, arguments:['TMP_280']  
has variable
[i] TMP_281 cleared
clearing ir...?
_balance_1(uint256) := TMP_281(uint256)
has variable
[i] _balance cleared
typecheckig node...
TMP_279 = CONVERT _token_1 to iERC20
checking tmp_279
Temp variable: tmp_279
Function name: _getFunds
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_279
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_280 = CONVERT this to address
checking tmp_280
Temp variable: tmp_280
Function name: _getFunds
Num:
Den:
Norm:
-100
not variable
0
this
[i]Type for TMP_280
Num:
Den:
Norm:
0
done.
TMP_281(uint256) = HIGH_LEVEL_CALL, dest:TMP_279(iERC20), function:balanceOf, arguments:['TMP_280']  
High Level Call: balanceof
checking tmp_281
Temp variable: tmp_281
Function name: _getFunds
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_281
WIP
hlc contract name: XXX func_name: balanceOf
TMP_281
Finding type for hlc_0...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_281
Num:
1
Den:
-1
Norm:
0
done.
_balance_1(uint256) := TMP_281(uint256)
checking _balance
Local variable: _balance
Function name: _getFunds
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _balance
Num:
1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_282(bool) = tx.origin == msg.sender
has variable
[i] TMP_282 cleared
clearing ir...?
CONDITION TMP_282
typecheckig node...
TMP_282(bool) = tx.origin == msg.sender
checking tmp_282
Temp variable: tmp_282
Function name: _getFunds
[i]Type for TMP_282
Num:
Den:
Norm:
-100
done.
CONDITION TMP_282
Condition...
Conidtion: 
TMP_282
TMP_282
clearning node...
clearing ir...?
TMP_283 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_284 = CONVERT this to address
clearing ir...?
TMP_285(bool) = HIGH_LEVEL_CALL, dest:TMP_283(iERC20), function:transferTo, arguments:['TMP_284', '_amount_1']  
has variable
[i] TMP_285 cleared
clearing ir...?
TMP_286(None) = SOLIDITY_CALL require(bool)(TMP_285)
typecheckig node...
TMP_283 = CONVERT _token_1 to iERC20
checking tmp_283
Temp variable: tmp_283
Function name: _getFunds
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_283
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_284 = CONVERT this to address
checking tmp_284
Temp variable: tmp_284
Function name: _getFunds
Num:
Den:
Norm:
-100
not variable
0
this
[i]Type for TMP_284
Num:
Den:
Norm:
0
done.
TMP_285(bool) = HIGH_LEVEL_CALL, dest:TMP_283(iERC20), function:transferTo, arguments:['TMP_284', '_amount_1']  
High Level Call: transferto
checking tmp_285
Temp variable: tmp_285
Function name: _getFunds
High Call: transferTo
func name:transferTo
other func name:transferTo
TMP_285
WIP
hlc contract name: XXX func_name: transferTo
TMP_285
Finding type for hlc_1...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_285
Num:
-1
Den:
-1
Norm:
0
done.
TMP_286(None) = SOLIDITY_CALL require(bool)(TMP_285)
checking tmp_286
Temp variable: tmp_286
Function name: _getFunds
[i]Type for TMP_286
Num:
Den:
Norm:
-100
done.
[x]node added back
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_287 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_288 = CONVERT this to address
clearing ir...?
TMP_289(bool) = HIGH_LEVEL_CALL, dest:TMP_287(iERC20), function:transferFrom, arguments:['msg.sender', 'TMP_288', '_amount_1']  
has variable
[i] TMP_289 cleared
clearing ir...?
TMP_290(None) = SOLIDITY_CALL require(bool)(TMP_289)
typecheckig node...
TMP_287 = CONVERT _token_1 to iERC20
checking tmp_287
Temp variable: tmp_287
Function name: _getFunds
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_287
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_288 = CONVERT this to address
checking tmp_288
Temp variable: tmp_288
Function name: _getFunds
Num:
Den:
Norm:
-100
not variable
0
this
[i]Type for TMP_288
Num:
Den:
Norm:
0
done.
TMP_289(bool) = HIGH_LEVEL_CALL, dest:TMP_287(iERC20), function:transferFrom, arguments:['msg.sender', 'TMP_288', '_amount_1']  
High Level Call: transferfrom
checking tmp_289
Temp variable: tmp_289
Function name: _getFunds
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_289
WIP
hlc contract name: XXX func_name: transferFrom
TMP_289
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_289
Num:
-1
Den:
-1
Norm:
0
done.
TMP_290(None) = SOLIDITY_CALL require(bool)(TMP_289)
checking tmp_290
Temp variable: tmp_290
Function name: _getFunds
[i]Type for TMP_290
Num:
Den:
Norm:
-100
done.
[x]node added back
clearning node...
clearing ir...?
TMP_291 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_292 = CONVERT this to address
clearing ir...?
TMP_293(uint256) = HIGH_LEVEL_CALL, dest:TMP_291(iERC20), function:balanceOf, arguments:['TMP_292']  
has variable
[i] TMP_293 cleared
clearing ir...?
TMP_294(uint256) = TMP_293 (c)- _balance_1
has variable
[i] TMP_294 cleared
clearing ir...?
RETURN TMP_294
typecheckig node...
TMP_291 = CONVERT _token_1 to iERC20
checking tmp_291
Temp variable: tmp_291
Function name: _getFunds
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_292 = CONVERT this to address
checking tmp_292
Temp variable: tmp_292
Function name: _getFunds
Num:
Den:
Norm:
-100
not variable
0
this
[i]Type for TMP_292
Num:
Den:
Norm:
0
done.
TMP_293(uint256) = HIGH_LEVEL_CALL, dest:TMP_291(iERC20), function:balanceOf, arguments:['TMP_292']  
High Level Call: balanceof
checking tmp_293
Temp variable: tmp_293
Function name: _getFunds
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_293
WIP
hlc contract name: XXX func_name: balanceOf
TMP_293
Finding type for hlc_3...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_293
Num:
1
Den:
-1
Norm:
0
done.
TMP_294(uint256) = TMP_293 (c)- _balance_1
checking tmp_294
Temp variable: tmp_294
Function name: _getFunds
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
[i]Type for TMP_294
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_294
Return...
_getFunds
TMP_294
[x]node added back
Checking return value_getFunds
TMP_294
&&
TMP_294
Num:
Den:
Norm:
-100
[i]Type for TMP_267
Num:
1
Den:
-1
Norm:
-100
done.
_inputAmount_2(uint256) := TMP_267(uint256)
checking _inputamount
Local variable: _inputamount
Function name: _handleTransferIn
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _inputAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
_inputAmount_1(uint256) := _amount_1(uint256)
has variable
[i] _inputAmount cleared
typecheckig node...
_inputAmount_1(uint256) := _amount_1(uint256)
checking _inputamount
Local variable: _inputamount
Function name: _handleTransferIn
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _inputAmount
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
Checking return value_handleTransferIn
_inputAmount
&&
_inputAmount
Num:
Den:
Norm:
-100
[i]Type for TMP_190
Num:
Den:
Norm:
-100
done.
POOLS_63(address) := ϕ(['POOLS_100', 'POOLS_98', 'POOLS_99'])
checking pools
State IR  variable: pools
State variable: pools
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_collateral_1(uint256) := TMP_190(uint256)
checking _collateral
Local variable: _collateral
Function name: borrowForMember
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _collateral
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_191(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
VADER_15(address) := ϕ(['VADER_38'])
clearing ir...?
TMP_192 = CONVERT TMP_191 to iUTILS
clearing ir...?
TUPLE_1(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_192(iUTILS), function:getCollateralValueInBase, arguments:['member_1', '_collateral_1', 'collateralAsset_1', 'debtAsset_1']  
has variable
clearing ir...?
VADER_16(address) := ϕ(['VADER_20', 'VADER_15', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_13(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_12', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_65(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_64', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_Collateral_6(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_22', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_5'])
clearing ir...?
mapCollateralDebt_Debt_6(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_5', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7'])
clearing ir...?
_debtIssued_1(uint256)= UNPACK TUPLE_1 index: 0 
clearing ir...?
_baseBorrowed_1(uint256)= UNPACK TUPLE_1 index: 1 
typecheckig node...
TMP_191(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_191
Num:
Den:
Norm:
-100
done.
VADER_15(address) := ϕ(['VADER_38'])
checking vader
State IR  variable: vader
State variable: vader
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_192 = CONVERT TMP_191 to iUTILS
checking tmp_192
Temp variable: tmp_192
Function name: borrowForMember
Num:
Den:
Norm:
-100
0
TMP_191
[i]Type for TMP_192
Num:
Den:
Norm:
0
done.
TUPLE_1(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_192(iUTILS), function:getCollateralValueInBase, arguments:['member_1', '_collateral_1', 'collateralAsset_1', 'debtAsset_1']  
High Level Call: getcollateralvalueinbase
checking tuple_1
TUple variable: tuple_1
Function name: borrowForMember
High Call: getCollateralValueInBase
func name:getCollateralValueInBase
other func name:getCollateralValueInBase
TUPLE_1
WIP
TUPLE_1
Finding type for hlc_4...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TUPLE_1
Num:
2
Den:
-1
Norm:
0
done.
VADER_16(address) := ϕ(['VADER_20', 'VADER_15', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_13(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_12', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: borrowForMember
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_65(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_64', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_Collateral_6(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_22', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_5'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_Debt_6(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_5', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7'])
checking mapcollateraldebt_debt
State IR  variable: mapcollateraldebt_debt
State variable: mapcollateraldebt_debt
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Debt
Num:
-1
Den:
-1
Norm:
-100
done.
_debtIssued_1(uint256)= UNPACK TUPLE_1 index: 0 
checking _debtissued
Local variable: _debtissued
Function name: borrowForMember
Reading tuple TUPLE_1 index 0
Finding type for _debtIssued...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for _debtIssued
Num:
-1
Den:
-1
Norm:
0
done.
_baseBorrowed_1(uint256)= UNPACK TUPLE_1 index: 1 
checking _baseborrowed
Local variable: _baseborrowed
Function name: borrowForMember
Reading tuple TUPLE_1 index 1
Finding type for _baseBorrowed...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for _baseBorrowed
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
REF_83(mapping(address => uint256)) -> mapCollateralDebt_Collateral_6[collateralAsset_1]
clearing ir...?
REF_84(uint256) -> REF_83[debtAsset_1]
clearing ir...?
mapCollateralDebt_Collateral_7(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_6'])
clearing ir...?
REF_84(-> mapCollateralDebt_Collateral_7) = REF_84 (c)+ _collateral_1
has variable
typecheckig node...
REF_83(mapping(address => uint256)) -> mapCollateralDebt_Collateral_6[collateralAsset_1]
checking ref_83
Refernce variable: ref_83
Function name: borrowForMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_84(uint256) -> REF_83[debtAsset_1]
checking ref_84
Refernce variable: ref_84
Function name: borrowForMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapCollateralDebt_Collateral_7(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_6'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
REF_84(-> mapCollateralDebt_Collateral_7) = REF_84 (c)+ _collateral_1
checking ref_84
Refernce variable: ref_84
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
0
[i]Type for REF_84
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
REF_85(mapping(address => uint256)) -> mapCollateralDebt_Debt_6[collateralAsset_1]
clearing ir...?
REF_86(uint256) -> REF_85[debtAsset_1]
clearing ir...?
mapCollateralDebt_Debt_7(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_6'])
clearing ir...?
REF_86(-> mapCollateralDebt_Debt_7) = REF_86 (c)+ _debtIssued_1
has variable
typecheckig node...
REF_85(mapping(address => uint256)) -> mapCollateralDebt_Debt_6[collateralAsset_1]
checking ref_85
Refernce variable: ref_85
Function name: borrowForMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_86(uint256) -> REF_85[debtAsset_1]
checking ref_86
Refernce variable: ref_86
Function name: borrowForMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapCollateralDebt_Debt_7(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_6'])
checking mapcollateraldebt_debt
State IR  variable: mapcollateraldebt_debt
State variable: mapcollateraldebt_debt
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Debt
Num:
-1
Den:
-1
Norm:
-100
done.
REF_86(-> mapCollateralDebt_Debt_7) = REF_86 (c)+ _debtIssued_1
checking ref_86
Refernce variable: ref_86
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
0
[i]Type for REF_86
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
INTERNAL_CALL, Router._addDebtToMember(address,uint256,address,uint256,address)(member_1,_collateral_1,collateralAsset_1,_debtIssued_1,debtAsset_1)
typecheckig node...
INTERNAL_CALL, Router._addDebtToMember(address,uint256,address,uint256,address)(member_1,_collateral_1,collateralAsset_1,_debtIssued_1,debtAsset_1)
Internal call...
_addDebtToMember
member
_collateral
collateralAsset
_debtIssued
debtAsset
Function: _addDebtToMember
ic
done.
clearning node...
clearing ir...?
TMP_194(bool) = collateralAsset_1 == VADER_17
has variable
[i] TMP_194 cleared
clearing ir...?
TMP_195 = CONVERT POOLS_66 to iPOOLS
clearing ir...?
TMP_196(bool) = HIGH_LEVEL_CALL, dest:TMP_195(iPOOLS), function:isAnchor, arguments:['debtAsset_1']  
has variable
[i] TMP_196 cleared
clearing ir...?
VADER_18(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_17', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_15(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_14', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_67(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_66', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_197(bool) = TMP_194 || TMP_196
has variable
[i] TMP_197 cleared
clearing ir...?
CONDITION TMP_197
typecheckig node...
TMP_194(bool) = collateralAsset_1 == VADER_17
checking tmp_194
Temp variable: tmp_194
Function name: borrowForMember
[i]Type for TMP_194
Num:
Den:
Norm:
-100
done.
TMP_195 = CONVERT POOLS_66 to iPOOLS
checking tmp_195
Temp variable: tmp_195
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_195
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_196(bool) = HIGH_LEVEL_CALL, dest:TMP_195(iPOOLS), function:isAnchor, arguments:['debtAsset_1']  
High Level Call: isanchor
checking tmp_196
Temp variable: tmp_196
Function name: borrowForMember
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_196
WIP
hlc contract name: XXX func_name: isAnchor
TMP_196
Finding type for hlc_5...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_196
Num:
-1
Den:
-1
Norm:
0
done.
VADER_18(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_17', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_15(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_14', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: borrowForMember
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_67(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_66', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_197(bool) = TMP_194 || TMP_196
checking tmp_197
Temp variable: tmp_197
Function name: borrowForMember
[i]Type for TMP_197
Num:
Den:
Norm:
-100
done.
CONDITION TMP_197
Condition...
Conidtion: 
TMP_197
TMP_197
clearning node...
clearing ir...?
TMP_198 = CONVERT VADER_18 to iERC20
clearing ir...?
TMP_199(bool) = HIGH_LEVEL_CALL, dest:TMP_198(iERC20), function:transfer, arguments:['POOLS_67', '_baseBorrowed_1']  
has variable
[i] TMP_199 cleared
clearing ir...?
VADER_19(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
POOLS_68(address) := ϕ(['POOLS_59', 'POOLS_67', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_198 = CONVERT VADER_18 to iERC20
checking tmp_198
Temp variable: tmp_198
Function name: borrowForMember
Num:
Den:
Norm:
-100
0
VADER
[i]Type for TMP_198
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_199(bool) = HIGH_LEVEL_CALL, dest:TMP_198(iERC20), function:transfer, arguments:['POOLS_67', '_baseBorrowed_1']  
High Level Call: transfer
checking tmp_199
Temp variable: tmp_199
Function name: borrowForMember
High Call: transfer
func name:transfer
other func name:transfer
TMP_199
WIP
hlc contract name: XXX func_name: transfer
TMP_199
Finding type for hlc_6...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_199
Num:
-1
Den:
-1
Norm:
0
done.
VADER_19(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
POOLS_68(address) := ϕ(['POOLS_59', 'POOLS_67', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_202(bool) = collateralAsset_1 == USDV_15
has variable
[i] TMP_202 cleared
clearing ir...?
TMP_203 = CONVERT POOLS_67 to iPOOLS
clearing ir...?
TMP_204(bool) = HIGH_LEVEL_CALL, dest:TMP_203(iPOOLS), function:isAsset, arguments:['debtAsset_1']  
has variable
[i] TMP_204 cleared
clearing ir...?
USDV_16(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_70(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_205(bool) = TMP_202 || TMP_204
has variable
[i] TMP_205 cleared
clearing ir...?
CONDITION TMP_205
typecheckig node...
TMP_202(bool) = collateralAsset_1 == USDV_15
checking tmp_202
Temp variable: tmp_202
Function name: borrowForMember
[i]Type for TMP_202
Num:
Den:
Norm:
-100
done.
TMP_203 = CONVERT POOLS_67 to iPOOLS
checking tmp_203
Temp variable: tmp_203
Function name: borrowForMember
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_203
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_204(bool) = HIGH_LEVEL_CALL, dest:TMP_203(iPOOLS), function:isAsset, arguments:['debtAsset_1']  
High Level Call: isasset
checking tmp_204
Temp variable: tmp_204
Function name: borrowForMember
High Call: isAsset
func name:isAsset
other func name:isAsset
TMP_204
WIP
hlc contract name: XXX func_name: isAsset
COPIED
[i]Type for TMP_204
Num:
-1
Den:
-1
Norm:
0
done.
USDV_16(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: borrowForMember
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_70(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_205(bool) = TMP_202 || TMP_204
checking tmp_205
Temp variable: tmp_205
Function name: borrowForMember
[i]Type for TMP_205
Num:
Den:
Norm:
-100
done.
CONDITION TMP_205
Condition...
Conidtion: 
TMP_205
TMP_205
clearning node...
clearing ir...?
TMP_200 = CONVERT POOLS_68 to iPOOLS
clearing ir...?
TMP_201(uint256) = HIGH_LEVEL_CALL, dest:TMP_200(iPOOLS), function:swap, arguments:['VADER_19', 'debtAsset_1', 'member_1', 'False']  
has variable
[i] TMP_201 cleared
clearing ir...?
VADER_20(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_19', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
POOLS_69(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_68', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_200 = CONVERT POOLS_68 to iPOOLS
checking tmp_200
Temp variable: tmp_200
Function name: borrowForMember
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_200
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_201(uint256) = HIGH_LEVEL_CALL, dest:TMP_200(iPOOLS), function:swap, arguments:['VADER_19', 'debtAsset_1', 'member_1', 'False']  
High Level Call: swap
checking tmp_201
Temp variable: tmp_201
Function name: borrowForMember
High Call: swap
func name:swap
other func name:swap
TMP_201
WIP
hlc contract name: XXX func_name: swap
COPIED
[i]Type for TMP_201
Num:
-1
Den:
-1
Norm:
0
done.
VADER_20(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_19', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
POOLS_69(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_68', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_206 = CONVERT USDV_16 to iERC20
clearing ir...?
TMP_207(bool) = HIGH_LEVEL_CALL, dest:TMP_206(iERC20), function:transfer, arguments:['POOLS_70', '_baseBorrowed_1']  
has variable
[i] TMP_207 cleared
clearing ir...?
USDV_17(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_71(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_206 = CONVERT USDV_16 to iERC20
checking tmp_206
Temp variable: tmp_206
Function name: borrowForMember
Num:
Den:
Norm:
-100
0
USDV
[i]Type for TMP_206
Num:
1
Den:
-1
Norm:
0
done.
TMP_207(bool) = HIGH_LEVEL_CALL, dest:TMP_206(iERC20), function:transfer, arguments:['POOLS_70', '_baseBorrowed_1']  
High Level Call: transfer
checking tmp_207
Temp variable: tmp_207
Function name: borrowForMember
High Call: transfer
func name:transfer
other func name:transfer
TMP_207
WIP
TMP_207
Finding type for hlc_7...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_207
Num:
-1
Den:
-1
Norm:
0
done.
USDV_17(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: borrowForMember
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_71(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
Emit AddCollateral(member_1,collateralAsset_1,amount_1,debtAsset_1,_debtIssued_1)
typecheckig node...
Emit AddCollateral(member_1,collateralAsset_1,amount_1,debtAsset_1,_debtIssued_1)
clearning node...
clearing ir...?
INTERNAL_CALL, Router.payInterest(address,address)(collateralAsset_1,debtAsset_1)
typecheckig node...
INTERNAL_CALL, Router.payInterest(address,address)(collateralAsset_1,debtAsset_1)
Internal call...
payInterest
collateralAsset
debtAsset
Function: payInterest
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
added
xyz
Function name: payInterest
Function Visibility: internal
clearning node...
clearing ir...?
collateralAsset_1(address) := ϕ(['collateralAsset_1', 'collateralAsset_1'])
clearing ir...?
debtAsset_1(address) := ϕ(['debtAsset_1', 'debtAsset_1'])
clearing ir...?
VADER_28(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
POOLS_82(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_interestPaid_13(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_0', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
clearing ir...?
mapCollateralAsset_NextEra_1(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_0', 'mapCollateralAsset_NextEra_3', 'mapCollateralAsset_NextEra_5', 'mapCollateralAsset_NextEra_4'])
typecheckig node...
collateralAsset_1(address) := ϕ(['collateralAsset_1', 'collateralAsset_1'])
checking collateralasset
Local variable: collateralasset
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
debtAsset_1(address) := ϕ(['debtAsset_1', 'debtAsset_1'])
checking debtasset
Local variable: debtasset
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for debtAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
VADER_28(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
POOLS_82(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_interestPaid_13(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_0', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralAsset_NextEra_1(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_0', 'mapCollateralAsset_NextEra_3', 'mapCollateralAsset_NextEra_5', 'mapCollateralAsset_NextEra_4'])
checking mapcollateralasset_nextera
State IR  variable: mapcollateralasset_nextera
State variable: mapcollateralasset_nextera
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralAsset_NextEra
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_238(uint256) = INTERNAL_CALL, Router.getNextEraTime(address,address)(collateralAsset_1,debtAsset_1)
clearing ir...?
mapCollateralAsset_NextEra_2(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_5'])
clearing ir...?
TMP_239(bool) = block.timestamp >= TMP_238
has variable
[i] TMP_239 cleared
clearing ir...?
TMP_240(bool) = INTERNAL_CALL, Router.emitting()()
clearing ir...?
VADER_30(address) := ϕ(['VADER_42'])
clearing ir...?
TMP_241(bool) = TMP_239 && TMP_240
has variable
[i] TMP_241 cleared
clearing ir...?
CONDITION TMP_241
typecheckig node...
TMP_238(uint256) = INTERNAL_CALL, Router.getNextEraTime(address,address)(collateralAsset_1,debtAsset_1)
Internal call...
getNextEraTime
collateralAsset
debtAsset
Function: getNextEraTime
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
added
xyz
Function name: getNextEraTime
Function Visibility: public
clearning node...
clearing ir...?
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
debtAsset_1(address) := ϕ(['debtAsset_1'])
clearing ir...?
mapCollateralAsset_NextEra_5(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_0', 'mapCollateralAsset_NextEra_3', 'mapCollateralAsset_NextEra_5', 'mapCollateralAsset_NextEra_4'])
typecheckig node...
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking collateralasset
Local variable: collateralasset
Function name: getNextEraTime
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
debtAsset_1(address) := ϕ(['debtAsset_1'])
checking debtasset
Local variable: debtasset
Function name: getNextEraTime
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for debtAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralAsset_NextEra_5(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_0', 'mapCollateralAsset_NextEra_3', 'mapCollateralAsset_NextEra_5', 'mapCollateralAsset_NextEra_4'])
checking mapcollateralasset_nextera
State IR  variable: mapcollateralasset_nextera
State variable: mapcollateralasset_nextera
Function name: getNextEraTime
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralAsset_NextEra
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
REF_186(mapping(address => uint256)) -> mapCollateralAsset_NextEra_5[collateralAsset_1]
clearing ir...?
REF_187(uint256) -> REF_186[debtAsset_1]
clearing ir...?
RETURN REF_187
typecheckig node...
REF_186(mapping(address => uint256)) -> mapCollateralAsset_NextEra_5[collateralAsset_1]
checking ref_186
Refernce variable: ref_186
Function name: getNextEraTime
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_187(uint256) -> REF_186[debtAsset_1]
checking ref_187
Refernce variable: ref_187
Function name: getNextEraTime
INDEX
Num:
-1
Den:
-1
Norm:
-100
RETURN REF_187
Return...
getNextEraTime
REF_187
Checking return valuegetNextEraTime
REF_187
&&
REF_187
Num:
Den:
Norm:
-100
[i]Type for TMP_238
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralAsset_NextEra_2(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_5'])
checking mapcollateralasset_nextera
State IR  variable: mapcollateralasset_nextera
State variable: mapcollateralasset_nextera
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralAsset_NextEra
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_239(bool) = block.timestamp >= TMP_238
checking tmp_239
Temp variable: tmp_239
Function name: payInterest
testing gt...
[i]Type for TMP_239
Num:
Den:
Norm:
-100
done.
TMP_240(bool) = INTERNAL_CALL, Router.emitting()()
Internal call...
emitting
Function: emitting
ic
Internal cal param_cache
added
xyz
Function name: emitting
Function Visibility: public
clearning node...
clearing ir...?
VADER_41(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
typecheckig node...
VADER_41(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: emitting
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_329 = CONVERT VADER_41 to iVADER
clearing ir...?
TMP_330(bool) = HIGH_LEVEL_CALL, dest:TMP_329(iVADER), function:emitting, arguments:[]  
has variable
[i] TMP_330 cleared
clearing ir...?
VADER_42(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_41', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
RETURN TMP_330
typecheckig node...
TMP_329 = CONVERT VADER_41 to iVADER
checking tmp_329
Temp variable: tmp_329
Function name: emitting
Num:
Den:
Norm:
-100
0
VADER
[i]Type for TMP_329
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_330(bool) = HIGH_LEVEL_CALL, dest:TMP_329(iVADER), function:emitting, arguments:[]  
High Level Call: emitting
checking tmp_330
Temp variable: tmp_330
Function name: emitting
High Call: emitting
func name:emitting
other func name:emitting
TMP_330
WIP
hlc contract name: XXX func_name: emitting
TMP_330
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_330
Num:
-1
Den:
-1
Norm:
0
done.
VADER_42(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_41', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: emitting
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
RETURN TMP_330
Return...
emitting
TMP_330
Checking return valueemitting
TMP_330
&&
TMP_330
Num:
Den:
Norm:
-100
[i]Type for TMP_240
Num:
-1
Den:
-1
Norm:
-100
done.
VADER_30(address) := ϕ(['VADER_42'])
checking vader
State IR  variable: vader
State variable: vader
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_241(bool) = TMP_239 && TMP_240
checking tmp_241
Temp variable: tmp_241
Function name: payInterest
[i]Type for TMP_241
Num:
Den:
Norm:
-100
done.
CONDITION TMP_241
Condition...
Conidtion: 
TMP_241
TMP_241
clearning node...
clearing ir...?
REF_105(mapping(address => uint256)) -> mapCollateralAsset_NextEra_3[collateralAsset_1]
clearing ir...?
REF_106(uint256) -> REF_105[debtAsset_1]
clearing ir...?
TMP_242(uint256) = block.timestamp (c)- REF_106
has variable
[i] TMP_242 cleared
clearing ir...?
_timeElapsed_1(uint256) := TMP_242(uint256)
has variable
[i] _timeElapsed cleared
typecheckig node...
REF_105(mapping(address => uint256)) -> mapCollateralAsset_NextEra_3[collateralAsset_1]
checking ref_105
Refernce variable: ref_105
Function name: payInterest
INDEX
Num:
Den:
Norm:
-100
mapCollateralAsset_NextEra
REF_106(uint256) -> REF_105[debtAsset_1]
checking ref_106
Refernce variable: ref_106
Function name: payInterest
INDEX
Num:
-1
Den:
-1
Norm:
0
TMP_242(uint256) = block.timestamp (c)- REF_106
checking tmp_242
Temp variable: tmp_242
Function name: payInterest
[i]Type for TMP_242
Num:
Den:
Norm:
-100
done.
_timeElapsed_1(uint256) := TMP_242(uint256)
checking _timeelapsed
Local variable: _timeelapsed
Function name: payInterest
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _timeElapsed
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_107(mapping(address => uint256)) -> mapCollateralAsset_NextEra_3[collateralAsset_1]
clearing ir...?
REF_108(uint256) -> REF_107[debtAsset_1]
clearing ir...?
TMP_243 = CONVERT VADER_30 to iVADER
clearing ir...?
TMP_244(uint256) = HIGH_LEVEL_CALL, dest:TMP_243(iVADER), function:secondsPerEra, arguments:[]  
has variable
[i] TMP_244 cleared
clearing ir...?
VADER_31(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
POOLS_85(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_interestPaid_16(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_20'])
clearing ir...?
TMP_245(uint256) = block.timestamp (c)+ TMP_244
has variable
[i] TMP_245 cleared
clearing ir...?
mapCollateralAsset_NextEra_4(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_3'])
clearing ir...?
REF_108 (->mapCollateralAsset_NextEra_4) := TMP_245(uint256)
has variable
typecheckig node...
REF_107(mapping(address => uint256)) -> mapCollateralAsset_NextEra_3[collateralAsset_1]
checking ref_107
Refernce variable: ref_107
Function name: payInterest
INDEX
Num:
Den:
Norm:
-100
mapCollateralAsset_NextEra
REF_108(uint256) -> REF_107[debtAsset_1]
checking ref_108
Refernce variable: ref_108
Function name: payInterest
INDEX
Num:
-1
Den:
-1
Norm:
0
TMP_243 = CONVERT VADER_30 to iVADER
checking tmp_243
Temp variable: tmp_243
Function name: payInterest
Num:
Den:
Norm:
-100
0
VADER
[i]Type for TMP_243
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_244(uint256) = HIGH_LEVEL_CALL, dest:TMP_243(iVADER), function:secondsPerEra, arguments:[]  
High Level Call: secondsperera
checking tmp_244
Temp variable: tmp_244
Function name: payInterest
High Call: secondsPerEra
func name:secondsPerEra
other func name:secondsPerEra
TMP_244
WIP
hlc contract name: XXX func_name: secondsPerEra
TMP_244
Finding type for hlc_1...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_244
Num:
-1
Den:
-1
Norm:
0
done.
VADER_31(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
POOLS_85(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_interestPaid_16(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_20'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_245(uint256) = block.timestamp (c)+ TMP_244
checking tmp_245
Temp variable: tmp_245
Function name: payInterest
[i]Type for TMP_245
Num:
Den:
Norm:
-100
done.
mapCollateralAsset_NextEra_4(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_3'])
checking mapcollateralasset_nextera
State IR  variable: mapcollateralasset_nextera
State variable: mapcollateralasset_nextera
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralAsset_NextEra
Num:
-1
Den:
-1
Norm:
-100
done.
REF_108 (->mapCollateralAsset_NextEra_4) := TMP_245(uint256)
checking ref_108
Refernce variable: ref_108
Function name: payInterest
asgn
Num:
-1
Den:
-1
Norm:
-100
0
[i]Type for REF_108
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_246(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_247 = CONVERT TMP_246 to iUTILS
clearing ir...?
TMP_248(uint256) = HIGH_LEVEL_CALL, dest:TMP_247(iUTILS), function:getInterestOwed, arguments:['collateralAsset_1', 'debtAsset_1', '_timeElapsed_1']  
has variable
[i] TMP_248 cleared
clearing ir...?
POOLS_87(address) := ϕ(['POOLS_86', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_interestPaid_18(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_17', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
clearing ir...?
_interestOwed_1(uint256) := TMP_248(uint256)
has variable
[i] _interestOwed cleared
typecheckig node...
TMP_246(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_246
Num:
Den:
Norm:
-100
done.
TMP_247 = CONVERT TMP_246 to iUTILS
checking tmp_247
Temp variable: tmp_247
Function name: payInterest
Num:
Den:
Norm:
-100
0
TMP_246
[i]Type for TMP_247
Num:
Den:
Norm:
0
done.
TMP_248(uint256) = HIGH_LEVEL_CALL, dest:TMP_247(iUTILS), function:getInterestOwed, arguments:['collateralAsset_1', 'debtAsset_1', '_timeElapsed_1']  
High Level Call: getinterestowed
checking tmp_248
Temp variable: tmp_248
Function name: payInterest
High Call: getInterestOwed
func name:getInterestOwed
other func name:getInterestOwed
TMP_248
WIP
TMP_248
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_248
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_87(address) := ϕ(['POOLS_86', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_interestPaid_18(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_17', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
_interestOwed_1(uint256) := TMP_248(uint256)
checking _interestowed
Local variable: _interestowed
Function name: payInterest
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _interestOwed
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
REF_111(mapping(address => uint256)) -> mapCollateralDebt_interestPaid_18[collateralAsset_1]
clearing ir...?
REF_112(uint256) -> REF_111[debtAsset_1]
clearing ir...?
mapCollateralDebt_interestPaid_19(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_18'])
clearing ir...?
REF_112(-> mapCollateralDebt_interestPaid_19) = REF_112 (c)+ _interestOwed_1
has variable
typecheckig node...
REF_111(mapping(address => uint256)) -> mapCollateralDebt_interestPaid_18[collateralAsset_1]
checking ref_111
Refernce variable: ref_111
Function name: payInterest
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_112(uint256) -> REF_111[debtAsset_1]
checking ref_112
Refernce variable: ref_112
Function name: payInterest
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapCollateralDebt_interestPaid_19(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_18'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
REF_112(-> mapCollateralDebt_interestPaid_19) = REF_112 (c)+ _interestOwed_1
checking ref_112
Refernce variable: ref_112
Function name: payInterest
Num:
-1
Den:
-1
Norm:
0
[i]Type for REF_112
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
INTERNAL_CALL, Router._removeCollateral(uint256,address,address)(_interestOwed_1,collateralAsset_1,debtAsset_1)
typecheckig node...
INTERNAL_CALL, Router._removeCollateral(uint256,address,address)(_interestOwed_1,collateralAsset_1,debtAsset_1)
Internal call...
_removeCollateral
_interestOwed
collateralAsset
debtAsset
Function: _removeCollateral
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
added
xyz
Function name: _removeCollateral
Function Visibility: internal
clearning node...
clearing ir...?
_collateral_1(uint256) := ϕ(['_interestOwed_1'])
clearing ir...?
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
_debtAsset_1(address) := ϕ(['debtAsset_1'])
clearing ir...?
mapCollateralDebt_Collateral_20(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_0', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
typecheckig node...
_collateral_1(uint256) := ϕ(['_interestOwed_1'])
checking _collateral
Local variable: _collateral
Function name: _removeCollateral
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _collateral
Num:
-1
Den:
-1
Norm:
-100
done.
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking _collateralasset
Local variable: _collateralasset
Function name: _removeCollateral
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_debtAsset_1(address) := ϕ(['debtAsset_1'])
checking _debtasset
Local variable: _debtasset
Function name: _removeCollateral
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _debtAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_Collateral_20(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_0', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: _removeCollateral
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
REF_148(mapping(address => uint256)) -> mapCollateralDebt_Collateral_20[_collateralAsset_1]
clearing ir...?
REF_149(uint256) -> REF_148[_debtAsset_1]
clearing ir...?
mapCollateralDebt_Collateral_21(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_20'])
clearing ir...?
REF_149(-> mapCollateralDebt_Collateral_21) = REF_149 (c)- _collateral_1
has variable
typecheckig node...
REF_148(mapping(address => uint256)) -> mapCollateralDebt_Collateral_20[_collateralAsset_1]
checking ref_148
Refernce variable: ref_148
Function name: _removeCollateral
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_149(uint256) -> REF_148[_debtAsset_1]
checking ref_149
Refernce variable: ref_149
Function name: _removeCollateral
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapCollateralDebt_Collateral_21(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_20'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: _removeCollateral
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
REF_149(-> mapCollateralDebt_Collateral_21) = REF_149 (c)- _collateral_1
checking ref_149
Refernce variable: ref_149
Function name: _removeCollateral
Num:
-1
Den:
-1
Norm:
0
Num:
-1
Den:
-1
Norm:
-100
Num:
-1
Den:
-1
Norm:
0
[i]Type for REF_149
Num:
-1
Den:
-1
Norm:
0
done.
Checking return value_removeCollateral
done.
clearning node...
clearing ir...?
TMP_250(bool) = INTERNAL_CALL, Router.isBase(address)(collateralAsset_1)
clearing ir...?
CONDITION TMP_250
typecheckig node...
TMP_250(bool) = INTERNAL_CALL, Router.isBase(address)(collateralAsset_1)
Internal call...
isBase
collateralAsset
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
added
xyz
Function name: isBase
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
clearing ir...?
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
typecheckig node...
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
checking token
Local variable: token
Function name: isBase
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: isBase
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: isBase
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_298(bool) = token_1 == VADER_32
has variable
[i] TMP_298 cleared
clearing ir...?
TMP_299(bool) = token_1 == USDV_27
has variable
[i] TMP_299 cleared
clearing ir...?
TMP_300(bool) = TMP_298 || TMP_299
has variable
[i] TMP_300 cleared
clearing ir...?
CONDITION TMP_300
typecheckig node...
TMP_298(bool) = token_1 == VADER_32
checking tmp_298
Temp variable: tmp_298
Function name: isBase
[i]Type for TMP_298
Num:
Den:
Norm:
-100
done.
TMP_299(bool) = token_1 == USDV_27
checking tmp_299
Temp variable: tmp_299
Function name: isBase
[i]Type for TMP_299
Num:
Den:
Norm:
-100
done.
TMP_300(bool) = TMP_298 || TMP_299
checking tmp_300
Temp variable: tmp_300
Function name: isBase
[i]Type for TMP_300
Num:
Den:
Norm:
-100
done.
CONDITION TMP_300
Condition...
Conidtion: 
TMP_300
TMP_300
clearning node...
clearing ir...?
RETURN True
typecheckig node...
RETURN True
Return...
isBase
True
True
clearning node...
typecheckig node...
Checking return valueisBase
True
&&
True
Constatn varible: true
Num:
Den:
Norm:
-100
[i]Type for TMP_250
Num:
-1
Den:
-1
Norm:
-100
done.
CONDITION TMP_250
Condition...
Conidtion: 
TMP_250
TMP_250
clearning node...
clearing ir...?
TMP_251 = CONVERT collateralAsset_1 to iERC20
clearing ir...?
TMP_252(bool) = HIGH_LEVEL_CALL, dest:TMP_251(iERC20), function:transfer, arguments:['POOLS_89', '_interestOwed_1']  
has variable
[i] TMP_252 cleared
clearing ir...?
POOLS_90(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_89'])
typecheckig node...
TMP_251 = CONVERT collateralAsset_1 to iERC20
checking tmp_251
Temp variable: tmp_251
Function name: payInterest
Num:
Den:
Norm:
-100
0
collateralAsset
[i]Type for TMP_251
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_252(bool) = HIGH_LEVEL_CALL, dest:TMP_251(iERC20), function:transfer, arguments:['POOLS_89', '_interestOwed_1']  
High Level Call: transfer
checking tmp_252
Temp variable: tmp_252
Function name: payInterest
High Call: transfer
func name:transfer
other func name:transfer
TMP_252
WIP
hlc contract name: XXX func_name: transfer
TMP_252
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_252
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_90(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_89'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_255 = CONVERT POOLS_89 to iPOOLS
clearing ir...?
TMP_256(bool) = HIGH_LEVEL_CALL, dest:TMP_255(iPOOLS), function:isSynth, arguments:['collateralAsset_1']  
has variable
[i] TMP_256 cleared
clearing ir...?
POOLS_92(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
CONDITION TMP_256
typecheckig node...
TMP_255 = CONVERT POOLS_89 to iPOOLS
checking tmp_255
Temp variable: tmp_255
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_255
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_256(bool) = HIGH_LEVEL_CALL, dest:TMP_255(iPOOLS), function:isSynth, arguments:['collateralAsset_1']  
High Level Call: issynth
checking tmp_256
Temp variable: tmp_256
Function name: payInterest
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_256
WIP
hlc contract name: XXX func_name: isSynth
TMP_256
Finding type for hlc_1...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_256
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_92(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
CONDITION TMP_256
Condition...
Conidtion: 
TMP_256
TMP_256
clearning node...
clearing ir...?
TMP_253 = CONVERT POOLS_90 to iPOOLS
clearing ir...?
HIGH_LEVEL_CALL, dest:TMP_253(iPOOLS), function:sync, arguments:['collateralAsset_1', 'debtAsset_1']  
clearing ir...?
POOLS_91(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_253 = CONVERT POOLS_90 to iPOOLS
checking tmp_253
Temp variable: tmp_253
Function name: payInterest
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_253
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
HIGH_LEVEL_CALL, dest:TMP_253(iPOOLS), function:sync, arguments:['collateralAsset_1', 'debtAsset_1']  
High Level Call: sync
High Call: sync
func name:sync
other func name:sync
done.
POOLS_91(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_257 = CONVERT collateralAsset_1 to iERC20
clearing ir...?
TMP_258(bool) = HIGH_LEVEL_CALL, dest:TMP_257(iERC20), function:transfer, arguments:['POOLS_92', '_interestOwed_1']  
has variable
[i] TMP_258 cleared
clearing ir...?
POOLS_93(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_257 = CONVERT collateralAsset_1 to iERC20
checking tmp_257
Temp variable: tmp_257
Function name: payInterest
Num:
Den:
Norm:
-100
0
collateralAsset
[i]Type for TMP_257
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_258(bool) = HIGH_LEVEL_CALL, dest:TMP_257(iERC20), function:transfer, arguments:['POOLS_92', '_interestOwed_1']  
High Level Call: transfer
checking tmp_258
Temp variable: tmp_258
Function name: payInterest
High Call: transfer
func name:transfer
other func name:transfer
TMP_258
WIP
hlc contract name: XXX func_name: transfer
TMP_258
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_258
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_93(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_259 = CONVERT POOLS_93 to iPOOLS
clearing ir...?
TMP_260 = CONVERT collateralAsset_1 to iSYNTH
clearing ir...?
TMP_261(address) = HIGH_LEVEL_CALL, dest:TMP_260(iSYNTH), function:TOKEN, arguments:[]  
has variable
[i] TMP_261 cleared
clearing ir...?
POOLS_94(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_93', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
HIGH_LEVEL_CALL, dest:TMP_259(iPOOLS), function:syncSynth, arguments:['TMP_261']  
clearing ir...?
POOLS_95(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_94', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_259 = CONVERT POOLS_93 to iPOOLS
checking tmp_259
Temp variable: tmp_259
Function name: payInterest
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_259
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_260 = CONVERT collateralAsset_1 to iSYNTH
checking tmp_260
Temp variable: tmp_260
Function name: payInterest
Num:
Den:
Norm:
-100
0
collateralAsset
[i]Type for TMP_260
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_261(address) = HIGH_LEVEL_CALL, dest:TMP_260(iSYNTH), function:TOKEN, arguments:[]  
High Level Call: token
checking tmp_261
Temp variable: tmp_261
Function name: payInterest
High Call: TOKEN
func name:TOKEN
other func name:TOKEN
TMP_261
WIP
hlc contract name: XXX func_name: TOKEN
TMP_261
Finding type for hlc_3...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
[i]Type for TMP_261
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
POOLS_94(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_93', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
HIGH_LEVEL_CALL, dest:TMP_259(iPOOLS), function:syncSynth, arguments:['TMP_261']  
High Level Call: syncsynth
High Call: syncSynth
func name:syncSynth
other func name:syncSynth
done.
POOLS_95(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_94', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
Checking return valuepayInterest
done.
clearning node...
clearing ir...?
TMP_208 = CONVERT POOLS_71 to iPOOLS
clearing ir...?
TMP_209(uint256) = HIGH_LEVEL_CALL, dest:TMP_208(iPOOLS), function:swap, arguments:['USDV_17', 'debtAsset_1', 'member_1', 'False']  
has variable
[i] TMP_209 cleared
clearing ir...?
USDV_18(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_17', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_72(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_71', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_208 = CONVERT POOLS_71 to iPOOLS
checking tmp_208
Temp variable: tmp_208
Function name: borrowForMember
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_208
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_209(uint256) = HIGH_LEVEL_CALL, dest:TMP_208(iPOOLS), function:swap, arguments:['USDV_17', 'debtAsset_1', 'member_1', 'False']  
High Level Call: swap
checking tmp_209
Temp variable: tmp_209
Function name: borrowForMember
High Call: swap
func name:swap
other func name:swap
TMP_209
WIP
hlc contract name: XXX func_name: swap
COPIED
[i]Type for TMP_209
Num:
-1
Den:
-1
Norm:
0
done.
USDV_18(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_17', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: borrowForMember
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_72(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_71', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: borrowForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
RETURN _debtIssued_1
typecheckig node...
RETURN _debtIssued_1
Return...
borrowForMember
_debtIssued_1
Reading Function: repay
Function repay not marked
Reading Function: repayForMember
Function name: repayForMember
Function Visibility: public
member
Finding type for member...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
basisPoints
Finding type for basisPoints...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
collateralAsset
Finding type for collateralAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
debtAsset
Finding type for debtAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
Param: 3
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
member_1(address) := ϕ(['msg.sender'])
clearing ir...?
basisPoints_1(uint256) := ϕ(['amount_1'])
clearing ir...?
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
debtAsset_1(address) := ϕ(['debtAsset_1'])
clearing ir...?
VADER_21(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_19(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
clearing ir...?
POOLS_73(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_Collateral_8(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_0', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
clearing ir...?
mapCollateralDebt_Debt_8(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_0', 'mapCollateralDebt_Debt_7'])
clearing ir...?
mapCollateralDebt_interestPaid_1(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_0', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
typecheckig node...
member_1(address) := ϕ(['msg.sender'])
checking member
Local variable: member
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for member
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
basisPoints_1(uint256) := ϕ(['amount_1'])
checking basispoints
Local variable: basispoints
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for basisPoints
Num:
-1
Den:
-1
Norm:
-100
done.
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking collateralasset
Local variable: collateralasset
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
debtAsset_1(address) := ϕ(['debtAsset_1'])
checking debtasset
Local variable: debtasset
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for debtAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
VADER_21(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_19(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: repayForMember
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_73(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_Collateral_8(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_0', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_Debt_8(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_0', 'mapCollateralDebt_Debt_7'])
checking mapcollateraldebt_debt
State IR  variable: mapcollateraldebt_debt
State variable: mapcollateraldebt_debt
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Debt
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_interestPaid_1(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_0', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_213(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
VADER_22(address) := ϕ(['VADER_38'])
clearing ir...?
TMP_214 = CONVERT TMP_213 to iUTILS
clearing ir...?
TMP_215(uint256) = INTERNAL_CALL, Router.getMemberDebt(address,address,address)(member_1,collateralAsset_1,debtAsset_1)
clearing ir...?
TMP_216(uint256) = HIGH_LEVEL_CALL, dest:TMP_214(iUTILS), function:calcPart, arguments:['basisPoints_1', 'TMP_215']  
has variable
[i] TMP_216 cleared
clearing ir...?
VADER_24(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_23', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_22(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_21', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_76(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_75', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_Collateral_11(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_10', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
clearing ir...?
mapCollateralDebt_Debt_11(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7', 'mapCollateralDebt_Debt_10'])
clearing ir...?
mapCollateralDebt_interestPaid_4(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_3', 'mapCollateralDebt_interestPaid_20'])
clearing ir...?
_amount_1(uint256) := TMP_216(uint256)
has variable
[i] _amount cleared
typecheckig node...
TMP_213(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_213
Num:
Den:
Norm:
-100
done.
VADER_22(address) := ϕ(['VADER_38'])
checking vader
State IR  variable: vader
State variable: vader
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_214 = CONVERT TMP_213 to iUTILS
checking tmp_214
Temp variable: tmp_214
Function name: repayForMember
Num:
Den:
Norm:
-100
0
TMP_213
[i]Type for TMP_214
Num:
Den:
Norm:
0
done.
TMP_215(uint256) = INTERNAL_CALL, Router.getMemberDebt(address,address,address)(member_1,collateralAsset_1,debtAsset_1)
Internal call...
getMemberDebt
member
collateralAsset
debtAsset
Function: getMemberDebt
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
added
xyz
Function name: getMemberDebt
Function Visibility: public
clearning node...
clearing ir...?
member_1(address) := ϕ(['member_1'])
clearing ir...?
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
debtAsset_1(address) := ϕ(['debtAsset_1'])
clearing ir...?
mapMember_Collateral_8(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_0', 'mapMember_Collateral_7', 'mapMember_Collateral_3', 'mapMember_Collateral_8', 'mapMember_Collateral_6'])
typecheckig node...
member_1(address) := ϕ(['member_1'])
checking member
Local variable: member
Function name: getMemberDebt
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for member
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking collateralasset
Local variable: collateralasset
Function name: getMemberDebt
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
debtAsset_1(address) := ϕ(['debtAsset_1'])
checking debtasset
Local variable: debtasset
Function name: getMemberDebt
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for debtAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapMember_Collateral_8(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_0', 'mapMember_Collateral_7', 'mapMember_Collateral_3', 'mapMember_Collateral_8', 'mapMember_Collateral_6'])
checking mapmember_collateral
State IR  variable: mapmember_collateral
State variable: mapmember_collateral
Function name: getMemberDebt
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMember_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
REF_175(Router.CollateralDetails) -> mapMember_Collateral_8[member_1]
clearing ir...?
REF_176(mapping(address => Router.DebtDetails)) -> REF_175.mapCollateral_Debt
clearing ir...?
REF_177(Router.DebtDetails) -> REF_176[collateralAsset_1]
clearing ir...?
REF_178(mapping(address => uint256)) -> REF_177.debt
clearing ir...?
REF_179(uint256) -> REF_178[debtAsset_1]
clearing ir...?
RETURN REF_179
typecheckig node...
REF_175(Router.CollateralDetails) -> mapMember_Collateral_8[member_1]
checking ref_175
Refernce variable: ref_175
Function name: getMemberDebt
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_176(mapping(address => Router.DebtDetails)) -> REF_175.mapCollateral_Debt
checking ref_176
Refernce variable: ref_176
Function name: getMemberDebt
MEMBER
REF_177(Router.DebtDetails) -> REF_176[collateralAsset_1]
checking ref_177
Refernce variable: ref_177
Function name: getMemberDebt
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_178(mapping(address => uint256)) -> REF_177.debt
checking ref_178
Refernce variable: ref_178
Function name: getMemberDebt
MEMBER
REF_179(uint256) -> REF_178[debtAsset_1]
checking ref_179
Refernce variable: ref_179
Function name: getMemberDebt
INDEX
Num:
-1
Den:
-1
Norm:
-100
RETURN REF_179
Return...
getMemberDebt
REF_179
Checking return valuegetMemberDebt
REF_179
&&
REF_179
Num:
Den:
Norm:
-100
[i]Type for TMP_215
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_216(uint256) = HIGH_LEVEL_CALL, dest:TMP_214(iUTILS), function:calcPart, arguments:['basisPoints_1', 'TMP_215']  
High Level Call: calcpart
checking tmp_216
Temp variable: tmp_216
Function name: repayForMember
High Call: calcPart
func name:calcPart
other func name:calcPart
TMP_216
WIP
TMP_216
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_216
Num:
-1
Den:
-1
Norm:
0
done.
VADER_24(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_23', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_22(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_21', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: repayForMember
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_76(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_75', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_Collateral_11(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_10', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_Debt_11(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7', 'mapCollateralDebt_Debt_10'])
checking mapcollateraldebt_debt
State IR  variable: mapcollateraldebt_debt
State variable: mapcollateraldebt_debt
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Debt
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_interestPaid_4(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_3', 'mapCollateralDebt_interestPaid_20'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
_amount_1(uint256) := TMP_216(uint256)
checking _amount
Local variable: _amount
Function name: repayForMember
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _amount
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_217(uint256) = INTERNAL_CALL, Router.moveTokenToPools(address,uint256)(debtAsset_1,_amount_1)
clearing ir...?
VADER_25(address) := ϕ(['VADER_36'])
clearing ir...?
USDV_23(address) := ϕ(['USDV_31'])
clearing ir...?
POOLS_77(address) := ϕ(['POOLS_112', 'POOLS_109', 'POOLS_108'])
clearing ir...?
_debt_1(uint256) := TMP_217(uint256)
has variable
[i] _debt cleared
typecheckig node...
TMP_217(uint256) = INTERNAL_CALL, Router.moveTokenToPools(address,uint256)(debtAsset_1,_amount_1)
Internal call...
moveTokenToPools
debtAsset
_amount
Function: moveTokenToPools
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
added
xyz
Function name: moveTokenToPools
Function Visibility: internal
clearning node...
clearing ir...?
_token_1(address) := ϕ(['token_1', 'TMP_20', 'inputToken_1', 'base_1', 'debtAsset_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['inputToken_1', 'inputBase_1', 'inputAmount_1', '_amount_1'])
clearing ir...?
VADER_35(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_30(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
clearing ir...?
POOLS_106(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
_token_1(address) := ϕ(['token_1', 'TMP_20', 'inputToken_1', 'base_1', 'debtAsset_1'])
checking _token
Local variable: _token
Function name: moveTokenToPools
Phi
[i]Type for _token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
_amount_1(uint256) := ϕ(['inputToken_1', 'inputBase_1', 'inputAmount_1', '_amount_1'])
checking _amount
Local variable: _amount
Function name: moveTokenToPools
Phi
[i]Type for _amount
Num:
1
Den:
-1
Norm:
-100
done.
VADER_35(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: moveTokenToPools
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_30(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: moveTokenToPools
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_106(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_307(bool) = _token_1 == VADER_35
has variable
[i] TMP_307 cleared
clearing ir...?
TMP_308(bool) = _token_1 == USDV_30
has variable
[i] TMP_308 cleared
clearing ir...?
TMP_309(bool) = TMP_307 || TMP_308
has variable
[i] TMP_309 cleared
clearing ir...?
TMP_310 = CONVERT POOLS_106 to iPOOLS
clearing ir...?
TMP_311(bool) = HIGH_LEVEL_CALL, dest:TMP_310(iPOOLS), function:isSynth, arguments:['_token_1']  
has variable
[i] TMP_311 cleared
clearing ir...?
VADER_36(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_35', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_31(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_30', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_107(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_106'])
clearing ir...?
TMP_312(bool) = TMP_309 || TMP_311
has variable
[i] TMP_312 cleared
clearing ir...?
CONDITION TMP_312
typecheckig node...
TMP_307(bool) = _token_1 == VADER_35
checking tmp_307
Temp variable: tmp_307
Function name: moveTokenToPools
[i]Type for TMP_307
Num:
Den:
Norm:
-100
done.
TMP_308(bool) = _token_1 == USDV_30
checking tmp_308
Temp variable: tmp_308
Function name: moveTokenToPools
[i]Type for TMP_308
Num:
Den:
Norm:
-100
done.
TMP_309(bool) = TMP_307 || TMP_308
checking tmp_309
Temp variable: tmp_309
Function name: moveTokenToPools
[i]Type for TMP_309
Num:
Den:
Norm:
-100
done.
TMP_310 = CONVERT POOLS_106 to iPOOLS
checking tmp_310
Temp variable: tmp_310
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
POOLS
[i]Type for TMP_310
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_311(bool) = HIGH_LEVEL_CALL, dest:TMP_310(iPOOLS), function:isSynth, arguments:['_token_1']  
High Level Call: issynth
checking tmp_311
Temp variable: tmp_311
Function name: moveTokenToPools
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_311
WIP
hlc contract name: XXX func_name: isSynth
TMP_311
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_311
Num:
-1
Den:
-1
Norm:
0
done.
VADER_36(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_35', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: moveTokenToPools
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_31(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_30', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: moveTokenToPools
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_107(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_106'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_312(bool) = TMP_309 || TMP_311
checking tmp_312
Temp variable: tmp_312
Function name: moveTokenToPools
[i]Type for TMP_312
Num:
Den:
Norm:
-100
done.
CONDITION TMP_312
Condition...
Conidtion: 
TMP_312
TMP_312
clearning node...
clearing ir...?
TMP_318 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:TMP_318(iERC20), function:balanceOf, arguments:['POOLS_107']  
has variable
[i] TMP_319 cleared
clearing ir...?
POOLS_110(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
_startBal_1(uint256) := TMP_319(uint256)
has variable
[i] _startBal cleared
typecheckig node...
TMP_318 = CONVERT _token_1 to iERC20
checking tmp_318
Temp variable: tmp_318
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_318
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:TMP_318(iERC20), function:balanceOf, arguments:['POOLS_107']  
High Level Call: balanceof
checking tmp_319
Temp variable: tmp_319
Function name: moveTokenToPools
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_319
WIP
hlc contract name: XXX func_name: balanceOf
TMP_319
Finding type for hlc_1...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_319
Num:
1
Den:
-1
Norm:
0
done.
POOLS_110(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_startBal_1(uint256) := TMP_319(uint256)
checking _startbal
Local variable: _startbal
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
0
0
[i]Type for _startBal
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_320 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_321(bool) = HIGH_LEVEL_CALL, dest:TMP_320(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_110', '_amount_1']  
has variable
[i] TMP_321 cleared
clearing ir...?
POOLS_111(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_110', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_320 = CONVERT _token_1 to iERC20
checking tmp_320
Temp variable: tmp_320
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_320
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_321(bool) = HIGH_LEVEL_CALL, dest:TMP_320(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_110', '_amount_1']  
High Level Call: transferfrom
checking tmp_321
Temp variable: tmp_321
Function name: moveTokenToPools
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_321
WIP
hlc contract name: XXX func_name: transferFrom
TMP_321
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_321
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_111(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_110', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
safeAmount_1(uint256) := _amount_1(uint256)
has variable
[i] safeAmount cleared
typecheckig node...
safeAmount_1(uint256) := _amount_1(uint256)
checking safeamount
Local variable: safeamount
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
0
0
[i]Type for safeAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_322 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_323(uint256) = HIGH_LEVEL_CALL, dest:TMP_322(iERC20), function:balanceOf, arguments:['POOLS_111']  
has variable
[i] TMP_323 cleared
clearing ir...?
POOLS_112(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_111', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_324(uint256) = TMP_323 (c)- _startBal_1
has variable
[i] TMP_324 cleared
clearing ir...?
safeAmount_2(uint256) := TMP_324(uint256)
has variable
[i] safeAmount cleared
typecheckig node...
TMP_322 = CONVERT _token_1 to iERC20
checking tmp_322
Temp variable: tmp_322
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_322
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_323(uint256) = HIGH_LEVEL_CALL, dest:TMP_322(iERC20), function:balanceOf, arguments:['POOLS_111']  
High Level Call: balanceof
checking tmp_323
Temp variable: tmp_323
Function name: moveTokenToPools
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_323
WIP
hlc contract name: XXX func_name: balanceOf
TMP_323
Finding type for hlc_3...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_323
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_112(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_111', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_324(uint256) = TMP_323 (c)- _startBal_1
checking tmp_324
Temp variable: tmp_324
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
[i]Type for TMP_324
Num:
1
Den:
-1
Norm:
0
done.
safeAmount_2(uint256) := TMP_324(uint256)
checking safeamount
Local variable: safeamount
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
0
0
[i]Type for safeAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_313(bool) = tx.origin == msg.sender
has variable
[i] TMP_313 cleared
clearing ir...?
CONDITION TMP_313
typecheckig node...
TMP_313(bool) = tx.origin == msg.sender
checking tmp_313
Temp variable: tmp_313
Function name: moveTokenToPools
[i]Type for TMP_313
Num:
Den:
Norm:
-100
done.
CONDITION TMP_313
Condition...
Conidtion: 
TMP_313
TMP_313
clearning node...
clearing ir...?
TMP_316 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_317(bool) = HIGH_LEVEL_CALL, dest:TMP_316(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_107', '_amount_1']  
has variable
[i] TMP_317 cleared
clearing ir...?
POOLS_108(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_107', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_316 = CONVERT _token_1 to iERC20
checking tmp_316
Temp variable: tmp_316
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_316
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_317(bool) = HIGH_LEVEL_CALL, dest:TMP_316(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_107', '_amount_1']  
High Level Call: transferfrom
checking tmp_317
Temp variable: tmp_317
Function name: moveTokenToPools
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_317
WIP
hlc contract name: XXX func_name: transferFrom
TMP_317
Finding type for hlc_4...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_317
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_108(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_107', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_314 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_315(bool) = HIGH_LEVEL_CALL, dest:TMP_314(iERC20), function:transferTo, arguments:['POOLS_107', '_amount_1']  
has variable
[i] TMP_315 cleared
clearing ir...?
POOLS_109(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_314 = CONVERT _token_1 to iERC20
checking tmp_314
Temp variable: tmp_314
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_314
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_315(bool) = HIGH_LEVEL_CALL, dest:TMP_314(iERC20), function:transferTo, arguments:['POOLS_107', '_amount_1']  
High Level Call: transferto
checking tmp_315
Temp variable: tmp_315
Function name: moveTokenToPools
High Call: transferTo
func name:transferTo
other func name:transferTo
TMP_315
WIP
hlc contract name: XXX func_name: transferTo
TMP_315
Finding type for hlc_5...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_315
Num:
1
Den:
-1
Norm:
0
done.
POOLS_109(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
Checking return valuemoveTokenToPools
safeAmount
&&
safeAmount
Num:
Den:
Norm:
-100
[i]Type for TMP_217
Num:
Den:
Norm:
-100
done.
VADER_25(address) := ϕ(['VADER_36'])
checking vader
State IR  variable: vader
State variable: vader
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_23(address) := ϕ(['USDV_31'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: repayForMember
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_77(address) := ϕ(['POOLS_112', 'POOLS_109', 'POOLS_108'])
checking pools
State IR  variable: pools
State variable: pools
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_debt_1(uint256) := TMP_217(uint256)
checking _debt
Local variable: _debt
Function name: repayForMember
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _debt
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_218(bool) = collateralAsset_1 == VADER_25
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219 = CONVERT POOLS_77 to iPOOLS
clearing ir...?
TMP_220(bool) = HIGH_LEVEL_CALL, dest:TMP_219(iPOOLS), function:isAnchor, arguments:['debtAsset_1']  
has variable
[i] TMP_220 cleared
clearing ir...?
VADER_26(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_25', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_24(address) := ϕ(['USDV_23', 'USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_78(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_77', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_Collateral_13(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_12', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
clearing ir...?
mapCollateralDebt_Debt_13(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_12', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7'])
clearing ir...?
mapCollateralDebt_interestPaid_6(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_5', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
clearing ir...?
TMP_221(bool) = TMP_218 || TMP_220
has variable
[i] TMP_221 cleared
clearing ir...?
CONDITION TMP_221
typecheckig node...
TMP_218(bool) = collateralAsset_1 == VADER_25
checking tmp_218
Temp variable: tmp_218
Function name: repayForMember
[i]Type for TMP_218
Num:
Den:
Norm:
-100
done.
TMP_219 = CONVERT POOLS_77 to iPOOLS
checking tmp_219
Temp variable: tmp_219
Function name: repayForMember
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_219
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_220(bool) = HIGH_LEVEL_CALL, dest:TMP_219(iPOOLS), function:isAnchor, arguments:['debtAsset_1']  
High Level Call: isanchor
checking tmp_220
Temp variable: tmp_220
Function name: repayForMember
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_220
WIP
hlc contract name: XXX func_name: isAnchor
TMP_220
Finding type for hlc_6...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_220
Num:
-1
Den:
-1
Norm:
0
done.
VADER_26(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_25', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_24(address) := ϕ(['USDV_23', 'USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: repayForMember
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_78(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_77', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_Collateral_13(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_12', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_Debt_13(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_12', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7'])
checking mapcollateraldebt_debt
State IR  variable: mapcollateraldebt_debt
State variable: mapcollateraldebt_debt
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Debt
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_interestPaid_6(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_5', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_221(bool) = TMP_218 || TMP_220
checking tmp_221
Temp variable: tmp_221
Function name: repayForMember
[i]Type for TMP_221
Num:
Den:
Norm:
-100
done.
CONDITION TMP_221
Condition...
Conidtion: 
TMP_221
TMP_221
clearning node...
clearing ir...?
TMP_225(bool) = collateralAsset_1 == USDV_24
has variable
[i] TMP_225 cleared
clearing ir...?
TMP_226 = CONVERT POOLS_78 to iPOOLS
clearing ir...?
TMP_227(bool) = HIGH_LEVEL_CALL, dest:TMP_226(iPOOLS), function:isAsset, arguments:['debtAsset_1']  
has variable
[i] TMP_227 cleared
clearing ir...?
USDV_25(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_80(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_Collateral_15(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22', 'mapCollateralDebt_Collateral_14'])
clearing ir...?
mapCollateralDebt_Debt_15(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_14', 'mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7'])
clearing ir...?
mapCollateralDebt_interestPaid_8(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_7', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
clearing ir...?
TMP_228(bool) = TMP_225 || TMP_227
has variable
[i] TMP_228 cleared
clearing ir...?
CONDITION TMP_228
typecheckig node...
TMP_225(bool) = collateralAsset_1 == USDV_24
checking tmp_225
Temp variable: tmp_225
Function name: repayForMember
[i]Type for TMP_225
Num:
Den:
Norm:
-100
done.
TMP_226 = CONVERT POOLS_78 to iPOOLS
checking tmp_226
Temp variable: tmp_226
Function name: repayForMember
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_226
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_227(bool) = HIGH_LEVEL_CALL, dest:TMP_226(iPOOLS), function:isAsset, arguments:['debtAsset_1']  
High Level Call: isasset
checking tmp_227
Temp variable: tmp_227
Function name: repayForMember
High Call: isAsset
func name:isAsset
other func name:isAsset
TMP_227
WIP
hlc contract name: XXX func_name: isAsset
COPIED
[i]Type for TMP_227
Num:
-1
Den:
-1
Norm:
0
done.
USDV_25(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: repayForMember
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_80(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_Collateral_15(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22', 'mapCollateralDebt_Collateral_14'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_Debt_15(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_14', 'mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7'])
checking mapcollateraldebt_debt
State IR  variable: mapcollateraldebt_debt
State variable: mapcollateraldebt_debt
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Debt
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_interestPaid_8(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_7', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_228(bool) = TMP_225 || TMP_227
checking tmp_228
Temp variable: tmp_228
Function name: repayForMember
[i]Type for TMP_228
Num:
Den:
Norm:
-100
done.
CONDITION TMP_228
Condition...
Conidtion: 
TMP_228
TMP_228
clearning node...
clearing ir...?
TMP_222 = CONVERT POOLS_78 to iPOOLS
clearing ir...?
TMP_223 = CONVERT this to address
clearing ir...?
TMP_224(uint256) = HIGH_LEVEL_CALL, dest:TMP_222(iPOOLS), function:swap, arguments:['VADER_26', 'debtAsset_1', 'TMP_223', 'True']  
has variable
[i] TMP_224 cleared
clearing ir...?
VADER_27(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
POOLS_79(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_78', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_Collateral_14(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_13', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
clearing ir...?
mapCollateralDebt_Debt_14(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_13', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7'])
clearing ir...?
mapCollateralDebt_interestPaid_7(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_6', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
typecheckig node...
TMP_222 = CONVERT POOLS_78 to iPOOLS
checking tmp_222
Temp variable: tmp_222
Function name: repayForMember
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_222
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_223 = CONVERT this to address
checking tmp_223
Temp variable: tmp_223
Function name: repayForMember
Num:
Den:
Norm:
-100
not variable
0
this
[i]Type for TMP_223
Num:
Den:
Norm:
0
done.
TMP_224(uint256) = HIGH_LEVEL_CALL, dest:TMP_222(iPOOLS), function:swap, arguments:['VADER_26', 'debtAsset_1', 'TMP_223', 'True']  
High Level Call: swap
checking tmp_224
Temp variable: tmp_224
Function name: repayForMember
High Call: swap
func name:swap
other func name:swap
TMP_224
WIP
hlc contract name: XXX func_name: swap
COPIED
[i]Type for TMP_224
Num:
-1
Den:
-1
Norm:
0
done.
VADER_27(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
POOLS_79(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_78', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_Collateral_14(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_13', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_Debt_14(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_13', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7'])
checking mapcollateraldebt_debt
State IR  variable: mapcollateraldebt_debt
State variable: mapcollateraldebt_debt
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Debt
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_interestPaid_7(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_6', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
[x]node added back
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_229 = CONVERT POOLS_80 to iPOOLS
clearing ir...?
TMP_230 = CONVERT this to address
clearing ir...?
TMP_231(uint256) = HIGH_LEVEL_CALL, dest:TMP_229(iPOOLS), function:swap, arguments:['USDV_25', 'debtAsset_1', 'TMP_230', 'True']  
has variable
[i] TMP_231 cleared
clearing ir...?
USDV_26(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_81(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_Collateral_16(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_15', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
clearing ir...?
mapCollateralDebt_Debt_16(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7', 'mapCollateralDebt_Debt_15'])
clearing ir...?
mapCollateralDebt_interestPaid_9(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_8', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
typecheckig node...
TMP_229 = CONVERT POOLS_80 to iPOOLS
checking tmp_229
Temp variable: tmp_229
Function name: repayForMember
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_229
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_230 = CONVERT this to address
checking tmp_230
Temp variable: tmp_230
Function name: repayForMember
Num:
Den:
Norm:
-100
not variable
0
this
[i]Type for TMP_230
Num:
Den:
Norm:
0
done.
TMP_231(uint256) = HIGH_LEVEL_CALL, dest:TMP_229(iPOOLS), function:swap, arguments:['USDV_25', 'debtAsset_1', 'TMP_230', 'True']  
High Level Call: swap
checking tmp_231
Temp variable: tmp_231
Function name: repayForMember
High Call: swap
func name:swap
other func name:swap
TMP_231
WIP
hlc contract name: XXX func_name: swap
COPIED
[i]Type for TMP_231
Num:
-1
Den:
-1
Norm:
0
done.
USDV_26(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: repayForMember
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_81(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_Collateral_16(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_15', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_Debt_16(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7', 'mapCollateralDebt_Debt_15'])
checking mapcollateraldebt_debt
State IR  variable: mapcollateraldebt_debt
State variable: mapcollateraldebt_debt
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Debt
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_interestPaid_9(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_8', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
[x]node added back
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_232(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_233 = CONVERT TMP_232 to iUTILS
clearing ir...?
TUPLE_2(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_233(iUTILS), function:getDebtValueInCollateral, arguments:['member_1', '_debt_1', 'collateralAsset_1', 'debtAsset_1']  
has variable
clearing ir...?
mapCollateralDebt_Collateral_18(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_17', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
clearing ir...?
mapCollateralDebt_Debt_18(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_17', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7'])
clearing ir...?
mapCollateralDebt_interestPaid_11(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20', 'mapCollateralDebt_interestPaid_10'])
clearing ir...?
_collateralUnlocked_1(uint256)= UNPACK TUPLE_2 index: 0 
clearing ir...?
_memberInterestShare_1(uint256)= UNPACK TUPLE_2 index: 1 
typecheckig node...
TMP_232(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_232
Num:
Den:
Norm:
-100
done.
TMP_233 = CONVERT TMP_232 to iUTILS
checking tmp_233
Temp variable: tmp_233
Function name: repayForMember
Num:
Den:
Norm:
-100
0
TMP_232
[i]Type for TMP_233
Num:
Den:
Norm:
0
done.
TUPLE_2(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_233(iUTILS), function:getDebtValueInCollateral, arguments:['member_1', '_debt_1', 'collateralAsset_1', 'debtAsset_1']  
High Level Call: getdebtvalueincollateral
checking tuple_2
TUple variable: tuple_2
Function name: repayForMember
High Call: getDebtValueInCollateral
func name:getDebtValueInCollateral
other func name:getDebtValueInCollateral
TUPLE_2
WIP
TUPLE_2
Finding type for hlc_7...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TUPLE_2
Num:
-1
Den:
-1
Norm:
0
done.
mapCollateralDebt_Collateral_18(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_17', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_Debt_18(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_19', 'mapCollateralDebt_Debt_17', 'mapCollateralDebt_Debt_20', 'mapCollateralDebt_Debt_7'])
checking mapcollateraldebt_debt
State IR  variable: mapcollateraldebt_debt
State variable: mapcollateraldebt_debt
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Debt
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralDebt_interestPaid_11(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20', 'mapCollateralDebt_interestPaid_10'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
_collateralUnlocked_1(uint256)= UNPACK TUPLE_2 index: 0 
checking _collateralunlocked
Local variable: _collateralunlocked
Function name: repayForMember
Reading tuple TUPLE_2 index 0
Finding type for _collateralUnlocked...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for _collateralUnlocked
Num:
1
Den:
-1
Norm:
0
done.
_memberInterestShare_1(uint256)= UNPACK TUPLE_2 index: 1 
checking _memberinterestshare
Local variable: _memberinterestshare
Function name: repayForMember
Reading tuple TUPLE_2 index 1
Finding type for _memberInterestShare...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for _memberInterestShare
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
REF_99(mapping(address => uint256)) -> mapCollateralDebt_Collateral_18[collateralAsset_1]
clearing ir...?
REF_100(uint256) -> REF_99[debtAsset_1]
clearing ir...?
mapCollateralDebt_Collateral_19(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_18'])
clearing ir...?
REF_100(-> mapCollateralDebt_Collateral_19) = REF_100 (c)- _collateralUnlocked_1
has variable
typecheckig node...
REF_99(mapping(address => uint256)) -> mapCollateralDebt_Collateral_18[collateralAsset_1]
checking ref_99
Refernce variable: ref_99
Function name: repayForMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_100(uint256) -> REF_99[debtAsset_1]
checking ref_100
Refernce variable: ref_100
Function name: repayForMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapCollateralDebt_Collateral_19(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_18'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
REF_100(-> mapCollateralDebt_Collateral_19) = REF_100 (c)- _collateralUnlocked_1
checking ref_100
Refernce variable: ref_100
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
-1
Den:
-1
Norm:
0
Error with: REF_100 in function repayForMember
[i]Type for REF_100
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
REF_101(mapping(address => uint256)) -> mapCollateralDebt_Debt_18[collateralAsset_1]
clearing ir...?
REF_102(uint256) -> REF_101[debtAsset_1]
clearing ir...?
mapCollateralDebt_Debt_19(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_18'])
clearing ir...?
REF_102(-> mapCollateralDebt_Debt_19) = REF_102 (c)- _debt_1
has variable
typecheckig node...
REF_101(mapping(address => uint256)) -> mapCollateralDebt_Debt_18[collateralAsset_1]
checking ref_101
Refernce variable: ref_101
Function name: repayForMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_102(uint256) -> REF_101[debtAsset_1]
checking ref_102
Refernce variable: ref_102
Function name: repayForMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapCollateralDebt_Debt_19(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Debt_18'])
checking mapcollateraldebt_debt
State IR  variable: mapcollateraldebt_debt
State variable: mapcollateraldebt_debt
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_Debt
Num:
-1
Den:
-1
Norm:
-100
done.
REF_102(-> mapCollateralDebt_Debt_19) = REF_102 (c)- _debt_1
checking ref_102
Refernce variable: ref_102
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
Num:
-1
Den:
-1
Norm:
0
[i]Type for REF_102
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
REF_103(mapping(address => uint256)) -> mapCollateralDebt_interestPaid_11[collateralAsset_1]
clearing ir...?
REF_104(uint256) -> REF_103[debtAsset_1]
clearing ir...?
mapCollateralDebt_interestPaid_12(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_11'])
clearing ir...?
REF_104(-> mapCollateralDebt_interestPaid_12) = REF_104 (c)- _memberInterestShare_1
has variable
typecheckig node...
REF_103(mapping(address => uint256)) -> mapCollateralDebt_interestPaid_11[collateralAsset_1]
checking ref_103
Refernce variable: ref_103
Function name: repayForMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_104(uint256) -> REF_103[debtAsset_1]
checking ref_104
Refernce variable: ref_104
Function name: repayForMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapCollateralDebt_interestPaid_12(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_11'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
REF_104(-> mapCollateralDebt_interestPaid_12) = REF_104 (c)- _memberInterestShare_1
checking ref_104
Refernce variable: ref_104
Function name: repayForMember
Num:
-1
Den:
-1
Norm:
0
Num:
-1
Den:
-1
Norm:
0
Num:
-1
Den:
-1
Norm:
0
[i]Type for REF_104
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
INTERNAL_CALL, Router._removeDebtFromMember(address,uint256,address,uint256,address)(member_1,_collateralUnlocked_1,collateralAsset_1,_debt_1,debtAsset_1)
typecheckig node...
INTERNAL_CALL, Router._removeDebtFromMember(address,uint256,address,uint256,address)(member_1,_collateralUnlocked_1,collateralAsset_1,_debt_1,debtAsset_1)
Internal call...
_removeDebtFromMember
member
_collateralUnlocked
collateralAsset
_debt
debtAsset
Function: _removeDebtFromMember
ic
done.
clearning node...
clearing ir...?
Emit RemoveCollateral(member_1,collateralAsset_1,_collateralUnlocked_1,debtAsset_1,_debt_1)
typecheckig node...
Emit RemoveCollateral(member_1,collateralAsset_1,_collateralUnlocked_1,debtAsset_1,_debt_1)
clearning node...
clearing ir...?
INTERNAL_CALL, Router._handleTransferOut(address,address,uint256)(member_1,collateralAsset_1,_collateralUnlocked_1)
typecheckig node...
INTERNAL_CALL, Router._handleTransferOut(address,address,uint256)(member_1,collateralAsset_1,_collateralUnlocked_1)
Internal call...
_handleTransferOut
member
collateralAsset
_collateralUnlocked
Function: _handleTransferOut
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [1]
    den: [-1]
added
xyz
Function name: _handleTransferOut
Function Visibility: internal
clearning node...
clearing ir...?
_member_1(address) := ϕ(['member_1'])
clearing ir...?
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['_collateralUnlocked_1'])
clearing ir...?
POOLS_101(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
_member_1(address) := ϕ(['member_1'])
checking _member
Local variable: _member
Function name: _handleTransferOut
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _member
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking _collateralasset
Local variable: _collateralasset
Function name: _handleTransferOut
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_amount_1(uint256) := ϕ(['_collateralUnlocked_1'])
checking _amount
Local variable: _amount
Function name: _handleTransferOut
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for _amount
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_101(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferOut
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_271(bool) = INTERNAL_CALL, Router.isBase(address)(_collateralAsset_1)
clearing ir...?
TMP_272 = CONVERT POOLS_102 to iPOOLS
clearing ir...?
TMP_273(bool) = HIGH_LEVEL_CALL, dest:TMP_272(iPOOLS), function:isSynth, arguments:['_collateralAsset_1']  
has variable
[i] TMP_273 cleared
clearing ir...?
POOLS_103(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_102', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_274(bool) = TMP_271 || TMP_273
has variable
[i] TMP_274 cleared
clearing ir...?
CONDITION TMP_274
typecheckig node...
TMP_271(bool) = INTERNAL_CALL, Router.isBase(address)(_collateralAsset_1)
Internal call...
isBase
_collateralAsset
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
added
xyz
Function name: isBase
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
clearing ir...?
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
typecheckig node...
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
checking token
Local variable: token
Function name: isBase
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: isBase
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: isBase
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_298(bool) = token_1 == VADER_32
has variable
[i] TMP_298 cleared
clearing ir...?
TMP_299(bool) = token_1 == USDV_27
has variable
[i] TMP_299 cleared
clearing ir...?
TMP_300(bool) = TMP_298 || TMP_299
has variable
[i] TMP_300 cleared
clearing ir...?
CONDITION TMP_300
typecheckig node...
TMP_298(bool) = token_1 == VADER_32
checking tmp_298
Temp variable: tmp_298
Function name: isBase
[i]Type for TMP_298
Num:
Den:
Norm:
-100
done.
TMP_299(bool) = token_1 == USDV_27
checking tmp_299
Temp variable: tmp_299
Function name: isBase
[i]Type for TMP_299
Num:
Den:
Norm:
-100
done.
TMP_300(bool) = TMP_298 || TMP_299
checking tmp_300
Temp variable: tmp_300
Function name: isBase
[i]Type for TMP_300
Num:
Den:
Norm:
-100
done.
CONDITION TMP_300
Condition...
Conidtion: 
TMP_300
TMP_300
clearning node...
clearing ir...?
RETURN True
typecheckig node...
RETURN True
Return...
isBase
True
True
clearning node...
typecheckig node...
Checking return valueisBase
True
&&
True
Constatn varible: true
Num:
Den:
Norm:
-100
[i]Type for TMP_271
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_272 = CONVERT POOLS_102 to iPOOLS
checking tmp_272
Temp variable: tmp_272
Function name: _handleTransferOut
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_272
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_273(bool) = HIGH_LEVEL_CALL, dest:TMP_272(iPOOLS), function:isSynth, arguments:['_collateralAsset_1']  
High Level Call: issynth
checking tmp_273
Temp variable: tmp_273
Function name: _handleTransferOut
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_273
WIP
hlc contract name: XXX func_name: isSynth
TMP_273
Finding type for hlc_0...
Num:
-1
Den:
1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_273
Num:
-1
Den:
1
Norm:
0
done.
POOLS_103(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_102', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferOut
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_274(bool) = TMP_271 || TMP_273
checking tmp_274
Temp variable: tmp_274
Function name: _handleTransferOut
[i]Type for TMP_274
Num:
Den:
Norm:
-100
done.
CONDITION TMP_274
Condition...
Conidtion: 
TMP_274
TMP_274
clearning node...
clearing ir...?
TMP_276(bool) = INTERNAL_CALL, Router.isPool(address)(_collateralAsset_1)
clearing ir...?
POOLS_104(address) := ϕ(['POOLS_115'])
clearing ir...?
CONDITION TMP_276
typecheckig node...
TMP_276(bool) = INTERNAL_CALL, Router.isPool(address)(_collateralAsset_1)
Internal call...
isPool
_collateralAsset
Function: isPool
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
[i]Type for TMP_276
Num:
Den:
Norm:
-100
done.
POOLS_104(address) := ϕ(['POOLS_115'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferOut
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
CONDITION TMP_276
Condition...
Conidtion: 
TMP_276
TMP_276
clearning node...
clearing ir...?
INTERNAL_CALL, Router._sendFunds(address,address,uint256)(_collateralAsset_1,_member_1,_amount_1)
typecheckig node...
INTERNAL_CALL, Router._sendFunds(address,address,uint256)(_collateralAsset_1,_member_1,_amount_1)
Internal call...
_sendFunds
_collateralAsset
_member
_amount
Function: _sendFunds
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [1]
    den: [-1]
added
xyz
Function name: _sendFunds
Function Visibility: internal
clearning node...
clearing ir...?
_token_1(address) := ϕ(['_collateralAsset_1'])
clearing ir...?
_member_1(address) := ϕ(['_member_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['_amount_1'])
typecheckig node...
_token_1(address) := ϕ(['_collateralAsset_1'])
checking _token
Local variable: _token
Function name: _sendFunds
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _token
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_member_1(address) := ϕ(['_member_1'])
checking _member
Local variable: _member
Function name: _sendFunds
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _member
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_amount_1(uint256) := ϕ(['_amount_1'])
checking _amount
Local variable: _amount
Function name: _sendFunds
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for _amount
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_295 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_296(bool) = HIGH_LEVEL_CALL, dest:TMP_295(iERC20), function:transfer, arguments:['_member_1', '_amount_1']  
has variable
[i] TMP_296 cleared
clearing ir...?
TMP_297(None) = SOLIDITY_CALL require(bool)(TMP_296)
typecheckig node...
TMP_295 = CONVERT _token_1 to iERC20
checking tmp_295
Temp variable: tmp_295
Function name: _sendFunds
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_295
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_296(bool) = HIGH_LEVEL_CALL, dest:TMP_295(iERC20), function:transfer, arguments:['_member_1', '_amount_1']  
High Level Call: transfer
checking tmp_296
Temp variable: tmp_296
Function name: _sendFunds
High Call: transfer
func name:transfer
other func name:transfer
TMP_296
WIP
hlc contract name: XXX func_name: transfer
TMP_296
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_296
Num:
-1
Den:
-1
Norm:
0
done.
TMP_297(None) = SOLIDITY_CALL require(bool)(TMP_296)
checking tmp_297
Temp variable: tmp_297
Function name: _sendFunds
[i]Type for TMP_297
Num:
Den:
Norm:
-100
done.
Checking return value_sendFunds
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_277 = CONVERT POOLS_104 to iPOOLS
clearing ir...?
HIGH_LEVEL_CALL, dest:TMP_277(iPOOLS), function:unlockUnits, arguments:['_amount_1', '_collateralAsset_1', '_member_1']  
clearing ir...?
POOLS_105(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_277 = CONVERT POOLS_104 to iPOOLS
checking tmp_277
Temp variable: tmp_277
Function name: _handleTransferOut
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_277
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
HIGH_LEVEL_CALL, dest:TMP_277(iPOOLS), function:unlockUnits, arguments:['_amount_1', '_collateralAsset_1', '_member_1']  
High Level Call: unlockunits
High Call: unlockUnits
func name:unlockUnits
other func name:unlockUnits
done.
POOLS_105(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferOut
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
Checking return value_handleTransferOut
done.
clearning node...
clearing ir...?
INTERNAL_CALL, Router.payInterest(address,address)(collateralAsset_1,debtAsset_1)
typecheckig node...
INTERNAL_CALL, Router.payInterest(address,address)(collateralAsset_1,debtAsset_1)
Internal call...
payInterest
collateralAsset
debtAsset
Function: payInterest
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
done.
clearning node...
clearing ir...?
RETURN _collateralUnlocked_1
typecheckig node...
RETURN _collateralUnlocked_1
Return...
repayForMember
_collateralUnlocked_1
Reading Function: payInterest
Function name: payInterest
Function Visibility: internal
collateralAsset
Finding type for collateralAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
debtAsset
Finding type for debtAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
collateralAsset_1(address) := ϕ(['collateralAsset_1', 'collateralAsset_1'])
clearing ir...?
debtAsset_1(address) := ϕ(['debtAsset_1', 'debtAsset_1'])
clearing ir...?
VADER_28(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
POOLS_82(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_interestPaid_13(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_0', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
clearing ir...?
mapCollateralAsset_NextEra_1(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_0', 'mapCollateralAsset_NextEra_3', 'mapCollateralAsset_NextEra_5', 'mapCollateralAsset_NextEra_4'])
typecheckig node...
collateralAsset_1(address) := ϕ(['collateralAsset_1', 'collateralAsset_1'])
checking collateralasset
Local variable: collateralasset
Function name: payInterest
Phi
[i]Type for collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
debtAsset_1(address) := ϕ(['debtAsset_1', 'debtAsset_1'])
checking debtasset
Local variable: debtasset
Function name: payInterest
Phi
[i]Type for debtAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
VADER_28(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: payInterest
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
POOLS_82(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_interestPaid_13(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_0', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: payInterest
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralAsset_NextEra_1(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_0', 'mapCollateralAsset_NextEra_3', 'mapCollateralAsset_NextEra_5', 'mapCollateralAsset_NextEra_4'])
checking mapcollateralasset_nextera
State IR  variable: mapcollateralasset_nextera
State variable: mapcollateralasset_nextera
Function name: payInterest
Phi
[i]Type for mapCollateralAsset_NextEra
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_238(uint256) = INTERNAL_CALL, Router.getNextEraTime(address,address)(collateralAsset_1,debtAsset_1)
clearing ir...?
mapCollateralAsset_NextEra_2(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_5'])
clearing ir...?
TMP_239(bool) = block.timestamp >= TMP_238
has variable
[i] TMP_239 cleared
clearing ir...?
TMP_240(bool) = INTERNAL_CALL, Router.emitting()()
clearing ir...?
VADER_30(address) := ϕ(['VADER_42'])
clearing ir...?
TMP_241(bool) = TMP_239 && TMP_240
has variable
[i] TMP_241 cleared
clearing ir...?
CONDITION TMP_241
typecheckig node...
TMP_238(uint256) = INTERNAL_CALL, Router.getNextEraTime(address,address)(collateralAsset_1,debtAsset_1)
Internal call...
getNextEraTime
collateralAsset
debtAsset
Function: getNextEraTime
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
[i]Type for TMP_238
Num:
-1
Den:
-1
Norm:
-100
done.
mapCollateralAsset_NextEra_2(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_5'])
checking mapcollateralasset_nextera
State IR  variable: mapcollateralasset_nextera
State variable: mapcollateralasset_nextera
Function name: payInterest
Phi
[i]Type for mapCollateralAsset_NextEra
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_239(bool) = block.timestamp >= TMP_238
checking tmp_239
Temp variable: tmp_239
Function name: payInterest
testing gt...
[i]Type for TMP_239
Num:
Den:
Norm:
-100
done.
TMP_240(bool) = INTERNAL_CALL, Router.emitting()()
Internal call...
emitting
Function: emitting
ic
Internal cal param_cache
[i]Type for TMP_240
Num:
-1
Den:
-1
Norm:
-100
done.
VADER_30(address) := ϕ(['VADER_42'])
checking vader
State IR  variable: vader
State variable: vader
Function name: payInterest
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_241(bool) = TMP_239 && TMP_240
checking tmp_241
Temp variable: tmp_241
Function name: payInterest
[i]Type for TMP_241
Num:
Den:
Norm:
-100
done.
CONDITION TMP_241
Condition...
Conidtion: 
TMP_241
TMP_241
clearning node...
clearing ir...?
REF_105(mapping(address => uint256)) -> mapCollateralAsset_NextEra_3[collateralAsset_1]
clearing ir...?
REF_106(uint256) -> REF_105[debtAsset_1]
clearing ir...?
TMP_242(uint256) = block.timestamp (c)- REF_106
has variable
[i] TMP_242 cleared
clearing ir...?
_timeElapsed_1(uint256) := TMP_242(uint256)
has variable
[i] _timeElapsed cleared
typecheckig node...
REF_105(mapping(address => uint256)) -> mapCollateralAsset_NextEra_3[collateralAsset_1]
checking ref_105
Refernce variable: ref_105
Function name: payInterest
INDEX
Num:
Den:
Norm:
-100
mapCollateralAsset_NextEra
REF_106(uint256) -> REF_105[debtAsset_1]
checking ref_106
Refernce variable: ref_106
Function name: payInterest
INDEX
Num:
-1
Den:
-1
Norm:
0
TMP_242(uint256) = block.timestamp (c)- REF_106
checking tmp_242
Temp variable: tmp_242
Function name: payInterest
[i]Type for TMP_242
Num:
Den:
Norm:
-100
done.
_timeElapsed_1(uint256) := TMP_242(uint256)
checking _timeelapsed
Local variable: _timeelapsed
Function name: payInterest
asgn
Num:
Den:
Norm:
0
0
[i]Type for _timeElapsed
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_107(mapping(address => uint256)) -> mapCollateralAsset_NextEra_3[collateralAsset_1]
clearing ir...?
REF_108(uint256) -> REF_107[debtAsset_1]
clearing ir...?
TMP_243 = CONVERT VADER_30 to iVADER
clearing ir...?
TMP_244(uint256) = HIGH_LEVEL_CALL, dest:TMP_243(iVADER), function:secondsPerEra, arguments:[]  
has variable
[i] TMP_244 cleared
clearing ir...?
VADER_31(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
POOLS_85(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_interestPaid_16(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_20'])
clearing ir...?
TMP_245(uint256) = block.timestamp (c)+ TMP_244
has variable
[i] TMP_245 cleared
clearing ir...?
mapCollateralAsset_NextEra_4(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_3'])
clearing ir...?
REF_108 (->mapCollateralAsset_NextEra_4) := TMP_245(uint256)
has variable
typecheckig node...
REF_107(mapping(address => uint256)) -> mapCollateralAsset_NextEra_3[collateralAsset_1]
checking ref_107
Refernce variable: ref_107
Function name: payInterest
INDEX
Num:
Den:
Norm:
-100
mapCollateralAsset_NextEra
REF_108(uint256) -> REF_107[debtAsset_1]
checking ref_108
Refernce variable: ref_108
Function name: payInterest
INDEX
Num:
-1
Den:
-1
Norm:
0
TMP_243 = CONVERT VADER_30 to iVADER
checking tmp_243
Temp variable: tmp_243
Function name: payInterest
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
VADER
[i]Type for TMP_243
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_244(uint256) = HIGH_LEVEL_CALL, dest:TMP_243(iVADER), function:secondsPerEra, arguments:[]  
High Level Call: secondsperera
checking tmp_244
Temp variable: tmp_244
Function name: payInterest
High Call: secondsPerEra
func name:secondsPerEra
other func name:secondsPerEra
TMP_244
WIP
hlc contract name: XXX func_name: secondsPerEra
TMP_244
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_244
Num:
-1
Den:
-1
Norm:
0
done.
VADER_31(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: payInterest
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
POOLS_85(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_interestPaid_16(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_20'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: payInterest
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_245(uint256) = block.timestamp (c)+ TMP_244
checking tmp_245
Temp variable: tmp_245
Function name: payInterest
[i]Type for TMP_245
Num:
Den:
Norm:
-100
done.
mapCollateralAsset_NextEra_4(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralAsset_NextEra_3'])
checking mapcollateralasset_nextera
State IR  variable: mapcollateralasset_nextera
State variable: mapcollateralasset_nextera
Function name: payInterest
Phi
[i]Type for mapCollateralAsset_NextEra
Num:
-1
Den:
-1
Norm:
-100
done.
REF_108 (->mapCollateralAsset_NextEra_4) := TMP_245(uint256)
checking ref_108
Refernce variable: ref_108
Function name: payInterest
asgn
Num:
-1
Den:
-1
Norm:
0
0
[i]Type for REF_108
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_246(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_247 = CONVERT TMP_246 to iUTILS
clearing ir...?
TMP_248(uint256) = HIGH_LEVEL_CALL, dest:TMP_247(iUTILS), function:getInterestOwed, arguments:['collateralAsset_1', 'debtAsset_1', '_timeElapsed_1']  
has variable
[i] TMP_248 cleared
clearing ir...?
POOLS_87(address) := ϕ(['POOLS_86', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
mapCollateralDebt_interestPaid_18(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_17', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
clearing ir...?
_interestOwed_1(uint256) := TMP_248(uint256)
has variable
[i] _interestOwed cleared
typecheckig node...
TMP_246(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_246
Num:
Den:
Norm:
-100
done.
TMP_247 = CONVERT TMP_246 to iUTILS
checking tmp_247
Temp variable: tmp_247
Function name: payInterest
Num:
Den:
Norm:
0
0
TMP_246
[i]Type for TMP_247
Num:
Den:
Norm:
0
done.
TMP_248(uint256) = HIGH_LEVEL_CALL, dest:TMP_247(iUTILS), function:getInterestOwed, arguments:['collateralAsset_1', 'debtAsset_1', '_timeElapsed_1']  
High Level Call: getinterestowed
checking tmp_248
Temp variable: tmp_248
Function name: payInterest
High Call: getInterestOwed
func name:getInterestOwed
other func name:getInterestOwed
TMP_248
WIP
TMP_248
Finding type for hlc_1...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_248
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_87(address) := ϕ(['POOLS_86', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_interestPaid_18(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_12', 'mapCollateralDebt_interestPaid_17', 'mapCollateralDebt_interestPaid_15', 'mapCollateralDebt_interestPaid_19', 'mapCollateralDebt_interestPaid_20'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: payInterest
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
_interestOwed_1(uint256) := TMP_248(uint256)
checking _interestowed
Local variable: _interestowed
Function name: payInterest
asgn
Num:
Den:
Norm:
0
0
[i]Type for _interestOwed
Num:
-1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
REF_111(mapping(address => uint256)) -> mapCollateralDebt_interestPaid_18[collateralAsset_1]
clearing ir...?
REF_112(uint256) -> REF_111[debtAsset_1]
clearing ir...?
mapCollateralDebt_interestPaid_19(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_18'])
clearing ir...?
REF_112(-> mapCollateralDebt_interestPaid_19) = REF_112 (c)+ _interestOwed_1
has variable
typecheckig node...
REF_111(mapping(address => uint256)) -> mapCollateralDebt_interestPaid_18[collateralAsset_1]
checking ref_111
Refernce variable: ref_111
Function name: payInterest
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_112(uint256) -> REF_111[debtAsset_1]
checking ref_112
Refernce variable: ref_112
Function name: payInterest
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapCollateralDebt_interestPaid_19(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_interestPaid_18'])
checking mapcollateraldebt_interestpaid
State IR  variable: mapcollateraldebt_interestpaid
State variable: mapcollateraldebt_interestpaid
Function name: payInterest
Phi
[i]Type for mapCollateralDebt_interestPaid
Num:
-1
Den:
-1
Norm:
-100
done.
REF_112(-> mapCollateralDebt_interestPaid_19) = REF_112 (c)+ _interestOwed_1
checking ref_112
Refernce variable: ref_112
Function name: payInterest
Num:
-1
Den:
-1
Norm:
0
[i]Type for REF_112
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
INTERNAL_CALL, Router._removeCollateral(uint256,address,address)(_interestOwed_1,collateralAsset_1,debtAsset_1)
typecheckig node...
INTERNAL_CALL, Router._removeCollateral(uint256,address,address)(_interestOwed_1,collateralAsset_1,debtAsset_1)
Internal call...
_removeCollateral
_interestOwed
collateralAsset
debtAsset
Function: _removeCollateral
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
done.
clearning node...
clearing ir...?
TMP_250(bool) = INTERNAL_CALL, Router.isBase(address)(collateralAsset_1)
clearing ir...?
CONDITION TMP_250
typecheckig node...
TMP_250(bool) = INTERNAL_CALL, Router.isBase(address)(collateralAsset_1)
Internal call...
isBase
collateralAsset
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
added
xyz
Function name: isBase
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
clearing ir...?
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
typecheckig node...
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
checking token
Local variable: token
Function name: isBase
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: isBase
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: isBase
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_298(bool) = token_1 == VADER_32
has variable
[i] TMP_298 cleared
clearing ir...?
TMP_299(bool) = token_1 == USDV_27
has variable
[i] TMP_299 cleared
clearing ir...?
TMP_300(bool) = TMP_298 || TMP_299
has variable
[i] TMP_300 cleared
clearing ir...?
CONDITION TMP_300
typecheckig node...
TMP_298(bool) = token_1 == VADER_32
checking tmp_298
Temp variable: tmp_298
Function name: isBase
[i]Type for TMP_298
Num:
Den:
Norm:
-100
done.
TMP_299(bool) = token_1 == USDV_27
checking tmp_299
Temp variable: tmp_299
Function name: isBase
[i]Type for TMP_299
Num:
Den:
Norm:
-100
done.
TMP_300(bool) = TMP_298 || TMP_299
checking tmp_300
Temp variable: tmp_300
Function name: isBase
[i]Type for TMP_300
Num:
Den:
Norm:
-100
done.
CONDITION TMP_300
Condition...
Conidtion: 
TMP_300
TMP_300
clearning node...
clearing ir...?
RETURN True
typecheckig node...
RETURN True
Return...
isBase
True
True
clearning node...
typecheckig node...
Checking return valueisBase
True
&&
True
Constatn varible: true
Num:
-1
Den:
-1
Norm:
-100
[i]Type for TMP_250
Num:
-1
Den:
-1
Norm:
-100
done.
CONDITION TMP_250
Condition...
Conidtion: 
TMP_250
TMP_250
clearning node...
clearing ir...?
TMP_251 = CONVERT collateralAsset_1 to iERC20
clearing ir...?
TMP_252(bool) = HIGH_LEVEL_CALL, dest:TMP_251(iERC20), function:transfer, arguments:['POOLS_89', '_interestOwed_1']  
has variable
[i] TMP_252 cleared
clearing ir...?
POOLS_90(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_89'])
typecheckig node...
TMP_251 = CONVERT collateralAsset_1 to iERC20
checking tmp_251
Temp variable: tmp_251
Function name: payInterest
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
collateralAsset
[i]Type for TMP_251
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_252(bool) = HIGH_LEVEL_CALL, dest:TMP_251(iERC20), function:transfer, arguments:['POOLS_89', '_interestOwed_1']  
High Level Call: transfer
checking tmp_252
Temp variable: tmp_252
Function name: payInterest
High Call: transfer
func name:transfer
other func name:transfer
TMP_252
WIP
hlc contract name: XXX func_name: transfer
TMP_252
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_252
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_90(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_89'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_255 = CONVERT POOLS_89 to iPOOLS
clearing ir...?
TMP_256(bool) = HIGH_LEVEL_CALL, dest:TMP_255(iPOOLS), function:isSynth, arguments:['collateralAsset_1']  
has variable
[i] TMP_256 cleared
clearing ir...?
POOLS_92(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
CONDITION TMP_256
typecheckig node...
TMP_255 = CONVERT POOLS_89 to iPOOLS
checking tmp_255
Temp variable: tmp_255
Function name: payInterest
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
POOLS
[i]Type for TMP_255
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_256(bool) = HIGH_LEVEL_CALL, dest:TMP_255(iPOOLS), function:isSynth, arguments:['collateralAsset_1']  
High Level Call: issynth
checking tmp_256
Temp variable: tmp_256
Function name: payInterest
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_256
WIP
hlc contract name: XXX func_name: isSynth
TMP_256
Finding type for hlc_1...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_256
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_92(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
CONDITION TMP_256
Condition...
Conidtion: 
TMP_256
TMP_256
clearning node...
clearing ir...?
TMP_253 = CONVERT POOLS_90 to iPOOLS
clearing ir...?
HIGH_LEVEL_CALL, dest:TMP_253(iPOOLS), function:sync, arguments:['collateralAsset_1', 'debtAsset_1']  
clearing ir...?
POOLS_91(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_253 = CONVERT POOLS_90 to iPOOLS
checking tmp_253
Temp variable: tmp_253
Function name: payInterest
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
POOLS
[i]Type for TMP_253
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
HIGH_LEVEL_CALL, dest:TMP_253(iPOOLS), function:sync, arguments:['collateralAsset_1', 'debtAsset_1']  
High Level Call: sync
High Call: sync
func name:sync
other func name:sync
done.
POOLS_91(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_257 = CONVERT collateralAsset_1 to iERC20
clearing ir...?
TMP_258(bool) = HIGH_LEVEL_CALL, dest:TMP_257(iERC20), function:transfer, arguments:['POOLS_92', '_interestOwed_1']  
has variable
[i] TMP_258 cleared
clearing ir...?
POOLS_93(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_257 = CONVERT collateralAsset_1 to iERC20
checking tmp_257
Temp variable: tmp_257
Function name: payInterest
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
collateralAsset
[i]Type for TMP_257
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_258(bool) = HIGH_LEVEL_CALL, dest:TMP_257(iERC20), function:transfer, arguments:['POOLS_92', '_interestOwed_1']  
High Level Call: transfer
checking tmp_258
Temp variable: tmp_258
Function name: payInterest
High Call: transfer
func name:transfer
other func name:transfer
TMP_258
WIP
hlc contract name: XXX func_name: transfer
TMP_258
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_258
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_93(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_259 = CONVERT POOLS_93 to iPOOLS
clearing ir...?
TMP_260 = CONVERT collateralAsset_1 to iSYNTH
clearing ir...?
TMP_261(address) = HIGH_LEVEL_CALL, dest:TMP_260(iSYNTH), function:TOKEN, arguments:[]  
has variable
[i] TMP_261 cleared
clearing ir...?
POOLS_94(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_93', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
HIGH_LEVEL_CALL, dest:TMP_259(iPOOLS), function:syncSynth, arguments:['TMP_261']  
clearing ir...?
POOLS_95(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_94', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_259 = CONVERT POOLS_93 to iPOOLS
checking tmp_259
Temp variable: tmp_259
Function name: payInterest
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
POOLS
[i]Type for TMP_259
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_260 = CONVERT collateralAsset_1 to iSYNTH
checking tmp_260
Temp variable: tmp_260
Function name: payInterest
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
collateralAsset
[i]Type for TMP_260
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_261(address) = HIGH_LEVEL_CALL, dest:TMP_260(iSYNTH), function:TOKEN, arguments:[]  
High Level Call: token
checking tmp_261
Temp variable: tmp_261
Function name: payInterest
High Call: TOKEN
func name:TOKEN
other func name:TOKEN
TMP_261
WIP
hlc contract name: XXX func_name: TOKEN
TMP_261
Finding type for hlc_3...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
[i]Type for TMP_261
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
POOLS_94(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_93', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
HIGH_LEVEL_CALL, dest:TMP_259(iPOOLS), function:syncSynth, arguments:['TMP_261']  
High Level Call: syncsynth
High Call: syncSynth
func name:syncSynth
other func name:syncSynth
done.
POOLS_95(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_94', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: payInterest
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
Reading Function: checkLiquidate
Function checkLiquidate not marked
Reading Function: _handleTransferIn
Function name: _handleTransferIn
Function Visibility: internal
_member
Finding type for _member...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_collateralAsset
Finding type for _collateralAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_amount
Finding type for _amount...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [1]
    den: [-1]
clearning node...
clearing ir...?
_member_1(address) := ϕ(['member_1'])
clearing ir...?
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['amount_1'])
clearing ir...?
POOLS_96(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
_member_1(address) := ϕ(['member_1'])
checking _member
Local variable: _member
Function name: _handleTransferIn
Phi
[i]Type for _member
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking _collateralasset
Local variable: _collateralasset
Function name: _handleTransferIn
Phi
[i]Type for _collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_amount_1(uint256) := ϕ(['amount_1'])
checking _amount
Local variable: _amount
Function name: _handleTransferIn
Phi
[i]Type for _amount
Num:
-1
Den:
-1
Norm:
-100
done.
POOLS_96(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferIn
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_263(bool) = INTERNAL_CALL, Router.isBase(address)(_collateralAsset_1)
clearing ir...?
TMP_264 = CONVERT POOLS_97 to iPOOLS
clearing ir...?
TMP_265(bool) = HIGH_LEVEL_CALL, dest:TMP_264(iPOOLS), function:isSynth, arguments:['_collateralAsset_1']  
has variable
[i] TMP_265 cleared
clearing ir...?
POOLS_98(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_97', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_266(bool) = TMP_263 || TMP_265
has variable
[i] TMP_266 cleared
clearing ir...?
CONDITION TMP_266
typecheckig node...
TMP_263(bool) = INTERNAL_CALL, Router.isBase(address)(_collateralAsset_1)
Internal call...
isBase
_collateralAsset
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
added
xyz
Function name: isBase
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
clearing ir...?
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
typecheckig node...
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
checking token
Local variable: token
Function name: isBase
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: isBase
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: isBase
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_298(bool) = token_1 == VADER_32
has variable
[i] TMP_298 cleared
clearing ir...?
TMP_299(bool) = token_1 == USDV_27
has variable
[i] TMP_299 cleared
clearing ir...?
TMP_300(bool) = TMP_298 || TMP_299
has variable
[i] TMP_300 cleared
clearing ir...?
CONDITION TMP_300
typecheckig node...
TMP_298(bool) = token_1 == VADER_32
checking tmp_298
Temp variable: tmp_298
Function name: isBase
[i]Type for TMP_298
Num:
Den:
Norm:
-100
done.
TMP_299(bool) = token_1 == USDV_27
checking tmp_299
Temp variable: tmp_299
Function name: isBase
[i]Type for TMP_299
Num:
Den:
Norm:
-100
done.
TMP_300(bool) = TMP_298 || TMP_299
checking tmp_300
Temp variable: tmp_300
Function name: isBase
[i]Type for TMP_300
Num:
Den:
Norm:
-100
done.
CONDITION TMP_300
Condition...
Conidtion: 
TMP_300
TMP_300
clearning node...
clearing ir...?
RETURN True
typecheckig node...
RETURN True
Return...
isBase
True
True
clearning node...
typecheckig node...
Checking return valueisBase
True
&&
True
Constatn varible: true
Num:
-1
Den:
-1
Norm:
-100
[i]Type for TMP_263
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_264 = CONVERT POOLS_97 to iPOOLS
checking tmp_264
Temp variable: tmp_264
Function name: _handleTransferIn
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
POOLS
[i]Type for TMP_264
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_265(bool) = HIGH_LEVEL_CALL, dest:TMP_264(iPOOLS), function:isSynth, arguments:['_collateralAsset_1']  
High Level Call: issynth
checking tmp_265
Temp variable: tmp_265
Function name: _handleTransferIn
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_265
WIP
hlc contract name: XXX func_name: isSynth
TMP_265
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_265
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_98(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_97', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferIn
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_266(bool) = TMP_263 || TMP_265
checking tmp_266
Temp variable: tmp_266
Function name: _handleTransferIn
[i]Type for TMP_266
Num:
Den:
Norm:
-100
done.
CONDITION TMP_266
Condition...
Conidtion: 
TMP_266
TMP_266
clearning node...
clearing ir...?
TMP_268(bool) = INTERNAL_CALL, Router.isPool(address)(_collateralAsset_1)
clearing ir...?
POOLS_99(address) := ϕ(['POOLS_115'])
clearing ir...?
CONDITION TMP_268
typecheckig node...
TMP_268(bool) = INTERNAL_CALL, Router.isPool(address)(_collateralAsset_1)
Internal call...
isPool
_collateralAsset
Function: isPool
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
[i]Type for TMP_268
Num:
Den:
Norm:
-100
done.
POOLS_99(address) := ϕ(['POOLS_115'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferIn
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
CONDITION TMP_268
Condition...
Conidtion: 
TMP_268
TMP_268
clearning node...
clearing ir...?
TMP_269 = CONVERT POOLS_99 to iPOOLS
clearing ir...?
HIGH_LEVEL_CALL, dest:TMP_269(iPOOLS), function:lockUnits, arguments:['_amount_1', '_collateralAsset_1', '_member_1']  
clearing ir...?
POOLS_100(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_269 = CONVERT POOLS_99 to iPOOLS
checking tmp_269
Temp variable: tmp_269
Function name: _handleTransferIn
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
POOLS
[i]Type for TMP_269
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
HIGH_LEVEL_CALL, dest:TMP_269(iPOOLS), function:lockUnits, arguments:['_amount_1', '_collateralAsset_1', '_member_1']  
High Level Call: lockunits
High Call: lockUnits
func name:lockUnits
other func name:lockUnits
done.
POOLS_100(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferIn
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_267(uint256) = INTERNAL_CALL, Router._getFunds(address,uint256)(_collateralAsset_1,_amount_1)
clearing ir...?
_inputAmount_2(uint256) := TMP_267(uint256)
has variable
[i] _inputAmount cleared
typecheckig node...
TMP_267(uint256) = INTERNAL_CALL, Router._getFunds(address,uint256)(_collateralAsset_1,_amount_1)
Internal call...
_getFunds
_collateralAsset
_amount
Function: _getFunds
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
[i]Type for TMP_267
Num:
1
Den:
-1
Norm:
-100
done.
_inputAmount_2(uint256) := TMP_267(uint256)
checking _inputamount
Local variable: _inputamount
Function name: _handleTransferIn
asgn
Num:
Den:
Norm:
0
0
[i]Type for _inputAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
_inputAmount_1(uint256) := _amount_1(uint256)
has variable
[i] _inputAmount cleared
typecheckig node...
_inputAmount_1(uint256) := _amount_1(uint256)
checking _inputamount
Local variable: _inputamount
Function name: _handleTransferIn
asgn
Num:
Den:
Norm:
0
0
[i]Type for _inputAmount
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
Reading Function: _handleTransferOut
Function name: _handleTransferOut
Function Visibility: internal
_member
Finding type for _member...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_collateralAsset
Finding type for _collateralAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_amount
Finding type for _amount...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [1]
    den: [-1]
clearning node...
clearing ir...?
_member_1(address) := ϕ(['member_1'])
clearing ir...?
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['_collateralUnlocked_1'])
clearing ir...?
POOLS_101(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
_member_1(address) := ϕ(['member_1'])
checking _member
Local variable: _member
Function name: _handleTransferOut
Phi
[i]Type for _member
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking _collateralasset
Local variable: _collateralasset
Function name: _handleTransferOut
Phi
[i]Type for _collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_amount_1(uint256) := ϕ(['_collateralUnlocked_1'])
checking _amount
Local variable: _amount
Function name: _handleTransferOut
Phi
[i]Type for _amount
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_101(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferOut
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_271(bool) = INTERNAL_CALL, Router.isBase(address)(_collateralAsset_1)
clearing ir...?
TMP_272 = CONVERT POOLS_102 to iPOOLS
clearing ir...?
TMP_273(bool) = HIGH_LEVEL_CALL, dest:TMP_272(iPOOLS), function:isSynth, arguments:['_collateralAsset_1']  
has variable
[i] TMP_273 cleared
clearing ir...?
POOLS_103(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_102', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_274(bool) = TMP_271 || TMP_273
has variable
[i] TMP_274 cleared
clearing ir...?
CONDITION TMP_274
typecheckig node...
TMP_271(bool) = INTERNAL_CALL, Router.isBase(address)(_collateralAsset_1)
Internal call...
isBase
_collateralAsset
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
added
xyz
Function name: isBase
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
clearing ir...?
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
typecheckig node...
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
checking token
Local variable: token
Function name: isBase
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: isBase
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: isBase
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_298(bool) = token_1 == VADER_32
has variable
[i] TMP_298 cleared
clearing ir...?
TMP_299(bool) = token_1 == USDV_27
has variable
[i] TMP_299 cleared
clearing ir...?
TMP_300(bool) = TMP_298 || TMP_299
has variable
[i] TMP_300 cleared
clearing ir...?
CONDITION TMP_300
typecheckig node...
TMP_298(bool) = token_1 == VADER_32
checking tmp_298
Temp variable: tmp_298
Function name: isBase
[i]Type for TMP_298
Num:
Den:
Norm:
-100
done.
TMP_299(bool) = token_1 == USDV_27
checking tmp_299
Temp variable: tmp_299
Function name: isBase
[i]Type for TMP_299
Num:
Den:
Norm:
-100
done.
TMP_300(bool) = TMP_298 || TMP_299
checking tmp_300
Temp variable: tmp_300
Function name: isBase
[i]Type for TMP_300
Num:
Den:
Norm:
-100
done.
CONDITION TMP_300
Condition...
Conidtion: 
TMP_300
TMP_300
clearning node...
clearing ir...?
RETURN True
typecheckig node...
RETURN True
Return...
isBase
True
True
clearning node...
typecheckig node...
Checking return valueisBase
True
&&
True
Constatn varible: true
Num:
-1
Den:
-1
Norm:
-100
[i]Type for TMP_271
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_272 = CONVERT POOLS_102 to iPOOLS
checking tmp_272
Temp variable: tmp_272
Function name: _handleTransferOut
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
POOLS
[i]Type for TMP_272
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_273(bool) = HIGH_LEVEL_CALL, dest:TMP_272(iPOOLS), function:isSynth, arguments:['_collateralAsset_1']  
High Level Call: issynth
checking tmp_273
Temp variable: tmp_273
Function name: _handleTransferOut
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_273
WIP
hlc contract name: XXX func_name: isSynth
TMP_273
Finding type for hlc_0...
Num:
-1
Den:
1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_273
Num:
-1
Den:
1
Norm:
0
done.
POOLS_103(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_102', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferOut
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_274(bool) = TMP_271 || TMP_273
checking tmp_274
Temp variable: tmp_274
Function name: _handleTransferOut
[i]Type for TMP_274
Num:
Den:
Norm:
-100
done.
CONDITION TMP_274
Condition...
Conidtion: 
TMP_274
TMP_274
clearning node...
clearing ir...?
TMP_276(bool) = INTERNAL_CALL, Router.isPool(address)(_collateralAsset_1)
clearing ir...?
POOLS_104(address) := ϕ(['POOLS_115'])
clearing ir...?
CONDITION TMP_276
typecheckig node...
TMP_276(bool) = INTERNAL_CALL, Router.isPool(address)(_collateralAsset_1)
Internal call...
isPool
_collateralAsset
Function: isPool
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
[i]Type for TMP_276
Num:
Den:
Norm:
-100
done.
POOLS_104(address) := ϕ(['POOLS_115'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferOut
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
CONDITION TMP_276
Condition...
Conidtion: 
TMP_276
TMP_276
clearning node...
clearing ir...?
INTERNAL_CALL, Router._sendFunds(address,address,uint256)(_collateralAsset_1,_member_1,_amount_1)
typecheckig node...
INTERNAL_CALL, Router._sendFunds(address,address,uint256)(_collateralAsset_1,_member_1,_amount_1)
Internal call...
_sendFunds
_collateralAsset
_member
_amount
Function: _sendFunds
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [1]
    den: [-1]
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_277 = CONVERT POOLS_104 to iPOOLS
clearing ir...?
HIGH_LEVEL_CALL, dest:TMP_277(iPOOLS), function:unlockUnits, arguments:['_amount_1', '_collateralAsset_1', '_member_1']  
clearing ir...?
POOLS_105(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_277 = CONVERT POOLS_104 to iPOOLS
checking tmp_277
Temp variable: tmp_277
Function name: _handleTransferOut
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
POOLS
[i]Type for TMP_277
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
HIGH_LEVEL_CALL, dest:TMP_277(iPOOLS), function:unlockUnits, arguments:['_amount_1', '_collateralAsset_1', '_member_1']  
High Level Call: unlockunits
High Call: unlockUnits
func name:unlockUnits
other func name:unlockUnits
done.
POOLS_105(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleTransferOut
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
Reading Function: _getFunds
Function name: _getFunds
Function Visibility: internal
_token
Finding type for _token...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_amount
Finding type for _amount...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
clearning node...
clearing ir...?
_token_1(address) := ϕ(['_collateralAsset_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['_amount_1'])
typecheckig node...
_token_1(address) := ϕ(['_collateralAsset_1'])
checking _token
Local variable: _token
Function name: _getFunds
Phi
[i]Type for _token
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_amount_1(uint256) := ϕ(['_amount_1'])
checking _amount
Local variable: _amount
Function name: _getFunds
Phi
[i]Type for _amount
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_279 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_280 = CONVERT this to address
clearing ir...?
TMP_281(uint256) = HIGH_LEVEL_CALL, dest:TMP_279(iERC20), function:balanceOf, arguments:['TMP_280']  
has variable
[i] TMP_281 cleared
clearing ir...?
_balance_1(uint256) := TMP_281(uint256)
has variable
[i] _balance cleared
typecheckig node...
TMP_279 = CONVERT _token_1 to iERC20
checking tmp_279
Temp variable: tmp_279
Function name: _getFunds
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_279
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_280 = CONVERT this to address
checking tmp_280
Temp variable: tmp_280
Function name: _getFunds
Num:
Den:
Norm:
0
not variable
0
this
[i]Type for TMP_280
Num:
Den:
Norm:
0
done.
TMP_281(uint256) = HIGH_LEVEL_CALL, dest:TMP_279(iERC20), function:balanceOf, arguments:['TMP_280']  
High Level Call: balanceof
checking tmp_281
Temp variable: tmp_281
Function name: _getFunds
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_281
WIP
hlc contract name: XXX func_name: balanceOf
TMP_281
Finding type for hlc_0...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_281
Num:
1
Den:
-1
Norm:
0
done.
_balance_1(uint256) := TMP_281(uint256)
checking _balance
Local variable: _balance
Function name: _getFunds
asgn
Num:
Den:
Norm:
0
0
[i]Type for _balance
Num:
1
Den:
-1
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_282(bool) = tx.origin == msg.sender
has variable
[i] TMP_282 cleared
clearing ir...?
CONDITION TMP_282
typecheckig node...
TMP_282(bool) = tx.origin == msg.sender
checking tmp_282
Temp variable: tmp_282
Function name: _getFunds
[i]Type for TMP_282
Num:
Den:
Norm:
-100
done.
CONDITION TMP_282
Condition...
Conidtion: 
TMP_282
TMP_282
clearning node...
clearing ir...?
TMP_283 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_284 = CONVERT this to address
clearing ir...?
TMP_285(bool) = HIGH_LEVEL_CALL, dest:TMP_283(iERC20), function:transferTo, arguments:['TMP_284', '_amount_1']  
has variable
[i] TMP_285 cleared
clearing ir...?
TMP_286(None) = SOLIDITY_CALL require(bool)(TMP_285)
typecheckig node...
TMP_283 = CONVERT _token_1 to iERC20
checking tmp_283
Temp variable: tmp_283
Function name: _getFunds
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_283
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_284 = CONVERT this to address
checking tmp_284
Temp variable: tmp_284
Function name: _getFunds
Num:
Den:
Norm:
0
not variable
0
this
[i]Type for TMP_284
Num:
Den:
Norm:
0
done.
TMP_285(bool) = HIGH_LEVEL_CALL, dest:TMP_283(iERC20), function:transferTo, arguments:['TMP_284', '_amount_1']  
High Level Call: transferto
checking tmp_285
Temp variable: tmp_285
Function name: _getFunds
High Call: transferTo
func name:transferTo
other func name:transferTo
TMP_285
WIP
hlc contract name: XXX func_name: transferTo
TMP_285
Finding type for hlc_1...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_285
Num:
-1
Den:
-1
Norm:
0
done.
TMP_286(None) = SOLIDITY_CALL require(bool)(TMP_285)
checking tmp_286
Temp variable: tmp_286
Function name: _getFunds
[i]Type for TMP_286
Num:
Den:
Norm:
-100
done.
[x]node added back
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_287 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_288 = CONVERT this to address
clearing ir...?
TMP_289(bool) = HIGH_LEVEL_CALL, dest:TMP_287(iERC20), function:transferFrom, arguments:['msg.sender', 'TMP_288', '_amount_1']  
has variable
[i] TMP_289 cleared
clearing ir...?
TMP_290(None) = SOLIDITY_CALL require(bool)(TMP_289)
typecheckig node...
TMP_287 = CONVERT _token_1 to iERC20
checking tmp_287
Temp variable: tmp_287
Function name: _getFunds
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_287
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_288 = CONVERT this to address
checking tmp_288
Temp variable: tmp_288
Function name: _getFunds
Num:
Den:
Norm:
0
not variable
0
this
[i]Type for TMP_288
Num:
Den:
Norm:
0
done.
TMP_289(bool) = HIGH_LEVEL_CALL, dest:TMP_287(iERC20), function:transferFrom, arguments:['msg.sender', 'TMP_288', '_amount_1']  
High Level Call: transferfrom
checking tmp_289
Temp variable: tmp_289
Function name: _getFunds
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_289
WIP
hlc contract name: XXX func_name: transferFrom
TMP_289
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_289
Num:
-1
Den:
-1
Norm:
0
done.
TMP_290(None) = SOLIDITY_CALL require(bool)(TMP_289)
checking tmp_290
Temp variable: tmp_290
Function name: _getFunds
[i]Type for TMP_290
Num:
Den:
Norm:
-100
done.
[x]node added back
clearning node...
clearing ir...?
TMP_291 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_292 = CONVERT this to address
clearing ir...?
TMP_293(uint256) = HIGH_LEVEL_CALL, dest:TMP_291(iERC20), function:balanceOf, arguments:['TMP_292']  
has variable
[i] TMP_293 cleared
clearing ir...?
TMP_294(uint256) = TMP_293 (c)- _balance_1
has variable
[i] TMP_294 cleared
clearing ir...?
RETURN TMP_294
typecheckig node...
TMP_291 = CONVERT _token_1 to iERC20
checking tmp_291
Temp variable: tmp_291
Function name: _getFunds
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_292 = CONVERT this to address
checking tmp_292
Temp variable: tmp_292
Function name: _getFunds
Num:
Den:
Norm:
0
not variable
0
this
[i]Type for TMP_292
Num:
Den:
Norm:
0
done.
TMP_293(uint256) = HIGH_LEVEL_CALL, dest:TMP_291(iERC20), function:balanceOf, arguments:['TMP_292']  
High Level Call: balanceof
checking tmp_293
Temp variable: tmp_293
Function name: _getFunds
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_293
WIP
hlc contract name: XXX func_name: balanceOf
TMP_293
Finding type for hlc_3...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_293
Num:
1
Den:
-1
Norm:
0
done.
TMP_294(uint256) = TMP_293 (c)- _balance_1
checking tmp_294
Temp variable: tmp_294
Function name: _getFunds
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
[i]Type for TMP_294
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_294
Return...
_getFunds
TMP_294
TMP_294
[x]node added back
Reading Function: _sendFunds
Function _sendFunds not marked
Reading Function: _addDebtToMember
Function name: _addDebtToMember
Function Visibility: internal
_member
Finding type for _member...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_collateral
Finding type for _collateral...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
_collateralAsset
Finding type for _collateralAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_debt
Finding type for _debt...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
_debtAsset
Finding type for _debtAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
Param: 3
    num: [-1]
    den: [-1]
Param: 4
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
_member_1(address) := ϕ(['member_1'])
clearing ir...?
_collateral_1(uint256) := ϕ(['_collateral_1'])
clearing ir...?
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
_debt_1(uint256) := ϕ(['_debtIssued_1'])
clearing ir...?
_debtAsset_1(address) := ϕ(['debtAsset_1'])
clearing ir...?
mapMember_Collateral_1(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_0', 'mapMember_Collateral_7', 'mapMember_Collateral_3', 'mapMember_Collateral_8', 'mapMember_Collateral_6'])
typecheckig node...
_member_1(address) := ϕ(['member_1'])
checking _member
Local variable: _member
Function name: _addDebtToMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _member
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_collateral_1(uint256) := ϕ(['_collateral_1'])
checking _collateral
Local variable: _collateral
Function name: _addDebtToMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _collateral
Num:
-1
Den:
-1
Norm:
-100
done.
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking _collateralasset
Local variable: _collateralasset
Function name: _addDebtToMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_debt_1(uint256) := ϕ(['_debtIssued_1'])
checking _debt
Local variable: _debt
Function name: _addDebtToMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _debt
Num:
-1
Den:
-1
Norm:
-100
done.
_debtAsset_1(address) := ϕ(['debtAsset_1'])
checking _debtasset
Local variable: _debtasset
Function name: _addDebtToMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _debtAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapMember_Collateral_1(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_0', 'mapMember_Collateral_7', 'mapMember_Collateral_3', 'mapMember_Collateral_8', 'mapMember_Collateral_6'])
checking mapmember_collateral
State IR  variable: mapmember_collateral
State variable: mapmember_collateral
Function name: _addDebtToMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMember_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
REF_128(Router.CollateralDetails) -> mapMember_Collateral_1[_member_1]
clearing ir...?
REF_129(mapping(address => Router.DebtDetails)) -> REF_128.mapCollateral_Debt
clearing ir...?
REF_130(Router.DebtDetails) -> REF_129[_collateralAsset_1]
clearing ir...?
REF_131(mapping(address => uint256)) -> REF_130.debt
clearing ir...?
REF_132(uint256) -> REF_131[_debtAsset_1]
clearing ir...?
mapMember_Collateral_2(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_1'])
clearing ir...?
REF_132(-> mapMember_Collateral_2) = REF_132 (c)+ _debt_1
has variable
typecheckig node...
REF_128(Router.CollateralDetails) -> mapMember_Collateral_1[_member_1]
checking ref_128
Refernce variable: ref_128
Function name: _addDebtToMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_129(mapping(address => Router.DebtDetails)) -> REF_128.mapCollateral_Debt
checking ref_129
Refernce variable: ref_129
Function name: _addDebtToMember
MEMBER
REF_130(Router.DebtDetails) -> REF_129[_collateralAsset_1]
checking ref_130
Refernce variable: ref_130
Function name: _addDebtToMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_131(mapping(address => uint256)) -> REF_130.debt
checking ref_131
Refernce variable: ref_131
Function name: _addDebtToMember
MEMBER
REF_132(uint256) -> REF_131[_debtAsset_1]
checking ref_132
Refernce variable: ref_132
Function name: _addDebtToMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapMember_Collateral_2(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_1'])
checking mapmember_collateral
State IR  variable: mapmember_collateral
State variable: mapmember_collateral
Function name: _addDebtToMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMember_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
REF_132(-> mapMember_Collateral_2) = REF_132 (c)+ _debt_1
checking ref_132
Refernce variable: ref_132
Function name: _addDebtToMember
Num:
-1
Den:
-1
Norm:
0
[i]Type for REF_132
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
REF_133(Router.CollateralDetails) -> mapMember_Collateral_2[_member_1]
clearing ir...?
REF_134(mapping(address => Router.DebtDetails)) -> REF_133.mapCollateral_Debt
clearing ir...?
REF_135(Router.DebtDetails) -> REF_134[_collateralAsset_1]
clearing ir...?
REF_136(mapping(address => uint256)) -> REF_135.collateral
clearing ir...?
REF_137(uint256) -> REF_136[_debtAsset_1]
clearing ir...?
mapMember_Collateral_3(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_2'])
clearing ir...?
REF_137(-> mapMember_Collateral_3) = REF_137 (c)+ _collateral_1
has variable
typecheckig node...
REF_133(Router.CollateralDetails) -> mapMember_Collateral_2[_member_1]
checking ref_133
Refernce variable: ref_133
Function name: _addDebtToMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_134(mapping(address => Router.DebtDetails)) -> REF_133.mapCollateral_Debt
checking ref_134
Refernce variable: ref_134
Function name: _addDebtToMember
MEMBER
REF_135(Router.DebtDetails) -> REF_134[_collateralAsset_1]
checking ref_135
Refernce variable: ref_135
Function name: _addDebtToMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_136(mapping(address => uint256)) -> REF_135.collateral
checking ref_136
Refernce variable: ref_136
Function name: _addDebtToMember
MEMBER
REF_137(uint256) -> REF_136[_debtAsset_1]
checking ref_137
Refernce variable: ref_137
Function name: _addDebtToMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapMember_Collateral_3(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_2'])
checking mapmember_collateral
State IR  variable: mapmember_collateral
State variable: mapmember_collateral
Function name: _addDebtToMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMember_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
REF_137(-> mapMember_Collateral_3) = REF_137 (c)+ _collateral_1
checking ref_137
Refernce variable: ref_137
Function name: _addDebtToMember
Num:
-1
Den:
-1
Norm:
0
[i]Type for REF_137
Num:
-1
Den:
-1
Norm:
0
done.
Reading Function: _removeDebtFromMember
Function name: _removeDebtFromMember
Function Visibility: internal
_member
Finding type for _member...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_collateral
Finding type for _collateral...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
_collateralAsset
Finding type for _collateralAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_debt
Finding type for _debt...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
_debtAsset
Finding type for _debtAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
Param: 3
    num: [-1]
    den: [-1]
Param: 4
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
_member_1(address) := ϕ(['member_1'])
clearing ir...?
_collateral_1(uint256) := ϕ(['_collateralUnlocked_1'])
clearing ir...?
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
_debt_1(uint256) := ϕ(['_debt_1'])
clearing ir...?
_debtAsset_1(address) := ϕ(['debtAsset_1'])
clearing ir...?
mapMember_Collateral_4(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_0', 'mapMember_Collateral_7', 'mapMember_Collateral_3', 'mapMember_Collateral_8', 'mapMember_Collateral_6'])
typecheckig node...
_member_1(address) := ϕ(['member_1'])
checking _member
Local variable: _member
Function name: _removeDebtFromMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _member
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_collateral_1(uint256) := ϕ(['_collateralUnlocked_1'])
checking _collateral
Local variable: _collateral
Function name: _removeDebtFromMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _collateral
Num:
-1
Den:
-1
Norm:
-100
done.
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking _collateralasset
Local variable: _collateralasset
Function name: _removeDebtFromMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_debt_1(uint256) := ϕ(['_debt_1'])
checking _debt
Local variable: _debt
Function name: _removeDebtFromMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for _debt
Num:
-1
Den:
-1
Norm:
-100
done.
_debtAsset_1(address) := ϕ(['debtAsset_1'])
checking _debtasset
Local variable: _debtasset
Function name: _removeDebtFromMember
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _debtAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapMember_Collateral_4(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_0', 'mapMember_Collateral_7', 'mapMember_Collateral_3', 'mapMember_Collateral_8', 'mapMember_Collateral_6'])
checking mapmember_collateral
State IR  variable: mapmember_collateral
State variable: mapmember_collateral
Function name: _removeDebtFromMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMember_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
REF_138(Router.CollateralDetails) -> mapMember_Collateral_4[_member_1]
clearing ir...?
REF_139(mapping(address => Router.DebtDetails)) -> REF_138.mapCollateral_Debt
clearing ir...?
REF_140(Router.DebtDetails) -> REF_139[_collateralAsset_1]
clearing ir...?
REF_141(mapping(address => uint256)) -> REF_140.debt
clearing ir...?
REF_142(uint256) -> REF_141[_debtAsset_1]
clearing ir...?
mapMember_Collateral_5(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_4'])
clearing ir...?
REF_142(-> mapMember_Collateral_5) = REF_142 (c)- _debt_1
has variable
typecheckig node...
REF_138(Router.CollateralDetails) -> mapMember_Collateral_4[_member_1]
checking ref_138
Refernce variable: ref_138
Function name: _removeDebtFromMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_139(mapping(address => Router.DebtDetails)) -> REF_138.mapCollateral_Debt
checking ref_139
Refernce variable: ref_139
Function name: _removeDebtFromMember
MEMBER
REF_140(Router.DebtDetails) -> REF_139[_collateralAsset_1]
checking ref_140
Refernce variable: ref_140
Function name: _removeDebtFromMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_141(mapping(address => uint256)) -> REF_140.debt
checking ref_141
Refernce variable: ref_141
Function name: _removeDebtFromMember
MEMBER
REF_142(uint256) -> REF_141[_debtAsset_1]
checking ref_142
Refernce variable: ref_142
Function name: _removeDebtFromMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapMember_Collateral_5(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_4'])
checking mapmember_collateral
State IR  variable: mapmember_collateral
State variable: mapmember_collateral
Function name: _removeDebtFromMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMember_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
REF_142(-> mapMember_Collateral_5) = REF_142 (c)- _debt_1
checking ref_142
Refernce variable: ref_142
Function name: _removeDebtFromMember
Num:
-1
Den:
-1
Norm:
0
Num:
-1
Den:
-1
Norm:
-100
Num:
-1
Den:
-1
Norm:
0
[i]Type for REF_142
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
REF_143(Router.CollateralDetails) -> mapMember_Collateral_5[_member_1]
clearing ir...?
REF_144(mapping(address => Router.DebtDetails)) -> REF_143.mapCollateral_Debt
clearing ir...?
REF_145(Router.DebtDetails) -> REF_144[_collateralAsset_1]
clearing ir...?
REF_146(mapping(address => uint256)) -> REF_145.collateral
clearing ir...?
REF_147(uint256) -> REF_146[_debtAsset_1]
clearing ir...?
mapMember_Collateral_6(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_5'])
clearing ir...?
REF_147(-> mapMember_Collateral_6) = REF_147 (c)- _collateral_1
has variable
typecheckig node...
REF_143(Router.CollateralDetails) -> mapMember_Collateral_5[_member_1]
checking ref_143
Refernce variable: ref_143
Function name: _removeDebtFromMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_144(mapping(address => Router.DebtDetails)) -> REF_143.mapCollateral_Debt
checking ref_144
Refernce variable: ref_144
Function name: _removeDebtFromMember
MEMBER
REF_145(Router.DebtDetails) -> REF_144[_collateralAsset_1]
checking ref_145
Refernce variable: ref_145
Function name: _removeDebtFromMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_146(mapping(address => uint256)) -> REF_145.collateral
checking ref_146
Refernce variable: ref_146
Function name: _removeDebtFromMember
MEMBER
REF_147(uint256) -> REF_146[_debtAsset_1]
checking ref_147
Refernce variable: ref_147
Function name: _removeDebtFromMember
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapMember_Collateral_6(mapping(address => Router.CollateralDetails)) := ϕ(['mapMember_Collateral_5'])
checking mapmember_collateral
State IR  variable: mapmember_collateral
State variable: mapmember_collateral
Function name: _removeDebtFromMember
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for mapMember_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
REF_147(-> mapMember_Collateral_6) = REF_147 (c)- _collateral_1
checking ref_147
Refernce variable: ref_147
Function name: _removeDebtFromMember
Num:
-1
Den:
-1
Norm:
0
Num:
-1
Den:
-1
Norm:
-100
Num:
-1
Den:
-1
Norm:
0
[i]Type for REF_147
Num:
-1
Den:
-1
Norm:
0
done.
Reading Function: _removeCollateral
Function name: _removeCollateral
Function Visibility: internal
_collateral
Finding type for _collateral...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
_collateralAsset
Finding type for _collateralAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_debtAsset
Finding type for _debtAsset...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
_collateral_1(uint256) := ϕ(['_interestOwed_1'])
clearing ir...?
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
clearing ir...?
_debtAsset_1(address) := ϕ(['debtAsset_1'])
clearing ir...?
mapCollateralDebt_Collateral_20(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_0', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
typecheckig node...
_collateral_1(uint256) := ϕ(['_interestOwed_1'])
checking _collateral
Local variable: _collateral
Function name: _removeCollateral
Phi
[i]Type for _collateral
Num:
-1
Den:
-1
Norm:
-100
done.
_collateralAsset_1(address) := ϕ(['collateralAsset_1'])
checking _collateralasset
Local variable: _collateralasset
Function name: _removeCollateral
Phi
[i]Type for _collateralAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_debtAsset_1(address) := ϕ(['debtAsset_1'])
checking _debtasset
Local variable: _debtasset
Function name: _removeCollateral
Phi
[i]Type for _debtAsset
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
mapCollateralDebt_Collateral_20(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_7', 'mapCollateralDebt_Collateral_0', 'mapCollateralDebt_Collateral_21', 'mapCollateralDebt_Collateral_19', 'mapCollateralDebt_Collateral_22'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: _removeCollateral
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
REF_148(mapping(address => uint256)) -> mapCollateralDebt_Collateral_20[_collateralAsset_1]
clearing ir...?
REF_149(uint256) -> REF_148[_debtAsset_1]
clearing ir...?
mapCollateralDebt_Collateral_21(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_20'])
clearing ir...?
REF_149(-> mapCollateralDebt_Collateral_21) = REF_149 (c)- _collateral_1
has variable
typecheckig node...
REF_148(mapping(address => uint256)) -> mapCollateralDebt_Collateral_20[_collateralAsset_1]
checking ref_148
Refernce variable: ref_148
Function name: _removeCollateral
INDEX
Num:
-1
Den:
-1
Norm:
-100
REF_149(uint256) -> REF_148[_debtAsset_1]
checking ref_149
Refernce variable: ref_149
Function name: _removeCollateral
INDEX
Num:
-1
Den:
-1
Norm:
-100
mapCollateralDebt_Collateral_21(mapping(address => mapping(address => uint256))) := ϕ(['mapCollateralDebt_Collateral_20'])
checking mapcollateraldebt_collateral
State IR  variable: mapcollateraldebt_collateral
State variable: mapcollateraldebt_collateral
Function name: _removeCollateral
Phi
[i]Type for mapCollateralDebt_Collateral
Num:
-1
Den:
-1
Norm:
-100
done.
REF_149(-> mapCollateralDebt_Collateral_21) = REF_149 (c)- _collateral_1
checking ref_149
Refernce variable: ref_149
Function name: _removeCollateral
Num:
-1
Den:
-1
Norm:
0
Num:
-1
Den:
-1
Norm:
-100
Num:
-1
Den:
-1
Norm:
0
[i]Type for REF_149
Num:
-1
Den:
-1
Norm:
0
done.
Reading Function: isBase
Function name: isBase
Function Visibility: public
token
Finding type for token...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
clearing ir...?
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
typecheckig node...
token_1(address) := ϕ(['outputToken_1', '_collateralAsset_1', 'inputToken_1', '_collateralAsset_1', '_token_1', 'collateralAsset_1'])
checking token
Local variable: token
Function name: isBase
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
VADER_32(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: isBase
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_27(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: isBase
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_298(bool) = token_1 == VADER_32
has variable
[i] TMP_298 cleared
clearing ir...?
TMP_299(bool) = token_1 == USDV_27
has variable
[i] TMP_299 cleared
clearing ir...?
TMP_300(bool) = TMP_298 || TMP_299
has variable
[i] TMP_300 cleared
clearing ir...?
CONDITION TMP_300
typecheckig node...
TMP_298(bool) = token_1 == VADER_32
checking tmp_298
Temp variable: tmp_298
Function name: isBase
[i]Type for TMP_298
Num:
Den:
Norm:
-100
done.
TMP_299(bool) = token_1 == USDV_27
checking tmp_299
Temp variable: tmp_299
Function name: isBase
[i]Type for TMP_299
Num:
Den:
Norm:
-100
done.
TMP_300(bool) = TMP_298 || TMP_299
checking tmp_300
Temp variable: tmp_300
Function name: isBase
[i]Type for TMP_300
Num:
Den:
Norm:
-100
done.
CONDITION TMP_300
Condition...
Conidtion: 
TMP_300
TMP_300
clearning node...
clearing ir...?
RETURN True
typecheckig node...
RETURN True
Return...
isBase
True
True
clearning node...
typecheckig node...
Reading Function: reserveVADER
Function reserveVADER not marked
Reading Function: reserveUSDV
Function reserveUSDV not marked
Reading Function: moveTokenToPools
Function name: moveTokenToPools
Function Visibility: internal
_token
Finding type for _token...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_amount
Finding type for _amount...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
clearning node...
clearing ir...?
_token_1(address) := ϕ(['token_1', 'TMP_20', 'inputToken_1', 'base_1', 'debtAsset_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['inputToken_1', 'inputBase_1', 'inputAmount_1', '_amount_1'])
clearing ir...?
VADER_35(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_30(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
clearing ir...?
POOLS_106(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
_token_1(address) := ϕ(['token_1', 'TMP_20', 'inputToken_1', 'base_1', 'debtAsset_1'])
checking _token
Local variable: _token
Function name: moveTokenToPools
Phi
[i]Type for _token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
_amount_1(uint256) := ϕ(['inputToken_1', 'inputBase_1', 'inputAmount_1', '_amount_1'])
checking _amount
Local variable: _amount
Function name: moveTokenToPools
Phi
[i]Type for _amount
Num:
1
Den:
-1
Norm:
-100
done.
VADER_35(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_0', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: moveTokenToPools
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_30(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_25', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_29', 'USDV_0'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: moveTokenToPools
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_106(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_307(bool) = _token_1 == VADER_35
has variable
[i] TMP_307 cleared
clearing ir...?
TMP_308(bool) = _token_1 == USDV_30
has variable
[i] TMP_308 cleared
clearing ir...?
TMP_309(bool) = TMP_307 || TMP_308
has variable
[i] TMP_309 cleared
clearing ir...?
TMP_310 = CONVERT POOLS_106 to iPOOLS
clearing ir...?
TMP_311(bool) = HIGH_LEVEL_CALL, dest:TMP_310(iPOOLS), function:isSynth, arguments:['_token_1']  
has variable
[i] TMP_311 cleared
clearing ir...?
VADER_36(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_35', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
clearing ir...?
USDV_31(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_30', 'USDV_29', 'USDV_25'])
clearing ir...?
POOLS_107(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_106'])
clearing ir...?
TMP_312(bool) = TMP_309 || TMP_311
has variable
[i] TMP_312 cleared
clearing ir...?
CONDITION TMP_312
typecheckig node...
TMP_307(bool) = _token_1 == VADER_35
checking tmp_307
Temp variable: tmp_307
Function name: moveTokenToPools
[i]Type for TMP_307
Num:
Den:
Norm:
-100
done.
TMP_308(bool) = _token_1 == USDV_30
checking tmp_308
Temp variable: tmp_308
Function name: moveTokenToPools
[i]Type for TMP_308
Num:
Den:
Norm:
-100
done.
TMP_309(bool) = TMP_307 || TMP_308
checking tmp_309
Temp variable: tmp_309
Function name: moveTokenToPools
[i]Type for TMP_309
Num:
Den:
Norm:
-100
done.
TMP_310 = CONVERT POOLS_106 to iPOOLS
checking tmp_310
Temp variable: tmp_310
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
POOLS
[i]Type for TMP_310
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_311(bool) = HIGH_LEVEL_CALL, dest:TMP_310(iPOOLS), function:isSynth, arguments:['_token_1']  
High Level Call: issynth
checking tmp_311
Temp variable: tmp_311
Function name: moveTokenToPools
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_311
WIP
hlc contract name: XXX func_name: isSynth
TMP_311
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_311
Num:
-1
Den:
-1
Norm:
0
done.
VADER_36(address) := ϕ(['VADER_20', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_31', 'VADER_27', 'VADER_18', 'VADER_10', 'VADER_35', 'VADER_38', 'VADER_40', 'VADER_36', 'VADER_26'])
checking vader
State IR  variable: vader
State variable: vader
Function name: moveTokenToPools
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_31(address) := ϕ(['USDV_26', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_15', 'USDV_18', 'USDV_30', 'USDV_29', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: moveTokenToPools
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_107(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_106'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_312(bool) = TMP_309 || TMP_311
checking tmp_312
Temp variable: tmp_312
Function name: moveTokenToPools
[i]Type for TMP_312
Num:
Den:
Norm:
-100
done.
CONDITION TMP_312
Condition...
Conidtion: 
TMP_312
TMP_312
clearning node...
clearing ir...?
TMP_318 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:TMP_318(iERC20), function:balanceOf, arguments:['POOLS_107']  
has variable
[i] TMP_319 cleared
clearing ir...?
POOLS_110(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
_startBal_1(uint256) := TMP_319(uint256)
has variable
[i] _startBal cleared
typecheckig node...
TMP_318 = CONVERT _token_1 to iERC20
checking tmp_318
Temp variable: tmp_318
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_318
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:TMP_318(iERC20), function:balanceOf, arguments:['POOLS_107']  
High Level Call: balanceof
checking tmp_319
Temp variable: tmp_319
Function name: moveTokenToPools
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_319
WIP
hlc contract name: XXX func_name: balanceOf
TMP_319
Finding type for hlc_1...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_319
Num:
1
Den:
-1
Norm:
0
done.
POOLS_110(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_startBal_1(uint256) := TMP_319(uint256)
checking _startbal
Local variable: _startbal
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
0
0
[i]Type for _startBal
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_320 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_321(bool) = HIGH_LEVEL_CALL, dest:TMP_320(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_110', '_amount_1']  
has variable
[i] TMP_321 cleared
clearing ir...?
POOLS_111(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_110', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_320 = CONVERT _token_1 to iERC20
checking tmp_320
Temp variable: tmp_320
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_320
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_321(bool) = HIGH_LEVEL_CALL, dest:TMP_320(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_110', '_amount_1']  
High Level Call: transferfrom
checking tmp_321
Temp variable: tmp_321
Function name: moveTokenToPools
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_321
WIP
hlc contract name: XXX func_name: transferFrom
TMP_321
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_321
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_111(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_110', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
safeAmount_1(uint256) := _amount_1(uint256)
has variable
[i] safeAmount cleared
typecheckig node...
safeAmount_1(uint256) := _amount_1(uint256)
checking safeamount
Local variable: safeamount
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
0
0
[i]Type for safeAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_322 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_323(uint256) = HIGH_LEVEL_CALL, dest:TMP_322(iERC20), function:balanceOf, arguments:['POOLS_111']  
has variable
[i] TMP_323 cleared
clearing ir...?
POOLS_112(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_111', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_324(uint256) = TMP_323 (c)- _startBal_1
has variable
[i] TMP_324 cleared
clearing ir...?
safeAmount_2(uint256) := TMP_324(uint256)
has variable
[i] safeAmount cleared
typecheckig node...
TMP_322 = CONVERT _token_1 to iERC20
checking tmp_322
Temp variable: tmp_322
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_322
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_323(uint256) = HIGH_LEVEL_CALL, dest:TMP_322(iERC20), function:balanceOf, arguments:['POOLS_111']  
High Level Call: balanceof
checking tmp_323
Temp variable: tmp_323
Function name: moveTokenToPools
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_323
WIP
hlc contract name: XXX func_name: balanceOf
TMP_323
Finding type for hlc_3...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_323
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_112(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_111', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_324(uint256) = TMP_323 (c)- _startBal_1
checking tmp_324
Temp variable: tmp_324
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
[i]Type for TMP_324
Num:
1
Den:
-1
Norm:
0
done.
safeAmount_2(uint256) := TMP_324(uint256)
checking safeamount
Local variable: safeamount
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
0
0
[i]Type for safeAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_313(bool) = tx.origin == msg.sender
has variable
[i] TMP_313 cleared
clearing ir...?
CONDITION TMP_313
typecheckig node...
TMP_313(bool) = tx.origin == msg.sender
checking tmp_313
Temp variable: tmp_313
Function name: moveTokenToPools
[i]Type for TMP_313
Num:
Den:
Norm:
-100
done.
CONDITION TMP_313
Condition...
Conidtion: 
TMP_313
TMP_313
clearning node...
clearing ir...?
TMP_316 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_317(bool) = HIGH_LEVEL_CALL, dest:TMP_316(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_107', '_amount_1']  
has variable
[i] TMP_317 cleared
clearing ir...?
POOLS_108(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_107', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_316 = CONVERT _token_1 to iERC20
checking tmp_316
Temp variable: tmp_316
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_316
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_317(bool) = HIGH_LEVEL_CALL, dest:TMP_316(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_107', '_amount_1']  
High Level Call: transferfrom
checking tmp_317
Temp variable: tmp_317
Function name: moveTokenToPools
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_317
WIP
hlc contract name: XXX func_name: transferFrom
TMP_317
Finding type for hlc_4...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_317
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_108(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_107', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_314 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_315(bool) = HIGH_LEVEL_CALL, dest:TMP_314(iERC20), function:transferTo, arguments:['POOLS_107', '_amount_1']  
has variable
[i] TMP_315 cleared
clearing ir...?
POOLS_109(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
TMP_314 = CONVERT _token_1 to iERC20
checking tmp_314
Temp variable: tmp_314
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_314
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_315(bool) = HIGH_LEVEL_CALL, dest:TMP_314(iERC20), function:transferTo, arguments:['POOLS_107', '_amount_1']  
High Level Call: transferto
checking tmp_315
Temp variable: tmp_315
Function name: moveTokenToPools
High Call: transferTo
func name:transferTo
other func name:transferTo
TMP_315
WIP
hlc contract name: XXX func_name: transferTo
TMP_315
Finding type for hlc_5...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_315
Num:
1
Den:
-1
Norm:
0
done.
POOLS_109(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
Reading Function: UTILS
Function UTILS not marked
Reading Function: DAO
Function DAO not marked
Reading Function: emitting
Function emitting not marked
Reading Function: isCurated
Function isCurated not marked
Reading Function: isPool
Function name: isPool
Function Visibility: public
token
Finding type for token...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
token_1(address) := ϕ(['_collateralAsset_1', '_collateralAsset_1'])
clearing ir...?
POOLS_113(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
typecheckig node...
token_1(address) := ϕ(['_collateralAsset_1', '_collateralAsset_1'])
checking token
Local variable: token
Function name: isPool
Phi
[i]Type for token
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
POOLS_113(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: isPool
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_331 = CONVERT POOLS_113 to iPOOLS
clearing ir...?
TMP_332(bool) = HIGH_LEVEL_CALL, dest:TMP_331(iPOOLS), function:isAnchor, arguments:['token_1']  
has variable
[i] TMP_332 cleared
clearing ir...?
POOLS_114(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_113'])
clearing ir...?
TMP_333 = CONVERT POOLS_114 to iPOOLS
clearing ir...?
TMP_334(bool) = HIGH_LEVEL_CALL, dest:TMP_333(iPOOLS), function:isAsset, arguments:['token_1']  
has variable
[i] TMP_334 cleared
clearing ir...?
POOLS_115(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_114', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
clearing ir...?
TMP_335(bool) = TMP_332 || TMP_334
has variable
[i] TMP_335 cleared
clearing ir...?
CONDITION TMP_335
typecheckig node...
TMP_331 = CONVERT POOLS_113 to iPOOLS
checking tmp_331
Temp variable: tmp_331
Function name: isPool
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
POOLS
[i]Type for TMP_331
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_332(bool) = HIGH_LEVEL_CALL, dest:TMP_331(iPOOLS), function:isAnchor, arguments:['token_1']  
High Level Call: isanchor
checking tmp_332
Temp variable: tmp_332
Function name: isPool
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_332
WIP
hlc contract name: XXX func_name: isAnchor
TMP_332
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_332
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_114(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98', 'POOLS_113'])
checking pools
State IR  variable: pools
State variable: pools
Function name: isPool
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_333 = CONVERT POOLS_114 to iPOOLS
checking tmp_333
Temp variable: tmp_333
Function name: isPool
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
POOLS
[i]Type for TMP_333
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_334(bool) = HIGH_LEVEL_CALL, dest:TMP_333(iPOOLS), function:isAsset, arguments:['token_1']  
High Level Call: isasset
checking tmp_334
Temp variable: tmp_334
Function name: isPool
High Call: isAsset
func name:isAsset
other func name:isAsset
TMP_334
WIP
hlc contract name: XXX func_name: isAsset
COPIED
[i]Type for TMP_334
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_115(address) := ϕ(['POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_105', 'POOLS_40', 'POOLS_6', 'POOLS_70', 'POOLS_1', 'POOLS_44', 'POOLS_37', 'POOLS_99', 'POOLS_95', 'POOLS_57', 'POOLS_81', 'POOLS_84', 'POOLS_20', 'POOLS_91', 'POOLS_103', 'POOLS_53', 'POOLS_80', 'POOLS_100', 'POOLS_38', 'POOLS_115', 'POOLS_92', 'POOLS_21', 'POOLS_47', 'POOLS_114', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104', 'POOLS_79', 'POOLS_8', 'POOLS_98'])
checking pools
State IR  variable: pools
State variable: pools
Function name: isPool
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_335(bool) = TMP_332 || TMP_334
checking tmp_335
Temp variable: tmp_335
Function name: isPool
[i]Type for TMP_335
Num:
Den:
Norm:
-100
done.
CONDITION TMP_335
Condition...
Conidtion: 
TMP_335
TMP_335
clearning node...
clearing ir...?
pool_1(bool) := True(bool)
has variable
[i] pool cleared
typecheckig node...
pool_1(bool) := True(bool)
checking pool
Local variable: pool
Function name: isPool
asgn
Constatn varible: true
Num:
Den:
Norm:
0
Constatn varible: true
val: True
0
Constatn varible: true
val: True
[i]Type for pool
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
Reading Function: getMemberBaseDeposit
Function getMemberBaseDeposit not marked
Reading Function: getMemberTokenDeposit
Function getMemberTokenDeposit not marked
Reading Function: getMemberLastDeposit
Function getMemberLastDeposit not marked
Reading Function: getMemberCollateral
Function getMemberCollateral not marked
Reading Function: getMemberDebt
Function getMemberDebt not marked
Reading Function: getSystemCollateral
Function getSystemCollateral not marked
Reading Function: getSystemDebt
Function getSystemDebt not marked
Reading Function: getSystemInterestPaid
Function getSystemInterestPaid not marked
Reading Function: getNextEraTime
Function getNextEraTime not marked
Reading Function: slitherConstructorVariables
Function slitherConstructorVariables not marked
------
typecheckig node...
TMP_291 = CONVERT _token_1 to iERC20
checking tmp_291
Temp variable: tmp_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_292 = CONVERT this to address
checking tmp_292
Temp variable: tmp_292
Num:
Den:
Norm:
0
not variable
0
this
[i]Type for TMP_292
Num:
Den:
Norm:
0
done.
TMP_293(uint256) = HIGH_LEVEL_CALL, dest:TMP_291(iERC20), function:balanceOf, arguments:['TMP_292']  
High Level Call: balanceof
checking tmp_293
Temp variable: tmp_293
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_293
WIP
hlc contract name: XXX func_name: balanceOf
TMP_293
Finding type for hlc_1...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_293
Num:
-1
Den:
-1
Norm:
0
done.
TMP_294(uint256) = TMP_293 (c)- _balance_1
checking tmp_294
Temp variable: tmp_294
Num:
-1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_294
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_294
Return...
_getFunds
TMP_294
TMP_294
[x]node added back
------
typecheckig node...
TMP_291 = CONVERT _token_1 to iERC20
checking tmp_291
Temp variable: tmp_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_292 = CONVERT this to address
checking tmp_292
Temp variable: tmp_292
Num:
Den:
Norm:
0
not variable
0
this
[i]Type for TMP_292
Num:
Den:
Norm:
0
done.
TMP_293(uint256) = HIGH_LEVEL_CALL, dest:TMP_291(iERC20), function:balanceOf, arguments:['TMP_292']  
High Level Call: balanceof
checking tmp_293
Temp variable: tmp_293
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_293
WIP
hlc contract name: XXX func_name: balanceOf
TMP_293
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_293
Num:
-1
Den:
-1
Norm:
0
done.
TMP_294(uint256) = TMP_293 (c)- _balance_1
checking tmp_294
Temp variable: tmp_294
Num:
-1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_294
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_294
Return...
_getFunds
TMP_294
TMP_294
[x]node added back
------
typecheckig node...
TMP_291 = CONVERT _token_1 to iERC20
checking tmp_291
Temp variable: tmp_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_292 = CONVERT this to address
checking tmp_292
Temp variable: tmp_292
Num:
Den:
Norm:
0
not variable
0
this
[i]Type for TMP_292
Num:
Den:
Norm:
0
done.
TMP_293(uint256) = HIGH_LEVEL_CALL, dest:TMP_291(iERC20), function:balanceOf, arguments:['TMP_292']  
High Level Call: balanceof
checking tmp_293
Temp variable: tmp_293
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_293
WIP
hlc contract name: XXX func_name: balanceOf
TMP_293
Finding type for hlc_3...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_293
Num:
1
Den:
-1
Norm:
0
done.
TMP_294(uint256) = TMP_293 (c)- _balance_1
checking tmp_294
Temp variable: tmp_294
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_294
Num:
1
Den:
-1
Norm:
0
done.
RETURN TMP_294
Return...
_getFunds
TMP_294
TMP_294
[x]node added back
------
typecheckig node...
TMP_291 = CONVERT _token_1 to iERC20
checking tmp_291
Temp variable: tmp_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_292 = CONVERT this to address
checking tmp_292
Temp variable: tmp_292
Num:
Den:
Norm:
0
not variable
0
this
[i]Type for TMP_292
Num:
Den:
Norm:
0
done.
TMP_293(uint256) = HIGH_LEVEL_CALL, dest:TMP_291(iERC20), function:balanceOf, arguments:['TMP_292']  
High Level Call: balanceof
checking tmp_293
Temp variable: tmp_293
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_293
WIP
hlc contract name: XXX func_name: balanceOf
TMP_293
Finding type for hlc_4...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_293
Num:
2
Den:
-1
Norm:
0
done.
TMP_294(uint256) = TMP_293 (c)- _balance_1
checking tmp_294
Temp variable: tmp_294
Num:
2
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Error with: TMP_294 in function _getFunds
[i]Type for TMP_294
Num:
-1
Den:
-1
Norm:
0
done.
RETURN TMP_294
Return...
_getFunds
TMP_294
TMP_294
[x]node added back
------
typecheckig node...
TMP_291 = CONVERT _token_1 to iERC20
checking tmp_291
Temp variable: tmp_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_292 = CONVERT this to address
checking tmp_292
Temp variable: tmp_292
Num:
Den:
Norm:
0
not variable
0
this
[i]Type for TMP_292
Num:
Den:
Norm:
0
done.
TMP_293(uint256) = HIGH_LEVEL_CALL, dest:TMP_291(iERC20), function:balanceOf, arguments:['TMP_292']  
High Level Call: balanceof
checking tmp_293
Temp variable: tmp_293
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_293
WIP
hlc contract name: XXX func_name: balanceOf
TMP_293
Finding type for hlc_5...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_293
Num:
1
Den:
-1
Norm:
0
done.
TMP_294(uint256) = TMP_293 (c)- _balance_1
checking tmp_294
Temp variable: tmp_294
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
-1
Den:
-1
Norm:
0
Error with: TMP_294 in function _getFunds
[i]Type for TMP_294
Num:
-1
Den:
-1
Norm:
0
done.
RETURN TMP_294
Return...
_getFunds
TMP_294
TMP_294
[x]node added back
------
typecheckig node...
TMP_291 = CONVERT _token_1 to iERC20
checking tmp_291
Temp variable: tmp_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_291
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_292 = CONVERT this to address
checking tmp_292
Temp variable: tmp_292
Num:
Den:
Norm:
0
not variable
0
this
[i]Type for TMP_292
Num:
Den:
Norm:
0
done.
TMP_293(uint256) = HIGH_LEVEL_CALL, dest:TMP_291(iERC20), function:balanceOf, arguments:['TMP_292']  
High Level Call: balanceof
checking tmp_293
Temp variable: tmp_293
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_293
WIP
hlc contract name: XXX func_name: balanceOf
TMP_293
Finding type for hlc_6...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_293
Num:
1
Den:
-1
Norm:
0
done.
TMP_294(uint256) = TMP_293 (c)- _balance_1
checking tmp_294
Temp variable: tmp_294
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
-1
Den:
-1
Norm:
0
Error with: TMP_294 in function _getFunds
[i]Type for TMP_294
Num:
-1
Den:
-1
Norm:
0
done.
RETURN TMP_294
Return...
_getFunds
TMP_294
TMP_294
[x]node added back
contract name: iERC20
WARNING!!!!
iERC20_types.txt
Type File not found.
[x] iERC20 not run
contract name: iPOOLS
WARNING!!!!
iPOOLS_types.txt
Type File not found.
[x] iPOOLS not run
contract name: iSYNTH
WARNING!!!!
iSYNTH_types.txt
Type File not found.
[x] iSYNTH not run
contract name: iUTILS
WARNING!!!!
iUTILS_types.txt
Type File not found.
[x] iUTILS not run
contract name: iVADER
WARNING!!!!
iVADER_types.txt
Type File not found.
[x] iVADER not run
