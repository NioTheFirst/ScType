contract name: Router
WARNING!!!!
Router_types.txt
"Router_types.txt" opened successfully.
[*c], Router



[t], global, USDV, 1, -1, 0



[t], global, one, -1, -1, 0



[t], global, POOLS, -1, -1, 0, XXX



[t], global, mapMember_Collateral, -1, -1, 0



[t], global, curatedPoolCount, -1, -1, 0



[t], global, curatedPoolLimit, -1, -1, 0



[t], global, VADER, -1, -1, 0, XXX



[t], global, mapCollateralDebt_Debt, -1, -1, 0



[t], global, rewardReductionFactor, -1, -1, 0



[t], global, mapCollateralDebt_Collateral, -1, -1, 0



[t], global, mapMemberToken_lastDeposited, -1, -1, 0



[t], global, mapCollateralDebt_interestPaid, -1, -1, 0



[t], global, _isCurated, -1, -1, 0



[t], global, arrayPrices, -1, -1, 0



[t], global, mapMemberToken_depositBase, -1, -1, 0



[t], global, mapMemberToken_depositToken, -1, -1, 0



[t], global, anchorLimit, -1, -1, 0



[t], global, arrayAnchors, -1, -1, 0



[t], global, mapCollateralAsset_NextEra, -1, -1, 0



[t], global, inited, -1, -1, 0



[t], global, insidePriceLimit, -1, -1, 0



[t], global, outsidePriceLimit, -1, -1, 0



[t], global, timeForFullProtection, -1, -1, 0



[t], init, _vader, -1, -1, 0, XXX



[t], init, _usdv, -1, -1, 0, XXX



[t], init, _pool, -1, -1, 0, XXX



[t], swapWithSynthsWithLimit, inputAmount, 1, -1, 0



[t], swapWithSynthsWithLimit, inputToken, -2, -1, 0, XXX



[t], swapWithSynthsWithLimit, inSynth, -1, -1, 0



[t], swapWithSynthsWithLimit, outputToken, -2, -1, 0, XXX



[t], swapWithSynthsWithLimit, outSynth, -1, -1, 0



[t], swapWithSynthsWithLimit, slipLimit, -1, -1, 0



[t], swapWithSynthsWithLimit, hlc_0, -1, -1, 0, XXX



[t], moveTokenToPools, hlc_0, -1, -1, 0



[t], moveTokenToPools, hlc_1, 1, -1, 0



[t], moveTokenToPools, hlc_2, -1, -1, 0



[t], moveTokenToPools, hlc_3, -1, -1, 0



[t], moveTokenToPools, hlc_4, -1, -1, 0



[t], moveTokenToPools, hlc_5, 1, -1, 0



[t], swapWithSynthsWithLimit, hlc_6, -1, -1, 0, XXX



[t], swapWithSynthsWithLimit, hlc_7, -1, -1, 0



[t], UTILS, hlc_0, -1, -1, 0, XXX



[t], swapWithSynthsWithLimit, hlc_1, 2, -1, 0



[t], swapWithSynthsWithLimit, hlc_2, -1, -1, 0



[t], swapWithSynthsWithLimit, hlc_3, 1, -1, 0



[t], swapWithSynthsWithLimit, hlc_4, -1, -1, 0



[t], swapWithSynthsWithLimit, hlc_5, 1, -1, 0



[t], swapWithSynthsWithLimit, hlc_7, -1, -1, 0



[t], swapWithSynthsWithLimit, hlc_8, 1, -1, 0



[t], swapWithSynthsWithLimit, hlc_9, -1, -1, 0



[t], swapWithSynthsWithLimit, hlc_10, 1, -1, 0



[t], swapWithSynthsWithLimit, hlc_11, -1, -1, 0



[t], swapWithSynthsWithLimit, hlc_12, 1, -1, 0



[t], swapWithSynthsWithLimit, hlc_13, 2, -1, 0



[t], swapWithSynthsWithLimit, hlc_14, -1, -1, 0



[t], _handleAnchorPriceUpdate, hlc_0, -1, -1, 0



[t], updateAnchorPrice, ref_0, -1, -1, 0



[t], updateAnchorPrice, ref_1, -1, -1, 0, XXX



[t], updateAnchorPrice, ref_2, 2, -1, 0



[t], updateAnchorPrice, ref_3, -1, -1, 0, XXX



[t], calcValueInBase, hlc_0, 2, -1, 0



[t], addDepositData, member, -1, -1, 0, XXX



[t], addDepositData, token, -1, -1, 0, XXX



[t], addDepositData, amountBase, 2, -1, 0



[t], addDepositData, amountToken, 1, -1, 0



[t], addDepositData, ref_0, -1, -1, 0



[t], addDepositData, ref_1, 2, -1, 0



[t], addDepositData, ref_2, -1, -1, 0



[t], addDepositData, ref_3, 1, -1, 0



[t], addDepositData, ref_4, -1, -1, 0



[t], addDepositData, ref_5, -1, -1, 0



[t], removeDepositData, member, -1, -1, 0, XXX



[t], removeDepositData, token, -1, -1, 0, XXX



[t], removeDepositData, basisPoints, -1, -1, 0



[t], removeDepositData, protection, -1, -1, 0



[t], updateAnchorPrice, hlc_0, 2, -1, 0



[t], removeDepositData, ref_0, -1, -1, 0



[t], removeDepositData, ref_1, 1, -1, 0



[t], removeDepositData, ref_2, -1, -1, 0



[t], removeDepositData, ref_3, 1, -1, 0



[t], removeDepositData, hlc_0, 2, -1, 0



[t], removeDepositData, ref_4, -1, -1, 0



[t], removeDepositData, ref_5, -1, -1, 0



[t], removeDepositData, hlc_1, 1, -1, 0



[t], removeDepositData, ref_6, -1, -1, 0



[t], removeDepositData, ref_7, 2, -1, 0



[t], removeDepositData, ref_8, -1, -1, 0



[t], removeDepositData, ref_9, 1, -1, 0



[t], getILProtection, member, -1, -1, 0, XXX



[t], getILProtection, base, -1, -1, 0, XXX



[t], getILProtection, token, -1, -1, 0, XXX



[t], getILProtection, basisPoints, -1, -1, 0



[t], getILProtection, hlc_0, -1, -1, 0



[t], reserveVADER, hlc_0, 1, -1, 0



[t], reserveUSDV, hlc_0, 2, -1, 0



[t], curatePool, token, -1, -1, 0, XXX



[t], curatePool, hlc_0, -1, -1, 0



[t], curatePool, hlc_1, -1, -1, 0



[t], isCurated, ref_0, -1, -1, 0



[t], curatePool, ref_1, -1, -1, 0



[t], replacePool, oldToken, -1, -1, 0, XXX



[t], replacePool, newToken, -1, -1, 0, XXX



[t], replacePool, hlc_0, -1, -1, 0



[t], replacePool, hlc_1, -1, -1, 0



[t], replacePool, hlc_2, 2, -1, 0



[t], replacePool, ref_0, -1, -1, 0



[t], replacePool, ref_1, -1, -1, 0



[t], listAnchor, token, -1, -1, 0, XXX



[t], listAnchor, ref_0, -1, -1, 0



[t], listAnchor, hlc_0, -1, -1, 0



[t], listAnchor, ref_1, -1, -1, 0



[t], listAnchor, ref_2, -1, -1, 0, XXX



[t], swapWithSynthsWithLimit, hlc_15, -1, -1, 0



[t], listAnchor, hlc_1, 2, -1, 0



[t], listAnchor, ref_3, -1, -1, 0



[t], listAnchor, ref_4, 2, -1, 0



[t], listAnchor, ref_5, -1, -1, 0



[t], replaceAnchor, oldToken, -1, -1, 0, XXX



[t], replaceAnchor, newToken, -1, -1, 0, XXX



[t], replaceAnchor, hlc_0, -1, -1, 0



[t], replaceAnchor, hlc_1, 2, -1, 0



[t], replaceAnchor, hlc_2, 2, -1, 0



[t], getAnchorPrice, ref_0, -1, -1, 0



[t], getAnchorPrice, hlc_0, -1, -1, 0



[t], getAnchorPrice, ref_1, -1, -1, 0



[t], replaceAnchor, ref_2, -1, -1, 0



[t], replaceAnchor, ref_3, -1, -1, 0



[t], replaceAnchor, ref_4, -1, -1, 0



[t], replaceAnchor, ref_5, -1, -1, 0



[t], replaceAnchor, ref_6, -1, -1, 0, XXX



[t], updateAnchorPrice, token, -1, -1, 0, XXX



[t], getVADERAmount, USDVAmount, 2, -1, 0



[t], getUSDVAmount, vaderAmount, 1, -1, 0



[t], borrowForMember, member, -1, -1, 0, XXX



[t], borrowForMember, amount, -1, -1, 0



[t], borrowForMember, collateralAsset, -1, -1, 0, XXX



[t], borrowForMember, debtAsset, -1, -1, 0, XXX



[t], _handleTransferIn, hlc_0, -1, -1, 0



[t], isPool, hlc_0, -1, -1, 0



[t], isPool, hlc_1, -1, -1, 0



[t], _getFunds, hlc_0, 1, -1, 0



[t], _getFunds, hlc_1, -1, -1, 0



[t], _getFunds, hlc_2, -1, -1, 0



[t], _getFunds, hlc_3, 1, -1, 0



[t], _getFunds, hlc_4, 2, -1, 0



[t], borrowForMember, _debtIssued, -1, -1, 0



[t], borrowForMember, _baseBorrowed, -1, -1, 0



[t], borrowForMember, ref_0, -1, -1, 0



[t], borrowForMember, ref_1, -1, -1, 0



[t], borrowForMember, ref_2, -1, -1, 0



[t], borrowForMember, ref_3, -1, -1, 0



[t], borrowForMember, hlc_5, -1, -1, 0



[t], borrowForMember, hlc_6, -1, -1, 0



[t], borrowForMember, hlc_7, -1, -1, 0



[t], borrowForMember, hlc_8, -1, -1, 0



[t], borrowForMember, hlc_9, 1, -1, 0



[t], borrowForMember, hlc_10, 2, -1, 0



[t], getNextEraTime, ref_0, -1, -1, 0



[t], getNextEraTime, ref_1, -1, -1, 0



[t], emitting, hlc_0, -1, -1, 0



[t], payInterest, ref_0, -1, -1, 0



[t], payInterest, ref_1, -1, -1, 0



[t], payInterest, ref_2, -1, -1, 0



[t], payInterest, ref_3, -1, -1, 0



[t], payInterest, hlc_1, -1, -1, 0



[t], payInterest, hlc_2, -1, -1, 0



[t], payInterest, ref_4, -1, -1, 0



[t], payInterest, ref_5, -1, -1, 0



[t], _removeCollateral, ref_0,-1, -1, 0



[t], _removeCollateral, ref_1,-1, -1, 0



[t], payInterest, hlc_0, -1, -1, 0



[t], borrowForMember, hlc_4, 2, -1, 0



[t], payInterest, hlc_3, -1, -1, 0, XXX



[t], repayForMember, member, -1, -1, 0, XXX



[t], repayForMember, basisPoints, -1, -1, 0



[t], repayForMember, collateralAsset, -1, -1, 0, XXX



[t], repayForMember, debtAsset, -1, -1, 0, XXX



[t], getMemberDebt, ref_0, -1, -1, 0



[t], getMemberDebt, ref_1, -1, -1, 0



[t], getMemberDebt, ref_2, -1, -1, 0



[t], getMemberDebt, ref_3, -1, -1, 0



[t], getMemberDebt, ref_4, -1, -1, 0



[t], repayForMember, hlc_0, -1, -1, 0



[t], repayForMember, hlc_6, -1, -1, 0



[t], repayForMember, hlc_7, -1, -1, 0



[t], repayForMember, hlc_8, 1, -1, 0



[t], repayForMember, hlc_9, 2, -1, 0



[t], repayForMember, hlc_10, 1, -1, 0



[t], repayForMember, _collateralUnlocked, 1, -1, 0



[t], repayForMember, _memberInterestShare, -1, -1, 0



[t], repayForMember, ref_0, -1, -1, 0



[t], repayForMember, ref_1, 1, -1, 0



[t], repayForMember, ref_2, -1, -1, 0



[t], repayForMember, ref_3, -1, -1, 0



[t], repayForMember, ref_4, -1, -1, 0



[t], repayForMember, ref_5, -1, -1, 0



[t], _handleTransferOut, hlc_0, -1, -1, 0



[t], _sendFunds, hlc_0, -1, -1, 0



[t], payInterest, collateralAsset, -1, -1, 0, XXX



[t], payInterest, debtAsset, -1, -1, 0, XXX



[t], _handleTransferIn, _member, -1, -1, 0, XXX



[t], _handleTransferIn, _collateralAsset, -1, -1, 0, XXX



[t], _handleTransferIn, _amount, 1, -1, 0



[t], _handleTransferOut, _member, -1, -1, 0, XXX



[t], _handleTransferOut, _collateralAsset, -1, -1, 0, XXX



[t], _handleTransferOut, _amount, 1, -1, 0



[t], _handleTransferOut, hlc_0, -1, 1, 0



[t], _getFunds, _token, -1, -1, 0, XXX



[t], _getFunds, _amount, 1, -1, 0



[t], addDebtToMember, _member, -1, -1, 0, XXX



[t], addDebtToMember, _collateral, -1, -1, 0, XXX



[t], borrowForMember, hlc_2, 2, -1, 0



[t], borrowForMember, hlc_3, -1, -1, 0



[t], _addDebtToMember, _member, -1, -1, 0, XXX



[t], _addDebtToMember, _collateral, -1, -1, 0



[t], _addDebtToMember, _collateralAsset, -1, -1, 0, XXX



[t], _addDebtToMember, _debt, -1, -1, 0



[t], _addDebtToMember, _debtAsset, -1, -1, 0, XXX



[t], _addDebtToMember, ref_0, -1, -1, 0



[t], _addDebtToMember, ref_1, -1, -1, 0



[t], _addDebtToMember, ref_2, -1, -1, 0



[t], _addDebtToMember, ref_3, -1, -1, 0



[t], _addDebtToMember, ref_4, -1, -1, 0



[t], _addDebtToMember, ref_5, -1, -1, 0



[t], _addDebtToMember, ref_6, -1, -1, 0



[t], _addDebtToMember, ref_7, -1, -1, 0



[t], _addDebtToMember, ref_8, -1, -1, 0



[t], _addDebtToMember, ref_9, -1, -1, 0



[t], _removeDebtFromMember, _member, -1, -1, 0, XXX



[t], _removeDebtFromMember, _collateral, -1, -1, 0



[t], _removeDebtFromMember, _collateralAsset, -1, -1, 0, XXX



[t], _removeDebtFromMember, _debt, -1, -1, 0



[t], _removeDebtFromMember, _debtAsset, -1, -1, 0, XXX



[t], _removeDebtFromMember, ref_0, -1, -1, 0



[t], _removeDebtFromMember, ref_1, -1, -1, 0



[t], _removeDebtFromMember, ref_2, -1, -1, 0



[t], _removeDebtFromMember, ref_3, -1, -1, 0



[t], _removeDebtFromMember, ref_4, -1, -1, 0



[t], _removeDebtFromMember, ref_5, -1, -1, 0



[t], _removeDebtFromMember, ref_6, -1, -1, 0



[t], _removeDebtFromMember, ref_7, -1, -1, 0



[t], _removeDebtFromMember, ref_8, -1, -1, 0



[t], _removeDebtFromMember, ref_9, -1, -1, 0



[t], _removeCollateral, _collateral, -1, -1, 0



[t], _removeCollateral, _collateralAsset, -1, -1, 0, XXX



[t], _removeCollateral, _debtAsset, -1, -1, 0, XXX



[t], isBase, token, -1, -1, 0, XXX



[t], moveTokenToPools, _token, -1, -1, 0, XXX



[t], moveTokenToPools, _amount, 1, -1, 0



[t], isPool, token, -1, -1, 0, XXX



[t], _getFunds, hlc_5, 1, -1, 0



[t], _getFunds, hlc_6, 1, -1, 0



[t], _getFunds, hlc_7, 1, -1, 0



[*] Router run
Checking... constructor
[x] No Binary
Checking... init
[o] Marked
Checking... setParams
[x] No Binary
Checking... setAnchorParams
[x] No Binary
Checking... addLiquidity
[x] No Binary
Checking... removeLiquidity
[x] No Binary
Checking... swap
[x] No Binary
Checking... swapWithLimit
[x] No Binary
Checking... swapWithSynths
[x] No Binary
Checking... swapWithSynthsWithLimit
[o] Marked
Checking... _handlePoolReward
[x] No Binary
Checking... addDepositData
[o] Marked
Checking... removeDepositData
[o] Marked
Checking... getILProtection
[o] Marked
Checking... curatePool
[o] Marked
Checking... replacePool
[o] Marked
Checking... listAnchor
[o] Marked
Checking... replaceAnchor
[o] Marked
Checking... updateAnchorPrice
[o] Marked
Checking... _handleAnchorPriceUpdate
[x] No Binary
Checking... getAnchorPrice
[o] Marked
Checking... getVADERAmount
[o] Marked
Checking... getUSDVAmount
[o] Marked
Checking... borrow
[x] No Binary
Checking... borrowForMember
[o] Marked
Checking... repay
[x] No Binary
Checking... repayForMember
[o] Marked
Checking... payInterest
[o] Marked
Checking... checkLiquidate
[x] No Binary
Checking... _handleTransferIn
[o] Marked
Checking... _handleTransferOut
[o] Marked
Checking... _getFunds
[o] Marked
Checking... _sendFunds
[x] No Binary
Checking... _addDebtToMember
[o] Marked
Checking... _removeDebtFromMember
[o] Marked
Checking... _removeCollateral
[o] Marked
Checking... isBase
[o] Marked
Checking... reserveVADER
[x] No Binary
Checking... reserveUSDV
[x] No Binary
Checking... moveTokenToPools
[o] Marked
Checking... UTILS
[x] No Binary
Checking... DAO
[x] No Binary
Checking... emitting
[x] No Binary
Checking... isCurated
[x] No Binary
Checking... isPool
[o] Marked
Checking... getMemberBaseDeposit
[x] No Binary
Checking... getMemberTokenDeposit
[x] No Binary
Checking... getMemberLastDeposit
[x] No Binary
Checking... getMemberCollateral
[x] No Binary
Checking... getMemberDebt
[x] No Binary
Checking... getSystemCollateral
[x] No Binary
Checking... getSystemDebt
[x] No Binary
Checking... getSystemInterestPaid
[x] No Binary
Checking... getNextEraTime
[x] No Binary
Checking... slitherConstructorVariables
[x] No Binary
State_var: mapMember_Collateral
Finding type for mapMember_Collateral...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
Finding type for POOLS...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
State_var: anchorLimit
Finding type for anchorLimit...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: arrayAnchors
Finding type for arrayAnchors...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: arrayPrices
Finding type for arrayPrices...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: one
Finding type for one...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: USDV
Finding type for USDV...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
State_var: mapCollateralAsset_NextEra
Finding type for mapCollateralAsset_NextEra...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: POOLS
State_var: one
State_var: mapCollateralDebt_Collateral
Finding type for mapCollateralDebt_Collateral...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: mapMemberToken_depositBase
Finding type for mapMemberToken_depositBase...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: mapMemberToken_depositToken
Finding type for mapMemberToken_depositToken...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: USDV
State_var: VADER
State_var: mapCollateralDebt_Collateral
State_var: mapCollateralDebt_Debt
Finding type for mapCollateralDebt_Debt...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: mapCollateralDebt_interestPaid
Finding type for mapCollateralDebt_interestPaid...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: mapMember_Collateral
State_var: POOLS
State_var: arrayAnchors
State_var: insidePriceLimit
Finding type for insidePriceLimit...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: outsidePriceLimit
Finding type for outsidePriceLimit...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: VADER
State_var: one
State_var: USDV
State_var: VADER
State_var: mapMemberToken_depositBase
State_var: VADER
State_var: timeForFullProtection
Finding type for timeForFullProtection...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: VADER
State_var: mapCollateralAsset_NextEra
State_var: mapCollateralDebt_interestPaid
State_var: POOLS
State_var: mapCollateralDebt_Collateral
State_var: arrayAnchors
State_var: one
State_var: VADER
State_var: POOLS
State_var: USDV
State_var: VADER
State_var: mapMemberToken_depositToken
State_var: VADER
State_var: POOLS
State_var: curatedPoolCount
Finding type for curatedPoolCount...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: curatedPoolLimit
Finding type for curatedPoolLimit...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: mapCollateralDebt_Debt
State_var: POOLS
State_var: VADER
State_var: inited
Finding type for inited...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: POOLS
State_var: rewardReductionFactor
Finding type for rewardReductionFactor...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: mapMember_Collateral
State_var: arrayPrices
State_var: one
State_var: POOLS
State_var: USDV
State_var: VADER
State_var: mapCollateralDebt_Collateral
State_var: mapCollateralDebt_Debt
State_var: mapMemberToken_lastDeposited
Finding type for mapMemberToken_lastDeposited...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: USDV
State_var: POOLS
State_var: POOLS
State_var: mapCollateralDebt_interestPaid
State_var: _isCurated
Finding type for _isCurated...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: mapMemberToken_depositBase
State_var: mapMemberToken_depositToken
State_var: mapMember_Collateral
lolcheck?
Reading Function: constructor
Function constructor not marked
Reading Function: init
Function name: init
Function Visibility: public
_vader
Finding type for _vader...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_usdv
Finding type for _usdv...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
_pool
Finding type for _pool...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
inited_1(bool) := ϕ(['inited_2', 'inited_0'])
typecheckig node...
inited_1(bool) := ϕ(['inited_2', 'inited_0'])
checking inited
State IR  variable: inited
State variable: inited
Function name: init
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for inited
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_0(bool) = inited_1 == False
has variable
[i] TMP_0 cleared
clearing ir...?
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,inited)
typecheckig node...
TMP_0(bool) = inited_1 == False
checking tmp_0
Temp variable: tmp_0
Function name: init
[i]Type for TMP_0
Num:
Den:
Norm:
-100
done.
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,inited)
checking tmp_1
Temp variable: tmp_1
Function name: init
checking tmp_1
[i]Type for TMP_1
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
inited_2(bool) := True(bool)
has variable
typecheckig node...
inited_2(bool) := True(bool)
checking inited
State IR  variable: inited
State variable: inited
Function name: init
asgn
Constatn varible: true
Num:
Den:
Norm:
-100
Constatn varible: true
val: True
0
Constatn varible: true
val: True
[i]Type for inited
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
VADER_1(address) := _vader_1(address)
has variable
typecheckig node...
VADER_1(address) := _vader_1(address)
checking vader
State IR  variable: vader
State variable: vader
Function name: init
asgn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
clearning node...
clearing ir...?
USDV_1(address) := _usdv_1(address)
has variable
typecheckig node...
USDV_1(address) := _usdv_1(address)
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: init
asgn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
[i]Type for USDV
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
clearning node...
clearing ir...?
POOLS_1(address) := _pool_1(address)
has variable
typecheckig node...
POOLS_1(address) := _pool_1(address)
checking pools
State IR  variable: pools
State variable: pools
Function name: init
asgn
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
clearning node...
clearing ir...?
rewardReductionFactor_1(uint256) := 1(uint256)
has variable
typecheckig node...
rewardReductionFactor_1(uint256) := 1(uint256)
checking rewardreductionfactor
State IR  variable: rewardreductionfactor
State variable: rewardreductionfactor
Function name: init
asgn
Constatn varible: 1
Num:
Den:
Norm:
-100
Constatn varible: 1
val: 1
0
Constatn varible: 1
val: 1
[i]Type for rewardReductionFactor
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
timeForFullProtection_1(uint256) := 1(uint256)
has variable
typecheckig node...
timeForFullProtection_1(uint256) := 1(uint256)
checking timeforfullprotection
State IR  variable: timeforfullprotection
State variable: timeforfullprotection
Function name: init
asgn
Constatn varible: 1
Num:
Den:
Norm:
-100
Constatn varible: 1
val: 1
0
Constatn varible: 1
val: 1
[i]Type for timeForFullProtection
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
curatedPoolLimit_1(uint256) := 1(uint256)
has variable
typecheckig node...
curatedPoolLimit_1(uint256) := 1(uint256)
checking curatedpoollimit
State IR  variable: curatedpoollimit
State variable: curatedpoollimit
Function name: init
asgn
Constatn varible: 1
Num:
Den:
Norm:
-100
Constatn varible: 1
val: 1
0
Constatn varible: 1
val: 1
[i]Type for curatedPoolLimit
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
anchorLimit_1(uint256) := 5(uint256)
has variable
typecheckig node...
anchorLimit_1(uint256) := 5(uint256)
checking anchorlimit
State IR  variable: anchorlimit
State variable: anchorlimit
Function name: init
asgn
Constatn varible: 5
Num:
Den:
Norm:
-100
Constatn varible: 5
val: 5
0
Constatn varible: 5
val: 5
[i]Type for anchorLimit
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
insidePriceLimit_1(uint256) := 200(uint256)
has variable
typecheckig node...
insidePriceLimit_1(uint256) := 200(uint256)
checking insidepricelimit
State IR  variable: insidepricelimit
State variable: insidepricelimit
Function name: init
asgn
Constatn varible: 200
Num:
Den:
Norm:
-100
Constatn varible: 200
val: 200
0
Constatn varible: 200
val: 200
[i]Type for insidePriceLimit
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
outsidePriceLimit_1(uint256) := 500(uint256)
has variable
typecheckig node...
outsidePriceLimit_1(uint256) := 500(uint256)
checking outsidepricelimit
State IR  variable: outsidepricelimit
State variable: outsidepricelimit
Function name: init
asgn
Constatn varible: 500
Num:
Den:
Norm:
-100
Constatn varible: 500
val: 500
0
Constatn varible: 500
val: 500
[i]Type for outsidePriceLimit
Num:
-1
Den:
-1
Norm:
0
done.
Reading Function: setParams
Function setParams not marked
Reading Function: setAnchorParams
Function setAnchorParams not marked
Reading Function: addLiquidity
Function addLiquidity not marked
Reading Function: removeLiquidity
Function removeLiquidity not marked
Reading Function: swap
Function swap not marked
Reading Function: swapWithLimit
Function swapWithLimit not marked
Reading Function: swapWithSynths
Function swapWithSynths not marked
Reading Function: swapWithSynthsWithLimit
Function name: swapWithSynthsWithLimit
Function Visibility: public
inputAmount
Finding type for inputAmount...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
inputToken
Finding type for inputToken...
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
inSynth
Finding type for inSynth...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
outputToken
Finding type for outputToken...
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
outSynth
Finding type for outSynth...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
slipLimit
Finding type for slipLimit...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [-2]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
Param: 3
    num: [-2]
    den: [-1]
Param: 4
    num: [-1]
    den: [-1]
Param: 5
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
inputAmount_1(uint256) := ϕ(['inputAmount_1', 'inputAmount_1', 'inputAmount_1'])
clearing ir...?
inputToken_1(address) := ϕ(['inputToken_1', 'inputToken_1', 'inputToken_1'])
clearing ir...?
inSynth_1(bool) := ϕ(['inSynth_1'])
clearing ir...?
outputToken_1(address) := ϕ(['outputToken_1', 'outputToken_1', 'outputToken_1'])
clearing ir...?
outSynth_1(bool) := ϕ(['outSynth_1'])
clearing ir...?
slipLimit_1(uint256) := ϕ(['slipLimit_1'])
clearing ir...?
VADER_2(address) := ϕ(['VADER_0', 'VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
clearing ir...?
USDV_2(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_0', 'USDV_18', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
clearing ir...?
POOLS_9(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
typecheckig node...
inputAmount_1(uint256) := ϕ(['inputAmount_1', 'inputAmount_1', 'inputAmount_1'])
checking inputamount
Local variable: inputamount
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for inputAmount
Num:
1
Den:
-1
Norm:
-100
done.
inputToken_1(address) := ϕ(['inputToken_1', 'inputToken_1', 'inputToken_1'])
checking inputtoken
Local variable: inputtoken
Function name: swapWithSynthsWithLimit
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for inputToken
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
inSynth_1(bool) := ϕ(['inSynth_1'])
checking insynth
Local variable: insynth
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for inSynth
Num:
-1
Den:
-1
Norm:
-100
done.
outputToken_1(address) := ϕ(['outputToken_1', 'outputToken_1', 'outputToken_1'])
checking outputtoken
Local variable: outputtoken
Function name: swapWithSynthsWithLimit
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for outputToken
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
outSynth_1(bool) := ϕ(['outSynth_1'])
checking outsynth
Local variable: outsynth
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for outSynth
Num:
-1
Den:
-1
Norm:
-100
done.
slipLimit_1(uint256) := ϕ(['slipLimit_1'])
checking sliplimit
Local variable: sliplimit
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for slipLimit
Num:
-1
Den:
-1
Norm:
-100
done.
VADER_2(address) := ϕ(['VADER_0', 'VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
checking vader
State IR  variable: vader
State variable: vader
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_2(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_0', 'USDV_18', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_9(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
_member_1(address) := msg.sender(address)
has variable
[i] _member cleared
typecheckig node...
_member_1(address) := msg.sender(address)
checking _member
Local variable: _member
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
not variable
0
[i]Type for _member
Num:
Den:
Norm:
0
done.
[x]node added back
clearning node...
clearing ir...?
TMP_17 = ! inSynth_1 
clearing ir...?
CONDITION TMP_17
typecheckig node...
TMP_17 = ! inSynth_1 
checking tmp_17
Temp variable: tmp_17
Function name: swapWithSynthsWithLimit
checking tmp_17
[i]Type for TMP_17
Num:
Den:
Norm:
-100
done.
CONDITION TMP_17
Condition...
Conidtion: 
TMP_17
TMP_17
clearning node...
clearing ir...?
TMP_18(uint256) = INTERNAL_CALL, Router.moveTokenToPools(address,uint256)(inputToken_1,inputAmount_1)
clearing ir...?
VADER_5(address) := ϕ(['VADER_36'])
clearing ir...?
USDV_5(address) := ϕ(['USDV_31'])
clearing ir...?
POOLS_12(address) := ϕ(['POOLS_109', 'POOLS_108', 'POOLS_112'])
typecheckig node...
TMP_18(uint256) = INTERNAL_CALL, Router.moveTokenToPools(address,uint256)(inputToken_1,inputAmount_1)
Internal call...
moveTokenToPools
inputToken
inputAmount
Function: moveTokenToPools
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
added
xyz
Function name: moveTokenToPools
Function Visibility: internal
clearning node...
clearing ir...?
_token_1(address) := ϕ(['debtAsset_1', 'token_1', 'TMP_20', 'inputToken_1', 'base_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['inputToken_1', 'inputBase_1', '_amount_1', 'inputAmount_1'])
clearing ir...?
VADER_35(address) := ϕ(['VADER_0', 'VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
clearing ir...?
USDV_30(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_0', 'USDV_18', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
clearing ir...?
POOLS_106(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
typecheckig node...
_token_1(address) := ϕ(['debtAsset_1', 'token_1', 'TMP_20', 'inputToken_1', 'base_1'])
checking _token
Local variable: _token
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
_amount_1(uint256) := ϕ(['inputToken_1', 'inputBase_1', '_amount_1', 'inputAmount_1'])
checking _amount
Local variable: _amount
Function name: moveTokenToPools
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for _amount
Num:
1
Den:
-1
Norm:
-100
done.
VADER_35(address) := ϕ(['VADER_0', 'VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
checking vader
State IR  variable: vader
State variable: vader
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_30(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_0', 'USDV_18', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: moveTokenToPools
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_106(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_307(bool) = _token_1 == VADER_35
has variable
[i] TMP_307 cleared
clearing ir...?
TMP_308(bool) = _token_1 == USDV_30
has variable
[i] TMP_308 cleared
clearing ir...?
TMP_309(bool) = TMP_307 || TMP_308
has variable
[i] TMP_309 cleared
clearing ir...?
TMP_310 = CONVERT POOLS_106 to iPOOLS
clearing ir...?
TMP_311(bool) = HIGH_LEVEL_CALL, dest:TMP_310(iPOOLS), function:isSynth, arguments:['_token_1']  
has variable
[i] TMP_311 cleared
clearing ir...?
VADER_36(address) := ϕ(['VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_35'])
clearing ir...?
USDV_31(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_30', 'USDV_18', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
clearing ir...?
POOLS_107(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_106', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
TMP_312(bool) = TMP_309 || TMP_311
has variable
[i] TMP_312 cleared
clearing ir...?
CONDITION TMP_312
typecheckig node...
TMP_307(bool) = _token_1 == VADER_35
checking tmp_307
Temp variable: tmp_307
Function name: moveTokenToPools
[i]Type for TMP_307
Num:
Den:
Norm:
-100
done.
TMP_308(bool) = _token_1 == USDV_30
checking tmp_308
Temp variable: tmp_308
Function name: moveTokenToPools
[i]Type for TMP_308
Num:
Den:
Norm:
-100
done.
TMP_309(bool) = TMP_307 || TMP_308
checking tmp_309
Temp variable: tmp_309
Function name: moveTokenToPools
[i]Type for TMP_309
Num:
Den:
Norm:
-100
done.
TMP_310 = CONVERT POOLS_106 to iPOOLS
checking tmp_310
Temp variable: tmp_310
Function name: moveTokenToPools
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_310
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_311(bool) = HIGH_LEVEL_CALL, dest:TMP_310(iPOOLS), function:isSynth, arguments:['_token_1']  
High Level Call: issynth
checking tmp_311
Temp variable: tmp_311
Function name: moveTokenToPools
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_311
WIP
TMP_311
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_311
Num:
-1
Den:
-1
Norm:
0
done.
VADER_36(address) := ϕ(['VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_35'])
checking vader
State IR  variable: vader
State variable: vader
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_31(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_30', 'USDV_18', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: moveTokenToPools
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_107(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_106', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_312(bool) = TMP_309 || TMP_311
checking tmp_312
Temp variable: tmp_312
Function name: moveTokenToPools
[i]Type for TMP_312
Num:
Den:
Norm:
-100
done.
CONDITION TMP_312
Condition...
Conidtion: 
TMP_312
TMP_312
clearning node...
clearing ir...?
safeAmount_1(uint256) := _amount_1(uint256)
has variable
[i] safeAmount cleared
typecheckig node...
safeAmount_1(uint256) := _amount_1(uint256)
checking safeamount
Local variable: safeamount
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
-100
0
[i]Type for safeAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_318 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:TMP_318(iERC20), function:balanceOf, arguments:['POOLS_107']  
has variable
[i] TMP_319 cleared
clearing ir...?
POOLS_110(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
_startBal_1(uint256) := TMP_319(uint256)
has variable
[i] _startBal cleared
typecheckig node...
TMP_318 = CONVERT _token_1 to iERC20
checking tmp_318
Temp variable: tmp_318
Function name: moveTokenToPools
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_318
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:TMP_318(iERC20), function:balanceOf, arguments:['POOLS_107']  
High Level Call: balanceof
checking tmp_319
Temp variable: tmp_319
Function name: moveTokenToPools
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_319
WIP
TMP_319
Finding type for hlc_1...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_319
Num:
1
Den:
-1
Norm:
0
done.
POOLS_110(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_startBal_1(uint256) := TMP_319(uint256)
checking _startbal
Local variable: _startbal
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _startBal
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_313(bool) = tx.origin == msg.sender
has variable
[i] TMP_313 cleared
clearing ir...?
CONDITION TMP_313
typecheckig node...
TMP_313(bool) = tx.origin == msg.sender
checking tmp_313
Temp variable: tmp_313
Function name: moveTokenToPools
[i]Type for TMP_313
Num:
Den:
Norm:
-100
done.
CONDITION TMP_313
Condition...
Conidtion: 
TMP_313
TMP_313
clearning node...
clearing ir...?
TMP_316 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_317(bool) = HIGH_LEVEL_CALL, dest:TMP_316(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_107', '_amount_1']  
has variable
[i] TMP_317 cleared
clearing ir...?
POOLS_109(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
typecheckig node...
TMP_316 = CONVERT _token_1 to iERC20
checking tmp_316
Temp variable: tmp_316
Function name: moveTokenToPools
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_316
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_317(bool) = HIGH_LEVEL_CALL, dest:TMP_316(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_107', '_amount_1']  
High Level Call: transferfrom
checking tmp_317
Temp variable: tmp_317
Function name: moveTokenToPools
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_317
WIP
TMP_317
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_317
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_109(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_314 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_315(bool) = HIGH_LEVEL_CALL, dest:TMP_314(iERC20), function:transferTo, arguments:['POOLS_107', '_amount_1']  
has variable
[i] TMP_315 cleared
clearing ir...?
POOLS_108(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_107', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
typecheckig node...
TMP_314 = CONVERT _token_1 to iERC20
checking tmp_314
Temp variable: tmp_314
Function name: moveTokenToPools
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_314
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_315(bool) = HIGH_LEVEL_CALL, dest:TMP_314(iERC20), function:transferTo, arguments:['POOLS_107', '_amount_1']  
High Level Call: transferto
checking tmp_315
Temp variable: tmp_315
Function name: moveTokenToPools
High Call: transferTo
func name:transferTo
other func name:transferTo
TMP_315
WIP
TMP_315
Finding type for hlc_3...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_315
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_108(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_107', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_320 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_321(bool) = HIGH_LEVEL_CALL, dest:TMP_320(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_110', '_amount_1']  
has variable
[i] TMP_321 cleared
clearing ir...?
POOLS_111(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_110', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
typecheckig node...
TMP_320 = CONVERT _token_1 to iERC20
checking tmp_320
Temp variable: tmp_320
Function name: moveTokenToPools
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_320
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_321(bool) = HIGH_LEVEL_CALL, dest:TMP_320(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_110', '_amount_1']  
High Level Call: transferfrom
checking tmp_321
Temp variable: tmp_321
Function name: moveTokenToPools
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_321
WIP
TMP_321
Finding type for hlc_4...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_321
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_111(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_110', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_322 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_323(uint256) = HIGH_LEVEL_CALL, dest:TMP_322(iERC20), function:balanceOf, arguments:['POOLS_111']  
has variable
[i] TMP_323 cleared
clearing ir...?
POOLS_112(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_111', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
TMP_324(uint256) = TMP_323 (c)- _startBal_1
has variable
[i] TMP_324 cleared
clearing ir...?
safeAmount_2(uint256) := TMP_324(uint256)
has variable
[i] safeAmount cleared
typecheckig node...
TMP_322 = CONVERT _token_1 to iERC20
checking tmp_322
Temp variable: tmp_322
Function name: moveTokenToPools
Num:
Den:
Norm:
-100
0
_token
[i]Type for TMP_322
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_323(uint256) = HIGH_LEVEL_CALL, dest:TMP_322(iERC20), function:balanceOf, arguments:['POOLS_111']  
High Level Call: balanceof
checking tmp_323
Temp variable: tmp_323
Function name: moveTokenToPools
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_323
WIP
TMP_323
Finding type for hlc_5...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_323
Num:
1
Den:
-1
Norm:
0
done.
POOLS_112(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_111', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_324(uint256) = TMP_323 (c)- _startBal_1
checking tmp_324
Temp variable: tmp_324
Function name: moveTokenToPools
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
[i]Type for TMP_324
Num:
1
Den:
-1
Norm:
0
done.
safeAmount_2(uint256) := TMP_324(uint256)
checking safeamount
Local variable: safeamount
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
-100
0
[i]Type for safeAmount
Num:
1
Den:
-1
Norm:
0
done.
Checking return valuemoveTokenToPools
safeAmount
&&
safeAmount
Num:
Den:
Norm:
-100
[i]Type for TMP_18
Num:
Den:
Norm:
-100
done.
VADER_5(address) := ϕ(['VADER_36'])
checking vader
State IR  variable: vader
State variable: vader
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_5(address) := ϕ(['USDV_31'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_12(address) := ϕ(['POOLS_109', 'POOLS_108', 'POOLS_112'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_19 = CONVERT POOLS_9 to iPOOLS
clearing ir...?
TMP_20(address) = HIGH_LEVEL_CALL, dest:TMP_19(iPOOLS), function:getSynth, arguments:['inputToken_1']  
has variable
[i] TMP_20 cleared
clearing ir...?
VADER_3(address) := ϕ(['VADER_40', 'VADER_36', 'VADER_31', 'VADER_2', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
clearing ir...?
USDV_3(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_18', 'USDV_2', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
clearing ir...?
POOLS_10(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_9', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
TMP_21(uint256) = INTERNAL_CALL, Router.moveTokenToPools(address,uint256)(TMP_20,inputAmount_1)
clearing ir...?
VADER_4(address) := ϕ(['VADER_36'])
clearing ir...?
USDV_4(address) := ϕ(['USDV_31'])
clearing ir...?
POOLS_11(address) := ϕ(['POOLS_109', 'POOLS_108', 'POOLS_112'])
typecheckig node...
TMP_19 = CONVERT POOLS_9 to iPOOLS
checking tmp_19
Temp variable: tmp_19
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_19
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_20(address) = HIGH_LEVEL_CALL, dest:TMP_19(iPOOLS), function:getSynth, arguments:['inputToken_1']  
High Level Call: getsynth
checking tmp_20
Temp variable: tmp_20
Function name: swapWithSynthsWithLimit
High Call: getSynth
func name:getSynth
other func name:getSynth
TMP_20
WIP
TMP_20
Finding type for hlc_6...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
[i]Type for TMP_20
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
VADER_3(address) := ϕ(['VADER_40', 'VADER_36', 'VADER_31', 'VADER_2', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
checking vader
State IR  variable: vader
State variable: vader
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_3(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_18', 'USDV_2', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_10(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_9', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_21(uint256) = INTERNAL_CALL, Router.moveTokenToPools(address,uint256)(TMP_20,inputAmount_1)
Internal call...
moveTokenToPools
TMP_20
inputAmount
Function: moveTokenToPools
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
added
xyz
Function name: moveTokenToPools
Function Visibility: internal
clearning node...
clearing ir...?
_token_1(address) := ϕ(['debtAsset_1', 'token_1', 'TMP_20', 'inputToken_1', 'base_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['inputToken_1', 'inputBase_1', '_amount_1', 'inputAmount_1'])
clearing ir...?
VADER_35(address) := ϕ(['VADER_0', 'VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
clearing ir...?
USDV_30(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_0', 'USDV_18', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
clearing ir...?
POOLS_106(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
typecheckig node...
_token_1(address) := ϕ(['debtAsset_1', 'token_1', 'TMP_20', 'inputToken_1', 'base_1'])
checking _token
Local variable: _token
Function name: moveTokenToPools
Phi
[i]Type for _token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
_amount_1(uint256) := ϕ(['inputToken_1', 'inputBase_1', '_amount_1', 'inputAmount_1'])
checking _amount
Local variable: _amount
Function name: moveTokenToPools
Phi
[i]Type for _amount
Num:
1
Den:
-1
Norm:
-100
done.
VADER_35(address) := ϕ(['VADER_0', 'VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
checking vader
State IR  variable: vader
State variable: vader
Function name: moveTokenToPools
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_30(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_0', 'USDV_18', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: moveTokenToPools
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_106(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_307(bool) = _token_1 == VADER_35
has variable
[i] TMP_307 cleared
clearing ir...?
TMP_308(bool) = _token_1 == USDV_30
has variable
[i] TMP_308 cleared
clearing ir...?
TMP_309(bool) = TMP_307 || TMP_308
has variable
[i] TMP_309 cleared
clearing ir...?
TMP_310 = CONVERT POOLS_106 to iPOOLS
clearing ir...?
TMP_311(bool) = HIGH_LEVEL_CALL, dest:TMP_310(iPOOLS), function:isSynth, arguments:['_token_1']  
has variable
[i] TMP_311 cleared
clearing ir...?
VADER_36(address) := ϕ(['VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_35'])
clearing ir...?
USDV_31(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_30', 'USDV_18', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
clearing ir...?
POOLS_107(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_106', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
TMP_312(bool) = TMP_309 || TMP_311
has variable
[i] TMP_312 cleared
clearing ir...?
CONDITION TMP_312
typecheckig node...
TMP_307(bool) = _token_1 == VADER_35
checking tmp_307
Temp variable: tmp_307
Function name: moveTokenToPools
[i]Type for TMP_307
Num:
Den:
Norm:
-100
done.
TMP_308(bool) = _token_1 == USDV_30
checking tmp_308
Temp variable: tmp_308
Function name: moveTokenToPools
[i]Type for TMP_308
Num:
Den:
Norm:
-100
done.
TMP_309(bool) = TMP_307 || TMP_308
checking tmp_309
Temp variable: tmp_309
Function name: moveTokenToPools
[i]Type for TMP_309
Num:
Den:
Norm:
-100
done.
TMP_310 = CONVERT POOLS_106 to iPOOLS
checking tmp_310
Temp variable: tmp_310
Function name: moveTokenToPools
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
0
POOLS
[i]Type for TMP_310
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_311(bool) = HIGH_LEVEL_CALL, dest:TMP_310(iPOOLS), function:isSynth, arguments:['_token_1']  
High Level Call: issynth
checking tmp_311
Temp variable: tmp_311
Function name: moveTokenToPools
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_311
WIP
TMP_311
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_311
Num:
-1
Den:
-1
Norm:
0
done.
VADER_36(address) := ϕ(['VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_35'])
checking vader
State IR  variable: vader
State variable: vader
Function name: moveTokenToPools
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_31(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_30', 'USDV_18', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: moveTokenToPools
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_107(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_106', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_312(bool) = TMP_309 || TMP_311
checking tmp_312
Temp variable: tmp_312
Function name: moveTokenToPools
[i]Type for TMP_312
Num:
Den:
Norm:
-100
done.
CONDITION TMP_312
Condition...
Conidtion: 
TMP_312
TMP_312
clearning node...
clearing ir...?
safeAmount_1(uint256) := _amount_1(uint256)
has variable
[i] safeAmount cleared
typecheckig node...
safeAmount_1(uint256) := _amount_1(uint256)
checking safeamount
Local variable: safeamount
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
0
0
[i]Type for safeAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_318 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:TMP_318(iERC20), function:balanceOf, arguments:['POOLS_107']  
has variable
[i] TMP_319 cleared
clearing ir...?
POOLS_110(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
_startBal_1(uint256) := TMP_319(uint256)
has variable
[i] _startBal cleared
typecheckig node...
TMP_318 = CONVERT _token_1 to iERC20
checking tmp_318
Temp variable: tmp_318
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_318
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_319(uint256) = HIGH_LEVEL_CALL, dest:TMP_318(iERC20), function:balanceOf, arguments:['POOLS_107']  
High Level Call: balanceof
checking tmp_319
Temp variable: tmp_319
Function name: moveTokenToPools
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_319
WIP
TMP_319
Finding type for hlc_1...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_319
Num:
1
Den:
-1
Norm:
0
done.
POOLS_110(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
_startBal_1(uint256) := TMP_319(uint256)
checking _startbal
Local variable: _startbal
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
0
0
[i]Type for _startBal
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_313(bool) = tx.origin == msg.sender
has variable
[i] TMP_313 cleared
clearing ir...?
CONDITION TMP_313
typecheckig node...
TMP_313(bool) = tx.origin == msg.sender
checking tmp_313
Temp variable: tmp_313
Function name: moveTokenToPools
[i]Type for TMP_313
Num:
Den:
Norm:
-100
done.
CONDITION TMP_313
Condition...
Conidtion: 
TMP_313
TMP_313
clearning node...
clearing ir...?
TMP_316 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_317(bool) = HIGH_LEVEL_CALL, dest:TMP_316(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_107', '_amount_1']  
has variable
[i] TMP_317 cleared
clearing ir...?
POOLS_109(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
typecheckig node...
TMP_316 = CONVERT _token_1 to iERC20
checking tmp_316
Temp variable: tmp_316
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_316
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_317(bool) = HIGH_LEVEL_CALL, dest:TMP_316(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_107', '_amount_1']  
High Level Call: transferfrom
checking tmp_317
Temp variable: tmp_317
Function name: moveTokenToPools
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_317
WIP
TMP_317
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_317
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_109(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_314 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_315(bool) = HIGH_LEVEL_CALL, dest:TMP_314(iERC20), function:transferTo, arguments:['POOLS_107', '_amount_1']  
has variable
[i] TMP_315 cleared
clearing ir...?
POOLS_108(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_107', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
typecheckig node...
TMP_314 = CONVERT _token_1 to iERC20
checking tmp_314
Temp variable: tmp_314
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_314
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_315(bool) = HIGH_LEVEL_CALL, dest:TMP_314(iERC20), function:transferTo, arguments:['POOLS_107', '_amount_1']  
High Level Call: transferto
checking tmp_315
Temp variable: tmp_315
Function name: moveTokenToPools
High Call: transferTo
func name:transferTo
other func name:transferTo
TMP_315
WIP
TMP_315
Finding type for hlc_3...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_315
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_108(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_107', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_320 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_321(bool) = HIGH_LEVEL_CALL, dest:TMP_320(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_110', '_amount_1']  
has variable
[i] TMP_321 cleared
clearing ir...?
POOLS_111(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_110', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
typecheckig node...
TMP_320 = CONVERT _token_1 to iERC20
checking tmp_320
Temp variable: tmp_320
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_320
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_321(bool) = HIGH_LEVEL_CALL, dest:TMP_320(iERC20), function:transferFrom, arguments:['msg.sender', 'POOLS_110', '_amount_1']  
High Level Call: transferfrom
checking tmp_321
Temp variable: tmp_321
Function name: moveTokenToPools
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
TMP_321
WIP
TMP_321
Finding type for hlc_4...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_321
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_111(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_110', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_322 = CONVERT _token_1 to iERC20
clearing ir...?
TMP_323(uint256) = HIGH_LEVEL_CALL, dest:TMP_322(iERC20), function:balanceOf, arguments:['POOLS_111']  
has variable
[i] TMP_323 cleared
clearing ir...?
POOLS_112(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_111', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
TMP_324(uint256) = TMP_323 (c)- _startBal_1
has variable
[i] TMP_324 cleared
clearing ir...?
safeAmount_2(uint256) := TMP_324(uint256)
has variable
[i] safeAmount cleared
typecheckig node...
TMP_322 = CONVERT _token_1 to iERC20
checking tmp_322
Temp variable: tmp_322
Function name: moveTokenToPools
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
0
_token
[i]Type for TMP_322
Num:
-2
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_323(uint256) = HIGH_LEVEL_CALL, dest:TMP_322(iERC20), function:balanceOf, arguments:['POOLS_111']  
High Level Call: balanceof
checking tmp_323
Temp variable: tmp_323
Function name: moveTokenToPools
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_323
WIP
TMP_323
Finding type for hlc_5...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_323
Num:
1
Den:
-1
Norm:
0
done.
POOLS_112(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_111', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: moveTokenToPools
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_324(uint256) = TMP_323 (c)- _startBal_1
checking tmp_324
Temp variable: tmp_324
Function name: moveTokenToPools
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
[i]Type for TMP_324
Num:
1
Den:
-1
Norm:
0
done.
safeAmount_2(uint256) := TMP_324(uint256)
checking safeamount
Local variable: safeamount
Function name: moveTokenToPools
asgn
Num:
Den:
Norm:
0
0
[i]Type for safeAmount
Num:
1
Den:
-1
Norm:
0
done.
Checking return valuemoveTokenToPools
safeAmount
&&
safeAmount
Num:
Den:
Norm:
-100
[i]Type for TMP_21
Num:
Den:
Norm:
-100
done.
VADER_4(address) := ϕ(['VADER_36'])
checking vader
State IR  variable: vader
State variable: vader
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_4(address) := ϕ(['USDV_31'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_11(address) := ϕ(['POOLS_109', 'POOLS_108', 'POOLS_112'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_22 = CONVERT POOLS_12 to iPOOLS
clearing ir...?
TMP_23(bool) = HIGH_LEVEL_CALL, dest:TMP_22(iPOOLS), function:isAnchor, arguments:['inputToken_1']  
has variable
[i] TMP_23 cleared
clearing ir...?
VADER_6(address) := ϕ(['VADER_40', 'VADER_36', 'VADER_31', 'VADER_5', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
clearing ir...?
USDV_6(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_18', 'USDV_31', 'USDV_5', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
clearing ir...?
POOLS_13(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_12', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
TMP_24 = CONVERT POOLS_13 to iPOOLS
clearing ir...?
TMP_25(bool) = HIGH_LEVEL_CALL, dest:TMP_24(iPOOLS), function:isAnchor, arguments:['outputToken_1']  
has variable
[i] TMP_25 cleared
clearing ir...?
VADER_7(address) := ϕ(['VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_6'])
clearing ir...?
USDV_7(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_18', 'USDV_6', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
clearing ir...?
POOLS_14(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_13', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
TMP_26(bool) = TMP_23 || TMP_25
has variable
[i] TMP_26 cleared
clearing ir...?
CONDITION TMP_26
typecheckig node...
TMP_22 = CONVERT POOLS_12 to iPOOLS
checking tmp_22
Temp variable: tmp_22
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_22
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_23(bool) = HIGH_LEVEL_CALL, dest:TMP_22(iPOOLS), function:isAnchor, arguments:['inputToken_1']  
High Level Call: isanchor
checking tmp_23
Temp variable: tmp_23
Function name: swapWithSynthsWithLimit
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_23
WIP
TMP_23
Finding type for hlc_6...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_23
Num:
-1
Den:
-1
Norm:
0
done.
VADER_6(address) := ϕ(['VADER_40', 'VADER_36', 'VADER_31', 'VADER_5', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
checking vader
State IR  variable: vader
State variable: vader
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_6(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_18', 'USDV_31', 'USDV_5', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_13(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_12', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_24 = CONVERT POOLS_13 to iPOOLS
checking tmp_24
Temp variable: tmp_24
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_24
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_25(bool) = HIGH_LEVEL_CALL, dest:TMP_24(iPOOLS), function:isAnchor, arguments:['outputToken_1']  
High Level Call: isanchor
checking tmp_25
Temp variable: tmp_25
Function name: swapWithSynthsWithLimit
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_25
WIP
TMP_25
Finding type for hlc_7...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_25
Num:
-1
Den:
-1
Norm:
0
done.
VADER_7(address) := ϕ(['VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38', 'VADER_6'])
checking vader
State IR  variable: vader
State variable: vader
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_7(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_18', 'USDV_6', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: swapWithSynthsWithLimit
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
POOLS_14(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_13', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_26(bool) = TMP_23 || TMP_25
checking tmp_26
Temp variable: tmp_26
Function name: swapWithSynthsWithLimit
[i]Type for TMP_26
Num:
Den:
Norm:
-100
done.
CONDITION TMP_26
Condition...
Conidtion: 
TMP_26
TMP_26
clearning node...
clearing ir...?
_base_1(address) := VADER_7(address)
has variable
[i] _base cleared
typecheckig node...
_base_1(address) := VADER_7(address)
checking _base
Local variable: _base
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _base
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
clearning node...
clearing ir...?
_base_2(address) := USDV_7(address)
has variable
[i] _base cleared
typecheckig node...
_base_2(address) := USDV_7(address)
checking _base
Local variable: _base
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for _base
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
_base_3(address) := ϕ(['_base_1', '_base_2'])
typecheckig node...
_base_3(address) := ϕ(['_base_1', '_base_2'])
checking _base
Local variable: _base
Function name: swapWithSynthsWithLimit
Phi
[i]Type for _base
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_27(bool) = INTERNAL_CALL, Router.isBase(address)(outputToken_1)
clearing ir...?
CONDITION TMP_27
typecheckig node...
TMP_27(bool) = INTERNAL_CALL, Router.isBase(address)(outputToken_1)
Internal call...
isBase
outputToken
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
added
xyz
Function name: isBase
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['_collateralAsset_1', 'collateralAsset_1', 'outputToken_1', '_token_1', 'inputToken_1', '_collateralAsset_1'])
clearing ir...?
VADER_32(address) := ϕ(['VADER_0', 'VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
clearing ir...?
USDV_27(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_0', 'USDV_18', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
typecheckig node...
token_1(address) := ϕ(['_collateralAsset_1', 'collateralAsset_1', 'outputToken_1', '_token_1', 'inputToken_1', '_collateralAsset_1'])
checking token
Local variable: token
Function name: isBase
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
VADER_32(address) := ϕ(['VADER_0', 'VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
checking vader
State IR  variable: vader
State variable: vader
Function name: isBase
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
USDV_27(address) := ϕ(['USDV_26', 'USDV_15', 'USDV_29', 'USDV_0', 'USDV_18', 'USDV_31', 'USDV_24', 'USDV_7', 'USDV_1', 'USDV_16', 'USDV_25'])
checking usdv
State IR  variable: usdv
State variable: usdv
Function name: isBase
Num:
1
Den:
-1
Norm:
-100
Phi
[i]Type for USDV
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_298(bool) = token_1 == VADER_32
has variable
[i] TMP_298 cleared
clearing ir...?
TMP_299(bool) = token_1 == USDV_27
has variable
[i] TMP_299 cleared
clearing ir...?
TMP_300(bool) = TMP_298 || TMP_299
has variable
[i] TMP_300 cleared
clearing ir...?
CONDITION TMP_300
typecheckig node...
TMP_298(bool) = token_1 == VADER_32
checking tmp_298
Temp variable: tmp_298
Function name: isBase
[i]Type for TMP_298
Num:
Den:
Norm:
-100
done.
TMP_299(bool) = token_1 == USDV_27
checking tmp_299
Temp variable: tmp_299
Function name: isBase
[i]Type for TMP_299
Num:
Den:
Norm:
-100
done.
TMP_300(bool) = TMP_298 || TMP_299
checking tmp_300
Temp variable: tmp_300
Function name: isBase
[i]Type for TMP_300
Num:
Den:
Norm:
-100
done.
CONDITION TMP_300
Condition...
Conidtion: 
TMP_300
TMP_300
clearning node...
typecheckig node...
clearning node...
clearing ir...?
RETURN True
typecheckig node...
RETURN True
Return...
isBase
base_0
True
Checking return valueisBase
True
&&
True
Constatn varible: true
Num:
Den:
Norm:
-100
[i]Type for TMP_27
Num:
-1
Den:
-1
Norm:
-100
done.
CONDITION TMP_27
Condition...
Conidtion: 
TMP_27
TMP_27
clearning node...
clearing ir...?
TMP_40(bool) = INTERNAL_CALL, Router.isBase(address)(inputToken_1)
clearing ir...?
CONDITION TMP_40
typecheckig node...
TMP_40(bool) = INTERNAL_CALL, Router.isBase(address)(inputToken_1)
Internal call...
isBase
inputToken
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
[i]Type for TMP_40
Num:
Den:
Norm:
-100
done.
CONDITION TMP_40
Condition...
Conidtion: 
TMP_40
TMP_40
clearning node...
clearing ir...?
TMP_41(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_42 = CONVERT TMP_41 to iUTILS
clearing ir...?
TMP_43 = CONVERT POOLS_34 to iPOOLS
clearing ir...?
TMP_44(uint256) = HIGH_LEVEL_CALL, dest:TMP_43(iPOOLS), function:getBaseAmount, arguments:['outputToken_1']  
has variable
[i] TMP_44 cleared
clearing ir...?
POOLS_35(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_34', 'POOLS_104'])
clearing ir...?
TMP_45(uint256) = HIGH_LEVEL_CALL, dest:TMP_42(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_44']  
has variable
[i] TMP_45 cleared
clearing ir...?
POOLS_36(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_35', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
TMP_46(bool) = TMP_45 <= slipLimit_1
has variable
[i] TMP_46 cleared
clearing ir...?
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)
typecheckig node...
TMP_41(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
added
xyz
Function name: UTILS
Function Visibility: public
clearning node...
clearing ir...?
VADER_37(address) := ϕ(['VADER_0', 'VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
typecheckig node...
VADER_37(address) := ϕ(['VADER_0', 'VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
checking vader
State IR  variable: vader
State variable: vader
Function name: UTILS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_325 = CONVERT VADER_37 to iVADER
clearing ir...?
TMP_326(address) = HIGH_LEVEL_CALL, dest:TMP_325(iVADER), function:UTILS, arguments:[]  
has variable
[i] TMP_326 cleared
clearing ir...?
VADER_38(address) := ϕ(['VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_37', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
clearing ir...?
RETURN TMP_326
typecheckig node...
TMP_325 = CONVERT VADER_37 to iVADER
checking tmp_325
Temp variable: tmp_325
Function name: UTILS
Num:
Den:
Norm:
-100
0
VADER
[i]Type for TMP_325
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_326(address) = HIGH_LEVEL_CALL, dest:TMP_325(iVADER), function:UTILS, arguments:[]  
High Level Call: utils
checking tmp_326
Temp variable: tmp_326
Function name: UTILS
High Call: UTILS
func name:UTILS
other func name:UTILS
TMP_326
WIP
TMP_326
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
[*]Type fetched successfully
[i]Type for TMP_326
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
VADER_38(address) := ϕ(['VADER_40', 'VADER_36', 'VADER_31', 'VADER_20', 'VADER_26', 'VADER_27', 'VADER_37', 'VADER_7', 'VADER_1', 'VADER_30', 'VADER_42', 'VADER_34', 'VADER_18', 'VADER_10', 'VADER_38'])
checking vader
State IR  variable: vader
State variable: vader
Function name: UTILS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for VADER
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
RETURN TMP_326
Return...
UTILS
TMP_326
Checking return valueUTILS
TMP_326
&&
TMP_326
Num:
Den:
Norm:
-100
[i]Type for TMP_41
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_42 = CONVERT TMP_41 to iUTILS
checking tmp_42
Temp variable: tmp_42
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
TMP_41
[i]Type for TMP_42
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_43 = CONVERT POOLS_34 to iPOOLS
checking tmp_43
Temp variable: tmp_43
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_43
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_44(uint256) = HIGH_LEVEL_CALL, dest:TMP_43(iPOOLS), function:getBaseAmount, arguments:['outputToken_1']  
High Level Call: getbaseamount
checking tmp_44
Temp variable: tmp_44
Function name: swapWithSynthsWithLimit
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_44
WIP
TMP_44
Finding type for hlc_1...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_44
Num:
2
Den:
-1
Norm:
0
done.
POOLS_35(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_34', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_45(uint256) = HIGH_LEVEL_CALL, dest:TMP_42(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_44']  
High Level Call: calcswapslip
checking tmp_45
Temp variable: tmp_45
Function name: swapWithSynthsWithLimit
High Call: calcSwapSlip
func name:calcSwapSlip
other func name:calcSwapSlip
TMP_45
WIP
TMP_45
Finding type for hlc_2...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_45
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_36(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_35', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_46(bool) = TMP_45 <= slipLimit_1
checking tmp_46
Temp variable: tmp_46
Function name: swapWithSynthsWithLimit
testing lt...
[i]Type for TMP_46
Num:
-1
Den:
-1
Norm:
0
done.
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)
checking tmp_47
Temp variable: tmp_47
Function name: swapWithSynthsWithLimit
checking tmp_47
[i]Type for TMP_47
Num:
Den:
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_28(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_29 = CONVERT TMP_28 to iUTILS
clearing ir...?
TMP_30 = CONVERT POOLS_16 to iPOOLS
clearing ir...?
TMP_31(uint256) = HIGH_LEVEL_CALL, dest:TMP_30(iPOOLS), function:getTokenAmount, arguments:['inputToken_1']  
has variable
[i] TMP_31 cleared
clearing ir...?
POOLS_17(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_16', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
TMP_32(uint256) = HIGH_LEVEL_CALL, dest:TMP_29(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_31']  
has variable
[i] TMP_32 cleared
clearing ir...?
POOLS_18(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_17', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
TMP_33(bool) = TMP_32 <= slipLimit_1
has variable
[i] TMP_33 cleared
clearing ir...?
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)
typecheckig node...
TMP_28(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_28
Num:
Den:
Norm:
-100
done.
TMP_29 = CONVERT TMP_28 to iUTILS
checking tmp_29
Temp variable: tmp_29
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
TMP_28
[i]Type for TMP_29
Num:
Den:
Norm:
0
done.
TMP_30 = CONVERT POOLS_16 to iPOOLS
checking tmp_30
Temp variable: tmp_30
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_30
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_31(uint256) = HIGH_LEVEL_CALL, dest:TMP_30(iPOOLS), function:getTokenAmount, arguments:['inputToken_1']  
High Level Call: gettokenamount
checking tmp_31
Temp variable: tmp_31
Function name: swapWithSynthsWithLimit
High Call: getTokenAmount
func name:getTokenAmount
other func name:getTokenAmount
TMP_31
WIP
TMP_31
Finding type for hlc_3...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_31
Num:
1
Den:
-1
Norm:
0
done.
POOLS_17(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_16', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_32(uint256) = HIGH_LEVEL_CALL, dest:TMP_29(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_31']  
High Level Call: calcswapslip
checking tmp_32
Temp variable: tmp_32
Function name: swapWithSynthsWithLimit
High Call: calcSwapSlip
func name:calcSwapSlip
other func name:calcSwapSlip
TMP_32
WIP
TMP_32
Finding type for hlc_4...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_32
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_18(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_17', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_33(bool) = TMP_32 <= slipLimit_1
checking tmp_33
Temp variable: tmp_33
Function name: swapWithSynthsWithLimit
testing lt...
[i]Type for TMP_33
Num:
-1
Den:
-1
Norm:
0
done.
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)
checking tmp_34
Temp variable: tmp_34
Function name: swapWithSynthsWithLimit
checking tmp_34
[i]Type for TMP_34
Num:
Den:
Norm:
-100
done.
[x]node added back
clearning node...
clearing ir...?
TMP_53(bool) = INTERNAL_CALL, Router.isBase(address)(inputToken_1)
clearing ir...?
TMP_54 = ! TMP_53 
clearing ir...?
TMP_55(bool) = INTERNAL_CALL, Router.isBase(address)(outputToken_1)
clearing ir...?
TMP_56 = ! TMP_55 
clearing ir...?
TMP_57(bool) = TMP_54 && TMP_56
has variable
[i] TMP_57 cleared
clearing ir...?
CONDITION TMP_57
typecheckig node...
TMP_53(bool) = INTERNAL_CALL, Router.isBase(address)(inputToken_1)
Internal call...
isBase
inputToken
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
[i]Type for TMP_53
Num:
Den:
Norm:
-100
done.
TMP_54 = ! TMP_53 
checking tmp_54
Temp variable: tmp_54
Function name: swapWithSynthsWithLimit
checking tmp_54
[i]Type for TMP_54
Num:
Den:
Norm:
-100
done.
TMP_55(bool) = INTERNAL_CALL, Router.isBase(address)(outputToken_1)
Internal call...
isBase
outputToken
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
[i]Type for TMP_55
Num:
Den:
Norm:
-100
done.
TMP_56 = ! TMP_55 
checking tmp_56
Temp variable: tmp_56
Function name: swapWithSynthsWithLimit
checking tmp_56
[i]Type for TMP_56
Num:
Den:
Norm:
-100
done.
TMP_57(bool) = TMP_54 && TMP_56
checking tmp_57
Temp variable: tmp_57
Function name: swapWithSynthsWithLimit
[i]Type for TMP_57
Num:
Den:
Norm:
-100
done.
CONDITION TMP_57
Condition...
Conidtion: 
TMP_57
TMP_57
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_58(address) = INTERNAL_CALL, Router.UTILS()()
clearing ir...?
TMP_59 = CONVERT TMP_58 to iUTILS
clearing ir...?
TMP_60 = CONVERT POOLS_24 to iPOOLS
clearing ir...?
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:TMP_60(iPOOLS), function:getTokenAmount, arguments:['inputToken_1']  
has variable
[i] TMP_61 cleared
clearing ir...?
POOLS_25(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_24', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
TMP_62(uint256) = HIGH_LEVEL_CALL, dest:TMP_59(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_61']  
has variable
[i] TMP_62 cleared
clearing ir...?
POOLS_26(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_25', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
TMP_63(bool) = TMP_62 <= slipLimit_1
has variable
[i] TMP_63 cleared
clearing ir...?
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)
typecheckig node...
TMP_58(address) = INTERNAL_CALL, Router.UTILS()()
Internal call...
UTILS
Function: UTILS
ic
Internal cal param_cache
[i]Type for TMP_58
Num:
Den:
Norm:
-100
done.
TMP_59 = CONVERT TMP_58 to iUTILS
checking tmp_59
Temp variable: tmp_59
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
TMP_58
[i]Type for TMP_59
Num:
Den:
Norm:
0
done.
TMP_60 = CONVERT POOLS_24 to iPOOLS
checking tmp_60
Temp variable: tmp_60
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_60
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:TMP_60(iPOOLS), function:getTokenAmount, arguments:['inputToken_1']  
High Level Call: gettokenamount
checking tmp_61
Temp variable: tmp_61
Function name: swapWithSynthsWithLimit
High Call: getTokenAmount
func name:getTokenAmount
other func name:getTokenAmount
TMP_61
WIP
TMP_61
Finding type for hlc_5...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_61
Num:
1
Den:
-1
Norm:
0
done.
POOLS_25(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_24', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_62(uint256) = HIGH_LEVEL_CALL, dest:TMP_59(iUTILS), function:calcSwapSlip, arguments:['inputAmount_1', 'TMP_61']  
High Level Call: calcswapslip
checking tmp_62
Temp variable: tmp_62
Function name: swapWithSynthsWithLimit
High Call: calcSwapSlip
func name:calcSwapSlip
other func name:calcSwapSlip
TMP_62
WIP
TMP_62
Finding type for hlc_6...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_62
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_26(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_25', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
TMP_63(bool) = TMP_62 <= slipLimit_1
checking tmp_63
Temp variable: tmp_63
Function name: swapWithSynthsWithLimit
testing lt...
[i]Type for TMP_63
Num:
-1
Den:
-1
Norm:
0
done.
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)
checking tmp_64
Temp variable: tmp_64
Function name: swapWithSynthsWithLimit
checking tmp_64
[i]Type for TMP_64
Num:
Den:
Norm:
-100
done.
[x]node added back
clearning node...
clearing ir...?
TMP_48 = ! outSynth_1 
clearing ir...?
CONDITION TMP_48
typecheckig node...
TMP_48 = ! outSynth_1 
checking tmp_48
Temp variable: tmp_48
Function name: swapWithSynthsWithLimit
checking tmp_48
[i]Type for TMP_48
Num:
Den:
Norm:
-100
done.
CONDITION TMP_48
Condition...
Conidtion: 
TMP_48
TMP_48
clearning node...
clearing ir...?
TMP_65 = ! inSynth_1 
clearing ir...?
CONDITION TMP_65
typecheckig node...
TMP_65 = ! inSynth_1 
checking tmp_65
Temp variable: tmp_65
Function name: swapWithSynthsWithLimit
checking tmp_65
[i]Type for TMP_65
Num:
Den:
Norm:
-100
done.
CONDITION TMP_65
Condition...
Conidtion: 
TMP_65
TMP_65
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_35 = ! inSynth_1 
clearing ir...?
CONDITION TMP_35
typecheckig node...
TMP_35 = ! inSynth_1 
checking tmp_35
Temp variable: tmp_35
Function name: swapWithSynthsWithLimit
checking tmp_35
[i]Type for TMP_35
Num:
Den:
Norm:
-100
done.
CONDITION TMP_35
Condition...
Conidtion: 
TMP_35
TMP_35
clearning node...
clearing ir...?
TMP_49 = CONVERT POOLS_36 to iPOOLS
clearing ir...?
TMP_50(uint256) = HIGH_LEVEL_CALL, dest:TMP_49(iPOOLS), function:swap, arguments:['_base_3', 'outputToken_1', '_member_1', 'False']  
has variable
[i] TMP_50 cleared
clearing ir...?
POOLS_38(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
outputAmount_6(uint256) := TMP_50(uint256)
has variable
[i] outputAmount cleared
typecheckig node...
TMP_49 = CONVERT POOLS_36 to iPOOLS
checking tmp_49
Temp variable: tmp_49
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_49
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_50(uint256) = HIGH_LEVEL_CALL, dest:TMP_49(iPOOLS), function:swap, arguments:['_base_3', 'outputToken_1', '_member_1', 'False']  
High Level Call: swap
checking tmp_50
Temp variable: tmp_50
Function name: swapWithSynthsWithLimit
High Call: swap
func name:swap
other func name:swap
TMP_50
WIP
TMP_50
Finding type for hlc_7...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_50
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_38(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
outputAmount_6(uint256) := TMP_50(uint256)
checking outputamount
Local variable: outputamount
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for outputAmount
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_68 = CONVERT POOLS_26 to iPOOLS
clearing ir...?
TMP_69(uint256) = HIGH_LEVEL_CALL, dest:TMP_68(iPOOLS), function:burnSynth, arguments:['_base_3', 'inputToken_1', 'POOLS_26']  
has variable
[i] TMP_69 cleared
clearing ir...?
POOLS_27(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_26', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
typecheckig node...
TMP_68 = CONVERT POOLS_26 to iPOOLS
checking tmp_68
Temp variable: tmp_68
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_68
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_69(uint256) = HIGH_LEVEL_CALL, dest:TMP_68(iPOOLS), function:burnSynth, arguments:['_base_3', 'inputToken_1', 'POOLS_26']  
High Level Call: burnsynth
checking tmp_69
Temp variable: tmp_69
Function name: swapWithSynthsWithLimit
High Call: burnSynth
func name:burnSynth
other func name:burnSynth
TMP_69
WIP
TMP_69
Finding type for hlc_8...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_69
Num:
1
Den:
-1
Norm:
0
done.
POOLS_27(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_26', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_51 = CONVERT POOLS_36 to iPOOLS
clearing ir...?
TMP_52(uint256) = HIGH_LEVEL_CALL, dest:TMP_51(iPOOLS), function:mintSynth, arguments:['_base_3', 'outputToken_1', '_member_1']  
has variable
[i] TMP_52 cleared
clearing ir...?
POOLS_37(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_36', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
outputAmount_5(uint256) := TMP_52(uint256)
has variable
[i] outputAmount cleared
typecheckig node...
TMP_51 = CONVERT POOLS_36 to iPOOLS
checking tmp_51
Temp variable: tmp_51
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_51
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_52(uint256) = HIGH_LEVEL_CALL, dest:TMP_51(iPOOLS), function:mintSynth, arguments:['_base_3', 'outputToken_1', '_member_1']  
High Level Call: mintsynth
checking tmp_52
Temp variable: tmp_52
Function name: swapWithSynthsWithLimit
High Call: mintSynth
func name:mintSynth
other func name:mintSynth
TMP_52
WIP
TMP_52
Finding type for hlc_9...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_52
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_37(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_36', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
outputAmount_5(uint256) := TMP_52(uint256)
checking outputamount
Local variable: outputamount
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for outputAmount
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_66 = CONVERT POOLS_26 to iPOOLS
clearing ir...?
TMP_67(uint256) = HIGH_LEVEL_CALL, dest:TMP_66(iPOOLS), function:swap, arguments:['_base_3', 'inputToken_1', 'POOLS_26', 'True']  
has variable
[i] TMP_67 cleared
clearing ir...?
POOLS_28(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_27', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
typecheckig node...
TMP_66 = CONVERT POOLS_26 to iPOOLS
checking tmp_66
Temp variable: tmp_66
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_66
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_67(uint256) = HIGH_LEVEL_CALL, dest:TMP_66(iPOOLS), function:swap, arguments:['_base_3', 'inputToken_1', 'POOLS_26', 'True']  
High Level Call: swap
checking tmp_67
Temp variable: tmp_67
Function name: swapWithSynthsWithLimit
High Call: swap
func name:swap
other func name:swap
TMP_67
WIP
TMP_67
Finding type for hlc_10...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_67
Num:
1
Den:
-1
Norm:
0
done.
POOLS_28(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_27', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
INTERNAL_CALL, Router._handlePoolReward(address,address)(_base_3,inputToken_1)
typecheckig node...
INTERNAL_CALL, Router._handlePoolReward(address,address)(_base_3,inputToken_1)
Internal call...
_handlePoolReward
_base
inputToken
Function: _handlePoolReward
ic
done.
clearning node...
clearing ir...?
INTERNAL_CALL, Router._handlePoolReward(address,address)(_base_3,outputToken_1)
typecheckig node...
INTERNAL_CALL, Router._handlePoolReward(address,address)(_base_3,outputToken_1)
Internal call...
_handlePoolReward
_base
outputToken
Function: _handlePoolReward
ic
done.
clearning node...
clearing ir...?
TMP_38 = CONVERT POOLS_18 to iPOOLS
clearing ir...?
TMP_39(uint256) = HIGH_LEVEL_CALL, dest:TMP_38(iPOOLS), function:burnSynth, arguments:['_base_3', 'inputToken_1', '_member_1']  
has variable
[i] TMP_39 cleared
clearing ir...?
POOLS_19(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_18', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
outputAmount_1(uint256) := TMP_39(uint256)
has variable
[i] outputAmount cleared
typecheckig node...
TMP_38 = CONVERT POOLS_18 to iPOOLS
checking tmp_38
Temp variable: tmp_38
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_38
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_39(uint256) = HIGH_LEVEL_CALL, dest:TMP_38(iPOOLS), function:burnSynth, arguments:['_base_3', 'inputToken_1', '_member_1']  
High Level Call: burnsynth
checking tmp_39
Temp variable: tmp_39
Function name: swapWithSynthsWithLimit
High Call: burnSynth
func name:burnSynth
other func name:burnSynth
TMP_39
WIP
TMP_39
Finding type for hlc_11...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_39
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_19(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_18', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
outputAmount_1(uint256) := TMP_39(uint256)
checking outputamount
Local variable: outputamount
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for outputAmount
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_36 = CONVERT POOLS_18 to iPOOLS
clearing ir...?
TMP_37(uint256) = HIGH_LEVEL_CALL, dest:TMP_36(iPOOLS), function:swap, arguments:['_base_3', 'inputToken_1', '_member_1', 'True']  
has variable
[i] TMP_37 cleared
clearing ir...?
POOLS_20(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
outputAmount_2(uint256) := TMP_37(uint256)
has variable
[i] outputAmount cleared
typecheckig node...
TMP_36 = CONVERT POOLS_18 to iPOOLS
checking tmp_36
Temp variable: tmp_36
Function name: swapWithSynthsWithLimit
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_36
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_37(uint256) = HIGH_LEVEL_CALL, dest:TMP_36(iPOOLS), function:swap, arguments:['_base_3', 'inputToken_1', '_member_1', 'True']  
High Level Call: swap
checking tmp_37
Temp variable: tmp_37
Function name: swapWithSynthsWithLimit
High Call: swap
func name:swap
other func name:swap
TMP_37
WIP
TMP_37
Finding type for hlc_12...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_37
Num:
1
Den:
-1
Norm:
0
done.
POOLS_20(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: swapWithSynthsWithLimit
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
outputAmount_2(uint256) := TMP_37(uint256)
checking outputamount
Local variable: outputamount
Function name: swapWithSynthsWithLimit
asgn
Num:
Den:
Norm:
-100
0
[i]Type for outputAmount
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, Router._handleAnchorPriceUpdate(address)(inputToken_1)
typecheckig node...
INTERNAL_CALL, Router._handleAnchorPriceUpdate(address)(inputToken_1)
Internal call...
_handleAnchorPriceUpdate
inputToken
Function: _handleAnchorPriceUpdate
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
added
xyz
Function name: _handleAnchorPriceUpdate
Function Visibility: internal
clearning node...
clearing ir...?
_token_1(address) := ϕ(['outputToken_1', 'inputToken_1'])
clearing ir...?
POOLS_58(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
typecheckig node...
_token_1(address) := ϕ(['outputToken_1', 'inputToken_1'])
checking _token
Local variable: _token
Function name: _handleAnchorPriceUpdate
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for _token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
POOLS_58(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_47', 'POOLS_80', 'POOLS_0', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleAnchorPriceUpdate
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
clearning node...
clearing ir...?
TMP_173 = CONVERT POOLS_58 to iPOOLS
clearing ir...?
TMP_174(bool) = HIGH_LEVEL_CALL, dest:TMP_173(iPOOLS), function:isAnchor, arguments:['_token_1']  
has variable
[i] TMP_174 cleared
clearing ir...?
POOLS_59(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_58', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
clearing ir...?
CONDITION TMP_174
typecheckig node...
TMP_173 = CONVERT POOLS_58 to iPOOLS
checking tmp_173
Temp variable: tmp_173
Function name: _handleAnchorPriceUpdate
Num:
Den:
Norm:
-100
0
POOLS
[i]Type for TMP_173
Num:
-1
Den:
-1
Norm:
0
Linked function: XXX
done.
TMP_174(bool) = HIGH_LEVEL_CALL, dest:TMP_173(iPOOLS), function:isAnchor, arguments:['_token_1']  
High Level Call: isanchor
checking tmp_174
Temp variable: tmp_174
Function name: _handleAnchorPriceUpdate
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_174
WIP
TMP_174
Finding type for hlc_0...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
[i]Type for TMP_174
Num:
-1
Den:
-1
Norm:
0
done.
POOLS_59(address) := ϕ(['POOLS_8', 'POOLS_115', 'POOLS_93', 'POOLS_98', 'POOLS_79', 'POOLS_59', 'POOLS_72', 'POOLS_109', 'POOLS_23', 'POOLS_40', 'POOLS_105', 'POOLS_6', 'POOLS_19', 'POOLS_1', 'POOLS_70', 'POOLS_44', 'POOLS_90', 'POOLS_37', 'POOLS_95', 'POOLS_81', 'POOLS_99', 'POOLS_57', 'POOLS_84', 'POOLS_20', 'POOLS_103', 'POOLS_53', 'POOLS_100', 'POOLS_38', 'POOLS_58', 'POOLS_47', 'POOLS_80', 'POOLS_112', 'POOLS_51', 'POOLS_69', 'POOLS_108', 'POOLS_104'])
checking pools
State IR  variable: pools
State variable: pools
Function name: _handleAnchorPriceUpdate
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for POOLS
Num:
-1
Den:
-1
Norm:
-100
Linked function: XXX
done.
CONDITION TMP_174
Condition...
Conidtion: 
TMP_174
TMP_174
clearning node...
clearing ir...?
INTERNAL_CALL, Router.updateAnchorPrice(address)(_token_1)
typecheckig node...
INTERNAL_CALL, Router.updateAnchorPrice(address)(_token_1)
Internal call...
updateAnchorPrice
_token
Function: updateAnchorPrice
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
added
xyz
Function name: updateAnchorPrice
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['newToken_1', '_token_1', 'token_1'])
clearing ir...?
one_5(uint256) := ϕ(['one_12', 'one_10', 'one_4', 'one_7', 'one_0'])
clearing ir...?
arrayAnchors_16(address[]) := ϕ(['arrayAnchors_16', 'arrayAnchors_4', 'arrayAnchors_14', 'arrayAnchors_0'])
typecheckig node...
token_1(address) := ϕ(['newToken_1', '_token_1', 'token_1'])
checking token
Local variable: token
Function name: updateAnchorPrice
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
Phi
[i]Type for token
Num:
-2
Den:
-1
Norm:
-100
Linked function: XXX
done.
one_5(uint256) := ϕ(['one_12', 'one_10', 'one_4', 'one_7', 'one_0'])
checking one
State IR  variable: one
State variable: one
Function name: updateAnchorPrice
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for one
Num:
-1
Den:
-1
Norm:
-100
done.
arrayAnchors_16(address[]) := ϕ(['arrayAnchors_16', 'arrayAnchors_4', 'arrayAnchors_14', 'arrayAnchors_0'])
checking arrayanchors
State IR  variable: arrayanchors
State variable: arrayanchors
Function name: updateAnchorPrice
Num:
-1
Den:
-1
Norm:
-100
Phi
[i]Type for arrayAnchors
Num:
-1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
i_1(uint256) := 0(uint256)
has variable
[i] i cleared
typecheckig node...
i_1(uint256) := 0(uint256)
checking i
Local variable: i
Function name: updateAnchorPrice
asgn
Constatn varible: 0
Num:
Den:
Norm:
-100
Constatn varible: 0
val: 0
0
Constatn varible: 0
val: 0
[i]Type for i
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
clearing ir...?
REF_72 -> LENGTH arrayAnchors_16
clearing ir...?
TMP_167(bool) = i_2 < REF_72
has variable
[i] TMP_167 cleared
clearing ir...?
CONDITION TMP_167
typecheckig node...
i_2(uint256) := ϕ(['i_3', 'i_1'])
checking i
Local variable: i
Function name: updateAnchorPrice
Phi
[i]Type for i
Num:
Den:
Norm:
-100
done.
REF_72 -> LENGTH arrayAnchors_16
checking ref_72
Refernce variable: ref_72
Function name: updateAnchorPrice
checking ref_72
Refernce variable: ref_72
Ref: REF_72
