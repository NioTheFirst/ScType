#!/usr/bin/env node
"use strict"
const fs = require('fs')

function usage() {
    console.log(`usage: ${process.argv[1]} *UUID*

Get MythX status on a previously-submitted analyses. *UUID* is the
value that was given back by the previously-submitted requiest.

Set environment MYTHX_PASSWORD and a MYTHX_ETH_ADDRESS

if you have have registered to reduce request rate-limiting.
`)
    process.exit(1)
}

/**********************************
  Minimal option processing
***********************************/

const argLen = process.argv.length
if (argLen === 3 &&
    process.argv[2].match(/^[-]{0,2}h(?:elp)?$/)) {
    usage()
}

let timeout = 20
if (argLen < 3 || !process.argv[2].match(/^[0-9a-f-]+$/)) {
    console.log("Need to pass a UUID...\n")
    usage()
}

const uuid = process.argv[2]

/**********************************
  Authentication and option setup
***********************************/

let armletOptions = {
    apiKey: process.env.MYTHX_API_KEY,
    email: process.env.MYTHX_EMAIL,
    ethAddress: process.env.MYTHX_ETH_ADDRESS,
    password: process.env.MYTHX_PASSWORD,
}

/**********************************
  Example code starts here ...
***********************************/

const armlet = require('../index') // if not installed
// const armlet = require('armlet') // if installed

const client = new armlet.Client(armletOptions)

client.getIssues(uuid)
    .then(issues => {
        const util = require('util')
        console.log(`${util.inspect(issues, {depth: null})}`)
    }).catch(err => {
        console.log(err)
    })
