#!/usr/bin/env node
"use strict"

const fs = require('fs')
// const util = require('uitl')
const armlet = require('../index')

function requireOrExit(modName) {
  try {
    return require(modName)
  } catch (err) {
    console.log(`require can not find ${modName}. Please npm install it.`)
    process.exit(1)
  }
}

function getFileContent(filepath) {
  const stats = fs.statSync(filepath);
  if (stats.isFile()) {
    return fs.readFileSync(filepath).toString();
  } else {
    throw new Error `File ${filepath} not found`;
  }
}

function findImports(pathName) {
  try {
    return { contents: getFileContent(pathName) };
  } catch (e) {
    return { error: e.message };
  }
}

// Compiles solidityFile returning JSON object.
// Taken from b-mueller's sabre.
function compileSolidity(solidityFile) {
  let solidityText
  try {
    solidityText = fs.readFileSync(solidityFile, 'utf8')
  } catch (err) {
    console.log(`Error opening input file ${err.message}`)
    process.exit(-1)
  }

  const input = {
    language: 'Solidity',
    sources: {
        inputfile: {
            content: solidityText
        }
    },
    settings: {
        outputSelection: {
            '*': {
                '*': [ '*' ]
            }
        }
    }
  };
  let solc = requireOrExit('solc')
  const compiled = JSON.parse(solc.compile(JSON.stringify(input), findImports))
  for (const mess of compiled.errors) {
  }

  let errLen = 0
  if (compiled.errors) {
    errLen = compiled.errors.length;
    for (const mess of compiled.errors) {
      console.log(`${mess.formattedMessage}`)
    }
  }

  if (!compiled.contracts) {
    process.exit(-1);
  }

  let contract = null
  let contractName
  for (contractName in compiled.contracts.inputfile) {
    contract = compiled.contracts.inputfile[contractName]
    break;
  }

  if (!contract) {
    if (errLen === 0) {
      console.log(`Didn't find a contract in ${solidityFile}`)
    }
    process.exit(15)
  }
  /* Format data for MythX API */

  const sources = {}
  sources[contractName] =  {source: solidityText}

  return {
    contractName: contractName,
    bytecode: contract.evm.bytecode.object,
    sourceMap: contract.evm.deployedBytecode.sourceMap,
    deployedBytecode: contract.evm.deployedBytecode.object,
    deployedSourceMap: contract.evm.deployedBytecode.sourceMap,
    sourceList: [
      solidityFile
    ],
    analysisMode: "quick",  // Gets overwritten in caller
    sources: sources,
  }
}

function usage() {
  const path = require('path')
  const program = path.basename(process.argv[1])
  console.log(`Usage: ${program} [options] [*path*]

Run MythX analysis on *path*; *path* should be either a solidity
source code file or be JSON data in the format data expected by the
API.

However if none is given, we use a canned example from the sample-json
directory.

Before running, set environment MYTHX_PASSWORD and
MYTHX_ETH_ADDRESS, or you will get the trial user account. The
trial user is more limited in the features it provides.

Options:
  --debug    Provide additional debug output.
  --delay    Provide a minimum delay. The default is
             45 seconds.
  --full     Perform full (in-depth) analysis. The default is
             a quick analysis.
  --timeout *s*
             Limit MythX analyses time to *s* seconds.
             The default is 300 seconds (5 minutes) for
             a quick analysis and 5 hours for a
             full analysis.
  --cache-lookup, --no-cache-lookup
             Force a new analysis even if there is a cached
             result which matches that passed data. The default
             is cached.
  --yaml     Dump result in YAML format rather than JSON.

  --help     Show this help and exit.
  --version  show armlet version and exit.

See also sabre-mythx.
`)
    process.exit(1)
}

/**********************************
 Option processing
***********************************/

const minimist = requireOrExit('minimist')
let args = minimist(process.argv.slice(2), {
  boolean: [ 'debug', 'full', 'quick', 'timeout', 'version',
             'cache-lookup', 'yaml'],
  alias: {
    h: 'help', '?': 'help',
    t: 'timeout',
    V: 'version'
    },
  default: { debug: false, delay: 45,
             timeout: 300, 'cache-lookup': true
           },
  '--': true,
  stopEarly: true, /* populate _ with first non-option */
  // unknown: function () { ... } /* invoked on unknown param */
})

// debug
// console.log(args)

if (args.help) {
    usage()
}

if (args.version) {
    const pjson = require('../package.json');
    console.log(`${pjson.name} ${pjson.version}`);
    process.exit(1)
}

for (const field of ['timeout', 'delay']) {
  if (args[field]) {
    args[field] = parseInt(args[field], 10)
  }
}


if (args.quick && args.full) {
    console.log(`give exactly one of --quick or --full`);
    process.exit(5)
}

const inputPath = args._[0] || `${__dirname}/sample-json/TokenBankChallenge.json`

/**********************************
  Authentication and option setup
***********************************/

let ethAddress = process.env.MYTHX_ETH_ADDRESS
let password =  process.env.MYTHX_PASSWORD

if (! (ethAddress && password)) {
  // Set for trial-user address and password
  ethAddress = '0x0000000000000000000000000000000000000000'
  password = 'trial'
}

let armletOptions = { ethAddress, password }

/**********************************
  Main code starts here ...
***********************************/

const client = new armlet.Client(armletOptions)

let data

if (inputPath.endsWith('.sol')) {
  data = compileSolidity(inputPath)

} else if (inputPath.endsWith('.json')) {
  data = JSON.parse(fs.readFileSync(inputPath, 'utf8'))
}

data.analysisMode = (args.quick || !args.full) ? 'quick' : 'full'

const analyzeOptions = {
  // Setting client tool tracking so we can get counts on tool use
  clientToolName: 'mythx-analysis',
  debug: args.debug,
  data: data,
  noCacheLookup: !args['cache-lookup'],

  // How long to wait initially before polling for results
  initialDelay: args.delay * 1000,

  // The maximum time allowed before returning
  timeout: args.timeout * 1000,
}

client.analyzeWithStatus(analyzeOptions)
    .then(result => {
        const util = require('util')
	if (args.yaml) {
	    const yaml = requireOrExit('js-yaml')
	    console.log(yaml.safeDump(result))
	} else {
            console.log(`${util.inspect(result, {depth: null})}`)
	}
    }).catch(err => {
        console.log(err)
    })
