Utils
iERC20
iFACTORY
iPOOLS
iROUTER
iSYNTH
iVADER
console
contract name: Utils
WARNING!!!!
Utils_types.txt
Finance File not Found
"Utils_types.txt" opened successfully.
[*c],Utils

[xf],sortArray

[xf], init

[sef], collateralContract, TOKEN, 1, {c, 1, -1, 0, collateralContract}

{c, 1, -1, 0, collateralContract}
['c', '1', '-1', '0', 'collateralContract']
[sef], POOLS, getPoolAmounts, 2, {c, [1], [-1], 0}, {c, [1], [-1], 0}

{c, [1], [-1], 0}
['c', '[1]', '[-1]', '0']
{c, [1], [-1], 0}
['c', '[1]', '[-1]', '0']
[sef], POOLS, getBaseAmount, 1, {c, [-1], [-1], 0}

{c, [-1], [-1], 0}
['c', '[-1]', '[-1]', '0']
[sef], POOLS, pooledVADER, 1, {c, 1, -1, 0}

{c, 1, -1, 0}
['c', '1', '-1', '0']
[sef], POOLS, pooledUSDV, 1, {c, 2, -1, 0}

{c, 2, -1, 0}
['c', '2', '-1', '0']
[sef], ROUTER, reserveUSDV, 1, {c, 2, -1, 0}

{c, 2, -1, 0}
['c', '2', '-1', '0']
[sef], ROUTER, reserveVADER, 1, {c, 1, -1, 0}

{c, 1, -1, 0}
['c', '1', '-1', '0']
[sef], ROUTER, getMemberBaseDeposit, 1, {c, [2], [-1], 0}

{c, [2], [-1], 0}
['c', '[2]', '[-1]', '0']
[sef], ROUTER, getMemberTokenDeposit, 1, {c, [2], [-1], 0}

{c, [2], [-1], 0}
['c', '[2]', '[-1]', '0']
[sef], POOLS, getMemberUnits, 1, {c, [-1], [-1], 0}

{c, [-1], [-1], 0}
['c', '[-1]', '[-1]', '0']
[sef], POOLS, getUnits, 1, {c, [1], [-1], 0}

{c, [1], [-1], 0}
['c', '[1]', '[-1]', '0']
[sef], POOLS, getTokenAmount, 1, {c, [1], [-1], 0}

{c, [1], [-1], 0}
['c', '[1]', '[-1]', '0']
[sef], ROUTER, getMemberLastDeposit, 1, {c, [2], [-1], 0}

{c, [2], [-1], 0}
['c', '[2]', '[-1]', '0']
[sef], ROUTER, getSystemDebt, 1, {c, [2], [-1], 0}

{c, [2], [-1], 0}
['c', '[2]', '[-1]', '0']
[t],global,POOLS,-2,-1,0, POOLS

[t],global,USDV,-2,-1,0, USDV

[t],global,VADER,-2,-1,0, VADER

[t],global,ROUTER,-2,-1,0, ROUTER

[t],global,one,-1,-1,0

[t],global,FACTORY,-2,-1,0, FACTORY

[t],global,_year,-1,-1,0

[t],global,inited,-2,-1,0

[t],global,_10k,-1,-1,0

[t],init,_vader,-2,-1,0

[t],init,_usdv,-2,-1,0

[t],init,_router,-2,-1,0

[t],init,_pools,-2,-1,0

[t],init,_factory,-2,-1,0

[t],assetChecks,collateralAsset,-2,-1,0, collateralContract

[t],assetChecks,debtAsset,-2,-1,0, debtContract

[t],isBase,token,-2,-1,0

[t],isPool,token,-2,-1,0

[t],calcValueInBase,token,-2,-1,0

[t],calcValueInBase,amount,-1,-1,0

[t],calcValueInBase,_baseAmt,2,-1,0

[t],calcValueInBase,_tokenAmt,1,-1,0

[t],calcValueInToken,token,-2,-1,0

[t],calcValueInToken,amount,-1,-1,0

[t],calcValueInToken,_baseAmt,1,-1,0

[t],calcValueInToken,_tokenAmt,2,-1,0

[t],requirePriceBounds,token,-2,-1,0

[t],requirePriceBounds,bound,-1,-1,0

[t],requirePriceBounds,inside,-2,-1,0

[t],requirePriceBounds,targetPrice,-1,-1,0

[t],getRewardShare,token,-2,-1,0

[t],getRewardShare,rewardReductionFactor,-1,-1,0

[t],getProtection,member,-2,-1,0

[t],getProtection,token,-2,-1,0

[t],getProtection,basisPoints,-1,-1,0

[t],getProtection,timeForFullProtection,-1,-1,0

[t],getCollateralValueInBase,member,-2,-1,0

[t],getCollateralValueInBase,collateral,1,-1,0

[t],getCollateralValueInBase,collateralAsset,-2,-1,0, collateralContract

[t],getCollateralValueInBase,debtAsset,-2,-1,0, debtContract

[t],calcSwapValueInBase,_baseAmt,2,-1,0

[t],calcSwapValueInBase,_tokenAmt,1,-1,0

[t],getInterestPayment,collateralAsset,-2,-1,0, collateralContract

[t],getInterestPayment,debtAsset,-2,-1,0, debtContract

[t],getDebtLoading,collateralAsset,-2,-1,0, collateralContract

[t],getDebtLoading,debtAsset,-2,-1,0, debtContract

[t],calcPart,bp,-1,-1,4

[t],calcPart,total,-1,-1,0

[t],calcShare,part,-1,-1,0

[t],calcShare,total,-1,-1,0

[t],calcShare,amount,-1,-1,0

[t],calcSwapOutput,x,-1,-1,0

[t],calcSwapOutput,X,-1,-1,0

[t],calcSwapOutput,Y,-1,-1,0

[t],calcSwapFee,x,-1,-1,0

[t],calcSwapFee,X,-1,-1,0

[t],calcSwapFee,Y,-1,-1,0

[t],calcSwapSlip,x,-1,-1,0

[t],calcSwapSlip,X,-1,-1,0

[t],calcLiquidityUnits,b,1,-1,0

[t],calcLiquidityUnits,B,1,-1,0

[t],calcLiquidityUnits,t,2,-1,0

[t],calcLiquidityUnits,T,2,-1,0

[t],calcLiquidityUnits,P,3,-1,0

[t],getSlipAdustment,b,1,-1,0

[t],getSlipAdustment,B,1,-1,0

[t],getSlipAdustment,t,2,-1,0

[t],getSlipAdustment,T,2,-1,0

[t],calcSynthUnits,b,1,-1,0

[t],calcSynthUnits,B,1,-1,0

[t],calcSynthUnits,P,-1,-1,0

[t],calcAsymmetricShare,u,1,-1,0

[t],calcAsymmetricShare,U,1,-1,0

[t],calcAsymmetricShare,A,1,-1,0

[t],calcCoverage,B0,1,-1,0

[t],calcCoverage,T0,2,-1,0

[t],calcCoverage,B1,1,-1,0

[t],calcCoverage,T1,2,-1,0

[*] Utils run
Checking... constructor Visibility: public
[x] No Binary
Checking... init Visibility: public
[o] Marked
Checking... getFeeOnTransfer Visibility: external
[x] No Binary
Checking... assetChecks Visibility: external
[o] Marked
Checking... isBase Visibility: public
[o] Marked
Checking... isPool Visibility: public
[o] Marked
Checking... calcValueInBase Visibility: public
[o] Marked
Checking... calcValueInToken Visibility: public
[o] Marked
Checking... calcValueOfTokenInToken Visibility: public
[x] No Binary
Checking... calcSwapValueInBase Visibility: public
[x] No Binary
Checking... calcSwapValueInToken Visibility: public
[x] No Binary
Checking... requirePriceBounds Visibility: external
[o] Marked
Checking... getRewardShare Visibility: external
[o] Marked
Checking... getReducedShare Visibility: public
[x] No Binary
Checking... getProtection Visibility: public
[o] Marked
Checking... getCoverage Visibility: public
[x] No Binary
Checking... getCollateralValueInBase Visibility: external
[o] Marked
Checking... getDebtValueInCollateral Visibility: external
[x] No Binary
Checking... getInterestOwed Visibility: external
[x] No Binary
Checking... getInterestPayment Visibility: public
[o] Marked
Checking... getDebtLoading Visibility: public
[o] Marked
Checking... calcPart Visibility: public
[o] Marked
Checking... calcShare Visibility: public
[o] Marked
Checking... calcSwapOutput Visibility: public
[o] Marked
Checking... calcSwapFee Visibility: external
[o] Marked
Checking... calcSwapSlip Visibility: external
[o] Marked
Checking... calcLiquidityUnits Visibility: external
[o] Marked
Checking... getSlipAdustment Visibility: public
[o] Marked
Checking... calcSynthUnits Visibility: external
[o] Marked
Checking... calcAsymmetricShare Visibility: public
[o] Marked
Checking... calcCoverage Visibility: public
[o] Marked
Checking... sortArray Visibility: external
[o] Marked
Checking... slitherConstructorVariables Visibility: internal
[x] Not visible 
State_var: POOLS
Finding type for POOLS...
address
State_var: ROUTER
Finding type for ROUTER...
address
State_var: VADER
Finding type for VADER...
address
State_var: USDV
Finding type for USDV...
address
State_var: FACTORY
Finding type for FACTORY...
address
State_var: one
Finding type for one...
uint256
State_var: inited
Finding type for inited...
bool
State_var: _10k
Finding type for _10k...
uint256
State_var: _year
Finding type for _year...
uint256
contract name: iERC20
WARNING!!!!
iERC20_types.txt
Finance File not Found
Type File not found.
[x] iERC20 not run
contract name: iFACTORY
WARNING!!!!
iFACTORY_types.txt
Finance File not Found
Type File not found.
[x] iFACTORY not run
contract name: iPOOLS
WARNING!!!!
iPOOLS_types.txt
Finance File not Found
Type File not found.
[x] iPOOLS not run
contract name: iROUTER
WARNING!!!!
iROUTER_types.txt
Finance File not Found
Type File not found.
[x] iROUTER not run
contract name: iSYNTH
WARNING!!!!
iSYNTH_types.txt
Finance File not Found
Type File not found.
[x] iSYNTH not run
contract name: iVADER
WARNING!!!!
iVADER_types.txt
Finance File not Found
Type File not found.
[x] iVADER not run
contract name: console
WARNING!!!!
console_types.txt
Finance File not Found
Type File not found.
[x] console not run
Seen contract: {} Contract name out: Utils
[*] Utils run
Reading Function: constructor
Function constructor not marked
Mark Iterations TRUE, proceeding anyway
Function name: constructor
Function Visibility (test): public
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "constructor":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: init
wooo
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getFeeOnTransfer
Function getFeeOnTransfer not marked
Mark Iterations TRUE, proceeding anyway
Function name: getFeeOnTransfer
Function Visibility (test): external
totalSupply
Finding type for totalSupply...
uint256
maxSupply
Finding type for maxSupply...
uint256
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_2(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(totalSupply_1,maxSupply_1,100)
has variable
[i] TMP_2 cleared
clearing ir...?
RETURN TMP_2
typecheckig node...
TMP_2(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(totalSupply_1,maxSupply_1,100)
Function name: getFeeOnTransfer
Internal call...
calcShare
totalSupply
maxSupply
100
Function: calcShare
ic
[i]Type for TMP_2

Name: TMP_2 Function: getFeeOnTransfer
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_2
RETURN

Name: TMP_2 Function: getFeeOnTransfer
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getFeeOnTransfer":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: assetChecks
Function name: assetChecks
Function Visibility (test): external
collateralAsset
Finding type for collateralAsset...
address
Check copy_toekn_tuple
(-2, -1, 0, 'collateralContract')
----
Type: address
address
Final Type: address

Name: collateralAsset Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef
[*]Type fetched successfully
debtAsset
Finding type for debtAsset...
address
Check copy_toekn_tuple
(-2, -1, 0, 'debtContract')
----
Type: address
address
Final Type: address

Name: debtAsset Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: debtContract
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: debtContract
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: debtContract
    fields: []
    fintype: -1
clearning node...
clearing ir...?
VADER_2(address) := ϕ(['VADER_0', 'VADER_6', 'VADER_1'])
has variable
clearing ir...?
USDV_2(address) := ϕ(['USDV_1', 'USDV_0'])
has variable
clearing ir...?
POOLS_2(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
typecheckig node...
VADER_2(address) := ϕ(['VADER_0', 'VADER_6', 'VADER_1'])
Function name: assetChecks
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
USDV_2(address) := ϕ(['USDV_1', 'USDV_0'])
Function name: assetChecks
Phi
[i]Type for USDV

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
done.
POOLS_2(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: assetChecks
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_3(bool) = collateralAsset_1 == VADER_2
has variable
[i] TMP_3 cleared
clearing ir...?
CONDITION TMP_3
typecheckig node...
TMP_3(bool) = collateralAsset_1 == VADER_2
Function name: assetChecks
[i]Type for TMP_3

Name: TMP_3 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_3
Condition...
Conidtion: 
TMP_3
TMP_3
clearning node...
clearing ir...?
TMP_7(bool) = collateralAsset_1 == USDV_2
has variable
[i] TMP_7 cleared
clearing ir...?
CONDITION TMP_7
typecheckig node...
TMP_7(bool) = collateralAsset_1 == USDV_2
Function name: assetChecks
[i]Type for TMP_7

Name: TMP_7 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_7
Condition...
Conidtion: 
TMP_7
TMP_7
clearning node...
clearing ir...?
TMP_11 = CONVERT POOLS_2 to iPOOLS
has variable
[i] TMP_11 cleared
clearing ir...?
TMP_12(bool) = HIGH_LEVEL_CALL, dest:TMP_11(iPOOLS), function:isSynth, arguments:['collateralAsset_1']  
has variable
[i] TMP_12 cleared
clearing ir...?
POOLS_3(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_2', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_13 = CONVERT POOLS_3 to iPOOLS
has variable
[i] TMP_13 cleared
clearing ir...?
TMP_14 = CONVERT collateralAsset_1 to iSYNTH
has variable
[i] TMP_14 cleared
clearing ir...?
TMP_15(address) = HIGH_LEVEL_CALL, dest:TMP_14(iSYNTH), function:TOKEN, arguments:[]  
has variable
[i] TMP_15 cleared
clearing ir...?
POOLS_4(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_3'])
has variable
clearing ir...?
TMP_16(bool) = HIGH_LEVEL_CALL, dest:TMP_13(iPOOLS), function:isAnchor, arguments:['TMP_15']  
has variable
[i] TMP_16 cleared
clearing ir...?
POOLS_5(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_4', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_17(bool) = TMP_12 && TMP_16
has variable
[i] TMP_17 cleared
clearing ir...?
CONDITION TMP_17
typecheckig node...
TMP_11 = CONVERT POOLS_2 to iPOOLS
Function name: assetChecks

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_11 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_11

Name: TMP_11 Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_12(bool) = HIGH_LEVEL_CALL, dest:TMP_11(iPOOLS), function:isSynth, arguments:['collateralAsset_1']  
Function name: assetChecks
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_12
[i]Type for TMP_12

Name: TMP_12 Function: assetChecks
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_3(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_2', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: assetChecks
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_13 = CONVERT POOLS_3 to iPOOLS
Function name: assetChecks

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_13 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_13

Name: TMP_13 Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_14 = CONVERT collateralAsset_1 to iSYNTH
Function name: assetChecks

Name: collateralAsset Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef

Name: TMP_14 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_14

Name: TMP_14 Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef
done.
TMP_15(address) = HIGH_LEVEL_CALL, dest:TMP_14(iSYNTH), function:TOKEN, arguments:[]  
Function name: assetChecks
High Call: TOKEN
func name:TOKEN
other func name:TOKEN
TMP_15
hlc contract name: collateralContract func_name: TOKEN
('c', [1], [-1], 0, 'collateralContract')
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, 'collateralContract', -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_15

Name: TMP_15 Function: assetChecks
Num: 1
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef
done.
POOLS_4(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_3'])
Function name: assetChecks
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_16(bool) = HIGH_LEVEL_CALL, dest:TMP_13(iPOOLS), function:isAnchor, arguments:['TMP_15']  
Function name: assetChecks
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_16
[i]Type for TMP_16

Name: TMP_16 Function: assetChecks
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_5(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_4', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: assetChecks
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_17(bool) = TMP_12 && TMP_16
Function name: assetChecks
[i]Type for TMP_17

Name: TMP_17 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_17
Condition...
Conidtion: 
TMP_17
TMP_17
clearning node...
clearing ir...?
TMP_8 = CONVERT POOLS_2 to iPOOLS
has variable
[i] TMP_8 cleared
clearing ir...?
TMP_9(bool) = HIGH_LEVEL_CALL, dest:TMP_8(iPOOLS), function:isAsset, arguments:['debtAsset_1']  
has variable
[i] TMP_9 cleared
clearing ir...?
POOLS_11(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
has variable
clearing ir...?
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,Bad Combo)
typecheckig node...
TMP_8 = CONVERT POOLS_2 to iPOOLS
Function name: assetChecks

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_8 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_8

Name: TMP_8 Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_9(bool) = HIGH_LEVEL_CALL, dest:TMP_8(iPOOLS), function:isAsset, arguments:['debtAsset_1']  
Function name: assetChecks
High Call: isAsset
func name:isAsset
other func name:isAsset
TMP_9
[i]Type for TMP_9

Name: TMP_9 Function: assetChecks
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_11(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
Function name: assetChecks
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,Bad Combo)
[i]Type for TMP_10

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_4 = CONVERT POOLS_2 to iPOOLS
has variable
[i] TMP_4 cleared
clearing ir...?
TMP_5(bool) = HIGH_LEVEL_CALL, dest:TMP_4(iPOOLS), function:isAnchor, arguments:['debtAsset_1']  
has variable
[i] TMP_5 cleared
clearing ir...?
POOLS_12(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
has variable
clearing ir...?
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,Bad Combo)
typecheckig node...
TMP_4 = CONVERT POOLS_2 to iPOOLS
Function name: assetChecks

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_4 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_4

Name: TMP_4 Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_5(bool) = HIGH_LEVEL_CALL, dest:TMP_4(iPOOLS), function:isAnchor, arguments:['debtAsset_1']  
Function name: assetChecks
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_5
[i]Type for TMP_5

Name: TMP_5 Function: assetChecks
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_12(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
Function name: assetChecks
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,Bad Combo)
[i]Type for TMP_6

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_21 = CONVERT POOLS_5 to iPOOLS
has variable
[i] TMP_21 cleared
clearing ir...?
TMP_22(bool) = HIGH_LEVEL_CALL, dest:TMP_21(iPOOLS), function:isSynth, arguments:['collateralAsset_1']  
has variable
[i] TMP_22 cleared
clearing ir...?
POOLS_7(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
has variable
clearing ir...?
TMP_23 = CONVERT POOLS_7 to iPOOLS
has variable
[i] TMP_23 cleared
clearing ir...?
TMP_24 = CONVERT collateralAsset_1 to iSYNTH
has variable
[i] TMP_24 cleared
clearing ir...?
TMP_25(address) = HIGH_LEVEL_CALL, dest:TMP_24(iSYNTH), function:TOKEN, arguments:[]  
has variable
[i] TMP_25 cleared
clearing ir...?
POOLS_8(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_7', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_26(bool) = HIGH_LEVEL_CALL, dest:TMP_23(iPOOLS), function:isAsset, arguments:['TMP_25']  
has variable
[i] TMP_26 cleared
clearing ir...?
POOLS_9(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_8', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_27(bool) = TMP_22 && TMP_26
has variable
[i] TMP_27 cleared
clearing ir...?
CONDITION TMP_27
typecheckig node...
TMP_21 = CONVERT POOLS_5 to iPOOLS
Function name: assetChecks

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_21 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_21

Name: TMP_21 Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_22(bool) = HIGH_LEVEL_CALL, dest:TMP_21(iPOOLS), function:isSynth, arguments:['collateralAsset_1']  
Function name: assetChecks
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_22
[i]Type for TMP_22

Name: TMP_22 Function: assetChecks
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_7(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
Function name: assetChecks
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_23 = CONVERT POOLS_7 to iPOOLS
Function name: assetChecks

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_23 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_23

Name: TMP_23 Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_24 = CONVERT collateralAsset_1 to iSYNTH
Function name: assetChecks

Name: collateralAsset Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef

Name: TMP_24 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_24

Name: TMP_24 Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef
done.
TMP_25(address) = HIGH_LEVEL_CALL, dest:TMP_24(iSYNTH), function:TOKEN, arguments:[]  
Function name: assetChecks
High Call: TOKEN
func name:TOKEN
other func name:TOKEN
TMP_25
hlc contract name: collateralContract func_name: TOKEN
('c', [1], [-1], 0, 'collateralContract')
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, 'collateralContract', -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_25

Name: TMP_25 Function: assetChecks
Num: 1
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef
done.
POOLS_8(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_7', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: assetChecks
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_26(bool) = HIGH_LEVEL_CALL, dest:TMP_23(iPOOLS), function:isAsset, arguments:['TMP_25']  
Function name: assetChecks
High Call: isAsset
func name:isAsset
other func name:isAsset
TMP_26
[i]Type for TMP_26

Name: TMP_26 Function: assetChecks
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_9(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_8', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: assetChecks
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_27(bool) = TMP_22 && TMP_26
Function name: assetChecks
[i]Type for TMP_27

Name: TMP_27 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_27
Condition...
Conidtion: 
TMP_27
TMP_27
clearning node...
clearing ir...?
TMP_18 = CONVERT POOLS_5 to iPOOLS
has variable
[i] TMP_18 cleared
clearing ir...?
TMP_19(bool) = HIGH_LEVEL_CALL, dest:TMP_18(iPOOLS), function:isAnchor, arguments:['debtAsset_1']  
has variable
[i] TMP_19 cleared
clearing ir...?
POOLS_6(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_5', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,Bad Combo)
typecheckig node...
TMP_18 = CONVERT POOLS_5 to iPOOLS
Function name: assetChecks

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_18 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_18

Name: TMP_18 Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_19(bool) = HIGH_LEVEL_CALL, dest:TMP_18(iPOOLS), function:isAnchor, arguments:['debtAsset_1']  
Function name: assetChecks
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_19
[i]Type for TMP_19

Name: TMP_19 Function: assetChecks
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_6(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_5', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: assetChecks
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,Bad Combo)
[i]Type for TMP_20

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_28 = CONVERT POOLS_9 to iPOOLS
has variable
[i] TMP_28 cleared
clearing ir...?
TMP_29(bool) = HIGH_LEVEL_CALL, dest:TMP_28(iPOOLS), function:isAsset, arguments:['debtAsset_1']  
has variable
[i] TMP_29 cleared
clearing ir...?
POOLS_10(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
has variable
clearing ir...?
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,Bad Combo)
typecheckig node...
TMP_28 = CONVERT POOLS_9 to iPOOLS
Function name: assetChecks

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_28 Function: assetChecks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_28

Name: TMP_28 Function: assetChecks
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_29(bool) = HIGH_LEVEL_CALL, dest:TMP_28(iPOOLS), function:isAsset, arguments:['debtAsset_1']  
Function name: assetChecks
High Call: isAsset
func name:isAsset
other func name:isAsset
TMP_29
[i]Type for TMP_29

Name: TMP_29 Function: assetChecks
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_10(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
Function name: assetChecks
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,Bad Combo)
[i]Type for TMP_30

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "assetChecks":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: assetChecks
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: isBase
Function name: isBase
Function Visibility (test): public
token
Finding type for token...
address
Check copy_toekn_tuple
(-2, -1, 0, None)
----
Type: address
address
Final Type: address

Name: token Function: isBase
Num: -2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
token_1(address) := ϕ(['collateralAsset_1', 'collateralAsset_1'])
has variable
[i] token cleared
clearing ir...?
VADER_3(address) := ϕ(['VADER_0', 'VADER_6', 'VADER_1'])
has variable
clearing ir...?
USDV_3(address) := ϕ(['USDV_1', 'USDV_0'])
has variable
typecheckig node...
token_1(address) := ϕ(['collateralAsset_1', 'collateralAsset_1'])
Function name: isBase
Phi
[i]Type for token

Name: token Function: isBase
Num: -2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
VADER_3(address) := ϕ(['VADER_0', 'VADER_6', 'VADER_1'])
Function name: isBase
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
USDV_3(address) := ϕ(['USDV_1', 'USDV_0'])
Function name: isBase
Phi
[i]Type for USDV

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_31(bool) = token_1 == VADER_3
has variable
[i] TMP_31 cleared
clearing ir...?
TMP_32(bool) = token_1 == USDV_3
has variable
[i] TMP_32 cleared
clearing ir...?
TMP_33(bool) = TMP_31 || TMP_32
has variable
[i] TMP_33 cleared
clearing ir...?
CONDITION TMP_33
typecheckig node...
TMP_31(bool) = token_1 == VADER_3
Function name: isBase
[i]Type for TMP_31

Name: TMP_31 Function: isBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_32(bool) = token_1 == USDV_3
Function name: isBase
[i]Type for TMP_32

Name: TMP_32 Function: isBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_33(bool) = TMP_31 || TMP_32
Function name: isBase
[i]Type for TMP_33

Name: TMP_33 Function: isBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_33
Condition...
Conidtion: 
TMP_33
TMP_33
clearning node...
clearing ir...?
RETURN True
typecheckig node...
RETURN True
RETURN
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "isBase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: isBase
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: isPool
Function name: isPool
Function Visibility (test): public
token
Finding type for token...
address
Check copy_toekn_tuple
(-2, -1, 0, None)
----
Type: address
address
Final Type: address

Name: token Function: isPool
Num: -2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
token_1(address) := ϕ(['collateralAsset_1'])
has variable
[i] token cleared
clearing ir...?
POOLS_13(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
typecheckig node...
token_1(address) := ϕ(['collateralAsset_1'])
Function name: isPool
Phi
[i]Type for token

Name: token Function: isPool
Num: -2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_13(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: isPool
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_34 = CONVERT POOLS_13 to iPOOLS
has variable
[i] TMP_34 cleared
clearing ir...?
TMP_35(bool) = HIGH_LEVEL_CALL, dest:TMP_34(iPOOLS), function:isAnchor, arguments:['token_1']  
has variable
[i] TMP_35 cleared
clearing ir...?
POOLS_14(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_13', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_36 = CONVERT POOLS_14 to iPOOLS
has variable
[i] TMP_36 cleared
clearing ir...?
TMP_37(bool) = HIGH_LEVEL_CALL, dest:TMP_36(iPOOLS), function:isAsset, arguments:['token_1']  
has variable
[i] TMP_37 cleared
clearing ir...?
POOLS_15(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_14', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_38(bool) = TMP_35 || TMP_37
has variable
[i] TMP_38 cleared
clearing ir...?
CONDITION TMP_38
typecheckig node...
TMP_34 = CONVERT POOLS_13 to iPOOLS
Function name: isPool

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_34 Function: isPool
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: isPool
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_35(bool) = HIGH_LEVEL_CALL, dest:TMP_34(iPOOLS), function:isAnchor, arguments:['token_1']  
Function name: isPool
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_35
[i]Type for TMP_35

Name: TMP_35 Function: isPool
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_14(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_13', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: isPool
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_36 = CONVERT POOLS_14 to iPOOLS
Function name: isPool

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_36 Function: isPool
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_36

Name: TMP_36 Function: isPool
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_37(bool) = HIGH_LEVEL_CALL, dest:TMP_36(iPOOLS), function:isAsset, arguments:['token_1']  
Function name: isPool
High Call: isAsset
func name:isAsset
other func name:isAsset
TMP_37
[i]Type for TMP_37

Name: TMP_37 Function: isPool
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_15(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_14', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: isPool
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_38(bool) = TMP_35 || TMP_37
Function name: isPool
[i]Type for TMP_38

Name: TMP_38 Function: isPool
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_38
Condition...
Conidtion: 
TMP_38
TMP_38
clearning node...
clearing ir...?
pool_1(bool) := True(bool)
has variable
[i] pool cleared
typecheckig node...
pool_1(bool) := True(bool)
Function name: isPool
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: pool Function: isPool
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool

Name: pool Function: isPool
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "isPool":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: isPool

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcValueInBase
Function name: calcValueInBase
Function Visibility (test): public
token
Finding type for token...
address
Check copy_toekn_tuple
(-2, -1, 0, None)
----
Type: address
address
Final Type: address

Name: token Function: calcValueInBase
Num: -2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amount
Finding type for amount...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amount Function: calcValueInBase
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
token_1(address) := ϕ(['token_1', 'debtAsset_1', 'token1_1'])
has variable
[i] token cleared
clearing ir...?
amount_1(uint256) := ϕ(['_interestPayment_1', 'one_1', 'amount_1'])
has variable
[i] amount cleared
clearing ir...?
POOLS_16(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
typecheckig node...
token_1(address) := ϕ(['token_1', 'debtAsset_1', 'token1_1'])
Function name: calcValueInBase
Phi
[i]Type for token

Name: token Function: calcValueInBase
Num: -2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['_interestPayment_1', 'one_1', 'amount_1'])
Function name: calcValueInBase
Phi
[i]Type for amount

Name: amount Function: calcValueInBase
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_16(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: calcValueInBase
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_39 = CONVERT POOLS_16 to iPOOLS
has variable
[i] TMP_39 cleared
clearing ir...?
TUPLE_0(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_39(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
has variable
clearing ir...?
POOLS_17(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_16', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_baseAmt_1(uint256)= UNPACK TUPLE_0 index: 0 
has variable
[i] _baseAmt cleared
clearing ir...?
_tokenAmt_1(uint256)= UNPACK TUPLE_0 index: 1 
has variable
[i] _tokenAmt cleared
typecheckig node...
TMP_39 = CONVERT POOLS_16 to iPOOLS
Function name: calcValueInBase

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_39 Function: calcValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_39

Name: TMP_39 Function: calcValueInBase
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TUPLE_0(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_39(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
Function name: calcValueInBase
High Call: getPoolAmounts
func name:getPoolAmounts
other func name:getPoolAmounts
TUPLE_0
hlc contract name: POOLS func_name: getPoolAmounts
('c', [1], [-1], 0, None)
token
('c', [1], [-1], 0, None)
token
wfc len: 2
COPIED
[i]Type for TUPLE_0

Name: TUPLE_0 Function: calcValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_17(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_16', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: calcValueInBase
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_baseAmt_1(uint256)= UNPACK TUPLE_0 index: 0 
Function name: calcValueInBase
Reading tuple TUPLE_0 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for _baseAmt

Name: _baseAmt Function: calcValueInBase
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_tokenAmt_1(uint256)= UNPACK TUPLE_0 index: 1 
Function name: calcValueInBase
Reading tuple TUPLE_0 index 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for _tokenAmt

Name: _tokenAmt Function: calcValueInBase
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_40(bool) = _baseAmt_1 > 0
has variable
[i] TMP_40 cleared
clearing ir...?
TMP_41(bool) = _tokenAmt_1 > 0
has variable
[i] TMP_41 cleared
clearing ir...?
TMP_42(bool) = TMP_40 && TMP_41
has variable
[i] TMP_42 cleared
clearing ir...?
CONDITION TMP_42
typecheckig node...
TMP_40(bool) = _baseAmt_1 > 0
Function name: calcValueInBase
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_40

Name: TMP_40 Function: calcValueInBase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_41(bool) = _tokenAmt_1 > 0
Function name: calcValueInBase
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_41

Name: TMP_41 Function: calcValueInBase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_42(bool) = TMP_40 && TMP_41
Function name: calcValueInBase
[i]Type for TMP_42

Name: TMP_42 Function: calcValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_42
Condition...
Conidtion: 
TMP_42
TMP_42
clearning node...
clearing ir...?
TMP_43(uint256) = amount_1 (c)* _baseAmt_1
has variable
[i] TMP_43 cleared
clearing ir...?
TMP_44(uint256) = TMP_43 (c)/ _tokenAmt_1
has variable
[i] TMP_44 cleared
clearing ir...?
RETURN TMP_44
typecheckig node...
TMP_43(uint256) = amount_1 (c)* _baseAmt_1
Function name: calcValueInBase
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _baseAmt Function: calcValueInBase
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_43 Function: calcValueInBase
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_43

Name: TMP_43 Function: calcValueInBase
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_44(uint256) = TMP_43 (c)/ _tokenAmt_1
Function name: calcValueInBase
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_44 Function: calcValueInBase
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_4 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_44 Function: calcValueInBase
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_44

Name: TMP_44 Function: calcValueInBase
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_44
RETURN

Name: TMP_44 Function: calcValueInBase
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "calcValueInBase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcValueInBase

Name: TMP_44 Function: calcValueInBase
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcValueInToken
Function name: calcValueInToken
Function Visibility (test): public
token
Finding type for token...
address
Check copy_toekn_tuple
(-2, -1, 0, None)
----
Type: address
address
Final Type: address

Name: token Function: calcValueInToken
Num: -2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amount
Finding type for amount...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amount Function: calcValueInToken
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
token_1(address) := ϕ(['token2_1'])
has variable
[i] token cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_51'])
has variable
[i] amount cleared
clearing ir...?
POOLS_18(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
typecheckig node...
token_1(address) := ϕ(['token2_1'])
Function name: calcValueInToken
Phi
[i]Type for token

Name: token Function: calcValueInToken
Num: -2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_51'])
Function name: calcValueInToken
Phi
[i]Type for amount

Name: amount Function: calcValueInToken
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_18(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: calcValueInToken
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_45 = CONVERT POOLS_18 to iPOOLS
has variable
[i] TMP_45 cleared
clearing ir...?
TUPLE_1(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_45(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
has variable
clearing ir...?
POOLS_19(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_18', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_baseAmt_1(uint256)= UNPACK TUPLE_1 index: 0 
has variable
[i] _baseAmt cleared
clearing ir...?
_tokenAmt_1(uint256)= UNPACK TUPLE_1 index: 1 
has variable
[i] _tokenAmt cleared
typecheckig node...
TMP_45 = CONVERT POOLS_18 to iPOOLS
Function name: calcValueInToken

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_45 Function: calcValueInToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_45

Name: TMP_45 Function: calcValueInToken
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TUPLE_1(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_45(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
Function name: calcValueInToken
High Call: getPoolAmounts
func name:getPoolAmounts
other func name:getPoolAmounts
TUPLE_1
hlc contract name: POOLS func_name: getPoolAmounts
('c', [1], [-1], 0, None)
token
('c', [1], [-1], 0, None)
token
wfc len: 2
COPIED
[i]Type for TUPLE_1

Name: TUPLE_1 Function: calcValueInToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_19(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_18', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: calcValueInToken
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_baseAmt_1(uint256)= UNPACK TUPLE_1 index: 0 
Function name: calcValueInToken
Reading tuple TUPLE_1 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for _baseAmt

Name: _baseAmt Function: calcValueInToken
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_tokenAmt_1(uint256)= UNPACK TUPLE_1 index: 1 
Function name: calcValueInToken
Reading tuple TUPLE_1 index 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for _tokenAmt

Name: _tokenAmt Function: calcValueInToken
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_46(bool) = _baseAmt_1 > 0
has variable
[i] TMP_46 cleared
clearing ir...?
TMP_47(bool) = _tokenAmt_1 > 0
has variable
[i] TMP_47 cleared
clearing ir...?
TMP_48(bool) = TMP_46 && TMP_47
has variable
[i] TMP_48 cleared
clearing ir...?
CONDITION TMP_48
typecheckig node...
TMP_46(bool) = _baseAmt_1 > 0
Function name: calcValueInToken
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_46

Name: TMP_46 Function: calcValueInToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_47(bool) = _tokenAmt_1 > 0
Function name: calcValueInToken
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_47

Name: TMP_47 Function: calcValueInToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_48(bool) = TMP_46 && TMP_47
Function name: calcValueInToken
[i]Type for TMP_48

Name: TMP_48 Function: calcValueInToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_48
Condition...
Conidtion: 
TMP_48
TMP_48
clearning node...
clearing ir...?
TMP_49(uint256) = amount_1 (c)* _tokenAmt_1
has variable
[i] TMP_49 cleared
clearing ir...?
TMP_50(uint256) = TMP_49 (c)/ _baseAmt_1
has variable
[i] TMP_50 cleared
clearing ir...?
RETURN TMP_50
typecheckig node...
TMP_49(uint256) = amount_1 (c)* _tokenAmt_1
Function name: calcValueInToken
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _tokenAmt Function: calcValueInToken
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_49 Function: calcValueInToken
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_49

Name: TMP_49 Function: calcValueInToken
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_50(uint256) = TMP_49 (c)/ _baseAmt_1
Function name: calcValueInToken
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_50 Function: calcValueInToken
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_6 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_50 Function: calcValueInToken
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_50

Name: TMP_50 Function: calcValueInToken
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_50
RETURN

Name: TMP_50 Function: calcValueInToken
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "calcValueInToken":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcValueInToken

Name: TMP_50 Function: calcValueInToken
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcValueOfTokenInToken
Function calcValueOfTokenInToken not marked
Mark Iterations TRUE, proceeding anyway
Function name: calcValueOfTokenInToken
Function Visibility (test): public
token1
Finding type for token1...
address
amount
Finding type for amount...
uint256
token2
Finding type for token2...
address
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: token1
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: token2
    fields: []
    fintype: -1
clearning node...
clearing ir...?
token1_1(address) := ϕ(['debtAsset_1'])
has variable
[i] token1 cleared
clearing ir...?
amount_1(uint256) := ϕ(['_interestPayment_1'])
has variable
[i] amount cleared
clearing ir...?
token2_1(address) := ϕ(['collateralAsset_1'])
has variable
[i] token2 cleared
typecheckig node...
token1_1(address) := ϕ(['debtAsset_1'])
Function name: calcValueOfTokenInToken
Phi
[i]Type for token1

Name: token1 Function: calcValueOfTokenInToken
Num: -1
Den: -1
Norm: u
LF: token1
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['_interestPayment_1'])
Function name: calcValueOfTokenInToken
Phi
[i]Type for amount

Name: amount Function: calcValueOfTokenInToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token2_1(address) := ϕ(['collateralAsset_1'])
Function name: calcValueOfTokenInToken
Phi
[i]Type for token2

Name: token2 Function: calcValueOfTokenInToken
Num: -1
Den: -1
Norm: u
LF: token2
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_51(uint256) = INTERNAL_CALL, Utils.calcValueInBase(address,uint256)(token1_1,amount_1)
has variable
[i] TMP_51 cleared
clearing ir...?
TMP_52(uint256) = INTERNAL_CALL, Utils.calcValueInToken(address,uint256)(token2_1,TMP_51)
has variable
[i] TMP_52 cleared
clearing ir...?
RETURN TMP_52
typecheckig node...
TMP_51(uint256) = INTERNAL_CALL, Utils.calcValueInBase(address,uint256)(token1_1,amount_1)
Function name: calcValueOfTokenInToken
Internal call...
calcValueInBase
token1
amount
Function: calcValueInBase
ic
[i]Type for TMP_51

Name: TMP_51 Function: calcValueOfTokenInToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_52(uint256) = INTERNAL_CALL, Utils.calcValueInToken(address,uint256)(token2_1,TMP_51)
Function name: calcValueOfTokenInToken
Internal call...
calcValueInToken
token2
TMP_51
Function: calcValueInToken
ic
[i]Type for TMP_52

Name: TMP_52 Function: calcValueOfTokenInToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_52
RETURN

Name: TMP_52 Function: calcValueOfTokenInToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcValueOfTokenInToken":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcSwapValueInBase
Function calcSwapValueInBase not marked
Mark Iterations TRUE, proceeding anyway
Function name: calcSwapValueInBase
Function Visibility (test): public
token
Finding type for token...
address
amount
Finding type for amount...
uint256
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: token
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
token_1(address) := ϕ(['TMP_133'])
has variable
[i] token cleared
clearing ir...?
amount_1(uint256) := ϕ(['_collateralAdjusted_1'])
has variable
[i] amount cleared
clearing ir...?
POOLS_20(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
typecheckig node...
token_1(address) := ϕ(['TMP_133'])
Function name: calcSwapValueInBase
Phi
[i]Type for token

Name: token Function: calcSwapValueInBase
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['_collateralAdjusted_1'])
Function name: calcSwapValueInBase
Phi
[i]Type for amount

Name: amount Function: calcSwapValueInBase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_20(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: calcSwapValueInBase
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_53 = CONVERT POOLS_20 to iPOOLS
has variable
[i] TMP_53 cleared
clearing ir...?
TUPLE_2(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_53(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
has variable
clearing ir...?
POOLS_21(address) := ϕ(['POOLS_9', 'POOLS_20', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_baseAmt_1(uint256)= UNPACK TUPLE_2 index: 0 
has variable
[i] _baseAmt cleared
clearing ir...?
_tokenAmt_1(uint256)= UNPACK TUPLE_2 index: 1 
has variable
[i] _tokenAmt cleared
typecheckig node...
TMP_53 = CONVERT POOLS_20 to iPOOLS
Function name: calcSwapValueInBase

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_53 Function: calcSwapValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_53

Name: TMP_53 Function: calcSwapValueInBase
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TUPLE_2(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_53(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
Function name: calcSwapValueInBase
High Call: getPoolAmounts
func name:getPoolAmounts
other func name:getPoolAmounts
TUPLE_2
[i]Type for TUPLE_2

Name: TUPLE_2 Function: calcSwapValueInBase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_21(address) := ϕ(['POOLS_9', 'POOLS_20', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: calcSwapValueInBase
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_baseAmt_1(uint256)= UNPACK TUPLE_2 index: 0 
Function name: calcSwapValueInBase
Reading tuple TUPLE_2 index 0
Finding type for _baseAmt...
uint256
[i]Type for _baseAmt

Name: _baseAmt Function: calcSwapValueInBase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_tokenAmt_1(uint256)= UNPACK TUPLE_2 index: 1 
Function name: calcSwapValueInBase
Reading tuple TUPLE_2 index 1
Finding type for _tokenAmt...
uint256
[i]Type for _tokenAmt

Name: _tokenAmt Function: calcSwapValueInBase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_54(uint256) = INTERNAL_CALL, Utils.calcSwapOutput(uint256,uint256,uint256)(amount_1,_tokenAmt_1,_baseAmt_1)
has variable
[i] TMP_54 cleared
clearing ir...?
RETURN TMP_54
typecheckig node...
TMP_54(uint256) = INTERNAL_CALL, Utils.calcSwapOutput(uint256,uint256,uint256)(amount_1,_tokenAmt_1,_baseAmt_1)
Function name: calcSwapValueInBase
Internal call...
calcSwapOutput
amount
_tokenAmt
_baseAmt
Function: calcSwapOutput
ic
[i]Type for TMP_54

Name: TMP_54 Function: calcSwapValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_54
RETURN

Name: TMP_54 Function: calcSwapValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcSwapValueInBase":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcSwapValueInToken
Function calcSwapValueInToken not marked
Mark Iterations TRUE, proceeding anyway
Function name: calcSwapValueInToken
Function Visibility (test): public
token
Finding type for token...
address
amount
Finding type for amount...
uint256
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: token
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
token_1(address) := ϕ(['debtAsset_1'])
has variable
[i] token cleared
clearing ir...?
amount_1(uint256) := ϕ(['baseValue_6'])
has variable
[i] amount cleared
clearing ir...?
POOLS_22(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
typecheckig node...
token_1(address) := ϕ(['debtAsset_1'])
Function name: calcSwapValueInToken
Phi
[i]Type for token

Name: token Function: calcSwapValueInToken
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['baseValue_6'])
Function name: calcSwapValueInToken
Phi
[i]Type for amount

Name: amount Function: calcSwapValueInToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_22(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: calcSwapValueInToken
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_55 = CONVERT POOLS_22 to iPOOLS
has variable
[i] TMP_55 cleared
clearing ir...?
TUPLE_3(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_55(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
has variable
clearing ir...?
POOLS_23(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_22', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_baseAmt_1(uint256)= UNPACK TUPLE_3 index: 0 
has variable
[i] _baseAmt cleared
clearing ir...?
_tokenAmt_1(uint256)= UNPACK TUPLE_3 index: 1 
has variable
[i] _tokenAmt cleared
typecheckig node...
TMP_55 = CONVERT POOLS_22 to iPOOLS
Function name: calcSwapValueInToken

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_55 Function: calcSwapValueInToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_55

Name: TMP_55 Function: calcSwapValueInToken
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TUPLE_3(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_55(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
Function name: calcSwapValueInToken
High Call: getPoolAmounts
func name:getPoolAmounts
other func name:getPoolAmounts
TUPLE_3
[i]Type for TUPLE_3

Name: TUPLE_3 Function: calcSwapValueInToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_23(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_22', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: calcSwapValueInToken
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_baseAmt_1(uint256)= UNPACK TUPLE_3 index: 0 
Function name: calcSwapValueInToken
Reading tuple TUPLE_3 index 0
Finding type for _baseAmt...
uint256
[i]Type for _baseAmt

Name: _baseAmt Function: calcSwapValueInToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_tokenAmt_1(uint256)= UNPACK TUPLE_3 index: 1 
Function name: calcSwapValueInToken
Reading tuple TUPLE_3 index 1
Finding type for _tokenAmt...
uint256
[i]Type for _tokenAmt

Name: _tokenAmt Function: calcSwapValueInToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_56(uint256) = INTERNAL_CALL, Utils.calcSwapOutput(uint256,uint256,uint256)(amount_1,_baseAmt_1,_tokenAmt_1)
has variable
[i] TMP_56 cleared
clearing ir...?
RETURN TMP_56
typecheckig node...
TMP_56(uint256) = INTERNAL_CALL, Utils.calcSwapOutput(uint256,uint256,uint256)(amount_1,_baseAmt_1,_tokenAmt_1)
Function name: calcSwapValueInToken
Internal call...
calcSwapOutput
amount
_baseAmt
_tokenAmt
Function: calcSwapOutput
ic
[i]Type for TMP_56

Name: TMP_56 Function: calcSwapValueInToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_56
RETURN

Name: TMP_56 Function: calcSwapValueInToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcSwapValueInToken":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: requirePriceBounds
Function name: requirePriceBounds
Function Visibility (test): external
token
Finding type for token...
address
Check copy_toekn_tuple
(-2, -1, 0, None)
----
Type: address
address
Final Type: address

Name: token Function: requirePriceBounds
Num: -2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
bound
Finding type for bound...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: bound Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
inside
Finding type for inside...
bool
SKIP bool
targetPrice
Finding type for targetPrice...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: targetPrice Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
one_1(uint256) := ϕ(['one_2', 'one_0', 'one_4'])
has variable
clearing ir...?
_10k_1(uint256) := ϕ(['_10k_0', '_10k_3'])
has variable
typecheckig node...
one_1(uint256) := ϕ(['one_2', 'one_0', 'one_4'])
Function name: requirePriceBounds
Phi
[i]Type for one

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_10k_1(uint256) := ϕ(['_10k_0', '_10k_3'])
Function name: requirePriceBounds
Phi
[i]Type for _10k

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_57(uint256) = INTERNAL_CALL, Utils.calcValueInBase(address,uint256)(token_1,one_1)
has variable
[i] TMP_57 cleared
clearing ir...?
_testingPrice_1(uint256) := TMP_57(uint256)
has variable
[i] _testingPrice cleared
typecheckig node...
TMP_57(uint256) = INTERNAL_CALL, Utils.calcValueInBase(address,uint256)(token_1,one_1)
Function name: requirePriceBounds
Internal call...
calcValueInBase
token
one
Function: calcValueInBase
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-2], [-1], 0, None, [], -1]
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-2], [-1], 0, None, [], -1]
[[-1], [-1], 0, None, [], -1]
0

Name: PIC_5 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_57 Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_testingPrice_1(uint256) := TMP_57(uint256)
Function name: requirePriceBounds
asgn

Name: TMP_57 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _testingPrice Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _testingPrice

Name: _testingPrice Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_58(uint256) = _10k_2 (c)- bound_1
has variable
[i] TMP_58 cleared
clearing ir...?
TMP_59(uint256) = INTERNAL_CALL, Utils.calcPart(uint256,uint256)(TMP_58,targetPrice_1)
has variable
[i] TMP_59 cleared
clearing ir...?
_lower_1(uint256) := TMP_59(uint256)
has variable
[i] _lower cleared
typecheckig node...
TMP_58(uint256) = _10k_2 (c)- bound_1
Function name: requirePriceBounds
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: bound Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: bound Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_58 Function: requirePriceBounds
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_58

Name: TMP_58 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_59(uint256) = INTERNAL_CALL, Utils.calcPart(uint256,uint256)(TMP_58,targetPrice_1)
Function name: requirePriceBounds
Internal call...
calcPart
TMP_58
targetPrice
Function: calcPart
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: calcPart
Function Visibility: public
clearning node...
clearing ir...?
bp_1(uint256) := ϕ(['TMP_58', 'basisPoints_1'])
has variable
[i] bp cleared
clearing ir...?
total_1(uint256) := ϕ(['targetPrice_1', 'protection_3'])
has variable
[i] total cleared
typecheckig node...
bp_1(uint256) := ϕ(['TMP_58', 'basisPoints_1'])
Function name: calcPart
Phi
[i]Type for bp

Name: bp Function: calcPart
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['targetPrice_1', 'protection_3'])
Function name: calcPart
Phi
[i]Type for total

Name: total Function: calcPart
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(bool) = bp_1 <= 10000
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(bool) = bp_1 >= 0
has variable
[i] TMP_165 cleared
clearing ir...?
TMP_166(bool) = TMP_164 && TMP_165
has variable
[i] TMP_166 cleared
clearing ir...?
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,Must be correct BP)
typecheckig node...
TMP_164(bool) = bp_1 <= 10000
Function name: calcPart
testing lt...
val: 10000
4
val: 10000
4
lnorm: u rnorm: 4
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_164

Name: TMP_164 Function: calcPart
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(bool) = bp_1 >= 0
Function name: calcPart
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_165

Name: TMP_165 Function: calcPart
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = TMP_164 && TMP_165
Function name: calcPart
[i]Type for TMP_166

Name: TMP_166 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,Must be correct BP)
[i]Type for TMP_167

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
has variable
[i] TMP_168 cleared
clearing ir...?
RETURN TMP_168
typecheckig node...
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
Function name: calcPart
Internal call...
calcShare
bp
10000
total
Function: calcShare
ic
val: 10000
4
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_168

Name: TMP_168 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_168
RETURN

Name: TMP_168 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcPart":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcPart

Name: TMP_168 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_59

Name: TMP_59 Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_lower_1(uint256) := TMP_59(uint256)
Function name: requirePriceBounds
asgn

Name: TMP_59 Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _lower Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _lower

Name: _lower Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_lower_1(uint256) := TMP_59(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_60(uint256) = _10k_3 (c)+ bound_1
has variable
[i] TMP_60 cleared
clearing ir...?
TMP_61(uint256) = targetPrice_1 (c)* TMP_60
has variable
[i] TMP_61 cleared
clearing ir...?
TMP_62(uint256) = TMP_61 (c)/ _10k_3
has variable
[i] TMP_62 cleared
clearing ir...?
_upper_1(uint256) := TMP_62(uint256)
has variable
[i] _upper cleared
typecheckig node...
TMP_60(uint256) = _10k_3 (c)+ bound_1
Function name: requirePriceBounds

Name: TMP_60 Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: bound Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_60 Function: requirePriceBounds
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_61(uint256) = targetPrice_1 (c)* TMP_60
Function name: requirePriceBounds
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_60 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_61 Function: requirePriceBounds
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_61

Name: TMP_61 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_62(uint256) = TMP_61 (c)/ _10k_3
Function name: requirePriceBounds
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_62 Function: requirePriceBounds
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_62

Name: TMP_62 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_upper_1(uint256) := TMP_62(uint256)
Function name: requirePriceBounds
asgn

Name: TMP_62 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _upper Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _upper

Name: _upper Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION inside_1
typecheckig node...
CONDITION inside_1
Condition...
Conidtion: 
inside_1
inside_1
clearning node...
clearing ir...?
TMP_67(bool) = _testingPrice_1 <= _lower_1
has variable
[i] TMP_67 cleared
clearing ir...?
TMP_68(bool) = _testingPrice_1 >= _upper_1
has variable
[i] TMP_68 cleared
clearing ir...?
TMP_69(bool) = TMP_67 || TMP_68
has variable
[i] TMP_69 cleared
clearing ir...?
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,Not outside)
typecheckig node...
TMP_67(bool) = _testingPrice_1 <= _lower_1
Function name: requirePriceBounds
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _testingPrice Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_67 Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_67

Name: TMP_67 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_67(bool) = _testingPrice_1 <= _lower_1
XXXXX
TMP_68(bool) = _testingPrice_1 >= _upper_1
Function name: requirePriceBounds
testing gt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_68

Name: TMP_68 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_69(bool) = TMP_67 || TMP_68
Function name: requirePriceBounds
[i]Type for TMP_69

Name: TMP_69 Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,Not outside)
[i]Type for TMP_70

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_63(bool) = _testingPrice_1 >= _lower_1
has variable
[i] TMP_63 cleared
clearing ir...?
TMP_64(bool) = _testingPrice_1 <= _upper_1
has variable
[i] TMP_64 cleared
clearing ir...?
TMP_65(bool) = TMP_63 && TMP_64
has variable
[i] TMP_65 cleared
clearing ir...?
TMP_66(None) = SOLIDITY_CALL require(bool,string)(TMP_65,Not inside)
typecheckig node...
TMP_63(bool) = _testingPrice_1 >= _lower_1
Function name: requirePriceBounds
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _testingPrice Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_63 Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_63

Name: TMP_63 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_63(bool) = _testingPrice_1 >= _lower_1
XXXXX
TMP_64(bool) = _testingPrice_1 <= _upper_1
Function name: requirePriceBounds
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_64

Name: TMP_64 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_65(bool) = TMP_63 && TMP_64
Function name: requirePriceBounds
[i]Type for TMP_65

Name: TMP_65 Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_66(None) = SOLIDITY_CALL require(bool,string)(TMP_65,Not inside)
[i]Type for TMP_66

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "requirePriceBounds":
 New undefined nodes- 3
 Old undefined nodes- 0
typecheckig node...
one_1(uint256) := ϕ(['one_2', 'one_0', 'one_4'])
Function name: requirePriceBounds
Phi
[i]Type for one

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_10k_1(uint256) := ϕ(['_10k_0', '_10k_3'])
Function name: requirePriceBounds
Phi
[i]Type for _10k

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_57(uint256) = INTERNAL_CALL, Utils.calcValueInBase(address,uint256)(token_1,one_1)
Function name: requirePriceBounds
Internal call...
calcValueInBase
token
one
Function: calcValueInBase
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-2], [-1], 0, None, [], -1]
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-2], [-1], 0, None, [], -1]
[[-1], [-1], 0, None, [], -1]
0

Name: PIC_5 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_57 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_testingPrice_1(uint256) := TMP_57(uint256)
Function name: requirePriceBounds
asgn

Name: TMP_57 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _testingPrice Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _testingPrice

Name: _testingPrice Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_58(uint256) = _10k_2 (c)- bound_1
Function name: requirePriceBounds
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: bound Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: bound Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_58 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_58

Name: TMP_58 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_59(uint256) = INTERNAL_CALL, Utils.calcPart(uint256,uint256)(TMP_58,targetPrice_1)
Function name: requirePriceBounds
Internal call...
calcPart
TMP_58
targetPrice
Function: calcPart
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
[[-1], [-1], 0, None, [], -1]
0

Name: PIC_9 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_59 Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_lower_1(uint256) := TMP_59(uint256)
Function name: requirePriceBounds
asgn

Name: TMP_59 Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _lower Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _lower

Name: _lower Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_lower_1(uint256) := TMP_59(uint256)
XXXXX
typecheckig node...
TMP_60(uint256) = _10k_3 (c)+ bound_1
Function name: requirePriceBounds

Name: TMP_60 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: bound Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_60 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_61(uint256) = targetPrice_1 (c)* TMP_60
Function name: requirePriceBounds
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_60 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_61 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_61

Name: TMP_61 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_62(uint256) = TMP_61 (c)/ _10k_3
Function name: requirePriceBounds
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_62 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_62

Name: TMP_62 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_upper_1(uint256) := TMP_62(uint256)
Function name: requirePriceBounds
asgn

Name: TMP_62 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _upper Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _upper

Name: _upper Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
CONDITION inside_1
Condition...
Conidtion: 
inside_1
inside_1
typecheckig node...
TMP_67(bool) = _testingPrice_1 <= _lower_1
Function name: requirePriceBounds
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _testingPrice Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_67 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_67

Name: TMP_67 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_67(bool) = _testingPrice_1 <= _lower_1
XXXXX
TMP_68(bool) = _testingPrice_1 >= _upper_1
Function name: requirePriceBounds
testing gt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_68

Name: TMP_68 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_69(bool) = TMP_67 || TMP_68
Function name: requirePriceBounds
[i]Type for TMP_69

Name: TMP_69 Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,Not outside)
[i]Type for TMP_70

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_63(bool) = _testingPrice_1 >= _lower_1
Function name: requirePriceBounds
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _testingPrice Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_63 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_63

Name: TMP_63 Function: requirePriceBounds
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_63(bool) = _testingPrice_1 >= _lower_1
XXXXX
TMP_64(bool) = _testingPrice_1 <= _upper_1
Function name: requirePriceBounds
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_64

Name: TMP_64 Function: requirePriceBounds
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_65(bool) = TMP_63 && TMP_64
Function name: requirePriceBounds
[i]Type for TMP_65

Name: TMP_65 Function: requirePriceBounds
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_66(None) = SOLIDITY_CALL require(bool,string)(TMP_65,Not inside)
[i]Type for TMP_66

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
WORKLIST iteration 1 for function call "requirePriceBounds":
 New undefined nodes- 3
 Old undefined nodes- 3
Saving return values for: requirePriceBounds
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getRewardShare
Function name: getRewardShare
Function Visibility (test): external
token
Finding type for token...
address
Check copy_toekn_tuple
(-2, -1, 0, None)
----
Type: address
address
Final Type: address

Name: token Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
rewardReductionFactor
Finding type for rewardReductionFactor...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: rewardReductionFactor Function: getRewardShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
VADER_4(address) := ϕ(['VADER_0', 'VADER_6', 'VADER_1'])
has variable
clearing ir...?
ROUTER_2(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_24(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
typecheckig node...
VADER_4(address) := ϕ(['VADER_0', 'VADER_6', 'VADER_1'])
Function name: getRewardShare
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
ROUTER_2(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_24(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_71 = CONVERT VADER_4 to iVADER
has variable
[i] TMP_71 cleared
clearing ir...?
TMP_72(bool) = HIGH_LEVEL_CALL, dest:TMP_71(iVADER), function:emitting, arguments:[]  
has variable
[i] TMP_72 cleared
clearing ir...?
VADER_5(address) := ϕ(['VADER_4', 'VADER_6', 'VADER_1'])
has variable
clearing ir...?
ROUTER_3(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_2', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_25(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_24', 'POOLS_15'])
has variable
clearing ir...?
TMP_73 = CONVERT ROUTER_3 to iROUTER
has variable
[i] TMP_73 cleared
clearing ir...?
TMP_74(bool) = HIGH_LEVEL_CALL, dest:TMP_73(iROUTER), function:isCurated, arguments:['token_1']  
has variable
[i] TMP_74 cleared
clearing ir...?
VADER_6(address) := ϕ(['VADER_5', 'VADER_6', 'VADER_1'])
has variable
clearing ir...?
ROUTER_4(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_3', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_26(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_25', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_75(bool) = TMP_72 && TMP_74
has variable
[i] TMP_75 cleared
clearing ir...?
CONDITION TMP_75
typecheckig node...
TMP_71 = CONVERT VADER_4 to iVADER
Function name: getRewardShare

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef

Name: TMP_71 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_71

Name: TMP_71 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
TMP_72(bool) = HIGH_LEVEL_CALL, dest:TMP_71(iVADER), function:emitting, arguments:[]  
Function name: getRewardShare
High Call: emitting
func name:emitting
other func name:emitting
TMP_72
[i]Type for TMP_72

Name: TMP_72 Function: getRewardShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
VADER_5(address) := ϕ(['VADER_4', 'VADER_6', 'VADER_1'])
Function name: getRewardShare
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
ROUTER_3(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_2', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_25(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_24', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_73 = CONVERT ROUTER_3 to iROUTER
Function name: getRewardShare

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_73 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_73

Name: TMP_73 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_74(bool) = HIGH_LEVEL_CALL, dest:TMP_73(iROUTER), function:isCurated, arguments:['token_1']  
Function name: getRewardShare
High Call: isCurated
func name:isCurated
other func name:isCurated
TMP_74
[i]Type for TMP_74

Name: TMP_74 Function: getRewardShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
VADER_6(address) := ϕ(['VADER_5', 'VADER_6', 'VADER_1'])
Function name: getRewardShare
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
ROUTER_4(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_3', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_26(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_25', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_75(bool) = TMP_72 && TMP_74
Function name: getRewardShare
[i]Type for TMP_75

Name: TMP_75 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_75
Condition...
Conidtion: 
TMP_75
TMP_75
clearning node...
clearing ir...?
TMP_76 = CONVERT POOLS_26 to iPOOLS
has variable
[i] TMP_76 cleared
clearing ir...?
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:TMP_76(iPOOLS), function:getBaseAmount, arguments:['token_1']  
has variable
[i] TMP_77 cleared
clearing ir...?
ROUTER_5(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_27(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
has variable
clearing ir...?
_baseAmount_1(uint256) := TMP_77(uint256)
has variable
[i] _baseAmount cleared
typecheckig node...
TMP_76 = CONVERT POOLS_26 to iPOOLS
Function name: getRewardShare

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_76 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_76

Name: TMP_76 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:TMP_76(iPOOLS), function:getBaseAmount, arguments:['token_1']  
Function name: getRewardShare
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_77
hlc contract name: POOLS func_name: getBaseAmount
('c', [-1], [-1], 0, None)
token
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_77

Name: TMP_77 Function: getRewardShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_5(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_27(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_baseAmount_1(uint256) := TMP_77(uint256)
Function name: getRewardShare
asgn

Name: TMP_77 Function: getRewardShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _baseAmount Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _baseAmount

Name: _baseAmount Function: getRewardShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_78 = CONVERT POOLS_27 to iPOOLS
has variable
[i] TMP_78 cleared
clearing ir...?
TMP_79(bool) = HIGH_LEVEL_CALL, dest:TMP_78(iPOOLS), function:isAsset, arguments:['token_1']  
has variable
[i] TMP_79 cleared
clearing ir...?
ROUTER_6(address) := ϕ(['ROUTER_5', 'ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_28(address) := ϕ(['POOLS_9', 'POOLS_27', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
CONDITION TMP_79
typecheckig node...
TMP_78 = CONVERT POOLS_27 to iPOOLS
Function name: getRewardShare

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_78 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_78

Name: TMP_78 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_79(bool) = HIGH_LEVEL_CALL, dest:TMP_78(iPOOLS), function:isAsset, arguments:['token_1']  
Function name: getRewardShare
High Call: isAsset
func name:isAsset
other func name:isAsset
TMP_79
[i]Type for TMP_79

Name: TMP_79 Function: getRewardShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_6(address) := ϕ(['ROUTER_5', 'ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_28(address) := ϕ(['POOLS_9', 'POOLS_27', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
CONDITION TMP_79
Condition...
Conidtion: 
TMP_79
TMP_79
clearning node...
clearing ir...?
TMP_86 = CONVERT POOLS_28 to iPOOLS
has variable
[i] TMP_86 cleared
clearing ir...?
TMP_87(bool) = HIGH_LEVEL_CALL, dest:TMP_86(iPOOLS), function:isAnchor, arguments:['token_1']  
has variable
[i] TMP_87 cleared
clearing ir...?
ROUTER_10(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_32(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
has variable
clearing ir...?
CONDITION TMP_87
typecheckig node...
TMP_86 = CONVERT POOLS_28 to iPOOLS
Function name: getRewardShare

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_86 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_86

Name: TMP_86 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_87(bool) = HIGH_LEVEL_CALL, dest:TMP_86(iPOOLS), function:isAnchor, arguments:['token_1']  
Function name: getRewardShare
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_87
[i]Type for TMP_87

Name: TMP_87 Function: getRewardShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_10(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_32(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
CONDITION TMP_87
Condition...
Conidtion: 
TMP_87
TMP_87
clearning node...
clearing ir...?
TMP_88 = CONVERT POOLS_32 to iPOOLS
has variable
[i] TMP_88 cleared
clearing ir...?
TMP_89(uint256) = HIGH_LEVEL_CALL, dest:TMP_88(iPOOLS), function:pooledVADER, arguments:[]  
has variable
[i] TMP_89 cleared
clearing ir...?
ROUTER_11(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_33(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
has variable
clearing ir...?
TMP_90 = CONVERT ROUTER_11 to iROUTER
has variable
[i] TMP_90 cleared
clearing ir...?
TMP_91(uint256) = HIGH_LEVEL_CALL, dest:TMP_90(iROUTER), function:reserveVADER, arguments:[]  
has variable
[i] TMP_91 cleared
clearing ir...?
ROUTER_12(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_11', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_34(address) := ϕ(['POOLS_9', 'POOLS_33', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_92(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_baseAmount_1,TMP_89,TMP_91)
has variable
[i] TMP_92 cleared
clearing ir...?
_share_scope_0_1(uint256) := TMP_92(uint256)
has variable
[i] _share_scope_0 cleared
typecheckig node...
TMP_88 = CONVERT POOLS_32 to iPOOLS
Function name: getRewardShare

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_88 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_88

Name: TMP_88 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_89(uint256) = HIGH_LEVEL_CALL, dest:TMP_88(iPOOLS), function:pooledVADER, arguments:[]  
Function name: getRewardShare
High Call: pooledVADER
func name:pooledVADER
other func name:pooledVADER
TMP_89
hlc contract name: POOLS func_name: pooledVADER
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_89

Name: TMP_89 Function: getRewardShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_11(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_33(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_90 = CONVERT ROUTER_11 to iROUTER
Function name: getRewardShare

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_90 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_90

Name: TMP_90 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_91(uint256) = HIGH_LEVEL_CALL, dest:TMP_90(iROUTER), function:reserveVADER, arguments:[]  
Function name: getRewardShare
High Call: reserveVADER
func name:reserveVADER
other func name:reserveVADER
TMP_91
hlc contract name: ROUTER func_name: reserveVADER
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_91

Name: TMP_91 Function: getRewardShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_12(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_11', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_34(address) := ϕ(['POOLS_9', 'POOLS_33', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_92(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_baseAmount_1,TMP_89,TMP_91)
Function name: getRewardShare
Internal call...
calcShare
_baseAmount
TMP_89
TMP_91
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
False
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_11 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_12 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_92

Name: TMP_92 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_share_scope_0_1(uint256) := TMP_92(uint256)
Function name: getRewardShare
asgn

Name: TMP_92 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _share_scope_0 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _share_scope_0

Name: _share_scope_0 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_share_scope_0_1(uint256) := TMP_92(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_80 = CONVERT POOLS_28 to iPOOLS
has variable
[i] TMP_80 cleared
clearing ir...?
TMP_81(uint256) = HIGH_LEVEL_CALL, dest:TMP_80(iPOOLS), function:pooledUSDV, arguments:[]  
has variable
[i] TMP_81 cleared
clearing ir...?
ROUTER_7(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_6', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_29(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_28', 'POOLS_15'])
has variable
clearing ir...?
TMP_82 = CONVERT ROUTER_7 to iROUTER
has variable
[i] TMP_82 cleared
clearing ir...?
TMP_83(uint256) = HIGH_LEVEL_CALL, dest:TMP_82(iROUTER), function:reserveUSDV, arguments:[]  
has variable
[i] TMP_83 cleared
clearing ir...?
ROUTER_8(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_7', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_30(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_29', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_84(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_baseAmount_1,TMP_81,TMP_83)
has variable
[i] TMP_84 cleared
clearing ir...?
_share_1(uint256) := TMP_84(uint256)
has variable
[i] _share cleared
typecheckig node...
TMP_80 = CONVERT POOLS_28 to iPOOLS
Function name: getRewardShare

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_80 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_80

Name: TMP_80 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_81(uint256) = HIGH_LEVEL_CALL, dest:TMP_80(iPOOLS), function:pooledUSDV, arguments:[]  
Function name: getRewardShare
High Call: pooledUSDV
func name:pooledUSDV
other func name:pooledUSDV
TMP_81
hlc contract name: POOLS func_name: pooledUSDV
('c', [2], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_81

Name: TMP_81 Function: getRewardShare
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_7(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_6', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_29(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_28', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_82 = CONVERT ROUTER_7 to iROUTER
Function name: getRewardShare

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_82 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_82

Name: TMP_82 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_83(uint256) = HIGH_LEVEL_CALL, dest:TMP_82(iROUTER), function:reserveUSDV, arguments:[]  
Function name: getRewardShare
High Call: reserveUSDV
func name:reserveUSDV
other func name:reserveUSDV
TMP_83
hlc contract name: ROUTER func_name: reserveUSDV
('c', [2], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_83

Name: TMP_83 Function: getRewardShare
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_8(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_7', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_30(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_29', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_84(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_baseAmount_1,TMP_81,TMP_83)
Function name: getRewardShare
Internal call...
calcShare
_baseAmount
TMP_81
TMP_83
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
False
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_14 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_15 Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_84

Name: TMP_84 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_share_1(uint256) := TMP_84(uint256)
Function name: getRewardShare
asgn

Name: TMP_84 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _share Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _share

Name: _share Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_share_1(uint256) := TMP_84(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_93(uint256) = INTERNAL_CALL, Utils.getReducedShare(uint256,uint256)(_share_scope_0_1,rewardReductionFactor_1)
has variable
[i] TMP_93 cleared
clearing ir...?
rewardShare_2(uint256) := TMP_93(uint256)
has variable
[i] rewardShare cleared
typecheckig node...
TMP_93(uint256) = INTERNAL_CALL, Utils.getReducedShare(uint256,uint256)(_share_scope_0_1,rewardReductionFactor_1)
Function name: getRewardShare
Internal call...
getReducedShare
_share_scope_0
rewardReductionFactor
Function: getReducedShare
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[], [], 'u', None, [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: getReducedShare
Function Visibility: public
clearning node...
clearing ir...?
amount_1(uint256) := ϕ(['_share_1', '_share_scope_0_1'])
has variable
[i] amount cleared
clearing ir...?
rewardReductionFactor_1(uint256) := ϕ(['rewardReductionFactor_1'])
has variable
[i] rewardReductionFactor cleared
typecheckig node...
amount_1(uint256) := ϕ(['_share_1', '_share_scope_0_1'])
Function name: getReducedShare
Phi
[i]Type for amount

Name: amount Function: getReducedShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rewardReductionFactor_1(uint256) := ϕ(['rewardReductionFactor_1'])
Function name: getReducedShare
Phi
[i]Type for rewardReductionFactor

Name: rewardReductionFactor Function: getReducedShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_94(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(1,rewardReductionFactor_1,amount_1)
has variable
[i] TMP_94 cleared
clearing ir...?
RETURN TMP_94
typecheckig node...
TMP_94(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(1,rewardReductionFactor_1,amount_1)
Function name: getReducedShare
Internal call...
calcShare
1
rewardReductionFactor
amount
Function: calcShare
ic
val: 1
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_171(uint256) = amount_1 (c)* part_3
XXXXX
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
typecheckig node...
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_171(uint256) = amount_1 (c)* part_3
XXXXX
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "calcShare":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_94

Name: TMP_94 Function: getReducedShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_94(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(1,rewardReductionFactor_1,amount_1)
XXXXX
RETURN TMP_94
RETURN

Name: TMP_94 Function: getReducedShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getReducedShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: getReducedShare

Name: TMP_94 Function: getReducedShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_93

Name: TMP_93 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rewardShare_2(uint256) := TMP_93(uint256)
Function name: getRewardShare
asgn

Name: TMP_93 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: rewardShare Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for rewardShare

Name: rewardShare Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
rewardShare_2(uint256) := TMP_93(uint256)
XXXXX
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_85(uint256) = INTERNAL_CALL, Utils.getReducedShare(uint256,uint256)(_share_1,rewardReductionFactor_1)
has variable
[i] TMP_85 cleared
clearing ir...?
rewardShare_1(uint256) := TMP_85(uint256)
has variable
[i] rewardShare cleared
typecheckig node...
TMP_85(uint256) = INTERNAL_CALL, Utils.getReducedShare(uint256,uint256)(_share_1,rewardReductionFactor_1)
Function name: getRewardShare
Internal call...
getReducedShare
_share
rewardReductionFactor
Function: getReducedShare
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[], [], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[], [], 'u', None, [], -1]
[[-1], [-1], 0, None, [], -1]
0

Name: PIC_18 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_85 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_85

Name: TMP_85 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rewardShare_1(uint256) := TMP_85(uint256)
Function name: getRewardShare
asgn

Name: TMP_85 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: rewardShare Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for rewardShare

Name: rewardShare Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
rewardShare_1(uint256) := TMP_85(uint256)
XXXXX
WORKLIST iteration 0 for function call "getRewardShare":
 New undefined nodes- 4
 Old undefined nodes- 0
typecheckig node...
VADER_4(address) := ϕ(['VADER_0', 'VADER_6', 'VADER_1'])
Function name: getRewardShare
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
ROUTER_2(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_24(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_71 = CONVERT VADER_4 to iVADER
Function name: getRewardShare

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef

Name: TMP_71 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[i]Type for TMP_71

Name: TMP_71 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
TMP_72(bool) = HIGH_LEVEL_CALL, dest:TMP_71(iVADER), function:emitting, arguments:[]  
Function name: getRewardShare
High Call: emitting
func name:emitting
other func name:emitting
TMP_72
[i]Type for TMP_72

Name: TMP_72 Function: getRewardShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
VADER_5(address) := ϕ(['VADER_4', 'VADER_6', 'VADER_1'])
Function name: getRewardShare
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
ROUTER_3(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_2', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_25(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_24', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_73 = CONVERT ROUTER_3 to iROUTER
Function name: getRewardShare

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_73 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_73

Name: TMP_73 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_74(bool) = HIGH_LEVEL_CALL, dest:TMP_73(iROUTER), function:isCurated, arguments:['token_1']  
Function name: getRewardShare
High Call: isCurated
func name:isCurated
other func name:isCurated
TMP_74
[i]Type for TMP_74

Name: TMP_74 Function: getRewardShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
VADER_6(address) := ϕ(['VADER_5', 'VADER_6', 'VADER_1'])
Function name: getRewardShare
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
ROUTER_4(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_3', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_26(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_25', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_75(bool) = TMP_72 && TMP_74
Function name: getRewardShare
[i]Type for TMP_75

Name: TMP_75 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_75
Condition...
Conidtion: 
TMP_75
TMP_75
typecheckig node...
TMP_76 = CONVERT POOLS_26 to iPOOLS
Function name: getRewardShare

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_76 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_76

Name: TMP_76 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:TMP_76(iPOOLS), function:getBaseAmount, arguments:['token_1']  
Function name: getRewardShare
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_77
hlc contract name: POOLS func_name: getBaseAmount
('c', [-1], [-1], 0, None)
token
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_77

Name: TMP_77 Function: getRewardShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_5(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_27(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_baseAmount_1(uint256) := TMP_77(uint256)
Function name: getRewardShare
asgn

Name: TMP_77 Function: getRewardShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _baseAmount Function: getRewardShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _baseAmount

Name: _baseAmount Function: getRewardShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
TMP_78 = CONVERT POOLS_27 to iPOOLS
Function name: getRewardShare

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_78 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_78

Name: TMP_78 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_79(bool) = HIGH_LEVEL_CALL, dest:TMP_78(iPOOLS), function:isAsset, arguments:['token_1']  
Function name: getRewardShare
High Call: isAsset
func name:isAsset
other func name:isAsset
TMP_79
[i]Type for TMP_79

Name: TMP_79 Function: getRewardShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_6(address) := ϕ(['ROUTER_5', 'ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_28(address) := ϕ(['POOLS_9', 'POOLS_27', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
CONDITION TMP_79
Condition...
Conidtion: 
TMP_79
TMP_79
typecheckig node...
TMP_86 = CONVERT POOLS_28 to iPOOLS
Function name: getRewardShare

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_86 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_86

Name: TMP_86 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_87(bool) = HIGH_LEVEL_CALL, dest:TMP_86(iPOOLS), function:isAnchor, arguments:['token_1']  
Function name: getRewardShare
High Call: isAnchor
func name:isAnchor
other func name:isAnchor
TMP_87
[i]Type for TMP_87

Name: TMP_87 Function: getRewardShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_10(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_32(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
CONDITION TMP_87
Condition...
Conidtion: 
TMP_87
TMP_87
typecheckig node...
TMP_88 = CONVERT POOLS_32 to iPOOLS
Function name: getRewardShare

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_88 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_88

Name: TMP_88 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_89(uint256) = HIGH_LEVEL_CALL, dest:TMP_88(iPOOLS), function:pooledVADER, arguments:[]  
Function name: getRewardShare
High Call: pooledVADER
func name:pooledVADER
other func name:pooledVADER
TMP_89
hlc contract name: POOLS func_name: pooledVADER
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_89

Name: TMP_89 Function: getRewardShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_11(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_33(address) := ϕ(['POOLS_45', 'POOLS_26', 'POOLS_54', 'POOLS_31', 'POOLS_10', 'POOLS_9', 'POOLS_19', 'POOLS_32', 'POOLS_11', 'POOLS_21', 'POOLS_6', 'POOLS_17', 'POOLS_47', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_35', 'POOLS_1'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_90 = CONVERT ROUTER_11 to iROUTER
Function name: getRewardShare

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_90 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_90

Name: TMP_90 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_91(uint256) = HIGH_LEVEL_CALL, dest:TMP_90(iROUTER), function:reserveVADER, arguments:[]  
Function name: getRewardShare
High Call: reserveVADER
func name:reserveVADER
other func name:reserveVADER
TMP_91
hlc contract name: ROUTER func_name: reserveVADER
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_91

Name: TMP_91 Function: getRewardShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_12(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_11', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_34(address) := ϕ(['POOLS_9', 'POOLS_33', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_92(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_baseAmount_1,TMP_89,TMP_91)
Function name: getRewardShare
Internal call...
calcShare
_baseAmount
TMP_89
TMP_91
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
False
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_19 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_20 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_92

Name: TMP_92 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_share_scope_0_1(uint256) := TMP_92(uint256)
Function name: getRewardShare
asgn

Name: TMP_92 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _share_scope_0 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _share_scope_0

Name: _share_scope_0 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_share_scope_0_1(uint256) := TMP_92(uint256)
XXXXX
typecheckig node...
TMP_80 = CONVERT POOLS_28 to iPOOLS
Function name: getRewardShare

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_80 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_80

Name: TMP_80 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_81(uint256) = HIGH_LEVEL_CALL, dest:TMP_80(iPOOLS), function:pooledUSDV, arguments:[]  
Function name: getRewardShare
High Call: pooledUSDV
func name:pooledUSDV
other func name:pooledUSDV
TMP_81
hlc contract name: POOLS func_name: pooledUSDV
('c', [2], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_81

Name: TMP_81 Function: getRewardShare
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_7(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_6', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_29(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_28', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_82 = CONVERT ROUTER_7 to iROUTER
Function name: getRewardShare

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_82 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_82

Name: TMP_82 Function: getRewardShare
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_83(uint256) = HIGH_LEVEL_CALL, dest:TMP_82(iROUTER), function:reserveUSDV, arguments:[]  
Function name: getRewardShare
High Call: reserveUSDV
func name:reserveUSDV
other func name:reserveUSDV
TMP_83
hlc contract name: ROUTER func_name: reserveUSDV
('c', [2], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_83

Name: TMP_83 Function: getRewardShare
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_8(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_7', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getRewardShare
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_30(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_29', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getRewardShare
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_84(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_baseAmount_1,TMP_81,TMP_83)
Function name: getRewardShare
Internal call...
calcShare
_baseAmount
TMP_81
TMP_83
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
False
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_22 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_23 Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_84

Name: TMP_84 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_share_1(uint256) := TMP_84(uint256)
Function name: getRewardShare
asgn

Name: TMP_84 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _share Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _share

Name: _share Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_share_1(uint256) := TMP_84(uint256)
XXXXX
typecheckig node...
TMP_93(uint256) = INTERNAL_CALL, Utils.getReducedShare(uint256,uint256)(_share_scope_0_1,rewardReductionFactor_1)
Function name: getRewardShare
Internal call...
getReducedShare
_share_scope_0
rewardReductionFactor
Function: getReducedShare
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[], [], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[], [], 'u', None, [], -1]
[[-1], [-1], 0, None, [], -1]
0

Name: PIC_18 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_93 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_93

Name: TMP_93 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rewardShare_2(uint256) := TMP_93(uint256)
Function name: getRewardShare
asgn

Name: TMP_93 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: rewardShare Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for rewardShare

Name: rewardShare Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
rewardShare_2(uint256) := TMP_93(uint256)
XXXXX
typecheckig node...
typecheckig node...
typecheckig node...
TMP_85(uint256) = INTERNAL_CALL, Utils.getReducedShare(uint256,uint256)(_share_1,rewardReductionFactor_1)
Function name: getRewardShare
Internal call...
getReducedShare
_share
rewardReductionFactor
Function: getReducedShare
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[], [], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[], [], 'u', None, [], -1]
[[-1], [-1], 0, None, [], -1]
0

Name: PIC_18 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_85 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_85

Name: TMP_85 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rewardShare_1(uint256) := TMP_85(uint256)
Function name: getRewardShare
asgn

Name: TMP_85 Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: rewardShare Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for rewardShare

Name: rewardShare Function: getRewardShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
rewardShare_1(uint256) := TMP_85(uint256)
XXXXX
WORKLIST iteration 1 for function call "getRewardShare":
 New undefined nodes- 4
 Old undefined nodes- 4
Saving return values for: getRewardShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getReducedShare
Function getReducedShare not marked
Mark Iterations TRUE, proceeding anyway
Function name: getReducedShare
Function Visibility (test): public
amount
Finding type for amount...
uint256
rewardReductionFactor
Finding type for rewardReductionFactor...
uint256
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
amount_1(uint256) := ϕ(['_share_1', '_share_scope_0_1'])
has variable
[i] amount cleared
clearing ir...?
rewardReductionFactor_1(uint256) := ϕ(['rewardReductionFactor_1'])
has variable
[i] rewardReductionFactor cleared
typecheckig node...
amount_1(uint256) := ϕ(['_share_1', '_share_scope_0_1'])
Function name: getReducedShare
Phi
[i]Type for amount

Name: amount Function: getReducedShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rewardReductionFactor_1(uint256) := ϕ(['rewardReductionFactor_1'])
Function name: getReducedShare
Phi
[i]Type for rewardReductionFactor

Name: rewardReductionFactor Function: getReducedShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_94(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(1,rewardReductionFactor_1,amount_1)
has variable
[i] TMP_94 cleared
clearing ir...?
RETURN TMP_94
typecheckig node...
TMP_94(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(1,rewardReductionFactor_1,amount_1)
Function name: getReducedShare
Internal call...
calcShare
1
rewardReductionFactor
amount
Function: calcShare
ic
[i]Type for TMP_94

Name: TMP_94 Function: getReducedShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_94
RETURN

Name: TMP_94 Function: getReducedShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getReducedShare":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getProtection
Function name: getProtection
Function Visibility (test): public
member
Finding type for member...
address
Check copy_toekn_tuple
(-2, -1, 0, None)
----
Type: address
address
Final Type: address

Name: member Function: getProtection
Num: -2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
token
Finding type for token...
address
Check copy_toekn_tuple
(-2, -1, 0, None)
----
Type: address
address
Final Type: address

Name: token Function: getProtection
Num: -2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
basisPoints
Finding type for basisPoints...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: basisPoints Function: getProtection
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
timeForFullProtection
Finding type for timeForFullProtection...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: timeForFullProtection Function: getProtection
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
ROUTER_14(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
has variable
typecheckig node...
ROUTER_14(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
Function name: getProtection
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_95(uint256) = INTERNAL_CALL, Utils.getCoverage(address,address)(member_1,token_1)
has variable
[i] TMP_95 cleared
clearing ir...?
ROUTER_15(address) := ϕ(['ROUTER_20'])
has variable
clearing ir...?
_coverage_1(uint256) := TMP_95(uint256)
has variable
[i] _coverage cleared
typecheckig node...
TMP_95(uint256) = INTERNAL_CALL, Utils.getCoverage(address,address)(member_1,token_1)
Function name: getProtection
Internal call...
getCoverage
member
token
Function: getCoverage
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-2], [-1], 0, None, [], -1]
[[-2], [-1], 0, None, [], -1]
added
xyz
Function name: getCoverage
Function Visibility: public
clearning node...
clearing ir...?
member_1(address) := ϕ(['member_1'])
has variable
[i] member cleared
clearing ir...?
token_1(address) := ϕ(['token_1'])
has variable
[i] token cleared
clearing ir...?
ROUTER_18(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_36(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
typecheckig node...
member_1(address) := ϕ(['member_1'])
Function name: getCoverage
Phi
[i]Type for member

Name: member Function: getCoverage
Num: -2
Den: -1
Norm: u
LF: member
Fields: 
Finance Type: undef
done.
token_1(address) := ϕ(['token_1'])
Function name: getCoverage
Phi
[i]Type for token

Name: token Function: getCoverage
Num: -2
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
ROUTER_18(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
Function name: getCoverage
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_36(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_104 = CONVERT ROUTER_18 to iROUTER
has variable
[i] TMP_104 cleared
clearing ir...?
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:TMP_104(iROUTER), function:getMemberBaseDeposit, arguments:['member_1', 'token_1']  
has variable
[i] TMP_105 cleared
clearing ir...?
ROUTER_19(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_18', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_37(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_36'])
has variable
clearing ir...?
_B0_1(uint256) := TMP_105(uint256)
has variable
[i] _B0 cleared
typecheckig node...
TMP_104 = CONVERT ROUTER_18 to iROUTER
Function name: getCoverage

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_104 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_104

Name: TMP_104 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:TMP_104(iROUTER), function:getMemberBaseDeposit, arguments:['member_1', 'token_1']  
Function name: getCoverage
High Call: getMemberBaseDeposit
func name:getMemberBaseDeposit
other func name:getMemberBaseDeposit
TMP_105
hlc contract name: ROUTER func_name: getMemberBaseDeposit
('c', [2], [-1], 0, None)
member
token
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_105

Name: TMP_105 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_19(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_18', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getCoverage
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_37(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_36'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_B0_1(uint256) := TMP_105(uint256)
Function name: getCoverage
asgn

Name: TMP_105 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _B0 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _B0

Name: _B0 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_106 = CONVERT ROUTER_19 to iROUTER
has variable
[i] TMP_106 cleared
clearing ir...?
TMP_107(uint256) = HIGH_LEVEL_CALL, dest:TMP_106(iROUTER), function:getMemberTokenDeposit, arguments:['member_1', 'token_1']  
has variable
[i] TMP_107 cleared
clearing ir...?
ROUTER_20(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_19', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_38(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_37', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_T0_1(uint256) := TMP_107(uint256)
has variable
[i] _T0 cleared
typecheckig node...
TMP_106 = CONVERT ROUTER_19 to iROUTER
Function name: getCoverage

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_106 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_106

Name: TMP_106 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_107(uint256) = HIGH_LEVEL_CALL, dest:TMP_106(iROUTER), function:getMemberTokenDeposit, arguments:['member_1', 'token_1']  
Function name: getCoverage
High Call: getMemberTokenDeposit
func name:getMemberTokenDeposit
other func name:getMemberTokenDeposit
TMP_107
hlc contract name: ROUTER func_name: getMemberTokenDeposit
('c', [2], [-1], 0, None)
member
token
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_107

Name: TMP_107 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_20(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_19', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getCoverage
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_38(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_37', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_T0_1(uint256) := TMP_107(uint256)
Function name: getCoverage
asgn

Name: TMP_107 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _T0 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _T0

Name: _T0 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_108 = CONVERT POOLS_38 to iPOOLS
has variable
[i] TMP_108 cleared
clearing ir...?
TMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_108(iPOOLS), function:getMemberUnits, arguments:['token_1', 'member_1']  
has variable
[i] TMP_109 cleared
clearing ir...?
POOLS_39(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_38', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_units_1(uint256) := TMP_109(uint256)
has variable
[i] _units cleared
typecheckig node...
TMP_108 = CONVERT POOLS_38 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_108 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_108

Name: TMP_108 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_108(iPOOLS), function:getMemberUnits, arguments:['token_1', 'member_1']  
Function name: getCoverage
High Call: getMemberUnits
func name:getMemberUnits
other func name:getMemberUnits
TMP_109
hlc contract name: POOLS func_name: getMemberUnits
('c', [-1], [-1], 0, None)
token
member
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_109

Name: TMP_109 Function: getCoverage
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_39(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_38', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_units_1(uint256) := TMP_109(uint256)
Function name: getCoverage
asgn

Name: TMP_109 Function: getCoverage
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _units Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _units

Name: _units Function: getCoverage
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_110 = CONVERT POOLS_39 to iPOOLS
has variable
[i] TMP_110 cleared
clearing ir...?
TMP_111(uint256) = HIGH_LEVEL_CALL, dest:TMP_110(iPOOLS), function:getUnits, arguments:['token_1']  
has variable
[i] TMP_111 cleared
clearing ir...?
POOLS_40(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_39', 'POOLS_15'])
has variable
clearing ir...?
TMP_112 = CONVERT POOLS_40 to iPOOLS
has variable
[i] TMP_112 cleared
clearing ir...?
TMP_113(uint256) = HIGH_LEVEL_CALL, dest:TMP_112(iPOOLS), function:getBaseAmount, arguments:['token_1']  
has variable
[i] TMP_113 cleared
clearing ir...?
POOLS_41(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_40', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_114(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_111,TMP_113)
has variable
[i] TMP_114 cleared
clearing ir...?
_B1_1(uint256) := TMP_114(uint256)
has variable
[i] _B1 cleared
typecheckig node...
TMP_110 = CONVERT POOLS_39 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_110 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_110

Name: TMP_110 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_111(uint256) = HIGH_LEVEL_CALL, dest:TMP_110(iPOOLS), function:getUnits, arguments:['token_1']  
Function name: getCoverage
High Call: getUnits
func name:getUnits
other func name:getUnits
TMP_111
hlc contract name: POOLS func_name: getUnits
('c', [1], [-1], 0, None)
token
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_111

Name: TMP_111 Function: getCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_40(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_39', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_112 = CONVERT POOLS_40 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_112 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_112

Name: TMP_112 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_113(uint256) = HIGH_LEVEL_CALL, dest:TMP_112(iPOOLS), function:getBaseAmount, arguments:['token_1']  
Function name: getCoverage
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_113
hlc contract name: POOLS func_name: getBaseAmount
('c', [-1], [-1], 0, None)
token
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_113

Name: TMP_113 Function: getCoverage
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_41(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_40', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_114(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_111,TMP_113)
Function name: getCoverage
Internal call...
calcShare
_units
TMP_111
TMP_113
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
False
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_26 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_114

Name: TMP_114 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_B1_1(uint256) := TMP_114(uint256)
Function name: getCoverage
asgn

Name: TMP_114 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _B1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _B1

Name: _B1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_B1_1(uint256) := TMP_114(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_115 = CONVERT POOLS_42 to iPOOLS
has variable
[i] TMP_115 cleared
clearing ir...?
TMP_116(uint256) = HIGH_LEVEL_CALL, dest:TMP_115(iPOOLS), function:getUnits, arguments:['token_1']  
has variable
[i] TMP_116 cleared
clearing ir...?
POOLS_43(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_42', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_117 = CONVERT POOLS_43 to iPOOLS
has variable
[i] TMP_117 cleared
clearing ir...?
TMP_118(uint256) = HIGH_LEVEL_CALL, dest:TMP_117(iPOOLS), function:getTokenAmount, arguments:['token_1']  
has variable
[i] TMP_118 cleared
clearing ir...?
POOLS_44(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_43', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_119(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_116,TMP_118)
has variable
[i] TMP_119 cleared
clearing ir...?
_T1_1(uint256) := TMP_119(uint256)
has variable
[i] _T1 cleared
typecheckig node...
TMP_115 = CONVERT POOLS_42 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_115 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_115

Name: TMP_115 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_116(uint256) = HIGH_LEVEL_CALL, dest:TMP_115(iPOOLS), function:getUnits, arguments:['token_1']  
Function name: getCoverage
High Call: getUnits
func name:getUnits
other func name:getUnits
TMP_116
hlc contract name: POOLS func_name: getUnits
('c', [1], [-1], 0, None)
token
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_116

Name: TMP_116 Function: getCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_43(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_42', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_117 = CONVERT POOLS_43 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_117 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_117

Name: TMP_117 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_118(uint256) = HIGH_LEVEL_CALL, dest:TMP_117(iPOOLS), function:getTokenAmount, arguments:['token_1']  
Function name: getCoverage
High Call: getTokenAmount
func name:getTokenAmount
other func name:getTokenAmount
TMP_118
hlc contract name: POOLS func_name: getTokenAmount
('c', [1], [-1], 0, None)
token
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_118

Name: TMP_118 Function: getCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_44(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_43', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_119(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_116,TMP_118)
Function name: getCoverage
Internal call...
calcShare
_units
TMP_116
TMP_118
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
False
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_28 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_29 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_119

Name: TMP_119 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_T1_1(uint256) := TMP_119(uint256)
Function name: getCoverage
asgn

Name: TMP_119 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _T1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _T1

Name: _T1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_T1_1(uint256) := TMP_119(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_120(uint256) = INTERNAL_CALL, Utils.calcCoverage(uint256,uint256,uint256,uint256)(_B0_1,_T0_1,_B1_1,_T1_1)
has variable
[i] TMP_120 cleared
clearing ir...?
RETURN TMP_120
typecheckig node...
TMP_120(uint256) = INTERNAL_CALL, Utils.calcCoverage(uint256,uint256,uint256,uint256)(_B0_1,_T0_1,_B1_1,_T1_1)
Function name: getCoverage
Internal call...
calcCoverage
_B0
_T0
_B1
_T1
Function: calcCoverage
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[2], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
[[], [], 'u', None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: calcCoverage
Function Visibility: public
clearning node...
clearing ir...?
B0_1(uint256) := ϕ(['_B0_1'])
has variable
[i] B0 cleared
clearing ir...?
T0_1(uint256) := ϕ(['_T0_1'])
has variable
[i] T0 cleared
clearing ir...?
B1_1(uint256) := ϕ(['_B1_1'])
has variable
[i] B1 cleared
clearing ir...?
T1_1(uint256) := ϕ(['_T1_1'])
has variable
[i] T1 cleared
typecheckig node...
B0_1(uint256) := ϕ(['_B0_1'])
Function name: calcCoverage
Phi
[i]Type for B0

Name: B0 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
T0_1(uint256) := ϕ(['_T0_1'])
Function name: calcCoverage
Phi
[i]Type for T0

Name: T0 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
B1_1(uint256) := ϕ(['_B1_1'])
Function name: calcCoverage
Phi
[i]Type for B1

Name: B1 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
T1_1(uint256) := ϕ(['_T1_1'])
Function name: calcCoverage
Phi
[i]Type for T1

Name: T1 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_227(bool) = B0_1 > 0
has variable
[i] TMP_227 cleared
clearing ir...?
TMP_228(bool) = T1_1 > 0
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(bool) = TMP_227 && TMP_228
has variable
[i] TMP_229 cleared
clearing ir...?
CONDITION TMP_229
typecheckig node...
TMP_227(bool) = B0_1 > 0
Function name: calcCoverage
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_227

Name: TMP_227 Function: calcCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_228(bool) = T1_1 > 0
Function name: calcCoverage
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_228 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_228

Name: TMP_228 Function: calcCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_228(bool) = T1_1 > 0
XXXXX
TMP_229(bool) = TMP_227 && TMP_228
Function name: calcCoverage
[i]Type for TMP_229

Name: TMP_229 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_229
Condition...
Conidtion: 
TMP_229
TMP_229
clearning node...
clearing ir...?
TMP_230(uint256) = T0_1 (c)* B1_1
has variable
[i] TMP_230 cleared
clearing ir...?
TMP_231(uint256) = TMP_230 (c)/ T1_1
has variable
[i] TMP_231 cleared
clearing ir...?
TMP_232(uint256) = B0_1 (c)+ TMP_231
has variable
[i] TMP_232 cleared
clearing ir...?
_depositValue_1(uint256) := TMP_232(uint256)
has variable
[i] _depositValue cleared
typecheckig node...
TMP_230(uint256) = T0_1 (c)* B1_1
Function name: calcCoverage
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: T0 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_230 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_230

Name: TMP_230 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_230(uint256) = T0_1 (c)* B1_1
XXXXX
TMP_231(uint256) = TMP_230 (c)/ T1_1
Function name: calcCoverage
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_231 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_230 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_231 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_231

Name: TMP_231 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_231(uint256) = TMP_230 (c)/ T1_1
XXXXX
TMP_232(uint256) = B0_1 (c)+ TMP_231
Function name: calcCoverage

Name: TMP_232 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: B0 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_232 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_232

Name: TMP_232 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_depositValue_1(uint256) := TMP_232(uint256)
Function name: calcCoverage
asgn

Name: TMP_232 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _depositValue Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _depositValue

Name: _depositValue Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_233(uint256) = T1_1 (c)* B1_1
has variable
[i] TMP_233 cleared
clearing ir...?
TMP_234(uint256) = TMP_233 (c)/ T1_1
has variable
[i] TMP_234 cleared
clearing ir...?
TMP_235(uint256) = B1_1 (c)+ TMP_234
has variable
[i] TMP_235 cleared
clearing ir...?
_redemptionValue_1(uint256) := TMP_235(uint256)
has variable
[i] _redemptionValue cleared
typecheckig node...
TMP_233(uint256) = T1_1 (c)* B1_1
Function name: calcCoverage
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: B1 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_233 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_233

Name: TMP_233 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_233(uint256) = T1_1 (c)* B1_1
XXXXX
TMP_234(uint256) = TMP_233 (c)/ T1_1
Function name: calcCoverage
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_234 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_234

Name: TMP_234 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_234(uint256) = TMP_233 (c)/ T1_1
XXXXX
TMP_235(uint256) = B1_1 (c)+ TMP_234
Function name: calcCoverage

Name: TMP_235 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_234 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_235 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_235

Name: TMP_235 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_235(uint256) = B1_1 (c)+ TMP_234
XXXXX
_redemptionValue_1(uint256) := TMP_235(uint256)
Function name: calcCoverage
asgn

Name: TMP_235 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _redemptionValue Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _redemptionValue

Name: _redemptionValue Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_redemptionValue_1(uint256) := TMP_235(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_236(bool) = _redemptionValue_1 <= _depositValue_1
has variable
[i] TMP_236 cleared
clearing ir...?
CONDITION TMP_236
typecheckig node...
TMP_236(bool) = _redemptionValue_1 <= _depositValue_1
Function name: calcCoverage
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _depositValue Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_236 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_236

Name: TMP_236 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_236(bool) = _redemptionValue_1 <= _depositValue_1
XXXXX
CONDITION TMP_236
Condition...
Conidtion: 
TMP_236
TMP_236
clearning node...
clearing ir...?
TMP_237(uint256) = _depositValue_1 (c)- _redemptionValue_1
has variable
[i] TMP_237 cleared
clearing ir...?
coverage_1(uint256) := TMP_237(uint256)
has variable
[i] coverage cleared
typecheckig node...
TMP_237(uint256) = _depositValue_1 (c)- _redemptionValue_1
Function name: calcCoverage
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _depositValue Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _redemptionValue Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _depositValue Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_237 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_237

Name: TMP_237 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_237(uint256) = _depositValue_1 (c)- _redemptionValue_1
XXXXX
coverage_1(uint256) := TMP_237(uint256)
Function name: calcCoverage
asgn

Name: TMP_237 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: coverage Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for coverage

Name: coverage Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "calcCoverage":
 New undefined nodes- 5
 Old undefined nodes- 0
typecheckig node...
B0_1(uint256) := ϕ(['_B0_1'])
Function name: calcCoverage
Phi
[i]Type for B0

Name: B0 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
T0_1(uint256) := ϕ(['_T0_1'])
Function name: calcCoverage
Phi
[i]Type for T0

Name: T0 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
B1_1(uint256) := ϕ(['_B1_1'])
Function name: calcCoverage
Phi
[i]Type for B1

Name: B1 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
T1_1(uint256) := ϕ(['_T1_1'])
Function name: calcCoverage
Phi
[i]Type for T1

Name: T1 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_227(bool) = B0_1 > 0
Function name: calcCoverage
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_227

Name: TMP_227 Function: calcCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_228(bool) = T1_1 > 0
Function name: calcCoverage
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_228 Function: calcCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_228

Name: TMP_228 Function: calcCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_228(bool) = T1_1 > 0
XXXXX
TMP_229(bool) = TMP_227 && TMP_228
Function name: calcCoverage
[i]Type for TMP_229

Name: TMP_229 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_229
Condition...
Conidtion: 
TMP_229
TMP_229
typecheckig node...
TMP_230(uint256) = T0_1 (c)* B1_1
Function name: calcCoverage
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: T0 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_230 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_230

Name: TMP_230 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_230(uint256) = T0_1 (c)* B1_1
XXXXX
TMP_231(uint256) = TMP_230 (c)/ T1_1
Function name: calcCoverage
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_231 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_230 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_231 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_231

Name: TMP_231 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_231(uint256) = TMP_230 (c)/ T1_1
XXXXX
TMP_232(uint256) = B0_1 (c)+ TMP_231
Function name: calcCoverage

Name: TMP_232 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: B0 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_232 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_232

Name: TMP_232 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_depositValue_1(uint256) := TMP_232(uint256)
Function name: calcCoverage
asgn

Name: TMP_232 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _depositValue Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _depositValue

Name: _depositValue Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
TMP_233(uint256) = T1_1 (c)* B1_1
Function name: calcCoverage
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: B1 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_233 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_233

Name: TMP_233 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_233(uint256) = T1_1 (c)* B1_1
XXXXX
TMP_234(uint256) = TMP_233 (c)/ T1_1
Function name: calcCoverage
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_234 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_234

Name: TMP_234 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_234(uint256) = TMP_233 (c)/ T1_1
XXXXX
TMP_235(uint256) = B1_1 (c)+ TMP_234
Function name: calcCoverage

Name: TMP_235 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_234 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_235 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_235

Name: TMP_235 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_235(uint256) = B1_1 (c)+ TMP_234
XXXXX
_redemptionValue_1(uint256) := TMP_235(uint256)
Function name: calcCoverage
asgn

Name: TMP_235 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _redemptionValue Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _redemptionValue

Name: _redemptionValue Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_redemptionValue_1(uint256) := TMP_235(uint256)
XXXXX
typecheckig node...
TMP_236(bool) = _redemptionValue_1 <= _depositValue_1
Function name: calcCoverage
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _depositValue Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_236 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_236

Name: TMP_236 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_236(bool) = _redemptionValue_1 <= _depositValue_1
XXXXX
CONDITION TMP_236
Condition...
Conidtion: 
TMP_236
TMP_236
typecheckig node...
TMP_237(uint256) = _depositValue_1 (c)- _redemptionValue_1
Function name: calcCoverage
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _depositValue Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _redemptionValue Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _depositValue Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_237 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_237

Name: TMP_237 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_237(uint256) = _depositValue_1 (c)- _redemptionValue_1
XXXXX
coverage_1(uint256) := TMP_237(uint256)
Function name: calcCoverage
asgn

Name: TMP_237 Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: coverage Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for coverage

Name: coverage Function: calcCoverage
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
WORKLIST iteration 1 for function call "calcCoverage":
 New undefined nodes- 5
 Old undefined nodes- 5
Saving return values for: calcCoverage

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_120

Name: TMP_120 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_120(uint256) = INTERNAL_CALL, Utils.calcCoverage(uint256,uint256,uint256,uint256)(_B0_1,_T0_1,_B1_1,_T1_1)
XXXXX
RETURN TMP_120
RETURN

Name: TMP_120 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getCoverage":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
member_1(address) := ϕ(['member_1'])
Function name: getCoverage
Phi
[i]Type for member

Name: member Function: getCoverage
Num: -2
Den: -1
Norm: u
LF: member
Fields: 
Finance Type: undef
done.
token_1(address) := ϕ(['token_1'])
Function name: getCoverage
Phi
[i]Type for token

Name: token Function: getCoverage
Num: -2
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
ROUTER_18(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
Function name: getCoverage
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_36(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_104 = CONVERT ROUTER_18 to iROUTER
Function name: getCoverage

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_104 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_104

Name: TMP_104 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:TMP_104(iROUTER), function:getMemberBaseDeposit, arguments:['member_1', 'token_1']  
Function name: getCoverage
High Call: getMemberBaseDeposit
func name:getMemberBaseDeposit
other func name:getMemberBaseDeposit
TMP_105
hlc contract name: ROUTER func_name: getMemberBaseDeposit
('c', [2], [-1], 0, None)
member
token
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_105

Name: TMP_105 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_19(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_18', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getCoverage
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_37(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_36'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_B0_1(uint256) := TMP_105(uint256)
Function name: getCoverage
asgn

Name: TMP_105 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _B0 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _B0

Name: _B0 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_106 = CONVERT ROUTER_19 to iROUTER
Function name: getCoverage

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_106 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_106

Name: TMP_106 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_107(uint256) = HIGH_LEVEL_CALL, dest:TMP_106(iROUTER), function:getMemberTokenDeposit, arguments:['member_1', 'token_1']  
Function name: getCoverage
High Call: getMemberTokenDeposit
func name:getMemberTokenDeposit
other func name:getMemberTokenDeposit
TMP_107
hlc contract name: ROUTER func_name: getMemberTokenDeposit
('c', [2], [-1], 0, None)
member
token
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_107

Name: TMP_107 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_20(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_19', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getCoverage
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_38(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_37', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_T0_1(uint256) := TMP_107(uint256)
Function name: getCoverage
asgn

Name: TMP_107 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _T0 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _T0

Name: _T0 Function: getCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_108 = CONVERT POOLS_38 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_108 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_108

Name: TMP_108 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_108(iPOOLS), function:getMemberUnits, arguments:['token_1', 'member_1']  
Function name: getCoverage
High Call: getMemberUnits
func name:getMemberUnits
other func name:getMemberUnits
TMP_109
hlc contract name: POOLS func_name: getMemberUnits
('c', [-1], [-1], 0, None)
token
member
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_109

Name: TMP_109 Function: getCoverage
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_39(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_38', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_units_1(uint256) := TMP_109(uint256)
Function name: getCoverage
asgn

Name: TMP_109 Function: getCoverage
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _units Function: getCoverage
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _units

Name: _units Function: getCoverage
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_110 = CONVERT POOLS_39 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_110 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_110

Name: TMP_110 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_111(uint256) = HIGH_LEVEL_CALL, dest:TMP_110(iPOOLS), function:getUnits, arguments:['token_1']  
Function name: getCoverage
High Call: getUnits
func name:getUnits
other func name:getUnits
TMP_111
hlc contract name: POOLS func_name: getUnits
('c', [1], [-1], 0, None)
token
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_111

Name: TMP_111 Function: getCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_40(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_39', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_112 = CONVERT POOLS_40 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_112 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_112

Name: TMP_112 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_113(uint256) = HIGH_LEVEL_CALL, dest:TMP_112(iPOOLS), function:getBaseAmount, arguments:['token_1']  
Function name: getCoverage
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_113
hlc contract name: POOLS func_name: getBaseAmount
('c', [-1], [-1], 0, None)
token
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_113

Name: TMP_113 Function: getCoverage
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_41(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_40', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_114(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_111,TMP_113)
Function name: getCoverage
Internal call...
calcShare
_units
TMP_111
TMP_113
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
False
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_32 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_114

Name: TMP_114 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_B1_1(uint256) := TMP_114(uint256)
Function name: getCoverage
asgn

Name: TMP_114 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _B1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _B1

Name: _B1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_B1_1(uint256) := TMP_114(uint256)
XXXXX
typecheckig node...
TMP_115 = CONVERT POOLS_42 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_115 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_115

Name: TMP_115 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_116(uint256) = HIGH_LEVEL_CALL, dest:TMP_115(iPOOLS), function:getUnits, arguments:['token_1']  
Function name: getCoverage
High Call: getUnits
func name:getUnits
other func name:getUnits
TMP_116
hlc contract name: POOLS func_name: getUnits
('c', [1], [-1], 0, None)
token
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_116

Name: TMP_116 Function: getCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_43(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_42', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_117 = CONVERT POOLS_43 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_117 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_117

Name: TMP_117 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_118(uint256) = HIGH_LEVEL_CALL, dest:TMP_117(iPOOLS), function:getTokenAmount, arguments:['token_1']  
Function name: getCoverage
High Call: getTokenAmount
func name:getTokenAmount
other func name:getTokenAmount
TMP_118
hlc contract name: POOLS func_name: getTokenAmount
('c', [1], [-1], 0, None)
token
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_118

Name: TMP_118 Function: getCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_44(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_43', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_119(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_116,TMP_118)
Function name: getCoverage
Internal call...
calcShare
_units
TMP_116
TMP_118
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
False
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_34 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_35 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_119

Name: TMP_119 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_T1_1(uint256) := TMP_119(uint256)
Function name: getCoverage
asgn

Name: TMP_119 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _T1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _T1

Name: _T1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_T1_1(uint256) := TMP_119(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_120(uint256) = INTERNAL_CALL, Utils.calcCoverage(uint256,uint256,uint256,uint256)(_B0_1,_T0_1,_B1_1,_T1_1)
has variable
[i] TMP_120 cleared
clearing ir...?
RETURN TMP_120
typecheckig node...
TMP_120(uint256) = INTERNAL_CALL, Utils.calcCoverage(uint256,uint256,uint256,uint256)(_B0_1,_T0_1,_B1_1,_T1_1)
Function name: getCoverage
Internal call...
calcCoverage
_B0
_T0
_B1
_T1
Function: calcCoverage
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[], [], 'u', None, [], -1]
cur_param: [[], [], 'u', None, [], -1]
Its the same:
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[2], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
[[], [], 'u', None, [], -1]
[[], [], 'u', None, [], -1]
0

Name: PIC_31 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_120 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_120

Name: TMP_120 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_120
RETURN

Name: TMP_120 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "getCoverage":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: getCoverage

Name: TMP_120 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_95

Name: TMP_95 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_95(uint256) = INTERNAL_CALL, Utils.getCoverage(address,address)(member_1,token_1)
XXXXX
ROUTER_15(address) := ϕ(['ROUTER_20'])
Function name: getProtection
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
_coverage_1(uint256) := TMP_95(uint256)
Function name: getProtection
asgn

Name: TMP_95 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _coverage Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _coverage

Name: _coverage Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_coverage_1(uint256) := TMP_95(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_96 = CONVERT ROUTER_15 to iROUTER
has variable
[i] TMP_96 cleared
clearing ir...?
TMP_97(bool) = HIGH_LEVEL_CALL, dest:TMP_96(iROUTER), function:isCurated, arguments:['token_1']  
has variable
[i] TMP_97 cleared
clearing ir...?
ROUTER_16(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_15', 'ROUTER_28'])
has variable
clearing ir...?
CONDITION TMP_97
typecheckig node...
TMP_96 = CONVERT ROUTER_15 to iROUTER
Function name: getProtection

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_96 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_96

Name: TMP_96 Function: getProtection
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_97(bool) = HIGH_LEVEL_CALL, dest:TMP_96(iROUTER), function:isCurated, arguments:['token_1']  
Function name: getProtection
High Call: isCurated
func name:isCurated
other func name:isCurated
TMP_97
[i]Type for TMP_97

Name: TMP_97 Function: getProtection
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_16(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_15', 'ROUTER_28'])
Function name: getProtection
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
CONDITION TMP_97
Condition...
Conidtion: 
TMP_97
TMP_97
clearning node...
clearing ir...?
TMP_98 = CONVERT ROUTER_16 to iROUTER
has variable
[i] TMP_98 cleared
clearing ir...?
TMP_99(uint256) = HIGH_LEVEL_CALL, dest:TMP_98(iROUTER), function:getMemberLastDeposit, arguments:['member_1', 'token_1']  
has variable
[i] TMP_99 cleared
clearing ir...?
ROUTER_17(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
TMP_100(uint256) = block.timestamp (c)- TMP_99
has variable
[i] TMP_100 cleared
clearing ir...?
_duration_1(uint256) := TMP_100(uint256)
has variable
[i] _duration cleared
typecheckig node...
TMP_98 = CONVERT ROUTER_16 to iROUTER
Function name: getProtection

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_98 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_98

Name: TMP_98 Function: getProtection
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_99(uint256) = HIGH_LEVEL_CALL, dest:TMP_98(iROUTER), function:getMemberLastDeposit, arguments:['member_1', 'token_1']  
Function name: getProtection
High Call: getMemberLastDeposit
func name:getMemberLastDeposit
other func name:getMemberLastDeposit
TMP_99
hlc contract name: ROUTER func_name: getMemberLastDeposit
('c', [2], [-1], 0, None)
member
token
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_99

Name: TMP_99 Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_17(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getProtection
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_100(uint256) = block.timestamp (c)- TMP_99
Function name: getProtection
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_38 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_99 Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_99 Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_100 Function: getProtection
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_100

Name: TMP_100 Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_duration_1(uint256) := TMP_100(uint256)
Function name: getProtection
asgn

Name: TMP_100 Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _duration Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _duration

Name: _duration Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_101(bool) = _duration_1 <= timeForFullProtection_1
has variable
[i] TMP_101 cleared
clearing ir...?
CONDITION TMP_101
typecheckig node...
TMP_101(bool) = _duration_1 <= timeForFullProtection_1
Function name: getProtection
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_101

Name: TMP_101 Function: getProtection
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_101
Condition...
Conidtion: 
TMP_101
TMP_101
clearning node...
typecheckig node...
clearning node...
clearing ir...?
protection_1(uint256) := _coverage_1(uint256)
has variable
[i] protection cleared
typecheckig node...
protection_1(uint256) := _coverage_1(uint256)
Function name: getProtection
asgn

Name: _coverage Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protection Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for protection

Name: protection Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
protection_1(uint256) := _coverage_1(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_103(uint256) = INTERNAL_CALL, Utils.calcPart(uint256,uint256)(basisPoints_1,protection_3)
has variable
[i] TMP_103 cleared
clearing ir...?
RETURN TMP_103
typecheckig node...
TMP_103(uint256) = INTERNAL_CALL, Utils.calcPart(uint256,uint256)(basisPoints_1,protection_3)
Function name: getProtection
Internal call...
calcPart
basisPoints
protection
Function: calcPart
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
cur_param: [[-1], [-1], 0, None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: calcPart
Function Visibility: public
clearning node...
clearing ir...?
bp_1(uint256) := ϕ(['TMP_58', 'basisPoints_1'])
has variable
[i] bp cleared
clearing ir...?
total_1(uint256) := ϕ(['targetPrice_1', 'protection_3'])
has variable
[i] total cleared
typecheckig node...
bp_1(uint256) := ϕ(['TMP_58', 'basisPoints_1'])
Function name: calcPart
Phi
[i]Type for bp

Name: bp Function: calcPart
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['targetPrice_1', 'protection_3'])
Function name: calcPart
Phi
[i]Type for total

Name: total Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(bool) = bp_1 <= 10000
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(bool) = bp_1 >= 0
has variable
[i] TMP_165 cleared
clearing ir...?
TMP_166(bool) = TMP_164 && TMP_165
has variable
[i] TMP_166 cleared
clearing ir...?
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,Must be correct BP)
typecheckig node...
TMP_164(bool) = bp_1 <= 10000
Function name: calcPart
testing lt...
val: 10000
4
val: 10000
4
lnorm: u rnorm: 4
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_164

Name: TMP_164 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(bool) = bp_1 >= 0
Function name: calcPart
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_165

Name: TMP_165 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = TMP_164 && TMP_165
Function name: calcPart
[i]Type for TMP_166

Name: TMP_166 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,Must be correct BP)
[i]Type for TMP_167

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
has variable
[i] TMP_168 cleared
clearing ir...?
RETURN TMP_168
typecheckig node...
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
Function name: calcPart
Internal call...
calcShare
bp
10000
total
Function: calcShare
ic
val: 10000
4
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 4, None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_171(uint256) = amount_1 (c)* part_3
XXXXX
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
typecheckig node...
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_171(uint256) = amount_1 (c)* part_3
XXXXX
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "calcShare":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_168

Name: TMP_168 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
XXXXX
RETURN TMP_168
RETURN

Name: TMP_168 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcPart":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcPart

Name: TMP_168 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_103

Name: TMP_103 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_103
RETURN

Name: TMP_103 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TMP_102(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_duration_1,timeForFullProtection_1,_coverage_1)
has variable
[i] TMP_102 cleared
clearing ir...?
protection_2(uint256) := TMP_102(uint256)
has variable
[i] protection cleared
typecheckig node...
TMP_102(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_duration_1,timeForFullProtection_1,_coverage_1)
Function name: getProtection
Internal call...
calcShare
_duration
timeForFullProtection
_coverage
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_171(uint256) = amount_1 (c)* part_3
XXXXX
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
typecheckig node...
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_171(uint256) = amount_1 (c)* part_3
XXXXX
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "calcShare":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_102

Name: TMP_102 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_102(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_duration_1,timeForFullProtection_1,_coverage_1)
XXXXX
protection_2(uint256) := TMP_102(uint256)
Function name: getProtection
asgn

Name: TMP_102 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protection Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for protection

Name: protection Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
protection_2(uint256) := TMP_102(uint256)
XXXXX
clearning node...
clearing ir...?
protection_3(uint256) := ϕ(['protection_2', 'protection_1'])
has variable
[i] protection cleared
typecheckig node...
protection_3(uint256) := ϕ(['protection_2', 'protection_1'])
Function name: getProtection
Phi
[i]Type for protection

Name: protection Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "getProtection":
 New undefined nodes- 3
 Old undefined nodes- 0
typecheckig node...
ROUTER_14(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
Function name: getProtection
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_95(uint256) = INTERNAL_CALL, Utils.getCoverage(address,address)(member_1,token_1)
Function name: getProtection
Internal call...
getCoverage
member
token
Function: getCoverage
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-2], [-1], 0, None, [], -1]
cur_param: [[-2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-2], [-1], 0, None, [], -1]
[[-2], [-1], 0, None, [], -1]
0

Name: PIC_37 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_95 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_95

Name: TMP_95 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_15(address) := ϕ(['ROUTER_20'])
Function name: getProtection
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
_coverage_1(uint256) := TMP_95(uint256)
Function name: getProtection
asgn

Name: TMP_95 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _coverage Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _coverage

Name: _coverage Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_coverage_1(uint256) := TMP_95(uint256)
XXXXX
typecheckig node...
TMP_96 = CONVERT ROUTER_15 to iROUTER
Function name: getProtection

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_96 Function: getProtection
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_96

Name: TMP_96 Function: getProtection
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_97(bool) = HIGH_LEVEL_CALL, dest:TMP_96(iROUTER), function:isCurated, arguments:['token_1']  
Function name: getProtection
High Call: isCurated
func name:isCurated
other func name:isCurated
TMP_97
[i]Type for TMP_97

Name: TMP_97 Function: getProtection
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_16(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_15', 'ROUTER_28'])
Function name: getProtection
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
CONDITION TMP_97
Condition...
Conidtion: 
TMP_97
TMP_97
typecheckig node...
TMP_98 = CONVERT ROUTER_16 to iROUTER
Function name: getProtection

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_98 Function: getProtection
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_98

Name: TMP_98 Function: getProtection
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_99(uint256) = HIGH_LEVEL_CALL, dest:TMP_98(iROUTER), function:getMemberLastDeposit, arguments:['member_1', 'token_1']  
Function name: getProtection
High Call: getMemberLastDeposit
func name:getMemberLastDeposit
other func name:getMemberLastDeposit
TMP_99
hlc contract name: ROUTER func_name: getMemberLastDeposit
('c', [2], [-1], 0, None)
member
token
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_99

Name: TMP_99 Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_17(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getProtection
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_100(uint256) = block.timestamp (c)- TMP_99
Function name: getProtection
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_42 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_99 Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_99 Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_100 Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_100

Name: TMP_100 Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_duration_1(uint256) := TMP_100(uint256)
Function name: getProtection
asgn

Name: TMP_100 Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _duration Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _duration

Name: _duration Function: getProtection
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_101(bool) = _duration_1 <= timeForFullProtection_1
Function name: getProtection
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_101

Name: TMP_101 Function: getProtection
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_101
Condition...
Conidtion: 
TMP_101
TMP_101
typecheckig node...
typecheckig node...
protection_1(uint256) := _coverage_1(uint256)
Function name: getProtection
asgn

Name: _coverage Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protection Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for protection

Name: protection Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
protection_1(uint256) := _coverage_1(uint256)
XXXXX
typecheckig node...
TMP_103(uint256) = INTERNAL_CALL, Utils.calcPart(uint256,uint256)(basisPoints_1,protection_3)
Function name: getProtection
Internal call...
calcPart
basisPoints
protection
Function: calcPart
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
cur_param: [[-1], [-1], 0, None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: calcPart
Function Visibility: public
clearning node...
clearing ir...?
bp_1(uint256) := ϕ(['TMP_58', 'basisPoints_1'])
has variable
[i] bp cleared
clearing ir...?
total_1(uint256) := ϕ(['targetPrice_1', 'protection_3'])
has variable
[i] total cleared
typecheckig node...
bp_1(uint256) := ϕ(['TMP_58', 'basisPoints_1'])
Function name: calcPart
Phi
[i]Type for bp

Name: bp Function: calcPart
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['targetPrice_1', 'protection_3'])
Function name: calcPart
Phi
[i]Type for total

Name: total Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(bool) = bp_1 <= 10000
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(bool) = bp_1 >= 0
has variable
[i] TMP_165 cleared
clearing ir...?
TMP_166(bool) = TMP_164 && TMP_165
has variable
[i] TMP_166 cleared
clearing ir...?
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,Must be correct BP)
typecheckig node...
TMP_164(bool) = bp_1 <= 10000
Function name: calcPart
testing lt...
val: 10000
4
val: 10000
4
lnorm: u rnorm: 4
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_164

Name: TMP_164 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(bool) = bp_1 >= 0
Function name: calcPart
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_165

Name: TMP_165 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = TMP_164 && TMP_165
Function name: calcPart
[i]Type for TMP_166

Name: TMP_166 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,Must be correct BP)
[i]Type for TMP_167

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
has variable
[i] TMP_168 cleared
clearing ir...?
RETURN TMP_168
typecheckig node...
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
Function name: calcPart
Internal call...
calcShare
bp
10000
total
Function: calcShare
ic
val: 10000
4
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 4, None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_171(uint256) = amount_1 (c)* part_3
XXXXX
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
typecheckig node...
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_171(uint256) = amount_1 (c)* part_3
XXXXX
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "calcShare":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_168

Name: TMP_168 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
XXXXX
RETURN TMP_168
RETURN

Name: TMP_168 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcPart":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcPart

Name: TMP_168 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_103

Name: TMP_103 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_103
RETURN

Name: TMP_103 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_102(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_duration_1,timeForFullProtection_1,_coverage_1)
Function name: getProtection
Internal call...
calcShare
_duration
timeForFullProtection
_coverage
Function: calcShare
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_171(uint256) = amount_1 (c)* part_3
XXXXX
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
typecheckig node...
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_171(uint256) = amount_1 (c)* part_3
XXXXX
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "calcShare":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_102

Name: TMP_102 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_102(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_duration_1,timeForFullProtection_1,_coverage_1)
XXXXX
protection_2(uint256) := TMP_102(uint256)
Function name: getProtection
asgn

Name: TMP_102 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protection Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for protection

Name: protection Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
protection_2(uint256) := TMP_102(uint256)
XXXXX
typecheckig node...
protection_3(uint256) := ϕ(['protection_2', 'protection_1'])
Function name: getProtection
Phi
[i]Type for protection

Name: protection Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "getProtection":
 New undefined nodes- 3
 Old undefined nodes- 3
Saving return values for: getProtection

Name: TMP_103 Function: getProtection
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getCoverage
Function getCoverage not marked
Mark Iterations TRUE, proceeding anyway
Function name: getCoverage
Function Visibility (test): public
member
Finding type for member...
address
[W] Initializing defined variable to constant
token
Finding type for token...
address
[W] Initializing defined variable to constant
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: member
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: token
    fields: []
    fintype: -1
clearning node...
clearing ir...?
member_1(address) := ϕ(['member_1'])
has variable
[i] member cleared
clearing ir...?
token_1(address) := ϕ(['token_1'])
has variable
[i] token cleared
clearing ir...?
ROUTER_18(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_36(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
typecheckig node...
member_1(address) := ϕ(['member_1'])
Function name: getCoverage
Phi
[i]Type for member

Name: member Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: member
Fields: 
Finance Type: undef
done.
token_1(address) := ϕ(['token_1'])
Function name: getCoverage
Phi
[i]Type for token

Name: token Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
ROUTER_18(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
Function name: getCoverage
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_36(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_104 = CONVERT ROUTER_18 to iROUTER
has variable
[i] TMP_104 cleared
clearing ir...?
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:TMP_104(iROUTER), function:getMemberBaseDeposit, arguments:['member_1', 'token_1']  
has variable
[i] TMP_105 cleared
clearing ir...?
ROUTER_19(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_18', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_37(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_36'])
has variable
clearing ir...?
_B0_1(uint256) := TMP_105(uint256)
has variable
[i] _B0 cleared
typecheckig node...
TMP_104 = CONVERT ROUTER_18 to iROUTER
Function name: getCoverage

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_104 Function: getCoverage
Num: 
Den: 
Norm: u
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_104

Name: TMP_104 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:TMP_104(iROUTER), function:getMemberBaseDeposit, arguments:['member_1', 'token_1']  
Function name: getCoverage
High Call: getMemberBaseDeposit
func name:getMemberBaseDeposit
other func name:getMemberBaseDeposit
TMP_105
[i]Type for TMP_105

Name: TMP_105 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_19(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_18', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getCoverage
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_37(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_36'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_B0_1(uint256) := TMP_105(uint256)
Function name: getCoverage
asgn

Name: TMP_105 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _B0 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _B0

Name: _B0 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_106 = CONVERT ROUTER_19 to iROUTER
has variable
[i] TMP_106 cleared
clearing ir...?
TMP_107(uint256) = HIGH_LEVEL_CALL, dest:TMP_106(iROUTER), function:getMemberTokenDeposit, arguments:['member_1', 'token_1']  
has variable
[i] TMP_107 cleared
clearing ir...?
ROUTER_20(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_19', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_38(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_37', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_T0_1(uint256) := TMP_107(uint256)
has variable
[i] _T0 cleared
typecheckig node...
TMP_106 = CONVERT ROUTER_19 to iROUTER
Function name: getCoverage

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_106 Function: getCoverage
Num: 
Den: 
Norm: u
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_106

Name: TMP_106 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_107(uint256) = HIGH_LEVEL_CALL, dest:TMP_106(iROUTER), function:getMemberTokenDeposit, arguments:['member_1', 'token_1']  
Function name: getCoverage
High Call: getMemberTokenDeposit
func name:getMemberTokenDeposit
other func name:getMemberTokenDeposit
TMP_107
[i]Type for TMP_107

Name: TMP_107 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_20(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_19', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getCoverage
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_38(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_37', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_T0_1(uint256) := TMP_107(uint256)
Function name: getCoverage
asgn

Name: TMP_107 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _T0 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _T0

Name: _T0 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_108 = CONVERT POOLS_38 to iPOOLS
has variable
[i] TMP_108 cleared
clearing ir...?
TMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_108(iPOOLS), function:getMemberUnits, arguments:['token_1', 'member_1']  
has variable
[i] TMP_109 cleared
clearing ir...?
POOLS_39(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_38', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_units_1(uint256) := TMP_109(uint256)
has variable
[i] _units cleared
typecheckig node...
TMP_108 = CONVERT POOLS_38 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_108 Function: getCoverage
Num: 
Den: 
Norm: u
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_108

Name: TMP_108 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_108(iPOOLS), function:getMemberUnits, arguments:['token_1', 'member_1']  
Function name: getCoverage
High Call: getMemberUnits
func name:getMemberUnits
other func name:getMemberUnits
TMP_109
[i]Type for TMP_109

Name: TMP_109 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_39(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_38', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_units_1(uint256) := TMP_109(uint256)
Function name: getCoverage
asgn

Name: TMP_109 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _units Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _units

Name: _units Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_110 = CONVERT POOLS_39 to iPOOLS
has variable
[i] TMP_110 cleared
clearing ir...?
TMP_111(uint256) = HIGH_LEVEL_CALL, dest:TMP_110(iPOOLS), function:getUnits, arguments:['token_1']  
has variable
[i] TMP_111 cleared
clearing ir...?
POOLS_40(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_39', 'POOLS_15'])
has variable
clearing ir...?
TMP_112 = CONVERT POOLS_40 to iPOOLS
has variable
[i] TMP_112 cleared
clearing ir...?
TMP_113(uint256) = HIGH_LEVEL_CALL, dest:TMP_112(iPOOLS), function:getBaseAmount, arguments:['token_1']  
has variable
[i] TMP_113 cleared
clearing ir...?
POOLS_41(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_40', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_114(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_111,TMP_113)
has variable
[i] TMP_114 cleared
clearing ir...?
_B1_1(uint256) := TMP_114(uint256)
has variable
[i] _B1 cleared
typecheckig node...
TMP_110 = CONVERT POOLS_39 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_110 Function: getCoverage
Num: 
Den: 
Norm: u
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_110

Name: TMP_110 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_111(uint256) = HIGH_LEVEL_CALL, dest:TMP_110(iPOOLS), function:getUnits, arguments:['token_1']  
Function name: getCoverage
High Call: getUnits
func name:getUnits
other func name:getUnits
TMP_111
[i]Type for TMP_111

Name: TMP_111 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_40(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_39', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_112 = CONVERT POOLS_40 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_112 Function: getCoverage
Num: 
Den: 
Norm: u
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_112

Name: TMP_112 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_113(uint256) = HIGH_LEVEL_CALL, dest:TMP_112(iPOOLS), function:getBaseAmount, arguments:['token_1']  
Function name: getCoverage
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_113
[i]Type for TMP_113

Name: TMP_113 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_41(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_40', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_114(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_111,TMP_113)
Function name: getCoverage
Internal call...
calcShare
_units
TMP_111
TMP_113
Function: calcShare
ic
[i]Type for TMP_114

Name: TMP_114 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_B1_1(uint256) := TMP_114(uint256)
Function name: getCoverage
asgn

Name: TMP_114 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _B1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _B1

Name: _B1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_B1_1(uint256) := TMP_114(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_115 = CONVERT POOLS_42 to iPOOLS
has variable
[i] TMP_115 cleared
clearing ir...?
TMP_116(uint256) = HIGH_LEVEL_CALL, dest:TMP_115(iPOOLS), function:getUnits, arguments:['token_1']  
has variable
[i] TMP_116 cleared
clearing ir...?
POOLS_43(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_42', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_117 = CONVERT POOLS_43 to iPOOLS
has variable
[i] TMP_117 cleared
clearing ir...?
TMP_118(uint256) = HIGH_LEVEL_CALL, dest:TMP_117(iPOOLS), function:getTokenAmount, arguments:['token_1']  
has variable
[i] TMP_118 cleared
clearing ir...?
POOLS_44(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_43', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_119(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_116,TMP_118)
has variable
[i] TMP_119 cleared
clearing ir...?
_T1_1(uint256) := TMP_119(uint256)
has variable
[i] _T1 cleared
typecheckig node...
TMP_115 = CONVERT POOLS_42 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_115 Function: getCoverage
Num: 
Den: 
Norm: u
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_115

Name: TMP_115 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_116(uint256) = HIGH_LEVEL_CALL, dest:TMP_115(iPOOLS), function:getUnits, arguments:['token_1']  
Function name: getCoverage
High Call: getUnits
func name:getUnits
other func name:getUnits
TMP_116
[i]Type for TMP_116

Name: TMP_116 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_43(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_42', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_117 = CONVERT POOLS_43 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_117 Function: getCoverage
Num: 
Den: 
Norm: u
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_117

Name: TMP_117 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_118(uint256) = HIGH_LEVEL_CALL, dest:TMP_117(iPOOLS), function:getTokenAmount, arguments:['token_1']  
Function name: getCoverage
High Call: getTokenAmount
func name:getTokenAmount
other func name:getTokenAmount
TMP_118
[i]Type for TMP_118

Name: TMP_118 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_44(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_43', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_119(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_116,TMP_118)
Function name: getCoverage
Internal call...
calcShare
_units
TMP_116
TMP_118
Function: calcShare
ic
[i]Type for TMP_119

Name: TMP_119 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_T1_1(uint256) := TMP_119(uint256)
Function name: getCoverage
asgn

Name: TMP_119 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _T1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _T1

Name: _T1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_T1_1(uint256) := TMP_119(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_120(uint256) = INTERNAL_CALL, Utils.calcCoverage(uint256,uint256,uint256,uint256)(_B0_1,_T0_1,_B1_1,_T1_1)
has variable
[i] TMP_120 cleared
clearing ir...?
RETURN TMP_120
typecheckig node...
TMP_120(uint256) = INTERNAL_CALL, Utils.calcCoverage(uint256,uint256,uint256,uint256)(_B0_1,_T0_1,_B1_1,_T1_1)
Function name: getCoverage
Internal call...
calcCoverage
_B0
_T0
_B1
_T1
Function: calcCoverage
ic
[i]Type for TMP_120

Name: TMP_120 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_120
RETURN

Name: TMP_120 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getCoverage":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
member_1(address) := ϕ(['member_1'])
Function name: getCoverage
Phi
[i]Type for member

Name: member Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: member
Fields: 
Finance Type: undef
done.
token_1(address) := ϕ(['token_1'])
Function name: getCoverage
Phi
[i]Type for token

Name: token Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
ROUTER_18(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
Function name: getCoverage
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_36(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_104 = CONVERT ROUTER_18 to iROUTER
Function name: getCoverage

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_104 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_104

Name: TMP_104 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:TMP_104(iROUTER), function:getMemberBaseDeposit, arguments:['member_1', 'token_1']  
Function name: getCoverage
High Call: getMemberBaseDeposit
func name:getMemberBaseDeposit
other func name:getMemberBaseDeposit
TMP_105
[i]Type for TMP_105

Name: TMP_105 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_19(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_18', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getCoverage
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_37(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15', 'POOLS_36'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_B0_1(uint256) := TMP_105(uint256)
Function name: getCoverage
asgn

Name: TMP_105 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _B0 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _B0

Name: _B0 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_106 = CONVERT ROUTER_19 to iROUTER
Function name: getCoverage

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_106 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_106

Name: TMP_106 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_107(uint256) = HIGH_LEVEL_CALL, dest:TMP_106(iROUTER), function:getMemberTokenDeposit, arguments:['member_1', 'token_1']  
Function name: getCoverage
High Call: getMemberTokenDeposit
func name:getMemberTokenDeposit
other func name:getMemberTokenDeposit
TMP_107
[i]Type for TMP_107

Name: TMP_107 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_20(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_19', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getCoverage
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_38(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_37', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_T0_1(uint256) := TMP_107(uint256)
Function name: getCoverage
asgn

Name: TMP_107 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _T0 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _T0

Name: _T0 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_108 = CONVERT POOLS_38 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_108 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_108

Name: TMP_108 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_108(iPOOLS), function:getMemberUnits, arguments:['token_1', 'member_1']  
Function name: getCoverage
High Call: getMemberUnits
func name:getMemberUnits
other func name:getMemberUnits
TMP_109
[i]Type for TMP_109

Name: TMP_109 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_39(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_38', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_units_1(uint256) := TMP_109(uint256)
Function name: getCoverage
asgn

Name: TMP_109 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _units Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _units

Name: _units Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_110 = CONVERT POOLS_39 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_110 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_110

Name: TMP_110 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_111(uint256) = HIGH_LEVEL_CALL, dest:TMP_110(iPOOLS), function:getUnits, arguments:['token_1']  
Function name: getCoverage
High Call: getUnits
func name:getUnits
other func name:getUnits
TMP_111
[i]Type for TMP_111

Name: TMP_111 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_40(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_39', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_112 = CONVERT POOLS_40 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_112 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_112

Name: TMP_112 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_113(uint256) = HIGH_LEVEL_CALL, dest:TMP_112(iPOOLS), function:getBaseAmount, arguments:['token_1']  
Function name: getCoverage
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_113
[i]Type for TMP_113

Name: TMP_113 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_41(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_40', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_114(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_111,TMP_113)
Function name: getCoverage
Internal call...
calcShare
_units
TMP_111
TMP_113
Function: calcShare
ic
[i]Type for TMP_114

Name: TMP_114 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_B1_1(uint256) := TMP_114(uint256)
Function name: getCoverage
asgn

Name: TMP_114 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _B1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _B1

Name: _B1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_B1_1(uint256) := TMP_114(uint256)
XXXXX
typecheckig node...
TMP_115 = CONVERT POOLS_42 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_115 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_115

Name: TMP_115 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_116(uint256) = HIGH_LEVEL_CALL, dest:TMP_115(iPOOLS), function:getUnits, arguments:['token_1']  
Function name: getCoverage
High Call: getUnits
func name:getUnits
other func name:getUnits
TMP_116
[i]Type for TMP_116

Name: TMP_116 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_43(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_42', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_117 = CONVERT POOLS_43 to iPOOLS
Function name: getCoverage

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_117 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_117

Name: TMP_117 Function: getCoverage
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_118(uint256) = HIGH_LEVEL_CALL, dest:TMP_117(iPOOLS), function:getTokenAmount, arguments:['token_1']  
Function name: getCoverage
High Call: getTokenAmount
func name:getTokenAmount
other func name:getTokenAmount
TMP_118
[i]Type for TMP_118

Name: TMP_118 Function: getCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_44(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_43', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCoverage
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_119(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_units_1,TMP_116,TMP_118)
Function name: getCoverage
Internal call...
calcShare
_units
TMP_116
TMP_118
Function: calcShare
ic
[i]Type for TMP_119

Name: TMP_119 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_T1_1(uint256) := TMP_119(uint256)
Function name: getCoverage
asgn

Name: TMP_119 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _T1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _T1

Name: _T1 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_T1_1(uint256) := TMP_119(uint256)
XXXXX
typecheckig node...
TMP_120(uint256) = INTERNAL_CALL, Utils.calcCoverage(uint256,uint256,uint256,uint256)(_B0_1,_T0_1,_B1_1,_T1_1)
Function name: getCoverage
Internal call...
calcCoverage
_B0
_T0
_B1
_T1
Function: calcCoverage
ic
[i]Type for TMP_120

Name: TMP_120 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_120
RETURN

Name: TMP_120 Function: getCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "getCoverage":
 New undefined nodes- 2
 Old undefined nodes- 2
No save for this scenario
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getCollateralValueInBase
Function name: getCollateralValueInBase
Function Visibility (test): external
member
Finding type for member...
address
Check copy_toekn_tuple
(-2, -1, 0, None)
----
Type: address
address
Final Type: address

Name: member Function: getCollateralValueInBase
Num: -2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
collateral
Finding type for collateral...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: collateral Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
collateralAsset
Finding type for collateralAsset...
address
Check copy_toekn_tuple
(-2, -1, 0, 'collateralContract')
----
Type: address
address
Final Type: address

Name: collateralAsset Function: getCollateralValueInBase
Num: -2
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef
[*]Type fetched successfully
debtAsset
Finding type for debtAsset...
address
Check copy_toekn_tuple
(-2, -1, 0, 'debtContract')
----
Type: address
address
Final Type: address

Name: debtAsset Function: getCollateralValueInBase
Num: -2
Den: -1
Norm: 0
LF: debtContract
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-2]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 3
    num: [-2]
    den: [-1]
    norm: 0
    link: debtContract
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-2]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 3
    num: [-2]
    den: [-1]
    norm: 0
    link: debtContract
    fields: []
    fintype: -1
clearning node...
clearing ir...?
POOLS_46(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
FACTORY_2(address) := ϕ(['FACTORY_3', 'FACTORY_1', 'FACTORY_0', 'FACTORY_10', 'FACTORY_9'])
has variable
typecheckig node...
POOLS_46(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCollateralValueInBase
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
FACTORY_2(address) := ϕ(['FACTORY_3', 'FACTORY_1', 'FACTORY_0', 'FACTORY_10', 'FACTORY_9'])
Function name: getCollateralValueInBase
Phi
[i]Type for FACTORY

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_121(uint256) = collateral_1 (c)* 6666
has variable
[i] TMP_121 cleared
clearing ir...?
TMP_122(uint256) = TMP_121 (c)/ 10000
has variable
[i] TMP_122 cleared
clearing ir...?
_collateralAdjusted_1(uint256) := TMP_122(uint256)
has variable
[i] _collateralAdjusted cleared
typecheckig node...
TMP_121(uint256) = collateral_1 (c)* 6666
Function name: getCollateralValueInBase
testing mul...
val: 6666
val: 6666
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: collateral Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_121 Function: getCollateralValueInBase
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_121

Name: TMP_121 Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_122(uint256) = TMP_121 (c)/ 10000
Function name: getCollateralValueInBase
val: 10000
4
val: 10000
4
lnorm: 0 rnorm: 4
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_122 Function: getCollateralValueInBase
Num: 
Den: 
Norm: -4
LF: None
Fields: 
Finance Type: undef

Name: TMP_121 Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_122 Function: getCollateralValueInBase
Num: 
Den: 
Norm: -4
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_122

Name: TMP_122 Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: -4
LF: None
Fields: 
Finance Type: undef
done.
_collateralAdjusted_1(uint256) := TMP_122(uint256)
Function name: getCollateralValueInBase
asgn

Name: TMP_122 Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: -4
LF: None
Fields: 
Finance Type: undef

Name: _collateralAdjusted Function: getCollateralValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _collateralAdjusted

Name: _collateralAdjusted Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: -4
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_123(bool) = INTERNAL_CALL, Utils.isBase(address)(collateralAsset_1)
has variable
[i] TMP_123 cleared
clearing ir...?
CONDITION TMP_123
typecheckig node...
TMP_123(bool) = INTERNAL_CALL, Utils.isBase(address)(collateralAsset_1)
Function name: getCollateralValueInBase
Internal call...
isBase
collateralAsset
Function: isBase
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-2], [-1], 0, None, [], -1]
0

Name: PIC_2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_123 Function: getCollateralValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_123

Name: TMP_123 Function: getCollateralValueInBase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_123
Condition...
Conidtion: 
TMP_123
TMP_123
clearning node...
clearing ir...?
TMP_124(bool) = INTERNAL_CALL, Utils.isPool(address)(collateralAsset_1)
has variable
[i] TMP_124 cleared
clearing ir...?
POOLS_48(address) := ϕ(['POOLS_15'])
has variable
clearing ir...?
CONDITION TMP_124
typecheckig node...
TMP_124(bool) = INTERNAL_CALL, Utils.isPool(address)(collateralAsset_1)
Function name: getCollateralValueInBase
Internal call...
isPool
collateralAsset
Function: isPool
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-2], [-1], 0, None, [], -1]
0

Name: PIC_3 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_124 Function: getCollateralValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_124

Name: TMP_124 Function: getCollateralValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_48(address) := ϕ(['POOLS_15'])
Function name: getCollateralValueInBase
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
CONDITION TMP_124
Condition...
Conidtion: 
TMP_124
TMP_124
clearning node...
clearing ir...?
TMP_130 = CONVERT FACTORY_4 to iFACTORY
has variable
[i] TMP_130 cleared
clearing ir...?
TMP_131(bool) = HIGH_LEVEL_CALL, dest:TMP_130(iFACTORY), function:isSynth, arguments:['collateralAsset_1']  
has variable
[i] TMP_131 cleared
clearing ir...?
FACTORY_5(address) := ϕ(['FACTORY_4', 'FACTORY_3', 'FACTORY_1', 'FACTORY_10', 'FACTORY_9'])
has variable
clearing ir...?
CONDITION TMP_131
typecheckig node...
TMP_130 = CONVERT FACTORY_4 to iFACTORY
Function name: getCollateralValueInBase

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef

Name: TMP_130 Function: getCollateralValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_130

Name: TMP_130 Function: getCollateralValueInBase
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
TMP_131(bool) = HIGH_LEVEL_CALL, dest:TMP_130(iFACTORY), function:isSynth, arguments:['collateralAsset_1']  
Function name: getCollateralValueInBase
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_131
[i]Type for TMP_131

Name: TMP_131 Function: getCollateralValueInBase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
FACTORY_5(address) := ϕ(['FACTORY_4', 'FACTORY_3', 'FACTORY_1', 'FACTORY_10', 'FACTORY_9'])
Function name: getCollateralValueInBase
Phi
[i]Type for FACTORY

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
CONDITION TMP_131
Condition...
Conidtion: 
TMP_131
TMP_131
clearning node...
clearing ir...?
TMP_125 = CONVERT POOLS_48 to iPOOLS
has variable
[i] TMP_125 cleared
clearing ir...?
TMP_126(uint256) = HIGH_LEVEL_CALL, dest:TMP_125(iPOOLS), function:getMemberUnits, arguments:['collateralAsset_1', 'member_1']  
has variable
[i] TMP_126 cleared
clearing ir...?
POOLS_49(address) := ϕ(['POOLS_9', 'POOLS_48', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_127 = CONVERT POOLS_49 to iPOOLS
has variable
[i] TMP_127 cleared
clearing ir...?
TMP_128(uint256) = HIGH_LEVEL_CALL, dest:TMP_127(iPOOLS), function:getBaseAmount, arguments:['collateralAsset_1']  
has variable
[i] TMP_128 cleared
clearing ir...?
POOLS_50(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_49', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
TMP_129(uint256) = INTERNAL_CALL, Utils.calcAsymmetricShare(uint256,uint256,uint256)(_collateralAdjusted_1,TMP_126,TMP_128)
has variable
[i] TMP_129 cleared
clearing ir...?
baseValue_3(uint256) := TMP_129(uint256)
has variable
[i] baseValue cleared
typecheckig node...
TMP_125 = CONVERT POOLS_48 to iPOOLS
Function name: getCollateralValueInBase

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_125 Function: getCollateralValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_125

Name: TMP_125 Function: getCollateralValueInBase
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_126(uint256) = HIGH_LEVEL_CALL, dest:TMP_125(iPOOLS), function:getMemberUnits, arguments:['collateralAsset_1', 'member_1']  
Function name: getCollateralValueInBase
High Call: getMemberUnits
func name:getMemberUnits
other func name:getMemberUnits
TMP_126
hlc contract name: POOLS func_name: getMemberUnits
('c', [-1], [-1], 0, None)
collateralAsset
member
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_126

Name: TMP_126 Function: getCollateralValueInBase
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_49(address) := ϕ(['POOLS_9', 'POOLS_48', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCollateralValueInBase
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_127 = CONVERT POOLS_49 to iPOOLS
Function name: getCollateralValueInBase

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_127 Function: getCollateralValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_127

Name: TMP_127 Function: getCollateralValueInBase
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_128(uint256) = HIGH_LEVEL_CALL, dest:TMP_127(iPOOLS), function:getBaseAmount, arguments:['collateralAsset_1']  
Function name: getCollateralValueInBase
High Call: getBaseAmount
func name:getBaseAmount
other func name:getBaseAmount
TMP_128
hlc contract name: POOLS func_name: getBaseAmount
('c', [-1], [-1], 0, None)
collateralAsset
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_128

Name: TMP_128 Function: getCollateralValueInBase
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_50(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_49', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getCollateralValueInBase
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_129(uint256) = INTERNAL_CALL, Utils.calcAsymmetricShare(uint256,uint256,uint256)(_collateralAdjusted_1,TMP_126,TMP_128)
Function name: getCollateralValueInBase
Internal call...
calcAsymmetricShare
_collateralAdjusted
TMP_126
TMP_128
Function: calcAsymmetricShare
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: -4
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: -4
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[1], [-1], -4, None, [], -1]
[[-1], [-1], 0, None, [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: calcAsymmetricShare
Function Visibility: public
clearning node...
clearing ir...?
u_1(uint256) := ϕ(['_collateralAdjusted_1'])
has variable
[i] u cleared
clearing ir...?
U_1(uint256) := ϕ(['TMP_126'])
has variable
[i] U cleared
clearing ir...?
A_1(uint256) := ϕ(['TMP_128'])
has variable
[i] A cleared
typecheckig node...
u_1(uint256) := ϕ(['_collateralAdjusted_1'])
Function name: calcAsymmetricShare
Phi
[i]Type for u

Name: u Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
U_1(uint256) := ϕ(['TMP_126'])
Function name: calcAsymmetricShare
Phi
[i]Type for U

Name: U Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
A_1(uint256) := ϕ(['TMP_128'])
Function name: calcAsymmetricShare
Phi
[i]Type for A

Name: A Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_215(uint256) = u_1 (c)* A_1
has variable
[i] TMP_215 cleared
clearing ir...?
part1_1(uint256) := TMP_215(uint256)
has variable
[i] part1 cleared
typecheckig node...
TMP_215(uint256) = u_1 (c)* A_1
Function name: calcAsymmetricShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: u Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_215 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_215

Name: TMP_215 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
part1_1(uint256) := TMP_215(uint256)
Function name: calcAsymmetricShare
asgn

Name: TMP_215 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part1 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part1

Name: part1 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_216(uint256) = U_1 (c)* U_1
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(uint256) = TMP_216 (c)* 2
has variable
[i] TMP_217 cleared
clearing ir...?
part2_1(uint256) := TMP_217(uint256)
has variable
[i] part2 cleared
typecheckig node...
TMP_216(uint256) = U_1 (c)* U_1
Function name: calcAsymmetricShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: U Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_216 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_216

Name: TMP_216 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_217(uint256) = TMP_216 (c)* 2
Function name: calcAsymmetricShare
testing mul...
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_217 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_217

Name: TMP_217 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part2_1(uint256) := TMP_217(uint256)
Function name: calcAsymmetricShare
asgn

Name: TMP_217 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part2 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part2

Name: part2 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_218(uint256) = U_1 (c)* u_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(uint256) = TMP_218 (c)* 2
has variable
[i] TMP_219 cleared
clearing ir...?
part3_1(uint256) := TMP_219(uint256)
has variable
[i] part3 cleared
typecheckig node...
TMP_218(uint256) = U_1 (c)* u_1
Function name: calcAsymmetricShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: u Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_218 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_218

Name: TMP_218 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_219(uint256) = TMP_218 (c)* 2
Function name: calcAsymmetricShare
testing mul...
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_218 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_219 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_219

Name: TMP_219 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part3_1(uint256) := TMP_219(uint256)
Function name: calcAsymmetricShare
asgn

Name: TMP_219 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part3 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part3

Name: part3 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_220(uint256) = u_1 (c)* u_1
has variable
[i] TMP_220 cleared
clearing ir...?
part4_1(uint256) := TMP_220(uint256)
has variable
[i] part4 cleared
typecheckig node...
TMP_220(uint256) = u_1 (c)* u_1
Function name: calcAsymmetricShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_47 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_220 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_220

Name: TMP_220 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
part4_1(uint256) := TMP_220(uint256)
Function name: calcAsymmetricShare
asgn

Name: TMP_220 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part4 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part4

Name: part4 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_221(uint256) = part1_1 (c)* part2_1
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(uint256) = TMP_221 (c)- part3_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(uint256) = TMP_222 (c)+ part4_1
has variable
[i] TMP_223 cleared
clearing ir...?
numerator_1(uint256) := TMP_223(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_221(uint256) = part1_1 (c)* part2_1
Function name: calcAsymmetricShare
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part1 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_221 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_221

Name: TMP_221 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_222(uint256) = TMP_221 (c)- part3_1
Function name: calcAsymmetricShare
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_221 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part3 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_221 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_222 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_222

Name: TMP_222 Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_223(uint256) = TMP_222 (c)+ part4_1
Function name: calcAsymmetricShare

Name: TMP_223 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
Error with TMP_223 in function calcAsymmetricShare
Error with: TMP_223 in function calcAsymmetricShare
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f13719fc760>]
[i]Type for TMP_223

Name: TMP_223 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_223(uint256)
Function name: calcAsymmetricShare
asgn

Name: TMP_223 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_224(uint256) = U_1 (c)* U_1
has variable
[i] TMP_224 cleared
clearing ir...?
TMP_225(uint256) = TMP_224 (c)* U_1
has variable
[i] TMP_225 cleared
clearing ir...?
part5_1(uint256) := TMP_225(uint256)
has variable
[i] part5 cleared
typecheckig node...
TMP_224(uint256) = U_1 (c)* U_1
Function name: calcAsymmetricShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: U Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_224 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_224

Name: TMP_224 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_225(uint256) = TMP_224 (c)* U_1
Function name: calcAsymmetricShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: U Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_225 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_225

Name: TMP_225 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
part5_1(uint256) := TMP_225(uint256)
Function name: calcAsymmetricShare
asgn

Name: TMP_225 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part5 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part5

Name: part5 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_226(uint256) = numerator_1 (c)/ part5_1
has variable
[i] TMP_226 cleared
clearing ir...?
RETURN TMP_226
typecheckig node...
TMP_226(uint256) = numerator_1 (c)/ part5_1
Function name: calcAsymmetricShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_226 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_226

Name: TMP_226 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_226
RETURN

Name: TMP_226 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcAsymmetricShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcAsymmetricShare

Name: TMP_226 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_129

Name: TMP_129 Function: getCollateralValueInBase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
baseValue_3(uint256) := TMP_129(uint256)
Function name: getCollateralValueInBase
asgn

Name: TMP_129 Function: getCollateralValueInBase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: baseValue Function: getCollateralValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for baseValue

Name: baseValue Function: getCollateralValueInBase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
baseValue_5(uint256) := _collateralAdjusted_1(uint256)
has variable
[i] baseValue cleared
typecheckig node...
baseValue_5(uint256) := _collateralAdjusted_1(uint256)
Function name: getCollateralValueInBase
asgn

Name: _collateralAdjusted Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: -4
LF: None
Fields: 
Finance Type: undef

Name: baseValue Function: getCollateralValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for baseValue

Name: baseValue Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: -4
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
baseValue_2(uint256) := ϕ(['baseValue_0', 'baseValue_1'])
has variable
[i] baseValue cleared
typecheckig node...
baseValue_2(uint256) := ϕ(['baseValue_0', 'baseValue_1'])
Function name: getCollateralValueInBase
Phi
[i]Type for baseValue

Name: baseValue Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: -4
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
baseValue_4(uint256) := ϕ(['baseValue_0', 'baseValue_3'])
has variable
[i] baseValue cleared
typecheckig node...
baseValue_4(uint256) := ϕ(['baseValue_0', 'baseValue_3'])
Function name: getCollateralValueInBase
Phi
[i]Type for baseValue

Name: baseValue Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: -4
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_132 = CONVERT collateralAsset_1 to iSYNTH
has variable
[i] TMP_132 cleared
clearing ir...?
TMP_133(address) = HIGH_LEVEL_CALL, dest:TMP_132(iSYNTH), function:TOKEN, arguments:[]  
has variable
[i] TMP_133 cleared
clearing ir...?
TMP_134(uint256) = INTERNAL_CALL, Utils.calcSwapValueInBase(address,uint256)(TMP_133,_collateralAdjusted_1)
has variable
[i] TMP_134 cleared
clearing ir...?
baseValue_1(uint256) := TMP_134(uint256)
has variable
[i] baseValue cleared
typecheckig node...
TMP_132 = CONVERT collateralAsset_1 to iSYNTH
Function name: getCollateralValueInBase

Name: collateralAsset Function: getCollateralValueInBase
Num: -2
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef

Name: TMP_132 Function: getCollateralValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_132

Name: TMP_132 Function: getCollateralValueInBase
Num: -2
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef
done.
TMP_133(address) = HIGH_LEVEL_CALL, dest:TMP_132(iSYNTH), function:TOKEN, arguments:[]  
Function name: getCollateralValueInBase
High Call: TOKEN
func name:TOKEN
other func name:TOKEN
TMP_133
hlc contract name: collateralContract func_name: TOKEN
('c', [1], [-1], 0, 'collateralContract')
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, 'collateralContract', -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_133

Name: TMP_133 Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef
done.
TMP_134(uint256) = INTERNAL_CALL, Utils.calcSwapValueInBase(address,uint256)(TMP_133,_collateralAdjusted_1)
Function name: getCollateralValueInBase
Internal call...
calcSwapValueInBase
TMP_133
_collateralAdjusted
Function: calcSwapValueInBase
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: -4
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: -4
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[1], [-1], 0, 'collateralContract', [], -1]
[[1], [-1], -4, None, [], -1]
added
xyz
Function name: calcSwapValueInBase
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['TMP_133'])
has variable
[i] token cleared
clearing ir...?
amount_1(uint256) := ϕ(['_collateralAdjusted_1'])
has variable
[i] amount cleared
clearing ir...?
POOLS_20(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
typecheckig node...
token_1(address) := ϕ(['TMP_133'])
Function name: calcSwapValueInBase
Phi
[i]Type for token

Name: token Function: calcSwapValueInBase
Num: 1
Den: -1
Norm: u
LF: collateralContract
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['_collateralAdjusted_1'])
Function name: calcSwapValueInBase
Phi
[i]Type for amount

Name: amount Function: calcSwapValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_20(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: calcSwapValueInBase
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_53 = CONVERT POOLS_20 to iPOOLS
has variable
[i] TMP_53 cleared
clearing ir...?
TUPLE_2(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_53(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
has variable
clearing ir...?
POOLS_21(address) := ϕ(['POOLS_9', 'POOLS_20', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_baseAmt_1(uint256)= UNPACK TUPLE_2 index: 0 
has variable
[i] _baseAmt cleared
clearing ir...?
_tokenAmt_1(uint256)= UNPACK TUPLE_2 index: 1 
has variable
[i] _tokenAmt cleared
typecheckig node...
TMP_53 = CONVERT POOLS_20 to iPOOLS
Function name: calcSwapValueInBase

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_53 Function: calcSwapValueInBase
Num: 
Den: 
Norm: u
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_53

Name: TMP_53 Function: calcSwapValueInBase
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TUPLE_2(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_53(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
Function name: calcSwapValueInBase
High Call: getPoolAmounts
func name:getPoolAmounts
other func name:getPoolAmounts
TUPLE_2
hlc contract name: POOLS func_name: getPoolAmounts
('c', [1], [-1], 0, None)
token
('c', [1], [-1], 0, None)
token
wfc len: 2
COPIED
[i]Type for TUPLE_2

Name: TUPLE_2 Function: calcSwapValueInBase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_21(address) := ϕ(['POOLS_9', 'POOLS_20', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: calcSwapValueInBase
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_baseAmt_1(uint256)= UNPACK TUPLE_2 index: 0 
Function name: calcSwapValueInBase
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for _baseAmt

Name: _baseAmt Function: calcSwapValueInBase
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_tokenAmt_1(uint256)= UNPACK TUPLE_2 index: 1 
Function name: calcSwapValueInBase
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for _tokenAmt

Name: _tokenAmt Function: calcSwapValueInBase
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_54(uint256) = INTERNAL_CALL, Utils.calcSwapOutput(uint256,uint256,uint256)(amount_1,_tokenAmt_1,_baseAmt_1)
has variable
[i] TMP_54 cleared
clearing ir...?
RETURN TMP_54
typecheckig node...
TMP_54(uint256) = INTERNAL_CALL, Utils.calcSwapOutput(uint256,uint256,uint256)(amount_1,_tokenAmt_1,_baseAmt_1)
Function name: calcSwapValueInBase
Internal call...
calcSwapOutput
amount
_tokenAmt
_baseAmt
Function: calcSwapOutput
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[1], [-1], 'u', None, [], -1]
[[1], [-1], 0, None, [], -1]
[[1], [-1], 0, None, [], -1]
added
xyz
Function name: calcSwapOutput
Function Visibility: public
clearning node...
clearing ir...?
x_1(uint256) := ϕ(['amount_1', 'amount_1'])
has variable
[i] x cleared
clearing ir...?
X_1(uint256) := ϕ(['_baseAmt_1', '_tokenAmt_1'])
has variable
[i] X cleared
clearing ir...?
Y_1(uint256) := ϕ(['_baseAmt_1', '_tokenAmt_1'])
has variable
[i] Y cleared
typecheckig node...
x_1(uint256) := ϕ(['amount_1', 'amount_1'])
Function name: calcSwapOutput
Phi
[i]Type for x

Name: x Function: calcSwapOutput
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
X_1(uint256) := ϕ(['_baseAmt_1', '_tokenAmt_1'])
Function name: calcSwapOutput
Phi
[i]Type for X

Name: X Function: calcSwapOutput
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
Y_1(uint256) := ϕ(['_baseAmt_1', '_tokenAmt_1'])
Function name: calcSwapOutput
Phi
[i]Type for Y

Name: Y Function: calcSwapOutput
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_173(uint256) = x_1 (c)* X_1
has variable
[i] TMP_173 cleared
clearing ir...?
TMP_174(uint256) = TMP_173 (c)* Y_1
has variable
[i] TMP_174 cleared
clearing ir...?
numerator_1(uint256) := TMP_174(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_173(uint256) = x_1 (c)* X_1
Function name: calcSwapOutput
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_49 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_173 Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_173

Name: TMP_173 Function: calcSwapOutput
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_174(uint256) = TMP_173 (c)* Y_1
Function name: calcSwapOutput
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_50 Function: None
Num: 1, 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_174 Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_174

Name: TMP_174 Function: calcSwapOutput
Num: 1, 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_174(uint256)
Function name: calcSwapOutput
asgn

Name: TMP_174 Function: calcSwapOutput
Num: 1, 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calcSwapOutput
Num: 1, 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_175(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_175 cleared
clearing ir...?
TMP_176(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_176 cleared
clearing ir...?
TMP_177(uint256) = TMP_175 (c)* TMP_176
has variable
[i] TMP_177 cleared
clearing ir...?
denominator_1(uint256) := TMP_177(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_175(uint256) = x_1 (c)+ X_1
Function name: calcSwapOutput

Name: TMP_175 Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: calcSwapOutput
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_175 Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_175

Name: TMP_175 Function: calcSwapOutput
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_176(uint256) = x_1 (c)+ X_1
Function name: calcSwapOutput

Name: TMP_176 Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: calcSwapOutput
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_176 Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_176

Name: TMP_176 Function: calcSwapOutput
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_177(uint256) = TMP_175 (c)* TMP_176
Function name: calcSwapOutput
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_51 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_177 Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_177

Name: TMP_177 Function: calcSwapOutput
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_177(uint256)
Function name: calcSwapOutput
asgn

Name: TMP_177 Function: calcSwapOutput
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calcSwapOutput
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_178(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_178 cleared
clearing ir...?
RETURN TMP_178
typecheckig node...
TMP_178(uint256) = numerator_1 (c)/ denominator_1
Function name: calcSwapOutput
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_178 Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_52 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_178 Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_178

Name: TMP_178 Function: calcSwapOutput
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_178
RETURN

Name: TMP_178 Function: calcSwapOutput
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcSwapOutput":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcSwapOutput

Name: TMP_178 Function: calcSwapOutput
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_54

Name: TMP_54 Function: calcSwapValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_54
RETURN

Name: TMP_54 Function: calcSwapValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcSwapValueInBase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcSwapValueInBase

Name: TMP_54 Function: calcSwapValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_134

Name: TMP_134 Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
baseValue_1(uint256) := TMP_134(uint256)
Function name: getCollateralValueInBase
asgn

Name: TMP_134 Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: baseValue Function: getCollateralValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for baseValue

Name: baseValue Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
baseValue_6(uint256) := ϕ(['baseValue_0', 'baseValue_5'])
has variable
[i] baseValue cleared
typecheckig node...
baseValue_6(uint256) := ϕ(['baseValue_0', 'baseValue_5'])
Function name: getCollateralValueInBase
Phi
[i]Type for baseValue

Name: baseValue Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_135(uint256) = INTERNAL_CALL, Utils.calcSwapValueInToken(address,uint256)(debtAsset_1,baseValue_6)
has variable
[i] TMP_135 cleared
clearing ir...?
debt_1(uint256) := TMP_135(uint256)
has variable
[i] debt cleared
typecheckig node...
TMP_135(uint256) = INTERNAL_CALL, Utils.calcSwapValueInToken(address,uint256)(debtAsset_1,baseValue_6)
Function name: getCollateralValueInBase
Internal call...
calcSwapValueInToken
debtAsset
baseValue
Function: calcSwapValueInToken
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: debtContract
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: debtContract
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-2], [-1], 0, 'debtContract', [], -1]
[[1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcSwapValueInToken
Function Visibility: public
clearning node...
clearing ir...?
token_1(address) := ϕ(['debtAsset_1'])
has variable
[i] token cleared
clearing ir...?
amount_1(uint256) := ϕ(['baseValue_6'])
has variable
[i] amount cleared
clearing ir...?
POOLS_22(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
typecheckig node...
token_1(address) := ϕ(['debtAsset_1'])
Function name: calcSwapValueInToken
Phi
[i]Type for token

Name: token Function: calcSwapValueInToken
Num: -2
Den: -1
Norm: u
LF: debtContract
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['baseValue_6'])
Function name: calcSwapValueInToken
Phi
[i]Type for amount

Name: amount Function: calcSwapValueInToken
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_22(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: calcSwapValueInToken
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_55 = CONVERT POOLS_22 to iPOOLS
has variable
[i] TMP_55 cleared
clearing ir...?
TUPLE_3(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_55(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
has variable
clearing ir...?
POOLS_23(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_22', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_baseAmt_1(uint256)= UNPACK TUPLE_3 index: 0 
has variable
[i] _baseAmt cleared
clearing ir...?
_tokenAmt_1(uint256)= UNPACK TUPLE_3 index: 1 
has variable
[i] _tokenAmt cleared
typecheckig node...
TMP_55 = CONVERT POOLS_22 to iPOOLS
Function name: calcSwapValueInToken

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_55 Function: calcSwapValueInToken
Num: 
Den: 
Norm: u
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_55

Name: TMP_55 Function: calcSwapValueInToken
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TUPLE_3(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_55(iPOOLS), function:getPoolAmounts, arguments:['token_1']  
Function name: calcSwapValueInToken
High Call: getPoolAmounts
func name:getPoolAmounts
other func name:getPoolAmounts
TUPLE_3
hlc contract name: POOLS func_name: getPoolAmounts
('c', [1], [-1], 0, None)
token
('c', [1], [-1], 0, None)
token
wfc len: 2
COPIED
[i]Type for TUPLE_3

Name: TUPLE_3 Function: calcSwapValueInToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
POOLS_23(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_22', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: calcSwapValueInToken
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_baseAmt_1(uint256)= UNPACK TUPLE_3 index: 0 
Function name: calcSwapValueInToken
Reading tuple TUPLE_3 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for _baseAmt

Name: _baseAmt Function: calcSwapValueInToken
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_tokenAmt_1(uint256)= UNPACK TUPLE_3 index: 1 
Function name: calcSwapValueInToken
Reading tuple TUPLE_3 index 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for _tokenAmt

Name: _tokenAmt Function: calcSwapValueInToken
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_56(uint256) = INTERNAL_CALL, Utils.calcSwapOutput(uint256,uint256,uint256)(amount_1,_baseAmt_1,_tokenAmt_1)
has variable
[i] TMP_56 cleared
clearing ir...?
RETURN TMP_56
typecheckig node...
TMP_56(uint256) = INTERNAL_CALL, Utils.calcSwapOutput(uint256,uint256,uint256)(amount_1,_baseAmt_1,_tokenAmt_1)
Function name: calcSwapValueInToken
Internal call...
calcSwapOutput
amount
_baseAmt
_tokenAmt
Function: calcSwapOutput
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 'u', None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[1], [-1], 'u', None, [], -1]
[[1], [-1], 0, None, [], -1]
[[1], [-1], 0, None, [], -1]
0

Name: PIC_53 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_56 Function: calcSwapValueInToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_56

Name: TMP_56 Function: calcSwapValueInToken
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_56
RETURN

Name: TMP_56 Function: calcSwapValueInToken
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcSwapValueInToken":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcSwapValueInToken

Name: TMP_56 Function: calcSwapValueInToken
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_135

Name: TMP_135 Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
debt_1(uint256) := TMP_135(uint256)
Function name: getCollateralValueInBase
asgn

Name: TMP_135 Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: debt Function: getCollateralValueInBase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for debt

Name: debt Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN debt_1,baseValue_6
typecheckig node...
RETURN debt_1,baseValue_6
RETURN

Name: debt Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: baseValue Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getCollateralValueInBase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: getCollateralValueInBase

Name: debt Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: baseValue Function: getCollateralValueInBase
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getDebtValueInCollateral
Function getDebtValueInCollateral not marked
Mark Iterations TRUE, proceeding anyway
Function name: getDebtValueInCollateral
Function Visibility (test): external
member
Finding type for member...
address
debt
Finding type for debt...
uint256
collateralAsset
Finding type for collateralAsset...
address
debtAsset
Finding type for debtAsset...
address
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: member
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: collateralAsset
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: debtAsset
    fields: []
    fintype: -1
clearning node...
clearing ir...?
ROUTER_21(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
has variable
typecheckig node...
ROUTER_21(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
Function name: getDebtValueInCollateral
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_136 = CONVERT ROUTER_21 to iROUTER
has variable
[i] TMP_136 cleared
clearing ir...?
TMP_137(uint256) = HIGH_LEVEL_CALL, dest:TMP_136(iROUTER), function:getMemberDebt, arguments:['member_1', 'collateralAsset_1', 'debtAsset_1']  
has variable
[i] TMP_137 cleared
clearing ir...?
ROUTER_22(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_21', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
_memberDebt_1(uint256) := TMP_137(uint256)
has variable
[i] _memberDebt cleared
typecheckig node...
TMP_136 = CONVERT ROUTER_21 to iROUTER
Function name: getDebtValueInCollateral

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_136 Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_136

Name: TMP_136 Function: getDebtValueInCollateral
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_137(uint256) = HIGH_LEVEL_CALL, dest:TMP_136(iROUTER), function:getMemberDebt, arguments:['member_1', 'collateralAsset_1', 'debtAsset_1']  
Function name: getDebtValueInCollateral
High Call: getMemberDebt
func name:getMemberDebt
other func name:getMemberDebt
TMP_137
[i]Type for TMP_137

Name: TMP_137 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_22(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_21', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getDebtValueInCollateral
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
_memberDebt_1(uint256) := TMP_137(uint256)
Function name: getDebtValueInCollateral
asgn

Name: TMP_137 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _memberDebt Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _memberDebt

Name: _memberDebt Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_138 = CONVERT ROUTER_22 to iROUTER
has variable
[i] TMP_138 cleared
clearing ir...?
TMP_139(uint256) = HIGH_LEVEL_CALL, dest:TMP_138(iROUTER), function:getMemberCollateral, arguments:['member_1', 'collateralAsset_1', 'debtAsset_1']  
has variable
[i] TMP_139 cleared
clearing ir...?
ROUTER_23(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_22', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
_memberCollateral_1(uint256) := TMP_139(uint256)
has variable
[i] _memberCollateral cleared
typecheckig node...
TMP_138 = CONVERT ROUTER_22 to iROUTER
Function name: getDebtValueInCollateral

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_138 Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_138

Name: TMP_138 Function: getDebtValueInCollateral
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_139(uint256) = HIGH_LEVEL_CALL, dest:TMP_138(iROUTER), function:getMemberCollateral, arguments:['member_1', 'collateralAsset_1', 'debtAsset_1']  
Function name: getDebtValueInCollateral
High Call: getMemberCollateral
func name:getMemberCollateral
other func name:getMemberCollateral
TMP_139
[i]Type for TMP_139

Name: TMP_139 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_23(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_22', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getDebtValueInCollateral
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
_memberCollateral_1(uint256) := TMP_139(uint256)
Function name: getDebtValueInCollateral
asgn

Name: TMP_139 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _memberCollateral Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _memberCollateral

Name: _memberCollateral Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_140 = CONVERT ROUTER_23 to iROUTER
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = HIGH_LEVEL_CALL, dest:TMP_140(iROUTER), function:getSystemCollateral, arguments:['collateralAsset_1', 'debtAsset_1']  
has variable
[i] TMP_141 cleared
clearing ir...?
ROUTER_24(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_23', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
_collateral_1(uint256) := TMP_141(uint256)
has variable
[i] _collateral cleared
typecheckig node...
TMP_140 = CONVERT ROUTER_23 to iROUTER
Function name: getDebtValueInCollateral

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_140 Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: getDebtValueInCollateral
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = HIGH_LEVEL_CALL, dest:TMP_140(iROUTER), function:getSystemCollateral, arguments:['collateralAsset_1', 'debtAsset_1']  
Function name: getDebtValueInCollateral
High Call: getSystemCollateral
func name:getSystemCollateral
other func name:getSystemCollateral
TMP_141
[i]Type for TMP_141

Name: TMP_141 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_24(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_23', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getDebtValueInCollateral
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
_collateral_1(uint256) := TMP_141(uint256)
Function name: getDebtValueInCollateral
asgn

Name: TMP_141 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _collateral Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _collateral

Name: _collateral Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_142 = CONVERT ROUTER_24 to iROUTER
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = HIGH_LEVEL_CALL, dest:TMP_142(iROUTER), function:getSystemInterestPaid, arguments:['collateralAsset_1', 'debtAsset_1']  
has variable
[i] TMP_143 cleared
clearing ir...?
ROUTER_25(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_24', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
_interestPaid_1(uint256) := TMP_143(uint256)
has variable
[i] _interestPaid cleared
typecheckig node...
TMP_142 = CONVERT ROUTER_24 to iROUTER
Function name: getDebtValueInCollateral

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_142 Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_142

Name: TMP_142 Function: getDebtValueInCollateral
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = HIGH_LEVEL_CALL, dest:TMP_142(iROUTER), function:getSystemInterestPaid, arguments:['collateralAsset_1', 'debtAsset_1']  
Function name: getDebtValueInCollateral
High Call: getSystemInterestPaid
func name:getSystemInterestPaid
other func name:getSystemInterestPaid
TMP_143
[i]Type for TMP_143

Name: TMP_143 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_25(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_24', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getDebtValueInCollateral
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
_interestPaid_1(uint256) := TMP_143(uint256)
Function name: getDebtValueInCollateral
asgn

Name: TMP_143 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _interestPaid Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _interestPaid

Name: _interestPaid Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_144(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_memberCollateral_1,_collateral_1,_interestPaid_1)
has variable
[i] TMP_144 cleared
clearing ir...?
_memberInterestShare_1(uint256) := TMP_144(uint256)
has variable
[i] _memberInterestShare cleared
typecheckig node...
TMP_144(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_memberCollateral_1,_collateral_1,_interestPaid_1)
Function name: getDebtValueInCollateral
Internal call...
calcShare
_memberCollateral
_collateral
_interestPaid
Function: calcShare
ic
[i]Type for TMP_144

Name: TMP_144 Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_memberInterestShare_1(uint256) := TMP_144(uint256)
Function name: getDebtValueInCollateral
asgn

Name: TMP_144 Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _memberInterestShare Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _memberInterestShare

Name: _memberInterestShare Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_memberInterestShare_1(uint256) := TMP_144(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_145(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(debt_1,_memberDebt_1,_memberCollateral_1)
has variable
[i] TMP_145 cleared
clearing ir...?
_collateralUnlocked_1(uint256) := TMP_145(uint256)
has variable
[i] _collateralUnlocked cleared
typecheckig node...
TMP_145(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(debt_1,_memberDebt_1,_memberCollateral_1)
Function name: getDebtValueInCollateral
Internal call...
calcShare
debt
_memberDebt
_memberCollateral
Function: calcShare
ic
[i]Type for TMP_145

Name: TMP_145 Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_collateralUnlocked_1(uint256) := TMP_145(uint256)
Function name: getDebtValueInCollateral
asgn

Name: TMP_145 Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _collateralUnlocked Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _collateralUnlocked

Name: _collateralUnlocked Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_collateralUnlocked_1(uint256) := TMP_145(uint256)
XXXXX
clearning node...
clearing ir...?
RETURN _collateralUnlocked_1,_memberInterestShare_1
typecheckig node...
RETURN _collateralUnlocked_1,_memberInterestShare_1
RETURN

Name: _collateralUnlocked Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _memberInterestShare Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getDebtValueInCollateral":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
ROUTER_21(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
Function name: getDebtValueInCollateral
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_136 = CONVERT ROUTER_21 to iROUTER
Function name: getDebtValueInCollateral

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_136 Function: getDebtValueInCollateral
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_136

Name: TMP_136 Function: getDebtValueInCollateral
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_137(uint256) = HIGH_LEVEL_CALL, dest:TMP_136(iROUTER), function:getMemberDebt, arguments:['member_1', 'collateralAsset_1', 'debtAsset_1']  
Function name: getDebtValueInCollateral
High Call: getMemberDebt
func name:getMemberDebt
other func name:getMemberDebt
TMP_137
[i]Type for TMP_137

Name: TMP_137 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_22(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_21', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getDebtValueInCollateral
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
_memberDebt_1(uint256) := TMP_137(uint256)
Function name: getDebtValueInCollateral
asgn

Name: TMP_137 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _memberDebt Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _memberDebt

Name: _memberDebt Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_138 = CONVERT ROUTER_22 to iROUTER
Function name: getDebtValueInCollateral

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_138 Function: getDebtValueInCollateral
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_138

Name: TMP_138 Function: getDebtValueInCollateral
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_139(uint256) = HIGH_LEVEL_CALL, dest:TMP_138(iROUTER), function:getMemberCollateral, arguments:['member_1', 'collateralAsset_1', 'debtAsset_1']  
Function name: getDebtValueInCollateral
High Call: getMemberCollateral
func name:getMemberCollateral
other func name:getMemberCollateral
TMP_139
[i]Type for TMP_139

Name: TMP_139 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_23(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_22', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getDebtValueInCollateral
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
_memberCollateral_1(uint256) := TMP_139(uint256)
Function name: getDebtValueInCollateral
asgn

Name: TMP_139 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _memberCollateral Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _memberCollateral

Name: _memberCollateral Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_140 = CONVERT ROUTER_23 to iROUTER
Function name: getDebtValueInCollateral

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_140 Function: getDebtValueInCollateral
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: getDebtValueInCollateral
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = HIGH_LEVEL_CALL, dest:TMP_140(iROUTER), function:getSystemCollateral, arguments:['collateralAsset_1', 'debtAsset_1']  
Function name: getDebtValueInCollateral
High Call: getSystemCollateral
func name:getSystemCollateral
other func name:getSystemCollateral
TMP_141
[i]Type for TMP_141

Name: TMP_141 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_24(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_23', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getDebtValueInCollateral
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
_collateral_1(uint256) := TMP_141(uint256)
Function name: getDebtValueInCollateral
asgn

Name: TMP_141 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _collateral Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _collateral

Name: _collateral Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_142 = CONVERT ROUTER_24 to iROUTER
Function name: getDebtValueInCollateral

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_142 Function: getDebtValueInCollateral
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_142

Name: TMP_142 Function: getDebtValueInCollateral
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = HIGH_LEVEL_CALL, dest:TMP_142(iROUTER), function:getSystemInterestPaid, arguments:['collateralAsset_1', 'debtAsset_1']  
Function name: getDebtValueInCollateral
High Call: getSystemInterestPaid
func name:getSystemInterestPaid
other func name:getSystemInterestPaid
TMP_143
[i]Type for TMP_143

Name: TMP_143 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_25(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_24', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getDebtValueInCollateral
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
_interestPaid_1(uint256) := TMP_143(uint256)
Function name: getDebtValueInCollateral
asgn

Name: TMP_143 Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _interestPaid Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _interestPaid

Name: _interestPaid Function: getDebtValueInCollateral
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_144(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(_memberCollateral_1,_collateral_1,_interestPaid_1)
Function name: getDebtValueInCollateral
Internal call...
calcShare
_memberCollateral
_collateral
_interestPaid
Function: calcShare
ic
[i]Type for TMP_144

Name: TMP_144 Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_memberInterestShare_1(uint256) := TMP_144(uint256)
Function name: getDebtValueInCollateral
asgn

Name: TMP_144 Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _memberInterestShare Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _memberInterestShare

Name: _memberInterestShare Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_memberInterestShare_1(uint256) := TMP_144(uint256)
XXXXX
typecheckig node...
TMP_145(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(debt_1,_memberDebt_1,_memberCollateral_1)
Function name: getDebtValueInCollateral
Internal call...
calcShare
debt
_memberDebt
_memberCollateral
Function: calcShare
ic
[i]Type for TMP_145

Name: TMP_145 Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_collateralUnlocked_1(uint256) := TMP_145(uint256)
Function name: getDebtValueInCollateral
asgn

Name: TMP_145 Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _collateralUnlocked Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _collateralUnlocked

Name: _collateralUnlocked Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_collateralUnlocked_1(uint256) := TMP_145(uint256)
XXXXX
typecheckig node...
RETURN _collateralUnlocked_1,_memberInterestShare_1
RETURN

Name: _collateralUnlocked Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _memberInterestShare Function: getDebtValueInCollateral
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "getDebtValueInCollateral":
 New undefined nodes- 2
 Old undefined nodes- 2
No save for this scenario
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getInterestOwed
Function getInterestOwed not marked
Mark Iterations TRUE, proceeding anyway
Function name: getInterestOwed
Function Visibility (test): external
collateralAsset
Finding type for collateralAsset...
address
debtAsset
Finding type for debtAsset...
address
timeElapsed
Finding type for timeElapsed...
uint256
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: collateralAsset
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: debtAsset
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
_year_1(uint256) := ϕ(['_year_0', '_year_3'])
has variable
clearing ir...?
FACTORY_6(address) := ϕ(['FACTORY_3', 'FACTORY_1', 'FACTORY_0', 'FACTORY_10', 'FACTORY_9'])
has variable
typecheckig node...
_year_1(uint256) := ϕ(['_year_0', '_year_3'])
Function name: getInterestOwed
Phi
[i]Type for _year

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
FACTORY_6(address) := ϕ(['FACTORY_3', 'FACTORY_1', 'FACTORY_0', 'FACTORY_10', 'FACTORY_9'])
Function name: getInterestOwed
Phi
[i]Type for FACTORY

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_146(uint256) = INTERNAL_CALL, Utils.getInterestPayment(address,address)(collateralAsset_1,debtAsset_1)
has variable
[i] TMP_146 cleared
clearing ir...?
TMP_147(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(timeElapsed_1,_year_2,TMP_146)
has variable
[i] TMP_147 cleared
clearing ir...?
_interestPayment_1(uint256) := TMP_147(uint256)
has variable
[i] _interestPayment cleared
typecheckig node...
TMP_146(uint256) = INTERNAL_CALL, Utils.getInterestPayment(address,address)(collateralAsset_1,debtAsset_1)
Function name: getInterestOwed
Internal call...
getInterestPayment
collateralAsset
debtAsset
Function: getInterestPayment
ic
[i]Type for TMP_146

Name: TMP_146 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_147(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(timeElapsed_1,_year_2,TMP_146)
Function name: getInterestOwed
Internal call...
calcShare
timeElapsed
_year
TMP_146
Function: calcShare
ic
[i]Type for TMP_147

Name: TMP_147 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_interestPayment_1(uint256) := TMP_147(uint256)
Function name: getInterestOwed
asgn

Name: TMP_147 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _interestPayment Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _interestPayment

Name: _interestPayment Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_interestPayment_1(uint256) := TMP_147(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_148(bool) = INTERNAL_CALL, Utils.isBase(address)(collateralAsset_1)
has variable
[i] TMP_148 cleared
clearing ir...?
CONDITION TMP_148
typecheckig node...
TMP_148(bool) = INTERNAL_CALL, Utils.isBase(address)(collateralAsset_1)
Function name: getInterestOwed
Internal call...
isBase
collateralAsset
Function: isBase
ic
[i]Type for TMP_148

Name: TMP_148 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_148
Condition...
Conidtion: 
TMP_148
TMP_148
clearning node...
clearing ir...?
TMP_150 = CONVERT FACTORY_9 to iFACTORY
has variable
[i] TMP_150 cleared
clearing ir...?
TMP_151(bool) = HIGH_LEVEL_CALL, dest:TMP_150(iFACTORY), function:isSynth, arguments:['collateralAsset_1']  
has variable
[i] TMP_151 cleared
clearing ir...?
FACTORY_10(address) := ϕ(['FACTORY_3', 'FACTORY_1', 'FACTORY_10', 'FACTORY_9'])
has variable
clearing ir...?
CONDITION TMP_151
typecheckig node...
TMP_150 = CONVERT FACTORY_9 to iFACTORY
Function name: getInterestOwed

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef

Name: TMP_150 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: getInterestOwed
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
TMP_151(bool) = HIGH_LEVEL_CALL, dest:TMP_150(iFACTORY), function:isSynth, arguments:['collateralAsset_1']  
Function name: getInterestOwed
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_151
[i]Type for TMP_151

Name: TMP_151 Function: getInterestOwed
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
FACTORY_10(address) := ϕ(['FACTORY_3', 'FACTORY_1', 'FACTORY_10', 'FACTORY_9'])
Function name: getInterestOwed
Phi
[i]Type for FACTORY

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
CONDITION TMP_151
Condition...
Conidtion: 
TMP_151
TMP_151
clearning node...
clearing ir...?
TMP_149(uint256) = INTERNAL_CALL, Utils.calcValueInBase(address,uint256)(debtAsset_1,_interestPayment_1)
has variable
[i] TMP_149 cleared
clearing ir...?
interestOwed_2(uint256) := TMP_149(uint256)
has variable
[i] interestOwed cleared
typecheckig node...
TMP_149(uint256) = INTERNAL_CALL, Utils.calcValueInBase(address,uint256)(debtAsset_1,_interestPayment_1)
Function name: getInterestOwed
Internal call...
calcValueInBase
debtAsset
_interestPayment
Function: calcValueInBase
ic
[i]Type for TMP_149

Name: TMP_149 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
interestOwed_2(uint256) := TMP_149(uint256)
Function name: getInterestOwed
asgn

Name: TMP_149 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: interestOwed Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for interestOwed

Name: interestOwed Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
interestOwed_2(uint256) := TMP_149(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_152(uint256) = INTERNAL_CALL, Utils.calcValueOfTokenInToken(address,uint256,address)(debtAsset_1,_interestPayment_1,collateralAsset_1)
has variable
[i] TMP_152 cleared
clearing ir...?
interestOwed_1(uint256) := TMP_152(uint256)
has variable
[i] interestOwed cleared
typecheckig node...
TMP_152(uint256) = INTERNAL_CALL, Utils.calcValueOfTokenInToken(address,uint256,address)(debtAsset_1,_interestPayment_1,collateralAsset_1)
Function name: getInterestOwed
Internal call...
calcValueOfTokenInToken
debtAsset
_interestPayment
collateralAsset
Function: calcValueOfTokenInToken
ic
[i]Type for TMP_152

Name: TMP_152 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
interestOwed_1(uint256) := TMP_152(uint256)
Function name: getInterestOwed
asgn

Name: TMP_152 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: interestOwed Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for interestOwed

Name: interestOwed Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
interestOwed_1(uint256) := TMP_152(uint256)
XXXXX
clearning node...
typecheckig node...
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "getInterestOwed":
 New undefined nodes- 3
 Old undefined nodes- 0
typecheckig node...
_year_1(uint256) := ϕ(['_year_0', '_year_3'])
Function name: getInterestOwed
Phi
[i]Type for _year

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
FACTORY_6(address) := ϕ(['FACTORY_3', 'FACTORY_1', 'FACTORY_0', 'FACTORY_10', 'FACTORY_9'])
Function name: getInterestOwed
Phi
[i]Type for FACTORY

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_146(uint256) = INTERNAL_CALL, Utils.getInterestPayment(address,address)(collateralAsset_1,debtAsset_1)
Function name: getInterestOwed
Internal call...
getInterestPayment
collateralAsset
debtAsset
Function: getInterestPayment
ic
[i]Type for TMP_146

Name: TMP_146 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_147(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(timeElapsed_1,_year_2,TMP_146)
Function name: getInterestOwed
Internal call...
calcShare
timeElapsed
_year
TMP_146
Function: calcShare
ic
[i]Type for TMP_147

Name: TMP_147 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_interestPayment_1(uint256) := TMP_147(uint256)
Function name: getInterestOwed
asgn

Name: TMP_147 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _interestPayment Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _interestPayment

Name: _interestPayment Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_interestPayment_1(uint256) := TMP_147(uint256)
XXXXX
typecheckig node...
TMP_148(bool) = INTERNAL_CALL, Utils.isBase(address)(collateralAsset_1)
Function name: getInterestOwed
Internal call...
isBase
collateralAsset
Function: isBase
ic
[i]Type for TMP_148

Name: TMP_148 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_148
Condition...
Conidtion: 
TMP_148
TMP_148
typecheckig node...
TMP_150 = CONVERT FACTORY_9 to iFACTORY
Function name: getInterestOwed

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef

Name: TMP_150 Function: getInterestOwed
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: getInterestOwed
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
TMP_151(bool) = HIGH_LEVEL_CALL, dest:TMP_150(iFACTORY), function:isSynth, arguments:['collateralAsset_1']  
Function name: getInterestOwed
High Call: isSynth
func name:isSynth
other func name:isSynth
TMP_151
[i]Type for TMP_151

Name: TMP_151 Function: getInterestOwed
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
FACTORY_10(address) := ϕ(['FACTORY_3', 'FACTORY_1', 'FACTORY_10', 'FACTORY_9'])
Function name: getInterestOwed
Phi
[i]Type for FACTORY

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
CONDITION TMP_151
Condition...
Conidtion: 
TMP_151
TMP_151
typecheckig node...
TMP_149(uint256) = INTERNAL_CALL, Utils.calcValueInBase(address,uint256)(debtAsset_1,_interestPayment_1)
Function name: getInterestOwed
Internal call...
calcValueInBase
debtAsset
_interestPayment
Function: calcValueInBase
ic
[i]Type for TMP_149

Name: TMP_149 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
interestOwed_2(uint256) := TMP_149(uint256)
Function name: getInterestOwed
asgn

Name: TMP_149 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: interestOwed Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for interestOwed

Name: interestOwed Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
interestOwed_2(uint256) := TMP_149(uint256)
XXXXX
typecheckig node...
TMP_152(uint256) = INTERNAL_CALL, Utils.calcValueOfTokenInToken(address,uint256,address)(debtAsset_1,_interestPayment_1,collateralAsset_1)
Function name: getInterestOwed
Internal call...
calcValueOfTokenInToken
debtAsset
_interestPayment
collateralAsset
Function: calcValueOfTokenInToken
ic
[i]Type for TMP_152

Name: TMP_152 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
interestOwed_1(uint256) := TMP_152(uint256)
Function name: getInterestOwed
asgn

Name: TMP_152 Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: interestOwed Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for interestOwed

Name: interestOwed Function: getInterestOwed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
interestOwed_1(uint256) := TMP_152(uint256)
XXXXX
typecheckig node...
typecheckig node...
WORKLIST iteration 1 for function call "getInterestOwed":
 New undefined nodes- 3
 Old undefined nodes- 3
No save for this scenario
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getInterestPayment
Function name: getInterestPayment
Function Visibility (test): public
collateralAsset
Finding type for collateralAsset...
address
Check copy_toekn_tuple
(-2, -1, 0, 'collateralContract')
----
Type: address
address
Final Type: address

Name: collateralAsset Function: getInterestPayment
Num: -2
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef
[*]Type fetched successfully
debtAsset
Finding type for debtAsset...
address
Check copy_toekn_tuple
(-2, -1, 0, 'debtContract')
----
Type: address
address
Final Type: address

Name: debtAsset Function: getInterestPayment
Num: -2
Den: -1
Norm: 0
LF: debtContract
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: debtContract
    fields: []
    fintype: -1
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: debtContract
    fields: []
    fintype: -1
clearning node...
clearing ir...?
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
has variable
[i] collateralAsset cleared
clearing ir...?
debtAsset_1(address) := ϕ(['debtAsset_1'])
has variable
[i] debtAsset cleared
clearing ir...?
ROUTER_26(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
has variable
typecheckig node...
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
Function name: getInterestPayment
Phi
[i]Type for collateralAsset

Name: collateralAsset Function: getInterestPayment
Num: -2
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef
done.
debtAsset_1(address) := ϕ(['debtAsset_1'])
Function name: getInterestPayment
Phi
[i]Type for debtAsset

Name: debtAsset Function: getInterestPayment
Num: -2
Den: -1
Norm: 0
LF: debtContract
Fields: 
Finance Type: undef
done.
ROUTER_26(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
Function name: getInterestPayment
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_153(uint256) = INTERNAL_CALL, Utils.getDebtLoading(address,address)(collateralAsset_1,debtAsset_1)
has variable
[i] TMP_153 cleared
clearing ir...?
ROUTER_27(address) := ϕ(['ROUTER_30'])
has variable
clearing ir...?
_debtLoading_1(uint256) := TMP_153(uint256)
has variable
[i] _debtLoading cleared
typecheckig node...
TMP_153(uint256) = INTERNAL_CALL, Utils.getDebtLoading(address,address)(collateralAsset_1,debtAsset_1)
Function name: getInterestPayment
Internal call...
getDebtLoading
collateralAsset
debtAsset
Function: getDebtLoading
ic
Internal cal param_cache
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: debtContract
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: debtContract
    fields: []
    fintype: -1
Parameter length: 1
[[-2], [-1], 0, 'collateralContract', [], -1]
[[-2], [-1], 0, 'debtContract', [], -1]
added
xyz
Function name: getDebtLoading
Function Visibility: public
clearning node...
clearing ir...?
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
has variable
[i] collateralAsset cleared
clearing ir...?
debtAsset_1(address) := ϕ(['debtAsset_1'])
has variable
[i] debtAsset cleared
clearing ir...?
ROUTER_29(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_52(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
typecheckig node...
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
Function name: getDebtLoading
Phi
[i]Type for collateralAsset

Name: collateralAsset Function: getDebtLoading
Num: -2
Den: -1
Norm: u
LF: collateralContract
Fields: 
Finance Type: undef
done.
debtAsset_1(address) := ϕ(['debtAsset_1'])
Function name: getDebtLoading
Phi
[i]Type for debtAsset

Name: debtAsset Function: getDebtLoading
Num: -2
Den: -1
Norm: u
LF: debtContract
Fields: 
Finance Type: undef
done.
ROUTER_29(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
Function name: getDebtLoading
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_52(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getDebtLoading
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_158 = CONVERT ROUTER_29 to iROUTER
has variable
[i] TMP_158 cleared
clearing ir...?
TMP_159(uint256) = HIGH_LEVEL_CALL, dest:TMP_158(iROUTER), function:getSystemDebt, arguments:['collateralAsset_1', 'debtAsset_1']  
has variable
[i] TMP_159 cleared
clearing ir...?
ROUTER_30(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_29', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_53(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_52', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_debtIssued_1(uint256) := TMP_159(uint256)
has variable
[i] _debtIssued cleared
typecheckig node...
TMP_158 = CONVERT ROUTER_29 to iROUTER
Function name: getDebtLoading

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_158 Function: getDebtLoading
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: getDebtLoading
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_159(uint256) = HIGH_LEVEL_CALL, dest:TMP_158(iROUTER), function:getSystemDebt, arguments:['collateralAsset_1', 'debtAsset_1']  
Function name: getDebtLoading
High Call: getSystemDebt
func name:getSystemDebt
other func name:getSystemDebt
TMP_159
hlc contract name: ROUTER func_name: getSystemDebt
('c', [2], [-1], 0, None)
collateralAsset
debtAsset
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_159

Name: TMP_159 Function: getDebtLoading
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_30(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_29', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getDebtLoading
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_53(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_52', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getDebtLoading
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_debtIssued_1(uint256) := TMP_159(uint256)
Function name: getDebtLoading
asgn

Name: TMP_159 Function: getDebtLoading
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _debtIssued Function: getDebtLoading
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _debtIssued

Name: _debtIssued Function: getDebtLoading
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_160 = CONVERT POOLS_53 to iPOOLS
has variable
[i] TMP_160 cleared
clearing ir...?
TMP_161(uint256) = HIGH_LEVEL_CALL, dest:TMP_160(iPOOLS), function:getTokenAmount, arguments:['debtAsset_1']  
has variable
[i] TMP_161 cleared
clearing ir...?
POOLS_54(address) := ϕ(['POOLS_9', 'POOLS_53', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_debtDepth_1(uint256) := TMP_161(uint256)
has variable
[i] _debtDepth cleared
typecheckig node...
TMP_160 = CONVERT POOLS_53 to iPOOLS
Function name: getDebtLoading

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_160 Function: getDebtLoading
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_160

Name: TMP_160 Function: getDebtLoading
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_161(uint256) = HIGH_LEVEL_CALL, dest:TMP_160(iPOOLS), function:getTokenAmount, arguments:['debtAsset_1']  
Function name: getDebtLoading
High Call: getTokenAmount
func name:getTokenAmount
other func name:getTokenAmount
TMP_161
hlc contract name: POOLS func_name: getTokenAmount
('c', [1], [-1], 0, None)
debtAsset
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_161

Name: TMP_161 Function: getDebtLoading
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_54(address) := ϕ(['POOLS_9', 'POOLS_53', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getDebtLoading
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_debtDepth_1(uint256) := TMP_161(uint256)
Function name: getDebtLoading
asgn

Name: TMP_161 Function: getDebtLoading
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _debtDepth Function: getDebtLoading
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _debtDepth

Name: _debtDepth Function: getDebtLoading
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = _debtIssued_1 (c)* 10000
has variable
[i] TMP_162 cleared
clearing ir...?
TMP_163(uint256) = TMP_162 (c)/ _debtDepth_1
has variable
[i] TMP_163 cleared
clearing ir...?
RETURN TMP_163
typecheckig node...
TMP_162(uint256) = _debtIssued_1 (c)* 10000
Function name: getDebtLoading
testing mul...
val: 10000
4
val: 10000
4
lnorm: 0 rnorm: 4
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _debtIssued Function: getDebtLoading
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: getDebtLoading
Num: 
Den: 
Norm: 4
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: getDebtLoading
Num: 2
Den: -1
Norm: 4
LF: None
Fields: 
Finance Type: undef
done.
TMP_163(uint256) = TMP_162 (c)/ _debtDepth_1
Function name: getDebtLoading
lnorm: 4 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_163 Function: getDebtLoading
Num: 
Den: 
Norm: 4
LF: None
Fields: 
Finance Type: undef

Name: PIC_57 Function: None
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_163 Function: getDebtLoading
Num: 
Den: 
Norm: 4
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_163

Name: TMP_163 Function: getDebtLoading
Num: 2
Den: 1
Norm: 4
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_163
RETURN

Name: TMP_163 Function: getDebtLoading
Num: 2
Den: 1
Norm: 4
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getDebtLoading":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: getDebtLoading

Name: TMP_163 Function: getDebtLoading
Num: 2
Den: 1
Norm: 4
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_153

Name: TMP_153 Function: getInterestPayment
Num: 2
Den: 1
Norm: 4
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_27(address) := ϕ(['ROUTER_30'])
Function name: getInterestPayment
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
_debtLoading_1(uint256) := TMP_153(uint256)
Function name: getInterestPayment
asgn

Name: TMP_153 Function: getInterestPayment
Num: 2
Den: 1
Norm: 4
LF: None
Fields: 
Finance Type: undef

Name: _debtLoading Function: getInterestPayment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _debtLoading

Name: _debtLoading Function: getInterestPayment
Num: 2
Den: 1
Norm: 4
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_154 = CONVERT ROUTER_27 to iROUTER
has variable
[i] TMP_154 cleared
clearing ir...?
TMP_155(uint256) = HIGH_LEVEL_CALL, dest:TMP_154(iROUTER), function:getSystemDebt, arguments:['collateralAsset_1', 'debtAsset_1']  
has variable
[i] TMP_155 cleared
clearing ir...?
ROUTER_28(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_27', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
TMP_156(uint256) = _debtLoading_1 (c)* TMP_155
has variable
[i] TMP_156 cleared
clearing ir...?
TMP_157(uint256) = TMP_156 (c)/ 10000
has variable
[i] TMP_157 cleared
clearing ir...?
RETURN TMP_157
typecheckig node...
TMP_154 = CONVERT ROUTER_27 to iROUTER
Function name: getInterestPayment

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_154 Function: getInterestPayment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_154

Name: TMP_154 Function: getInterestPayment
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_155(uint256) = HIGH_LEVEL_CALL, dest:TMP_154(iROUTER), function:getSystemDebt, arguments:['collateralAsset_1', 'debtAsset_1']  
Function name: getInterestPayment
High Call: getSystemDebt
func name:getSystemDebt
other func name:getSystemDebt
TMP_155
hlc contract name: ROUTER func_name: getSystemDebt
('c', [2], [-1], 0, None)
collateralAsset
debtAsset
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_155

Name: TMP_155 Function: getInterestPayment
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_28(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_27', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getInterestPayment
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_156(uint256) = _debtLoading_1 (c)* TMP_155
Function name: getInterestPayment
testing mul...
lnorm: 4 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_59 Function: None
Num: 2, 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_156 Function: getInterestPayment
Num: 
Den: 
Norm: 4
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_156

Name: TMP_156 Function: getInterestPayment
Num: 2, 2
Den: 1
Norm: 4
LF: None
Fields: 
Finance Type: undef
done.
TMP_157(uint256) = TMP_156 (c)/ 10000
Function name: getInterestPayment
val: 10000
4
val: 10000
4
lnorm: 4 rnorm: 4
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_157 Function: getInterestPayment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_156 Function: getInterestPayment
Num: 2, 2
Den: 1
Norm: 4
LF: None
Fields: 
Finance Type: undef

Name: TMP_157 Function: getInterestPayment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_157

Name: TMP_157 Function: getInterestPayment
Num: 2, 2
Den: 1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_157
RETURN

Name: TMP_157 Function: getInterestPayment
Num: 2, 2
Den: 1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getInterestPayment":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: getInterestPayment

Name: TMP_157 Function: getInterestPayment
Num: 2, 2
Den: 1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getDebtLoading
Function name: getDebtLoading
Function Visibility (test): public
collateralAsset
Finding type for collateralAsset...
address
Check copy_toekn_tuple
(-2, -1, 0, 'collateralContract')
----
Type: address
address
Final Type: address

Name: collateralAsset Function: getDebtLoading
Num: -2
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef
[*]Type fetched successfully
debtAsset
Finding type for debtAsset...
address
Check copy_toekn_tuple
(-2, -1, 0, 'debtContract')
----
Type: address
address
Final Type: address

Name: debtAsset Function: getDebtLoading
Num: -2
Den: -1
Norm: 0
LF: debtContract
Fields: 
Finance Type: undef
[*]Type fetched successfully
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: debtContract
    fields: []
    fintype: -1
cur_param: [[-2], [-1], 0, 'collateralContract', [], -1]
cur_param: [[-2], [-1], 0, 'debtContract', [], -1]
Its the same:
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: debtContract
    fields: []
    fintype: -1
0
Param: 0
    num: [-2]
    den: [-1]
    norm: 0
    link: collateralContract
    fields: []
    fintype: -1
Param: 1
    num: [-2]
    den: [-1]
    norm: 0
    link: debtContract
    fields: []
    fintype: -1
clearning node...
clearing ir...?
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
has variable
[i] collateralAsset cleared
clearing ir...?
debtAsset_1(address) := ϕ(['debtAsset_1'])
has variable
[i] debtAsset cleared
clearing ir...?
ROUTER_29(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_52(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
typecheckig node...
collateralAsset_1(address) := ϕ(['collateralAsset_1'])
Function name: getDebtLoading
Phi
[i]Type for collateralAsset

Name: collateralAsset Function: getDebtLoading
Num: -2
Den: -1
Norm: 0
LF: collateralContract
Fields: 
Finance Type: undef
done.
debtAsset_1(address) := ϕ(['debtAsset_1'])
Function name: getDebtLoading
Phi
[i]Type for debtAsset

Name: debtAsset Function: getDebtLoading
Num: -2
Den: -1
Norm: 0
LF: debtContract
Fields: 
Finance Type: undef
done.
ROUTER_29(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_0', 'ROUTER_28'])
Function name: getDebtLoading
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_52(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_0', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getDebtLoading
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_158 = CONVERT ROUTER_29 to iROUTER
has variable
[i] TMP_158 cleared
clearing ir...?
TMP_159(uint256) = HIGH_LEVEL_CALL, dest:TMP_158(iROUTER), function:getSystemDebt, arguments:['collateralAsset_1', 'debtAsset_1']  
has variable
[i] TMP_159 cleared
clearing ir...?
ROUTER_30(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_29', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
has variable
clearing ir...?
POOLS_53(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_52', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_debtIssued_1(uint256) := TMP_159(uint256)
has variable
[i] _debtIssued cleared
typecheckig node...
TMP_158 = CONVERT ROUTER_29 to iROUTER
Function name: getDebtLoading

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_158 Function: getDebtLoading
Num: 
Den: 
Norm: u
LF: ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: getDebtLoading
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_159(uint256) = HIGH_LEVEL_CALL, dest:TMP_158(iROUTER), function:getSystemDebt, arguments:['collateralAsset_1', 'debtAsset_1']  
Function name: getDebtLoading
High Call: getSystemDebt
func name:getSystemDebt
other func name:getSystemDebt
TMP_159
hlc contract name: ROUTER func_name: getSystemDebt
('c', [2], [-1], 0, None)
collateralAsset
debtAsset
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_159

Name: TMP_159 Function: getDebtLoading
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
ROUTER_30(address) := ϕ(['ROUTER_30', 'ROUTER_16', 'ROUTER_29', 'ROUTER_13', 'ROUTER_1', 'ROUTER_4', 'ROUTER_9', 'ROUTER_10', 'ROUTER_20', 'ROUTER_25', 'ROUTER_28'])
Function name: getDebtLoading
Phi
[i]Type for ROUTER

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
POOLS_53(address) := ϕ(['POOLS_9', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_52', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getDebtLoading
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_debtIssued_1(uint256) := TMP_159(uint256)
Function name: getDebtLoading
asgn

Name: TMP_159 Function: getDebtLoading
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _debtIssued Function: getDebtLoading
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _debtIssued

Name: _debtIssued Function: getDebtLoading
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_160 = CONVERT POOLS_53 to iPOOLS
has variable
[i] TMP_160 cleared
clearing ir...?
TMP_161(uint256) = HIGH_LEVEL_CALL, dest:TMP_160(iPOOLS), function:getTokenAmount, arguments:['debtAsset_1']  
has variable
[i] TMP_161 cleared
clearing ir...?
POOLS_54(address) := ϕ(['POOLS_9', 'POOLS_53', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
has variable
clearing ir...?
_debtDepth_1(uint256) := TMP_161(uint256)
has variable
[i] _debtDepth cleared
typecheckig node...
TMP_160 = CONVERT POOLS_53 to iPOOLS
Function name: getDebtLoading

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef

Name: TMP_160 Function: getDebtLoading
Num: 
Den: 
Norm: u
LF: POOLS
Fields: 
Finance Type: undef
[i]Type for TMP_160

Name: TMP_160 Function: getDebtLoading
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
TMP_161(uint256) = HIGH_LEVEL_CALL, dest:TMP_160(iPOOLS), function:getTokenAmount, arguments:['debtAsset_1']  
Function name: getDebtLoading
High Call: getTokenAmount
func name:getTokenAmount
other func name:getTokenAmount
TMP_161
hlc contract name: POOLS func_name: getTokenAmount
('c', [1], [-1], 0, None)
debtAsset
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_161

Name: TMP_161 Function: getDebtLoading
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
POOLS_54(address) := ϕ(['POOLS_9', 'POOLS_53', 'POOLS_35', 'POOLS_1', 'POOLS_26', 'POOLS_11', 'POOLS_21', 'POOLS_45', 'POOLS_31', 'POOLS_19', 'POOLS_32', 'POOLS_6', 'POOLS_47', 'POOLS_54', 'POOLS_10', 'POOLS_17', 'POOLS_12', 'POOLS_23', 'POOLS_15'])
Function name: getDebtLoading
Phi
[i]Type for POOLS

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
done.
_debtDepth_1(uint256) := TMP_161(uint256)
Function name: getDebtLoading
asgn

Name: TMP_161 Function: getDebtLoading
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _debtDepth Function: getDebtLoading
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _debtDepth

Name: _debtDepth Function: getDebtLoading
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = _debtIssued_1 (c)* 10000
has variable
[i] TMP_162 cleared
clearing ir...?
TMP_163(uint256) = TMP_162 (c)/ _debtDepth_1
has variable
[i] TMP_163 cleared
clearing ir...?
RETURN TMP_163
typecheckig node...
TMP_162(uint256) = _debtIssued_1 (c)* 10000
Function name: getDebtLoading
testing mul...
val: 10000
4
val: 10000
4
lnorm: 0 rnorm: 4
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _debtIssued Function: getDebtLoading
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: getDebtLoading
Num: 
Den: 
Norm: 4
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: getDebtLoading
Num: 2
Den: -1
Norm: 4
LF: None
Fields: 
Finance Type: undef
done.
TMP_163(uint256) = TMP_162 (c)/ _debtDepth_1
Function name: getDebtLoading
lnorm: 4 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_163 Function: getDebtLoading
Num: 
Den: 
Norm: 4
LF: None
Fields: 
Finance Type: undef

Name: PIC_61 Function: None
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_163 Function: getDebtLoading
Num: 
Den: 
Norm: 4
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_163

Name: TMP_163 Function: getDebtLoading
Num: 2
Den: 1
Norm: 4
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_163
RETURN

Name: TMP_163 Function: getDebtLoading
Num: 2
Den: 1
Norm: 4
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getDebtLoading":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: getDebtLoading

Name: TMP_163 Function: getDebtLoading
Num: 2
Den: 1
Norm: 4
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcPart
Function name: calcPart
Function Visibility (test): public
bp
Finding type for bp...
uint256
Check copy_toekn_tuple
(-1, -1, 4, None)
----
Type: uint256
uint256
Final Type: uint256

Name: bp Function: calcPart
Num: -1
Den: -1
Norm: 4
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
total
Finding type for total...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: total Function: calcPart
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
-100
Param: 0
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
bp_1(uint256) := ϕ(['TMP_58', 'basisPoints_1'])
has variable
[i] bp cleared
clearing ir...?
total_1(uint256) := ϕ(['targetPrice_1', 'protection_3'])
has variable
[i] total cleared
typecheckig node...
bp_1(uint256) := ϕ(['TMP_58', 'basisPoints_1'])
Function name: calcPart
Phi
[i]Type for bp

Name: bp Function: calcPart
Num: -1
Den: -1
Norm: 4
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['targetPrice_1', 'protection_3'])
Function name: calcPart
Phi
[i]Type for total

Name: total Function: calcPart
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(bool) = bp_1 <= 10000
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(bool) = bp_1 >= 0
has variable
[i] TMP_165 cleared
clearing ir...?
TMP_166(bool) = TMP_164 && TMP_165
has variable
[i] TMP_166 cleared
clearing ir...?
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,Must be correct BP)
typecheckig node...
TMP_164(bool) = bp_1 <= 10000
Function name: calcPart
testing lt...
val: 10000
4
val: 10000
4
lnorm: 4 rnorm: 4
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_164

Name: TMP_164 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(bool) = bp_1 >= 0
Function name: calcPart
testing gt...
val: 0
val: 0
lnorm: 4 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_165

Name: TMP_165 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = TMP_164 && TMP_165
Function name: calcPart
[i]Type for TMP_166

Name: TMP_166 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_167(None) = SOLIDITY_CALL require(bool,string)(TMP_166,Must be correct BP)
[i]Type for TMP_167

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
has variable
[i] TMP_168 cleared
clearing ir...?
RETURN TMP_168
typecheckig node...
TMP_168(uint256) = INTERNAL_CALL, Utils.calcShare(uint256,uint256,uint256)(bp_1,10000,total_1)
Function name: calcPart
Internal call...
calcShare
bp
10000
total
Function: calcShare
ic
val: 10000
4
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 4, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calcShare
Function Visibility: public
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_168

Name: TMP_168 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_168
RETURN

Name: TMP_168 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcPart":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcPart

Name: TMP_168 Function: calcPart
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcShare
Function name: calcShare
Function Visibility (test): public
part
Finding type for part...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: part Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
total
Finding type for total...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: total Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amount
Finding type for amount...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amount Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 4
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
has variable
[i] part cleared
clearing ir...?
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
has variable
[i] total cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
has variable
[i] amount cleared
typecheckig node...
part_1(uint256) := ϕ(['_units_1', '_baseAmount_1', 'bp_1', 'totalSupply_1', '_memberCollateral_1', 'debt_1', 'timeElapsed_1', '_duration_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
total_1(uint256) := ϕ(['TMP_81', '_memberDebt_1', 'maxSupply_1', 'TMP_111', 'timeForFullProtection_1', 'rewardReductionFactor_1', 'TMP_89', 'TMP_116', '_year_2', '_collateral_1'])
Function name: calcShare
Phi
[i]Type for total

Name: total Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_113', 'TMP_146', 'TMP_83', 'TMP_118', '_interestPaid_1', '_coverage_1', '_memberCollateral_1', 'amount_1', 'total_1', 'TMP_91'])
Function name: calcShare
Phi
[i]Type for amount

Name: amount Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_169(bool) = part_1 > total_1
has variable
[i] TMP_169 cleared
clearing ir...?
CONDITION TMP_169
typecheckig node...
TMP_169(bool) = part_1 > total_1
Function name: calcShare
testing gt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: total Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_169

Name: TMP_169 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_169
Condition...
Conidtion: 
TMP_169
TMP_169
clearning node...
clearing ir...?
part_2(uint256) := total_1(uint256)
has variable
[i] part cleared
typecheckig node...
part_2(uint256) := total_1(uint256)
Function name: calcShare
asgn

Name: total Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
part_3(uint256) := ϕ(['part_2', 'part_1'])
has variable
[i] part cleared
typecheckig node...
part_3(uint256) := ϕ(['part_2', 'part_1'])
Function name: calcShare
Phi
[i]Type for part

Name: part Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_170(bool) = total_1 > 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = total_1 > 0
Function name: calcShare
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_170

Name: TMP_170 Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_171(uint256) = amount_1 (c)* part_3
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(uint256) = TMP_171 (c)/ total_1
has variable
[i] TMP_172 cleared
clearing ir...?
share_1(uint256) := TMP_172(uint256)
has variable
[i] share cleared
typecheckig node...
TMP_171(uint256) = amount_1 (c)* part_3
Function name: calcShare
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: calcShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_172(uint256) = TMP_171 (c)/ total_1
Function name: calcShare
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_172 Function: calcShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_172

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
share_1(uint256) := TMP_172(uint256)
Function name: calcShare
asgn

Name: TMP_172 Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: share Function: calcShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for share

Name: share Function: calcShare
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calcShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcShare

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcSwapOutput
Function name: calcSwapOutput
Function Visibility (test): public
x
Finding type for x...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: x Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
X
Finding type for X...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: X Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Y
Finding type for Y...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: Y Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 'u', None, [], -1]
-100
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
x_1(uint256) := ϕ(['amount_1', 'amount_1'])
has variable
[i] x cleared
clearing ir...?
X_1(uint256) := ϕ(['_baseAmt_1', '_tokenAmt_1'])
has variable
[i] X cleared
clearing ir...?
Y_1(uint256) := ϕ(['_baseAmt_1', '_tokenAmt_1'])
has variable
[i] Y cleared
typecheckig node...
x_1(uint256) := ϕ(['amount_1', 'amount_1'])
Function name: calcSwapOutput
Phi
[i]Type for x

Name: x Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
X_1(uint256) := ϕ(['_baseAmt_1', '_tokenAmt_1'])
Function name: calcSwapOutput
Phi
[i]Type for X

Name: X Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
Y_1(uint256) := ϕ(['_baseAmt_1', '_tokenAmt_1'])
Function name: calcSwapOutput
Phi
[i]Type for Y

Name: Y Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_173(uint256) = x_1 (c)* X_1
has variable
[i] TMP_173 cleared
clearing ir...?
TMP_174(uint256) = TMP_173 (c)* Y_1
has variable
[i] TMP_174 cleared
clearing ir...?
numerator_1(uint256) := TMP_174(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_173(uint256) = x_1 (c)* X_1
Function name: calcSwapOutput
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: X Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_173 Function: calcSwapOutput
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_173

Name: TMP_173 Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_174(uint256) = TMP_173 (c)* Y_1
Function name: calcSwapOutput
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: Y Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_174 Function: calcSwapOutput
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_174

Name: TMP_174 Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_174(uint256)
Function name: calcSwapOutput
asgn

Name: TMP_174 Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_175(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_175 cleared
clearing ir...?
TMP_176(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_176 cleared
clearing ir...?
TMP_177(uint256) = TMP_175 (c)* TMP_176
has variable
[i] TMP_177 cleared
clearing ir...?
denominator_1(uint256) := TMP_177(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_175(uint256) = x_1 (c)+ X_1
Function name: calcSwapOutput

Name: TMP_175 Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: X Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_175 Function: calcSwapOutput
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_175

Name: TMP_175 Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_176(uint256) = x_1 (c)+ X_1
Function name: calcSwapOutput

Name: TMP_176 Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: X Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_176 Function: calcSwapOutput
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_176

Name: TMP_176 Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_177(uint256) = TMP_175 (c)* TMP_176
Function name: calcSwapOutput
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_176 Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_177 Function: calcSwapOutput
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_177

Name: TMP_177 Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_177(uint256)
Function name: calcSwapOutput
asgn

Name: TMP_177 Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calcSwapOutput
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_178(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_178 cleared
clearing ir...?
RETURN TMP_178
typecheckig node...
TMP_178(uint256) = numerator_1 (c)/ denominator_1
Function name: calcSwapOutput
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_178 Function: calcSwapOutput
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_178

Name: TMP_178 Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_178
RETURN

Name: TMP_178 Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcSwapOutput":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcSwapOutput

Name: TMP_178 Function: calcSwapOutput
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcSwapFee
Function name: calcSwapFee
Function Visibility (test): external
x
Finding type for x...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: x Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
X
Finding type for X...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: X Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Y
Finding type for Y...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: Y Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_179(uint256) = x_1 (c)* x_1
has variable
[i] TMP_179 cleared
clearing ir...?
TMP_180(uint256) = TMP_179 (c)* Y_1
has variable
[i] TMP_180 cleared
clearing ir...?
numerator_1(uint256) := TMP_180(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_179(uint256) = x_1 (c)* x_1
Function name: calcSwapFee
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_179 Function: calcSwapFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_179

Name: TMP_179 Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_180(uint256) = TMP_179 (c)* Y_1
Function name: calcSwapFee
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: Y Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_180 Function: calcSwapFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_180

Name: TMP_180 Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_180(uint256)
Function name: calcSwapFee
asgn

Name: TMP_180 Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calcSwapFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_181(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_181 cleared
clearing ir...?
TMP_182(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_182 cleared
clearing ir...?
TMP_183(uint256) = TMP_181 (c)* TMP_182
has variable
[i] TMP_183 cleared
clearing ir...?
denominator_1(uint256) := TMP_183(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_181(uint256) = x_1 (c)+ X_1
Function name: calcSwapFee

Name: TMP_181 Function: calcSwapFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: X Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_181 Function: calcSwapFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_181

Name: TMP_181 Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_182(uint256) = x_1 (c)+ X_1
Function name: calcSwapFee

Name: TMP_182 Function: calcSwapFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: X Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_182 Function: calcSwapFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_182

Name: TMP_182 Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_183(uint256) = TMP_181 (c)* TMP_182
Function name: calcSwapFee
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_182 Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_183 Function: calcSwapFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_183

Name: TMP_183 Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_183(uint256)
Function name: calcSwapFee
asgn

Name: TMP_183 Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calcSwapFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_184(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_184 cleared
clearing ir...?
RETURN TMP_184
typecheckig node...
TMP_184(uint256) = numerator_1 (c)/ denominator_1
Function name: calcSwapFee
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_184 Function: calcSwapFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_184

Name: TMP_184 Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_184
RETURN

Name: TMP_184 Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcSwapFee":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcSwapFee

Name: TMP_184 Function: calcSwapFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcSwapSlip
Function name: calcSwapSlip
Function Visibility (test): external
x
Finding type for x...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: x Function: calcSwapSlip
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
X
Finding type for X...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: X Function: calcSwapSlip
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_185(uint256) = x_1 (c)* 10000
has variable
[i] TMP_185 cleared
clearing ir...?
TMP_186(uint256) = x_1 (c)+ X_1
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187(uint256) = TMP_185 (c)/ TMP_186
has variable
[i] TMP_187 cleared
clearing ir...?
RETURN TMP_187
typecheckig node...
TMP_185(uint256) = x_1 (c)* 10000
Function name: calcSwapSlip
testing mul...
val: 10000
4
val: 10000
4
lnorm: 0 rnorm: 4
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 10000
4

Name: 10000 Function: None
Num: -1
Den: -1
Norm: 4
LF: None
Fields: 
Finance Type: undef

Name: TMP_185 Function: calcSwapSlip
Num: 
Den: 
Norm: 4
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_185

Name: TMP_185 Function: calcSwapSlip
Num: -1
Den: -1
Norm: 4
LF: None
Fields: 
Finance Type: undef
done.
TMP_186(uint256) = x_1 (c)+ X_1
Function name: calcSwapSlip

Name: TMP_186 Function: calcSwapSlip
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: X Function: calcSwapSlip
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_186 Function: calcSwapSlip
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_186

Name: TMP_186 Function: calcSwapSlip
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_187(uint256) = TMP_185 (c)/ TMP_186
Function name: calcSwapSlip
lnorm: 4 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_187 Function: calcSwapSlip
Num: 
Den: 
Norm: 4
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_187

Name: TMP_187 Function: calcSwapSlip
Num: -1
Den: -1
Norm: 4
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_187
RETURN

Name: TMP_187 Function: calcSwapSlip
Num: -1
Den: -1
Norm: 4
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcSwapSlip":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcSwapSlip

Name: TMP_187 Function: calcSwapSlip
Num: -1
Den: -1
Norm: 4
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcLiquidityUnits
Function name: calcLiquidityUnits
Function Visibility (test): external
b
Finding type for b...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: b Function: calcLiquidityUnits
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
B
Finding type for B...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: B Function: calcLiquidityUnits
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
t
Finding type for t...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: t Function: calcLiquidityUnits
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
T
Finding type for T...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: T Function: calcLiquidityUnits
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
P
Finding type for P...
uint256
Check copy_toekn_tuple
(3, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: P Function: calcLiquidityUnits
Num: 3
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [3]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [3]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
one_3(uint256) := ϕ(['one_2', 'one_0', 'one_4'])
has variable
typecheckig node...
one_3(uint256) := ϕ(['one_2', 'one_0', 'one_4'])
Function name: calcLiquidityUnits
Phi
[i]Type for one

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_188(bool) = P_1 == 0
has variable
[i] TMP_188 cleared
clearing ir...?
CONDITION TMP_188
typecheckig node...
TMP_188(bool) = P_1 == 0
Function name: calcLiquidityUnits
[i]Type for TMP_188

Name: TMP_188 Function: calcLiquidityUnits
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_188
Condition...
Conidtion: 
TMP_188
TMP_188
clearning node...
clearing ir...?
TMP_189(uint256) = INTERNAL_CALL, Utils.getSlipAdustment(uint256,uint256,uint256,uint256)(b_1,B_1,t_1,T_1)
has variable
[i] TMP_189 cleared
clearing ir...?
slipAdjustment_1(uint256) := TMP_189(uint256)
has variable
[i] slipAdjustment cleared
typecheckig node...
TMP_189(uint256) = INTERNAL_CALL, Utils.getSlipAdustment(uint256,uint256,uint256,uint256)(b_1,B_1,t_1,T_1)
Function name: calcLiquidityUnits
Internal call...
getSlipAdustment
b
B
t
T
Function: getSlipAdustment
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[1], [-1], 0, None, [], -1]
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
added
xyz
Function name: getSlipAdustment
Function Visibility: public
clearning node...
clearing ir...?
b_1(uint256) := ϕ(['b_1'])
has variable
[i] b cleared
clearing ir...?
B_1(uint256) := ϕ(['B_1'])
has variable
[i] B cleared
clearing ir...?
t_1(uint256) := ϕ(['t_1'])
has variable
[i] t cleared
clearing ir...?
T_1(uint256) := ϕ(['T_1'])
has variable
[i] T cleared
clearing ir...?
one_5(uint256) := ϕ(['one_2', 'one_0', 'one_4'])
has variable
typecheckig node...
b_1(uint256) := ϕ(['b_1'])
Function name: getSlipAdustment
Phi
[i]Type for b

Name: b Function: getSlipAdustment
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
B_1(uint256) := ϕ(['B_1'])
Function name: getSlipAdustment
Phi
[i]Type for B

Name: B Function: getSlipAdustment
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
t_1(uint256) := ϕ(['t_1'])
Function name: getSlipAdustment
Phi
[i]Type for t

Name: t Function: getSlipAdustment
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
T_1(uint256) := ϕ(['T_1'])
Function name: getSlipAdustment
Phi
[i]Type for T

Name: T Function: getSlipAdustment
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
one_5(uint256) := ϕ(['one_2', 'one_0', 'one_4'])
Function name: getSlipAdustment
Phi
[i]Type for one

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_199(uint256) = B_1 (c)* t_1
has variable
[i] TMP_199 cleared
clearing ir...?
part1_1(uint256) := TMP_199(uint256)
has variable
[i] part1 cleared
typecheckig node...
TMP_199(uint256) = B_1 (c)* t_1
Function name: getSlipAdustment
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_69 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_199 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_199

Name: TMP_199 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
part1_1(uint256) := TMP_199(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_199 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part1 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part1

Name: part1 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_200(uint256) = b_1 (c)* T_1
has variable
[i] TMP_200 cleared
clearing ir...?
part2_1(uint256) := TMP_200(uint256)
has variable
[i] part2 cleared
typecheckig node...
TMP_200(uint256) = b_1 (c)* T_1
Function name: getSlipAdustment
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_70 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_200 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_200

Name: TMP_200 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
part2_1(uint256) := TMP_200(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_200 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part2 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part2

Name: part2 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_201(uint256) = b_1 (c)* 2
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(uint256) = TMP_201 (c)+ B_1
has variable
[i] TMP_202 cleared
clearing ir...?
part3_1(uint256) := TMP_202(uint256)
has variable
[i] part3 cleared
typecheckig node...
TMP_201(uint256) = b_1 (c)* 2
Function name: getSlipAdustment
testing mul...
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: b Function: getSlipAdustment
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_201 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_201

Name: TMP_201 Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_202(uint256) = TMP_201 (c)+ B_1
Function name: getSlipAdustment

Name: TMP_202 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_201 Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_202 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_202

Name: TMP_202 Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part3_1(uint256) := TMP_202(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_202 Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part3 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part3

Name: part3 Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_203(uint256) = t_1 (c)+ T_1
has variable
[i] TMP_203 cleared
clearing ir...?
part4_1(uint256) := TMP_203(uint256)
has variable
[i] part4 cleared
typecheckig node...
TMP_203(uint256) = t_1 (c)+ T_1
Function name: getSlipAdustment

Name: TMP_203 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: t Function: getSlipAdustment
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_203 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: getSlipAdustment
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
part4_1(uint256) := TMP_203(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_203 Function: getSlipAdustment
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part4 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part4

Name: part4 Function: getSlipAdustment
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_204(bool) = part1_1 > part2_1
has variable
[i] TMP_204 cleared
clearing ir...?
CONDITION TMP_204
typecheckig node...
TMP_204(bool) = part1_1 > part2_1
Function name: getSlipAdustment
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part2 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
False
[i]Type for TMP_204

Name: TMP_204 Function: getSlipAdustment
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_204
Condition...
Conidtion: 
TMP_204
TMP_204
clearning node...
clearing ir...?
TMP_205(uint256) = part1_1 (c)- part2_1
has variable
[i] TMP_205 cleared
clearing ir...?
numerator_2(uint256) := TMP_205(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_205(uint256) = part1_1 (c)- part2_1
Function name: getSlipAdustment
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part1 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part2 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part1 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_205 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_205

Name: TMP_205 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_2(uint256) := TMP_205(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_205 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
numerator_3(uint256) := ϕ(['numerator_2', 'numerator_1'])
has variable
[i] numerator cleared
typecheckig node...
numerator_3(uint256) := ϕ(['numerator_2', 'numerator_1'])
Function name: getSlipAdustment
Phi
[i]Type for numerator

Name: numerator Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_206(uint256) = part2_1 (c)- part1_1
has variable
[i] TMP_206 cleared
clearing ir...?
numerator_1(uint256) := TMP_206(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_206(uint256) = part2_1 (c)- part1_1
Function name: getSlipAdustment
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part2 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part1 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: part2 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_206 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_206

Name: TMP_206 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_206(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_206 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_207(uint256) = part3_1 (c)* part4_1
has variable
[i] TMP_207 cleared
clearing ir...?
denominator_1(uint256) := TMP_207(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_207(uint256) = part3_1 (c)* part4_1
Function name: getSlipAdustment
testing mul...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_71 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_207 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_207

Name: TMP_207 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_207(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_207 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_208(uint256) = numerator_3 (c)* one_5
has variable
[i] TMP_208 cleared
clearing ir...?
TMP_209(uint256) = TMP_208 (c)/ denominator_1
has variable
[i] TMP_209 cleared
clearing ir...?
TMP_210(uint256) = one_5 (c)- TMP_209
has variable
[i] TMP_210 cleared
clearing ir...?
RETURN TMP_210
typecheckig node...
TMP_208(uint256) = numerator_3 (c)* one_5
Function name: getSlipAdustment
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: numerator Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_208 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_208

Name: TMP_208 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_209(uint256) = TMP_208 (c)/ denominator_1
Function name: getSlipAdustment
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_209 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_72 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_209 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_209

Name: TMP_209 Function: getSlipAdustment
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_210(uint256) = one_5 (c)- TMP_209
Function name: getSlipAdustment
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_209 Function: getSlipAdustment
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_209 Function: getSlipAdustment
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_210 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_210

Name: TMP_210 Function: getSlipAdustment
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_210
RETURN

Name: TMP_210 Function: getSlipAdustment
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getSlipAdustment":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: getSlipAdustment

Name: TMP_210 Function: getSlipAdustment
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_189

Name: TMP_189 Function: calcLiquidityUnits
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
slipAdjustment_1(uint256) := TMP_189(uint256)
Function name: calcLiquidityUnits
asgn

Name: TMP_189 Function: calcLiquidityUnits
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: slipAdjustment Function: calcLiquidityUnits
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for slipAdjustment

Name: slipAdjustment Function: calcLiquidityUnits
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_190(uint256) = t_1 (c)* B_1
has variable
[i] TMP_190 cleared
clearing ir...?
part1_1(uint256) := TMP_190(uint256)
has variable
[i] part1 cleared
typecheckig node...
TMP_190(uint256) = t_1 (c)* B_1
Function name: calcLiquidityUnits
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_74 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_190 Function: calcLiquidityUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_190

Name: TMP_190 Function: calcLiquidityUnits
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part1_1(uint256) := TMP_190(uint256)
Function name: calcLiquidityUnits
asgn

Name: TMP_190 Function: calcLiquidityUnits
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part1 Function: calcLiquidityUnits
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part1

Name: part1 Function: calcLiquidityUnits
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN b_1
typecheckig node...
RETURN b_1
RETURN

Name: b Function: calcLiquidityUnits
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TMP_191(uint256) = T_1 (c)* b_1
has variable
[i] TMP_191 cleared
clearing ir...?
part2_1(uint256) := TMP_191(uint256)
has variable
[i] part2 cleared
typecheckig node...
TMP_191(uint256) = T_1 (c)* b_1
Function name: calcLiquidityUnits
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_75 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_191 Function: calcLiquidityUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_191

Name: TMP_191 Function: calcLiquidityUnits
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part2_1(uint256) := TMP_191(uint256)
Function name: calcLiquidityUnits
asgn

Name: TMP_191 Function: calcLiquidityUnits
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part2 Function: calcLiquidityUnits
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part2

Name: part2 Function: calcLiquidityUnits
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_192(uint256) = T_1 (c)* B_1
has variable
[i] TMP_192 cleared
clearing ir...?
TMP_193(uint256) = TMP_192 (c)* 2
has variable
[i] TMP_193 cleared
clearing ir...?
part3_1(uint256) := TMP_193(uint256)
has variable
[i] part3 cleared
typecheckig node...
TMP_192(uint256) = T_1 (c)* B_1
Function name: calcLiquidityUnits
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_76 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_192 Function: calcLiquidityUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_192

Name: TMP_192 Function: calcLiquidityUnits
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_193(uint256) = TMP_192 (c)* 2
Function name: calcLiquidityUnits
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_192 Function: calcLiquidityUnits
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_193 Function: calcLiquidityUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_193

Name: TMP_193 Function: calcLiquidityUnits
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part3_1(uint256) := TMP_193(uint256)
Function name: calcLiquidityUnits
asgn

Name: TMP_193 Function: calcLiquidityUnits
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part3 Function: calcLiquidityUnits
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part3

Name: part3 Function: calcLiquidityUnits
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_194(uint256) = P_1 (c)* part1_1
has variable
[i] TMP_194 cleared
clearing ir...?
TMP_195(uint256) = TMP_194 (c)+ part2_1
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = TMP_195 (c)/ part3_1
has variable
[i] TMP_196 cleared
clearing ir...?
_units_1(uint256) := TMP_196(uint256)
has variable
[i] _units cleared
typecheckig node...
TMP_194(uint256) = P_1 (c)* part1_1
Function name: calcLiquidityUnits
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_77 Function: None
Num: 3, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_194 Function: calcLiquidityUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_194

Name: TMP_194 Function: calcLiquidityUnits
Num: 3, 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_195(uint256) = TMP_194 (c)+ part2_1
Function name: calcLiquidityUnits

Name: TMP_195 Function: calcLiquidityUnits
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
Error with TMP_195 in function calcLiquidityUnits
Error with: TMP_195 in function calcLiquidityUnits
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f13719fc760>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f1371a47460>]
[i]Type for TMP_195

Name: TMP_195 Function: calcLiquidityUnits
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_196(uint256) = TMP_195 (c)/ part3_1
Function name: calcLiquidityUnits
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_196 Function: calcLiquidityUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_79 Function: None
Num: -1
Den: 2, 1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_196

Name: TMP_196 Function: calcLiquidityUnits
Num: -1
Den: 2, 1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_units_1(uint256) := TMP_196(uint256)
Function name: calcLiquidityUnits
asgn

Name: TMP_196 Function: calcLiquidityUnits
Num: -1
Den: 2, 1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _units Function: calcLiquidityUnits
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _units

Name: _units Function: calcLiquidityUnits
Num: -1
Den: 2, 1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_197(uint256) = _units_1 (c)* slipAdjustment_1
has variable
[i] TMP_197 cleared
clearing ir...?
TMP_198(uint256) = TMP_197 (c)/ one_4
has variable
[i] TMP_198 cleared
clearing ir...?
RETURN TMP_198
typecheckig node...
TMP_197(uint256) = _units_1 (c)* slipAdjustment_1
Function name: calcLiquidityUnits
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _units Function: calcLiquidityUnits
Num: -1
Den: 2, 1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_197 Function: calcLiquidityUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_197

Name: TMP_197 Function: calcLiquidityUnits
Num: -1
Den: 2, 1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_198(uint256) = TMP_197 (c)/ one_4
Function name: calcLiquidityUnits
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_198 Function: calcLiquidityUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_197 Function: calcLiquidityUnits
Num: -1
Den: 2, 1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_198 Function: calcLiquidityUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_198

Name: TMP_198 Function: calcLiquidityUnits
Num: -1
Den: 2, 1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_198
RETURN

Name: TMP_198 Function: calcLiquidityUnits
Num: -1
Den: 2, 1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcLiquidityUnits":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcLiquidityUnits

Name: TMP_198 Function: calcLiquidityUnits
Num: -1
Den: 2, 1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getSlipAdustment
Function name: getSlipAdustment
Function Visibility (test): public
b
Finding type for b...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: b Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
B
Finding type for B...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: B Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
t
Finding type for t...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: t Function: getSlipAdustment
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
T
Finding type for T...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: T Function: getSlipAdustment
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
b_1(uint256) := ϕ(['b_1'])
has variable
[i] b cleared
clearing ir...?
B_1(uint256) := ϕ(['B_1'])
has variable
[i] B cleared
clearing ir...?
t_1(uint256) := ϕ(['t_1'])
has variable
[i] t cleared
clearing ir...?
T_1(uint256) := ϕ(['T_1'])
has variable
[i] T cleared
clearing ir...?
one_5(uint256) := ϕ(['one_2', 'one_0', 'one_4'])
has variable
typecheckig node...
b_1(uint256) := ϕ(['b_1'])
Function name: getSlipAdustment
Phi
[i]Type for b

Name: b Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
B_1(uint256) := ϕ(['B_1'])
Function name: getSlipAdustment
Phi
[i]Type for B

Name: B Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
t_1(uint256) := ϕ(['t_1'])
Function name: getSlipAdustment
Phi
[i]Type for t

Name: t Function: getSlipAdustment
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
T_1(uint256) := ϕ(['T_1'])
Function name: getSlipAdustment
Phi
[i]Type for T

Name: T Function: getSlipAdustment
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
one_5(uint256) := ϕ(['one_2', 'one_0', 'one_4'])
Function name: getSlipAdustment
Phi
[i]Type for one

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_199(uint256) = B_1 (c)* t_1
has variable
[i] TMP_199 cleared
clearing ir...?
part1_1(uint256) := TMP_199(uint256)
has variable
[i] part1 cleared
typecheckig node...
TMP_199(uint256) = B_1 (c)* t_1
Function name: getSlipAdustment
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_81 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_199 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_199

Name: TMP_199 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part1_1(uint256) := TMP_199(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_199 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part1 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part1

Name: part1 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_200(uint256) = b_1 (c)* T_1
has variable
[i] TMP_200 cleared
clearing ir...?
part2_1(uint256) := TMP_200(uint256)
has variable
[i] part2 cleared
typecheckig node...
TMP_200(uint256) = b_1 (c)* T_1
Function name: getSlipAdustment
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_82 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_200 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_200

Name: TMP_200 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part2_1(uint256) := TMP_200(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_200 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part2 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part2

Name: part2 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_201(uint256) = b_1 (c)* 2
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(uint256) = TMP_201 (c)+ B_1
has variable
[i] TMP_202 cleared
clearing ir...?
part3_1(uint256) := TMP_202(uint256)
has variable
[i] part3 cleared
typecheckig node...
TMP_201(uint256) = b_1 (c)* 2
Function name: getSlipAdustment
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: b Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_201 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_201

Name: TMP_201 Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_202(uint256) = TMP_201 (c)+ B_1
Function name: getSlipAdustment

Name: TMP_202 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_201 Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_202 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_202

Name: TMP_202 Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part3_1(uint256) := TMP_202(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_202 Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part3 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part3

Name: part3 Function: getSlipAdustment
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_203(uint256) = t_1 (c)+ T_1
has variable
[i] TMP_203 cleared
clearing ir...?
part4_1(uint256) := TMP_203(uint256)
has variable
[i] part4 cleared
typecheckig node...
TMP_203(uint256) = t_1 (c)+ T_1
Function name: getSlipAdustment

Name: TMP_203 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: t Function: getSlipAdustment
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_203 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: getSlipAdustment
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part4_1(uint256) := TMP_203(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_203 Function: getSlipAdustment
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part4 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part4

Name: part4 Function: getSlipAdustment
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_204(bool) = part1_1 > part2_1
has variable
[i] TMP_204 cleared
clearing ir...?
CONDITION TMP_204
typecheckig node...
TMP_204(bool) = part1_1 > part2_1
Function name: getSlipAdustment
testing gt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part2 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
False
[i]Type for TMP_204

Name: TMP_204 Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_204
Condition...
Conidtion: 
TMP_204
TMP_204
clearning node...
clearing ir...?
TMP_205(uint256) = part1_1 (c)- part2_1
has variable
[i] TMP_205 cleared
clearing ir...?
numerator_2(uint256) := TMP_205(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_205(uint256) = part1_1 (c)- part2_1
Function name: getSlipAdustment
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part1 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part2 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part1 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_205 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_205

Name: TMP_205 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numerator_2(uint256) := TMP_205(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_205 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
numerator_3(uint256) := ϕ(['numerator_2', 'numerator_1'])
has variable
[i] numerator cleared
typecheckig node...
numerator_3(uint256) := ϕ(['numerator_2', 'numerator_1'])
Function name: getSlipAdustment
Phi
[i]Type for numerator

Name: numerator Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_206(uint256) = part2_1 (c)- part1_1
has variable
[i] TMP_206 cleared
clearing ir...?
numerator_1(uint256) := TMP_206(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_206(uint256) = part2_1 (c)- part1_1
Function name: getSlipAdustment
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part2 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part1 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part2 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_206 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_206

Name: TMP_206 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_206(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_206 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_207(uint256) = part3_1 (c)* part4_1
has variable
[i] TMP_207 cleared
clearing ir...?
denominator_1(uint256) := TMP_207(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_207(uint256) = part3_1 (c)* part4_1
Function name: getSlipAdustment
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_83 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_207 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_207

Name: TMP_207 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_207(uint256)
Function name: getSlipAdustment
asgn

Name: TMP_207 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: getSlipAdustment
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_208(uint256) = numerator_3 (c)* one_5
has variable
[i] TMP_208 cleared
clearing ir...?
TMP_209(uint256) = TMP_208 (c)/ denominator_1
has variable
[i] TMP_209 cleared
clearing ir...?
TMP_210(uint256) = one_5 (c)- TMP_209
has variable
[i] TMP_210 cleared
clearing ir...?
RETURN TMP_210
typecheckig node...
TMP_208(uint256) = numerator_3 (c)* one_5
Function name: getSlipAdustment
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: numerator Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_208 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_208

Name: TMP_208 Function: getSlipAdustment
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_209(uint256) = TMP_208 (c)/ denominator_1
Function name: getSlipAdustment
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_209 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_84 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_209 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_209

Name: TMP_209 Function: getSlipAdustment
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_210(uint256) = one_5 (c)- TMP_209
Function name: getSlipAdustment
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_209 Function: getSlipAdustment
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_209 Function: getSlipAdustment
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_210 Function: getSlipAdustment
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_210

Name: TMP_210 Function: getSlipAdustment
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_210
RETURN

Name: TMP_210 Function: getSlipAdustment
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getSlipAdustment":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: getSlipAdustment

Name: TMP_210 Function: getSlipAdustment
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcSynthUnits
Function name: calcSynthUnits
Function Visibility (test): external
b
Finding type for b...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: b Function: calcSynthUnits
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
B
Finding type for B...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: B Function: calcSynthUnits
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
P
Finding type for P...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: P Function: calcSynthUnits
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_211(uint256) = P_1 (c)* b_1
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(uint256) = b_1 (c)+ B_1
has variable
[i] TMP_212 cleared
clearing ir...?
TMP_213(uint256) = 2 (c)* TMP_212
has variable
[i] TMP_213 cleared
clearing ir...?
TMP_214(uint256) = TMP_211 (c)/ TMP_213
has variable
[i] TMP_214 cleared
clearing ir...?
RETURN TMP_214
typecheckig node...
TMP_211(uint256) = P_1 (c)* b_1
Function name: calcSynthUnits
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: b Function: calcSynthUnits
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_211 Function: calcSynthUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_211

Name: TMP_211 Function: calcSynthUnits
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(uint256) = b_1 (c)+ B_1
Function name: calcSynthUnits

Name: TMP_212 Function: calcSynthUnits
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: b Function: calcSynthUnits
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_212 Function: calcSynthUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_212

Name: TMP_212 Function: calcSynthUnits
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_213(uint256) = 2 (c)* TMP_212
Function name: calcSynthUnits
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_212 Function: calcSynthUnits
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_213 Function: calcSynthUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_213

Name: TMP_213 Function: calcSynthUnits
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_214(uint256) = TMP_211 (c)/ TMP_213
Function name: calcSynthUnits
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_214 Function: calcSynthUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_86 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_214 Function: calcSynthUnits
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_214

Name: TMP_214 Function: calcSynthUnits
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_214
RETURN

Name: TMP_214 Function: calcSynthUnits
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcSynthUnits":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcSynthUnits

Name: TMP_214 Function: calcSynthUnits
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcAsymmetricShare
Function name: calcAsymmetricShare
Function Visibility (test): public
u
Finding type for u...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: u Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
U
Finding type for U...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: U Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
A
Finding type for A...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: A Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Param: 0
    num: [1]
    den: [-1]
    norm: -4
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], -4, None, [], -1]
-100
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
u_1(uint256) := ϕ(['_collateralAdjusted_1'])
has variable
[i] u cleared
clearing ir...?
U_1(uint256) := ϕ(['TMP_126'])
has variable
[i] U cleared
clearing ir...?
A_1(uint256) := ϕ(['TMP_128'])
has variable
[i] A cleared
typecheckig node...
u_1(uint256) := ϕ(['_collateralAdjusted_1'])
Function name: calcAsymmetricShare
Phi
[i]Type for u

Name: u Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
U_1(uint256) := ϕ(['TMP_126'])
Function name: calcAsymmetricShare
Phi
[i]Type for U

Name: U Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
A_1(uint256) := ϕ(['TMP_128'])
Function name: calcAsymmetricShare
Phi
[i]Type for A

Name: A Function: calcAsymmetricShare
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_215(uint256) = u_1 (c)* A_1
has variable
[i] TMP_215 cleared
clearing ir...?
part1_1(uint256) := TMP_215(uint256)
has variable
[i] part1 cleared
typecheckig node...
TMP_215(uint256) = u_1 (c)* A_1
Function name: calcAsymmetricShare
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_88 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_215 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_215

Name: TMP_215 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part1_1(uint256) := TMP_215(uint256)
Function name: calcAsymmetricShare
asgn

Name: TMP_215 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part1 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part1

Name: part1 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_216(uint256) = U_1 (c)* U_1
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(uint256) = TMP_216 (c)* 2
has variable
[i] TMP_217 cleared
clearing ir...?
part2_1(uint256) := TMP_217(uint256)
has variable
[i] part2 cleared
typecheckig node...
TMP_216(uint256) = U_1 (c)* U_1
Function name: calcAsymmetricShare
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_89 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_216 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_216

Name: TMP_216 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_217(uint256) = TMP_216 (c)* 2
Function name: calcAsymmetricShare
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_216 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_217 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_217

Name: TMP_217 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part2_1(uint256) := TMP_217(uint256)
Function name: calcAsymmetricShare
asgn

Name: TMP_217 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part2 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part2

Name: part2 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_218(uint256) = U_1 (c)* u_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(uint256) = TMP_218 (c)* 2
has variable
[i] TMP_219 cleared
clearing ir...?
part3_1(uint256) := TMP_219(uint256)
has variable
[i] part3 cleared
typecheckig node...
TMP_218(uint256) = U_1 (c)* u_1
Function name: calcAsymmetricShare
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_90 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_218 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_218

Name: TMP_218 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_219(uint256) = TMP_218 (c)* 2
Function name: calcAsymmetricShare
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_218 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_219 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_219

Name: TMP_219 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part3_1(uint256) := TMP_219(uint256)
Function name: calcAsymmetricShare
asgn

Name: TMP_219 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part3 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part3

Name: part3 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_220(uint256) = u_1 (c)* u_1
has variable
[i] TMP_220 cleared
clearing ir...?
part4_1(uint256) := TMP_220(uint256)
has variable
[i] part4 cleared
typecheckig node...
TMP_220(uint256) = u_1 (c)* u_1
Function name: calcAsymmetricShare
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_91 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_220 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_220

Name: TMP_220 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part4_1(uint256) := TMP_220(uint256)
Function name: calcAsymmetricShare
asgn

Name: TMP_220 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part4 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part4

Name: part4 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_221(uint256) = part1_1 (c)* part2_1
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(uint256) = TMP_221 (c)- part3_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(uint256) = TMP_222 (c)+ part4_1
has variable
[i] TMP_223 cleared
clearing ir...?
numerator_1(uint256) := TMP_223(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_221(uint256) = part1_1 (c)* part2_1
Function name: calcAsymmetricShare
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_92 Function: None
Num: 1, 1, 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_221 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_221

Name: TMP_221 Function: calcAsymmetricShare
Num: 1, 1, 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_222(uint256) = TMP_221 (c)- part3_1
Function name: calcAsymmetricShare
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_221 Function: calcAsymmetricShare
Num: 1, 1, 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part3 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Error with TMP_222 in function calcAsymmetricShare
Error with: TMP_222 in function calcAsymmetricShare
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f13719fc760>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f1371a47460>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f13719fc640>]
[i]Type for TMP_222

Name: TMP_222 Function: calcAsymmetricShare
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_223(uint256) = TMP_222 (c)+ part4_1
Function name: calcAsymmetricShare

Name: TMP_223 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: part4 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_223 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_223

Name: TMP_223 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_223(uint256)
Function name: calcAsymmetricShare
asgn

Name: TMP_223 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_224(uint256) = U_1 (c)* U_1
has variable
[i] TMP_224 cleared
clearing ir...?
TMP_225(uint256) = TMP_224 (c)* U_1
has variable
[i] TMP_225 cleared
clearing ir...?
part5_1(uint256) := TMP_225(uint256)
has variable
[i] part5 cleared
typecheckig node...
TMP_224(uint256) = U_1 (c)* U_1
Function name: calcAsymmetricShare
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_93 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_224 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_224

Name: TMP_224 Function: calcAsymmetricShare
Num: 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_225(uint256) = TMP_224 (c)* U_1
Function name: calcAsymmetricShare
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_94 Function: None
Num: 1, 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_225 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_225

Name: TMP_225 Function: calcAsymmetricShare
Num: 1, 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
part5_1(uint256) := TMP_225(uint256)
Function name: calcAsymmetricShare
asgn

Name: TMP_225 Function: calcAsymmetricShare
Num: 1, 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: part5 Function: calcAsymmetricShare
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for part5

Name: part5 Function: calcAsymmetricShare
Num: 1, 1, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_226(uint256) = numerator_1 (c)/ part5_1
has variable
[i] TMP_226 cleared
clearing ir...?
RETURN TMP_226
typecheckig node...
TMP_226(uint256) = numerator_1 (c)/ part5_1
Function name: calcAsymmetricShare
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_226 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_95 Function: None
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_226 Function: calcAsymmetricShare
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_226

Name: TMP_226 Function: calcAsymmetricShare
Num: -1
Den: 1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_226
RETURN

Name: TMP_226 Function: calcAsymmetricShare
Num: -1
Den: 1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calcAsymmetricShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcAsymmetricShare

Name: TMP_226 Function: calcAsymmetricShare
Num: -1
Den: 1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calcCoverage
Function name: calcCoverage
Function Visibility (test): public
B0
Finding type for B0...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: B0 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
T0
Finding type for T0...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: T0 Function: calcCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
B1
Finding type for B1...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: B1 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
T1
Finding type for T1...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: T1 Function: calcCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
-100
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
B0_1(uint256) := ϕ(['_B0_1'])
has variable
[i] B0 cleared
clearing ir...?
T0_1(uint256) := ϕ(['_T0_1'])
has variable
[i] T0 cleared
clearing ir...?
B1_1(uint256) := ϕ(['_B1_1'])
has variable
[i] B1 cleared
clearing ir...?
T1_1(uint256) := ϕ(['_T1_1'])
has variable
[i] T1 cleared
typecheckig node...
B0_1(uint256) := ϕ(['_B0_1'])
Function name: calcCoverage
Phi
[i]Type for B0

Name: B0 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
T0_1(uint256) := ϕ(['_T0_1'])
Function name: calcCoverage
Phi
[i]Type for T0

Name: T0 Function: calcCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
B1_1(uint256) := ϕ(['_B1_1'])
Function name: calcCoverage
Phi
[i]Type for B1

Name: B1 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
T1_1(uint256) := ϕ(['_T1_1'])
Function name: calcCoverage
Phi
[i]Type for T1

Name: T1 Function: calcCoverage
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_227(bool) = B0_1 > 0
has variable
[i] TMP_227 cleared
clearing ir...?
TMP_228(bool) = T1_1 > 0
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(bool) = TMP_227 && TMP_228
has variable
[i] TMP_229 cleared
clearing ir...?
CONDITION TMP_229
typecheckig node...
TMP_227(bool) = B0_1 > 0
Function name: calcCoverage
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_227

Name: TMP_227 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_228(bool) = T1_1 > 0
Function name: calcCoverage
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_228

Name: TMP_228 Function: calcCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_229(bool) = TMP_227 && TMP_228
Function name: calcCoverage
[i]Type for TMP_229

Name: TMP_229 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_229
Condition...
Conidtion: 
TMP_229
TMP_229
clearning node...
clearing ir...?
TMP_230(uint256) = T0_1 (c)* B1_1
has variable
[i] TMP_230 cleared
clearing ir...?
TMP_231(uint256) = TMP_230 (c)/ T1_1
has variable
[i] TMP_231 cleared
clearing ir...?
TMP_232(uint256) = B0_1 (c)+ TMP_231
has variable
[i] TMP_232 cleared
clearing ir...?
_depositValue_1(uint256) := TMP_232(uint256)
has variable
[i] _depositValue cleared
typecheckig node...
TMP_230(uint256) = T0_1 (c)* B1_1
Function name: calcCoverage
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_97 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_230 Function: calcCoverage
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_230

Name: TMP_230 Function: calcCoverage
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_231(uint256) = TMP_230 (c)/ T1_1
Function name: calcCoverage
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_231 Function: calcCoverage
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_98 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_231 Function: calcCoverage
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_231

Name: TMP_231 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_232(uint256) = B0_1 (c)+ TMP_231
Function name: calcCoverage

Name: TMP_232 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: B0 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_232 Function: calcCoverage
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_232

Name: TMP_232 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_depositValue_1(uint256) := TMP_232(uint256)
Function name: calcCoverage
asgn

Name: TMP_232 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _depositValue Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _depositValue

Name: _depositValue Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_233(uint256) = T1_1 (c)* B1_1
has variable
[i] TMP_233 cleared
clearing ir...?
TMP_234(uint256) = TMP_233 (c)/ T1_1
has variable
[i] TMP_234 cleared
clearing ir...?
TMP_235(uint256) = B1_1 (c)+ TMP_234
has variable
[i] TMP_235 cleared
clearing ir...?
_redemptionValue_1(uint256) := TMP_235(uint256)
has variable
[i] _redemptionValue cleared
typecheckig node...
TMP_233(uint256) = T1_1 (c)* B1_1
Function name: calcCoverage
testing mul...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_99 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_233 Function: calcCoverage
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_233

Name: TMP_233 Function: calcCoverage
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_234(uint256) = TMP_233 (c)/ T1_1
Function name: calcCoverage
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_234 Function: calcCoverage
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_100 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_234 Function: calcCoverage
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_234

Name: TMP_234 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_235(uint256) = B1_1 (c)+ TMP_234
Function name: calcCoverage

Name: TMP_235 Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: B1 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_235 Function: calcCoverage
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_235

Name: TMP_235 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_redemptionValue_1(uint256) := TMP_235(uint256)
Function name: calcCoverage
asgn

Name: TMP_235 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _redemptionValue Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _redemptionValue

Name: _redemptionValue Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_236(bool) = _redemptionValue_1 <= _depositValue_1
has variable
[i] TMP_236 cleared
clearing ir...?
CONDITION TMP_236
typecheckig node...
TMP_236(bool) = _redemptionValue_1 <= _depositValue_1
Function name: calcCoverage
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_236

Name: TMP_236 Function: calcCoverage
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_236
Condition...
Conidtion: 
TMP_236
TMP_236
clearning node...
clearing ir...?
TMP_237(uint256) = _depositValue_1 (c)- _redemptionValue_1
has variable
[i] TMP_237 cleared
clearing ir...?
coverage_1(uint256) := TMP_237(uint256)
has variable
[i] coverage cleared
typecheckig node...
TMP_237(uint256) = _depositValue_1 (c)- _redemptionValue_1
Function name: calcCoverage
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _depositValue Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _redemptionValue Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _depositValue Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_237 Function: calcCoverage
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_237

Name: TMP_237 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
coverage_1(uint256) := TMP_237(uint256)
Function name: calcCoverage
asgn

Name: TMP_237 Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: coverage Function: calcCoverage
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for coverage

Name: coverage Function: calcCoverage
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "calcCoverage":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calcCoverage

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: sortArray
wooo
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: slitherConstructorVariables
Function slitherConstructorVariables not marked
Mark Iterations TRUE, proceeding anyway
Function name: slitherConstructorVariables
Function Visibility (test): internal
State_var: POOLS
Finding type for POOLS...
address
Check copy_toekn_tuple
(-2, -1, 0, 'POOLS')
----
Type: address
address
Final Type: address

Name: POOLS Function: global
Num: -2
Den: -1
Norm: 0
LF: POOLS
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROUTER
Finding type for ROUTER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'ROUTER')
----
Type: address
address
Final Type: address

Name: ROUTER Function: global
Num: -2
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-2, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -2
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-2, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -2
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: FACTORY
Finding type for FACTORY...
address
Check copy_toekn_tuple
(-2, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: FACTORY Function: global
Num: -2
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: one
Finding type for one...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: one Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: inited
Finding type for inited...
bool
SKIP bool
State_var: _10k
Finding type for _10k...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _10k Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _year
Finding type for _year...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _year Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Errors: [<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f13719fc760>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f1371a47460>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f13719fc640>]
Seen contract: {'Utils': True} Contract name out: iERC20
[x] iERC20 not run
Seen contract: {'Utils': True, 'iERC20': True} Contract name out: iFACTORY
[x] iFACTORY not run
Seen contract: {'Utils': True, 'iERC20': True, 'iFACTORY': True} Contract name out: iPOOLS
[x] iPOOLS not run
Seen contract: {'Utils': True, 'iERC20': True, 'iFACTORY': True, 'iPOOLS': True} Contract name out: iROUTER
[x] iROUTER not run
Seen contract: {'Utils': True, 'iERC20': True, 'iFACTORY': True, 'iPOOLS': True, 'iROUTER': True} Contract name out: iSYNTH
[x] iSYNTH not run
Seen contract: {'Utils': True, 'iERC20': True, 'iFACTORY': True, 'iPOOLS': True, 'iROUTER': True, 'iSYNTH': True} Contract name out: iVADER
[x] iVADER not run
Seen contract: {'Utils': True, 'iERC20': True, 'iFACTORY': True, 'iPOOLS': True, 'iROUTER': True, 'iSYNTH': True, 'iVADER': True} Contract name out: console
[x] console not run
Function count: 57
