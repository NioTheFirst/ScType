VaderMath
contract name: VaderMath
WARNING!!!!
VaderMath_types.txt
Finance File not Found
"VaderMath_types.txt" opened successfully.
[*c], VaderMath



[xf], calculateSlipAdjustment

[xf], calculateLiquidityUnits

[xf], calculateLoss

[xf], calculateSwap

[xf], calculateSwapReverse

[xf], delta

[xf], pow

[xf], root



[t], global, ONE

[t], global, vaderDeposited

[t], global, vaderBalance

[t], global, assetDeposited

[t], global, assetBalance

[t], global, totalPoolUnits





[*] VaderMath run
Checking... calculateLiquidityUnits Visibility: public
[o] Marked
Checking... calculateSlipAdjustment Visibility: public
[o] Marked
Checking... calculateLoss Visibility: public
[o] Marked
Checking... calculateSwap Visibility: public
[o] Marked
Checking... calculateSwapReverse Visibility: public
[o] Marked
Checking... delta Visibility: public
[o] Marked
Checking... pow Visibility: public
[o] Marked
Checking... root Visibility: public
[o] Marked
Checking... slitherConstructorConstantVariables Visibility: internal
[x] Not visible 
State_var: ONE
Finding type for ONE...
uint256
Seen contract: {} Contract name out: VaderMath
[*] VaderMath run
Reading Function: calculateLiquidityUnits
wooo
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calculateSlipAdjustment
wooo
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calculateLoss
wooo
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calculateSwap
wooo
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calculateSwapReverse
wooo
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: delta
wooo
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: pow
wooo
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: root
wooo
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
Mark Iterations TRUE, proceeding anyway
Function name: slitherConstructorConstantVariables
Function Visibility (test): internal
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Errors: []
Function count: 0
BasePool
GasThrottle
UQ112x112
IBasePool
IAggregator
IERC20Extended
VaderMath
Ownable
ReentrancyGuard
IERC20
IERC20Permit
SafeERC20
ERC721
IERC721
IERC721Receiver
IERC721Metadata
Address
Context
Strings
ERC165
IERC165
Math
SignedMath
ProtocolConstants
contract name: BasePool
WARNING!!!!
BasePool_types.txt
Finance File not Found
"BasePool_types.txt" opened successfully.
[*c], BasePool



[xf], getReserves

[xf], mint

#[xf], swap



[sef], NATIVETOKEN, balanceOf, 1, {c, 1, -1, 0}

{c, 1, -1, 0}
['c', '1', '-1', '0']
[sef], FOREIGNTOKEN, balanceOf, 1, {c, 2, -1, 0}

{c, 2, -1, 0}
['c', '2', '-1', '0']
[sef], UQ112x112, encode, 1, {t, [1], [1], 1}

{t, [1], [1], 1}
['t', '[1]', '[1]', '1']
[sef], UQ112x112, uqdiv, 1, {t, [1], [2], 1}

{t, [1], [2], 1}
['t', '[1]', '[2]', '1']


[t], global, _balances, -1, -1, 0

[t], global, _NOT_ENTERED

[t], global, _owner, -1, -1, 0, OWNER

[t], global, _tokenApprovals

[t], global, _owners, -1, -1, 0

[t], global, _symbol

[t], global, _operatorApprovals

[t], global, foreignAsset, -1, -1, 0, FOREIGNTOKEN

[t], global, nativeAsset, -1, -1, 0, NATIVETOKEN

[t], global, positionId

[t], global, totalSupply

[t], global, positions

[t], global, _ENTERED

[t], global, _status

[t], global, _ONE_YEAR

[t], global, _blockTimestampLast

[t], global, priceForeignCumulativeLast

[t], global, priceNativeCumulativeLast

[t], global, _reserveForeign, 2, -1, 0

[t], global, _reserveNative, 1, -1, 0

[t], global, ONE

[t], global, _name



[t], swap, nativeAmountIn, 1, -1, 0

[t], swap, foreignAmountIn, 2, -1, 0

[t], swap, to, -1, -1, 0, FOREIGNTOKEN

[*] BasePool run
Checking... constructor Visibility: public
[x] No Binary
Checking... getReserves Visibility: public
[x] No Binary
Checking... name Visibility: public
[x] No Binary
Checking... mint Visibility: external
[o] Marked
Checking... _burn Visibility: internal
[x] Not visible 
Checking... swap Visibility: external
[x] No Binary
Checking... swap Visibility: public
[o] Marked
Checking... _update Visibility: internal
[x] Not visible 
Checking... slitherConstructorConstantVariables Visibility: internal
[x] Not visible 
State_var: _NOT_ENTERED
Finding type for _NOT_ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _NOT_ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: foreignAsset
Finding type for foreignAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'NATIVETOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(uint256 => IBasePool.Position)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => IBasePool.Position)
mapping(uint256 => IBasePool.Position)
IBasePool.Position
Final Type: IBasePool.Position
global
positions
creation
global
positions
liquidity
global
positions
originalNative
global
positions
originalForeign
FIELDS:
positions Fields:
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: totalSupply
Finding type for totalSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: totalSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ENTERED
Finding type for _ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _status
Finding type for _status...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _status Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _blockTimestampLast
Finding type for _blockTimestampLast...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint32
uint32
Final Type: uint32

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceForeignCumulativeLast
Finding type for priceForeignCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceNativeCumulativeLast
Finding type for priceNativeCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveForeign
Finding type for _reserveForeign...
uint112
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveForeign Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveNative
Finding type for _reserveNative...
uint112
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveNative Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owners
Finding type for _owners...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _owners Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positionId
Finding type for positionId...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: positionId Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _tokenApprovals
Finding type for _tokenApprovals...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _tokenApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _operatorApprovals
Finding type for _operatorApprovals...
mapping(address => mapping(address => bool))
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => mapping(address => bool))
mapping(address => mapping(address => bool))
mapping(address => bool)
bool
Final Type: bool

Name: _operatorApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
contract name: GasThrottle
WARNING!!!!
GasThrottle_types.txt
Finance File not Found
Type File not found.
[x] GasThrottle not run
contract name: UQ112x112
WARNING!!!!
UQ112x112_types.txt
Finance File not Found
Type File not found.
[x] UQ112x112 not run
contract name: IBasePool
WARNING!!!!
IBasePool_types.txt
Finance File not Found
Type File not found.
[x] IBasePool not run
contract name: IAggregator
WARNING!!!!
IAggregator_types.txt
Finance File not Found
Type File not found.
[x] IAggregator not run
contract name: IERC20Extended
WARNING!!!!
IERC20Extended_types.txt
Finance File not Found
Type File not found.
[x] IERC20Extended not run
contract name: VaderMath
WARNING!!!!
VaderMath_types.txt
Finance File not Found
"VaderMath_types.txt" opened successfully.
[*c], VaderMath



[xf], calculateSlipAdjustment

[xf], calculateLiquidityUnits

[xf], calculateLoss

[xf], calculateSwap

[xf], calculateSwapReverse

[xf], delta

[xf], pow

[xf], root



[t], global, ONE

[t], global, vaderDeposited

[t], global, vaderBalance

[t], global, assetDeposited

[t], global, assetBalance

[t], global, totalPoolUnits





[*] VaderMath run
Checking... calculateLiquidityUnits Visibility: public
[o] Marked
Checking... calculateSlipAdjustment Visibility: public
[o] Marked
Checking... calculateLoss Visibility: public
[o] Marked
Checking... calculateSwap Visibility: public
[o] Marked
Checking... calculateSwapReverse Visibility: public
[o] Marked
Checking... delta Visibility: public
[o] Marked
Checking... pow Visibility: public
[o] Marked
Checking... root Visibility: public
[o] Marked
Checking... slitherConstructorConstantVariables Visibility: internal
[x] Not visible 
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
contract name: Ownable
WARNING!!!!
Ownable_types.txt
Finance File not Found
Type File not found.
[x] Ownable not run
contract name: ReentrancyGuard
WARNING!!!!
ReentrancyGuard_types.txt
Finance File not Found
Type File not found.
[x] ReentrancyGuard not run
contract name: IERC20
WARNING!!!!
IERC20_types.txt
Finance File not Found
Type File not found.
[x] IERC20 not run
contract name: IERC20Permit
WARNING!!!!
IERC20Permit_types.txt
Finance File not Found
Type File not found.
[x] IERC20Permit not run
contract name: SafeERC20
WARNING!!!!
SafeERC20_types.txt
Finance File not Found
Type File not found.
[x] SafeERC20 not run
contract name: ERC721
WARNING!!!!
ERC721_types.txt
Finance File not Found
Type File not found.
[x] ERC721 not run
contract name: IERC721
WARNING!!!!
IERC721_types.txt
Finance File not Found
Type File not found.
[x] IERC721 not run
contract name: IERC721Receiver
WARNING!!!!
IERC721Receiver_types.txt
Finance File not Found
Type File not found.
[x] IERC721Receiver not run
contract name: IERC721Metadata
WARNING!!!!
IERC721Metadata_types.txt
Finance File not Found
Type File not found.
[x] IERC721Metadata not run
contract name: Address
WARNING!!!!
Address_types.txt
Finance File not Found
Type File not found.
[x] Address not run
contract name: Context
WARNING!!!!
Context_types.txt
Finance File not Found
Type File not found.
[x] Context not run
contract name: Strings
WARNING!!!!
Strings_types.txt
Finance File not Found
Type File not found.
[x] Strings not run
contract name: ERC165
WARNING!!!!
ERC165_types.txt
Finance File not Found
Type File not found.
[x] ERC165 not run
contract name: IERC165
WARNING!!!!
IERC165_types.txt
Finance File not Found
Type File not found.
[x] IERC165 not run
contract name: Math
WARNING!!!!
Math_types.txt
Finance File not Found
Type File not found.
[x] Math not run
contract name: SignedMath
WARNING!!!!
SignedMath_types.txt
Finance File not Found
Type File not found.
[x] SignedMath not run
contract name: ProtocolConstants
WARNING!!!!
ProtocolConstants_types.txt
Finance File not Found
Type File not found.
[x] ProtocolConstants not run
Seen contract: {'VaderMath': True} Contract name out: BasePool
[*] BasePool run
Reading Function: constructor
Function constructor not marked
Mark Iterations TRUE, proceeding anyway
Function name: constructor
Function Visibility (test): public
_nativeAsset
Finding type for _nativeAsset...
IERC20Extended
_foreignAsset
Finding type for _foreignAsset...
IERC20Extended
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, ERC721.constructor(string,string)(Vader LP,VLP)
typecheckig node...
INTERNAL_CALL, ERC721.constructor(string,string)(Vader LP,VLP)
Internal call...
constructor
Vader LP
VLP
Function: constructor
ic
done.
clearning node...
clearing ir...?
TMP_133 = CONVERT _nativeAsset_1 to IERC20
has variable
[i] TMP_133 cleared
clearing ir...?
nativeAsset_1(IERC20) := TMP_133(IERC20)
has variable
typecheckig node...
TMP_133 = CONVERT _nativeAsset_1 to IERC20
Function name: constructor

Name: _nativeAsset Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_133 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_133

Name: TMP_133 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeAsset_1(IERC20) := TMP_133(IERC20)
Function name: constructor
asgn

Name: TMP_133 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nativeAsset Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAsset

Name: nativeAsset Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_134 = CONVERT _foreignAsset_1 to IERC20
has variable
[i] TMP_134 cleared
clearing ir...?
foreignAsset_1(IERC20) := TMP_134(IERC20)
has variable
typecheckig node...
TMP_134 = CONVERT _foreignAsset_1 to IERC20
Function name: constructor

Name: _foreignAsset Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_134 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_134

Name: TMP_134 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAsset_1(IERC20) := TMP_134(IERC20)
Function name: constructor
asgn

Name: TMP_134 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignAsset Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignAsset

Name: foreignAsset Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_135(string) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20Extended), function:symbol, arguments:[]  
has variable
[i] TMP_135 cleared
clearing ir...?
TMP_136(bytes) = SOLIDITY_CALL abi.encodePacked()(Vader USDV /,TMP_135, LP)
clearing ir...?
TMP_137 = CONVERT TMP_136 to string
has variable
[i] TMP_137 cleared
clearing ir...?
calculatedName_1(string) := TMP_137(string)
has variable
[i] calculatedName cleared
typecheckig node...
TMP_135(string) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20Extended), function:symbol, arguments:[]  
Function name: constructor
High Call: symbol
func name:symbol
other func name:symbol
TMP_135
[i]Type for TMP_135

Name: TMP_135 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_136(bytes) = SOLIDITY_CALL abi.encodePacked()(Vader USDV /,TMP_135, LP)
[i]Type for TMP_136

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_137 = CONVERT TMP_136 to string
Function name: constructor

Name: TMP_136 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_137 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_137

Name: TMP_137 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_137 = CONVERT TMP_136 to string
XXXXX
calculatedName_1(string) := TMP_137(string)
Function name: constructor
asgn

Name: TMP_137 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: calculatedName Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for calculatedName

Name: calculatedName Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
calculatedName_1(string) := TMP_137(string)
XXXXX
clearning node...
clearing ir...?
_name_1(string) := calculatedName_1(string)
has variable
typecheckig node...
_name_1(string) := calculatedName_1(string)
Function name: constructor
asgn

Name: calculatedName Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _name Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _name

Name: _name Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_name_1(string) := calculatedName_1(string)
XXXXX
WORKLIST iteration 0 for function call "constructor":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
INTERNAL_CALL, ERC721.constructor(string,string)(Vader LP,VLP)
Internal call...
constructor
Vader LP
VLP
Function: constructor
ic
done.
typecheckig node...
TMP_133 = CONVERT _nativeAsset_1 to IERC20
Function name: constructor

Name: _nativeAsset Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_133 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_133

Name: TMP_133 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeAsset_1(IERC20) := TMP_133(IERC20)
Function name: constructor
asgn

Name: TMP_133 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nativeAsset Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAsset

Name: nativeAsset Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_134 = CONVERT _foreignAsset_1 to IERC20
Function name: constructor

Name: _foreignAsset Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_134 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_134

Name: TMP_134 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAsset_1(IERC20) := TMP_134(IERC20)
Function name: constructor
asgn

Name: TMP_134 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignAsset Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignAsset

Name: foreignAsset Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_135(string) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20Extended), function:symbol, arguments:[]  
Function name: constructor
High Call: symbol
func name:symbol
other func name:symbol
TMP_135
[i]Type for TMP_135

Name: TMP_135 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_136(bytes) = SOLIDITY_CALL abi.encodePacked()(Vader USDV /,TMP_135, LP)
[i]Type for TMP_136

Name: TMP_136 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_137 = CONVERT TMP_136 to string
Function name: constructor

Name: TMP_136 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_137 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_137

Name: TMP_137 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_137 = CONVERT TMP_136 to string
XXXXX
calculatedName_1(string) := TMP_137(string)
Function name: constructor
asgn

Name: TMP_137 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: calculatedName Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for calculatedName

Name: calculatedName Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
calculatedName_1(string) := TMP_137(string)
XXXXX
typecheckig node...
_name_1(string) := calculatedName_1(string)
Function name: constructor
asgn

Name: calculatedName Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _name Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _name

Name: _name Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_name_1(string) := calculatedName_1(string)
XXXXX
WORKLIST iteration 1 for function call "constructor":
 New undefined nodes- 2
 Old undefined nodes- 2
No save for this scenario
State_var: _NOT_ENTERED
Finding type for _NOT_ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _NOT_ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: foreignAsset
Finding type for foreignAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'NATIVETOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(uint256 => IBasePool.Position)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => IBasePool.Position)
mapping(uint256 => IBasePool.Position)
IBasePool.Position
Final Type: IBasePool.Position
global
positions
creation
global
positions
liquidity
global
positions
originalNative
global
positions
originalForeign
FIELDS:
positions Fields:
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: totalSupply
Finding type for totalSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: totalSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ENTERED
Finding type for _ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _status
Finding type for _status...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _status Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _blockTimestampLast
Finding type for _blockTimestampLast...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint32
uint32
Final Type: uint32

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceForeignCumulativeLast
Finding type for priceForeignCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceNativeCumulativeLast
Finding type for priceNativeCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveForeign
Finding type for _reserveForeign...
uint112
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveForeign Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveNative
Finding type for _reserveNative...
uint112
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveNative Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owners
Finding type for _owners...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _owners Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positionId
Finding type for positionId...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: positionId Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _tokenApprovals
Finding type for _tokenApprovals...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _tokenApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _operatorApprovals
Finding type for _operatorApprovals...
mapping(address => mapping(address => bool))
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => mapping(address => bool))
mapping(address => mapping(address => bool))
mapping(address => bool)
bool
Final Type: bool

Name: _operatorApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getReserves
Function getReserves not marked
Mark Iterations TRUE, proceeding anyway
wooo
State_var: _NOT_ENTERED
Finding type for _NOT_ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _NOT_ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: foreignAsset
Finding type for foreignAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'NATIVETOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(uint256 => IBasePool.Position)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => IBasePool.Position)
mapping(uint256 => IBasePool.Position)
IBasePool.Position
Final Type: IBasePool.Position
global
positions
creation
global
positions
liquidity
global
positions
originalNative
global
positions
originalForeign
FIELDS:
positions Fields:
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: totalSupply
Finding type for totalSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: totalSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ENTERED
Finding type for _ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _status
Finding type for _status...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _status Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _blockTimestampLast
Finding type for _blockTimestampLast...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint32
uint32
Final Type: uint32

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceForeignCumulativeLast
Finding type for priceForeignCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceNativeCumulativeLast
Finding type for priceNativeCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveForeign
Finding type for _reserveForeign...
uint112
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveForeign Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveNative
Finding type for _reserveNative...
uint112
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveNative Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owners
Finding type for _owners...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _owners Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positionId
Finding type for positionId...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: positionId Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _tokenApprovals
Finding type for _tokenApprovals...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _tokenApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _operatorApprovals
Finding type for _operatorApprovals...
mapping(address => mapping(address => bool))
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => mapping(address => bool))
mapping(address => mapping(address => bool))
mapping(address => bool)
bool
Final Type: bool

Name: _operatorApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: name
Function name not marked
Mark Iterations TRUE, proceeding anyway
Function name: name
Function Visibility (test): public
clearning node...
clearing ir...?
_name_2(string) := ϕ(['_name_1', '_name_0'])
has variable
typecheckig node...
_name_2(string) := ϕ(['_name_1', '_name_0'])
Function name: name
Phi
[i]Type for _name

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN _name_2
typecheckig node...
RETURN _name_2
RETURN

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "name":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: _NOT_ENTERED
Finding type for _NOT_ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _NOT_ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: foreignAsset
Finding type for foreignAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'NATIVETOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(uint256 => IBasePool.Position)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => IBasePool.Position)
mapping(uint256 => IBasePool.Position)
IBasePool.Position
Final Type: IBasePool.Position
global
positions
creation
global
positions
liquidity
global
positions
originalNative
global
positions
originalForeign
FIELDS:
positions Fields:
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: totalSupply
Finding type for totalSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: totalSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ENTERED
Finding type for _ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _status
Finding type for _status...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _status Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _blockTimestampLast
Finding type for _blockTimestampLast...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint32
uint32
Final Type: uint32

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceForeignCumulativeLast
Finding type for priceForeignCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceNativeCumulativeLast
Finding type for priceNativeCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveForeign
Finding type for _reserveForeign...
uint112
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveForeign Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveNative
Finding type for _reserveNative...
uint112
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveNative Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owners
Finding type for _owners...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _owners Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positionId
Finding type for positionId...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: positionId Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _tokenApprovals
Finding type for _tokenApprovals...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _tokenApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _operatorApprovals
Finding type for _operatorApprovals...
mapping(address => mapping(address => bool))
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => mapping(address => bool))
mapping(address => mapping(address => bool))
mapping(address => bool)
bool
Final Type: bool

Name: _operatorApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: mint
wooo
State_var: _NOT_ENTERED
Finding type for _NOT_ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _NOT_ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: foreignAsset
Finding type for foreignAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'NATIVETOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(uint256 => IBasePool.Position)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => IBasePool.Position)
mapping(uint256 => IBasePool.Position)
IBasePool.Position
Final Type: IBasePool.Position
global
positions
creation
global
positions
liquidity
global
positions
originalNative
global
positions
originalForeign
FIELDS:
positions Fields:
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: totalSupply
Finding type for totalSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: totalSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ENTERED
Finding type for _ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _status
Finding type for _status...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _status Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _blockTimestampLast
Finding type for _blockTimestampLast...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint32
uint32
Final Type: uint32

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceForeignCumulativeLast
Finding type for priceForeignCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceNativeCumulativeLast
Finding type for priceNativeCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveForeign
Finding type for _reserveForeign...
uint112
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveForeign Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveNative
Finding type for _reserveNative...
uint112
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveNative Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owners
Finding type for _owners...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _owners Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positionId
Finding type for positionId...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: positionId Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _tokenApprovals
Finding type for _tokenApprovals...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _tokenApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _operatorApprovals
Finding type for _operatorApprovals...
mapping(address => mapping(address => bool))
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => mapping(address => bool))
mapping(address => mapping(address => bool))
mapping(address => bool)
bool
Final Type: bool

Name: _operatorApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _burn
Function _burn not marked
Mark Iterations TRUE, proceeding anyway
Function name: _burn
Function Visibility (test): internal
State_var: _NOT_ENTERED
Finding type for _NOT_ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _NOT_ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: foreignAsset
Finding type for foreignAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'NATIVETOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(uint256 => IBasePool.Position)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => IBasePool.Position)
mapping(uint256 => IBasePool.Position)
IBasePool.Position
Final Type: IBasePool.Position
global
positions
creation
global
positions
liquidity
global
positions
originalNative
global
positions
originalForeign
FIELDS:
positions Fields:
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: totalSupply
Finding type for totalSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: totalSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ENTERED
Finding type for _ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _status
Finding type for _status...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _status Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _blockTimestampLast
Finding type for _blockTimestampLast...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint32
uint32
Final Type: uint32

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceForeignCumulativeLast
Finding type for priceForeignCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceNativeCumulativeLast
Finding type for priceNativeCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveForeign
Finding type for _reserveForeign...
uint112
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveForeign Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveNative
Finding type for _reserveNative...
uint112
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveNative Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owners
Finding type for _owners...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _owners Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positionId
Finding type for positionId...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: positionId Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _tokenApprovals
Finding type for _tokenApprovals...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _tokenApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _operatorApprovals
Finding type for _operatorApprovals...
mapping(address => mapping(address => bool))
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => mapping(address => bool))
mapping(address => mapping(address => bool))
mapping(address => bool)
bool
Final Type: bool

Name: _operatorApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: swap
Function name: swap
Function Visibility (test): external
nativeAmountIn
Finding type for nativeAmountIn...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: nativeAmountIn Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
foreignAmountIn
Finding type for foreignAmountIn...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: foreignAmountIn Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
to
Finding type for to...
address
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: address
address
Final Type: address

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully

Finding type for ...
bytes
SKIP bytes
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FOREIGNTOKEN
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FOREIGNTOKEN
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_184(uint256) = INTERNAL_CALL, BasePool.swap(uint256,uint256,address)(nativeAmountIn_1,foreignAmountIn_1,to_1)
has variable
[i] TMP_184 cleared
clearing ir...?
RETURN TMP_184
typecheckig node...
TMP_184(uint256) = INTERNAL_CALL, BasePool.swap(uint256,uint256,address)(nativeAmountIn_1,foreignAmountIn_1,to_1)
Function name: swap
Internal call...
swap
nativeAmountIn
foreignAmountIn
to
Function: swap
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FOREIGNTOKEN
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FOREIGNTOKEN
    fields: []
    fintype: -1
Parameter length: 1
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
[[-1], [-1], 0, 'FOREIGNTOKEN', [], -1]
added
xyz
Function name: swap
Function Visibility: public
clearning node...
clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
has variable
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
has variable
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_0', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_9'])
has variable
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
has variable
typecheckig node...
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Function name: swap
Phi
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Function name: swap
Phi
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['to_1'])
Function name: swap
Phi
[i]Type for to

Name: to Function: swap
Num: -1
Den: -1
Norm: u
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_0', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_9'])
Function name: swap
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Function name: swap
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
typecheckig node...
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Internal call...
nonReentrant
Function: nonReentrant
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: nonReentrant
Function Visibility: internal
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, ReentrancyGuard._nonReentrantBefore()()
typecheckig node...
INTERNAL_CALL, ReentrancyGuard._nonReentrantBefore()()
Internal call...
_nonReentrantBefore
Function: _nonReentrantBefore
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: _nonReentrantBefore
Function Visibility: private
clearning node...
clearing ir...?
_ENTERED_1(uint256) := ϕ(['_ENTERED_0'])
has variable
clearing ir...?
_status_2(uint256) := ϕ(['_status_0', '_status_1', '_status_4', '_status_3'])
has variable
typecheckig node...
_ENTERED_1(uint256) := ϕ(['_ENTERED_0'])
Function name: _nonReentrantBefore
Phi
[i]Type for _ENTERED

Name: _ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_status_2(uint256) := ϕ(['_status_0', '_status_1', '_status_4', '_status_3'])
Function name: _nonReentrantBefore
Phi
[i]Type for _status

Name: _status Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_0(bool) = _status_2 != _ENTERED_1
has variable
[i] TMP_0 cleared
clearing ir...?
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,ReentrancyGuard: reentrant call)
typecheckig node...
TMP_0(bool) = _status_2 != _ENTERED_1
Function name: _nonReentrantBefore
[i]Type for TMP_0

Name: TMP_0 Function: _nonReentrantBefore
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,ReentrancyGuard: reentrant call)
[i]Type for TMP_1

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_status_3(uint256) := _ENTERED_1(uint256)
has variable
typecheckig node...
_status_3(uint256) := _ENTERED_1(uint256)
Function name: _nonReentrantBefore
asgn

Name: _ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _status Function: _nonReentrantBefore
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_nonReentrantBefore":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _nonReentrantBefore
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, ReentrancyGuard._nonReentrantAfter()()
typecheckig node...
INTERNAL_CALL, ReentrancyGuard._nonReentrantAfter()()
Internal call...
_nonReentrantAfter
Function: _nonReentrantAfter
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: _nonReentrantAfter
Function Visibility: private
clearning node...
clearing ir...?
_NOT_ENTERED_2(uint256) := ϕ(['_NOT_ENTERED_0'])
has variable
typecheckig node...
_NOT_ENTERED_2(uint256) := ϕ(['_NOT_ENTERED_0'])
Function name: _nonReentrantAfter
Phi
[i]Type for _NOT_ENTERED

Name: _NOT_ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_status_4(uint256) := _NOT_ENTERED_2(uint256)
has variable
typecheckig node...
_status_4(uint256) := _NOT_ENTERED_2(uint256)
Function name: _nonReentrantAfter
asgn

Name: _NOT_ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _status Function: _nonReentrantAfter
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _status

Name: _status Function: _nonReentrantAfter
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_nonReentrantAfter":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _nonReentrantAfter
done.
WORKLIST iteration 0 for function call "nonReentrant":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: nonReentrant
done.
clearning node...
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
typecheckig node...
MODIFIER_CALL, GasThrottle.validateGas()()
Internal call...
validateGas
Function: validateGas
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: validateGas
Function Visibility: internal
clearning node...
typecheckig node...
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "validateGas":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: validateGas
done.
clearning node...
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
has variable
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
has variable
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
has variable
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
has variable
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
typecheckig node...
TMP_185(bool) = nativeAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_186(bool) = foreignAmountIn_1 == 0
Function name: swap
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_187(bool) = TMP_185 && TMP_186
Function name: swap
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_188(bool) = nativeAmountIn_1 == 0
Function name: swap
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_189(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_190(bool) = TMP_188 && TMP_189
Function name: swap
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_191(bool) = TMP_187 || TMP_190
Function name: swap
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
has variable
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
Function name: swap
Internal call...
getReserves
Function: getReserves
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: getReserves
Function Visibility: public
clearning node...
clearing ir...?
_reserveNative_1(uint112) := ϕ(['_reserveNative_2', '_reserveNative_0'])
has variable
clearing ir...?
_reserveForeign_1(uint112) := ϕ(['_reserveForeign_2', '_reserveForeign_0'])
has variable
clearing ir...?
_blockTimestampLast_1(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
has variable
typecheckig node...
_reserveNative_1(uint112) := ϕ(['_reserveNative_2', '_reserveNative_0'])
Function name: getReserves
Phi
[i]Type for _reserveNative

Name: _reserveNative Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_reserveForeign_1(uint112) := ϕ(['_reserveForeign_2', '_reserveForeign_0'])
Function name: getReserves
Phi
[i]Type for _reserveForeign

Name: _reserveForeign Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_blockTimestampLast_1(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Function name: getReserves
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
reserveNative_1(uint112) := _reserveNative_1(uint112)
has variable
[i] reserveNative cleared
typecheckig node...
reserveNative_1(uint112) := _reserveNative_1(uint112)
Function name: getReserves
asgn

Name: _reserveNative Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserveNative Function: getReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for reserveNative

Name: reserveNative Function: getReserves
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
reserveForeign_1(uint112) := _reserveForeign_1(uint112)
has variable
[i] reserveForeign cleared
typecheckig node...
reserveForeign_1(uint112) := _reserveForeign_1(uint112)
Function name: getReserves
asgn

Name: _reserveForeign Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserveForeign Function: getReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for reserveForeign

Name: reserveForeign Function: getReserves
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
blockTimestampLast_1(uint32) := _blockTimestampLast_1(uint32)
has variable
[i] blockTimestampLast cleared
typecheckig node...
blockTimestampLast_1(uint32) := _blockTimestampLast_1(uint32)
Function name: getReserves
asgn

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: getReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN reserveNative_1,reserveForeign_1,blockTimestampLast_1
typecheckig node...
RETURN reserveNative_1,reserveForeign_1,blockTimestampLast_1
RETURN

Name: reserveNative Function: getReserves
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserveForeign Function: getReserves
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getReserves":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: getReserves

Name: reserveNative Function: getReserves
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___

Name: reserveForeign Function: getReserves
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
Function name: swap
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
Function name: swap
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
has variable
[i] _nativeAsset cleared
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Function name: swap
asgn

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef

Name: _nativeAsset Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
has variable
[i] _foreignAsset cleared
typecheckig node...
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Function name: swap
asgn

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef

Name: _foreignAsset Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_193 = CONVERT this to address
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
has variable
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_193 = CONVERT this to address
Function name: swap
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: -1
Den: -1
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
done.
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_194
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_193
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
nativeBalance_1(uint256) := TMP_194(uint256)
Function name: swap
asgn

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT this to address
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
has variable
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_195 = CONVERT this to address
Function name: swap
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: -1
Den: -1
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
done.
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_196
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_195
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignBalance_1(uint256) := TMP_196(uint256)
Function name: swap
asgn

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
has variable
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
has variable
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
typecheckig node...
TMP_197 = CONVERT _nativeAsset_1 to address
Function name: swap

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef

Name: TMP_197 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
TMP_198(bool) = to_1 != TMP_197
Function name: swap
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_199 = CONVERT _foreignAsset_1 to address
Function name: swap

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef

Name: TMP_199 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
TMP_200(bool) = to_1 != TMP_199
Function name: swap
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_201(bool) = TMP_198 && TMP_200
Function name: swap
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
typecheckig node...
TMP_203(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_203
Condition...
Conidtion: 
TMP_203
TMP_203
clearning node...
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Function name: swap
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_215 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
has variable
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
has variable
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Function name: swap
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_204 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
has variable
[i] foreignAmountOut cleared
typecheckig node...
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: swap
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
nativeAmountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_308(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_308 cleared
clearing ir...?
TMP_309(uint256) = TMP_308 (c)* reserveOut_1
has variable
[i] TMP_309 cleared
clearing ir...?
numerator_1(uint256) := TMP_309(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_308(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_6 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_308 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_308

Name: TMP_308 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_309(uint256) = TMP_308 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_7 Function: None
Num: 1, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_309 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_309

Name: TMP_309 Function: calculateSwap
Num: 1, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_309(uint256)
Function name: calculateSwap
asgn

Name: TMP_309 Function: calculateSwap
Num: 1, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 1, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_310(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_310 cleared
clearing ir...?
TMP_311(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_310)
has variable
[i] TMP_311 cleared
clearing ir...?
denominator_1(uint256) := TMP_311(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_310(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_310 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amountIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_310 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_310

Name: TMP_310 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_311(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_310)
Function name: calculateSwap
Internal call...
pow
TMP_310
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_310'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_310'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_330(uint256) = a_1 (c)* a_1
has variable
[i] TMP_330 cleared
clearing ir...?
RETURN TMP_330
typecheckig node...
TMP_330(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_8 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_330 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_330

Name: TMP_330 Function: pow
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_330
RETURN

Name: TMP_330 Function: pow
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_330 Function: pow
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_311

Name: TMP_311 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_311(uint256)
Function name: calculateSwap
asgn

Name: TMP_311 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_312(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_312 cleared
clearing ir...?
amountOut_1(uint256) := TMP_312(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_312(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_312 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_10 Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_312 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_312

Name: TMP_312 Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_312(uint256)
Function name: calculateSwap
asgn

Name: TMP_312 Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountOut_1(uint256) := TMP_220(uint256)
Function name: swap
asgn

Name: TMP_220 Function: swap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
has variable
[i] nativeAmountOut cleared
typecheckig node...
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: swap
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
foreignAmountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 'u', None, [], -1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_308(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_308 cleared
clearing ir...?
TMP_309(uint256) = TMP_308 (c)* reserveOut_1
has variable
[i] TMP_309 cleared
clearing ir...?
numerator_1(uint256) := TMP_309(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_308(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_12 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_308 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_308

Name: TMP_308 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_309(uint256) = TMP_308 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_13 Function: None
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_309 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_309

Name: TMP_309 Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_309(uint256)
Function name: calculateSwap
asgn

Name: TMP_309 Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_310(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_310 cleared
clearing ir...?
TMP_311(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_310)
has variable
[i] TMP_311 cleared
clearing ir...?
denominator_1(uint256) := TMP_311(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_310(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_310 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amountIn Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_310 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_310

Name: TMP_310 Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_311(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_310)
Function name: calculateSwap
Internal call...
pow
TMP_310
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_310'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_310'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_330(uint256) = a_1 (c)* a_1
has variable
[i] TMP_330 cleared
clearing ir...?
RETURN TMP_330
typecheckig node...
TMP_330(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_14 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_330 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_330

Name: TMP_330 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_330
RETURN

Name: TMP_330 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_330 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_311

Name: TMP_311 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_311(uint256)
Function name: calculateSwap
asgn

Name: TMP_311 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_312(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_312 cleared
clearing ir...?
amountOut_1(uint256) := TMP_312(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_312(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_312 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_16 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_312 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_312

Name: TMP_312 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_312(uint256)
Function name: calculateSwap
asgn

Name: TMP_312 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeAmountOut_1(uint256) := TMP_209(uint256)
Function name: swap
asgn

Name: TMP_209 Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nativeAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
has variable
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_221(bool) = foreignAmountOut_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_223(bool) = TMP_221 && TMP_222
Function name: swap
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
has variable
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
has variable
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_210(bool) = nativeAmountOut_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(bool) = TMP_210 && TMP_211
Function name: swap
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
has variable
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
has variable
[i] foreignAmountOut cleared
typecheckig node...
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
Function name: swap
Phi
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
Function name: swap
Phi
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_226 = CONVERT this to address
has variable
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
has variable
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_226 = CONVERT this to address
Function name: swap
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: -1
Den: -1
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
done.
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_227
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_226
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
nativeBalance_2(uint256) := TMP_227(uint256)
Function name: swap
asgn

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_228 = CONVERT this to address
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
has variable
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_228 = CONVERT this to address
Function name: swap
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: -1
Den: -1
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
done.
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_229
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_228
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignBalance_2(uint256) := TMP_229(uint256)
Function name: swap
asgn

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
typecheckig node...
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Internal call...
_update
nativeBalance
foreignBalance
nativeReserve
foreignReserve
Function: _update
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
added
xyz
Function name: _update
Function Visibility: internal
clearning node...
clearing ir...?
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
has variable
[i] balanceNative cleared
clearing ir...?
balanceForeign_1(uint256) := ϕ(['balanceForeign_1', 'foreignBalance_2', 'foreignBalance_2'])
has variable
[i] balanceForeign cleared
clearing ir...?
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
has variable
[i] reserveNative cleared
clearing ir...?
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
has variable
[i] reserveForeign cleared
clearing ir...?
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
has variable
clearing ir...?
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_0', 'priceForeignCumulativeLast_2'])
has variable
clearing ir...?
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
has variable
typecheckig node...
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
Function name: _update
Phi
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balanceForeign_1(uint256) := ϕ(['balanceForeign_1', 'foreignBalance_2', 'foreignBalance_2'])
Function name: _update
Phi
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
Function name: _update
Phi
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
Function name: _update
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
Function name: _update
Phi
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_0', 'priceForeignCumulativeLast_2'])
Function name: _update
Phi
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Function name: _update
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
has variable
[i] TMP_235 cleared
clearing ir...?
TMP_236(bool) = balanceNative_1 <= TMP_235
has variable
[i] TMP_236 cleared
clearing ir...?
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
has variable
[i] TMP_238 cleared
clearing ir...?
TMP_239(bool) = balanceForeign_1 <= TMP_238
has variable
[i] TMP_239 cleared
clearing ir...?
TMP_240(bool) = TMP_236 && TMP_239
has variable
[i] TMP_240 cleared
clearing ir...?
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
typecheckig node...
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
Function name: _update
asgn
val: 5192296858534827628530496329220095

Name: 5192296858534827628530496329220095 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_235 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 5192296858534827628530496329220095
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_236(bool) = balanceNative_1 <= TMP_235
Function name: _update
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
Function name: _update
asgn
val: 5192296858534827628530496329220095

Name: 5192296858534827628530496329220095 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_238 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 5192296858534827628530496329220095
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_239(bool) = balanceForeign_1 <= TMP_238
Function name: _update
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_240(bool) = TMP_236 && TMP_239
Function name: _update
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_242(uint256) = 2 (c)** 32
has variable
[i] TMP_242 cleared
clearing ir...?
TMP_243(uint256) = block.timestamp (c)% TMP_242
has variable
[i] TMP_243 cleared
clearing ir...?
TMP_244 = CONVERT TMP_243 to uint32
has variable
[i] TMP_244 cleared
clearing ir...?
blockTimestamp_1(uint32) := TMP_244(uint32)
has variable
[i] blockTimestamp cleared
typecheckig node...
TMP_242(uint256) = 2 (c)** 32
Function name: _update
val: 2
val: 32

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: 32 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_242 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
32
val: 2
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: -1
Den: -1
Norm: 32
LF: None
Fields: 
Finance Type: undef
done.
TMP_243(uint256) = block.timestamp (c)% TMP_242
Function name: _update
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_244 = CONVERT TMP_243 to uint32
Function name: _update

Name: TMP_243 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_244 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_244 = CONVERT TMP_243 to uint32
XXXXX
blockTimestamp_1(uint32) := TMP_244(uint32)
Function name: _update
asgn

Name: TMP_244 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: blockTimestamp Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
blockTimestamp_1(uint32) := TMP_244(uint32)
XXXXX
clearning node...
clearing ir...?
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
has variable
[i] TMP_245 cleared
clearing ir...?
timeElapsed_1(uint32) := TMP_245(uint32)
has variable
[i] timeElapsed cleared
typecheckig node...
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
Function name: _update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: blockTimestamp Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_245 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
XXXXX
timeElapsed_1(uint32) := TMP_245(uint32)
Function name: _update
asgn

Name: TMP_245 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: timeElapsed Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_246(bool) = timeElapsed_1 > 0
has variable
[i] TMP_246 cleared
clearing ir...?
TMP_247(bool) = reserveNative_1 != 0
has variable
[i] TMP_247 cleared
clearing ir...?
TMP_248(bool) = TMP_246 && TMP_247
has variable
[i] TMP_248 cleared
clearing ir...?
TMP_249(bool) = reserveForeign_1 != 0
has variable
[i] TMP_249 cleared
clearing ir...?
TMP_250(bool) = TMP_248 && TMP_249
has variable
[i] TMP_250 cleared
clearing ir...?
CONDITION TMP_250
typecheckig node...
TMP_246(bool) = timeElapsed_1 > 0
Function name: _update
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_247(bool) = reserveNative_1 != 0
Function name: _update
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_248(bool) = TMP_246 && TMP_247
Function name: _update
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_249(bool) = reserveForeign_1 != 0
Function name: _update
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_250(bool) = TMP_248 && TMP_249
Function name: _update
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_250
Condition...
Conidtion: 
TMP_250
TMP_250
clearning node...
clearing ir...?
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
has variable
[i] TMP_251 cleared
clearing ir...?
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
has variable
[i] TMP_252 cleared
clearing ir...?
TMP_253 = CONVERT TMP_252 to uint256
has variable
[i] TMP_253 cleared
clearing ir...?
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
has variable
[i] TMP_254 cleared
clearing ir...?
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
has variable
typecheckig node...
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
Function name: _update
Library Call: encode
hlc contract name: UQ112x112 func_name: encode
('t', [1], [1], 1, None)
reserveForeign
wfc len: 1
Check copy_toekn_tuple
([2, -1], [-1, 2], 'u', None, -1)
----
Type: uint224
uint224
Final Type: uint224
COPIED
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: 
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
Function name: _update
Library Call: uqdiv
hlc contract name: UQ112x112 func_name: uqdiv
('t', [1], [2], 1, None)
TMP_251
reserveNative
wfc len: 1
Check copy_toekn_tuple
([-1], [-1, 1], 'u', None, -1)
----
Type: uint224
uint224
Final Type: uint224
COPIED
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_253 = CONVERT TMP_252 to uint256
Function name: _update

Name: TMP_252 Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_253 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
Function name: _update
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_253 Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_254 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
Function name: _update

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_254 Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceNativeCumulativeLast Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
has variable
[i] TMP_255 cleared
clearing ir...?
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
has variable
[i] TMP_256 cleared
clearing ir...?
TMP_257 = CONVERT TMP_256 to uint256
has variable
[i] TMP_257 cleared
clearing ir...?
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
has variable
[i] TMP_258 cleared
clearing ir...?
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
has variable
typecheckig node...
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
Function name: _update
Library Call: encode
hlc contract name: UQ112x112 func_name: encode
('t', [1], [1], 1, None)
reserveNative
wfc len: 1
Check copy_toekn_tuple
([1, -1], [-1, 1], 'u', None, -1)
----
Type: uint224
uint224
Final Type: uint224
COPIED
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: 
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
Function name: _update
Library Call: uqdiv
hlc contract name: UQ112x112 func_name: uqdiv
('t', [1], [2], 1, None)
TMP_255
reserveForeign
wfc len: 1
Check copy_toekn_tuple
([-1], [-1, 2], 'u', None, -1)
----
Type: uint224
uint224
Final Type: uint224
COPIED
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_257 = CONVERT TMP_256 to uint256
Function name: _update

Name: TMP_256 Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_257 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
Function name: _update
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_257 Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_258 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
Function name: _update

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_258 Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceForeignCumulativeLast Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_259 = CONVERT balanceNative_1 to uint112
has variable
[i] TMP_259 cleared
clearing ir...?
_reserveNative_2(uint112) := TMP_259(uint112)
has variable
typecheckig node...
TMP_259 = CONVERT balanceNative_1 to uint112
Function name: _update

Name: balanceNative Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_259 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_reserveNative_2(uint112) := TMP_259(uint112)
Function name: _update
asgn

Name: TMP_259 Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _reserveNative Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_260 = CONVERT balanceForeign_1 to uint112
has variable
[i] TMP_260 cleared
clearing ir...?
_reserveForeign_2(uint112) := TMP_260(uint112)
has variable
typecheckig node...
TMP_260 = CONVERT balanceForeign_1 to uint112
Function name: _update

Name: balanceForeign Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_260 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_reserveForeign_2(uint112) := TMP_260(uint112)
Function name: _update
asgn

Name: TMP_260 Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _reserveForeign Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
has variable
typecheckig node...
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
Function name: _update
asgn

Name: blockTimestamp Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
XXXXX
clearning node...
clearing ir...?
Emit Sync(balanceNative_1,balanceForeign_1)
typecheckig node...
Emit Sync(balanceNative_1,balanceForeign_1)
WORKLIST iteration 0 for function call "_update":
 New undefined nodes- 3
 Old undefined nodes- 0
typecheckig node...
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
Function name: _update
Phi
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balanceForeign_1(uint256) := ϕ(['balanceForeign_1', 'foreignBalance_2', 'foreignBalance_2'])
Function name: _update
Phi
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserveNative_1(uint112) := ϕ(['reserveNative_1', 'reserveNative_1', 'nativeReserve_1'])
Function name: _update
Phi
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserveForeign_1(uint112) := ϕ(['foreignReserve_1', 'reserveForeign_1', 'reserveForeign_1'])
Function name: _update
Phi
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
Function name: _update
Phi
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_0', 'priceForeignCumulativeLast_2'])
Function name: _update
Phi
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Function name: _update
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
Function name: _update
asgn
val: 5192296858534827628530496329220095

Name: 5192296858534827628530496329220095 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_235 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 5192296858534827628530496329220095
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_236(bool) = balanceNative_1 <= TMP_235
Function name: _update
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
Function name: _update
asgn
val: 5192296858534827628530496329220095

Name: 5192296858534827628530496329220095 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_238 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 5192296858534827628530496329220095
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_239(bool) = balanceForeign_1 <= TMP_238
Function name: _update
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_240(bool) = TMP_236 && TMP_239
Function name: _update
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_242(uint256) = 2 (c)** 32
Function name: _update
val: 2
val: 32

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: 32 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_242 Function: _update
Num: -1
Den: -1
Norm: 32
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:32
32
val: 2
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: -1
Den: -1
Norm: 32
LF: None
Fields: 
Finance Type: undef
done.
TMP_243(uint256) = block.timestamp (c)% TMP_242
Function name: _update
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_244 = CONVERT TMP_243 to uint32
Function name: _update

Name: TMP_243 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_244 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_244 = CONVERT TMP_243 to uint32
XXXXX
blockTimestamp_1(uint32) := TMP_244(uint32)
Function name: _update
asgn

Name: TMP_244 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: blockTimestamp Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
blockTimestamp_1(uint32) := TMP_244(uint32)
XXXXX
typecheckig node...
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
Function name: _update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: blockTimestamp Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_245 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
XXXXX
timeElapsed_1(uint32) := TMP_245(uint32)
Function name: _update
asgn

Name: TMP_245 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: timeElapsed Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_246(bool) = timeElapsed_1 > 0
Function name: _update
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_247(bool) = reserveNative_1 != 0
Function name: _update
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_248(bool) = TMP_246 && TMP_247
Function name: _update
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_249(bool) = reserveForeign_1 != 0
Function name: _update
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_250(bool) = TMP_248 && TMP_249
Function name: _update
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_250
Condition...
Conidtion: 
TMP_250
TMP_250
typecheckig node...
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
Function name: _update
Library Call: encode
hlc contract name: UQ112x112 func_name: encode
('t', [1], [1], 1, None)
reserveForeign
wfc len: 1
Check copy_toekn_tuple
([2, -1], [-1, 2], 'u', None, -1)
----
Type: uint224
uint224
Final Type: uint224
COPIED
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: 
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
Function name: _update
Library Call: uqdiv
hlc contract name: UQ112x112 func_name: uqdiv
('t', [1], [2], 1, None)
TMP_251
reserveNative
wfc len: 1
Check copy_toekn_tuple
([-1], [-1, 1], 'u', None, -1)
----
Type: uint224
uint224
Final Type: uint224
COPIED
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_253 = CONVERT TMP_252 to uint256
Function name: _update

Name: TMP_252 Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_253 Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
Function name: _update
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_253 Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_254 Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
Function name: _update

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
Function name: _update
Library Call: encode
hlc contract name: UQ112x112 func_name: encode
('t', [1], [1], 1, None)
reserveNative
wfc len: 1
Check copy_toekn_tuple
([1, -1], [-1, 1], 'u', None, -1)
----
Type: uint224
uint224
Final Type: uint224
COPIED
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: 
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
Function name: _update
Library Call: uqdiv
hlc contract name: UQ112x112 func_name: uqdiv
('t', [1], [2], 1, None)
TMP_255
reserveForeign
wfc len: 1
Check copy_toekn_tuple
([-1], [-1, 2], 'u', None, -1)
----
Type: uint224
uint224
Final Type: uint224
COPIED
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_257 = CONVERT TMP_256 to uint256
Function name: _update

Name: TMP_256 Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_257 Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
Function name: _update
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_257 Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_258 Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
Function name: _update

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
TMP_259 = CONVERT balanceNative_1 to uint112
Function name: _update

Name: balanceNative Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_259 Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_reserveNative_2(uint112) := TMP_259(uint112)
Function name: _update
asgn

Name: TMP_259 Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _reserveNative Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_260 = CONVERT balanceForeign_1 to uint112
Function name: _update

Name: balanceForeign Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_260 Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_reserveForeign_2(uint112) := TMP_260(uint112)
Function name: _update
asgn

Name: TMP_260 Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _reserveForeign Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
Function name: _update
asgn

Name: blockTimestamp Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
XXXXX
typecheckig node...
Emit Sync(balanceNative_1,balanceForeign_1)
WORKLIST iteration 1 for function call "_update":
 New undefined nodes- 3
 Old undefined nodes- 3
Saving return values for: _update
done.
This IR caused addback:
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
XXXXX
clearning node...
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
typecheckig node...
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
clearning node...
clearing ir...?
RETURN nativeAmountOut_2
typecheckig node...
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "swap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: swap

Name: nativeAmountOut Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_184

Name: TMP_184 Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_184
RETURN

Name: TMP_184 Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "swap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: swap

Name: TMP_184 Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: _NOT_ENTERED
Finding type for _NOT_ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _NOT_ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: foreignAsset
Finding type for foreignAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'NATIVETOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(uint256 => IBasePool.Position)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => IBasePool.Position)
mapping(uint256 => IBasePool.Position)
IBasePool.Position
Final Type: IBasePool.Position
global
positions
creation
global
positions
liquidity
global
positions
originalNative
global
positions
originalForeign
FIELDS:
positions Fields:
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: totalSupply
Finding type for totalSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: totalSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ENTERED
Finding type for _ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _status
Finding type for _status...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _status Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _blockTimestampLast
Finding type for _blockTimestampLast...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint32
uint32
Final Type: uint32

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceForeignCumulativeLast
Finding type for priceForeignCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceNativeCumulativeLast
Finding type for priceNativeCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveForeign
Finding type for _reserveForeign...
uint112
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveForeign Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveNative
Finding type for _reserveNative...
uint112
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveNative Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owners
Finding type for _owners...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _owners Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positionId
Finding type for positionId...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: positionId Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _tokenApprovals
Finding type for _tokenApprovals...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _tokenApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _operatorApprovals
Finding type for _operatorApprovals...
mapping(address => mapping(address => bool))
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => mapping(address => bool))
mapping(address => mapping(address => bool))
mapping(address => bool)
bool
Final Type: bool

Name: _operatorApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: swap
Function name: swap
Function Visibility (test): public
nativeAmountIn
Finding type for nativeAmountIn...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: nativeAmountIn Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
foreignAmountIn
Finding type for foreignAmountIn...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: foreignAmountIn Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
to
Finding type for to...
address
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: address
address
Final Type: address

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FOREIGNTOKEN
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[-1], [-1], 0, 'FOREIGNTOKEN', [], -1]
Its the same:
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FOREIGNTOKEN
    fields: []
    fintype: -1
0
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FOREIGNTOKEN
    fields: []
    fintype: -1
clearning node...
clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
has variable
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
has variable
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_0', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_9'])
has variable
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
has variable
typecheckig node...
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Function name: swap
Phi
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Function name: swap
Phi
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['to_1'])
Function name: swap
Phi
[i]Type for to

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_0', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_9'])
Function name: swap
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Function name: swap
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
typecheckig node...
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Internal call...
nonReentrant
Function: nonReentrant
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
typecheckig node...
MODIFIER_CALL, GasThrottle.validateGas()()
Internal call...
validateGas
Function: validateGas
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
has variable
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
has variable
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
has variable
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
has variable
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
typecheckig node...
TMP_185(bool) = nativeAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_186(bool) = foreignAmountIn_1 == 0
Function name: swap
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_187(bool) = TMP_185 && TMP_186
Function name: swap
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_188(bool) = nativeAmountIn_1 == 0
Function name: swap
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_189(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_190(bool) = TMP_188 && TMP_189
Function name: swap
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_191(bool) = TMP_187 || TMP_190
Function name: swap
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
has variable
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
Function name: swap
Internal call...
getReserves
Function: getReserves
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
Function name: swap
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
Function name: swap
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
has variable
[i] _nativeAsset cleared
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Function name: swap
asgn

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef

Name: _nativeAsset Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
has variable
[i] _foreignAsset cleared
typecheckig node...
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Function name: swap
asgn

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef

Name: _foreignAsset Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_193 = CONVERT this to address
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
has variable
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_193 = CONVERT this to address
Function name: swap
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
done.
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_194
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_193
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
nativeBalance_1(uint256) := TMP_194(uint256)
Function name: swap
asgn

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT this to address
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
has variable
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_195 = CONVERT this to address
Function name: swap
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
done.
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_196
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_195
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignBalance_1(uint256) := TMP_196(uint256)
Function name: swap
asgn

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
has variable
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
has variable
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
typecheckig node...
TMP_197 = CONVERT _nativeAsset_1 to address
Function name: swap

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef

Name: TMP_197 Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
TMP_198(bool) = to_1 != TMP_197
Function name: swap
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_199 = CONVERT _foreignAsset_1 to address
Function name: swap

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef

Name: TMP_199 Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
TMP_200(bool) = to_1 != TMP_199
Function name: swap
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_201(bool) = TMP_198 && TMP_200
Function name: swap
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
typecheckig node...
TMP_203(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_203
Condition...
Conidtion: 
TMP_203
TMP_203
clearning node...
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Function name: swap
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_215 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
has variable
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
has variable
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Function name: swap
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_204 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
has variable
[i] foreignAmountOut cleared
typecheckig node...
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: swap
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
nativeAmountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 'u', None, [], -1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_308(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_308 cleared
clearing ir...?
TMP_309(uint256) = TMP_308 (c)* reserveOut_1
has variable
[i] TMP_309 cleared
clearing ir...?
numerator_1(uint256) := TMP_309(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_308(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_23 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_308 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_308

Name: TMP_308 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_309(uint256) = TMP_308 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_24 Function: None
Num: 1, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_309 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_309

Name: TMP_309 Function: calculateSwap
Num: 1, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_309(uint256)
Function name: calculateSwap
asgn

Name: TMP_309 Function: calculateSwap
Num: 1, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 1, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_310(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_310 cleared
clearing ir...?
TMP_311(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_310)
has variable
[i] TMP_311 cleared
clearing ir...?
denominator_1(uint256) := TMP_311(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_310(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_310 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amountIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_310 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_310

Name: TMP_310 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_311(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_310)
Function name: calculateSwap
Internal call...
pow
TMP_310
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[1], [-1], 'u', None, [], -1]
0

Name: PIC_9 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_311 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_311

Name: TMP_311 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_311(uint256)
Function name: calculateSwap
asgn

Name: TMP_311 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_312(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_312 cleared
clearing ir...?
amountOut_1(uint256) := TMP_312(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_312(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_312 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_25 Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_312 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_312

Name: TMP_312 Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_312(uint256)
Function name: calculateSwap
asgn

Name: TMP_312 Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountOut_1(uint256) := TMP_220(uint256)
Function name: swap
asgn

Name: TMP_220 Function: swap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
has variable
[i] nativeAmountOut cleared
typecheckig node...
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: swap
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
foreignAmountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 'u', None, [], -1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_308(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_308 cleared
clearing ir...?
TMP_309(uint256) = TMP_308 (c)* reserveOut_1
has variable
[i] TMP_309 cleared
clearing ir...?
numerator_1(uint256) := TMP_309(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_308(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_27 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_308 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_308

Name: TMP_308 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_309(uint256) = TMP_308 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_28 Function: None
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_309 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_309

Name: TMP_309 Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_309(uint256)
Function name: calculateSwap
asgn

Name: TMP_309 Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_310(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_310 cleared
clearing ir...?
TMP_311(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_310)
has variable
[i] TMP_311 cleared
clearing ir...?
denominator_1(uint256) := TMP_311(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_310(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_310 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amountIn Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_310 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_310

Name: TMP_310 Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_311(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_310)
Function name: calculateSwap
Internal call...
pow
TMP_310
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_310'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_310'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_330(uint256) = a_1 (c)* a_1
has variable
[i] TMP_330 cleared
clearing ir...?
RETURN TMP_330
typecheckig node...
TMP_330(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_29 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_330 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_330

Name: TMP_330 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_330
RETURN

Name: TMP_330 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_330 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_311

Name: TMP_311 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_311(uint256)
Function name: calculateSwap
asgn

Name: TMP_311 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_312(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_312 cleared
clearing ir...?
amountOut_1(uint256) := TMP_312(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_312(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_312 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_31 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_312 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_312

Name: TMP_312 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_312(uint256)
Function name: calculateSwap
asgn

Name: TMP_312 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeAmountOut_1(uint256) := TMP_209(uint256)
Function name: swap
asgn

Name: TMP_209 Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nativeAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
has variable
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_221(bool) = foreignAmountOut_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_223(bool) = TMP_221 && TMP_222
Function name: swap
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
has variable
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
has variable
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_210(bool) = nativeAmountOut_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(bool) = TMP_210 && TMP_211
Function name: swap
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
has variable
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
has variable
[i] foreignAmountOut cleared
typecheckig node...
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
Function name: swap
Phi
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
Function name: swap
Phi
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_226 = CONVERT this to address
has variable
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
has variable
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_226 = CONVERT this to address
Function name: swap
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
done.
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_227
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_226
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
nativeBalance_2(uint256) := TMP_227(uint256)
Function name: swap
asgn

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_228 = CONVERT this to address
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
has variable
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_228 = CONVERT this to address
Function name: swap
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
done.
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_229
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_228
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignBalance_2(uint256) := TMP_229(uint256)
Function name: swap
asgn

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
typecheckig node...
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Internal call...
_update
nativeBalance
foreignBalance
nativeReserve
foreignReserve
Function: _update
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
0
done.
clearning node...
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
typecheckig node...
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
clearning node...
clearing ir...?
RETURN nativeAmountOut_2
typecheckig node...
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "swap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: swap

Name: nativeAmountOut Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: _NOT_ENTERED
Finding type for _NOT_ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _NOT_ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: foreignAsset
Finding type for foreignAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'NATIVETOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(uint256 => IBasePool.Position)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => IBasePool.Position)
mapping(uint256 => IBasePool.Position)
IBasePool.Position
Final Type: IBasePool.Position
global
positions
creation
global
positions
liquidity
global
positions
originalNative
global
positions
originalForeign
FIELDS:
positions Fields:
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: totalSupply
Finding type for totalSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: totalSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ENTERED
Finding type for _ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _status
Finding type for _status...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _status Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _blockTimestampLast
Finding type for _blockTimestampLast...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint32
uint32
Final Type: uint32

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceForeignCumulativeLast
Finding type for priceForeignCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceNativeCumulativeLast
Finding type for priceNativeCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveForeign
Finding type for _reserveForeign...
uint112
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveForeign Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveNative
Finding type for _reserveNative...
uint112
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveNative Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owners
Finding type for _owners...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _owners Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positionId
Finding type for positionId...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: positionId Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _tokenApprovals
Finding type for _tokenApprovals...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _tokenApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _operatorApprovals
Finding type for _operatorApprovals...
mapping(address => mapping(address => bool))
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => mapping(address => bool))
mapping(address => mapping(address => bool))
mapping(address => bool)
bool
Final Type: bool

Name: _operatorApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _update
Function _update not marked
Mark Iterations TRUE, proceeding anyway
Function name: _update
Function Visibility (test): internal
State_var: _NOT_ENTERED
Finding type for _NOT_ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _NOT_ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: foreignAsset
Finding type for foreignAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'NATIVETOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(uint256 => IBasePool.Position)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => IBasePool.Position)
mapping(uint256 => IBasePool.Position)
IBasePool.Position
Final Type: IBasePool.Position
global
positions
creation
global
positions
liquidity
global
positions
originalNative
global
positions
originalForeign
FIELDS:
positions Fields:
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: totalSupply
Finding type for totalSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: totalSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ENTERED
Finding type for _ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _status
Finding type for _status...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _status Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _blockTimestampLast
Finding type for _blockTimestampLast...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint32
uint32
Final Type: uint32

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceForeignCumulativeLast
Finding type for priceForeignCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceNativeCumulativeLast
Finding type for priceNativeCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveForeign
Finding type for _reserveForeign...
uint112
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveForeign Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveNative
Finding type for _reserveNative...
uint112
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveNative Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owners
Finding type for _owners...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _owners Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positionId
Finding type for positionId...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: positionId Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _tokenApprovals
Finding type for _tokenApprovals...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _tokenApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _operatorApprovals
Finding type for _operatorApprovals...
mapping(address => mapping(address => bool))
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => mapping(address => bool))
mapping(address => mapping(address => bool))
mapping(address => bool)
bool
Final Type: bool

Name: _operatorApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
Mark Iterations TRUE, proceeding anyway
Function name: slitherConstructorConstantVariables
Function Visibility (test): internal
State_var: _NOT_ENTERED
Finding type for _NOT_ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _NOT_ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: foreignAsset
Finding type for foreignAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'NATIVETOKEN')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(uint256 => IBasePool.Position)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => IBasePool.Position)
mapping(uint256 => IBasePool.Position)
IBasePool.Position
Final Type: IBasePool.Position
global
positions
creation
global
positions
liquidity
global
positions
originalNative
global
positions
originalForeign
FIELDS:
positions Fields:
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: totalSupply
Finding type for totalSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: totalSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ENTERED
Finding type for _ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ENTERED Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _status
Finding type for _status...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _status Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _blockTimestampLast
Finding type for _blockTimestampLast...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint32
uint32
Final Type: uint32

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceForeignCumulativeLast
Finding type for priceForeignCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: priceNativeCumulativeLast
Finding type for priceNativeCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveForeign
Finding type for _reserveForeign...
uint112
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveForeign Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _reserveNative
Finding type for _reserveNative...
uint112
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint112
uint112
Final Type: uint112

Name: _reserveNative Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owners
Finding type for _owners...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _owners Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positionId
Finding type for positionId...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: positionId Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _tokenApprovals
Finding type for _tokenApprovals...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => address)
mapping(uint256 => address)
address
Final Type: address

Name: _tokenApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _operatorApprovals
Finding type for _operatorApprovals...
mapping(address => mapping(address => bool))
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => mapping(address => bool))
mapping(address => mapping(address => bool))
mapping(address => bool)
bool
Final Type: bool

Name: _operatorApprovals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Errors: []
Seen contract: {'VaderMath': True, 'BasePool': True} Contract name out: GasThrottle
[x] GasThrottle not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True} Contract name out: UQ112x112
[x] UQ112x112 not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True} Contract name out: IBasePool
[x] IBasePool not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True} Contract name out: IAggregator
[x] IAggregator not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True} Contract name out: IERC20Extended
[x] IERC20Extended not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True} Contract name out: Ownable
[x] Ownable not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True} Contract name out: ReentrancyGuard
[x] ReentrancyGuard not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True} Contract name out: IERC20
[x] IERC20 not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True} Contract name out: IERC20Permit
[x] IERC20Permit not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True} Contract name out: SafeERC20
[x] SafeERC20 not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True} Contract name out: ERC721
[x] ERC721 not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True} Contract name out: IERC721
[x] IERC721 not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True} Contract name out: IERC721Receiver
[x] IERC721Receiver not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True} Contract name out: IERC721Metadata
[x] IERC721Metadata not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True, 'IERC721Metadata': True} Contract name out: Address
[x] Address not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True, 'IERC721Metadata': True, 'Address': True} Contract name out: Context
[x] Context not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True, 'IERC721Metadata': True, 'Address': True, 'Context': True} Contract name out: Strings
[x] Strings not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True, 'IERC721Metadata': True, 'Address': True, 'Context': True, 'Strings': True} Contract name out: ERC165
[x] ERC165 not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True, 'IERC721Metadata': True, 'Address': True, 'Context': True, 'Strings': True, 'ERC165': True} Contract name out: IERC165
[x] IERC165 not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True, 'IERC721Metadata': True, 'Address': True, 'Context': True, 'Strings': True, 'ERC165': True, 'IERC165': True} Contract name out: Math
[x] Math not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True, 'IERC721Metadata': True, 'Address': True, 'Context': True, 'Strings': True, 'ERC165': True, 'IERC165': True, 'Math': True} Contract name out: SignedMath
[x] SignedMath not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True, 'IERC721Metadata': True, 'Address': True, 'Context': True, 'Strings': True, 'ERC165': True, 'IERC165': True, 'Math': True, 'SignedMath': True} Contract name out: ProtocolConstants
[x] ProtocolConstants not run
Function count: 18
VaderRouter
IBasePool
IVaderPool
IVaderPoolFactory
IVaderRouter
IVaderReserve
VaderMath
Ownable
IERC20
IERC20Permit
SafeERC20
IERC721
Address
Context
IERC165
ProtocolConstants
contract name: VaderRouter
WARNING!!!!
VaderRouter_types.txt
Finance File not Found
"VaderRouter_types.txt" opened successfully.
[*c], VaderRouter



constructor

removeLiquidity

swapTokensForExactTokens

initialize

calculateInGivenOut

calculateOutGivenIn

[sef], BasePool, burn, 3, , , 


['']

['']

['']
[sef], FACTORY, nativeAsset, 1, {c, 1, -1, 0}

{c, 1, -1, 0}
['c', '1', '-1', '0']
[sef], FACTORY, getPool, 1, {c, -1, -1, 0, BasePool}

{c, -1, -1, 0, BasePool}
['c', '-1', '-1', '0', 'BasePool']


[t], global, factory, -1, -1, 0, FACTORY

[t], global, reserve, -1, -1, 0, RESERVE

[t], global, _ZERO_ADDRESS, -1, -1, 0, ZERO

[t], global, _owner, -1, -1, 0, OWNER

[t], global, _ONE_YEAR



[t], swapExactTokensForTokens, amountIn, 2, -1, 0

[t], swapExactTokensForTokens, amountOutMin, 1, -1, 0

[t], swapExactTokensForTokens, path

[t], swapExactTokensForTokens, to, -1, -1, 0, NATIVETOKEN

[t], swapExactTokensForTokens, deadline



[t], swapTokensForExactTokens, amountOut

[t], swapTokensForExactTokens, amountInMax

[t], swapTokensForExactTokens, path

[t], swapTokensForExactTokens, to

[t], swapTokensForExactTokens, deadline

[t], initialize, _reserve

[t], calculateOutGivenIn, amountIn, 2, -1, 0

[t], calculateOutGivenIn, path

[t], constructor, _factory

[t], removeLiquidity, tokenA

[t], removeLiquidity, tokenB

[t], removeLiquidity, id

[t], removeLiquidity, amountAMin

[t], removeLiquidity, amountBMin

[t], removeLiquidity, to

[t], removeLiquidity, deadline

[t], calculateInGivenOut, amountOut

[t], calculateInGivenOut, path

[*] VaderRouter run
Checking... constructor Visibility: public
[o] Marked
Checking... addLiquidity Visibility: external
[x] No Binary
Checking... addLiquidity Visibility: public
[x] No Binary
Checking... removeLiquidity Visibility: public
[o] Marked
Checking... swapExactTokensForTokens Visibility: external
[o] Marked
Checking... swapTokensForExactTokens Visibility: external
[o] Marked
Checking... initialize Visibility: external
[o] Marked
Checking... _swap Visibility: private
[x] Not visible 
Checking... _addLiquidity Visibility: private
[x] Not visible 
Checking... calculateInGivenOut Visibility: public
[o] Marked
Checking... calculateOutGivenIn Visibility: external
[o] Marked
Checking... slitherConstructorConstantVariables Visibility: internal
[x] Not visible 
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
contract name: IBasePool
WARNING!!!!
IBasePool_types.txt
Finance File not Found
Type File not found.
[x] IBasePool not run
contract name: IVaderPool
WARNING!!!!
IVaderPool_types.txt
Finance File not Found
Type File not found.
[x] IVaderPool not run
contract name: IVaderPoolFactory
WARNING!!!!
IVaderPoolFactory_types.txt
Finance File not Found
Type File not found.
[x] IVaderPoolFactory not run
contract name: IVaderRouter
WARNING!!!!
IVaderRouter_types.txt
Finance File not Found
Type File not found.
[x] IVaderRouter not run
contract name: IVaderReserve
WARNING!!!!
IVaderReserve_types.txt
Finance File not Found
Type File not found.
[x] IVaderReserve not run
contract name: VaderMath
WARNING!!!!
VaderMath_types.txt
Finance File not Found
"VaderMath_types.txt" opened successfully.
[*c], VaderMath



[xf], calculateSlipAdjustment

[xf], calculateLiquidityUnits

[xf], calculateLoss

[xf], calculateSwap

[xf], calculateSwapReverse

[xf], delta

[xf], pow

[xf], root



[t], global, ONE

[t], global, vaderDeposited

[t], global, vaderBalance

[t], global, assetDeposited

[t], global, assetBalance

[t], global, totalPoolUnits





[*] VaderMath run
Checking... calculateLiquidityUnits Visibility: public
[o] Marked
Checking... calculateSlipAdjustment Visibility: public
[o] Marked
Checking... calculateLoss Visibility: public
[o] Marked
Checking... calculateSwap Visibility: public
[o] Marked
Checking... calculateSwapReverse Visibility: public
[o] Marked
Checking... delta Visibility: public
[o] Marked
Checking... pow Visibility: public
[o] Marked
Checking... root Visibility: public
[o] Marked
Checking... slitherConstructorConstantVariables Visibility: internal
[x] Not visible 
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
contract name: Ownable
WARNING!!!!
Ownable_types.txt
Finance File not Found
Type File not found.
[x] Ownable not run
contract name: IERC20
WARNING!!!!
IERC20_types.txt
Finance File not Found
Type File not found.
[x] IERC20 not run
contract name: IERC20Permit
WARNING!!!!
IERC20Permit_types.txt
Finance File not Found
Type File not found.
[x] IERC20Permit not run
contract name: SafeERC20
WARNING!!!!
SafeERC20_types.txt
Finance File not Found
Type File not found.
[x] SafeERC20 not run
contract name: IERC721
WARNING!!!!
IERC721_types.txt
Finance File not Found
Type File not found.
[x] IERC721 not run
contract name: Address
WARNING!!!!
Address_types.txt
Finance File not Found
Type File not found.
[x] Address not run
contract name: Context
WARNING!!!!
Context_types.txt
Finance File not Found
Type File not found.
[x] Context not run
contract name: IERC165
WARNING!!!!
IERC165_types.txt
Finance File not Found
Type File not found.
[x] IERC165 not run
contract name: ProtocolConstants
WARNING!!!!
ProtocolConstants_types.txt
Finance File not Found
Type File not found.
[x] ProtocolConstants not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True, 'IERC721Metadata': True, 'Address': True, 'Context': True, 'Strings': True, 'ERC165': True, 'IERC165': True, 'Math': True, 'SignedMath': True, 'ProtocolConstants': True} Contract name out: VaderRouter
[*] VaderRouter run
Reading Function: constructor
Function name: constructor
Function Visibility (test): public
_factory
Finding type for _factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: _factory Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
_ZERO_ADDRESS_1(address) := ϕ(['_ZERO_ADDRESS_0', '_ZERO_ADDRESS_3', '_ZERO_ADDRESS_5'])
has variable
typecheckig node...
_ZERO_ADDRESS_1(address) := ϕ(['_ZERO_ADDRESS_0', '_ZERO_ADDRESS_3', '_ZERO_ADDRESS_5'])
Function name: constructor
Phi
[i]Type for _ZERO_ADDRESS

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_15 = CONVERT _ZERO_ADDRESS_1 to IVaderPoolFactory
has variable
[i] TMP_15 cleared
clearing ir...?
TMP_16(bool) = _factory_1 != TMP_15
has variable
[i] TMP_16 cleared
clearing ir...?
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,VaderRouter::constructor: Incorrect Arguments)
typecheckig node...
TMP_15 = CONVERT _ZERO_ADDRESS_1 to IVaderPoolFactory
Function name: constructor

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef

Name: TMP_15 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_15

Name: TMP_15 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
done.
TMP_16(bool) = _factory_1 != TMP_15
Function name: constructor
[i]Type for TMP_16

Name: TMP_16 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,VaderRouter::constructor: Incorrect Arguments)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
factory_1(IVaderPoolFactory) := _factory_1(IVaderPoolFactory)
has variable
typecheckig node...
factory_1(IVaderPoolFactory) := _factory_1(IVaderPoolFactory)
Function name: constructor
asgn

Name: _factory Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: factory Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for factory

Name: factory Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "constructor":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: constructor
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: addLiquidity
Function addLiquidity not marked
Mark Iterations TRUE, proceeding anyway
Function name: addLiquidity
Function Visibility (test): external
tokenA
Finding type for tokenA...
IERC20
tokenB
Finding type for tokenB...
IERC20
amountADesired
Finding type for amountADesired...
uint256
amountBDesired
Finding type for amountBDesired...
uint256

Finding type for ...
uint256

Finding type for ...
uint256
to
Finding type for to...
address
deadline
Finding type for deadline...
uint256
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 5
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 6
    num: [-1]
    den: [-1]
    norm: u
    link: to
    fields: []
    fintype: -1
Param: 7
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_0(uint256,uint256,uint256) = INTERNAL_CALL, VaderRouter.addLiquidity(IERC20,IERC20,uint256,uint256,address,uint256)(tokenA_1,tokenB_1,amountADesired_1,amountBDesired_1,to_1,deadline_1)
has variable
clearing ir...?
RETURN TUPLE_0
typecheckig node...
TUPLE_0(uint256,uint256,uint256) = INTERNAL_CALL, VaderRouter.addLiquidity(IERC20,IERC20,uint256,uint256,address,uint256)(tokenA_1,tokenB_1,amountADesired_1,amountBDesired_1,to_1,deadline_1)
Function name: addLiquidity
Internal call...
addLiquidity
tokenA
tokenB
amountADesired
amountBDesired
to
deadline
Function: addLiquidity
ic
[i]Type for TUPLE_0

Name: TUPLE_0 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TUPLE_0
RETURN

Name: TUPLE_0 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "addLiquidity":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: addLiquidity
Function addLiquidity not marked
Mark Iterations TRUE, proceeding anyway
Function name: addLiquidity
Function Visibility (test): public
tokenA
Finding type for tokenA...
IERC20
tokenB
Finding type for tokenB...
IERC20
amountADesired
Finding type for amountADesired...
uint256
amountBDesired
Finding type for amountBDesired...
uint256
to
Finding type for to...
address
deadline
Finding type for deadline...
uint256
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: to
    fields: []
    fintype: -1
Param: 5
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
tokenA_1(IERC20) := ϕ(['tokenA_1'])
has variable
[i] tokenA cleared
clearing ir...?
tokenB_1(IERC20) := ϕ(['tokenB_1'])
has variable
[i] tokenB cleared
clearing ir...?
amountADesired_1(uint256) := ϕ(['amountADesired_1'])
has variable
[i] amountADesired cleared
clearing ir...?
amountBDesired_1(uint256) := ϕ(['amountBDesired_1'])
has variable
[i] amountBDesired cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared
clearing ir...?
deadline_1(uint256) := ϕ(['deadline_1'])
has variable
[i] deadline cleared
typecheckig node...
tokenA_1(IERC20) := ϕ(['tokenA_1'])
Function name: addLiquidity
Phi
[i]Type for tokenA

Name: tokenA Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tokenB_1(IERC20) := ϕ(['tokenB_1'])
Function name: addLiquidity
Phi
[i]Type for tokenB

Name: tokenB Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountADesired_1(uint256) := ϕ(['amountADesired_1'])
Function name: addLiquidity
Phi
[i]Type for amountADesired

Name: amountADesired Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountBDesired_1(uint256) := ϕ(['amountBDesired_1'])
Function name: addLiquidity
Phi
[i]Type for amountBDesired

Name: amountBDesired Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['to_1'])
Function name: addLiquidity
Phi
[i]Type for to

Name: to Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: to
Fields: 
Finance Type: undef
done.
deadline_1(uint256) := ϕ(['deadline_1'])
Function name: addLiquidity
Phi
[i]Type for deadline

Name: deadline Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
typecheckig node...
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
Internal call...
ensure
deadline
Function: ensure
ic
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_18 = CONVERT tokenA_1 to address
has variable
[i] TMP_18 cleared
clearing ir...?
TMP_19 = CONVERT tokenB_1 to address
has variable
[i] TMP_19 cleared
clearing ir...?
TUPLE_1(IVaderPool,uint256,uint256) = INTERNAL_CALL, VaderRouter._addLiquidity(address,address,uint256,uint256)(TMP_18,TMP_19,amountADesired_1,amountBDesired_1)
has variable
clearing ir...?
pool_1(IVaderPool)= UNPACK TUPLE_1 index: 0 
has variable
[i] pool cleared
clearing ir...?
amountA_1(uint256)= UNPACK TUPLE_1 index: 1 
has variable
[i] amountA cleared
clearing ir...?
amountB_1(uint256)= UNPACK TUPLE_1 index: 2 
has variable
[i] amountB cleared
typecheckig node...
TMP_18 = CONVERT tokenA_1 to address
Function name: addLiquidity

Name: tokenA Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_18 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_18

Name: TMP_18 Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_19 = CONVERT tokenB_1 to address
Function name: addLiquidity

Name: tokenB Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_19 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_19

Name: TMP_19 Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_1(IVaderPool,uint256,uint256) = INTERNAL_CALL, VaderRouter._addLiquidity(address,address,uint256,uint256)(TMP_18,TMP_19,amountADesired_1,amountBDesired_1)
Function name: addLiquidity
Internal call...
_addLiquidity
TMP_18
TMP_19
amountADesired
amountBDesired
Function: _addLiquidity
ic
[i]Type for TUPLE_1

Name: TUPLE_1 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_1(IVaderPool)= UNPACK TUPLE_1 index: 0 
Function name: addLiquidity
Reading tuple TUPLE_1 index 0
Finding type for pool...
IVaderPool
[i]Type for pool

Name: pool Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountA_1(uint256)= UNPACK TUPLE_1 index: 1 
Function name: addLiquidity
Reading tuple TUPLE_1 index 1
Finding type for amountA...
uint256
[i]Type for amountA

Name: amountA Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountB_1(uint256)= UNPACK TUPLE_1 index: 2 
Function name: addLiquidity
Reading tuple TUPLE_1 index 2
Finding type for amountB...
uint256
[i]Type for amountB

Name: amountB Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_20 = CONVERT pool_1 to address
has variable
[i] TMP_20 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['tokenA_1', 'msg.sender', 'TMP_20', 'amountA_1'] 
typecheckig node...
TMP_20 = CONVERT pool_1 to address
Function name: addLiquidity

Name: pool Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_20 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_20

Name: TMP_20 Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['tokenA_1', 'msg.sender', 'TMP_20', 'amountA_1'] 
Library Call: safeTransferFrom
done.
clearning node...
clearing ir...?
TMP_22 = CONVERT pool_1 to address
has variable
[i] TMP_22 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['tokenB_1', 'msg.sender', 'TMP_22', 'amountB_1'] 
typecheckig node...
TMP_22 = CONVERT pool_1 to address
Function name: addLiquidity

Name: pool Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_22 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_22

Name: TMP_22 Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['tokenB_1', 'msg.sender', 'TMP_22', 'amountB_1'] 
Library Call: safeTransferFrom
done.
clearning node...
clearing ir...?
TMP_24(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:mint, arguments:['to_1']  
has variable
[i] TMP_24 cleared
clearing ir...?
liquidity_1(uint256) := TMP_24(uint256)
has variable
[i] liquidity cleared
typecheckig node...
TMP_24(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:mint, arguments:['to_1']  
Function name: addLiquidity
High Call: mint
func name:mint
other func name:mint
TMP_24
[i]Type for TMP_24

Name: TMP_24 Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidity_1(uint256) := TMP_24(uint256)
Function name: addLiquidity
asgn

Name: TMP_24 Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for liquidity

Name: liquidity Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "addLiquidity":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: removeLiquidity
Function name: removeLiquidity
Function Visibility (test): public
tokenA
Finding type for tokenA...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: tokenA Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
tokenB
Finding type for tokenB...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: tokenB Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
id
Finding type for id...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: id Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amountAMin
Finding type for amountAMin...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountAMin Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amountBMin
Finding type for amountBMin...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountBMin Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
to
Finding type for to...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: to Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
deadline
Finding type for deadline...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: deadline Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 5
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 6
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 5
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 6
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
factory_2(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
reserve_1(IVaderReserve) := ϕ(['reserve_7', 'reserve_8', 'reserve_0'])
has variable
typecheckig node...
factory_2(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: removeLiquidity
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
reserve_1(IVaderReserve) := ϕ(['reserve_7', 'reserve_8', 'reserve_0'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
typecheckig node...
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
Internal call...
ensure
deadline
Function: ensure
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: ensure
Function Visibility: internal
clearning node...
clearing ir...?
deadline_1(uint256) := ϕ(['deadline_1', 'deadline_1', 'deadline_1', 'deadline_1'])
has variable
[i] deadline cleared
typecheckig node...
deadline_1(uint256) := ϕ(['deadline_1', 'deadline_1', 'deadline_1', 'deadline_1'])
Function name: ensure
Phi
[i]Type for deadline

Name: deadline Function: ensure
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_112(bool) = deadline_1 >= block.timestamp
has variable
[i] TMP_112 cleared
clearing ir...?
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,VaderRouter::ensure: Expired)
typecheckig node...
TMP_112(bool) = deadline_1 >= block.timestamp
Function name: ensure
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_112

Name: TMP_112 Function: ensure
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,VaderRouter::ensure: Expired)
[i]Type for TMP_113

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "ensure":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: ensure
done.
clearning node...
clearing ir...?
TMP_26(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_3(IVaderPoolFactory), function:getPool, arguments:['tokenA_1', 'tokenB_1']  
has variable
[i] TMP_26 cleared
clearing ir...?
factory_4(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_3', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
reserve_3(IVaderReserve) := ϕ(['reserve_2', 'reserve_8', 'reserve_7'])
has variable
clearing ir...?
pool_1(IVaderPool) := TMP_26(IVaderPool)
has variable
[i] pool cleared
typecheckig node...
TMP_26(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_3(IVaderPoolFactory), function:getPool, arguments:['tokenA_1', 'tokenB_1']  
Function name: removeLiquidity
High Call: getPool
func name:getPool
other func name:getPool
TMP_26
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
tokenA
tokenB
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_26

Name: TMP_26 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_4(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_3', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: removeLiquidity
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
reserve_3(IVaderReserve) := ϕ(['reserve_2', 'reserve_8', 'reserve_7'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
done.
pool_1(IVaderPool) := TMP_26(IVaderPool)
Function name: removeLiquidity
asgn

Name: TMP_26 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool

Name: pool Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_27 = CONVERT pool_1 to address
has variable
[i] TMP_27 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:transferFrom, arguments:['msg.sender', 'TMP_27', 'id_1']  
clearing ir...?
factory_5(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_4', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
reserve_4(IVaderReserve) := ϕ(['reserve_3', 'reserve_8', 'reserve_7'])
has variable
typecheckig node...
TMP_27 = CONVERT pool_1 to address
Function name: removeLiquidity

Name: pool Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: TMP_27 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_27

Name: TMP_27 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:transferFrom, arguments:['msg.sender', 'TMP_27', 'id_1']  
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
done.
factory_5(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_4', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: removeLiquidity
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
reserve_4(IVaderReserve) := ϕ(['reserve_3', 'reserve_8', 'reserve_7'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_2(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:burn, arguments:['id_1', 'to_1']  
has variable
clearing ir...?
factory_6(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_5', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
reserve_5(IVaderReserve) := ϕ(['reserve_4', 'reserve_8', 'reserve_7'])
has variable
clearing ir...?
amountNative_1(uint256)= UNPACK TUPLE_2 index: 0 
has variable
[i] amountNative cleared
clearing ir...?
amountForeign_1(uint256)= UNPACK TUPLE_2 index: 1 
has variable
[i] amountForeign cleared
clearing ir...?
coveredLoss_1(uint256)= UNPACK TUPLE_2 index: 2 
has variable
[i] coveredLoss cleared
typecheckig node...
TUPLE_2(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:burn, arguments:['id_1', 'to_1']  
Function name: removeLiquidity
High Call: burn
func name:burn
other func name:burn
TUPLE_2
hlc contract name: BasePool func_name: burn
('c', [-1], [-1], 'u', None)
id
to
('c', [-1], [-1], 'u', None)
id
to
('c', [-1], [-1], 'u', None)
id
to
wfc len: 3
COPIED
[i]Type for TUPLE_2

Name: TUPLE_2 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
factory_6(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_5', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: removeLiquidity
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
reserve_5(IVaderReserve) := ϕ(['reserve_4', 'reserve_8', 'reserve_7'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
done.
amountNative_1(uint256)= UNPACK TUPLE_2 index: 0 
Function name: removeLiquidity
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amountNative

Name: amountNative Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountForeign_1(uint256)= UNPACK TUPLE_2 index: 1 
Function name: removeLiquidity
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amountForeign

Name: amountForeign Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
coveredLoss_1(uint256)= UNPACK TUPLE_2 index: 2 
Function name: removeLiquidity
Reading tuple TUPLE_2 index 2
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for coveredLoss

Name: coveredLoss Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_35(address) = HIGH_LEVEL_CALL, dest:factory_6(IVaderPoolFactory), function:nativeAsset, arguments:[]  
has variable
[i] TMP_35 cleared
clearing ir...?
factory_7(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_6', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
reserve_6(IVaderReserve) := ϕ(['reserve_5', 'reserve_8', 'reserve_7'])
has variable
clearing ir...?
TMP_36(bool) = tokenA_1 == TMP_35
has variable
[i] TMP_36 cleared
clearing ir...?
CONDITION TMP_36
typecheckig node...
TMP_35(address) = HIGH_LEVEL_CALL, dest:factory_6(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: removeLiquidity
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_35
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_35

Name: TMP_35 Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
factory_7(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_6', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: removeLiquidity
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
reserve_6(IVaderReserve) := ϕ(['reserve_5', 'reserve_8', 'reserve_7'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
done.
TMP_36(bool) = tokenA_1 == TMP_35
Function name: removeLiquidity
[i]Type for TMP_36

Name: TMP_36 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_36
Condition...
Conidtion: 
TMP_36
TMP_36
clearning node...
clearing ir...?
amountA_1(uint256) := amountNative_1(uint256)
has variable
[i] amountA cleared
clearing ir...?
amountB_1(uint256) := amountForeign_1(uint256)
has variable
[i] amountB cleared
typecheckig node...
amountA_1(uint256) := amountNative_1(uint256)
Function name: removeLiquidity
asgn

Name: amountNative Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountA Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountB_1(uint256) := amountForeign_1(uint256)
Function name: removeLiquidity
asgn

Name: amountForeign Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountB Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
amountA_2(uint256) := amountForeign_1(uint256)
has variable
[i] amountA cleared
clearing ir...?
amountB_2(uint256) := amountNative_1(uint256)
has variable
[i] amountB cleared
typecheckig node...
amountA_2(uint256) := amountForeign_1(uint256)
Function name: removeLiquidity
asgn

Name: amountForeign Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountA Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountB_2(uint256) := amountNative_1(uint256)
Function name: removeLiquidity
asgn

Name: amountNative Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountB Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
amountA_3(uint256) := ϕ(['amountA_1', 'amountA_2'])
has variable
[i] amountA cleared
clearing ir...?
amountB_3(uint256) := ϕ(['amountB_1', 'amountB_2'])
has variable
[i] amountB cleared
typecheckig node...
amountA_3(uint256) := ϕ(['amountA_1', 'amountA_2'])
Function name: removeLiquidity
Phi
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountB_3(uint256) := ϕ(['amountB_1', 'amountB_2'])
Function name: removeLiquidity
Phi
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_29(bool) = amountA_3 >= amountAMin_1
has variable
[i] TMP_29 cleared
clearing ir...?
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,UniswapV2Router: INSUFFICIENT_A_AMOUNT)
typecheckig node...
TMP_29(bool) = amountA_3 >= amountAMin_1
Function name: removeLiquidity
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_29

Name: TMP_29 Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_30(None) = SOLIDITY_CALL require(bool,string)(TMP_29,UniswapV2Router: INSUFFICIENT_A_AMOUNT)
[i]Type for TMP_30

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_31(bool) = amountB_3 >= amountBMin_1
has variable
[i] TMP_31 cleared
clearing ir...?
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,UniswapV2Router: INSUFFICIENT_B_AMOUNT)
typecheckig node...
TMP_31(bool) = amountB_3 >= amountBMin_1
Function name: removeLiquidity
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_31

Name: TMP_31 Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,UniswapV2Router: INSUFFICIENT_B_AMOUNT)
[i]Type for TMP_32

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:reserve_6(IVaderReserve), function:reimburseImpermanentLoss, arguments:['msg.sender', 'coveredLoss_1']  
clearing ir...?
reserve_7(IVaderReserve) := ϕ(['reserve_6', 'reserve_8', 'reserve_7'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:reserve_6(IVaderReserve), function:reimburseImpermanentLoss, arguments:['msg.sender', 'coveredLoss_1']  
High Call: reimburseImpermanentLoss
func name:reimburseImpermanentLoss
other func name:reimburseImpermanentLoss
done.
reserve_7(IVaderReserve) := ϕ(['reserve_6', 'reserve_8', 'reserve_7'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "removeLiquidity":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: removeLiquidity

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: swapExactTokensForTokens
Function name: swapExactTokensForTokens
Function Visibility (test): external
amountIn
Finding type for amountIn...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountIn Function: swapExactTokensForTokens
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amountOutMin
Finding type for amountOutMin...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountOutMin Function: swapExactTokensForTokens
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
path
Finding type for path...
address[]
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address[]
address[]
address
Final Type: address

Name: path Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
to
Finding type for to...
address
Check copy_toekn_tuple
(-1, -1, 0, 'NATIVETOKEN')
----
Type: address
address
Final Type: address

Name: to Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
deadline
Finding type for deadline...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: deadline Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: NATIVETOKEN
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: NATIVETOKEN
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
typecheckig node...
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
Internal call...
ensure
deadline
Function: ensure
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0
done.
clearning node...
clearing ir...?
TMP_37(uint256) = INTERNAL_CALL, VaderRouter._swap(uint256,address[],address)(amountIn_1,path_1 (-> []),to_1)
has variable
[i] TMP_37 cleared
clearing ir...?
amountOut_1(uint256) := TMP_37(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_37(uint256) = INTERNAL_CALL, VaderRouter._swap(uint256,address[],address)(amountIn_1,path_1 (-> []),to_1)
Function name: swapExactTokensForTokens
Internal call...
_swap
amountIn
path
to
Function: _swap
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: NATIVETOKEN
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: NATIVETOKEN
    fields: []
    fintype: -1
Parameter length: 1
[[2], [-1], 0, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, 'NATIVETOKEN', [], -1]
added
xyz
Function name: _swap
Function Visibility: private
clearning node...
clearing ir...?
amountIn_1(uint256) := ϕ(['amountIn_1', 'amountIn_1'])
has variable
[i] amountIn cleared
clearing ir...?
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])', 'path_1 (-> [])'])
has variable
[i] path cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1'])
has variable
[i] to cleared
clearing ir...?
factory_8(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
typecheckig node...
amountIn_1(uint256) := ϕ(['amountIn_1', 'amountIn_1'])
Function name: _swap
Phi
[i]Type for amountIn

Name: amountIn Function: _swap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])', 'path_1 (-> [])'])
Function name: _swap
Phi
[i]Type for path

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['to_1', 'to_1'])
Function name: _swap
Phi
[i]Type for to

Name: to Function: _swap
Num: -1
Den: -1
Norm: u
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
factory_8(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_8 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_51(bool) = REF_8 == 3
has variable
[i] TMP_51 cleared
clearing ir...?
CONDITION TMP_51
typecheckig node...
REF_8 -> LENGTH path_1 (-> [])
[i]Type for REF_8

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_51(bool) = REF_8 == 3
Function name: _swap
[i]Type for TMP_51

Name: TMP_51 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_51
Condition...
Conidtion: 
TMP_51
TMP_51
clearning node...
clearing ir...?
REF_9(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_10(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_52(bool) = REF_9 != REF_10
has variable
[i] TMP_52 cleared
clearing ir...?
REF_11(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_53(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
has variable
[i] TMP_53 cleared
clearing ir...?
factory_11(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
TMP_54(bool) = REF_11 == TMP_53
has variable
[i] TMP_54 cleared
clearing ir...?
TMP_55(bool) = TMP_52 && TMP_54
has variable
[i] TMP_55 cleared
clearing ir...?
REF_13(address) -> path_1 (-> [])[2]
has variable
clearing ir...?
REF_14(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_56(bool) = REF_13 != REF_14
has variable
[i] TMP_56 cleared
clearing ir...?
TMP_57(bool) = TMP_55 && TMP_56
has variable
[i] TMP_57 cleared
clearing ir...?
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,VaderRouter::_swap: Incorrect Path)
typecheckig node...
REF_9(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_9

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_10(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_10

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_52(bool) = REF_9 != REF_10
Function name: _swap
[i]Type for TMP_52

Name: TMP_52 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_11(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_11

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_53(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: _swap
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_53
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_53

Name: TMP_53 Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
factory_11(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
TMP_54(bool) = REF_11 == TMP_53
Function name: _swap
[i]Type for TMP_54

Name: TMP_54 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_55(bool) = TMP_52 && TMP_54
Function name: _swap
[i]Type for TMP_55

Name: TMP_55 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_13(address) -> path_1 (-> [])[2]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_13

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_14(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_14

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_56(bool) = REF_13 != REF_14
Function name: _swap
[i]Type for TMP_56

Name: TMP_56 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_57(bool) = TMP_55 && TMP_56
Function name: _swap
[i]Type for TMP_57

Name: TMP_57 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_16(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_17(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_59(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_11(IVaderPoolFactory), function:getPool, arguments:['REF_16', 'REF_17']  
has variable
[i] TMP_59 cleared
clearing ir...?
factory_12(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_11', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool0_1(IVaderPool) := TMP_59(IVaderPool)
has variable
[i] pool0 cleared
typecheckig node...
REF_16(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_16

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_17(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_17

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_59(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_11(IVaderPoolFactory), function:getPool, arguments:['REF_16', 'REF_17']  
Function name: _swap
High Call: getPool
func name:getPool
other func name:getPool
TMP_59
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_16
REF_17
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_59

Name: TMP_59 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_12(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_11', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool0_1(IVaderPool) := TMP_59(IVaderPool)
Function name: _swap
asgn

Name: TMP_59 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool0 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool0

Name: pool0 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_19(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
REF_20(address) -> path_1 (-> [])[2]
has variable
clearing ir...?
TMP_60(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_12(IVaderPoolFactory), function:getPool, arguments:['REF_19', 'REF_20']  
has variable
[i] TMP_60 cleared
clearing ir...?
factory_13(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_12', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool1_1(IVaderPool) := TMP_60(IVaderPool)
has variable
[i] pool1 cleared
typecheckig node...
REF_19(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_19

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_20(address) -> path_1 (-> [])[2]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_20

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_60(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_12(IVaderPoolFactory), function:getPool, arguments:['REF_19', 'REF_20']  
Function name: _swap
High Call: getPool
func name:getPool
other func name:getPool
TMP_60
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_19
REF_20
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_60

Name: TMP_60 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_13(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_12', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool1_1(IVaderPool) := TMP_60(IVaderPool)
Function name: _swap
asgn

Name: TMP_60 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool1 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool1

Name: pool1 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_21(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_61 = CONVERT REF_21 to IERC20
has variable
[i] TMP_61 cleared
clearing ir...?
TMP_62 = CONVERT pool0_1 to address
has variable
[i] TMP_62 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_61', 'msg.sender', 'TMP_62', 'amountIn_1'] 
typecheckig node...
REF_21(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_21

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_61 = CONVERT REF_21 to IERC20
Function name: _swap

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_61 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_61

Name: TMP_61 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_62 = CONVERT pool0_1 to address
Function name: _swap

Name: pool0 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: TMP_62 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_62

Name: TMP_62 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_61', 'msg.sender', 'TMP_62', 'amountIn_1'] 
Library Call: safeTransferFrom
done.
clearning node...
clearing ir...?
REF_25 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_67(bool) = REF_25 == 2
has variable
[i] TMP_67 cleared
clearing ir...?
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,VaderRouter::_swap: Incorrect Path Length)
typecheckig node...
REF_25 -> LENGTH path_1 (-> [])
[i]Type for REF_25

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_67(bool) = REF_25 == 2
Function name: _swap
[i]Type for TMP_67

Name: TMP_67 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,VaderRouter::_swap: Incorrect Path Length)
[i]Type for TMP_68

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_69(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
has variable
[i] TMP_69 cleared
clearing ir...?
factory_9(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_8', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
nativeAsset_1(address) := TMP_69(address)
has variable
[i] nativeAsset cleared
typecheckig node...
TMP_69(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: _swap
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_69
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_69

Name: TMP_69 Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
factory_9(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_8', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
nativeAsset_1(address) := TMP_69(address)
Function name: _swap
asgn

Name: TMP_69 Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeAsset Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAsset

Name: nativeAsset Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_27(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_28(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_70(bool) = REF_27 != REF_28
has variable
[i] TMP_70 cleared
clearing ir...?
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,VaderRouter::_swap: Incorrect Path)
typecheckig node...
REF_27(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_27

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_28(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_28

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_70(bool) = REF_27 != REF_28
Function name: _swap
[i]Type for TMP_70

Name: TMP_70 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_71

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_30(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_31(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_72(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_9(IVaderPoolFactory), function:getPool, arguments:['REF_30', 'REF_31']  
has variable
[i] TMP_72 cleared
clearing ir...?
factory_10(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_9', 'factory_15'])
has variable
clearing ir...?
pool_1(IVaderPool) := TMP_72(IVaderPool)
has variable
[i] pool cleared
typecheckig node...
REF_30(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_30

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_31(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_31

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_72(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_9(IVaderPoolFactory), function:getPool, arguments:['REF_30', 'REF_31']  
Function name: _swap
High Call: getPool
func name:getPool
other func name:getPool
TMP_72
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_30
REF_31
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_72

Name: TMP_72 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_10(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_9', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool_1(IVaderPool) := TMP_72(IVaderPool)
Function name: _swap
asgn

Name: TMP_72 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool

Name: pool Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_32(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_73 = CONVERT REF_32 to IERC20
has variable
[i] TMP_73 cleared
clearing ir...?
TMP_74 = CONVERT pool_1 to address
has variable
[i] TMP_74 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_73', 'msg.sender', 'TMP_74', 'amountIn_1'] 
typecheckig node...
REF_32(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_32

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73 = CONVERT REF_32 to IERC20
Function name: _swap

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_73 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_73

Name: TMP_73 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_74 = CONVERT pool_1 to address
Function name: _swap

Name: pool Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: TMP_74 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_73', 'msg.sender', 'TMP_74', 'amountIn_1'] 
Library Call: safeTransferFrom
done.
clearning node...
clearing ir...?
REF_34(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_76(bool) = REF_34 == nativeAsset_1
has variable
[i] TMP_76 cleared
clearing ir...?
CONDITION TMP_76
typecheckig node...
REF_34(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_34

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_76(bool) = REF_34 == nativeAsset_1
Function name: _swap
[i]Type for TMP_76

Name: TMP_76 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_76
Condition...
Conidtion: 
TMP_76
TMP_76
clearning node...
clearing ir...?
REF_36(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_78(bool) = REF_36 == nativeAsset_1
has variable
[i] TMP_78 cleared
clearing ir...?
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,VaderRouter::_swap: Incorrect Path)
typecheckig node...
REF_36(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_36

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(bool) = REF_36 == nativeAsset_1
Function name: _swap
[i]Type for TMP_78

Name: TMP_78 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'to_1']  
has variable
[i] TMP_77 cleared
clearing ir...?
RETURN TMP_77
typecheckig node...
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_77
hlc contract name: BasePool func_name: swap
amountIn_1
0
val: 0
to_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: NATIVETOKEN
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FOREIGNTOKEN
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, None, [], -1]
-100
added
xyz
Function name: swap
Function Visibility: public
clearning node...
clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
has variable
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
has variable
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_0', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_9'])
has variable
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
has variable
typecheckig node...
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Function name: swap
Phi
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Function name: swap
Phi
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['to_1'])
Function name: swap
Phi
[i]Type for to

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_0', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_9'])
Function name: swap
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Function name: swap
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
typecheckig node...
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Internal call...
nonReentrant
Function: nonReentrant
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
typecheckig node...
MODIFIER_CALL, GasThrottle.validateGas()()
Internal call...
validateGas
Function: validateGas
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
has variable
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
has variable
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
has variable
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
has variable
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
typecheckig node...
TMP_185(bool) = nativeAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_186(bool) = foreignAmountIn_1 == 0
Function name: swap
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_187(bool) = TMP_185 && TMP_186
Function name: swap
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_188(bool) = nativeAmountIn_1 == 0
Function name: swap
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_189(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_190(bool) = TMP_188 && TMP_189
Function name: swap
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_191(bool) = TMP_187 || TMP_190
Function name: swap
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
has variable
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
Function name: swap
Internal call...
getReserves
Function: getReserves
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
Function name: swap
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
Function name: swap
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
has variable
[i] _nativeAsset cleared
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Function name: swap
asgn

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef

Name: _nativeAsset Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
has variable
[i] _foreignAsset cleared
typecheckig node...
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Function name: swap
asgn

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef

Name: _foreignAsset Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_193 = CONVERT this to address
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
has variable
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_193 = CONVERT this to address
Function name: swap
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_194
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_193
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
nativeBalance_1(uint256) := TMP_194(uint256)
Function name: swap
asgn

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT this to address
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
has variable
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_195 = CONVERT this to address
Function name: swap
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_196
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_195
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignBalance_1(uint256) := TMP_196(uint256)
Function name: swap
asgn

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
has variable
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
has variable
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
typecheckig node...
TMP_197 = CONVERT _nativeAsset_1 to address
Function name: swap

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef

Name: TMP_197 Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
TMP_198(bool) = to_1 != TMP_197
Function name: swap
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_199 = CONVERT _foreignAsset_1 to address
Function name: swap

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef

Name: TMP_199 Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
TMP_200(bool) = to_1 != TMP_199
Function name: swap
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_201(bool) = TMP_198 && TMP_200
Function name: swap
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
typecheckig node...
TMP_203(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_203
Condition...
Conidtion: 
TMP_203
TMP_203
clearning node...
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Function name: swap
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_215 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
Error with TMP_216 in function swap
Error with: TMP_216 in function swap
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88a30>]
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
Error with TMP_218 in function swap
Error with: TMP_218 in function swap
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88d90>]
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
has variable
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
has variable
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Function name: swap
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_204 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
has variable
[i] foreignAmountOut cleared
typecheckig node...
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: swap
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
nativeAmountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_38 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_39 Function: None
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
Error with TMP_142 in function calculateSwap
Error with: TMP_142 in function calculateSwap
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88d90>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb0946c0df0>]
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: a Function: pow
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountOut_1(uint256) := TMP_220(uint256)
Function name: swap
asgn

Name: TMP_220 Function: swap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
has variable
[i] nativeAmountOut cleared
typecheckig node...
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: swap
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
foreignAmountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_42 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_43 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_45 Function: None
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeAmountOut_1(uint256) := TMP_209(uint256)
Function name: swap
asgn

Name: TMP_209 Function: swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nativeAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
has variable
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_221(bool) = foreignAmountOut_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
Error with TMP_222 in function swap
Error with: TMP_222 in function swap
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88d90>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb0946c0df0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f915b0>]
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_223(bool) = TMP_221 && TMP_222
Function name: swap
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
has variable
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
has variable
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_210(bool) = nativeAmountOut_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
Error with TMP_211 in function swap
Error with: TMP_211 in function swap
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88d90>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb0946c0df0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f915b0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f9a730>]
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(bool) = TMP_210 && TMP_211
Function name: swap
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
has variable
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
has variable
[i] foreignAmountOut cleared
typecheckig node...
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
Function name: swap
Phi
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
Function name: swap
Phi
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_226 = CONVERT this to address
has variable
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
has variable
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_226 = CONVERT this to address
Function name: swap
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_227
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_226
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
nativeBalance_2(uint256) := TMP_227(uint256)
Function name: swap
asgn

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_228 = CONVERT this to address
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
has variable
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_228 = CONVERT this to address
Function name: swap
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_229
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_228
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignBalance_2(uint256) := TMP_229(uint256)
Function name: swap
asgn

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
typecheckig node...
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Internal call...
_update
nativeBalance
foreignBalance
nativeReserve
foreignReserve
Function: _update
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
0
done.
clearning node...
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
typecheckig node...
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
clearning node...
clearing ir...?
RETURN nativeAmountOut_2
typecheckig node...
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "swap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: swap

Name: nativeAmountOut Function: swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_77

Name: TMP_77 Function: _swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_77
RETURN

Name: TMP_77 Function: _swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TMP_80(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['0', 'amountIn_1', 'to_1']  
has variable
[i] TMP_80 cleared
clearing ir...?
RETURN TMP_80
typecheckig node...
TMP_80(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['0', 'amountIn_1', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_80
hlc contract name: BasePool func_name: swap
0
val: 0
amountIn_1
to_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: NATIVETOKEN
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FOREIGNTOKEN
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, None, [], -1]
-100
added
xyz
Function name: swap
Function Visibility: public
clearning node...
clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
has variable
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
has variable
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_0', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_9'])
has variable
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
has variable
typecheckig node...
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Function name: swap
Phi
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Function name: swap
Phi
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['to_1'])
Function name: swap
Phi
[i]Type for to

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_0', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_9'])
Function name: swap
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Function name: swap
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
typecheckig node...
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Internal call...
nonReentrant
Function: nonReentrant
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
typecheckig node...
MODIFIER_CALL, GasThrottle.validateGas()()
Internal call...
validateGas
Function: validateGas
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
has variable
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
has variable
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
has variable
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
has variable
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
typecheckig node...
TMP_185(bool) = nativeAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_186(bool) = foreignAmountIn_1 == 0
Function name: swap
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_187(bool) = TMP_185 && TMP_186
Function name: swap
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_188(bool) = nativeAmountIn_1 == 0
Function name: swap
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_189(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_190(bool) = TMP_188 && TMP_189
Function name: swap
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_191(bool) = TMP_187 || TMP_190
Function name: swap
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
has variable
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
Function name: swap
Internal call...
getReserves
Function: getReserves
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
Function name: swap
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
Function name: swap
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
has variable
[i] _nativeAsset cleared
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Function name: swap
asgn

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef

Name: _nativeAsset Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
has variable
[i] _foreignAsset cleared
typecheckig node...
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Function name: swap
asgn

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef

Name: _foreignAsset Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_193 = CONVERT this to address
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
has variable
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_193 = CONVERT this to address
Function name: swap
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_194
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_193
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
nativeBalance_1(uint256) := TMP_194(uint256)
Function name: swap
asgn

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT this to address
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
has variable
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_195 = CONVERT this to address
Function name: swap
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_196
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_195
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignBalance_1(uint256) := TMP_196(uint256)
Function name: swap
asgn

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
has variable
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
has variable
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
typecheckig node...
TMP_197 = CONVERT _nativeAsset_1 to address
Function name: swap

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef

Name: TMP_197 Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
TMP_198(bool) = to_1 != TMP_197
Function name: swap
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_199 = CONVERT _foreignAsset_1 to address
Function name: swap

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef

Name: TMP_199 Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
TMP_200(bool) = to_1 != TMP_199
Function name: swap
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_201(bool) = TMP_198 && TMP_200
Function name: swap
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
typecheckig node...
TMP_203(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_203
Condition...
Conidtion: 
TMP_203
TMP_203
clearning node...
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Function name: swap
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_215 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
has variable
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
has variable
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Function name: swap
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_204 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
has variable
[i] foreignAmountOut cleared
typecheckig node...
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: swap
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
nativeAmountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_48 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_49 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_51 Function: None
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountOut_1(uint256) := TMP_220(uint256)
Function name: swap
asgn

Name: TMP_220 Function: swap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
has variable
[i] nativeAmountOut cleared
typecheckig node...
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: swap
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
foreignAmountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_53 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_54 Function: None
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amountIn Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_55 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_57 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeAmountOut_1(uint256) := TMP_209(uint256)
Function name: swap
asgn

Name: TMP_209 Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nativeAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
has variable
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_221(bool) = foreignAmountOut_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_223(bool) = TMP_221 && TMP_222
Function name: swap
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
has variable
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
has variable
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_210(bool) = nativeAmountOut_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(bool) = TMP_210 && TMP_211
Function name: swap
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
has variable
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
has variable
[i] foreignAmountOut cleared
typecheckig node...
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
Function name: swap
Phi
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
Function name: swap
Phi
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_226 = CONVERT this to address
has variable
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
has variable
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_226 = CONVERT this to address
Function name: swap
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_227
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_226
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
nativeBalance_2(uint256) := TMP_227(uint256)
Function name: swap
asgn

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_228 = CONVERT this to address
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
has variable
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_228 = CONVERT this to address
Function name: swap
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_229
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_228
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignBalance_2(uint256) := TMP_229(uint256)
Function name: swap
asgn

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
typecheckig node...
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Internal call...
_update
nativeBalance
foreignBalance
nativeReserve
foreignReserve
Function: _update
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
0
done.
clearning node...
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
typecheckig node...
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
clearning node...
clearing ir...?
RETURN nativeAmountOut_2
typecheckig node...
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "swap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: swap

Name: nativeAmountOut Function: swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_80

Name: TMP_80 Function: _swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_80
RETURN

Name: TMP_80 Function: _swap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TMP_64 = CONVERT pool1_1 to address
has variable
[i] TMP_64 cleared
clearing ir...?
TMP_65(uint256) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'TMP_64']  
has variable
[i] TMP_65 cleared
clearing ir...?
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:swap, arguments:['0', 'TMP_65', 'to_1']  
has variable
[i] TMP_66 cleared
clearing ir...?
RETURN TMP_66
typecheckig node...
TMP_64 = CONVERT pool1_1 to address
Function name: _swap

Name: pool1 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: TMP_64 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_64

Name: TMP_64 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
TMP_65(uint256) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'TMP_64']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_65
hlc contract name: BasePool func_name: swap
amountIn_1
0
val: 0
TMP_64
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: BasePool
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FOREIGNTOKEN
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, None, [], -1]
-100
added
xyz
Function name: swap
Function Visibility: public
clearning node...
clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
has variable
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
has variable
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_0', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_9'])
has variable
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
has variable
typecheckig node...
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Function name: swap
Phi
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Function name: swap
Phi
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['to_1'])
Function name: swap
Phi
[i]Type for to

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_0', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_9'])
Function name: swap
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Function name: swap
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
typecheckig node...
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Internal call...
nonReentrant
Function: nonReentrant
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
typecheckig node...
MODIFIER_CALL, GasThrottle.validateGas()()
Internal call...
validateGas
Function: validateGas
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
has variable
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
has variable
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
has variable
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
has variable
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
typecheckig node...
TMP_185(bool) = nativeAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_186(bool) = foreignAmountIn_1 == 0
Function name: swap
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_187(bool) = TMP_185 && TMP_186
Function name: swap
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_188(bool) = nativeAmountIn_1 == 0
Function name: swap
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_189(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_190(bool) = TMP_188 && TMP_189
Function name: swap
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_191(bool) = TMP_187 || TMP_190
Function name: swap
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
has variable
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
Function name: swap
Internal call...
getReserves
Function: getReserves
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
Function name: swap
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
Function name: swap
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
has variable
[i] _nativeAsset cleared
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Function name: swap
asgn

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef

Name: _nativeAsset Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
has variable
[i] _foreignAsset cleared
typecheckig node...
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Function name: swap
asgn

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef

Name: _foreignAsset Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_193 = CONVERT this to address
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
has variable
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_193 = CONVERT this to address
Function name: swap
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_194
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_193
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
nativeBalance_1(uint256) := TMP_194(uint256)
Function name: swap
asgn

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT this to address
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
has variable
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_195 = CONVERT this to address
Function name: swap
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_196
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_195
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignBalance_1(uint256) := TMP_196(uint256)
Function name: swap
asgn

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
has variable
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
has variable
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
typecheckig node...
TMP_197 = CONVERT _nativeAsset_1 to address
Function name: swap

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef

Name: TMP_197 Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
TMP_198(bool) = to_1 != TMP_197
Function name: swap
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_199 = CONVERT _foreignAsset_1 to address
Function name: swap

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef

Name: TMP_199 Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
TMP_200(bool) = to_1 != TMP_199
Function name: swap
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_201(bool) = TMP_198 && TMP_200
Function name: swap
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
typecheckig node...
TMP_203(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_203
Condition...
Conidtion: 
TMP_203
TMP_203
clearning node...
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Function name: swap
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_215 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
has variable
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
has variable
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Function name: swap
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_204 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
has variable
[i] foreignAmountOut cleared
typecheckig node...
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: swap
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
nativeAmountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
0

Name: PIC_41 Function: None
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_220 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountOut_1(uint256) := TMP_220(uint256)
Function name: swap
asgn

Name: TMP_220 Function: swap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
has variable
[i] nativeAmountOut cleared
typecheckig node...
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: swap
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
foreignAmountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_60 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_61 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_63 Function: None
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeAmountOut_1(uint256) := TMP_209(uint256)
Function name: swap
asgn

Name: TMP_209 Function: swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nativeAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
has variable
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_221(bool) = foreignAmountOut_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_223(bool) = TMP_221 && TMP_222
Function name: swap
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
has variable
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
has variable
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_210(bool) = nativeAmountOut_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(bool) = TMP_210 && TMP_211
Function name: swap
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
has variable
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
has variable
[i] foreignAmountOut cleared
typecheckig node...
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
Function name: swap
Phi
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
Function name: swap
Phi
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_226 = CONVERT this to address
has variable
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
has variable
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_226 = CONVERT this to address
Function name: swap
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_227
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_226
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
nativeBalance_2(uint256) := TMP_227(uint256)
Function name: swap
asgn

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_228 = CONVERT this to address
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
has variable
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_228 = CONVERT this to address
Function name: swap
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_229
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_228
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignBalance_2(uint256) := TMP_229(uint256)
Function name: swap
asgn

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
typecheckig node...
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Internal call...
_update
nativeBalance
foreignBalance
nativeReserve
foreignReserve
Function: _update
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
0
done.
clearning node...
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
typecheckig node...
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
clearning node...
clearing ir...?
RETURN nativeAmountOut_2
typecheckig node...
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "swap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: swap

Name: nativeAmountOut Function: swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_65

Name: TMP_65 Function: _swap
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:swap, arguments:['0', 'TMP_65', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_66
hlc contract name: BasePool func_name: swap
0
val: 0
TMP_65
to_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [2]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: NATIVETOKEN
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FOREIGNTOKEN
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, None, [], -1]
-100
added
xyz
Function name: swap
Function Visibility: public
clearning node...
clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
has variable
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
has variable
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_0', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_9'])
has variable
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
has variable
typecheckig node...
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Function name: swap
Phi
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Function name: swap
Phi
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 1
Den: 2
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['to_1'])
Function name: swap
Phi
[i]Type for to

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_0', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_9'])
Function name: swap
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Function name: swap
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
typecheckig node...
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Internal call...
nonReentrant
Function: nonReentrant
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
typecheckig node...
MODIFIER_CALL, GasThrottle.validateGas()()
Internal call...
validateGas
Function: validateGas
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
has variable
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
has variable
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
has variable
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
has variable
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
typecheckig node...
TMP_185(bool) = nativeAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_186(bool) = foreignAmountIn_1 == 0
Function name: swap
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_187(bool) = TMP_185 && TMP_186
Function name: swap
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_188(bool) = nativeAmountIn_1 == 0
Function name: swap
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_189(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_190(bool) = TMP_188 && TMP_189
Function name: swap
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_191(bool) = TMP_187 || TMP_190
Function name: swap
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
has variable
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
Function name: swap
Internal call...
getReserves
Function: getReserves
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
Function name: swap
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
Function name: swap
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
has variable
[i] _nativeAsset cleared
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Function name: swap
asgn

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef

Name: _nativeAsset Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
has variable
[i] _foreignAsset cleared
typecheckig node...
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Function name: swap
asgn

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef

Name: _foreignAsset Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_193 = CONVERT this to address
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
has variable
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_193 = CONVERT this to address
Function name: swap
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_194
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_193
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
nativeBalance_1(uint256) := TMP_194(uint256)
Function name: swap
asgn

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT this to address
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
has variable
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_195 = CONVERT this to address
Function name: swap
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_196
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_195
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignBalance_1(uint256) := TMP_196(uint256)
Function name: swap
asgn

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
has variable
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
has variable
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
typecheckig node...
TMP_197 = CONVERT _nativeAsset_1 to address
Function name: swap

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef

Name: TMP_197 Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
Finance Type: undef
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
TMP_198(bool) = to_1 != TMP_197
Function name: swap
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_199 = CONVERT _foreignAsset_1 to address
Function name: swap

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef

Name: TMP_199 Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
Finance Type: undef
done.
TMP_200(bool) = to_1 != TMP_199
Function name: swap
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_201(bool) = TMP_198 && TMP_200
Function name: swap
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
typecheckig node...
TMP_203(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_203
Condition...
Conidtion: 
TMP_203
TMP_203
clearning node...
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Function name: swap
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeReserve Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_215 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
has variable
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
has variable
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Function name: swap
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignReserve Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_204 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
Error with TMP_205 in function swap
Error with: TMP_205 in function swap
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88d90>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb0946c0df0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f915b0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f9a730>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f91bb0>]
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
Error with TMP_207 in function swap
Error with: TMP_207 in function swap
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88d90>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb0946c0df0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f915b0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f9a730>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f91bb0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f91f10>]
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
has variable
[i] foreignAmountOut cleared
typecheckig node...
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: swap
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
nativeAmountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_66 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_67 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_69 Function: None
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountOut_1(uint256) := TMP_220(uint256)
Function name: swap
asgn

Name: TMP_220 Function: swap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
has variable
[i] nativeAmountOut cleared
typecheckig node...
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: swap
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
foreignAmountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [1]
    den: [2]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_71 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_72 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: a Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_162(uint256) = a_1 (c)* a_1
XXXXX
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
denominator_1(uint256) := TMP_143(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_144(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_74 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_75 Function: None
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: a Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_162(uint256) = a_1 (c)* a_1
XXXXX
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
denominator_1(uint256) := TMP_143(uint256)
XXXXX
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_144(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "calculateSwap":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeAmountOut_1(uint256) := TMP_209(uint256)
Function name: swap
asgn

Name: TMP_209 Function: swap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nativeAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
has variable
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_221(bool) = foreignAmountOut_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_223(bool) = TMP_221 && TMP_222
Function name: swap
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
has variable
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
has variable
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_210(bool) = nativeAmountOut_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(bool) = TMP_210 && TMP_211
Function name: swap
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
has variable
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
has variable
[i] foreignAmountOut cleared
typecheckig node...
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
Function name: swap
Phi
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
Function name: swap
Phi
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_226 = CONVERT this to address
has variable
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
has variable
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_226 = CONVERT this to address
Function name: swap
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_227
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_226
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
nativeBalance_2(uint256) := TMP_227(uint256)
Function name: swap
asgn

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_228 = CONVERT this to address
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
has variable
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_228 = CONVERT this to address
Function name: swap
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: 
Den: 
Norm: u
LF: VaderRouter
Fields: 
Finance Type: undef
done.
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_229
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_228
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignBalance_2(uint256) := TMP_229(uint256)
Function name: swap
asgn

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
typecheckig node...
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Internal call...
_update
nativeBalance
foreignBalance
nativeReserve
foreignReserve
Function: _update
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
[[1], [-1], 0, None, [], -1]
[[2], [-1], 0, None, [], -1]
0
done.
clearning node...
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
typecheckig node...
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
clearning node...
clearing ir...?
RETURN nativeAmountOut_2
typecheckig node...
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "swap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: swap

Name: nativeAmountOut Function: swap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_66

Name: TMP_66 Function: _swap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_66
RETURN

Name: TMP_66 Function: _swap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_swap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _swap

Name: TMP_66 Function: _swap
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
Check copy_toekn_tuple
([1, 1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for TMP_37

Name: TMP_37 Function: swapExactTokensForTokens
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_37(uint256)
Function name: swapExactTokensForTokens
asgn

Name: TMP_37 Function: swapExactTokensForTokens
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: swapExactTokensForTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: swapExactTokensForTokens
Num: 1, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_38(bool) = amountOut_1 >= amountOutMin_1
has variable
[i] TMP_38 cleared
clearing ir...?
TMP_39(None) = SOLIDITY_CALL require(bool,string)(TMP_38,VaderRouter::swapExactTokensForTokens: Insufficient Trade Output)
typecheckig node...
TMP_38(bool) = amountOut_1 >= amountOutMin_1
Function name: swapExactTokensForTokens
testing gt...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
Error with TMP_38 in function swapExactTokensForTokens
Error with: TMP_38 in function swapExactTokensForTokens
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88d90>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb0946c0df0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f915b0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f9a730>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f91bb0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f91f10>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb0948292b0>]
[i]Type for TMP_38

Name: TMP_38 Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_39(None) = SOLIDITY_CALL require(bool,string)(TMP_38,VaderRouter::swapExactTokensForTokens: Insufficient Trade Output)
[i]Type for TMP_39

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "swapExactTokensForTokens":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: swapExactTokensForTokens

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: swapTokensForExactTokens
Function name: swapTokensForExactTokens
Function Visibility (test): external
amountOut
Finding type for amountOut...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountOut Function: swapTokensForExactTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amountInMax
Finding type for amountInMax...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountInMax Function: swapTokensForExactTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
path
Finding type for path...
address[]
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address[]
address[]
address
Final Type: address

Name: path Function: swapTokensForExactTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
to
Finding type for to...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: to Function: swapTokensForExactTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
deadline
Finding type for deadline...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: deadline Function: swapTokensForExactTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
typecheckig node...
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
Internal call...
ensure
deadline
Function: ensure
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0
done.
clearning node...
clearing ir...?
TMP_41(uint256) = INTERNAL_CALL, VaderRouter.calculateInGivenOut(uint256,address[])(amountOut_1,path_1 (-> []))
has variable
[i] TMP_41 cleared
clearing ir...?
amountIn_1(uint256) := TMP_41(uint256)
has variable
[i] amountIn cleared
typecheckig node...
TMP_41(uint256) = INTERNAL_CALL, VaderRouter.calculateInGivenOut(uint256,address[])(amountOut_1,path_1 (-> []))
Function name: swapTokensForExactTokens
Internal call...
calculateInGivenOut
amountOut
path
Function: calculateInGivenOut
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: calculateInGivenOut
Function Visibility: public
clearning node...
clearing ir...?
amountOut_1(uint256) := ϕ(['amountOut_1'])
has variable
[i] amountOut cleared
clearing ir...?
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])'])
has variable
[i] path cleared
clearing ir...?
factory_17(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
typecheckig node...
amountOut_1(uint256) := ϕ(['amountOut_1'])
Function name: calculateInGivenOut
Phi
[i]Type for amountOut

Name: amountOut Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])'])
Function name: calculateInGivenOut
Phi
[i]Type for path

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
factory_17(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateInGivenOut
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_40 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_85(bool) = REF_40 == 2
has variable
[i] TMP_85 cleared
clearing ir...?
CONDITION TMP_85
typecheckig node...
REF_40 -> LENGTH path_1 (-> [])
[i]Type for REF_40

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_85(bool) = REF_40 == 2
Function name: calculateInGivenOut
[i]Type for TMP_85

Name: TMP_85 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_85
Condition...
Conidtion: 
TMP_85
TMP_85
clearning node...
clearing ir...?
TMP_86(address) = HIGH_LEVEL_CALL, dest:factory_17(IVaderPoolFactory), function:nativeAsset, arguments:[]  
has variable
[i] TMP_86 cleared
clearing ir...?
factory_20(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
nativeAsset_1(address) := TMP_86(address)
has variable
[i] nativeAsset cleared
typecheckig node...
TMP_86(address) = HIGH_LEVEL_CALL, dest:factory_17(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: calculateInGivenOut
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_86
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_86

Name: TMP_86 Function: calculateInGivenOut
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
factory_20(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateInGivenOut
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
nativeAsset_1(address) := TMP_86(address)
Function name: calculateInGivenOut
asgn

Name: TMP_86 Function: calculateInGivenOut
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeAsset Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAsset

Name: nativeAsset Function: calculateInGivenOut
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_50(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_51(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_91(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_17(IVaderPoolFactory), function:getPool, arguments:['REF_50', 'REF_51']  
has variable
[i] TMP_91 cleared
clearing ir...?
factory_18(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_17', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool0_1(IVaderPool) := TMP_91(IVaderPool)
has variable
[i] pool0 cleared
typecheckig node...
REF_50(address) -> path_1 (-> [])[0]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_50

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_51(address) -> path_1 (-> [])[1]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_51

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_91(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_17(IVaderPoolFactory), function:getPool, arguments:['REF_50', 'REF_51']  
Function name: calculateInGivenOut
High Call: getPool
func name:getPool
other func name:getPool
TMP_91
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_50
REF_51
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_91

Name: TMP_91 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_18(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_17', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateInGivenOut
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool0_1(IVaderPool) := TMP_91(IVaderPool)
Function name: calculateInGivenOut
asgn

Name: TMP_91 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool0 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool0

Name: pool0 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_53(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
REF_54(address) -> path_1 (-> [])[2]
has variable
clearing ir...?
TMP_92(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_18(IVaderPoolFactory), function:getPool, arguments:['REF_53', 'REF_54']  
has variable
[i] TMP_92 cleared
clearing ir...?
factory_19(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_18', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool1_1(IVaderPool) := TMP_92(IVaderPool)
has variable
[i] pool1 cleared
typecheckig node...
REF_53(address) -> path_1 (-> [])[1]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_53

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_54(address) -> path_1 (-> [])[2]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_54

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_92(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_18(IVaderPoolFactory), function:getPool, arguments:['REF_53', 'REF_54']  
Function name: calculateInGivenOut
High Call: getPool
func name:getPool
other func name:getPool
TMP_92
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_53
REF_54
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_92

Name: TMP_92 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_19(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_18', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateInGivenOut
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool1_1(IVaderPool) := TMP_92(IVaderPool)
Function name: calculateInGivenOut
asgn

Name: TMP_92 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool1 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool1

Name: pool1 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_43(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_44(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_87(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_20(IVaderPoolFactory), function:getPool, arguments:['REF_43', 'REF_44']  
has variable
[i] TMP_87 cleared
clearing ir...?
factory_21(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_20', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool_1(IVaderPool) := TMP_87(IVaderPool)
has variable
[i] pool cleared
typecheckig node...
REF_43(address) -> path_1 (-> [])[0]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_43

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_44(address) -> path_1 (-> [])[1]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_44

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_87(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_20(IVaderPoolFactory), function:getPool, arguments:['REF_43', 'REF_44']  
Function name: calculateInGivenOut
High Call: getPool
func name:getPool
other func name:getPool
TMP_87
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_43
REF_44
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_87

Name: TMP_87 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_21(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_20', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateInGivenOut
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool_1(IVaderPool) := TMP_87(IVaderPool)
Function name: calculateInGivenOut
asgn

Name: TMP_87 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool

Name: pool Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_4(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:getReserves, arguments:[]  
has variable
clearing ir...?
nativeReserve0_1(uint256)= UNPACK TUPLE_4 index: 0 
has variable
[i] nativeReserve0 cleared
clearing ir...?
foreignReserve0_1(uint256)= UNPACK TUPLE_4 index: 1 
has variable
[i] foreignReserve0 cleared
typecheckig node...
TUPLE_4(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateInGivenOut
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_4
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
Its the same:
0
0
[i]Type for TUPLE_4

Name: TUPLE_4 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve0_1(uint256)= UNPACK TUPLE_4 index: 0 
Function name: calculateInGivenOut
Reading tuple TUPLE_4 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for nativeReserve0

Name: nativeReserve0 Function: calculateInGivenOut
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve0_1(uint256)= UNPACK TUPLE_4 index: 1 
Function name: calculateInGivenOut
Reading tuple TUPLE_4 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for foreignReserve0

Name: foreignReserve0 Function: calculateInGivenOut
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:getReserves, arguments:[]  
has variable
clearing ir...?
nativeReserve_1(uint256)= UNPACK TUPLE_3 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint256)= UNPACK TUPLE_3 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateInGivenOut
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_3
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
Its the same:
0
0
[i]Type for TUPLE_3

Name: TUPLE_3 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve_1(uint256)= UNPACK TUPLE_3 index: 0 
Function name: calculateInGivenOut
Reading tuple TUPLE_3 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for nativeReserve

Name: nativeReserve Function: calculateInGivenOut
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve_1(uint256)= UNPACK TUPLE_3 index: 1 
Function name: calculateInGivenOut
Reading tuple TUPLE_3 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for foreignReserve

Name: foreignReserve Function: calculateInGivenOut
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_46(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_88(bool) = REF_46 == nativeAsset_1
has variable
[i] TMP_88 cleared
clearing ir...?
CONDITION TMP_88
typecheckig node...
REF_46(address) -> path_1 (-> [])[0]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_46

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_88(bool) = REF_46 == nativeAsset_1
Function name: calculateInGivenOut
[i]Type for TMP_88

Name: TMP_88 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_88
Condition...
Conidtion: 
TMP_88
TMP_88
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_90(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['amountOut_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_90 cleared
clearing ir...?
RETURN TMP_90
typecheckig node...
TMP_90(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['amountOut_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: calculateInGivenOut
Library Call: calculateSwapReverse
hlc contract name: VaderMath func_name: calculateSwapReverse
amountOut_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
added
xyz
Function name: calculateSwapReverse
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
has variable
[i] TMP_145 cleared
clearing ir...?
XY_1(uint256) := TMP_145(uint256)
has variable
[i] XY cleared
typecheckig node...
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_81 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_145 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_145

Name: TMP_145 Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
XY_1(uint256) := TMP_145(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_145 Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: XY Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_146(uint256) = amountOut_1 (c)* 2
has variable
[i] TMP_146 cleared
clearing ir...?
y2_1(uint256) := TMP_146(uint256)
has variable
[i] y2 cleared
typecheckig node...
TMP_146(uint256) = amountOut_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_146 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y2_1(uint256) := TMP_146(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y2 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_147(uint256) = y2_1 (c)* 2
has variable
[i] TMP_147 cleared
clearing ir...?
y4_1(uint256) := TMP_147(uint256)
has variable
[i] y4 cleared
typecheckig node...
TMP_147(uint256) = y2_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_147 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_147

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y4_1(uint256) := TMP_147(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_148(bool) = y4_1 < reserveOut_1
has variable
[i] TMP_148 cleared
clearing ir...?
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
typecheckig node...
TMP_148(bool) = y4_1 < reserveOut_1
Function name: calculateSwapReverse
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_148

Name: TMP_148 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
has variable
[i] TMP_150 cleared
clearing ir...?
TMP_151(uint256) = reserveOut_1 (c)- y4_1
has variable
[i] TMP_151 cleared
clearing ir...?
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
has variable
[i] TMP_152 cleared
clearing ir...?
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
has variable
[i] TMP_153 cleared
clearing ir...?
TMP_154(uint256) = TMP_150 (c)* TMP_153
has variable
[i] TMP_154 cleared
clearing ir...?
numeratorA_1(uint256) := TMP_154(uint256)
has variable
[i] numeratorA cleared
typecheckig node...
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
Function name: calculateSwapReverse
Internal call...
root
XY
Function: root
ic
Internal cal param_cache
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
added
xyz
Function name: root
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
Function name: root
Phi
[i]Type for a

Name: a Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_163(bool) = a_1 > 3
has variable
[i] TMP_163 cleared
clearing ir...?
CONDITION TMP_163
typecheckig node...
TMP_163(bool) = a_1 > 3
Function name: root
testing gt...
val: 3
val: 3
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 3 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_163

Name: TMP_163 Function: root
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_163
Condition...
Conidtion: 
TMP_163
TMP_163
clearning node...
clearing ir...?
c_1(uint256) := a_1(uint256)
has variable
[i] c cleared
typecheckig node...
c_1(uint256) := a_1(uint256)
Function name: root
asgn

Name: a Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(uint256) = a_1 (c)/ 2
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(uint256) = TMP_164 (c)+ 1
has variable
[i] TMP_165 cleared
clearing ir...?
x_1(uint256) := TMP_165(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_164(uint256) = a_1 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_164

Name: TMP_164 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(uint256) = TMP_164 (c)+ 1
Function name: root
val: 1

Name: TMP_165 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_165 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_165

Name: TMP_165 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_1(uint256) := TMP_165(uint256)
Function name: root
asgn

Name: TMP_165 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_170(bool) = a_1 != 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = a_1 != 0
Function name: root
[i]Type for TMP_170

Name: TMP_170 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_2(uint256) := ϕ(['c_1', 'c_3'])
has variable
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
has variable
[i] x cleared
clearing ir...?
TMP_166(bool) = x_2 < c_2
has variable
[i] TMP_166 cleared
clearing ir...?
CONDITION TMP_166
typecheckig node...
c_2(uint256) := ϕ(['c_1', 'c_3'])
Function name: root
Phi
[i]Type for c

Name: c Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
x_2(uint256) := ϕ(['x_1', 'x_3'])
Function name: root
Phi
[i]Type for x

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = x_2 < c_2
Function name: root
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_166

Name: TMP_166 Function: root
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_166
Condition...
Conidtion: 
TMP_166
TMP_166
clearning node...
clearing ir...?
c_4(uint256) := 1(uint256)
has variable
[i] c cleared
typecheckig node...
c_4(uint256) := 1(uint256)
Function name: root
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_3(uint256) := x_2(uint256)
has variable
[i] c cleared
typecheckig node...
c_3(uint256) := x_2(uint256)
Function name: root
asgn

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_167(uint256) = a_1 (c)/ x_2
has variable
[i] TMP_167 cleared
clearing ir...?
TMP_168(uint256) = TMP_167 (c)+ x_2
has variable
[i] TMP_168 cleared
clearing ir...?
TMP_169(uint256) = TMP_168 (c)/ 2
has variable
[i] TMP_169 cleared
clearing ir...?
x_3(uint256) := TMP_169(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_167(uint256) = a_1 (c)/ x_2
Function name: root
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_82 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: root
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_168(uint256) = TMP_167 (c)+ x_2
Function name: root

Name: TMP_168 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_168

Name: TMP_168 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_169(uint256) = TMP_168 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_169

Name: TMP_169 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_3(uint256) := TMP_169(uint256)
Function name: root
asgn

Name: TMP_169 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "root":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: root

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_150

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151(uint256) = reserveOut_1 (c)- y4_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveOut Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserveOut Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_84 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_152 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
Function name: calculateSwapReverse
Internal call...
root
TMP_152
Function: root
ic
Internal cal param_cache
Param: 0
    num: [2, 1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
added
xyz
Function name: root
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
Function name: root
Phi
[i]Type for a

Name: a Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_163(bool) = a_1 > 3
has variable
[i] TMP_163 cleared
clearing ir...?
CONDITION TMP_163
typecheckig node...
TMP_163(bool) = a_1 > 3
Function name: root
testing gt...
val: 3
val: 3
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 3 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_163

Name: TMP_163 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_163
Condition...
Conidtion: 
TMP_163
TMP_163
clearning node...
clearing ir...?
c_1(uint256) := a_1(uint256)
has variable
[i] c cleared
typecheckig node...
c_1(uint256) := a_1(uint256)
Function name: root
asgn

Name: a Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(uint256) = a_1 (c)/ 2
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(uint256) = TMP_164 (c)+ 1
has variable
[i] TMP_165 cleared
clearing ir...?
x_1(uint256) := TMP_165(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_164(uint256) = a_1 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_164

Name: TMP_164 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(uint256) = TMP_164 (c)+ 1
Function name: root
val: 1

Name: TMP_165 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_165 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_165

Name: TMP_165 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_1(uint256) := TMP_165(uint256)
Function name: root
asgn

Name: TMP_165 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_170(bool) = a_1 != 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = a_1 != 0
Function name: root
[i]Type for TMP_170

Name: TMP_170 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_2(uint256) := ϕ(['c_1', 'c_3'])
has variable
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
has variable
[i] x cleared
clearing ir...?
TMP_166(bool) = x_2 < c_2
has variable
[i] TMP_166 cleared
clearing ir...?
CONDITION TMP_166
typecheckig node...
c_2(uint256) := ϕ(['c_1', 'c_3'])
Function name: root
Phi
[i]Type for c

Name: c Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
x_2(uint256) := ϕ(['x_1', 'x_3'])
Function name: root
Phi
[i]Type for x

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = x_2 < c_2
Function name: root
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_166

Name: TMP_166 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_166
Condition...
Conidtion: 
TMP_166
TMP_166
clearning node...
clearing ir...?
c_4(uint256) := 1(uint256)
has variable
[i] c cleared
typecheckig node...
c_4(uint256) := 1(uint256)
Function name: root
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_3(uint256) := x_2(uint256)
has variable
[i] c cleared
typecheckig node...
c_3(uint256) := x_2(uint256)
Function name: root
asgn

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_167(uint256) = a_1 (c)/ x_2
has variable
[i] TMP_167 cleared
clearing ir...?
TMP_168(uint256) = TMP_167 (c)+ x_2
has variable
[i] TMP_168 cleared
clearing ir...?
TMP_169(uint256) = TMP_168 (c)/ 2
has variable
[i] TMP_169 cleared
clearing ir...?
x_3(uint256) := TMP_169(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_167(uint256) = a_1 (c)/ x_2
Function name: root
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_85 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: root
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_168(uint256) = TMP_167 (c)+ x_2
Function name: root

Name: TMP_168 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_168

Name: TMP_168 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_169(uint256) = TMP_168 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_169

Name: TMP_169 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_3(uint256) := TMP_169(uint256)
Function name: root
asgn

Name: TMP_169 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "root":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: root

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_153

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(uint256) = TMP_150 (c)* TMP_153
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_154

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_154(uint256) = TMP_150 (c)* TMP_153
XXXXX
numeratorA_1(uint256) := TMP_154(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numeratorA_1(uint256) := TMP_154(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_155(uint256) = y2_1 (c)* reserveIn_1
has variable
[i] TMP_155 cleared
clearing ir...?
numeratorB_1(uint256) := TMP_155(uint256)
has variable
[i] numeratorB cleared
typecheckig node...
TMP_155(uint256) = y2_1 (c)* reserveIn_1
Function name: calculateSwapReverse
testing mul...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_155 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_155

Name: TMP_155 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numeratorB_1(uint256) := TMP_155(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_155 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
numeratorC_1(uint256) := XY_1(uint256)
has variable
[i] numeratorC cleared
typecheckig node...
numeratorC_1(uint256) := XY_1(uint256)
Function name: calculateSwapReverse
asgn

Name: XY Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
has variable
[i] TMP_156 cleared
clearing ir...?
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
has variable
[i] TMP_157 cleared
clearing ir...?
numerator_1(uint256) := TMP_157(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
Function name: calculateSwapReverse
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: numeratorC Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_156 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_156

Name: TMP_156 Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
XXXXX
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_156 Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Error with TMP_157 in function calculateSwapReverse
Error with: TMP_157 in function calculateSwapReverse
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88d90>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb0946c0df0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f915b0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f9a730>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f91bb0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f91f10>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb0948292b0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb0946de8e0>]
[i]Type for TMP_157

Name: TMP_157 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_157(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_157 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
denominator_1(uint256) := y2_1(uint256)
has variable
[i] denominator cleared
typecheckig node...
denominator_1(uint256) := y2_1(uint256)
Function name: calculateSwapReverse
asgn

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_158(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_158 cleared
clearing ir...?
amountIn_1(uint256) := TMP_158(uint256)
has variable
[i] amountIn cleared
typecheckig node...
TMP_158(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_158 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amountIn_1(uint256) := TMP_158(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountIn Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calculateSwapReverse":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_87 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_145 Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_145

Name: TMP_145 Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
XY_1(uint256) := TMP_145(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_145 Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: XY Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_146(uint256) = amountOut_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y2_1(uint256) := TMP_146(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_147(uint256) = y2_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_147

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y4_1(uint256) := TMP_147(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_148(bool) = y4_1 < reserveOut_1
Function name: calculateSwapReverse
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_148

Name: TMP_148 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
Function name: calculateSwapReverse
Internal call...
root
XY
Function: root
ic
Internal cal param_cache
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
0

Name: PIC_83 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151(uint256) = reserveOut_1 (c)- y4_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveOut Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserveOut Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_88 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_152 Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
Function name: calculateSwapReverse
Internal call...
root
TMP_152
Function: root
ic
Internal cal param_cache
Param: 0
    num: [2, 1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
added
xyz
Function name: root
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
Function name: root
Phi
[i]Type for a

Name: a Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_163(bool) = a_1 > 3
has variable
[i] TMP_163 cleared
clearing ir...?
CONDITION TMP_163
typecheckig node...
TMP_163(bool) = a_1 > 3
Function name: root
testing gt...
val: 3
val: 3
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 3 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_163

Name: TMP_163 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_163
Condition...
Conidtion: 
TMP_163
TMP_163
clearning node...
clearing ir...?
c_1(uint256) := a_1(uint256)
has variable
[i] c cleared
typecheckig node...
c_1(uint256) := a_1(uint256)
Function name: root
asgn

Name: a Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(uint256) = a_1 (c)/ 2
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(uint256) = TMP_164 (c)+ 1
has variable
[i] TMP_165 cleared
clearing ir...?
x_1(uint256) := TMP_165(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_164(uint256) = a_1 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_164

Name: TMP_164 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(uint256) = TMP_164 (c)+ 1
Function name: root
val: 1

Name: TMP_165 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_165 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_165

Name: TMP_165 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_1(uint256) := TMP_165(uint256)
Function name: root
asgn

Name: TMP_165 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_170(bool) = a_1 != 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = a_1 != 0
Function name: root
[i]Type for TMP_170

Name: TMP_170 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_2(uint256) := ϕ(['c_1', 'c_3'])
has variable
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
has variable
[i] x cleared
clearing ir...?
TMP_166(bool) = x_2 < c_2
has variable
[i] TMP_166 cleared
clearing ir...?
CONDITION TMP_166
typecheckig node...
c_2(uint256) := ϕ(['c_1', 'c_3'])
Function name: root
Phi
[i]Type for c

Name: c Function: root
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
x_2(uint256) := ϕ(['x_1', 'x_3'])
Function name: root
Phi
[i]Type for x

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = x_2 < c_2
Function name: root
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_166

Name: TMP_166 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_166
Condition...
Conidtion: 
TMP_166
TMP_166
clearning node...
clearing ir...?
c_4(uint256) := 1(uint256)
has variable
[i] c cleared
typecheckig node...
c_4(uint256) := 1(uint256)
Function name: root
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_3(uint256) := x_2(uint256)
has variable
[i] c cleared
typecheckig node...
c_3(uint256) := x_2(uint256)
Function name: root
asgn

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_167(uint256) = a_1 (c)/ x_2
has variable
[i] TMP_167 cleared
clearing ir...?
TMP_168(uint256) = TMP_167 (c)+ x_2
has variable
[i] TMP_168 cleared
clearing ir...?
TMP_169(uint256) = TMP_168 (c)/ 2
has variable
[i] TMP_169 cleared
clearing ir...?
x_3(uint256) := TMP_169(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_167(uint256) = a_1 (c)/ x_2
Function name: root
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_89 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: root
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_168(uint256) = TMP_167 (c)+ x_2
Function name: root

Name: TMP_168 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_168

Name: TMP_168 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_169(uint256) = TMP_168 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_169

Name: TMP_169 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_3(uint256) := TMP_169(uint256)
Function name: root
asgn

Name: TMP_169 Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 2, 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "root":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: root

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_153

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(uint256) = TMP_150 (c)* TMP_153
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_154

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_154(uint256) = TMP_150 (c)* TMP_153
XXXXX
numeratorA_1(uint256) := TMP_154(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numeratorA_1(uint256) := TMP_154(uint256)
XXXXX
typecheckig node...
TMP_155(uint256) = y2_1 (c)* reserveIn_1
Function name: calculateSwapReverse
testing mul...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_155 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_155

Name: TMP_155 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numeratorB_1(uint256) := TMP_155(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_155 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
numeratorC_1(uint256) := XY_1(uint256)
Function name: calculateSwapReverse
asgn

Name: XY Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
Function name: calculateSwapReverse
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: numeratorC Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_156 Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_156

Name: TMP_156 Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
XXXXX
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_156 Function: calculateSwapReverse
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_157

Name: TMP_157 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_157(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_157 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
denominator_1(uint256) := y2_1(uint256)
Function name: calculateSwapReverse
asgn

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_158(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwapReverse
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amountIn_1(uint256) := TMP_158(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "calculateSwapReverse":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: calculateSwapReverse

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_90

Name: TMP_90 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_90
RETURN

Name: TMP_90 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TUPLE_5(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:getReserves, arguments:[]  
has variable
clearing ir...?
nativeReserve1_1(uint256)= UNPACK TUPLE_5 index: 0 
has variable
[i] nativeReserve1 cleared
clearing ir...?
foreignReserve1_1(uint256)= UNPACK TUPLE_5 index: 1 
has variable
[i] foreignReserve1 cleared
typecheckig node...
TUPLE_5(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateInGivenOut
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_5
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
Its the same:
0
0
[i]Type for TUPLE_5

Name: TUPLE_5 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve1_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: calculateInGivenOut
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for nativeReserve1

Name: nativeReserve1 Function: calculateInGivenOut
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve1_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: calculateInGivenOut
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for foreignReserve1

Name: foreignReserve1 Function: calculateInGivenOut
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_93(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['amountOut_1', 'nativeReserve1_1', 'foreignReserve1_1'] 
has variable
[i] TMP_93 cleared
clearing ir...?
TMP_94(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['TMP_93', 'foreignReserve0_1', 'nativeReserve0_1'] 
has variable
[i] TMP_94 cleared
clearing ir...?
RETURN TMP_94
typecheckig node...
TMP_93(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['amountOut_1', 'nativeReserve1_1', 'foreignReserve1_1'] 
Function name: calculateInGivenOut
Library Call: calculateSwapReverse
hlc contract name: VaderMath func_name: calculateSwapReverse
amountOut_1
nativeReserve1_1
foreignReserve1_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwapReverse
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
has variable
[i] TMP_145 cleared
clearing ir...?
XY_1(uint256) := TMP_145(uint256)
has variable
[i] XY cleared
typecheckig node...
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_92 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_145 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_145

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
XY_1(uint256) := TMP_145(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: XY Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_146(uint256) = amountOut_1 (c)* 2
has variable
[i] TMP_146 cleared
clearing ir...?
y2_1(uint256) := TMP_146(uint256)
has variable
[i] y2 cleared
typecheckig node...
TMP_146(uint256) = amountOut_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_146 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y2_1(uint256) := TMP_146(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y2 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_147(uint256) = y2_1 (c)* 2
has variable
[i] TMP_147 cleared
clearing ir...?
y4_1(uint256) := TMP_147(uint256)
has variable
[i] y4 cleared
typecheckig node...
TMP_147(uint256) = y2_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_147 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_147

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y4_1(uint256) := TMP_147(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_148(bool) = y4_1 < reserveOut_1
has variable
[i] TMP_148 cleared
clearing ir...?
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
typecheckig node...
TMP_148(bool) = y4_1 < reserveOut_1
Function name: calculateSwapReverse
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_148

Name: TMP_148 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
has variable
[i] TMP_150 cleared
clearing ir...?
TMP_151(uint256) = reserveOut_1 (c)- y4_1
has variable
[i] TMP_151 cleared
clearing ir...?
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
has variable
[i] TMP_152 cleared
clearing ir...?
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
has variable
[i] TMP_153 cleared
clearing ir...?
TMP_154(uint256) = TMP_150 (c)* TMP_153
has variable
[i] TMP_154 cleared
clearing ir...?
numeratorA_1(uint256) := TMP_154(uint256)
has variable
[i] numeratorA cleared
typecheckig node...
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
Function name: calculateSwapReverse
Internal call...
root
XY
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
0

Name: PIC_83 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151(uint256) = reserveOut_1 (c)- y4_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_93 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_152 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
Function name: calculateSwapReverse
Internal call...
root
TMP_152
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
added
xyz
Function name: root
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
Function name: root
Phi
[i]Type for a

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_163(bool) = a_1 > 3
has variable
[i] TMP_163 cleared
clearing ir...?
CONDITION TMP_163
typecheckig node...
TMP_163(bool) = a_1 > 3
Function name: root
testing gt...
val: 3
val: 3
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 3 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_163

Name: TMP_163 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_163
Condition...
Conidtion: 
TMP_163
TMP_163
clearning node...
clearing ir...?
c_1(uint256) := a_1(uint256)
has variable
[i] c cleared
typecheckig node...
c_1(uint256) := a_1(uint256)
Function name: root
asgn

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(uint256) = a_1 (c)/ 2
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(uint256) = TMP_164 (c)+ 1
has variable
[i] TMP_165 cleared
clearing ir...?
x_1(uint256) := TMP_165(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_164(uint256) = a_1 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_164

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(uint256) = TMP_164 (c)+ 1
Function name: root
val: 1

Name: TMP_165 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_165 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_165

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_1(uint256) := TMP_165(uint256)
Function name: root
asgn

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_170(bool) = a_1 != 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = a_1 != 0
Function name: root
[i]Type for TMP_170

Name: TMP_170 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_2(uint256) := ϕ(['c_1', 'c_3'])
has variable
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
has variable
[i] x cleared
clearing ir...?
TMP_166(bool) = x_2 < c_2
has variable
[i] TMP_166 cleared
clearing ir...?
CONDITION TMP_166
typecheckig node...
c_2(uint256) := ϕ(['c_1', 'c_3'])
Function name: root
Phi
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
x_2(uint256) := ϕ(['x_1', 'x_3'])
Function name: root
Phi
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = x_2 < c_2
Function name: root
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_166

Name: TMP_166 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_166
Condition...
Conidtion: 
TMP_166
TMP_166
clearning node...
clearing ir...?
c_4(uint256) := 1(uint256)
has variable
[i] c cleared
typecheckig node...
c_4(uint256) := 1(uint256)
Function name: root
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_3(uint256) := x_2(uint256)
has variable
[i] c cleared
typecheckig node...
c_3(uint256) := x_2(uint256)
Function name: root
asgn

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_167(uint256) = a_1 (c)/ x_2
has variable
[i] TMP_167 cleared
clearing ir...?
TMP_168(uint256) = TMP_167 (c)+ x_2
has variable
[i] TMP_168 cleared
clearing ir...?
TMP_169(uint256) = TMP_168 (c)/ 2
has variable
[i] TMP_169 cleared
clearing ir...?
x_3(uint256) := TMP_169(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_167(uint256) = a_1 (c)/ x_2
Function name: root
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_94 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: root
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_168(uint256) = TMP_167 (c)+ x_2
Function name: root

Name: TMP_168 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_168

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_169(uint256) = TMP_168 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_169

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_3(uint256) := TMP_169(uint256)
Function name: root
asgn

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "root":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: root

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_153

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(uint256) = TMP_150 (c)* TMP_153
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_154

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_154(uint256) = TMP_150 (c)* TMP_153
XXXXX
numeratorA_1(uint256) := TMP_154(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numeratorA_1(uint256) := TMP_154(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_155(uint256) = y2_1 (c)* reserveIn_1
has variable
[i] TMP_155 cleared
clearing ir...?
numeratorB_1(uint256) := TMP_155(uint256)
has variable
[i] numeratorB cleared
typecheckig node...
TMP_155(uint256) = y2_1 (c)* reserveIn_1
Function name: calculateSwapReverse
testing mul...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_155 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_155

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numeratorB_1(uint256) := TMP_155(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
numeratorC_1(uint256) := XY_1(uint256)
has variable
[i] numeratorC cleared
typecheckig node...
numeratorC_1(uint256) := XY_1(uint256)
Function name: calculateSwapReverse
asgn

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
has variable
[i] TMP_156 cleared
clearing ir...?
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
has variable
[i] TMP_157 cleared
clearing ir...?
numerator_1(uint256) := TMP_157(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
Function name: calculateSwapReverse
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_156 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_156

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
XXXXX
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_157

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_157(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numerator_1(uint256) := TMP_157(uint256)
XXXXX
clearning node...
clearing ir...?
denominator_1(uint256) := y2_1(uint256)
has variable
[i] denominator cleared
typecheckig node...
denominator_1(uint256) := y2_1(uint256)
Function name: calculateSwapReverse
asgn

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_158(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_158 cleared
clearing ir...?
amountIn_1(uint256) := TMP_158(uint256)
has variable
[i] amountIn cleared
typecheckig node...
TMP_158(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_158 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_158(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountIn_1(uint256) := TMP_158(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountIn Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calculateSwapReverse":
 New undefined nodes- 3
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_96 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_145

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
XY_1(uint256) := TMP_145(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_146(uint256) = amountOut_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y2_1(uint256) := TMP_146(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_147(uint256) = y2_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_147

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y4_1(uint256) := TMP_147(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_148(bool) = y4_1 < reserveOut_1
Function name: calculateSwapReverse
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_148

Name: TMP_148 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
Function name: calculateSwapReverse
Internal call...
root
XY
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
0

Name: PIC_83 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151(uint256) = reserveOut_1 (c)- y4_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_97 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_152 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
Function name: calculateSwapReverse
Internal call...
root
TMP_152
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
added
xyz
Function name: root
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
Function name: root
Phi
[i]Type for a

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_163(bool) = a_1 > 3
has variable
[i] TMP_163 cleared
clearing ir...?
CONDITION TMP_163
typecheckig node...
TMP_163(bool) = a_1 > 3
Function name: root
testing gt...
val: 3
val: 3
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 3 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_163

Name: TMP_163 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_163
Condition...
Conidtion: 
TMP_163
TMP_163
clearning node...
clearing ir...?
c_1(uint256) := a_1(uint256)
has variable
[i] c cleared
typecheckig node...
c_1(uint256) := a_1(uint256)
Function name: root
asgn

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(uint256) = a_1 (c)/ 2
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(uint256) = TMP_164 (c)+ 1
has variable
[i] TMP_165 cleared
clearing ir...?
x_1(uint256) := TMP_165(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_164(uint256) = a_1 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_164

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(uint256) = TMP_164 (c)+ 1
Function name: root
val: 1

Name: TMP_165 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_165 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_165

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_1(uint256) := TMP_165(uint256)
Function name: root
asgn

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_170(bool) = a_1 != 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = a_1 != 0
Function name: root
[i]Type for TMP_170

Name: TMP_170 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_2(uint256) := ϕ(['c_1', 'c_3'])
has variable
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
has variable
[i] x cleared
clearing ir...?
TMP_166(bool) = x_2 < c_2
has variable
[i] TMP_166 cleared
clearing ir...?
CONDITION TMP_166
typecheckig node...
c_2(uint256) := ϕ(['c_1', 'c_3'])
Function name: root
Phi
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
x_2(uint256) := ϕ(['x_1', 'x_3'])
Function name: root
Phi
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = x_2 < c_2
Function name: root
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_166

Name: TMP_166 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_166
Condition...
Conidtion: 
TMP_166
TMP_166
clearning node...
clearing ir...?
c_4(uint256) := 1(uint256)
has variable
[i] c cleared
typecheckig node...
c_4(uint256) := 1(uint256)
Function name: root
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_3(uint256) := x_2(uint256)
has variable
[i] c cleared
typecheckig node...
c_3(uint256) := x_2(uint256)
Function name: root
asgn

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_167(uint256) = a_1 (c)/ x_2
has variable
[i] TMP_167 cleared
clearing ir...?
TMP_168(uint256) = TMP_167 (c)+ x_2
has variable
[i] TMP_168 cleared
clearing ir...?
TMP_169(uint256) = TMP_168 (c)/ 2
has variable
[i] TMP_169 cleared
clearing ir...?
x_3(uint256) := TMP_169(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_167(uint256) = a_1 (c)/ x_2
Function name: root
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_98 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: root
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_168(uint256) = TMP_167 (c)+ x_2
Function name: root

Name: TMP_168 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_168

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_169(uint256) = TMP_168 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_169

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_3(uint256) := TMP_169(uint256)
Function name: root
asgn

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "root":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: root

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_153

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(uint256) = TMP_150 (c)* TMP_153
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_154

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_154(uint256) = TMP_150 (c)* TMP_153
XXXXX
numeratorA_1(uint256) := TMP_154(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numeratorA_1(uint256) := TMP_154(uint256)
XXXXX
typecheckig node...
TMP_155(uint256) = y2_1 (c)* reserveIn_1
Function name: calculateSwapReverse
testing mul...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_155

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numeratorB_1(uint256) := TMP_155(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
numeratorC_1(uint256) := XY_1(uint256)
Function name: calculateSwapReverse
asgn

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
Function name: calculateSwapReverse
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_156

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
XXXXX
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_157

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_157(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numerator_1(uint256) := TMP_157(uint256)
XXXXX
typecheckig node...
denominator_1(uint256) := y2_1(uint256)
Function name: calculateSwapReverse
asgn

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_158(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_158(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountIn_1(uint256) := TMP_158(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "calculateSwapReverse":
 New undefined nodes- 3
 Old undefined nodes- 3
Saving return values for: calculateSwapReverse

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_93

Name: TMP_93 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_94(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['TMP_93', 'foreignReserve0_1', 'nativeReserve0_1'] 
Function name: calculateInGivenOut
Library Call: calculateSwapReverse
hlc contract name: VaderMath func_name: calculateSwapReverse
TMP_93
INCLUDED HIGH LEVEL CALL HAS SOME UNDEFINED TYPE
[i]Type for TMP_94

Name: TMP_94 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_94
RETURN

Name: TMP_94 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TMP_89(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['amountOut_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_89 cleared
clearing ir...?
RETURN TMP_89
typecheckig node...
TMP_89(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['amountOut_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: calculateInGivenOut
Library Call: calculateSwapReverse
hlc contract name: VaderMath func_name: calculateSwapReverse
amountOut_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwapReverse
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
has variable
[i] TMP_145 cleared
clearing ir...?
XY_1(uint256) := TMP_145(uint256)
has variable
[i] XY cleared
typecheckig node...
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_101 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_145 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_145

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
XY_1(uint256) := TMP_145(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: XY Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_146(uint256) = amountOut_1 (c)* 2
has variable
[i] TMP_146 cleared
clearing ir...?
y2_1(uint256) := TMP_146(uint256)
has variable
[i] y2 cleared
typecheckig node...
TMP_146(uint256) = amountOut_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_146 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y2_1(uint256) := TMP_146(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y2 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_147(uint256) = y2_1 (c)* 2
has variable
[i] TMP_147 cleared
clearing ir...?
y4_1(uint256) := TMP_147(uint256)
has variable
[i] y4 cleared
typecheckig node...
TMP_147(uint256) = y2_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_147 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_147

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y4_1(uint256) := TMP_147(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_148(bool) = y4_1 < reserveOut_1
has variable
[i] TMP_148 cleared
clearing ir...?
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
typecheckig node...
TMP_148(bool) = y4_1 < reserveOut_1
Function name: calculateSwapReverse
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_148

Name: TMP_148 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
has variable
[i] TMP_150 cleared
clearing ir...?
TMP_151(uint256) = reserveOut_1 (c)- y4_1
has variable
[i] TMP_151 cleared
clearing ir...?
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
has variable
[i] TMP_152 cleared
clearing ir...?
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
has variable
[i] TMP_153 cleared
clearing ir...?
TMP_154(uint256) = TMP_150 (c)* TMP_153
has variable
[i] TMP_154 cleared
clearing ir...?
numeratorA_1(uint256) := TMP_154(uint256)
has variable
[i] numeratorA cleared
typecheckig node...
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
Function name: calculateSwapReverse
Internal call...
root
XY
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
0

Name: PIC_83 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151(uint256) = reserveOut_1 (c)- y4_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_102 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_152 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
Function name: calculateSwapReverse
Internal call...
root
TMP_152
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
added
xyz
Function name: root
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
Function name: root
Phi
[i]Type for a

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_163(bool) = a_1 > 3
has variable
[i] TMP_163 cleared
clearing ir...?
CONDITION TMP_163
typecheckig node...
TMP_163(bool) = a_1 > 3
Function name: root
testing gt...
val: 3
val: 3
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 3 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_163

Name: TMP_163 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_163
Condition...
Conidtion: 
TMP_163
TMP_163
clearning node...
clearing ir...?
c_1(uint256) := a_1(uint256)
has variable
[i] c cleared
typecheckig node...
c_1(uint256) := a_1(uint256)
Function name: root
asgn

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(uint256) = a_1 (c)/ 2
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(uint256) = TMP_164 (c)+ 1
has variable
[i] TMP_165 cleared
clearing ir...?
x_1(uint256) := TMP_165(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_164(uint256) = a_1 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_164

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(uint256) = TMP_164 (c)+ 1
Function name: root
val: 1

Name: TMP_165 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_165 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_165

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_1(uint256) := TMP_165(uint256)
Function name: root
asgn

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_170(bool) = a_1 != 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = a_1 != 0
Function name: root
[i]Type for TMP_170

Name: TMP_170 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_2(uint256) := ϕ(['c_1', 'c_3'])
has variable
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
has variable
[i] x cleared
clearing ir...?
TMP_166(bool) = x_2 < c_2
has variable
[i] TMP_166 cleared
clearing ir...?
CONDITION TMP_166
typecheckig node...
c_2(uint256) := ϕ(['c_1', 'c_3'])
Function name: root
Phi
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
x_2(uint256) := ϕ(['x_1', 'x_3'])
Function name: root
Phi
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = x_2 < c_2
Function name: root
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_166

Name: TMP_166 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_166
Condition...
Conidtion: 
TMP_166
TMP_166
clearning node...
clearing ir...?
c_4(uint256) := 1(uint256)
has variable
[i] c cleared
typecheckig node...
c_4(uint256) := 1(uint256)
Function name: root
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_3(uint256) := x_2(uint256)
has variable
[i] c cleared
typecheckig node...
c_3(uint256) := x_2(uint256)
Function name: root
asgn

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_167(uint256) = a_1 (c)/ x_2
has variable
[i] TMP_167 cleared
clearing ir...?
TMP_168(uint256) = TMP_167 (c)+ x_2
has variable
[i] TMP_168 cleared
clearing ir...?
TMP_169(uint256) = TMP_168 (c)/ 2
has variable
[i] TMP_169 cleared
clearing ir...?
x_3(uint256) := TMP_169(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_167(uint256) = a_1 (c)/ x_2
Function name: root
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_103 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: root
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_168(uint256) = TMP_167 (c)+ x_2
Function name: root

Name: TMP_168 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_168

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_169(uint256) = TMP_168 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_169

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_3(uint256) := TMP_169(uint256)
Function name: root
asgn

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "root":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: root

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_153

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(uint256) = TMP_150 (c)* TMP_153
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_154

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_154(uint256) = TMP_150 (c)* TMP_153
XXXXX
numeratorA_1(uint256) := TMP_154(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numeratorA_1(uint256) := TMP_154(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_155(uint256) = y2_1 (c)* reserveIn_1
has variable
[i] TMP_155 cleared
clearing ir...?
numeratorB_1(uint256) := TMP_155(uint256)
has variable
[i] numeratorB cleared
typecheckig node...
TMP_155(uint256) = y2_1 (c)* reserveIn_1
Function name: calculateSwapReverse
testing mul...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_155 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_155

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numeratorB_1(uint256) := TMP_155(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
numeratorC_1(uint256) := XY_1(uint256)
has variable
[i] numeratorC cleared
typecheckig node...
numeratorC_1(uint256) := XY_1(uint256)
Function name: calculateSwapReverse
asgn

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
has variable
[i] TMP_156 cleared
clearing ir...?
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
has variable
[i] TMP_157 cleared
clearing ir...?
numerator_1(uint256) := TMP_157(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
Function name: calculateSwapReverse
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_156 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_156

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
XXXXX
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_157

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_157(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numerator_1(uint256) := TMP_157(uint256)
XXXXX
clearning node...
clearing ir...?
denominator_1(uint256) := y2_1(uint256)
has variable
[i] denominator cleared
typecheckig node...
denominator_1(uint256) := y2_1(uint256)
Function name: calculateSwapReverse
asgn

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_158(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_158 cleared
clearing ir...?
amountIn_1(uint256) := TMP_158(uint256)
has variable
[i] amountIn cleared
typecheckig node...
TMP_158(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_158 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_158(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountIn_1(uint256) := TMP_158(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountIn Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calculateSwapReverse":
 New undefined nodes- 3
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_105 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_145

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
XY_1(uint256) := TMP_145(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_146(uint256) = amountOut_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y2_1(uint256) := TMP_146(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_147(uint256) = y2_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_147

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y4_1(uint256) := TMP_147(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_148(bool) = y4_1 < reserveOut_1
Function name: calculateSwapReverse
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_148

Name: TMP_148 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
Function name: calculateSwapReverse
Internal call...
root
XY
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
0

Name: PIC_83 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151(uint256) = reserveOut_1 (c)- y4_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_106 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_152 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
Function name: calculateSwapReverse
Internal call...
root
TMP_152
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
added
xyz
Function name: root
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
Function name: root
Phi
[i]Type for a

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_163(bool) = a_1 > 3
has variable
[i] TMP_163 cleared
clearing ir...?
CONDITION TMP_163
typecheckig node...
TMP_163(bool) = a_1 > 3
Function name: root
testing gt...
val: 3
val: 3
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 3 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_163

Name: TMP_163 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_163
Condition...
Conidtion: 
TMP_163
TMP_163
clearning node...
clearing ir...?
c_1(uint256) := a_1(uint256)
has variable
[i] c cleared
typecheckig node...
c_1(uint256) := a_1(uint256)
Function name: root
asgn

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(uint256) = a_1 (c)/ 2
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(uint256) = TMP_164 (c)+ 1
has variable
[i] TMP_165 cleared
clearing ir...?
x_1(uint256) := TMP_165(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_164(uint256) = a_1 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_164

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(uint256) = TMP_164 (c)+ 1
Function name: root
val: 1

Name: TMP_165 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_165 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_165

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_1(uint256) := TMP_165(uint256)
Function name: root
asgn

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_170(bool) = a_1 != 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = a_1 != 0
Function name: root
[i]Type for TMP_170

Name: TMP_170 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_2(uint256) := ϕ(['c_1', 'c_3'])
has variable
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
has variable
[i] x cleared
clearing ir...?
TMP_166(bool) = x_2 < c_2
has variable
[i] TMP_166 cleared
clearing ir...?
CONDITION TMP_166
typecheckig node...
c_2(uint256) := ϕ(['c_1', 'c_3'])
Function name: root
Phi
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
x_2(uint256) := ϕ(['x_1', 'x_3'])
Function name: root
Phi
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = x_2 < c_2
Function name: root
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_166

Name: TMP_166 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_166
Condition...
Conidtion: 
TMP_166
TMP_166
clearning node...
clearing ir...?
c_4(uint256) := 1(uint256)
has variable
[i] c cleared
typecheckig node...
c_4(uint256) := 1(uint256)
Function name: root
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_3(uint256) := x_2(uint256)
has variable
[i] c cleared
typecheckig node...
c_3(uint256) := x_2(uint256)
Function name: root
asgn

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_167(uint256) = a_1 (c)/ x_2
has variable
[i] TMP_167 cleared
clearing ir...?
TMP_168(uint256) = TMP_167 (c)+ x_2
has variable
[i] TMP_168 cleared
clearing ir...?
TMP_169(uint256) = TMP_168 (c)/ 2
has variable
[i] TMP_169 cleared
clearing ir...?
x_3(uint256) := TMP_169(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_167(uint256) = a_1 (c)/ x_2
Function name: root
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_107 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: root
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_168(uint256) = TMP_167 (c)+ x_2
Function name: root

Name: TMP_168 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_168

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_169(uint256) = TMP_168 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_169

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_3(uint256) := TMP_169(uint256)
Function name: root
asgn

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "root":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: root

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_153

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(uint256) = TMP_150 (c)* TMP_153
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_154

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_154(uint256) = TMP_150 (c)* TMP_153
XXXXX
numeratorA_1(uint256) := TMP_154(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numeratorA_1(uint256) := TMP_154(uint256)
XXXXX
typecheckig node...
TMP_155(uint256) = y2_1 (c)* reserveIn_1
Function name: calculateSwapReverse
testing mul...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_155

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numeratorB_1(uint256) := TMP_155(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
numeratorC_1(uint256) := XY_1(uint256)
Function name: calculateSwapReverse
asgn

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
Function name: calculateSwapReverse
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_156

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
XXXXX
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_157

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_157(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numerator_1(uint256) := TMP_157(uint256)
XXXXX
typecheckig node...
denominator_1(uint256) := y2_1(uint256)
Function name: calculateSwapReverse
asgn

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_158(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_158(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountIn_1(uint256) := TMP_158(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "calculateSwapReverse":
 New undefined nodes- 3
 Old undefined nodes- 3
Saving return values for: calculateSwapReverse

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_89

Name: TMP_89 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_89
RETURN

Name: TMP_89 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateInGivenOut":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateInGivenOut

Name: TMP_89 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
Check copy_toekn_tuple
([], [], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for TMP_41

Name: TMP_41 Function: swapTokensForExactTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountIn_1(uint256) := TMP_41(uint256)
Function name: swapTokensForExactTokens
asgn

Name: TMP_41 Function: swapTokensForExactTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountIn Function: swapTokensForExactTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountIn

Name: amountIn Function: swapTokensForExactTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
amountIn_1(uint256) := TMP_41(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_42(bool) = amountInMax_1 >= amountIn_1
has variable
[i] TMP_42 cleared
clearing ir...?
TMP_43(None) = SOLIDITY_CALL require(bool,string)(TMP_42,VaderRouter::swapTokensForExactTokens: Large Trade Input)
typecheckig node...
TMP_42(bool) = amountInMax_1 >= amountIn_1
Function name: swapTokensForExactTokens
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amountInMax Function: swapTokensForExactTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_42 Function: swapTokensForExactTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_42

Name: TMP_42 Function: swapTokensForExactTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_42(bool) = amountInMax_1 >= amountIn_1
XXXXX
TMP_43(None) = SOLIDITY_CALL require(bool,string)(TMP_42,VaderRouter::swapTokensForExactTokens: Large Trade Input)
[i]Type for TMP_43

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_44(uint256) = INTERNAL_CALL, VaderRouter._swap(uint256,address[],address)(amountIn_1,path_1 (-> []),to_1)
has variable
[i] TMP_44 cleared
typecheckig node...
TMP_44(uint256) = INTERNAL_CALL, VaderRouter._swap(uint256,address[],address)(amountIn_1,path_1 (-> []),to_1)
Function name: swapTokensForExactTokens
Internal call...
_swap
amountIn
path
to
Function: _swap
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: NATIVETOKEN
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
-100
Parameter length: 1
[[2], [-1], 0, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, 'NATIVETOKEN', [], -1]
added
xyz
Function name: _swap
Function Visibility: private
clearning node...
clearing ir...?
amountIn_1(uint256) := ϕ(['amountIn_1', 'amountIn_1'])
has variable
[i] amountIn cleared
clearing ir...?
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])', 'path_1 (-> [])'])
has variable
[i] path cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1'])
has variable
[i] to cleared
clearing ir...?
factory_8(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
typecheckig node...
amountIn_1(uint256) := ϕ(['amountIn_1', 'amountIn_1'])
Function name: _swap
Phi
[i]Type for amountIn

Name: amountIn Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])', 'path_1 (-> [])'])
Function name: _swap
Phi
[i]Type for path

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['to_1', 'to_1'])
Function name: _swap
Phi
[i]Type for to

Name: to Function: _swap
Num: -1
Den: -1
Norm: u
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
factory_8(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_8 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_51(bool) = REF_8 == 3
has variable
[i] TMP_51 cleared
clearing ir...?
CONDITION TMP_51
typecheckig node...
REF_8 -> LENGTH path_1 (-> [])
[i]Type for REF_8

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_51(bool) = REF_8 == 3
Function name: _swap
[i]Type for TMP_51

Name: TMP_51 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_51
Condition...
Conidtion: 
TMP_51
TMP_51
clearning node...
clearing ir...?
REF_9(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_10(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_52(bool) = REF_9 != REF_10
has variable
[i] TMP_52 cleared
clearing ir...?
REF_11(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_53(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
has variable
[i] TMP_53 cleared
clearing ir...?
factory_11(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
TMP_54(bool) = REF_11 == TMP_53
has variable
[i] TMP_54 cleared
clearing ir...?
TMP_55(bool) = TMP_52 && TMP_54
has variable
[i] TMP_55 cleared
clearing ir...?
REF_13(address) -> path_1 (-> [])[2]
has variable
clearing ir...?
REF_14(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_56(bool) = REF_13 != REF_14
has variable
[i] TMP_56 cleared
clearing ir...?
TMP_57(bool) = TMP_55 && TMP_56
has variable
[i] TMP_57 cleared
clearing ir...?
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,VaderRouter::_swap: Incorrect Path)
typecheckig node...
REF_9(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_9

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_10(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_10

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_52(bool) = REF_9 != REF_10
Function name: _swap
[i]Type for TMP_52

Name: TMP_52 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_11(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_11

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_53(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: _swap
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_53
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_53

Name: TMP_53 Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
factory_11(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
TMP_54(bool) = REF_11 == TMP_53
Function name: _swap
[i]Type for TMP_54

Name: TMP_54 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_55(bool) = TMP_52 && TMP_54
Function name: _swap
[i]Type for TMP_55

Name: TMP_55 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_13(address) -> path_1 (-> [])[2]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_13

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_14(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_14

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_56(bool) = REF_13 != REF_14
Function name: _swap
[i]Type for TMP_56

Name: TMP_56 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_57(bool) = TMP_55 && TMP_56
Function name: _swap
[i]Type for TMP_57

Name: TMP_57 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_16(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_17(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_59(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_11(IVaderPoolFactory), function:getPool, arguments:['REF_16', 'REF_17']  
has variable
[i] TMP_59 cleared
clearing ir...?
factory_12(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_11', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool0_1(IVaderPool) := TMP_59(IVaderPool)
has variable
[i] pool0 cleared
typecheckig node...
REF_16(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_16

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_17(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_17

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_59(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_11(IVaderPoolFactory), function:getPool, arguments:['REF_16', 'REF_17']  
Function name: _swap
High Call: getPool
func name:getPool
other func name:getPool
TMP_59
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_16
REF_17
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_59

Name: TMP_59 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_12(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_11', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool0_1(IVaderPool) := TMP_59(IVaderPool)
Function name: _swap
asgn

Name: TMP_59 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool0 Function: _swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool0

Name: pool0 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_19(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
REF_20(address) -> path_1 (-> [])[2]
has variable
clearing ir...?
TMP_60(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_12(IVaderPoolFactory), function:getPool, arguments:['REF_19', 'REF_20']  
has variable
[i] TMP_60 cleared
clearing ir...?
factory_13(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_12', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool1_1(IVaderPool) := TMP_60(IVaderPool)
has variable
[i] pool1 cleared
typecheckig node...
REF_19(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_19

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_20(address) -> path_1 (-> [])[2]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_20

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_60(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_12(IVaderPoolFactory), function:getPool, arguments:['REF_19', 'REF_20']  
Function name: _swap
High Call: getPool
func name:getPool
other func name:getPool
TMP_60
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_19
REF_20
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_60

Name: TMP_60 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_13(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_12', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool1_1(IVaderPool) := TMP_60(IVaderPool)
Function name: _swap
asgn

Name: TMP_60 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool1 Function: _swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool1

Name: pool1 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_21(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_61 = CONVERT REF_21 to IERC20
has variable
[i] TMP_61 cleared
clearing ir...?
TMP_62 = CONVERT pool0_1 to address
has variable
[i] TMP_62 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_61', 'msg.sender', 'TMP_62', 'amountIn_1'] 
typecheckig node...
REF_21(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_21

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_61 = CONVERT REF_21 to IERC20
Function name: _swap

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_61 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_61

Name: TMP_61 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_62 = CONVERT pool0_1 to address
Function name: _swap

Name: pool0 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: TMP_62 Function: _swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
[i]Type for TMP_62

Name: TMP_62 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_61', 'msg.sender', 'TMP_62', 'amountIn_1'] 
Library Call: safeTransferFrom
done.
clearning node...
clearing ir...?
REF_25 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_67(bool) = REF_25 == 2
has variable
[i] TMP_67 cleared
clearing ir...?
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,VaderRouter::_swap: Incorrect Path Length)
typecheckig node...
REF_25 -> LENGTH path_1 (-> [])
[i]Type for REF_25

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_67(bool) = REF_25 == 2
Function name: _swap
[i]Type for TMP_67

Name: TMP_67 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,VaderRouter::_swap: Incorrect Path Length)
[i]Type for TMP_68

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_69(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
has variable
[i] TMP_69 cleared
clearing ir...?
factory_9(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_8', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
nativeAsset_1(address) := TMP_69(address)
has variable
[i] nativeAsset cleared
typecheckig node...
TMP_69(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: _swap
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_69
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_69

Name: TMP_69 Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
factory_9(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_8', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
nativeAsset_1(address) := TMP_69(address)
Function name: _swap
asgn

Name: TMP_69 Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeAsset Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAsset

Name: nativeAsset Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_27(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_28(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_70(bool) = REF_27 != REF_28
has variable
[i] TMP_70 cleared
clearing ir...?
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,VaderRouter::_swap: Incorrect Path)
typecheckig node...
REF_27(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_27

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_28(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_28

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_70(bool) = REF_27 != REF_28
Function name: _swap
[i]Type for TMP_70

Name: TMP_70 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_71

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_30(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_31(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_72(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_9(IVaderPoolFactory), function:getPool, arguments:['REF_30', 'REF_31']  
has variable
[i] TMP_72 cleared
clearing ir...?
factory_10(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_9', 'factory_15'])
has variable
clearing ir...?
pool_1(IVaderPool) := TMP_72(IVaderPool)
has variable
[i] pool cleared
typecheckig node...
REF_30(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_30

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_31(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_31

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_72(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_9(IVaderPoolFactory), function:getPool, arguments:['REF_30', 'REF_31']  
Function name: _swap
High Call: getPool
func name:getPool
other func name:getPool
TMP_72
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_30
REF_31
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_72

Name: TMP_72 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_10(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_9', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool_1(IVaderPool) := TMP_72(IVaderPool)
Function name: _swap
asgn

Name: TMP_72 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool Function: _swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool

Name: pool Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_32(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_73 = CONVERT REF_32 to IERC20
has variable
[i] TMP_73 cleared
clearing ir...?
TMP_74 = CONVERT pool_1 to address
has variable
[i] TMP_74 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_73', 'msg.sender', 'TMP_74', 'amountIn_1'] 
typecheckig node...
REF_32(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_32

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73 = CONVERT REF_32 to IERC20
Function name: _swap

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_73 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_73

Name: TMP_73 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_74 = CONVERT pool_1 to address
Function name: _swap

Name: pool Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: TMP_74 Function: _swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_73', 'msg.sender', 'TMP_74', 'amountIn_1'] 
Library Call: safeTransferFrom
done.
clearning node...
clearing ir...?
REF_34(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_76(bool) = REF_34 == nativeAsset_1
has variable
[i] TMP_76 cleared
clearing ir...?
CONDITION TMP_76
typecheckig node...
REF_34(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_34

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_76(bool) = REF_34 == nativeAsset_1
Function name: _swap
[i]Type for TMP_76

Name: TMP_76 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_76
Condition...
Conidtion: 
TMP_76
TMP_76
clearning node...
clearing ir...?
REF_36(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_78(bool) = REF_36 == nativeAsset_1
has variable
[i] TMP_78 cleared
clearing ir...?
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,VaderRouter::_swap: Incorrect Path)
typecheckig node...
REF_36(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_36

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(bool) = REF_36 == nativeAsset_1
Function name: _swap
[i]Type for TMP_78

Name: TMP_78 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'to_1']  
has variable
[i] TMP_77 cleared
clearing ir...?
RETURN TMP_77
typecheckig node...
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_77
hlc contract name: BasePool func_name: swap
amountIn_1
INCLUDED HIGH LEVEL CALL HAS SOME UNDEFINED TYPE
[i]Type for TMP_77

Name: TMP_77 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_77
RETURN

Name: TMP_77 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TMP_80(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['0', 'amountIn_1', 'to_1']  
has variable
[i] TMP_80 cleared
clearing ir...?
RETURN TMP_80
typecheckig node...
TMP_80(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['0', 'amountIn_1', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_80
hlc contract name: BasePool func_name: swap
0
val: 0
amountIn_1
INCLUDED HIGH LEVEL CALL HAS SOME UNDEFINED TYPE
[i]Type for TMP_80

Name: TMP_80 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_80
RETURN

Name: TMP_80 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TMP_64 = CONVERT pool1_1 to address
has variable
[i] TMP_64 cleared
clearing ir...?
TMP_65(uint256) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'TMP_64']  
has variable
[i] TMP_65 cleared
clearing ir...?
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:swap, arguments:['0', 'TMP_65', 'to_1']  
has variable
[i] TMP_66 cleared
clearing ir...?
RETURN TMP_66
typecheckig node...
TMP_64 = CONVERT pool1_1 to address
Function name: _swap

Name: pool1 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: TMP_64 Function: _swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
[i]Type for TMP_64

Name: TMP_64 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
TMP_65(uint256) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'TMP_64']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_65
hlc contract name: BasePool func_name: swap
amountIn_1
INCLUDED HIGH LEVEL CALL HAS SOME UNDEFINED TYPE
[i]Type for TMP_65

Name: TMP_65 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:swap, arguments:['0', 'TMP_65', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_66
hlc contract name: BasePool func_name: swap
0
val: 0
TMP_65
INCLUDED HIGH LEVEL CALL HAS SOME UNDEFINED TYPE
[i]Type for TMP_66

Name: TMP_66 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_66
RETURN

Name: TMP_66 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_swap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _swap

Name: TMP_66 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
Check copy_toekn_tuple
([], [], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for TMP_44

Name: TMP_44 Function: swapTokensForExactTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "swapTokensForExactTokens":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
Internal call...
ensure
deadline
Function: ensure
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0
done.
typecheckig node...
TMP_41(uint256) = INTERNAL_CALL, VaderRouter.calculateInGivenOut(uint256,address[])(amountOut_1,path_1 (-> []))
Function name: swapTokensForExactTokens
Internal call...
calculateInGivenOut
amountOut
path
Function: calculateInGivenOut
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
0
[i]Type for TMP_41

Name: TMP_41 Function: swapTokensForExactTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountIn_1(uint256) := TMP_41(uint256)
Function name: swapTokensForExactTokens
asgn

Name: TMP_41 Function: swapTokensForExactTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountIn Function: swapTokensForExactTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountIn

Name: amountIn Function: swapTokensForExactTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
amountIn_1(uint256) := TMP_41(uint256)
XXXXX
typecheckig node...
TMP_42(bool) = amountInMax_1 >= amountIn_1
Function name: swapTokensForExactTokens
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amountInMax Function: swapTokensForExactTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_42 Function: swapTokensForExactTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_42

Name: TMP_42 Function: swapTokensForExactTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_42(bool) = amountInMax_1 >= amountIn_1
XXXXX
TMP_43(None) = SOLIDITY_CALL require(bool,string)(TMP_42,VaderRouter::swapTokensForExactTokens: Large Trade Input)
[i]Type for TMP_43

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_44(uint256) = INTERNAL_CALL, VaderRouter._swap(uint256,address[],address)(amountIn_1,path_1 (-> []),to_1)
Function name: swapTokensForExactTokens
Internal call...
_swap
amountIn
path
to
Function: _swap
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: NATIVETOKEN
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
-100
Parameter length: 1
[[2], [-1], 0, None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, 'NATIVETOKEN', [], -1]
added
xyz
Function name: _swap
Function Visibility: private
clearning node...
clearing ir...?
amountIn_1(uint256) := ϕ(['amountIn_1', 'amountIn_1'])
has variable
[i] amountIn cleared
clearing ir...?
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])', 'path_1 (-> [])'])
has variable
[i] path cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1'])
has variable
[i] to cleared
clearing ir...?
factory_8(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
typecheckig node...
amountIn_1(uint256) := ϕ(['amountIn_1', 'amountIn_1'])
Function name: _swap
Phi
[i]Type for amountIn

Name: amountIn Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])', 'path_1 (-> [])'])
Function name: _swap
Phi
[i]Type for path

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['to_1', 'to_1'])
Function name: _swap
Phi
[i]Type for to

Name: to Function: _swap
Num: -1
Den: -1
Norm: u
LF: NATIVETOKEN
Fields: 
Finance Type: undef
done.
factory_8(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_8 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_51(bool) = REF_8 == 3
has variable
[i] TMP_51 cleared
clearing ir...?
CONDITION TMP_51
typecheckig node...
REF_8 -> LENGTH path_1 (-> [])
[i]Type for REF_8

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_51(bool) = REF_8 == 3
Function name: _swap
[i]Type for TMP_51

Name: TMP_51 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_51
Condition...
Conidtion: 
TMP_51
TMP_51
clearning node...
clearing ir...?
REF_9(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_10(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_52(bool) = REF_9 != REF_10
has variable
[i] TMP_52 cleared
clearing ir...?
REF_11(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_53(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
has variable
[i] TMP_53 cleared
clearing ir...?
factory_11(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
TMP_54(bool) = REF_11 == TMP_53
has variable
[i] TMP_54 cleared
clearing ir...?
TMP_55(bool) = TMP_52 && TMP_54
has variable
[i] TMP_55 cleared
clearing ir...?
REF_13(address) -> path_1 (-> [])[2]
has variable
clearing ir...?
REF_14(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_56(bool) = REF_13 != REF_14
has variable
[i] TMP_56 cleared
clearing ir...?
TMP_57(bool) = TMP_55 && TMP_56
has variable
[i] TMP_57 cleared
clearing ir...?
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,VaderRouter::_swap: Incorrect Path)
typecheckig node...
REF_9(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_9

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_10(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_10

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_52(bool) = REF_9 != REF_10
Function name: _swap
[i]Type for TMP_52

Name: TMP_52 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_11(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_11

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_53(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: _swap
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_53
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_53

Name: TMP_53 Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
factory_11(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
TMP_54(bool) = REF_11 == TMP_53
Function name: _swap
[i]Type for TMP_54

Name: TMP_54 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_55(bool) = TMP_52 && TMP_54
Function name: _swap
[i]Type for TMP_55

Name: TMP_55 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_13(address) -> path_1 (-> [])[2]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_13

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_14(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_14

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_56(bool) = REF_13 != REF_14
Function name: _swap
[i]Type for TMP_56

Name: TMP_56 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_57(bool) = TMP_55 && TMP_56
Function name: _swap
[i]Type for TMP_57

Name: TMP_57 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_16(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_17(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_59(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_11(IVaderPoolFactory), function:getPool, arguments:['REF_16', 'REF_17']  
has variable
[i] TMP_59 cleared
clearing ir...?
factory_12(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_11', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool0_1(IVaderPool) := TMP_59(IVaderPool)
has variable
[i] pool0 cleared
typecheckig node...
REF_16(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_16

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_17(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_17

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_59(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_11(IVaderPoolFactory), function:getPool, arguments:['REF_16', 'REF_17']  
Function name: _swap
High Call: getPool
func name:getPool
other func name:getPool
TMP_59
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_16
REF_17
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_59

Name: TMP_59 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_12(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_11', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool0_1(IVaderPool) := TMP_59(IVaderPool)
Function name: _swap
asgn

Name: TMP_59 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool0 Function: _swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool0

Name: pool0 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_19(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
REF_20(address) -> path_1 (-> [])[2]
has variable
clearing ir...?
TMP_60(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_12(IVaderPoolFactory), function:getPool, arguments:['REF_19', 'REF_20']  
has variable
[i] TMP_60 cleared
clearing ir...?
factory_13(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_12', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool1_1(IVaderPool) := TMP_60(IVaderPool)
has variable
[i] pool1 cleared
typecheckig node...
REF_19(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_19

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_20(address) -> path_1 (-> [])[2]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_20

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_60(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_12(IVaderPoolFactory), function:getPool, arguments:['REF_19', 'REF_20']  
Function name: _swap
High Call: getPool
func name:getPool
other func name:getPool
TMP_60
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_19
REF_20
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_60

Name: TMP_60 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_13(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_12', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool1_1(IVaderPool) := TMP_60(IVaderPool)
Function name: _swap
asgn

Name: TMP_60 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool1 Function: _swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool1

Name: pool1 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_21(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_61 = CONVERT REF_21 to IERC20
has variable
[i] TMP_61 cleared
clearing ir...?
TMP_62 = CONVERT pool0_1 to address
has variable
[i] TMP_62 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_61', 'msg.sender', 'TMP_62', 'amountIn_1'] 
typecheckig node...
REF_21(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_21

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_61 = CONVERT REF_21 to IERC20
Function name: _swap

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_61 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_61

Name: TMP_61 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_62 = CONVERT pool0_1 to address
Function name: _swap

Name: pool0 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: TMP_62 Function: _swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
[i]Type for TMP_62

Name: TMP_62 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_61', 'msg.sender', 'TMP_62', 'amountIn_1'] 
Library Call: safeTransferFrom
done.
clearning node...
clearing ir...?
REF_25 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_67(bool) = REF_25 == 2
has variable
[i] TMP_67 cleared
clearing ir...?
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,VaderRouter::_swap: Incorrect Path Length)
typecheckig node...
REF_25 -> LENGTH path_1 (-> [])
[i]Type for REF_25

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_67(bool) = REF_25 == 2
Function name: _swap
[i]Type for TMP_67

Name: TMP_67 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,VaderRouter::_swap: Incorrect Path Length)
[i]Type for TMP_68

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_69(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
has variable
[i] TMP_69 cleared
clearing ir...?
factory_9(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_8', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
nativeAsset_1(address) := TMP_69(address)
has variable
[i] nativeAsset cleared
typecheckig node...
TMP_69(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: _swap
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_69
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_69

Name: TMP_69 Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
factory_9(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_8', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
nativeAsset_1(address) := TMP_69(address)
Function name: _swap
asgn

Name: TMP_69 Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeAsset Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAsset

Name: nativeAsset Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_27(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_28(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_70(bool) = REF_27 != REF_28
has variable
[i] TMP_70 cleared
clearing ir...?
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,VaderRouter::_swap: Incorrect Path)
typecheckig node...
REF_27(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_27

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_28(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_28

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_70(bool) = REF_27 != REF_28
Function name: _swap
[i]Type for TMP_70

Name: TMP_70 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_71

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_30(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_31(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_72(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_9(IVaderPoolFactory), function:getPool, arguments:['REF_30', 'REF_31']  
has variable
[i] TMP_72 cleared
clearing ir...?
factory_10(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_9', 'factory_15'])
has variable
clearing ir...?
pool_1(IVaderPool) := TMP_72(IVaderPool)
has variable
[i] pool cleared
typecheckig node...
REF_30(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_30

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_31(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_31

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_72(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_9(IVaderPoolFactory), function:getPool, arguments:['REF_30', 'REF_31']  
Function name: _swap
High Call: getPool
func name:getPool
other func name:getPool
TMP_72
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_30
REF_31
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_72

Name: TMP_72 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_10(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_9', 'factory_15'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool_1(IVaderPool) := TMP_72(IVaderPool)
Function name: _swap
asgn

Name: TMP_72 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool Function: _swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool

Name: pool Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_32(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_73 = CONVERT REF_32 to IERC20
has variable
[i] TMP_73 cleared
clearing ir...?
TMP_74 = CONVERT pool_1 to address
has variable
[i] TMP_74 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_73', 'msg.sender', 'TMP_74', 'amountIn_1'] 
typecheckig node...
REF_32(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_32

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73 = CONVERT REF_32 to IERC20
Function name: _swap

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_73 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_73

Name: TMP_73 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_74 = CONVERT pool_1 to address
Function name: _swap

Name: pool Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: TMP_74 Function: _swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_73', 'msg.sender', 'TMP_74', 'amountIn_1'] 
Library Call: safeTransferFrom
done.
clearning node...
clearing ir...?
REF_34(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_76(bool) = REF_34 == nativeAsset_1
has variable
[i] TMP_76 cleared
clearing ir...?
CONDITION TMP_76
typecheckig node...
REF_34(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_34

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_76(bool) = REF_34 == nativeAsset_1
Function name: _swap
[i]Type for TMP_76

Name: TMP_76 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_76
Condition...
Conidtion: 
TMP_76
TMP_76
clearning node...
clearing ir...?
REF_36(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_78(bool) = REF_36 == nativeAsset_1
has variable
[i] TMP_78 cleared
clearing ir...?
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,VaderRouter::_swap: Incorrect Path)
typecheckig node...
REF_36(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_36

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(bool) = REF_36 == nativeAsset_1
Function name: _swap
[i]Type for TMP_78

Name: TMP_78 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'to_1']  
has variable
[i] TMP_77 cleared
clearing ir...?
RETURN TMP_77
typecheckig node...
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_77
hlc contract name: BasePool func_name: swap
amountIn_1
INCLUDED HIGH LEVEL CALL HAS SOME UNDEFINED TYPE
[i]Type for TMP_77

Name: TMP_77 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_77
RETURN

Name: TMP_77 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TMP_80(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['0', 'amountIn_1', 'to_1']  
has variable
[i] TMP_80 cleared
clearing ir...?
RETURN TMP_80
typecheckig node...
TMP_80(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['0', 'amountIn_1', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_80
hlc contract name: BasePool func_name: swap
0
val: 0
amountIn_1
INCLUDED HIGH LEVEL CALL HAS SOME UNDEFINED TYPE
[i]Type for TMP_80

Name: TMP_80 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_80
RETURN

Name: TMP_80 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TMP_64 = CONVERT pool1_1 to address
has variable
[i] TMP_64 cleared
clearing ir...?
TMP_65(uint256) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'TMP_64']  
has variable
[i] TMP_65 cleared
clearing ir...?
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:swap, arguments:['0', 'TMP_65', 'to_1']  
has variable
[i] TMP_66 cleared
clearing ir...?
RETURN TMP_66
typecheckig node...
TMP_64 = CONVERT pool1_1 to address
Function name: _swap

Name: pool1 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: TMP_64 Function: _swap
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
[i]Type for TMP_64

Name: TMP_64 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
TMP_65(uint256) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'TMP_64']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_65
hlc contract name: BasePool func_name: swap
amountIn_1
INCLUDED HIGH LEVEL CALL HAS SOME UNDEFINED TYPE
[i]Type for TMP_65

Name: TMP_65 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:swap, arguments:['0', 'TMP_65', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_66
hlc contract name: BasePool func_name: swap
0
val: 0
TMP_65
INCLUDED HIGH LEVEL CALL HAS SOME UNDEFINED TYPE
[i]Type for TMP_66

Name: TMP_66 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_66
RETURN

Name: TMP_66 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_swap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _swap

Name: TMP_66 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
Check copy_toekn_tuple
([], [], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for TMP_44

Name: TMP_44 Function: swapTokensForExactTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "swapTokensForExactTokens":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: swapTokensForExactTokens

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: initialize
Function name: initialize
Function Visibility (test): external
_reserve
Finding type for _reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: _reserve Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
_ZERO_ADDRESS_2(address) := ϕ(['_ZERO_ADDRESS_0', '_ZERO_ADDRESS_3', '_ZERO_ADDRESS_5'])
has variable
typecheckig node...
_ZERO_ADDRESS_2(address) := ϕ(['_ZERO_ADDRESS_0', '_ZERO_ADDRESS_3', '_ZERO_ADDRESS_5'])
Function name: initialize
Phi
[i]Type for _ZERO_ADDRESS

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
typecheckig node...
MODIFIER_CALL, Ownable.onlyOwner()()
Internal call...
onlyOwner
Function: onlyOwner
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: onlyOwner
Function Visibility: internal
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, Ownable._checkOwner()()
typecheckig node...
INTERNAL_CALL, Ownable._checkOwner()()
Internal call...
_checkOwner
Function: _checkOwner
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: _checkOwner
Function Visibility: internal
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_2(address) = INTERNAL_CALL, Ownable.owner()()
has variable
[i] TMP_2 cleared
clearing ir...?
TMP_3(address) = INTERNAL_CALL, Context._msgSender()()
has variable
[i] TMP_3 cleared
clearing ir...?
TMP_4(bool) = TMP_2 == TMP_3
has variable
[i] TMP_4 cleared
clearing ir...?
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,Ownable: caller is not the owner)
typecheckig node...
TMP_2(address) = INTERNAL_CALL, Ownable.owner()()
Function name: _checkOwner
Internal call...
owner
Function: owner
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: owner
Function Visibility: public
clearning node...
clearing ir...?
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
has variable
typecheckig node...
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
Function name: owner
Phi
[i]Type for _owner

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN _owner_1
typecheckig node...
RETURN _owner_1
RETURN

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "owner":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: owner

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
___
[i]Type for TMP_2

Name: TMP_2 Function: _checkOwner
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
done.
TMP_3(address) = INTERNAL_CALL, Context._msgSender()()
Function name: _checkOwner
Internal call...
_msgSender
Function: _msgSender
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: _msgSender
Function Visibility: internal
clearning node...
typecheckig node...
clearning node...
clearing ir...?
RETURN msg.sender
typecheckig node...
RETURN msg.sender
RETURN
msg.sender
WORKLIST iteration 0 for function call "_msgSender":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _msgSender

Name: PIC_115 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_3

Name: TMP_3 Function: _checkOwner
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_4(bool) = TMP_2 == TMP_3
Function name: _checkOwner
[i]Type for TMP_4

Name: TMP_4 Function: _checkOwner
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,Ownable: caller is not the owner)
[i]Type for TMP_5

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_checkOwner":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _checkOwner
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "onlyOwner":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: onlyOwner
done.
clearning node...
clearing ir...?
TMP_46 = CONVERT _ZERO_ADDRESS_3 to IVaderReserve
has variable
[i] TMP_46 cleared
clearing ir...?
TMP_47(bool) = _reserve_1 != TMP_46
has variable
[i] TMP_47 cleared
clearing ir...?
TMP_48(None) = SOLIDITY_CALL require(bool,string)(TMP_47,VaderRouter::initialize: Incorrect Reserve Specified)
typecheckig node...
TMP_46 = CONVERT _ZERO_ADDRESS_3 to IVaderReserve
Function name: initialize

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef

Name: TMP_46 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_46

Name: TMP_46 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
done.
TMP_47(bool) = _reserve_1 != TMP_46
Function name: initialize
[i]Type for TMP_47

Name: TMP_47 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_48(None) = SOLIDITY_CALL require(bool,string)(TMP_47,VaderRouter::initialize: Incorrect Reserve Specified)
[i]Type for TMP_48

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
reserve_8(IVaderReserve) := _reserve_1(IVaderReserve)
has variable
typecheckig node...
reserve_8(IVaderReserve) := _reserve_1(IVaderReserve)
Function name: initialize
asgn

Name: _reserve Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reserve Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for reserve

Name: reserve Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, Ownable.renounceOwnership()()
typecheckig node...
INTERNAL_CALL, Ownable.renounceOwnership()()
Internal call...
renounceOwnership
Function: renounceOwnership
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: renounceOwnership
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
typecheckig node...
MODIFIER_CALL, Ownable.onlyOwner()()
Internal call...
onlyOwner
Function: onlyOwner
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
TMP_6 = CONVERT 0 to address
has variable
[i] TMP_6 cleared
clearing ir...?
INTERNAL_CALL, Ownable._transferOwnership(address)(TMP_6)
typecheckig node...
TMP_6 = CONVERT 0 to address
Function name: renounceOwnership
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_6 Function: renounceOwnership
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_6

Name: TMP_6 Function: renounceOwnership
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, Ownable._transferOwnership(address)(TMP_6)
Internal call...
_transferOwnership
TMP_6
Function: _transferOwnership
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: _transferOwnership
Function Visibility: internal
clearning node...
clearing ir...?
newOwner_1(address) := ϕ(['newOwner_1', 'TMP_6', 'TMP_0'])
has variable
[i] newOwner cleared
clearing ir...?
_owner_2(address) := ϕ(['_owner_3', '_owner_0'])
has variable
typecheckig node...
newOwner_1(address) := ϕ(['newOwner_1', 'TMP_6', 'TMP_0'])
Function name: _transferOwnership
Phi
[i]Type for newOwner

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Norm: u
LF: newOwner
Fields: 
Finance Type: undef
done.
_owner_2(address) := ϕ(['_owner_3', '_owner_0'])
Function name: _transferOwnership
Phi
[i]Type for _owner

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
oldOwner_1(address) := _owner_2(address)
has variable
[i] oldOwner cleared
typecheckig node...
oldOwner_1(address) := _owner_2(address)
Function name: _transferOwnership
asgn

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef

Name: oldOwner Function: _transferOwnership
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for oldOwner

Name: oldOwner Function: _transferOwnership
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_owner_3(address) := newOwner_1(address)
has variable
typecheckig node...
_owner_3(address) := newOwner_1(address)
Function name: _transferOwnership
asgn

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Norm: u
LF: newOwner
Fields: 
Finance Type: undef

Name: _owner Function: _transferOwnership
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Norm: u
LF: newOwner
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
Emit OwnershipTransferred(oldOwner_1,newOwner_1)
typecheckig node...
Emit OwnershipTransferred(oldOwner_1,newOwner_1)
WORKLIST iteration 0 for function call "_transferOwnership":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _transferOwnership
done.
WORKLIST iteration 0 for function call "renounceOwnership":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: renounceOwnership
done.
WORKLIST iteration 0 for function call "initialize":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: initialize
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _swap
Function _swap not marked
Mark Iterations TRUE, proceeding anyway
Function name: _swap
Function Visibility (test): private
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _addLiquidity
Function _addLiquidity not marked
Mark Iterations TRUE, proceeding anyway
Function name: _addLiquidity
Function Visibility (test): private
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calculateInGivenOut
Function name: calculateInGivenOut
Function Visibility (test): public
amountOut
Finding type for amountOut...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountOut Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
path
Finding type for path...
address[]
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address[]
address[]
address
Final Type: address

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
amountOut_1(uint256) := ϕ(['amountOut_1'])
has variable
[i] amountOut cleared
clearing ir...?
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])'])
has variable
[i] path cleared
clearing ir...?
factory_17(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
typecheckig node...
amountOut_1(uint256) := ϕ(['amountOut_1'])
Function name: calculateInGivenOut
Phi
[i]Type for amountOut

Name: amountOut Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])'])
Function name: calculateInGivenOut
Phi
[i]Type for path

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
factory_17(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateInGivenOut
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_40 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_85(bool) = REF_40 == 2
has variable
[i] TMP_85 cleared
clearing ir...?
CONDITION TMP_85
typecheckig node...
REF_40 -> LENGTH path_1 (-> [])
[i]Type for REF_40

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_85(bool) = REF_40 == 2
Function name: calculateInGivenOut
[i]Type for TMP_85

Name: TMP_85 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_85
Condition...
Conidtion: 
TMP_85
TMP_85
clearning node...
clearing ir...?
TMP_86(address) = HIGH_LEVEL_CALL, dest:factory_17(IVaderPoolFactory), function:nativeAsset, arguments:[]  
has variable
[i] TMP_86 cleared
clearing ir...?
factory_20(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
nativeAsset_1(address) := TMP_86(address)
has variable
[i] nativeAsset cleared
typecheckig node...
TMP_86(address) = HIGH_LEVEL_CALL, dest:factory_17(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: calculateInGivenOut
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_86
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_86

Name: TMP_86 Function: calculateInGivenOut
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
factory_20(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateInGivenOut
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
nativeAsset_1(address) := TMP_86(address)
Function name: calculateInGivenOut
asgn

Name: TMP_86 Function: calculateInGivenOut
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeAsset Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAsset

Name: nativeAsset Function: calculateInGivenOut
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_50(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_51(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_91(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_17(IVaderPoolFactory), function:getPool, arguments:['REF_50', 'REF_51']  
has variable
[i] TMP_91 cleared
clearing ir...?
factory_18(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_17', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool0_1(IVaderPool) := TMP_91(IVaderPool)
has variable
[i] pool0 cleared
typecheckig node...
REF_50(address) -> path_1 (-> [])[0]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_50

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_51(address) -> path_1 (-> [])[1]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_51

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_91(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_17(IVaderPoolFactory), function:getPool, arguments:['REF_50', 'REF_51']  
Function name: calculateInGivenOut
High Call: getPool
func name:getPool
other func name:getPool
TMP_91
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_50
REF_51
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_91

Name: TMP_91 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_18(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_17', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateInGivenOut
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool0_1(IVaderPool) := TMP_91(IVaderPool)
Function name: calculateInGivenOut
asgn

Name: TMP_91 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool0 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool0

Name: pool0 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_53(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
REF_54(address) -> path_1 (-> [])[2]
has variable
clearing ir...?
TMP_92(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_18(IVaderPoolFactory), function:getPool, arguments:['REF_53', 'REF_54']  
has variable
[i] TMP_92 cleared
clearing ir...?
factory_19(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_18', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool1_1(IVaderPool) := TMP_92(IVaderPool)
has variable
[i] pool1 cleared
typecheckig node...
REF_53(address) -> path_1 (-> [])[1]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_53

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_54(address) -> path_1 (-> [])[2]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_54

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_92(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_18(IVaderPoolFactory), function:getPool, arguments:['REF_53', 'REF_54']  
Function name: calculateInGivenOut
High Call: getPool
func name:getPool
other func name:getPool
TMP_92
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_53
REF_54
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_92

Name: TMP_92 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_19(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_18', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateInGivenOut
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool1_1(IVaderPool) := TMP_92(IVaderPool)
Function name: calculateInGivenOut
asgn

Name: TMP_92 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool1 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool1

Name: pool1 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_43(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_44(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_87(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_20(IVaderPoolFactory), function:getPool, arguments:['REF_43', 'REF_44']  
has variable
[i] TMP_87 cleared
clearing ir...?
factory_21(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_20', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool_1(IVaderPool) := TMP_87(IVaderPool)
has variable
[i] pool cleared
typecheckig node...
REF_43(address) -> path_1 (-> [])[0]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_43

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_44(address) -> path_1 (-> [])[1]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_44

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_87(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_20(IVaderPoolFactory), function:getPool, arguments:['REF_43', 'REF_44']  
Function name: calculateInGivenOut
High Call: getPool
func name:getPool
other func name:getPool
TMP_87
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_43
REF_44
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_87

Name: TMP_87 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_21(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_20', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateInGivenOut
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool_1(IVaderPool) := TMP_87(IVaderPool)
Function name: calculateInGivenOut
asgn

Name: TMP_87 Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: BasePool
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool

Name: pool Function: calculateInGivenOut
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_4(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:getReserves, arguments:[]  
has variable
clearing ir...?
nativeReserve0_1(uint256)= UNPACK TUPLE_4 index: 0 
has variable
[i] nativeReserve0 cleared
clearing ir...?
foreignReserve0_1(uint256)= UNPACK TUPLE_4 index: 1 
has variable
[i] foreignReserve0 cleared
typecheckig node...
TUPLE_4(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateInGivenOut
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_4
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
Its the same:
0
0
[i]Type for TUPLE_4

Name: TUPLE_4 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve0_1(uint256)= UNPACK TUPLE_4 index: 0 
Function name: calculateInGivenOut
Reading tuple TUPLE_4 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for nativeReserve0

Name: nativeReserve0 Function: calculateInGivenOut
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve0_1(uint256)= UNPACK TUPLE_4 index: 1 
Function name: calculateInGivenOut
Reading tuple TUPLE_4 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for foreignReserve0

Name: foreignReserve0 Function: calculateInGivenOut
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:getReserves, arguments:[]  
has variable
clearing ir...?
nativeReserve_1(uint256)= UNPACK TUPLE_3 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint256)= UNPACK TUPLE_3 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateInGivenOut
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_3
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
Its the same:
0
0
[i]Type for TUPLE_3

Name: TUPLE_3 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve_1(uint256)= UNPACK TUPLE_3 index: 0 
Function name: calculateInGivenOut
Reading tuple TUPLE_3 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for nativeReserve

Name: nativeReserve Function: calculateInGivenOut
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve_1(uint256)= UNPACK TUPLE_3 index: 1 
Function name: calculateInGivenOut
Reading tuple TUPLE_3 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for foreignReserve

Name: foreignReserve Function: calculateInGivenOut
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_46(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_88(bool) = REF_46 == nativeAsset_1
has variable
[i] TMP_88 cleared
clearing ir...?
CONDITION TMP_88
typecheckig node...
REF_46(address) -> path_1 (-> [])[0]
Function name: calculateInGivenOut
INDEX

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: calculateInGivenOut
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_46

Name: path Function: calculateInGivenOut
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_88(bool) = REF_46 == nativeAsset_1
Function name: calculateInGivenOut
[i]Type for TMP_88

Name: TMP_88 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_88
Condition...
Conidtion: 
TMP_88
TMP_88
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_90(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['amountOut_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_90 cleared
clearing ir...?
RETURN TMP_90
typecheckig node...
TMP_90(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['amountOut_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: calculateInGivenOut
Library Call: calculateSwapReverse
hlc contract name: VaderMath func_name: calculateSwapReverse
amountOut_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
0

Name: PIC_91 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_90 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_90

Name: TMP_90 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_90
RETURN

Name: TMP_90 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TUPLE_5(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:getReserves, arguments:[]  
has variable
clearing ir...?
nativeReserve1_1(uint256)= UNPACK TUPLE_5 index: 0 
has variable
[i] nativeReserve1 cleared
clearing ir...?
foreignReserve1_1(uint256)= UNPACK TUPLE_5 index: 1 
has variable
[i] foreignReserve1 cleared
typecheckig node...
TUPLE_5(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateInGivenOut
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_5
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
Its the same:
0
0
[i]Type for TUPLE_5

Name: TUPLE_5 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve1_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: calculateInGivenOut
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for nativeReserve1

Name: nativeReserve1 Function: calculateInGivenOut
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve1_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: calculateInGivenOut
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for foreignReserve1

Name: foreignReserve1 Function: calculateInGivenOut
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_89(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['amountOut_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_89 cleared
clearing ir...?
RETURN TMP_89
typecheckig node...
TMP_89(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['amountOut_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: calculateInGivenOut
Library Call: calculateSwapReverse
hlc contract name: VaderMath func_name: calculateSwapReverse
amountOut_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwapReverse
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
has variable
[i] TMP_145 cleared
clearing ir...?
XY_1(uint256) := TMP_145(uint256)
has variable
[i] XY cleared
typecheckig node...
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_122 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_145 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_145

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
XY_1(uint256) := TMP_145(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: XY Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_146(uint256) = amountOut_1 (c)* 2
has variable
[i] TMP_146 cleared
clearing ir...?
y2_1(uint256) := TMP_146(uint256)
has variable
[i] y2 cleared
typecheckig node...
TMP_146(uint256) = amountOut_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_146 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y2_1(uint256) := TMP_146(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y2 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_147(uint256) = y2_1 (c)* 2
has variable
[i] TMP_147 cleared
clearing ir...?
y4_1(uint256) := TMP_147(uint256)
has variable
[i] y4 cleared
typecheckig node...
TMP_147(uint256) = y2_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_147 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_147

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y4_1(uint256) := TMP_147(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_148(bool) = y4_1 < reserveOut_1
has variable
[i] TMP_148 cleared
clearing ir...?
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
typecheckig node...
TMP_148(bool) = y4_1 < reserveOut_1
Function name: calculateSwapReverse
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_148

Name: TMP_148 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
has variable
[i] TMP_150 cleared
clearing ir...?
TMP_151(uint256) = reserveOut_1 (c)- y4_1
has variable
[i] TMP_151 cleared
clearing ir...?
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
has variable
[i] TMP_152 cleared
clearing ir...?
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
has variable
[i] TMP_153 cleared
clearing ir...?
TMP_154(uint256) = TMP_150 (c)* TMP_153
has variable
[i] TMP_154 cleared
clearing ir...?
numeratorA_1(uint256) := TMP_154(uint256)
has variable
[i] numeratorA cleared
typecheckig node...
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
Function name: calculateSwapReverse
Internal call...
root
XY
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
0

Name: PIC_83 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151(uint256) = reserveOut_1 (c)- y4_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_123 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_152 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
Function name: calculateSwapReverse
Internal call...
root
TMP_152
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
added
xyz
Function name: root
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
Function name: root
Phi
[i]Type for a

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_163(bool) = a_1 > 3
has variable
[i] TMP_163 cleared
clearing ir...?
CONDITION TMP_163
typecheckig node...
TMP_163(bool) = a_1 > 3
Function name: root
testing gt...
val: 3
val: 3
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 3 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_163

Name: TMP_163 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_163
Condition...
Conidtion: 
TMP_163
TMP_163
clearning node...
clearing ir...?
c_1(uint256) := a_1(uint256)
has variable
[i] c cleared
typecheckig node...
c_1(uint256) := a_1(uint256)
Function name: root
asgn

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(uint256) = a_1 (c)/ 2
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(uint256) = TMP_164 (c)+ 1
has variable
[i] TMP_165 cleared
clearing ir...?
x_1(uint256) := TMP_165(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_164(uint256) = a_1 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_164

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(uint256) = TMP_164 (c)+ 1
Function name: root
val: 1

Name: TMP_165 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_165 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_165

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_1(uint256) := TMP_165(uint256)
Function name: root
asgn

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_170(bool) = a_1 != 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = a_1 != 0
Function name: root
[i]Type for TMP_170

Name: TMP_170 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_2(uint256) := ϕ(['c_1', 'c_3'])
has variable
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
has variable
[i] x cleared
clearing ir...?
TMP_166(bool) = x_2 < c_2
has variable
[i] TMP_166 cleared
clearing ir...?
CONDITION TMP_166
typecheckig node...
c_2(uint256) := ϕ(['c_1', 'c_3'])
Function name: root
Phi
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
x_2(uint256) := ϕ(['x_1', 'x_3'])
Function name: root
Phi
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = x_2 < c_2
Function name: root
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_166

Name: TMP_166 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_166
Condition...
Conidtion: 
TMP_166
TMP_166
clearning node...
clearing ir...?
c_4(uint256) := 1(uint256)
has variable
[i] c cleared
typecheckig node...
c_4(uint256) := 1(uint256)
Function name: root
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_3(uint256) := x_2(uint256)
has variable
[i] c cleared
typecheckig node...
c_3(uint256) := x_2(uint256)
Function name: root
asgn

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_167(uint256) = a_1 (c)/ x_2
has variable
[i] TMP_167 cleared
clearing ir...?
TMP_168(uint256) = TMP_167 (c)+ x_2
has variable
[i] TMP_168 cleared
clearing ir...?
TMP_169(uint256) = TMP_168 (c)/ 2
has variable
[i] TMP_169 cleared
clearing ir...?
x_3(uint256) := TMP_169(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_167(uint256) = a_1 (c)/ x_2
Function name: root
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_124 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: root
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_168(uint256) = TMP_167 (c)+ x_2
Function name: root

Name: TMP_168 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_168

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_169(uint256) = TMP_168 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_169

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_3(uint256) := TMP_169(uint256)
Function name: root
asgn

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "root":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: root

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_153

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(uint256) = TMP_150 (c)* TMP_153
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_154

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_154(uint256) = TMP_150 (c)* TMP_153
XXXXX
numeratorA_1(uint256) := TMP_154(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numeratorA_1(uint256) := TMP_154(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_155(uint256) = y2_1 (c)* reserveIn_1
has variable
[i] TMP_155 cleared
clearing ir...?
numeratorB_1(uint256) := TMP_155(uint256)
has variable
[i] numeratorB cleared
typecheckig node...
TMP_155(uint256) = y2_1 (c)* reserveIn_1
Function name: calculateSwapReverse
testing mul...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_155 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_155

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numeratorB_1(uint256) := TMP_155(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
numeratorC_1(uint256) := XY_1(uint256)
has variable
[i] numeratorC cleared
typecheckig node...
numeratorC_1(uint256) := XY_1(uint256)
Function name: calculateSwapReverse
asgn

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
has variable
[i] TMP_156 cleared
clearing ir...?
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
has variable
[i] TMP_157 cleared
clearing ir...?
numerator_1(uint256) := TMP_157(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
Function name: calculateSwapReverse
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_156 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_156

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
XXXXX
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_157

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_157(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numerator_1(uint256) := TMP_157(uint256)
XXXXX
clearning node...
clearing ir...?
denominator_1(uint256) := y2_1(uint256)
has variable
[i] denominator cleared
typecheckig node...
denominator_1(uint256) := y2_1(uint256)
Function name: calculateSwapReverse
asgn

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_158(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_158 cleared
clearing ir...?
amountIn_1(uint256) := TMP_158(uint256)
has variable
[i] amountIn cleared
typecheckig node...
TMP_158(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_158 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_158(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountIn_1(uint256) := TMP_158(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountIn Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calculateSwapReverse":
 New undefined nodes- 3
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_126 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_145

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
XY_1(uint256) := TMP_145(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_146(uint256) = amountOut_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y2_1(uint256) := TMP_146(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_147(uint256) = y2_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_147

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y4_1(uint256) := TMP_147(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_148(bool) = y4_1 < reserveOut_1
Function name: calculateSwapReverse
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_148

Name: TMP_148 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
Function name: calculateSwapReverse
Internal call...
root
XY
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
0

Name: PIC_83 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151(uint256) = reserveOut_1 (c)- y4_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_127 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_152 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
Function name: calculateSwapReverse
Internal call...
root
TMP_152
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
added
xyz
Function name: root
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
Function name: root
Phi
[i]Type for a

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_163(bool) = a_1 > 3
has variable
[i] TMP_163 cleared
clearing ir...?
CONDITION TMP_163
typecheckig node...
TMP_163(bool) = a_1 > 3
Function name: root
testing gt...
val: 3
val: 3
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 3 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_163

Name: TMP_163 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_163
Condition...
Conidtion: 
TMP_163
TMP_163
clearning node...
clearing ir...?
c_1(uint256) := a_1(uint256)
has variable
[i] c cleared
typecheckig node...
c_1(uint256) := a_1(uint256)
Function name: root
asgn

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(uint256) = a_1 (c)/ 2
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(uint256) = TMP_164 (c)+ 1
has variable
[i] TMP_165 cleared
clearing ir...?
x_1(uint256) := TMP_165(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_164(uint256) = a_1 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_164

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(uint256) = TMP_164 (c)+ 1
Function name: root
val: 1

Name: TMP_165 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_165 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_165

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_1(uint256) := TMP_165(uint256)
Function name: root
asgn

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_170(bool) = a_1 != 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = a_1 != 0
Function name: root
[i]Type for TMP_170

Name: TMP_170 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_2(uint256) := ϕ(['c_1', 'c_3'])
has variable
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
has variable
[i] x cleared
clearing ir...?
TMP_166(bool) = x_2 < c_2
has variable
[i] TMP_166 cleared
clearing ir...?
CONDITION TMP_166
typecheckig node...
c_2(uint256) := ϕ(['c_1', 'c_3'])
Function name: root
Phi
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
x_2(uint256) := ϕ(['x_1', 'x_3'])
Function name: root
Phi
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = x_2 < c_2
Function name: root
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_166

Name: TMP_166 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_166
Condition...
Conidtion: 
TMP_166
TMP_166
clearning node...
clearing ir...?
c_4(uint256) := 1(uint256)
has variable
[i] c cleared
typecheckig node...
c_4(uint256) := 1(uint256)
Function name: root
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_3(uint256) := x_2(uint256)
has variable
[i] c cleared
typecheckig node...
c_3(uint256) := x_2(uint256)
Function name: root
asgn

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_167(uint256) = a_1 (c)/ x_2
has variable
[i] TMP_167 cleared
clearing ir...?
TMP_168(uint256) = TMP_167 (c)+ x_2
has variable
[i] TMP_168 cleared
clearing ir...?
TMP_169(uint256) = TMP_168 (c)/ 2
has variable
[i] TMP_169 cleared
clearing ir...?
x_3(uint256) := TMP_169(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_167(uint256) = a_1 (c)/ x_2
Function name: root
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_128 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: root
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_168(uint256) = TMP_167 (c)+ x_2
Function name: root

Name: TMP_168 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_168

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_169(uint256) = TMP_168 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_169

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_3(uint256) := TMP_169(uint256)
Function name: root
asgn

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "root":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: root

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_153

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(uint256) = TMP_150 (c)* TMP_153
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_154

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_154(uint256) = TMP_150 (c)* TMP_153
XXXXX
numeratorA_1(uint256) := TMP_154(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numeratorA_1(uint256) := TMP_154(uint256)
XXXXX
typecheckig node...
TMP_155(uint256) = y2_1 (c)* reserveIn_1
Function name: calculateSwapReverse
testing mul...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_155

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numeratorB_1(uint256) := TMP_155(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
numeratorC_1(uint256) := XY_1(uint256)
Function name: calculateSwapReverse
asgn

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
Function name: calculateSwapReverse
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_156

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
XXXXX
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_157

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_157(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numerator_1(uint256) := TMP_157(uint256)
XXXXX
typecheckig node...
denominator_1(uint256) := y2_1(uint256)
Function name: calculateSwapReverse
asgn

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_158(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_158(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountIn_1(uint256) := TMP_158(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "calculateSwapReverse":
 New undefined nodes- 3
 Old undefined nodes- 3
Saving return values for: calculateSwapReverse

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_89

Name: TMP_89 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_89
RETURN

Name: TMP_89 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TMP_93(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['amountOut_1', 'nativeReserve1_1', 'foreignReserve1_1'] 
has variable
[i] TMP_93 cleared
clearing ir...?
TMP_94(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['TMP_93', 'foreignReserve0_1', 'nativeReserve0_1'] 
has variable
[i] TMP_94 cleared
clearing ir...?
RETURN TMP_94
typecheckig node...
TMP_93(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['amountOut_1', 'nativeReserve1_1', 'foreignReserve1_1'] 
Function name: calculateInGivenOut
Library Call: calculateSwapReverse
hlc contract name: VaderMath func_name: calculateSwapReverse
amountOut_1
nativeReserve1_1
foreignReserve1_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwapReverse
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
has variable
[i] TMP_145 cleared
clearing ir...?
XY_1(uint256) := TMP_145(uint256)
has variable
[i] XY cleared
typecheckig node...
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_131 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_145 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_145

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
XY_1(uint256) := TMP_145(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: XY Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_146(uint256) = amountOut_1 (c)* 2
has variable
[i] TMP_146 cleared
clearing ir...?
y2_1(uint256) := TMP_146(uint256)
has variable
[i] y2 cleared
typecheckig node...
TMP_146(uint256) = amountOut_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_146 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y2_1(uint256) := TMP_146(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y2 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_147(uint256) = y2_1 (c)* 2
has variable
[i] TMP_147 cleared
clearing ir...?
y4_1(uint256) := TMP_147(uint256)
has variable
[i] y4 cleared
typecheckig node...
TMP_147(uint256) = y2_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_147 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_147

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y4_1(uint256) := TMP_147(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_148(bool) = y4_1 < reserveOut_1
has variable
[i] TMP_148 cleared
clearing ir...?
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
typecheckig node...
TMP_148(bool) = y4_1 < reserveOut_1
Function name: calculateSwapReverse
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_148

Name: TMP_148 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
has variable
[i] TMP_150 cleared
clearing ir...?
TMP_151(uint256) = reserveOut_1 (c)- y4_1
has variable
[i] TMP_151 cleared
clearing ir...?
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
has variable
[i] TMP_152 cleared
clearing ir...?
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
has variable
[i] TMP_153 cleared
clearing ir...?
TMP_154(uint256) = TMP_150 (c)* TMP_153
has variable
[i] TMP_154 cleared
clearing ir...?
numeratorA_1(uint256) := TMP_154(uint256)
has variable
[i] numeratorA cleared
typecheckig node...
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
Function name: calculateSwapReverse
Internal call...
root
XY
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
0

Name: PIC_83 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151(uint256) = reserveOut_1 (c)- y4_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_132 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_152 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
Function name: calculateSwapReverse
Internal call...
root
TMP_152
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
added
xyz
Function name: root
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
Function name: root
Phi
[i]Type for a

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_163(bool) = a_1 > 3
has variable
[i] TMP_163 cleared
clearing ir...?
CONDITION TMP_163
typecheckig node...
TMP_163(bool) = a_1 > 3
Function name: root
testing gt...
val: 3
val: 3
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 3 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_163

Name: TMP_163 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_163
Condition...
Conidtion: 
TMP_163
TMP_163
clearning node...
clearing ir...?
c_1(uint256) := a_1(uint256)
has variable
[i] c cleared
typecheckig node...
c_1(uint256) := a_1(uint256)
Function name: root
asgn

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(uint256) = a_1 (c)/ 2
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(uint256) = TMP_164 (c)+ 1
has variable
[i] TMP_165 cleared
clearing ir...?
x_1(uint256) := TMP_165(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_164(uint256) = a_1 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_164

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(uint256) = TMP_164 (c)+ 1
Function name: root
val: 1

Name: TMP_165 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_165 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_165

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_1(uint256) := TMP_165(uint256)
Function name: root
asgn

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_170(bool) = a_1 != 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = a_1 != 0
Function name: root
[i]Type for TMP_170

Name: TMP_170 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_2(uint256) := ϕ(['c_1', 'c_3'])
has variable
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
has variable
[i] x cleared
clearing ir...?
TMP_166(bool) = x_2 < c_2
has variable
[i] TMP_166 cleared
clearing ir...?
CONDITION TMP_166
typecheckig node...
c_2(uint256) := ϕ(['c_1', 'c_3'])
Function name: root
Phi
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
x_2(uint256) := ϕ(['x_1', 'x_3'])
Function name: root
Phi
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = x_2 < c_2
Function name: root
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_166

Name: TMP_166 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_166
Condition...
Conidtion: 
TMP_166
TMP_166
clearning node...
clearing ir...?
c_4(uint256) := 1(uint256)
has variable
[i] c cleared
typecheckig node...
c_4(uint256) := 1(uint256)
Function name: root
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_3(uint256) := x_2(uint256)
has variable
[i] c cleared
typecheckig node...
c_3(uint256) := x_2(uint256)
Function name: root
asgn

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_167(uint256) = a_1 (c)/ x_2
has variable
[i] TMP_167 cleared
clearing ir...?
TMP_168(uint256) = TMP_167 (c)+ x_2
has variable
[i] TMP_168 cleared
clearing ir...?
TMP_169(uint256) = TMP_168 (c)/ 2
has variable
[i] TMP_169 cleared
clearing ir...?
x_3(uint256) := TMP_169(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_167(uint256) = a_1 (c)/ x_2
Function name: root
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_133 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: root
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_168(uint256) = TMP_167 (c)+ x_2
Function name: root

Name: TMP_168 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_168

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_169(uint256) = TMP_168 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_169

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_3(uint256) := TMP_169(uint256)
Function name: root
asgn

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "root":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: root

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_153

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(uint256) = TMP_150 (c)* TMP_153
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_154

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_154(uint256) = TMP_150 (c)* TMP_153
XXXXX
numeratorA_1(uint256) := TMP_154(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numeratorA_1(uint256) := TMP_154(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_155(uint256) = y2_1 (c)* reserveIn_1
has variable
[i] TMP_155 cleared
clearing ir...?
numeratorB_1(uint256) := TMP_155(uint256)
has variable
[i] numeratorB cleared
typecheckig node...
TMP_155(uint256) = y2_1 (c)* reserveIn_1
Function name: calculateSwapReverse
testing mul...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_155 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_155

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numeratorB_1(uint256) := TMP_155(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
numeratorC_1(uint256) := XY_1(uint256)
has variable
[i] numeratorC cleared
typecheckig node...
numeratorC_1(uint256) := XY_1(uint256)
Function name: calculateSwapReverse
asgn

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
has variable
[i] TMP_156 cleared
clearing ir...?
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
has variable
[i] TMP_157 cleared
clearing ir...?
numerator_1(uint256) := TMP_157(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
Function name: calculateSwapReverse
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_156 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_156

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
XXXXX
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_157

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_157(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numerator_1(uint256) := TMP_157(uint256)
XXXXX
clearning node...
clearing ir...?
denominator_1(uint256) := y2_1(uint256)
has variable
[i] denominator cleared
typecheckig node...
denominator_1(uint256) := y2_1(uint256)
Function name: calculateSwapReverse
asgn

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_158(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_158 cleared
clearing ir...?
amountIn_1(uint256) := TMP_158(uint256)
has variable
[i] amountIn cleared
typecheckig node...
TMP_158(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_158 Function: calculateSwapReverse
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_158(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountIn_1(uint256) := TMP_158(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountIn Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "calculateSwapReverse":
 New undefined nodes- 3
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
TMP_145(uint256) = reserveIn_1 (c)* reserveOut_1
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_135 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_145

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
XY_1(uint256) := TMP_145(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_145 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_146(uint256) = amountOut_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y2_1(uint256) := TMP_146(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_146 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_147(uint256) = y2_1 (c)* 2
Function name: calculateSwapReverse
testing mul...
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_147

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
y4_1(uint256) := TMP_147(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_147 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_148(bool) = y4_1 < reserveOut_1
Function name: calculateSwapReverse
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_148

Name: TMP_148 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_150(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
Function name: calculateSwapReverse
Internal call...
root
XY
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
0

Name: PIC_83 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151(uint256) = reserveOut_1 (c)- y4_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserveOut Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: calculateSwapReverse
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_152(uint256) = reserveIn_1 (c)* TMP_151
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_136 Function: None
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_152 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_153(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_152)
Function name: calculateSwapReverse
Internal call...
root
TMP_152
Function: root
ic
Internal cal param_cache
Param: 0
    num: [1, 2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2, 1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[2, 1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[2, 1], [-1], 'u', None, [], -1]
added
xyz
Function name: root
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_152', 'XY_1'])
Function name: root
Phi
[i]Type for a

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_163(bool) = a_1 > 3
has variable
[i] TMP_163 cleared
clearing ir...?
CONDITION TMP_163
typecheckig node...
TMP_163(bool) = a_1 > 3
Function name: root
testing gt...
val: 3
val: 3
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 3 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_163

Name: TMP_163 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_163
Condition...
Conidtion: 
TMP_163
TMP_163
clearning node...
clearing ir...?
c_1(uint256) := a_1(uint256)
has variable
[i] c cleared
typecheckig node...
c_1(uint256) := a_1(uint256)
Function name: root
asgn

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(uint256) = a_1 (c)/ 2
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(uint256) = TMP_164 (c)+ 1
has variable
[i] TMP_165 cleared
clearing ir...?
x_1(uint256) := TMP_165(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_164(uint256) = a_1 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_164 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_164

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(uint256) = TMP_164 (c)+ 1
Function name: root
val: 1

Name: TMP_165 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_164 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_165 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_165

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_1(uint256) := TMP_165(uint256)
Function name: root
asgn

Name: TMP_165 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_170(bool) = a_1 != 0
has variable
[i] TMP_170 cleared
clearing ir...?
CONDITION TMP_170
typecheckig node...
TMP_170(bool) = a_1 != 0
Function name: root
[i]Type for TMP_170

Name: TMP_170 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_170
Condition...
Conidtion: 
TMP_170
TMP_170
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_2(uint256) := ϕ(['c_1', 'c_3'])
has variable
[i] c cleared
clearing ir...?
x_2(uint256) := ϕ(['x_1', 'x_3'])
has variable
[i] x cleared
clearing ir...?
TMP_166(bool) = x_2 < c_2
has variable
[i] TMP_166 cleared
clearing ir...?
CONDITION TMP_166
typecheckig node...
c_2(uint256) := ϕ(['c_1', 'c_3'])
Function name: root
Phi
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
x_2(uint256) := ϕ(['x_1', 'x_3'])
Function name: root
Phi
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_166(bool) = x_2 < c_2
Function name: root
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_166

Name: TMP_166 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_166
Condition...
Conidtion: 
TMP_166
TMP_166
clearning node...
clearing ir...?
c_4(uint256) := 1(uint256)
has variable
[i] c cleared
typecheckig node...
c_4(uint256) := 1(uint256)
Function name: root
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
c_3(uint256) := x_2(uint256)
has variable
[i] c cleared
typecheckig node...
c_3(uint256) := x_2(uint256)
Function name: root
asgn

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: c Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for c

Name: c Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_167(uint256) = a_1 (c)/ x_2
has variable
[i] TMP_167 cleared
clearing ir...?
TMP_168(uint256) = TMP_167 (c)+ x_2
has variable
[i] TMP_168 cleared
clearing ir...?
TMP_169(uint256) = TMP_168 (c)/ 2
has variable
[i] TMP_169 cleared
clearing ir...?
x_3(uint256) := TMP_169(uint256)
has variable
[i] x cleared
typecheckig node...
TMP_167(uint256) = a_1 (c)/ x_2
Function name: root
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_137 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_167 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: root
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_168(uint256) = TMP_167 (c)+ x_2
Function name: root

Name: TMP_168 Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_168

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_169(uint256) = TMP_168 (c)/ 2
Function name: root
val: 2
val: 2
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_168 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_169 Function: root
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_169

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
x_3(uint256) := TMP_169(uint256)
Function name: root
asgn

Name: TMP_169 Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: x Function: root
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for x

Name: x Function: root
Num: 1, 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "root":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: root

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_153

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(uint256) = TMP_150 (c)* TMP_153
Function name: calculateSwapReverse
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_153 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_154

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_154(uint256) = TMP_150 (c)* TMP_153
XXXXX
numeratorA_1(uint256) := TMP_154(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_154 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numeratorA_1(uint256) := TMP_154(uint256)
XXXXX
typecheckig node...
TMP_155(uint256) = y2_1 (c)* reserveIn_1
Function name: calculateSwapReverse
testing mul...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: reserveIn Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_155

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
numeratorB_1(uint256) := TMP_155(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_155 Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
numeratorC_1(uint256) := XY_1(uint256)
Function name: calculateSwapReverse
asgn

Name: XY Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
Function name: calculateSwapReverse
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorC Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_156

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_156(uint256) = numeratorC_1 (c)- numeratorA_1
XXXXX
TMP_157(uint256) = TMP_156 (c)- numeratorB_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_156 Function: calculateSwapReverse
Num: 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numeratorB Function: calculateSwapReverse
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_157

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_157(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_157 Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
numerator_1(uint256) := TMP_157(uint256)
XXXXX
typecheckig node...
denominator_1(uint256) := y2_1(uint256)
Function name: calculateSwapReverse
asgn

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_158(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwapReverse
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_158(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountIn_1(uint256) := TMP_158(uint256)
Function name: calculateSwapReverse
asgn

Name: TMP_158 Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "calculateSwapReverse":
 New undefined nodes- 3
 Old undefined nodes- 3
Saving return values for: calculateSwapReverse

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_93

Name: TMP_93 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_94(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwapReverse(uint256,uint256,uint256), arguments:['TMP_93', 'foreignReserve0_1', 'nativeReserve0_1'] 
Function name: calculateInGivenOut
Library Call: calculateSwapReverse
hlc contract name: VaderMath func_name: calculateSwapReverse
TMP_93
INCLUDED HIGH LEVEL CALL HAS SOME UNDEFINED TYPE
[i]Type for TMP_94

Name: TMP_94 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_94
RETURN

Name: TMP_94 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateInGivenOut":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateInGivenOut

Name: TMP_94 Function: calculateInGivenOut
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: calculateOutGivenIn
Function name: calculateOutGivenIn
Function Visibility (test): external
amountIn
Finding type for amountIn...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountIn Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
path
Finding type for path...
address[]
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address[]
address[]
address
Final Type: address

Name: path Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
factory_22(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
typecheckig node...
factory_22(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_59 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_95(bool) = REF_59 == 2
has variable
[i] TMP_95 cleared
clearing ir...?
CONDITION TMP_95
typecheckig node...
REF_59 -> LENGTH path_1 (-> [])
[i]Type for REF_59

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_95(bool) = REF_59 == 2
Function name: calculateOutGivenIn
[i]Type for TMP_95

Name: TMP_95 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_95
Condition...
Conidtion: 
TMP_95
TMP_95
clearning node...
clearing ir...?
TMP_96(address) = HIGH_LEVEL_CALL, dest:factory_22(IVaderPoolFactory), function:nativeAsset, arguments:[]  
has variable
[i] TMP_96 cleared
clearing ir...?
factory_23(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_22', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
nativeAsset_1(address) := TMP_96(address)
has variable
[i] nativeAsset cleared
typecheckig node...
TMP_96(address) = HIGH_LEVEL_CALL, dest:factory_22(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: calculateOutGivenIn
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_96
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_96

Name: TMP_96 Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
factory_23(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_22', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
nativeAsset_1(address) := TMP_96(address)
Function name: calculateOutGivenIn
asgn

Name: TMP_96 Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeAsset Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAsset

Name: nativeAsset Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_62(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_63(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_97(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_23(IVaderPoolFactory), function:getPool, arguments:['REF_62', 'REF_63']  
has variable
[i] TMP_97 cleared
clearing ir...?
factory_24(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_23', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool_1(IVaderPool) := TMP_97(IVaderPool)
has variable
[i] pool cleared
typecheckig node...
REF_62(address) -> path_1 (-> [])[0]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_62

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_62(address) -> path_1 (-> [])[0]
XXXXX
REF_63(address) -> path_1 (-> [])[1]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_63

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_63(address) -> path_1 (-> [])[1]
XXXXX
TMP_97(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_23(IVaderPoolFactory), function:getPool, arguments:['REF_62', 'REF_63']  
Function name: calculateOutGivenIn
High Call: getPool
func name:getPool
other func name:getPool
TMP_97
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_62
REF_63
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_97

Name: TMP_97 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_24(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_23', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool_1(IVaderPool) := TMP_97(IVaderPool)
Function name: calculateOutGivenIn
asgn

Name: TMP_97 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool

Name: pool Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_69(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_70(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_101(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_22(IVaderPoolFactory), function:getPool, arguments:['REF_69', 'REF_70']  
has variable
[i] TMP_101 cleared
clearing ir...?
factory_25(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
has variable
clearing ir...?
pool0_1(IVaderPool) := TMP_101(IVaderPool)
has variable
[i] pool0 cleared
typecheckig node...
REF_69(address) -> path_1 (-> [])[0]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_69

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_69(address) -> path_1 (-> [])[0]
XXXXX
REF_70(address) -> path_1 (-> [])[1]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_70

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_70(address) -> path_1 (-> [])[1]
XXXXX
TMP_101(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_22(IVaderPoolFactory), function:getPool, arguments:['REF_69', 'REF_70']  
Function name: calculateOutGivenIn
High Call: getPool
func name:getPool
other func name:getPool
TMP_101
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_69
REF_70
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_101

Name: TMP_101 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_25(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool0_1(IVaderPool) := TMP_101(IVaderPool)
Function name: calculateOutGivenIn
asgn

Name: TMP_101 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool0 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool0

Name: pool0 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_72(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
REF_73(address) -> path_1 (-> [])[2]
has variable
clearing ir...?
TMP_102(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_25(IVaderPoolFactory), function:getPool, arguments:['REF_72', 'REF_73']  
has variable
[i] TMP_102 cleared
clearing ir...?
factory_26(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_25', 'factory_15'])
has variable
clearing ir...?
pool1_1(IVaderPool) := TMP_102(IVaderPool)
has variable
[i] pool1 cleared
typecheckig node...
REF_72(address) -> path_1 (-> [])[1]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_72

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_72(address) -> path_1 (-> [])[1]
XXXXX
REF_73(address) -> path_1 (-> [])[2]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_73

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_73(address) -> path_1 (-> [])[2]
XXXXX
TMP_102(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_25(IVaderPoolFactory), function:getPool, arguments:['REF_72', 'REF_73']  
Function name: calculateOutGivenIn
High Call: getPool
func name:getPool
other func name:getPool
TMP_102
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_72
REF_73
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_102

Name: TMP_102 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_26(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_25', 'factory_15'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool1_1(IVaderPool) := TMP_102(IVaderPool)
Function name: calculateOutGivenIn
asgn

Name: TMP_102 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool1 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool1

Name: pool1 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TUPLE_6(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:getReserves, arguments:[]  
has variable
clearing ir...?
nativeReserve_1(uint256)= UNPACK TUPLE_6 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint256)= UNPACK TUPLE_6 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_6(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateOutGivenIn
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_6
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
Its the same:
0
0
[i]Type for TUPLE_6

Name: TUPLE_6 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve_1(uint256)= UNPACK TUPLE_6 index: 0 
Function name: calculateOutGivenIn
Reading tuple TUPLE_6 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for nativeReserve

Name: nativeReserve Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve_1(uint256)= UNPACK TUPLE_6 index: 1 
Function name: calculateOutGivenIn
Reading tuple TUPLE_6 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for foreignReserve

Name: foreignReserve Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_65(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_98(bool) = REF_65 == nativeAsset_1
has variable
[i] TMP_98 cleared
clearing ir...?
CONDITION TMP_98
typecheckig node...
REF_65(address) -> path_1 (-> [])[0]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_65

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_65(address) -> path_1 (-> [])[0]
XXXXX
TMP_98(bool) = REF_65 == nativeAsset_1
Function name: calculateOutGivenIn
[i]Type for TMP_98

Name: TMP_98 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_98
Condition...
Conidtion: 
TMP_98
TMP_98
clearning node...
clearing ir...?
TMP_100(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_100 cleared
clearing ir...?
RETURN TMP_100
typecheckig node...
TMP_100(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: calculateOutGivenIn
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
amountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_141 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_142 Function: None
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amountIn Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_143 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_145 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_100

Name: TMP_100 Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_100
RETURN

Name: TMP_100 Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_99(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_99 cleared
clearing ir...?
RETURN TMP_99
typecheckig node...
TMP_99(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: calculateOutGivenIn
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
amountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
0

Name: PIC_41 Function: None
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_99 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_99

Name: TMP_99 Function: calculateOutGivenIn
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_99
RETURN

Name: TMP_99 Function: calculateOutGivenIn
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TUPLE_7(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:getReserves, arguments:[]  
has variable
clearing ir...?
nativeReserve0_1(uint256)= UNPACK TUPLE_7 index: 0 
has variable
[i] nativeReserve0 cleared
clearing ir...?
foreignReserve0_1(uint256)= UNPACK TUPLE_7 index: 1 
has variable
[i] foreignReserve0 cleared
typecheckig node...
TUPLE_7(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateOutGivenIn
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_7
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
Its the same:
0
0
[i]Type for TUPLE_7

Name: TUPLE_7 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve0_1(uint256)= UNPACK TUPLE_7 index: 0 
Function name: calculateOutGivenIn
Reading tuple TUPLE_7 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for nativeReserve0

Name: nativeReserve0 Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve0_1(uint256)= UNPACK TUPLE_7 index: 1 
Function name: calculateOutGivenIn
Reading tuple TUPLE_7 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for foreignReserve0

Name: foreignReserve0 Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_8(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:getReserves, arguments:[]  
has variable
clearing ir...?
nativeReserve1_1(uint256)= UNPACK TUPLE_8 index: 0 
has variable
[i] nativeReserve1 cleared
clearing ir...?
foreignReserve1_1(uint256)= UNPACK TUPLE_8 index: 1 
has variable
[i] foreignReserve1 cleared
typecheckig node...
TUPLE_8(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateOutGivenIn
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_8
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
Its the same:
0
0
[i]Type for TUPLE_8

Name: TUPLE_8 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve1_1(uint256)= UNPACK TUPLE_8 index: 0 
Function name: calculateOutGivenIn
Reading tuple TUPLE_8 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for nativeReserve1

Name: nativeReserve1 Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve1_1(uint256)= UNPACK TUPLE_8 index: 1 
Function name: calculateOutGivenIn
Reading tuple TUPLE_8 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for foreignReserve1

Name: foreignReserve1 Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_103(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'nativeReserve1_1', 'foreignReserve1_1'] 
has variable
[i] TMP_103 cleared
clearing ir...?
TMP_104(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['TMP_103', 'foreignReserve0_1', 'nativeReserve0_1'] 
has variable
[i] TMP_104 cleared
clearing ir...?
RETURN TMP_104
typecheckig node...
TMP_103(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'nativeReserve1_1', 'foreignReserve1_1'] 
Function name: calculateOutGivenIn
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
amountIn_1
nativeReserve1_1
foreignReserve1_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
0

Name: PIC_41 Function: None
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_103 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_103

Name: TMP_103 Function: calculateOutGivenIn
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_104(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['TMP_103', 'foreignReserve0_1', 'nativeReserve0_1'] 
Function name: calculateOutGivenIn
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
TMP_103
foreignReserve0_1
nativeReserve0_1
High level cal param_cache
Param: 0
    num: [2, 1, 2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_147 Function: None
Num: 2, 1, 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2, 1, 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_148 Function: None
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: a Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_162(uint256) = a_1 (c)* a_1
XXXXX
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
denominator_1(uint256) := TMP_143(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_144(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_150 Function: None
Num: 2, 1, 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 2, 1, 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2, 1, 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_151 Function: None
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: a Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_162(uint256) = a_1 (c)* a_1
XXXXX
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
denominator_1(uint256) := TMP_143(uint256)
XXXXX
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_144(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "calculateSwap":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_104

Name: TMP_104 Function: calculateOutGivenIn
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_104
RETURN

Name: TMP_104 Function: calculateOutGivenIn
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateOutGivenIn":
 New undefined nodes- 4
 Old undefined nodes- 0
typecheckig node...
factory_22(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_0', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_59 -> LENGTH path_1 (-> [])
[i]Type for REF_59

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_95(bool) = REF_59 == 2
Function name: calculateOutGivenIn
[i]Type for TMP_95

Name: TMP_95 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_95
Condition...
Conidtion: 
TMP_95
TMP_95
typecheckig node...
TMP_96(address) = HIGH_LEVEL_CALL, dest:factory_22(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: calculateOutGivenIn
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_96
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_96

Name: TMP_96 Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
factory_23(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_22', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
nativeAsset_1(address) := TMP_96(address)
Function name: calculateOutGivenIn
asgn

Name: TMP_96 Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeAsset Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeAsset

Name: nativeAsset Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_62(address) -> path_1 (-> [])[0]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_62

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_62(address) -> path_1 (-> [])[0]
XXXXX
REF_63(address) -> path_1 (-> [])[1]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_63

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_63(address) -> path_1 (-> [])[1]
XXXXX
TMP_97(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_23(IVaderPoolFactory), function:getPool, arguments:['REF_62', 'REF_63']  
Function name: calculateOutGivenIn
High Call: getPool
func name:getPool
other func name:getPool
TMP_97
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_62
REF_63
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_97

Name: TMP_97 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_24(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_23', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool_1(IVaderPool) := TMP_97(IVaderPool)
Function name: calculateOutGivenIn
asgn

Name: TMP_97 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool

Name: pool Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
REF_69(address) -> path_1 (-> [])[0]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_69

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_69(address) -> path_1 (-> [])[0]
XXXXX
REF_70(address) -> path_1 (-> [])[1]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_70

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_70(address) -> path_1 (-> [])[1]
XXXXX
TMP_101(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_22(IVaderPoolFactory), function:getPool, arguments:['REF_69', 'REF_70']  
Function name: calculateOutGivenIn
High Call: getPool
func name:getPool
other func name:getPool
TMP_101
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_69
REF_70
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_101

Name: TMP_101 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_25(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_15'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool0_1(IVaderPool) := TMP_101(IVaderPool)
Function name: calculateOutGivenIn
asgn

Name: TMP_101 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool0 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool0

Name: pool0 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
REF_72(address) -> path_1 (-> [])[1]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_72

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_72(address) -> path_1 (-> [])[1]
XXXXX
REF_73(address) -> path_1 (-> [])[2]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_73

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_73(address) -> path_1 (-> [])[2]
XXXXX
TMP_102(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_25(IVaderPoolFactory), function:getPool, arguments:['REF_72', 'REF_73']  
Function name: calculateOutGivenIn
High Call: getPool
func name:getPool
other func name:getPool
TMP_102
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_72
REF_73
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool', -1)
----
Type: IVaderPool
IVaderPool
Final Type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_102

Name: TMP_102 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
factory_26(IVaderPoolFactory) := ϕ(['factory_26', 'factory_1', 'factory_24', 'factory_7', 'factory_19', 'factory_13', 'factory_21', 'factory_16', 'factory_10', 'factory_25', 'factory_15'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
pool1_1(IVaderPool) := TMP_102(IVaderPool)
Function name: calculateOutGivenIn
asgn

Name: TMP_102 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef

Name: pool1 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pool1

Name: pool1 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
Finance Type: undef
done.
typecheckig node...
TUPLE_6(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateOutGivenIn
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_6
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
Its the same:
0
0
[i]Type for TUPLE_6

Name: TUPLE_6 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve_1(uint256)= UNPACK TUPLE_6 index: 0 
Function name: calculateOutGivenIn
Reading tuple TUPLE_6 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for nativeReserve

Name: nativeReserve Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve_1(uint256)= UNPACK TUPLE_6 index: 1 
Function name: calculateOutGivenIn
Reading tuple TUPLE_6 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for foreignReserve

Name: foreignReserve Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
REF_65(address) -> path_1 (-> [])[0]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
path
[i]Type for REF_65

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_65(address) -> path_1 (-> [])[0]
XXXXX
TMP_98(bool) = REF_65 == nativeAsset_1
Function name: calculateOutGivenIn
[i]Type for TMP_98

Name: TMP_98 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_98
Condition...
Conidtion: 
TMP_98
TMP_98
typecheckig node...
TMP_100(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: calculateOutGivenIn
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
amountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_154 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_155 Function: None
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amountIn Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_156 Function: None
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_158 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_100

Name: TMP_100 Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_100
RETURN

Name: TMP_100 Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
typecheckig node...
TMP_99(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: calculateOutGivenIn
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
amountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
0

Name: PIC_41 Function: None
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_99 Function: calculateOutGivenIn
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_99

Name: TMP_99 Function: calculateOutGivenIn
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_99
RETURN

Name: TMP_99 Function: calculateOutGivenIn
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TUPLE_7(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateOutGivenIn
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_7
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
Its the same:
0
0
[i]Type for TUPLE_7

Name: TUPLE_7 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve0_1(uint256)= UNPACK TUPLE_7 index: 0 
Function name: calculateOutGivenIn
Reading tuple TUPLE_7 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for nativeReserve0

Name: nativeReserve0 Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve0_1(uint256)= UNPACK TUPLE_7 index: 1 
Function name: calculateOutGivenIn
Reading tuple TUPLE_7 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for foreignReserve0

Name: foreignReserve0 Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
typecheckig node...
TUPLE_8(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateOutGivenIn
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_8
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
Its the same:
0
0
[i]Type for TUPLE_8

Name: TUPLE_8 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeReserve1_1(uint256)= UNPACK TUPLE_8 index: 0 
Function name: calculateOutGivenIn
Reading tuple TUPLE_8 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for nativeReserve1

Name: nativeReserve1 Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignReserve1_1(uint256)= UNPACK TUPLE_8 index: 1 
Function name: calculateOutGivenIn
Reading tuple TUPLE_8 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for foreignReserve1

Name: foreignReserve1 Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_103(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'nativeReserve1_1', 'foreignReserve1_1'] 
Function name: calculateOutGivenIn
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
amountIn_1
nativeReserve1_1
foreignReserve1_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
cur_param: [[1], [-1], 0, None, [], -1]
cur_param: [[2], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
0

Name: PIC_41 Function: None
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_103 Function: calculateOutGivenIn
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_103

Name: TMP_103 Function: calculateOutGivenIn
Num: 2, 1, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_104(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['TMP_103', 'foreignReserve0_1', 'nativeReserve0_1'] 
Function name: calculateOutGivenIn
Library Call: calculateSwap
hlc contract name: VaderMath func_name: calculateSwap
TMP_103
foreignReserve0_1
nativeReserve0_1
High level cal param_cache
Param: 0
    num: [2, 1, 2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[2], [-1], 0, None, [], -1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_160 Function: None
Num: 2, 1, 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2, 1, 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_161 Function: None
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: a Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_162(uint256) = a_1 (c)* a_1
XXXXX
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
denominator_1(uint256) := TMP_143(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_144(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "calculateSwap":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_163 Function: None
Num: 2, 1, 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: calculateSwap
Num: 2, 1, 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2, 1, 2, 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_164 Function: None
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_141 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: TMP_141 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162(uint256) = a_1 (c)* a_1
has variable
[i] TMP_162 cleared
clearing ir...?
RETURN TMP_162
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: a Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_162(uint256) = a_1 (c)* a_1
XXXXX
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pow":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pow

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
denominator_1(uint256) := TMP_143(uint256)
XXXXX
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: numerator Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_144(uint256) = numerator_1 (c)/ denominator_1
XXXXX
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: TMP_144 Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amountOut_1
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "calculateSwap":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: calculateSwap

Name: amountOut Function: calculateSwap
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_104

Name: TMP_104 Function: calculateOutGivenIn
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_104
RETURN

Name: TMP_104 Function: calculateOutGivenIn
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "calculateOutGivenIn":
 New undefined nodes- 4
 Old undefined nodes- 4
Saving return values for: calculateOutGivenIn

Name: TMP_104 Function: calculateOutGivenIn
Num: 2, 1, 2, 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
Mark Iterations TRUE, proceeding anyway
Function name: slitherConstructorConstantVariables
Function Visibility (test): internal
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
IVaderPoolFactory
Final Type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Errors: [<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f88d90>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb0946c0df0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f915b0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f9a730>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f91bb0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb095f91f10>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb0948292b0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fb0946de8e0>]
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True, 'IERC721Metadata': True, 'Address': True, 'Context': True, 'Strings': True, 'ERC165': True, 'IERC165': True, 'Math': True, 'SignedMath': True, 'ProtocolConstants': True, 'VaderRouter': True} Contract name out: IVaderPool
[x] IVaderPool not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True, 'IERC721Metadata': True, 'Address': True, 'Context': True, 'Strings': True, 'ERC165': True, 'IERC165': True, 'Math': True, 'SignedMath': True, 'ProtocolConstants': True, 'VaderRouter': True, 'IVaderPool': True} Contract name out: IVaderPoolFactory
[x] IVaderPoolFactory not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True, 'IERC721Metadata': True, 'Address': True, 'Context': True, 'Strings': True, 'ERC165': True, 'IERC165': True, 'Math': True, 'SignedMath': True, 'ProtocolConstants': True, 'VaderRouter': True, 'IVaderPool': True, 'IVaderPoolFactory': True} Contract name out: IVaderRouter
[x] IVaderRouter not run
Seen contract: {'VaderMath': True, 'BasePool': True, 'GasThrottle': True, 'UQ112x112': True, 'IBasePool': True, 'IAggregator': True, 'IERC20Extended': True, 'Ownable': True, 'ReentrancyGuard': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'ERC721': True, 'IERC721': True, 'IERC721Receiver': True, 'IERC721Metadata': True, 'Address': True, 'Context': True, 'Strings': True, 'ERC165': True, 'IERC165': True, 'Math': True, 'SignedMath': True, 'ProtocolConstants': True, 'VaderRouter': True, 'IVaderPool': True, 'IVaderPoolFactory': True, 'IVaderRouter': True} Contract name out: IVaderReserve
[x] IVaderReserve not run
Function count: 83
UQ112x112
contract name: UQ112x112
WARNING!!!!
UQ112x112_types.txt
Finance File not Found
Type File not found.
[x] UQ112x112 not run
Function count: 83
GasThrottle
IAggregator
ProtocolConstants
contract name: GasThrottle
WARNING!!!!
GasThrottle_types.txt
Finance File not Found
Type File not found.
[x] GasThrottle not run
contract name: IAggregator
WARNING!!!!
IAggregator_types.txt
Finance File not Found
Type File not found.
[x] IAggregator not run
contract name: ProtocolConstants
WARNING!!!!
ProtocolConstants_types.txt
Finance File not Found
Type File not found.
[x] ProtocolConstants not run
Function count: 83
