VaderMath
contract name: VaderMath
WARNING!!!!
VaderMath_types.txt
"VaderMath_types.txt" opened successfully.
[*c], VaderMath



[xf], calculateSlipAdjustment

[xf], calculateLiquidityUnits

[xf], calculateLoss

[xf], calculateSwap

[xf], calculateSwapReverse

[xf], delta

[xf], pow

[xf], root



[t], global, ONE

[t], global, vaderDeposited

[t], global, vaderBalance

[t], global, assetDeposited

[t], global, assetBalance

[t], global, totalPoolUnits





[*] VaderMath run
Checking... calculateLiquidityUnits
[o] Marked
Checking... calculateSlipAdjustment
[o] Marked
Checking... calculateLoss
[o] Marked
Checking... calculateSwap
[o] Marked
Checking... calculateSwapReverse
[o] Marked
Checking... delta
[o] Marked
Checking... pow
[o] Marked
Checking... root
[o] Marked
Checking... slitherConstructorConstantVariables
[x] Not visible 
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: ONE
[*] VaderMath run
Reading Function: calculateLiquidityUnits
wooo
Reading Function: calculateSlipAdjustment
wooo
Reading Function: calculateLoss
wooo
Reading Function: calculateSwap
wooo
Reading Function: calculateSwapReverse
wooo
Reading Function: delta
wooo
Reading Function: pow
wooo
Reading Function: root
wooo
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
BasePool
GasThrottle
UQ112x112
IBasePool
IAggregator
IERC20Extended
VaderMath
Ownable
ReentrancyGuard
IERC20
IERC20Permit
SafeERC20
ERC721
IERC721
IERC721Receiver
IERC721Metadata
Address
Context
Strings
ERC165
IERC165
Math
SignedMath
ProtocolConstants
contract name: BasePool
WARNING!!!!
BasePool_types.txt
"BasePool_types.txt" opened successfully.
[*c], BasePool



[xf], getReserves

[xf], mint

#[xf], swap



[sef], NATIVETOKEN, balanceOf, 1, {c, 1, -1, 0}

{c, 1, -1, 0}
['c', '1', '-1', '0']
[sef], FOREIGNTOKEN, balanceOf, 1, {c, 2, -1, 0}

{c, 2, -1, 0}
['c', '2', '-1', '0']
[sef], UQ112x112, encode, 1, {t, [1], [1], 1}

{t, [1], [1], 1}
['t', '[1]', '[1]', '1']
[sef], UQ112x112, uqdiv, 1, {t, [1], [2], 1}

{t, [1], [2], 1}
['t', '[1]', '[2]', '1']


[t], global, _balances, -1, -1, 0

[t], global, _NOT_ENTERED

[t], global, _owner, -1, -1, 0, OWNER

[t], global, _tokenApprovals

[t], global, _owners, -1, -1, 0

[t], global, _symbol

[t], global, _operatorApprovals

[t], global, foreignAsset, -1, -1, 0, FOREIGNTOKEN

[t], global, nativeAsset, -1, -1, 0, NATIVETOKEN

[t], global, positionId

[t], global, totalSupply

[t], global, positions

[t], global, _ENTERED

[t], global, _status

[t], global, _ONE_YEAR

[t], global, _blockTimestampLast

[t], global, priceForeignCumulativeLast

[t], global, priceNativeCumulativeLast

[t], global, _reserveForeign

[t], global, _reserveNative

[t], global, ONE

[t], global, _name



[t], swap, nativeAmountIn, 1, -1, 0

[t], swap, foreignAmountIn, 2, -1, 0

[t], swap, to, -1, -1, 0, FOREIGNTOKEN

[*] BasePool run
Checking... constructor
[x] No Binary
Checking... getReserves
[x] No Binary
Checking... name
[x] No Binary
Checking... mint
[o] Marked
Checking... _burn
[x] Not visible 
Checking... swap
[x] No Binary
Checking... swap
[o] Marked
Checking... _update
[x] Not visible 
Checking... slitherConstructorConstantVariables
[x] Not visible 
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
[*]Type fetched successfully
State_var: _blockTimestampLast
Finding type for _blockTimestampLast...
uint32
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint32

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: _reserveForeign
Finding type for _reserveForeign...
uint112
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint112

Name: _reserveForeign Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: _reserveNative
Finding type for _reserveNative...
uint112
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint112

Name: _reserveNative Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: _operatorApprovals
Finding type for _operatorApprovals...
mapping(address => mapping(address => bool))
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(address => mapping(address => bool))

Name: _operatorApprovals Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: foreignAsset
Finding type for foreignAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: IERC20
Type type: IERC20
 NO FIELDS

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'NATIVETOKEN')
----
Type: IERC20
Type type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
[*]Type fetched successfully
State_var: positionId
Finding type for positionId...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256

Name: positionId Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: totalSupply
Finding type for totalSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256

Name: totalSupply Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: foreignAsset
State_var: nativeAsset
State_var: positions
Finding type for positions...
mapping(uint256 => IBasePool.Position)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(uint256 => IBasePool.Position)

Name: positions Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: totalSupply
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(address => uint256)

Name: _balances Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: _owner
State_var: _NOT_ENTERED
Finding type for _NOT_ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256

Name: _NOT_ENTERED Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: _balances
State_var: foreignAsset
State_var: nativeAsset
State_var: _blockTimestampLast
State_var: priceForeignCumulativeLast
Finding type for priceForeignCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256

Name: priceForeignCumulativeLast Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: priceNativeCumulativeLast
Finding type for priceNativeCumulativeLast...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256

Name: priceNativeCumulativeLast Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: _balances
State_var: _tokenApprovals
Finding type for _tokenApprovals...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(uint256 => address)

Name: _tokenApprovals Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: _owners
Finding type for _owners...
mapping(uint256 => address)
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: mapping(uint256 => address)

Name: _owners Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: _balances
State_var: _NOT_ENTERED
State_var: _ENTERED
Finding type for _ENTERED...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256

Name: _ENTERED Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: _status
Finding type for _status...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256

Name: _status Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: _tokenApprovals
State_var: _balances
State_var: _owners
State_var: _tokenApprovals
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: _NOT_ENTERED
State_var: _ENTERED
State_var: _status
contract name: GasThrottle
WARNING!!!!
GasThrottle_types.txt
Type File not found.
[x] GasThrottle not run
contract name: UQ112x112
WARNING!!!!
UQ112x112_types.txt
Type File not found.
[x] UQ112x112 not run
contract name: IBasePool
WARNING!!!!
IBasePool_types.txt
Type File not found.
[x] IBasePool not run
contract name: IAggregator
WARNING!!!!
IAggregator_types.txt
Type File not found.
[x] IAggregator not run
contract name: IERC20Extended
WARNING!!!!
IERC20Extended_types.txt
Type File not found.
[x] IERC20Extended not run
contract name: VaderMath
WARNING!!!!
VaderMath_types.txt
"VaderMath_types.txt" opened successfully.
[*c], VaderMath



[xf], calculateSlipAdjustment

[xf], calculateLiquidityUnits

[xf], calculateLoss

[xf], calculateSwap

[xf], calculateSwapReverse

[xf], delta

[xf], pow

[xf], root



[t], global, ONE

[t], global, vaderDeposited

[t], global, vaderBalance

[t], global, assetDeposited

[t], global, assetBalance

[t], global, totalPoolUnits





[*] VaderMath run
Checking... calculateLiquidityUnits
[o] Marked
Checking... calculateSlipAdjustment
[o] Marked
Checking... calculateLoss
[o] Marked
Checking... calculateSwap
[o] Marked
Checking... calculateSwapReverse
[o] Marked
Checking... delta
[o] Marked
Checking... pow
[o] Marked
Checking... root
[o] Marked
Checking... slitherConstructorConstantVariables
[x] Not visible 
State_var: ONE
State_var: ONE
contract name: Ownable
WARNING!!!!
Ownable_types.txt
Type File not found.
[x] Ownable not run
contract name: ReentrancyGuard
WARNING!!!!
ReentrancyGuard_types.txt
Type File not found.
[x] ReentrancyGuard not run
contract name: IERC20
WARNING!!!!
IERC20_types.txt
Type File not found.
[x] IERC20 not run
contract name: IERC20Permit
WARNING!!!!
IERC20Permit_types.txt
Type File not found.
[x] IERC20Permit not run
contract name: SafeERC20
WARNING!!!!
SafeERC20_types.txt
Type File not found.
[x] SafeERC20 not run
contract name: ERC721
WARNING!!!!
ERC721_types.txt
Type File not found.
[x] ERC721 not run
contract name: IERC721
WARNING!!!!
IERC721_types.txt
Type File not found.
[x] IERC721 not run
contract name: IERC721Receiver
WARNING!!!!
IERC721Receiver_types.txt
Type File not found.
[x] IERC721Receiver not run
contract name: IERC721Metadata
WARNING!!!!
IERC721Metadata_types.txt
Type File not found.
[x] IERC721Metadata not run
contract name: Address
WARNING!!!!
Address_types.txt
Type File not found.
[x] Address not run
contract name: Context
WARNING!!!!
Context_types.txt
Type File not found.
[x] Context not run
contract name: Strings
WARNING!!!!
Strings_types.txt
Type File not found.
[x] Strings not run
contract name: ERC165
WARNING!!!!
ERC165_types.txt
Type File not found.
[x] ERC165 not run
contract name: IERC165
WARNING!!!!
IERC165_types.txt
Type File not found.
[x] IERC165 not run
contract name: Math
WARNING!!!!
Math_types.txt
Type File not found.
[x] Math not run
contract name: SignedMath
WARNING!!!!
SignedMath_types.txt
Type File not found.
[x] SignedMath not run
contract name: ProtocolConstants
WARNING!!!!
ProtocolConstants_types.txt
Type File not found.
[x] ProtocolConstants not run
[*] BasePool run
Reading Function: constructor
Function constructor not marked
Reading Function: getReserves
Function getReserves not marked
Reading Function: name
Function name not marked
Reading Function: mint
wooo
Reading Function: _burn
Function _burn not marked
Reading Function: swap
Function name: swap
Function Visibility (test): external
nativeAmountIn
Finding type for nativeAmountIn...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256

Name: nativeAmountIn Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
foreignAmountIn
Finding type for foreignAmountIn...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256

Name: foreignAmountIn Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
to
Finding type for to...
address
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: address

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
[*]Type fetched successfully

Finding type for ...
bytes
SKIP bytes
-100
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [2]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
Param: 3
    num: []
    den: []
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_184(uint256) = INTERNAL_CALL, BasePool.swap(uint256,uint256,address)(nativeAmountIn_1,foreignAmountIn_1,to_1)
has variable
[i] TMP_184 cleared
clearing ir...?
RETURN TMP_184
typecheckig node...
TMP_184(uint256) = INTERNAL_CALL, BasePool.swap(uint256,uint256,address)(nativeAmountIn_1,foreignAmountIn_1,to_1)
Function name: swap
Internal call...
swap
nativeAmountIn
foreignAmountIn
to
Function: swap
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [2]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: swap
Function Visibility: public
clearning node...
clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
has variable
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
has variable
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_0', 'nativeAsset_9'])
has variable
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
has variable
typecheckig node...
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Function name: swap
Phi
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Function name: swap
Phi
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
to_1(address) := ϕ(['to_1'])
Function name: swap
Phi
[i]Type for to

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_0', 'nativeAsset_9'])
Function name: swap
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Function name: swap
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
typecheckig node...
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Internal call...
nonReentrant
Function: nonReentrant
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
typecheckig node...
MODIFIER_CALL, GasThrottle.validateGas()()
Internal call...
validateGas
Function: validateGas
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
has variable
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
has variable
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
has variable
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
has variable
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
typecheckig node...
TMP_185(bool) = nativeAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_186(bool) = foreignAmountIn_1 == 0
Function name: swap
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_187(bool) = TMP_185 && TMP_186
Function name: swap
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_188(bool) = nativeAmountIn_1 == 0
Function name: swap
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_189(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_190(bool) = TMP_188 && TMP_189
Function name: swap
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_191(bool) = TMP_187 || TMP_190
Function name: swap
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
has variable
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
Function name: swap
Internal call...
getReserves
Function: getReserves
ic
Internal cal param_cache
-100
added
xyz
Function name: getReserves
Function Visibility: public
clearning node...
clearing ir...?
_reserveNative_1(uint112) := ϕ(['_reserveNative_2', '_reserveNative_0'])
has variable
clearing ir...?
_reserveForeign_1(uint112) := ϕ(['_reserveForeign_0', '_reserveForeign_2'])
has variable
clearing ir...?
_blockTimestampLast_1(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
has variable
typecheckig node...
_reserveNative_1(uint112) := ϕ(['_reserveNative_2', '_reserveNative_0'])
Function name: getReserves
Phi
[i]Type for _reserveNative

Name: _reserveNative Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
_reserveForeign_1(uint112) := ϕ(['_reserveForeign_0', '_reserveForeign_2'])
Function name: getReserves
Phi
[i]Type for _reserveForeign

Name: _reserveForeign Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
_blockTimestampLast_1(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
Function name: getReserves
Phi
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
reserveNative_1(uint112) := _reserveNative_1(uint112)
has variable
[i] reserveNative cleared
typecheckig node...
reserveNative_1(uint112) := _reserveNative_1(uint112)
Function name: getReserves
asgn

Name: reserveNative Function: getReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for reserveNative

Name: reserveNative Function: getReserves
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
reserveForeign_1(uint112) := _reserveForeign_1(uint112)
has variable
[i] reserveForeign cleared
typecheckig node...
reserveForeign_1(uint112) := _reserveForeign_1(uint112)
Function name: getReserves
asgn

Name: reserveForeign Function: getReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for reserveForeign

Name: reserveForeign Function: getReserves
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
blockTimestampLast_1(uint32) := _blockTimestampLast_1(uint32)
has variable
[i] blockTimestampLast cleared
typecheckig node...
blockTimestampLast_1(uint32) := _blockTimestampLast_1(uint32)
Function name: getReserves
asgn

Name: blockTimestampLast Function: getReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
RETURN reserveNative_1,reserveForeign_1,blockTimestampLast_1
RETURN

Name: reserveNative Function: getReserves
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: reserveForeign Function: getReserves
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: getReserves
___
___
___
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
Function name: swap
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint112
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
Function name: swap
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint112
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
has variable
[i] _nativeAsset cleared
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Function name: swap
asgn

Name: _nativeAsset Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
clearning node...
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
has variable
[i] _foreignAsset cleared
typecheckig node...
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Function name: swap
asgn

Name: _foreignAsset Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
clearning node...
clearing ir...?
TMP_193 = CONVERT this to address
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
has variable
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_193 = CONVERT this to address
Function name: swap
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_194
WIP
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_193
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
nativeBalance_1(uint256) := TMP_194(uint256)
Function name: swap
asgn

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT this to address
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
has variable
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_195 = CONVERT this to address
Function name: swap
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_196
WIP
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_195
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignBalance_1(uint256) := TMP_196(uint256)
Function name: swap
asgn

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
has variable
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
has variable
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
typecheckig node...
TMP_197 = CONVERT _nativeAsset_1 to address
Function name: swap

Name: TMP_197 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
TMP_198(bool) = to_1 != TMP_197
Function name: swap
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_199 = CONVERT _foreignAsset_1 to address
Function name: swap

Name: TMP_199 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
TMP_200(bool) = to_1 != TMP_199
Function name: swap
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_201(bool) = TMP_198 && TMP_200
Function name: swap
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
typecheckig node...
TMP_203(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
CONDITION TMP_203
Condition...
Conidtion: 
TMP_203
TMP_203
clearning node...
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Function name: swap

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 

Name: nativeReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: TMP_215 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Function name: swap
testing lt...
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
has variable
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
has variable
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Function name: swap

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 

Name: foreignReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: TMP_204 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
Function name: swap
testing lt...
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
Function name: swap
testing lt...
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
has variable
[i] nativeAmountOut cleared
typecheckig node...
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: swap
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
foreignAmountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_309(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_309 cleared
clearing ir...?
TMP_310(uint256) = TMP_309 (c)* reserveOut_1
has variable
[i] TMP_310 cleared
clearing ir...?
numerator_1(uint256) := TMP_310(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_309(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...

Name: TMP_309 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_309

Name: TMP_309 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_310(uint256) = TMP_309 (c)* reserveOut_1
Function name: calculateSwap
testing mul...

Name: TMP_310 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_310

Name: TMP_310 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
numerator_1(uint256) := TMP_310(uint256)
Function name: calculateSwap
asgn

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_311(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_311 cleared
clearing ir...?
TMP_312(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_311)
has variable
[i] TMP_312 cleared
clearing ir...?
denominator_1(uint256) := TMP_312(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_311(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_311 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
initlize checks
;;;

Name: amountIn Function: None
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 

Name: reserveIn Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[i]Type for TMP_311

Name: TMP_311 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_312(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_311)
Function name: calculateSwap
Internal call...
pow
TMP_311
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
-100
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_311'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_311'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
TMP_331(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...

Name: TMP_331 Function: pow
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_331

Name: TMP_331 Function: pow
Num: 2, 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
RETURN TMP_331
RETURN

Name: TMP_331 Function: pow
Num: 2, 2
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: pow
___
[i]Type for TMP_312

Name: TMP_312 Function: calculateSwap
Num: 2, 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
denominator_1(uint256) := TMP_312(uint256)
Function name: calculateSwap
asgn

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 2, 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_313(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_313 cleared
clearing ir...?
amountOut_1(uint256) := TMP_313(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_313(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap

Name: TMP_313 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_313

Name: TMP_313 Function: calculateSwap
Num: 
Den: 2
Norm: 0
LF: None
Fields: 
done.
amountOut_1(uint256) := TMP_313(uint256)
Function name: calculateSwap
asgn

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 
Den: 2
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 
Den: 2
Norm: 0
LF: None
Fields: 
Saving return values for: calculateSwap
___
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 
Den: 2
Norm: 0
LF: None
Fields: 
done.
nativeAmountOut_1(uint256) := TMP_209(uint256)
Function name: swap
asgn

Name: nativeAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 2
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Function name: swap
testing lt...
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
has variable
[i] foreignAmountOut cleared
typecheckig node...
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: swap
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
nativeAmountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_309(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_309 cleared
clearing ir...?
TMP_310(uint256) = TMP_309 (c)* reserveOut_1
has variable
[i] TMP_310 cleared
clearing ir...?
numerator_1(uint256) := TMP_310(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_309(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...

Name: TMP_309 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_309

Name: TMP_309 Function: calculateSwap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_310(uint256) = TMP_309 (c)* reserveOut_1
Function name: calculateSwap
testing mul...

Name: TMP_310 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_310

Name: TMP_310 Function: calculateSwap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
numerator_1(uint256) := TMP_310(uint256)
Function name: calculateSwap
asgn

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_311(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_311 cleared
clearing ir...?
TMP_312(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_311)
has variable
[i] TMP_312 cleared
clearing ir...?
denominator_1(uint256) := TMP_312(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_311(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_311 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
initlize checks
;;;

Name: amountIn Function: None
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 

Name: reserveIn Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[i]Type for TMP_311

Name: TMP_311 Function: calculateSwap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_312(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_311)
Function name: calculateSwap
Internal call...
pow
TMP_311
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
0
0
[i]Type for TMP_312

Name: TMP_312 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
denominator_1(uint256) := TMP_312(uint256)
Function name: calculateSwap
asgn

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 2, 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_313(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_313 cleared
clearing ir...?
amountOut_1(uint256) := TMP_313(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_313(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap

Name: TMP_313 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_313

Name: TMP_313 Function: calculateSwap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
done.
amountOut_1(uint256) := TMP_313(uint256)
Function name: calculateSwap
asgn

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
Saving return values for: calculateSwap
___
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
done.
foreignAmountOut_1(uint256) := TMP_220(uint256)
Function name: swap
asgn

Name: foreignAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
has variable
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
has variable
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_210(bool) = nativeAmountOut_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Function name: swap
testing lt...
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_212(bool) = TMP_210 && TMP_211
Function name: swap
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
has variable
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_221(bool) = foreignAmountOut_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Function name: swap
testing lt...
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_223(bool) = TMP_221 && TMP_222
Function name: swap
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
has variable
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
has variable
[i] foreignAmountOut cleared
typecheckig node...
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
Function name: swap
Phi
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 2
Norm: 0
LF: None
Fields: 
done.
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
Function name: swap
Phi
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_226 = CONVERT this to address
has variable
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
has variable
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_226 = CONVERT this to address
Function name: swap
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_227
WIP
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_226
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
nativeBalance_2(uint256) := TMP_227(uint256)
Function name: swap
asgn

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
TMP_228 = CONVERT this to address
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
has variable
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_228 = CONVERT this to address
Function name: swap
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_229
WIP
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_228
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignBalance_2(uint256) := TMP_229(uint256)
Function name: swap
asgn

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
typecheckig node...
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Internal call...
_update
nativeBalance
foreignBalance
nativeReserve
foreignReserve
Function: _update
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
typecheckig node...
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
clearning node...
clearing ir...?
TMP_234(bool) = nativeAmountOut_2 > 0
has variable
[i] TMP_234 cleared
clearing ir...?
CONDITION TMP_234
typecheckig node...
TMP_234(bool) = nativeAmountOut_2 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_234

Name: TMP_234 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
CONDITION TMP_234
Condition...
Conidtion: 
TMP_234
TMP_234
clearning node...
clearing ir...?
RETURN foreignAmountOut_2
typecheckig node...
RETURN foreignAmountOut_2
RETURN

Name: foreignAmountOut Function: swap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
typecheckig node...
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: 
Den: 2
Norm: 0
LF: None
Fields: 
Saving return values for: swap
___
___
[i]Type for TMP_184

Name: TMP_184 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
RETURN TMP_184
RETURN

Name: TMP_184 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Saving return values for: swap
___
Reading Function: swap
Function name: swap
Function Visibility (test): public
nativeAmountIn
Finding type for nativeAmountIn...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256

Name: nativeAmountIn Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
foreignAmountIn
Finding type for foreignAmountIn...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256

Name: foreignAmountIn Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
to
Finding type for to...
address
Check copy_toekn_tuple
(-1, -1, 0, 'FOREIGNTOKEN')
----
Type: address

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
[*]Type fetched successfully
0
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [2]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
has variable
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
has variable
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_0', 'nativeAsset_9'])
has variable
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
has variable
typecheckig node...
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Function name: swap
Phi
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Function name: swap
Phi
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
to_1(address) := ϕ(['to_1'])
Function name: swap
Phi
[i]Type for to

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_0', 'nativeAsset_9'])
Function name: swap
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Function name: swap
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
typecheckig node...
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Internal call...
nonReentrant
Function: nonReentrant
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
typecheckig node...
MODIFIER_CALL, GasThrottle.validateGas()()
Internal call...
validateGas
Function: validateGas
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
has variable
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
has variable
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
has variable
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
has variable
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
typecheckig node...
TMP_185(bool) = nativeAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_186(bool) = foreignAmountIn_1 == 0
Function name: swap
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_187(bool) = TMP_185 && TMP_186
Function name: swap
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_188(bool) = nativeAmountIn_1 == 0
Function name: swap
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_189(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_190(bool) = TMP_188 && TMP_189
Function name: swap
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_191(bool) = TMP_187 || TMP_190
Function name: swap
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
has variable
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
Function name: swap
Internal call...
getReserves
Function: getReserves
ic
Internal cal param_cache
0
0
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
Function name: swap
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint112
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
Function name: swap
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint112
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
has variable
[i] _nativeAsset cleared
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Function name: swap
asgn

Name: _nativeAsset Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
0
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
clearning node...
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
has variable
[i] _foreignAsset cleared
typecheckig node...
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Function name: swap
asgn

Name: _foreignAsset Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
0
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
clearning node...
clearing ir...?
TMP_193 = CONVERT this to address
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
has variable
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_193 = CONVERT this to address
Function name: swap
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_194
WIP
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_193
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
nativeBalance_1(uint256) := TMP_194(uint256)
Function name: swap
asgn

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT this to address
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
has variable
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_195 = CONVERT this to address
Function name: swap
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_196
WIP
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_195
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignBalance_1(uint256) := TMP_196(uint256)
Function name: swap
asgn

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
has variable
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
has variable
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
typecheckig node...
TMP_197 = CONVERT _nativeAsset_1 to address
Function name: swap

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
TMP_198(bool) = to_1 != TMP_197
Function name: swap
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_199 = CONVERT _foreignAsset_1 to address
Function name: swap

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
TMP_200(bool) = to_1 != TMP_199
Function name: swap
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_201(bool) = TMP_198 && TMP_200
Function name: swap
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
typecheckig node...
TMP_203(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
CONDITION TMP_203
Condition...
Conidtion: 
TMP_203
TMP_203
clearning node...
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Function name: swap

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 

Name: nativeReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: TMP_215 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Function name: swap
testing lt...
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
has variable
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
has variable
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Function name: swap

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 

Name: foreignReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: TMP_204 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
Function name: swap
testing lt...
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
Function name: swap
testing lt...
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
has variable
[i] nativeAmountOut cleared
typecheckig node...
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: swap
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
foreignAmountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
0
0
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
nativeAmountOut_1(uint256) := TMP_209(uint256)
Function name: swap
asgn

Name: nativeAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 2
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Function name: swap
testing lt...
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
has variable
[i] foreignAmountOut cleared
typecheckig node...
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: swap
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
nativeAmountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_309(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_309 cleared
clearing ir...?
TMP_310(uint256) = TMP_309 (c)* reserveOut_1
has variable
[i] TMP_310 cleared
clearing ir...?
numerator_1(uint256) := TMP_310(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_309(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...

Name: TMP_309 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_309

Name: TMP_309 Function: calculateSwap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_310(uint256) = TMP_309 (c)* reserveOut_1
Function name: calculateSwap
testing mul...

Name: TMP_310 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_310

Name: TMP_310 Function: calculateSwap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
numerator_1(uint256) := TMP_310(uint256)
Function name: calculateSwap
asgn

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_311(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_311 cleared
clearing ir...?
TMP_312(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_311)
has variable
[i] TMP_312 cleared
clearing ir...?
denominator_1(uint256) := TMP_312(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_311(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_311 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
initlize checks
;;;

Name: amountIn Function: None
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 

Name: reserveIn Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[i]Type for TMP_311

Name: TMP_311 Function: calculateSwap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_312(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_311)
Function name: calculateSwap
Internal call...
pow
TMP_311
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
0
0
[i]Type for TMP_312

Name: TMP_312 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
denominator_1(uint256) := TMP_312(uint256)
Function name: calculateSwap
asgn

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 2, 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_313(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_313 cleared
clearing ir...?
amountOut_1(uint256) := TMP_313(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_313(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap

Name: TMP_313 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_313

Name: TMP_313 Function: calculateSwap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
done.
amountOut_1(uint256) := TMP_313(uint256)
Function name: calculateSwap
asgn

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
Saving return values for: calculateSwap
___
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
done.
foreignAmountOut_1(uint256) := TMP_220(uint256)
Function name: swap
asgn

Name: foreignAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
has variable
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
has variable
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_210(bool) = nativeAmountOut_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Function name: swap
testing lt...
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_212(bool) = TMP_210 && TMP_211
Function name: swap
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
has variable
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_221(bool) = foreignAmountOut_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Function name: swap
testing lt...
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_223(bool) = TMP_221 && TMP_222
Function name: swap
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
has variable
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
has variable
[i] foreignAmountOut cleared
typecheckig node...
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
Function name: swap
Phi
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 
Den: 2
Norm: 0
LF: None
Fields: 
done.
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
Function name: swap
Phi
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_226 = CONVERT this to address
has variable
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
has variable
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_226 = CONVERT this to address
Function name: swap
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_227
WIP
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_226
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
nativeBalance_2(uint256) := TMP_227(uint256)
Function name: swap
asgn

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
TMP_228 = CONVERT this to address
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
has variable
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_228 = CONVERT this to address
Function name: swap
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_229
WIP
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_228
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignBalance_2(uint256) := TMP_229(uint256)
Function name: swap
asgn

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
typecheckig node...
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Internal call...
_update
nativeBalance
foreignBalance
nativeReserve
foreignReserve
Function: _update
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
typecheckig node...
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
clearning node...
clearing ir...?
TMP_234(bool) = nativeAmountOut_2 > 0
has variable
[i] TMP_234 cleared
clearing ir...?
CONDITION TMP_234
typecheckig node...
TMP_234(bool) = nativeAmountOut_2 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_234

Name: TMP_234 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
CONDITION TMP_234
Condition...
Conidtion: 
TMP_234
TMP_234
clearning node...
clearing ir...?
RETURN foreignAmountOut_2
typecheckig node...
RETURN foreignAmountOut_2
RETURN

Name: foreignAmountOut Function: swap
Num: 1
Den: 2, 2
Norm: 0
LF: None
Fields: 
clearning node...
clearing ir...?
RETURN nativeAmountOut_2
typecheckig node...
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: 
Den: 2
Norm: 0
LF: None
Fields: 
Saving return values for: swap
___
___
Reading Function: _update
Function _update not marked
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
[x] GasThrottle not run
[x] UQ112x112 not run
[x] IBasePool not run
[x] IAggregator not run
[x] IERC20Extended not run
[*] VaderMath run
Reading Function: calculateLiquidityUnits
wooo
Reading Function: calculateSlipAdjustment
wooo
Reading Function: calculateLoss
wooo
Reading Function: calculateSwap
wooo
Reading Function: calculateSwapReverse
wooo
Reading Function: delta
wooo
Reading Function: pow
wooo
Reading Function: root
wooo
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
[x] Ownable not run
[x] ReentrancyGuard not run
[x] IERC20 not run
[x] IERC20Permit not run
[x] SafeERC20 not run
[x] ERC721 not run
[x] IERC721 not run
[x] IERC721Receiver not run
[x] IERC721Metadata not run
[x] Address not run
[x] Context not run
[x] Strings not run
[x] ERC165 not run
[x] IERC165 not run
[x] Math not run
[x] SignedMath not run
[x] ProtocolConstants not run
VaderRouter
IBasePool
IVaderPool
IVaderPoolFactory
IVaderRouter
IVaderReserve
VaderMath
Ownable
IERC20
IERC20Permit
SafeERC20
IERC721
Address
Context
IERC165
ProtocolConstants
contract name: VaderRouter
WARNING!!!!
VaderRouter_types.txt
"VaderRouter_types.txt" opened successfully.
[*c], VaderRouter



[xf], constructor

[xf], removeLiquidity

[xf], swapTokensForExactTokens

[xf], initialize

[xf], calculateInGivenOut

calculateOutGivenIn



[sef], FACTORY, nativeAsset, 1, {c, 1, -1, 0}

{c, 1, -1, 0}
['c', '1', '-1', '0']
[sef], FACTORY, getPool, 1, {c, -1, -1, 0, BasePool}

{c, -1, -1, 0, BasePool}
['c', '-1', '-1', '0', 'BasePool']


[t], global, factory, -1, -1, 0, FACTORY

[t], global, reserve, -1, -1, 0, RESERVE

[t], global, _ZERO_ADDRESS, -1, -1, 0, ZERO

[t], global, _owner, -1, -1, 0, OWNER

[t], global, _ONE_YEAR



[t], swapExactTokensForTokens, amountIn, 2, -1, 0

[t], swapExactTokensForTokens, amountOutMin, 1, -1, 0

[t], swapExactTokensForTokens, path

[t], swapExactTokensForTokens, to, -1, -1, 0, NATIVETOKEN

[t], swapExactTokensForTokens, deadline



[t], calculateOutGivenIn, amountIn, 2, -1, 0

[t], calculateOutGivenIn, path

[*] VaderRouter run
Checking... constructor
[o] Marked
Checking... addLiquidity
[x] No Binary
Checking... addLiquidity
[x] No Binary
Checking... removeLiquidity
[o] Marked
Checking... swapExactTokensForTokens
[o] Marked
Checking... swapTokensForExactTokens
[o] Marked
Checking... initialize
[o] Marked
Checking... _swap
[x] Not visible 
Checking... _addLiquidity
[x] Not visible 
Checking... calculateInGivenOut
[o] Marked
Checking... calculateOutGivenIn
[o] Marked
Checking... slitherConstructorConstantVariables
[x] Not visible 
State_var: factory
Finding type for factory...
IVaderPoolFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IVaderPoolFactory
Type type: IVaderPoolFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
[*]Type fetched successfully
State_var: factory
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ZERO')
----
Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: 0
LF: ZERO
Fields: 
[*]Type fetched successfully
State_var: factory
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 0, 'OWNER')
----
Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: 0
LF: OWNER
Fields: 
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: factory
State_var: _owner
State_var: _ZERO_ADDRESS
State_var: factory
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'RESERVE')
----
Type: IVaderReserve
Type type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: RESERVE
Fields: 
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
contract name: IBasePool
WARNING!!!!
IBasePool_types.txt
Type File not found.
[x] IBasePool not run
contract name: IVaderPool
WARNING!!!!
IVaderPool_types.txt
Type File not found.
[x] IVaderPool not run
contract name: IVaderPoolFactory
WARNING!!!!
IVaderPoolFactory_types.txt
Type File not found.
[x] IVaderPoolFactory not run
contract name: IVaderRouter
WARNING!!!!
IVaderRouter_types.txt
Type File not found.
[x] IVaderRouter not run
contract name: IVaderReserve
WARNING!!!!
IVaderReserve_types.txt
Type File not found.
[x] IVaderReserve not run
contract name: VaderMath
WARNING!!!!
VaderMath_types.txt
"VaderMath_types.txt" opened successfully.
[*c], VaderMath



[xf], calculateSlipAdjustment

[xf], calculateLiquidityUnits

[xf], calculateLoss

[xf], calculateSwap

[xf], calculateSwapReverse

[xf], delta

[xf], pow

[xf], root



[t], global, ONE

[t], global, vaderDeposited

[t], global, vaderBalance

[t], global, assetDeposited

[t], global, assetBalance

[t], global, totalPoolUnits





[*] VaderMath run
Checking... calculateLiquidityUnits
[o] Marked
Checking... calculateSlipAdjustment
[o] Marked
Checking... calculateLoss
[o] Marked
Checking... calculateSwap
[o] Marked
Checking... calculateSwapReverse
[o] Marked
Checking... delta
[o] Marked
Checking... pow
[o] Marked
Checking... root
[o] Marked
Checking... slitherConstructorConstantVariables
[x] Not visible 
State_var: ONE
Finding type for ONE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256

Name: ONE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
State_var: ONE
contract name: Ownable
WARNING!!!!
Ownable_types.txt
Type File not found.
[x] Ownable not run
contract name: IERC20
WARNING!!!!
IERC20_types.txt
Type File not found.
[x] IERC20 not run
contract name: IERC20Permit
WARNING!!!!
IERC20Permit_types.txt
Type File not found.
[x] IERC20Permit not run
contract name: SafeERC20
WARNING!!!!
SafeERC20_types.txt
Type File not found.
[x] SafeERC20 not run
contract name: IERC721
WARNING!!!!
IERC721_types.txt
Type File not found.
[x] IERC721 not run
contract name: Address
WARNING!!!!
Address_types.txt
Type File not found.
[x] Address not run
contract name: Context
WARNING!!!!
Context_types.txt
Type File not found.
[x] Context not run
contract name: IERC165
WARNING!!!!
IERC165_types.txt
Type File not found.
[x] IERC165 not run
contract name: ProtocolConstants
WARNING!!!!
ProtocolConstants_types.txt
Type File not found.
[x] ProtocolConstants not run
[*] VaderRouter run
Reading Function: constructor
wooo
Reading Function: addLiquidity
Function addLiquidity not marked
Reading Function: addLiquidity
Function addLiquidity not marked
Reading Function: removeLiquidity
wooo
Reading Function: swapExactTokensForTokens
Function name: swapExactTokensForTokens
Function Visibility (test): external
amountIn
Finding type for amountIn...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256

Name: amountIn Function: swapExactTokensForTokens
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
amountOutMin
Finding type for amountOutMin...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256

Name: amountOutMin Function: swapExactTokensForTokens
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
path
Finding type for path...
address[]
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: address[]
New type: address

Name: path Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
to
Finding type for to...
address
Check copy_toekn_tuple
(-1, -1, 0, 'NATIVETOKEN')
----
Type: address

Name: to Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
[*]Type fetched successfully
deadline
Finding type for deadline...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: uint256

Name: deadline Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
-100
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
Param: 3
    num: [-1]
    den: [-1]
Param: 4
    num: [-1]
    den: [-1]
clearning node...
typecheckig node...
clearning node...
clearing ir...?
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
typecheckig node...
MODIFIER_CALL, VaderRouter.ensure(uint256)(deadline_1)
Internal call...
ensure
deadline
Function: ensure
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
TMP_37(uint256) = INTERNAL_CALL, VaderRouter._swap(uint256,address[],address)(amountIn_1,path_1 (-> []),to_1)
has variable
[i] TMP_37 cleared
clearing ir...?
amountOut_1(uint256) := TMP_37(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_37(uint256) = INTERNAL_CALL, VaderRouter._swap(uint256,address[],address)(amountIn_1,path_1 (-> []),to_1)
Function name: swapExactTokensForTokens
Internal call...
_swap
amountIn
path
to
Function: _swap
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: _swap
Function Visibility: private
clearning node...
clearing ir...?
amountIn_1(uint256) := ϕ(['amountIn_1', 'amountIn_1'])
has variable
[i] amountIn cleared
clearing ir...?
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])', 'path_1 (-> [])'])
has variable
[i] path cleared
clearing ir...?
to_1(address) := ϕ(['to_1', 'to_1'])
has variable
[i] to cleared
clearing ir...?
factory_8(IVaderPoolFactory) := ϕ(['factory_0', 'factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
has variable
typecheckig node...
amountIn_1(uint256) := ϕ(['amountIn_1', 'amountIn_1'])
Function name: _swap
Phi
[i]Type for amountIn

Name: amountIn Function: _swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
path_1 (-> [])(address[]) := ϕ(['path_1 (-> [])', 'path_1 (-> [])'])
Function name: _swap
Phi
[i]Type for path

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
to_1(address) := ϕ(['to_1', 'to_1'])
Function name: _swap
Phi
[i]Type for to

Name: to Function: _swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
factory_8(IVaderPoolFactory) := ϕ(['factory_0', 'factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
done.
clearning node...
clearing ir...?
REF_8 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_51(bool) = REF_8 == 3
has variable
[i] TMP_51 cleared
clearing ir...?
CONDITION TMP_51
typecheckig node...
REF_8 -> LENGTH path_1 (-> [])
[i]Type for REF_8

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_51(bool) = REF_8 == 3
Function name: _swap
[i]Type for TMP_51

Name: TMP_51 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
CONDITION TMP_51
Condition...
Conidtion: 
TMP_51
TMP_51
clearning node...
clearing ir...?
REF_9(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_10(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_52(bool) = REF_9 != REF_10
has variable
[i] TMP_52 cleared
clearing ir...?
REF_11(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_53(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
has variable
[i] TMP_53 cleared
clearing ir...?
factory_9(IVaderPoolFactory) := ϕ(['factory_8', 'factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
has variable
clearing ir...?
TMP_54(bool) = REF_11 == TMP_53
has variable
[i] TMP_54 cleared
clearing ir...?
TMP_55(bool) = TMP_52 && TMP_54
has variable
[i] TMP_55 cleared
clearing ir...?
REF_13(address) -> path_1 (-> [])[2]
has variable
clearing ir...?
REF_14(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_56(bool) = REF_13 != REF_14
has variable
[i] TMP_56 cleared
clearing ir...?
TMP_57(bool) = TMP_55 && TMP_56
has variable
[i] TMP_57 cleared
clearing ir...?
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,VaderRouter::_swap: Incorrect Path)
typecheckig node...
REF_9(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
REF_10(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
TMP_52(bool) = REF_9 != REF_10
Function name: _swap
[i]Type for TMP_52

Name: TMP_52 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
REF_11(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
TMP_53(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: _swap
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_53
WIP
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: address
COPIED
[i]Type for TMP_53

Name: TMP_53 Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
factory_9(IVaderPoolFactory) := ϕ(['factory_8', 'factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
done.
TMP_54(bool) = REF_11 == TMP_53
Function name: _swap
[i]Type for TMP_54

Name: TMP_54 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_55(bool) = TMP_52 && TMP_54
Function name: _swap
[i]Type for TMP_55

Name: TMP_55 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
REF_13(address) -> path_1 (-> [])[2]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
REF_14(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
TMP_56(bool) = REF_13 != REF_14
Function name: _swap
[i]Type for TMP_56

Name: TMP_56 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_57(bool) = TMP_55 && TMP_56
Function name: _swap
[i]Type for TMP_57

Name: TMP_57 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
REF_25 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_67(bool) = REF_25 == 2
has variable
[i] TMP_67 cleared
clearing ir...?
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,VaderRouter::_swap: Incorrect Path Length)
typecheckig node...
REF_25 -> LENGTH path_1 (-> [])
[i]Type for REF_25

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_67(bool) = REF_25 == 2
Function name: _swap
[i]Type for TMP_67

Name: TMP_67 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,VaderRouter::_swap: Incorrect Path Length)
[i]Type for TMP_68

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_69(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
has variable
[i] TMP_69 cleared
clearing ir...?
factory_12(IVaderPoolFactory) := ϕ(['factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
has variable
clearing ir...?
nativeAsset_1(address) := TMP_69(address)
has variable
[i] nativeAsset cleared
typecheckig node...
TMP_69(address) = HIGH_LEVEL_CALL, dest:factory_8(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: _swap
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_69
WIP
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: address
COPIED
[i]Type for TMP_69

Name: TMP_69 Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
factory_12(IVaderPoolFactory) := ϕ(['factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
done.
nativeAsset_1(address) := TMP_69(address)
Function name: _swap
asgn

Name: nativeAsset Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeAsset

Name: nativeAsset Function: _swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
REF_16(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_17(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_59(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_9(IVaderPoolFactory), function:getPool, arguments:['REF_16', 'REF_17']  
has variable
[i] TMP_59 cleared
clearing ir...?
factory_10(IVaderPoolFactory) := ϕ(['factory_21', 'factory_26', 'factory_16', 'factory_9', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
has variable
clearing ir...?
pool0_1(IVaderPool) := TMP_59(IVaderPool)
has variable
[i] pool0 cleared
typecheckig node...
REF_16(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
REF_17(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
TMP_59(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_9(IVaderPoolFactory), function:getPool, arguments:['REF_16', 'REF_17']  
Function name: _swap
High Call: getPool
func name:getPool
other func name:getPool
TMP_59
WIP
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_16
REF_17
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool')
----
Type: IVaderPool
Type type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_59

Name: TMP_59 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
factory_10(IVaderPoolFactory) := ϕ(['factory_21', 'factory_26', 'factory_16', 'factory_9', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
done.
pool0_1(IVaderPool) := TMP_59(IVaderPool)
Function name: _swap
asgn

Name: pool0 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for pool0

Name: pool0 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
clearning node...
clearing ir...?
REF_27(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_28(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_70(bool) = REF_27 != REF_28
has variable
[i] TMP_70 cleared
clearing ir...?
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,VaderRouter::_swap: Incorrect Path)
typecheckig node...
REF_27(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
REF_28(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
TMP_70(bool) = REF_27 != REF_28
Function name: _swap
[i]Type for TMP_70

Name: TMP_70 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_71

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
REF_19(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
REF_20(address) -> path_1 (-> [])[2]
has variable
clearing ir...?
TMP_60(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_10(IVaderPoolFactory), function:getPool, arguments:['REF_19', 'REF_20']  
has variable
[i] TMP_60 cleared
clearing ir...?
factory_11(IVaderPoolFactory) := ϕ(['factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_10', 'factory_19'])
has variable
clearing ir...?
pool1_1(IVaderPool) := TMP_60(IVaderPool)
has variable
[i] pool1 cleared
typecheckig node...
REF_19(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
REF_20(address) -> path_1 (-> [])[2]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
TMP_60(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_10(IVaderPoolFactory), function:getPool, arguments:['REF_19', 'REF_20']  
Function name: _swap
High Call: getPool
func name:getPool
other func name:getPool
TMP_60
WIP
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_19
REF_20
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool')
----
Type: IVaderPool
Type type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_60

Name: TMP_60 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
factory_11(IVaderPoolFactory) := ϕ(['factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_10', 'factory_19'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
done.
pool1_1(IVaderPool) := TMP_60(IVaderPool)
Function name: _swap
asgn

Name: pool1 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for pool1

Name: pool1 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
clearning node...
clearing ir...?
REF_30(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_31(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_72(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_12(IVaderPoolFactory), function:getPool, arguments:['REF_30', 'REF_31']  
has variable
[i] TMP_72 cleared
clearing ir...?
factory_13(IVaderPoolFactory) := ϕ(['factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_12', 'factory_24', 'factory_19'])
has variable
clearing ir...?
pool_1(IVaderPool) := TMP_72(IVaderPool)
has variable
[i] pool cleared
typecheckig node...
REF_30(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
REF_31(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
TMP_72(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_12(IVaderPoolFactory), function:getPool, arguments:['REF_30', 'REF_31']  
Function name: _swap
High Call: getPool
func name:getPool
other func name:getPool
TMP_72
WIP
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_30
REF_31
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool')
----
Type: IVaderPool
Type type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_72

Name: TMP_72 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
factory_13(IVaderPoolFactory) := ϕ(['factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_12', 'factory_24', 'factory_19'])
Function name: _swap
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
done.
pool_1(IVaderPool) := TMP_72(IVaderPool)
Function name: _swap
asgn

Name: pool Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for pool

Name: pool Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
clearning node...
clearing ir...?
REF_21(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_61 = CONVERT REF_21 to IERC20
has variable
[i] TMP_61 cleared
clearing ir...?
TMP_62 = CONVERT pool0_1 to address
has variable
[i] TMP_62 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_61', 'msg.sender', 'TMP_62', 'amountIn_1'] 
typecheckig node...
REF_21(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
TMP_61 = CONVERT REF_21 to IERC20
Function name: _swap

Name: TMP_61 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
[i]Type for TMP_61

Name: TMP_61 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
done.
TMP_62 = CONVERT pool0_1 to address
Function name: _swap

Name: TMP_62 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
[i]Type for TMP_62

Name: TMP_62 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_61', 'msg.sender', 'TMP_62', 'amountIn_1'] 
Library Call: safeTransferFrom
done.
clearning node...
clearing ir...?
REF_32(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_73 = CONVERT REF_32 to IERC20
has variable
[i] TMP_73 cleared
clearing ir...?
TMP_74 = CONVERT pool_1 to address
has variable
[i] TMP_74 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_73', 'msg.sender', 'TMP_74', 'amountIn_1'] 
typecheckig node...
REF_32(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
TMP_73 = CONVERT REF_32 to IERC20
Function name: _swap

Name: TMP_73 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
[i]Type for TMP_73

Name: TMP_73 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
done.
TMP_74 = CONVERT pool_1 to address
Function name: _swap

Name: TMP_74 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
[i]Type for TMP_74

Name: TMP_74 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['TMP_73', 'msg.sender', 'TMP_74', 'amountIn_1'] 
Library Call: safeTransferFrom
done.
clearning node...
clearing ir...?
REF_34(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_76(bool) = REF_34 == nativeAsset_1
has variable
[i] TMP_76 cleared
clearing ir...?
CONDITION TMP_76
typecheckig node...
REF_34(address) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
TMP_76(bool) = REF_34 == nativeAsset_1
Function name: _swap
[i]Type for TMP_76

Name: TMP_76 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
CONDITION TMP_76
Condition...
Conidtion: 
TMP_76
TMP_76
clearning node...
clearing ir...?
REF_36(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_78(bool) = REF_36 == nativeAsset_1
has variable
[i] TMP_78 cleared
clearing ir...?
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,VaderRouter::_swap: Incorrect Path)
typecheckig node...
REF_36(address) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
TMP_78(bool) = REF_36 == nativeAsset_1
Function name: _swap
[i]Type for TMP_78

Name: TMP_78 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,VaderRouter::_swap: Incorrect Path)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'to_1']  
has variable
[i] TMP_77 cleared
clearing ir...?
RETURN TMP_77
typecheckig node...
TMP_77(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_77
WIP
hlc contract name: BasePool func_name: swap
amountIn_1
0
to_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: swap
Function Visibility: public
clearning node...
clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
has variable
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
has variable
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_0', 'nativeAsset_9'])
has variable
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
has variable
typecheckig node...
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Function name: swap
Phi
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Function name: swap
Phi
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
to_1(address) := ϕ(['to_1'])
Function name: swap
Phi
[i]Type for to

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_0', 'nativeAsset_9'])
Function name: swap
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Function name: swap
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
typecheckig node...
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Internal call...
nonReentrant
Function: nonReentrant
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
typecheckig node...
MODIFIER_CALL, GasThrottle.validateGas()()
Internal call...
validateGas
Function: validateGas
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
has variable
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
has variable
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
has variable
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
has variable
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
typecheckig node...
TMP_185(bool) = nativeAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_186(bool) = foreignAmountIn_1 == 0
Function name: swap
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_187(bool) = TMP_185 && TMP_186
Function name: swap
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_188(bool) = nativeAmountIn_1 == 0
Function name: swap
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_189(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_190(bool) = TMP_188 && TMP_189
Function name: swap
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_191(bool) = TMP_187 || TMP_190
Function name: swap
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
has variable
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
Function name: swap
Internal call...
getReserves
Function: getReserves
ic
Internal cal param_cache
0
0
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
Function name: swap
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint112
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
Function name: swap
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint112
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
has variable
[i] _nativeAsset cleared
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Function name: swap
asgn

Name: _nativeAsset Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
0
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
clearning node...
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
has variable
[i] _foreignAsset cleared
typecheckig node...
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Function name: swap
asgn

Name: _foreignAsset Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
0
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
clearning node...
clearing ir...?
TMP_193 = CONVERT this to address
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
has variable
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_193 = CONVERT this to address
Function name: swap
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: -1
Den: -1
Norm: 0
LF: VaderRouter
Fields: 
done.
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_194
WIP
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_193
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
nativeBalance_1(uint256) := TMP_194(uint256)
Function name: swap
asgn

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT this to address
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
has variable
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_195 = CONVERT this to address
Function name: swap
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: -1
Den: -1
Norm: 0
LF: VaderRouter
Fields: 
done.
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_196
WIP
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_195
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignBalance_1(uint256) := TMP_196(uint256)
Function name: swap
asgn

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
has variable
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
has variable
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
typecheckig node...
TMP_197 = CONVERT _nativeAsset_1 to address
Function name: swap

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
TMP_198(bool) = to_1 != TMP_197
Function name: swap
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_199 = CONVERT _foreignAsset_1 to address
Function name: swap

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
TMP_200(bool) = to_1 != TMP_199
Function name: swap
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_201(bool) = TMP_198 && TMP_200
Function name: swap
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
typecheckig node...
TMP_203(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
CONDITION TMP_203
Condition...
Conidtion: 
TMP_203
TMP_203
clearning node...
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Function name: swap

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 

Name: nativeReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: TMP_215 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Function name: swap
testing lt...
Error with TMP_216 in function swap
Error with: TMP_216 in function swap
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
has variable
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
has variable
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Function name: swap

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 

Name: foreignReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: TMP_204 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
Function name: swap
testing lt...
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
Function name: swap
testing lt...
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
has variable
[i] nativeAmountOut cleared
typecheckig node...
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: swap
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
foreignAmountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
initlize checks
;;;

Name: amountIn Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: reserveIn Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: pow
Function Visibility: public
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_142'])
has variable
[i] a cleared
typecheckig node...
a_1(uint256) := ϕ(['TMP_142'])
Function name: pow
Phi
[i]Type for a

Name: a Function: pow
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
TMP_162(uint256) = a_1 (c)* a_1
Function name: pow
testing mul...

Name: TMP_162 Function: pow
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_162

Name: TMP_162 Function: pow
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
RETURN TMP_162
RETURN

Name: TMP_162 Function: pow
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: pow
___
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: calculateSwap
___
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
nativeAmountOut_1(uint256) := TMP_209(uint256)
Function name: swap
asgn

Name: nativeAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Function name: swap
testing lt...
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
has variable
[i] foreignAmountOut cleared
typecheckig node...
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: swap
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
nativeAmountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
initlize checks
;;;

Name: amountIn Function: None
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 

Name: reserveIn Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
0
0
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: calculateSwap
___
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignAmountOut_1(uint256) := TMP_220(uint256)
Function name: swap
asgn

Name: foreignAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
has variable
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
has variable
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_210(bool) = nativeAmountOut_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Function name: swap
testing lt...
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_212(bool) = TMP_210 && TMP_211
Function name: swap
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
has variable
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_221(bool) = foreignAmountOut_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Function name: swap
testing lt...
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_223(bool) = TMP_221 && TMP_222
Function name: swap
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
has variable
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
has variable
[i] foreignAmountOut cleared
typecheckig node...
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
Function name: swap
Phi
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
Function name: swap
Phi
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_226 = CONVERT this to address
has variable
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
has variable
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_226 = CONVERT this to address
Function name: swap
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: -1
Den: -1
Norm: 0
LF: VaderRouter
Fields: 
done.
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_227
WIP
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_226
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
nativeBalance_2(uint256) := TMP_227(uint256)
Function name: swap
asgn

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
TMP_228 = CONVERT this to address
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
has variable
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_228 = CONVERT this to address
Function name: swap
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: -1
Den: -1
Norm: 0
LF: VaderRouter
Fields: 
done.
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_229
WIP
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_228
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignBalance_2(uint256) := TMP_229(uint256)
Function name: swap
asgn

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
typecheckig node...
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Internal call...
_update
nativeBalance
foreignBalance
nativeReserve
foreignReserve
Function: _update
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
typecheckig node...
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
clearning node...
clearing ir...?
TMP_234(bool) = nativeAmountOut_2 > 0
has variable
[i] TMP_234 cleared
clearing ir...?
CONDITION TMP_234
typecheckig node...
TMP_234(bool) = nativeAmountOut_2 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_234

Name: TMP_234 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
CONDITION TMP_234
Condition...
Conidtion: 
TMP_234
TMP_234
clearning node...
clearing ir...?
RETURN foreignAmountOut_2
typecheckig node...
RETURN foreignAmountOut_2
RETURN

Name: foreignAmountOut Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
typecheckig node...
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: swap
___
___
[i]Type for TMP_77

Name: TMP_77 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
RETURN TMP_77
RETURN

Name: TMP_77 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
clearning node...
clearing ir...?
TMP_80(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['0', 'amountIn_1', 'to_1']  
has variable
[i] TMP_80 cleared
clearing ir...?
RETURN TMP_80
typecheckig node...
TMP_80(uint256) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:swap, arguments:['0', 'amountIn_1', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_80
WIP
hlc contract name: BasePool func_name: swap
0
amountIn_1
to_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [2]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: swap
Function Visibility: public
clearning node...
clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
has variable
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
has variable
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_0', 'nativeAsset_9'])
has variable
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
has variable
typecheckig node...
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Function name: swap
Phi
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Function name: swap
Phi
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
to_1(address) := ϕ(['to_1'])
Function name: swap
Phi
[i]Type for to

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_0', 'nativeAsset_9'])
Function name: swap
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Function name: swap
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
typecheckig node...
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Internal call...
nonReentrant
Function: nonReentrant
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
typecheckig node...
MODIFIER_CALL, GasThrottle.validateGas()()
Internal call...
validateGas
Function: validateGas
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
has variable
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
has variable
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
has variable
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
has variable
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
typecheckig node...
TMP_185(bool) = nativeAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_186(bool) = foreignAmountIn_1 == 0
Function name: swap
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_187(bool) = TMP_185 && TMP_186
Function name: swap
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_188(bool) = nativeAmountIn_1 == 0
Function name: swap
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_189(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_190(bool) = TMP_188 && TMP_189
Function name: swap
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_191(bool) = TMP_187 || TMP_190
Function name: swap
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
has variable
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
Function name: swap
Internal call...
getReserves
Function: getReserves
ic
Internal cal param_cache
0
0
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
Function name: swap
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint112
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
Function name: swap
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint112
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
has variable
[i] _nativeAsset cleared
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Function name: swap
asgn

Name: _nativeAsset Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
0
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
clearning node...
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
has variable
[i] _foreignAsset cleared
typecheckig node...
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Function name: swap
asgn

Name: _foreignAsset Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
0
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
clearning node...
clearing ir...?
TMP_193 = CONVERT this to address
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
has variable
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_193 = CONVERT this to address
Function name: swap
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: -1
Den: -1
Norm: 0
LF: VaderRouter
Fields: 
done.
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_194
WIP
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_193
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
nativeBalance_1(uint256) := TMP_194(uint256)
Function name: swap
asgn

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT this to address
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
has variable
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_195 = CONVERT this to address
Function name: swap
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: -1
Den: -1
Norm: 0
LF: VaderRouter
Fields: 
done.
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_196
WIP
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_195
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignBalance_1(uint256) := TMP_196(uint256)
Function name: swap
asgn

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
has variable
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
has variable
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
typecheckig node...
TMP_197 = CONVERT _nativeAsset_1 to address
Function name: swap

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
TMP_198(bool) = to_1 != TMP_197
Function name: swap
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_199 = CONVERT _foreignAsset_1 to address
Function name: swap

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
TMP_200(bool) = to_1 != TMP_199
Function name: swap
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_201(bool) = TMP_198 && TMP_200
Function name: swap
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
typecheckig node...
TMP_203(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
CONDITION TMP_203
Condition...
Conidtion: 
TMP_203
TMP_203
clearning node...
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Function name: swap

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 

Name: nativeReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: TMP_215 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Function name: swap
testing lt...
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
has variable
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
has variable
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Function name: swap

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 

Name: foreignReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: TMP_204 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
Function name: swap
testing lt...
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
Function name: swap
testing lt...
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
has variable
[i] nativeAmountOut cleared
typecheckig node...
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: swap
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
foreignAmountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
0
0
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
nativeAmountOut_1(uint256) := TMP_209(uint256)
Function name: swap
asgn

Name: nativeAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Function name: swap
testing lt...
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
has variable
[i] foreignAmountOut cleared
typecheckig node...
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: swap
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
nativeAmountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
initlize checks
;;;

Name: amountIn Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: reserveIn Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
0
0
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: calculateSwap
___
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignAmountOut_1(uint256) := TMP_220(uint256)
Function name: swap
asgn

Name: foreignAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
has variable
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
has variable
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_210(bool) = nativeAmountOut_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Function name: swap
testing lt...
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_212(bool) = TMP_210 && TMP_211
Function name: swap
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
has variable
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_221(bool) = foreignAmountOut_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Function name: swap
testing lt...
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_223(bool) = TMP_221 && TMP_222
Function name: swap
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
has variable
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
has variable
[i] foreignAmountOut cleared
typecheckig node...
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
Function name: swap
Phi
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
Function name: swap
Phi
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_226 = CONVERT this to address
has variable
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
has variable
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_226 = CONVERT this to address
Function name: swap
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: -1
Den: -1
Norm: 0
LF: VaderRouter
Fields: 
done.
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_227
WIP
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_226
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
nativeBalance_2(uint256) := TMP_227(uint256)
Function name: swap
asgn

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
TMP_228 = CONVERT this to address
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
has variable
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_228 = CONVERT this to address
Function name: swap
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: -1
Den: -1
Norm: 0
LF: VaderRouter
Fields: 
done.
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_229
WIP
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_228
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignBalance_2(uint256) := TMP_229(uint256)
Function name: swap
asgn

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
typecheckig node...
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Internal call...
_update
nativeBalance
foreignBalance
nativeReserve
foreignReserve
Function: _update
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
typecheckig node...
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
clearning node...
clearing ir...?
TMP_234(bool) = nativeAmountOut_2 > 0
has variable
[i] TMP_234 cleared
clearing ir...?
CONDITION TMP_234
typecheckig node...
TMP_234(bool) = nativeAmountOut_2 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_234

Name: TMP_234 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
CONDITION TMP_234
Condition...
Conidtion: 
TMP_234
TMP_234
clearning node...
clearing ir...?
RETURN foreignAmountOut_2
typecheckig node...
RETURN foreignAmountOut_2
RETURN

Name: foreignAmountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
typecheckig node...
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: swap
___
___
[i]Type for TMP_80

Name: TMP_80 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
RETURN TMP_80
RETURN

Name: TMP_80 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
typecheckig node...
TMP_64 = CONVERT pool1_1 to address
Function name: _swap

Name: TMP_64 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
[i]Type for TMP_64

Name: TMP_64 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
TMP_65(uint256) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:swap, arguments:['amountIn_1', '0', 'TMP_64']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_65
WIP
hlc contract name: BasePool func_name: swap
amountIn_1
0
TMP_64
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: swap
Function Visibility: public
clearning node...
clearing ir...?
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
has variable
[i] nativeAmountIn cleared
clearing ir...?
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
has variable
[i] foreignAmountIn cleared
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared
clearing ir...?
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_0', 'nativeAsset_9'])
has variable
clearing ir...?
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
has variable
typecheckig node...
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
Function name: swap
Phi
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
Function name: swap
Phi
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
to_1(address) := ϕ(['to_1'])
Function name: swap
Phi
[i]Type for to

Name: to Function: swap
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
nativeAsset_10(IERC20) := ϕ(['nativeAsset_1', 'nativeAsset_5', 'nativeAsset_13', 'nativeAsset_0', 'nativeAsset_9'])
Function name: swap
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
Function name: swap
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
typecheckig node...
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
Internal call...
nonReentrant
Function: nonReentrant
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
MODIFIER_CALL, GasThrottle.validateGas()()
typecheckig node...
MODIFIER_CALL, GasThrottle.validateGas()()
Internal call...
validateGas
Function: validateGas
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
TMP_185(bool) = nativeAmountIn_1 > 0
has variable
[i] TMP_185 cleared
clearing ir...?
TMP_186(bool) = foreignAmountIn_1 == 0
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187(bool) = TMP_185 && TMP_186
has variable
[i] TMP_187 cleared
clearing ir...?
TMP_188(bool) = nativeAmountIn_1 == 0
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_189 cleared
clearing ir...?
TMP_190(bool) = TMP_188 && TMP_189
has variable
[i] TMP_190 cleared
clearing ir...?
TMP_191(bool) = TMP_187 || TMP_190
has variable
[i] TMP_191 cleared
clearing ir...?
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
typecheckig node...
TMP_185(bool) = nativeAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_186(bool) = foreignAmountIn_1 == 0
Function name: swap
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_187(bool) = TMP_185 && TMP_186
Function name: swap
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_188(bool) = nativeAmountIn_1 == 0
Function name: swap
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_189(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_190(bool) = TMP_188 && TMP_189
Function name: swap
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_191(bool) = TMP_187 || TMP_190
Function name: swap
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
has variable
clearing ir...?
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
Function name: swap
Internal call...
getReserves
Function: getReserves
ic
Internal cal param_cache
0
0
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
Function name: swap
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint112
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
Function name: swap
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint112
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
has variable
[i] _nativeAsset cleared
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Function name: swap
asgn

Name: _nativeAsset Function: swap
Num: 
Den: 
Norm: u
LF: NATIVETOKEN
Fields: 
0
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
clearning node...
clearing ir...?
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
has variable
[i] _foreignAsset cleared
typecheckig node...
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Function name: swap
asgn

Name: _foreignAsset Function: swap
Num: 
Den: 
Norm: u
LF: FOREIGNTOKEN
Fields: 
0
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
clearning node...
clearing ir...?
TMP_193 = CONVERT this to address
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
has variable
[i] TMP_194 cleared
clearing ir...?
nativeBalance_1(uint256) := TMP_194(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_193 = CONVERT this to address
Function name: swap
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: -1
Den: -1
Norm: 0
LF: VaderRouter
Fields: 
done.
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_194
WIP
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_193
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
nativeBalance_1(uint256) := TMP_194(uint256)
Function name: swap
asgn

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT this to address
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
has variable
[i] TMP_196 cleared
clearing ir...?
foreignBalance_1(uint256) := TMP_196(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_195 = CONVERT this to address
Function name: swap
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: -1
Den: -1
Norm: 0
LF: VaderRouter
Fields: 
done.
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_196
WIP
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_195
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignBalance_1(uint256) := TMP_196(uint256)
Function name: swap
asgn

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_197 = CONVERT _nativeAsset_1 to address
has variable
[i] TMP_197 cleared
clearing ir...?
TMP_198(bool) = to_1 != TMP_197
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199 = CONVERT _foreignAsset_1 to address
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(bool) = to_1 != TMP_199
has variable
[i] TMP_200 cleared
clearing ir...?
TMP_201(bool) = TMP_198 && TMP_200
has variable
[i] TMP_201 cleared
clearing ir...?
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
typecheckig node...
TMP_197 = CONVERT _nativeAsset_1 to address
Function name: swap

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Norm: 0
LF: NATIVETOKEN
Fields: 
done.
TMP_198(bool) = to_1 != TMP_197
Function name: swap
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_199 = CONVERT _foreignAsset_1 to address
Function name: swap

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Norm: 0
LF: FOREIGNTOKEN
Fields: 
done.
TMP_200(bool) = to_1 != TMP_199
Function name: swap
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_201(bool) = TMP_198 && TMP_200
Function name: swap
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_203(bool) = foreignAmountIn_1 > 0
has variable
[i] TMP_203 cleared
clearing ir...?
CONDITION TMP_203
typecheckig node...
TMP_203(bool) = foreignAmountIn_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
CONDITION TMP_203
Condition...
Conidtion: 
TMP_203
TMP_203
clearning node...
clearing ir...?
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
has variable
[i] TMP_216 cleared
clearing ir...?
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Function name: swap

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 

Name: nativeReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: TMP_215 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Function name: swap
testing lt...
Error with TMP_216 in function swap
Error with: TMP_216 in function swap
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
has variable
[i] TMP_204 cleared
clearing ir...?
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
has variable
[i] TMP_205 cleared
clearing ir...?
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
typecheckig node...
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Function name: swap

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 

Name: foreignReserve Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 

Name: TMP_204 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
Function name: swap
testing lt...
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
Function name: swap
testing lt...
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_209 cleared
clearing ir...?
nativeAmountOut_1(uint256) := TMP_209(uint256)
has variable
[i] nativeAmountOut cleared
typecheckig node...
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: swap
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
foreignAmountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
0
0
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
nativeAmountOut_1(uint256) := TMP_209(uint256)
Function name: swap
asgn

Name: nativeAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
typecheckig node...
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Function name: swap
testing lt...
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_220 cleared
clearing ir...?
foreignAmountOut_1(uint256) := TMP_220(uint256)
has variable
[i] foreignAmountOut cleared
typecheckig node...
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: swap
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
nativeAmountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
initlize checks
;;;

Name: amountIn Function: None
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 

Name: reserveIn Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
0
0
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: calculateSwap
___
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignAmountOut_1(uint256) := TMP_220(uint256)
Function name: swap
asgn

Name: foreignAmountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_210(bool) = nativeAmountOut_1 > 0
has variable
[i] TMP_210 cleared
clearing ir...?
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(bool) = TMP_210 && TMP_211
has variable
[i] TMP_212 cleared
clearing ir...?
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_210(bool) = nativeAmountOut_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Function name: swap
testing lt...
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_212(bool) = TMP_210 && TMP_211
Function name: swap
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_221(bool) = foreignAmountOut_1 > 0
has variable
[i] TMP_221 cleared
clearing ir...?
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
has variable
[i] TMP_222 cleared
clearing ir...?
TMP_223(bool) = TMP_221 && TMP_222
has variable
[i] TMP_223 cleared
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
typecheckig node...
TMP_221(bool) = foreignAmountOut_1 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Function name: swap
testing lt...
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
TMP_223(bool) = TMP_221 && TMP_222
Function name: swap
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
has variable
[i] nativeAmountOut cleared
clearing ir...?
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
has variable
[i] foreignAmountOut cleared
typecheckig node...
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_0', 'nativeAmountOut_1'])
Function name: swap
Phi
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_0', 'foreignAmountOut_1'])
Function name: swap
Phi
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_226 = CONVERT this to address
has variable
[i] TMP_226 cleared
clearing ir...?
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
has variable
[i] TMP_227 cleared
clearing ir...?
nativeBalance_2(uint256) := TMP_227(uint256)
has variable
[i] nativeBalance cleared
typecheckig node...
TMP_226 = CONVERT this to address
Function name: swap
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: -1
Den: -1
Norm: 0
LF: VaderRouter
Fields: 
done.
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_227
WIP
hlc contract name: NATIVETOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_226
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
nativeBalance_2(uint256) := TMP_227(uint256)
Function name: swap
asgn

Name: nativeBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
TMP_228 = CONVERT this to address
has variable
[i] TMP_228 cleared
clearing ir...?
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
has variable
[i] TMP_229 cleared
clearing ir...?
foreignBalance_2(uint256) := TMP_229(uint256)
has variable
[i] foreignBalance cleared
typecheckig node...
TMP_228 = CONVERT this to address
Function name: swap
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: -1
Den: -1
Norm: 0
LF: VaderRouter
Fields: 
done.
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
Function name: swap
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_229
WIP
hlc contract name: FOREIGNTOKEN func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_228
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None)
----
Type: uint256
COPIED
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignBalance_2(uint256) := TMP_229(uint256)
Function name: swap
asgn

Name: foreignBalance Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
typecheckig node...
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
Internal call...
_update
nativeBalance
foreignBalance
nativeReserve
foreignReserve
Function: _update
ic
NO RETURN LOCATION
done.
clearning node...
clearing ir...?
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
typecheckig node...
Emit Swap(msg.sender,nativeAmountIn_1,foreignAmountIn_1,nativeAmountOut_2,foreignAmountOut_2,to_1)
clearning node...
clearing ir...?
TMP_234(bool) = nativeAmountOut_2 > 0
has variable
[i] TMP_234 cleared
clearing ir...?
CONDITION TMP_234
typecheckig node...
TMP_234(bool) = nativeAmountOut_2 > 0
Function name: swap
testing gt...
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
True
[i]Type for TMP_234

Name: TMP_234 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
done.
CONDITION TMP_234
Condition...
Conidtion: 
TMP_234
TMP_234
clearning node...
clearing ir...?
RETURN foreignAmountOut_2
typecheckig node...
RETURN foreignAmountOut_2
RETURN

Name: foreignAmountOut Function: swap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
typecheckig node...
RETURN nativeAmountOut_2
RETURN

Name: nativeAmountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: swap
___
___
[i]Type for TMP_65

Name: TMP_65 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:swap, arguments:['0', 'TMP_65', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_66
WIP
hlc contract name: BasePool func_name: swap
0
TMP_65
INCLUDED HIGH LEVEL CALL HAS SOME UNDEFINED TYPE
[i]Type for TMP_66

Name: TMP_66 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
RETURN TMP_66
RETURN

Name: TMP_66 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Saving return values for: _swap
___
___
___
[i]Type for TMP_37

Name: TMP_37 Function: swapExactTokensForTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
amountOut_1(uint256) := TMP_37(uint256)
Function name: swapExactTokensForTokens
asgn

Name: amountOut Function: swapExactTokensForTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
u
[i]Type for amountOut

Name: amountOut Function: swapExactTokensForTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
This IR caused addback:
amountOut_1(uint256) := TMP_37(uint256)
XXXXX
[x]node added back
[@]retrying node
TMP_37(uint256) = INTERNAL_CALL, VaderRouter._swap(uint256,address[],address)(amountIn_1,path_1 (-> []),to_1)
Function name: swapExactTokensForTokens
Internal call...
_swap
amountIn
path
to
Function: _swap
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
0
0
[i]Type for TMP_37

Name: TMP_37 Function: swapExactTokensForTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
amountOut_1(uint256) := TMP_37(uint256)
Function name: swapExactTokensForTokens
asgn

Name: amountOut Function: swapExactTokensForTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
u
[i]Type for amountOut

Name: amountOut Function: swapExactTokensForTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
This IR caused addback:
amountOut_1(uint256) := TMP_37(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_38(bool) = amountOut_1 >= amountOutMin_1
has variable
[i] TMP_38 cleared
clearing ir...?
TMP_39(None) = SOLIDITY_CALL require(bool,string)(TMP_38,VaderRouter::swapExactTokensForTokens: Insufficient Trade Output)
typecheckig node...
TMP_38(bool) = amountOut_1 >= amountOutMin_1
Function name: swapExactTokensForTokens
testing gt...

Name: TMP_38 Function: swapExactTokensForTokens
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_38

Name: TMP_38 Function: swapExactTokensForTokens
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
This IR caused addback:
TMP_38(bool) = amountOut_1 >= amountOutMin_1
XXXXX
TMP_39(None) = SOLIDITY_CALL require(bool,string)(TMP_38,VaderRouter::swapExactTokensForTokens: Insufficient Trade Output)
[i]Type for TMP_39

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
[x]node added back
[@]retrying node
TMP_38(bool) = amountOut_1 >= amountOutMin_1
Function name: swapExactTokensForTokens
testing gt...

Name: TMP_38 Function: swapExactTokensForTokens
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
[i]Type for TMP_38

Name: TMP_38 Function: swapExactTokensForTokens
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
This IR caused addback:
TMP_38(bool) = amountOut_1 >= amountOutMin_1
XXXXX
TMP_39(None) = SOLIDITY_CALL require(bool,string)(TMP_38,VaderRouter::swapExactTokensForTokens: Insufficient Trade Output)
[i]Type for TMP_39

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
Saving return values for: swapExactTokensForTokens
Reading Function: swapTokensForExactTokens
wooo
Reading Function: initialize
wooo
Reading Function: _swap
Function _swap not marked
Reading Function: _addLiquidity
Function _addLiquidity not marked
Reading Function: calculateInGivenOut
wooo
Reading Function: calculateOutGivenIn
Function name: calculateOutGivenIn
Function Visibility (test): external
amountIn
Finding type for amountIn...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256

Name: amountIn Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
path
Finding type for path...
address[]
Check copy_toekn_tuple
(-1, -1, 0, None)
----
Type: address[]
New type: address

Name: path Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[*]Type fetched successfully
-100
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
factory_22(IVaderPoolFactory) := ϕ(['factory_0', 'factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
has variable
typecheckig node...
factory_22(IVaderPoolFactory) := ϕ(['factory_0', 'factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
done.
clearning node...
clearing ir...?
REF_59 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_95(bool) = REF_59 == 2
has variable
[i] TMP_95 cleared
clearing ir...?
CONDITION TMP_95
typecheckig node...
REF_59 -> LENGTH path_1 (-> [])
[i]Type for REF_59

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
TMP_95(bool) = REF_59 == 2
Function name: calculateOutGivenIn
[i]Type for TMP_95

Name: TMP_95 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
CONDITION TMP_95
Condition...
Conidtion: 
TMP_95
TMP_95
clearning node...
clearing ir...?
TMP_96(address) = HIGH_LEVEL_CALL, dest:factory_22(IVaderPoolFactory), function:nativeAsset, arguments:[]  
has variable
[i] TMP_96 cleared
clearing ir...?
factory_25(IVaderPoolFactory) := ϕ(['factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
has variable
clearing ir...?
nativeAsset_1(address) := TMP_96(address)
has variable
[i] nativeAsset cleared
typecheckig node...
TMP_96(address) = HIGH_LEVEL_CALL, dest:factory_22(IVaderPoolFactory), function:nativeAsset, arguments:[]  
Function name: calculateOutGivenIn
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_96
WIP
hlc contract name: FACTORY func_name: nativeAsset
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: address
COPIED
[i]Type for TMP_96

Name: TMP_96 Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
factory_25(IVaderPoolFactory) := ϕ(['factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
done.
nativeAsset_1(address) := TMP_96(address)
Function name: calculateOutGivenIn
asgn

Name: nativeAsset Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for nativeAsset

Name: nativeAsset Function: calculateOutGivenIn
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
REF_62(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_63(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_97(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_25(IVaderPoolFactory), function:getPool, arguments:['REF_62', 'REF_63']  
has variable
[i] TMP_97 cleared
clearing ir...?
factory_26(IVaderPoolFactory) := ϕ(['factory_21', 'factory_25', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
has variable
clearing ir...?
pool_1(IVaderPool) := TMP_97(IVaderPool)
has variable
[i] pool cleared
typecheckig node...
REF_62(address) -> path_1 (-> [])[0]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Name: None
path
REF_63(address) -> path_1 (-> [])[1]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Name: None
path
TMP_97(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_25(IVaderPoolFactory), function:getPool, arguments:['REF_62', 'REF_63']  
Function name: calculateOutGivenIn
High Call: getPool
func name:getPool
other func name:getPool
TMP_97
WIP
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_62
REF_63
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool')
----
Type: IVaderPool
Type type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_97

Name: TMP_97 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
factory_26(IVaderPoolFactory) := ϕ(['factory_21', 'factory_25', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
done.
pool_1(IVaderPool) := TMP_97(IVaderPool)
Function name: calculateOutGivenIn
asgn

Name: pool Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for pool

Name: pool Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_69(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_70(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_101(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_22(IVaderPoolFactory), function:getPool, arguments:['REF_69', 'REF_70']  
has variable
[i] TMP_101 cleared
clearing ir...?
factory_23(IVaderPoolFactory) := ϕ(['factory_22', 'factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
has variable
clearing ir...?
pool0_1(IVaderPool) := TMP_101(IVaderPool)
has variable
[i] pool0 cleared
typecheckig node...
REF_69(address) -> path_1 (-> [])[0]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Name: None
path
REF_70(address) -> path_1 (-> [])[1]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Name: None
path
TMP_101(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_22(IVaderPoolFactory), function:getPool, arguments:['REF_69', 'REF_70']  
Function name: calculateOutGivenIn
High Call: getPool
func name:getPool
other func name:getPool
TMP_101
WIP
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_69
REF_70
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool')
----
Type: IVaderPool
Type type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_101

Name: TMP_101 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
factory_23(IVaderPoolFactory) := ϕ(['factory_22', 'factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
done.
pool0_1(IVaderPool) := TMP_101(IVaderPool)
Function name: calculateOutGivenIn
asgn

Name: pool0 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for pool0

Name: pool0 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_72(address) -> path_1 (-> [])[1]
has variable
clearing ir...?
REF_73(address) -> path_1 (-> [])[2]
has variable
clearing ir...?
TMP_102(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_23(IVaderPoolFactory), function:getPool, arguments:['REF_72', 'REF_73']  
has variable
[i] TMP_102 cleared
clearing ir...?
factory_24(IVaderPoolFactory) := ϕ(['factory_23', 'factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
has variable
clearing ir...?
pool1_1(IVaderPool) := TMP_102(IVaderPool)
has variable
[i] pool1 cleared
typecheckig node...
REF_72(address) -> path_1 (-> [])[1]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Name: None
path
REF_73(address) -> path_1 (-> [])[2]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Name: None
path
TMP_102(IVaderPool) = HIGH_LEVEL_CALL, dest:factory_23(IVaderPoolFactory), function:getPool, arguments:['REF_72', 'REF_73']  
Function name: calculateOutGivenIn
High Call: getPool
func name:getPool
other func name:getPool
TMP_102
WIP
hlc contract name: FACTORY func_name: getPool
('c', [-1], [-1], 0, 'BasePool')
REF_72
REF_73
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BasePool')
----
Type: IVaderPool
Type type: IVaderPool
 NO FIELDS
COPIED
[i]Type for TMP_102

Name: TMP_102 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
factory_24(IVaderPoolFactory) := ϕ(['factory_23', 'factory_21', 'factory_26', 'factory_16', 'factory_13', 'factory_15', 'factory_1', 'factory_11', 'factory_7', 'factory_24', 'factory_19'])
Function name: calculateOutGivenIn
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
done.
pool1_1(IVaderPool) := TMP_102(IVaderPool)
Function name: calculateOutGivenIn
asgn

Name: pool1 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for pool1

Name: pool1 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: BasePool
Fields: 
done.
clearning node...
clearing ir...?
TUPLE_6(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:getReserves, arguments:[]  
has variable
clearing ir...?
nativeReserve_1(uint256)= UNPACK TUPLE_6 index: 0 
has variable
[i] nativeReserve cleared
clearing ir...?
foreignReserve_1(uint256)= UNPACK TUPLE_6 index: 1 
has variable
[i] foreignReserve cleared
typecheckig node...
TUPLE_6(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateOutGivenIn
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_6
WIP
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
0
0
[i]Type for TUPLE_6

Name: TUPLE_6 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
nativeReserve_1(uint256)= UNPACK TUPLE_6 index: 0 
Function name: calculateOutGivenIn
Reading tuple TUPLE_6 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint256
[i]Type for nativeReserve

Name: nativeReserve Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignReserve_1(uint256)= UNPACK TUPLE_6 index: 1 
Function name: calculateOutGivenIn
Reading tuple TUPLE_6 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint256
[i]Type for foreignReserve

Name: foreignReserve Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_7(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:getReserves, arguments:[]  
has variable
clearing ir...?
nativeReserve0_1(uint256)= UNPACK TUPLE_7 index: 0 
has variable
[i] nativeReserve0 cleared
clearing ir...?
foreignReserve0_1(uint256)= UNPACK TUPLE_7 index: 1 
has variable
[i] foreignReserve0 cleared
typecheckig node...
TUPLE_7(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool0_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateOutGivenIn
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_7
WIP
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
0
0
[i]Type for TUPLE_7

Name: TUPLE_7 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
nativeReserve0_1(uint256)= UNPACK TUPLE_7 index: 0 
Function name: calculateOutGivenIn
Reading tuple TUPLE_7 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint256
[i]Type for nativeReserve0

Name: nativeReserve0 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignReserve0_1(uint256)= UNPACK TUPLE_7 index: 1 
Function name: calculateOutGivenIn
Reading tuple TUPLE_7 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint256
[i]Type for foreignReserve0

Name: foreignReserve0 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
REF_65(address) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_98(bool) = REF_65 == nativeAsset_1
has variable
[i] TMP_98 cleared
clearing ir...?
CONDITION TMP_98
typecheckig node...
REF_65(address) -> path_1 (-> [])[0]
Function name: calculateOutGivenIn
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Name: None
path
TMP_98(bool) = REF_65 == nativeAsset_1
Function name: calculateOutGivenIn
[i]Type for TMP_98

Name: TMP_98 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
CONDITION TMP_98
Condition...
Conidtion: 
TMP_98
TMP_98
clearning node...
clearing ir...?
TMP_100(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
has variable
[i] TMP_100 cleared
clearing ir...?
RETURN TMP_100
typecheckig node...
TMP_100(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
Function name: calculateOutGivenIn
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
amountIn_1
foreignReserve_1
nativeReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
initlize checks
;;;

Name: amountIn Function: None
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 

Name: reserveIn Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
0
0
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: calculateSwap
___
[i]Type for TMP_100

Name: TMP_100 Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
RETURN TMP_100
RETURN

Name: TMP_100 Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
clearning node...
clearing ir...?
TMP_99(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
has variable
[i] TMP_99 cleared
clearing ir...?
RETURN TMP_99
typecheckig node...
TMP_99(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
Function name: calculateOutGivenIn
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
amountIn_1
nativeReserve_1
foreignReserve_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
initlize checks
;;;

Name: amountIn Function: None
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 

Name: reserveIn Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
0
0
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: calculateSwap
___
[i]Type for TMP_99

Name: TMP_99 Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
RETURN TMP_99
RETURN

Name: TMP_99 Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_8(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:getReserves, arguments:[]  
has variable
clearing ir...?
nativeReserve1_1(uint256)= UNPACK TUPLE_8 index: 0 
has variable
[i] nativeReserve1 cleared
clearing ir...?
foreignReserve1_1(uint256)= UNPACK TUPLE_8 index: 1 
has variable
[i] foreignReserve1 cleared
typecheckig node...
TUPLE_8(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pool1_1(IVaderPool), function:getReserves, arguments:[]  
Function name: calculateOutGivenIn
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_8
WIP
hlc contract name: BasePool func_name: getReserves
High level cal param_cache
0
0
[i]Type for TUPLE_8

Name: TUPLE_8 Function: calculateOutGivenIn
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
nativeReserve1_1(uint256)= UNPACK TUPLE_8 index: 0 
Function name: calculateOutGivenIn
Reading tuple TUPLE_8 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint256
[i]Type for nativeReserve1

Name: nativeReserve1 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
foreignReserve1_1(uint256)= UNPACK TUPLE_8 index: 1 
Function name: calculateOutGivenIn
Reading tuple TUPLE_8 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None)
----
Type: uint256
[i]Type for foreignReserve1

Name: foreignReserve1 Function: calculateOutGivenIn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_103(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'nativeReserve1_1', 'foreignReserve1_1'] 
has variable
[i] TMP_103 cleared
clearing ir...?
TMP_104(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['TMP_103', 'foreignReserve0_1', 'nativeReserve0_1'] 
has variable
[i] TMP_104 cleared
clearing ir...?
RETURN TMP_104
typecheckig node...
TMP_103(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['amountIn_1', 'nativeReserve1_1', 'foreignReserve1_1'] 
Function name: calculateOutGivenIn
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
amountIn_1
nativeReserve1_1
foreignReserve1_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
initlize checks
;;;

Name: amountIn Function: None
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 

Name: reserveIn Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
0
0
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: calculateSwap
___
[i]Type for TMP_103

Name: TMP_103 Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_104(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['TMP_103', 'foreignReserve0_1', 'nativeReserve0_1'] 
Function name: calculateOutGivenIn
Library Call: calculateSwap
WIP
hlc contract name: VaderMath func_name: calculateSwap
TMP_103
foreignReserve0_1
nativeReserve0_1
High level cal param_cache
Param: 0
    num: [2]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
Param: 2
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: calculateSwap
Function Visibility: public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
has variable
[i] TMP_141 cleared
clearing ir...?
numerator_1(uint256) := TMP_141(uint256)
has variable
[i] numerator cleared
typecheckig node...
TMP_140(uint256) = amountIn_1 (c)* reserveIn_1
Function name: calculateSwap
testing mul...

Name: TMP_140 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_140

Name: TMP_140 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_141(uint256) = TMP_140 (c)* reserveOut_1
Function name: calculateSwap
testing mul...

Name: TMP_141 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_141

Name: TMP_141 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
numerator_1(uint256) := TMP_141(uint256)
Function name: calculateSwap
asgn

Name: numerator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
has variable
[i] TMP_143 cleared
clearing ir...?
denominator_1(uint256) := TMP_143(uint256)
has variable
[i] denominator cleared
typecheckig node...
TMP_142(uint256) = amountIn_1 (c)+ reserveIn_1
Function name: calculateSwap

Name: TMP_142 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
initlize checks
;;;

Name: amountIn Function: None
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 

Name: reserveIn Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
[i]Type for TMP_142

Name: TMP_142 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
TMP_143(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_142)
Function name: calculateSwap
Internal call...
pow
TMP_142
Function: pow
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
0
0
[i]Type for TMP_143

Name: TMP_143 Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
done.
denominator_1(uint256) := TMP_143(uint256)
Function name: calculateSwap
asgn

Name: denominator Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
done.
clearning node...
clearing ir...?
TMP_144(uint256) = numerator_1 (c)/ denominator_1
has variable
[i] TMP_144 cleared
clearing ir...?
amountOut_1(uint256) := TMP_144(uint256)
has variable
[i] amountOut cleared
typecheckig node...
TMP_144(uint256) = numerator_1 (c)/ denominator_1
Function name: calculateSwap

Name: TMP_144 Function: calculateSwap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
[i]Type for TMP_144

Name: TMP_144 Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
amountOut_1(uint256) := TMP_144(uint256)
Function name: calculateSwap
asgn

Name: amountOut Function: calculateSwap
Num: 
Den: 
Norm: u
LF: None
Fields: 
0
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
typecheckig node...
RETURN amountOut_1
RETURN

Name: amountOut Function: calculateSwap
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: calculateSwap
___
[i]Type for TMP_104

Name: TMP_104 Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
done.
RETURN TMP_104
RETURN

Name: TMP_104 Function: calculateOutGivenIn
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Saving return values for: calculateOutGivenIn
___
___
___
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
[x] IBasePool not run
[x] IVaderPool not run
[x] IVaderPoolFactory not run
[x] IVaderRouter not run
[x] IVaderReserve not run
[*] VaderMath run
Reading Function: calculateLiquidityUnits
wooo
Reading Function: calculateSlipAdjustment
wooo
Reading Function: calculateLoss
wooo
Reading Function: calculateSwap
wooo
Reading Function: calculateSwapReverse
wooo
Reading Function: delta
wooo
Reading Function: pow
wooo
Reading Function: root
wooo
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
[x] Ownable not run
[x] IERC20 not run
[x] IERC20Permit not run
[x] SafeERC20 not run
[x] IERC721 not run
[x] Address not run
[x] Context not run
[x] IERC165 not run
[x] ProtocolConstants not run
UQ112x112
contract name: UQ112x112
WARNING!!!!
UQ112x112_types.txt
Type File not found.
[x] UQ112x112 not run
[x] UQ112x112 not run
GasThrottle
IAggregator
ProtocolConstants
contract name: GasThrottle
WARNING!!!!
GasThrottle_types.txt
Type File not found.
[x] GasThrottle not run
contract name: IAggregator
WARNING!!!!
IAggregator_types.txt
Type File not found.
[x] IAggregator not run
contract name: ProtocolConstants
WARNING!!!!
ProtocolConstants_types.txt
Type File not found.
[x] ProtocolConstants not run
[x] GasThrottle not run
[x] IAggregator not run
[x] ProtocolConstants not run
