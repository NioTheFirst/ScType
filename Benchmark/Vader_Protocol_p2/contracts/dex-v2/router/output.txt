VaderReserve
IVaderReserve
Ownable
IERC20
IERC20Permit
SafeERC20
Address
Context
ProtocolConstants
contract name: VaderReserve
WARNING!!!!
VaderReserve_types.txt
Finance File not Found
"VaderReserve_types.txt" opened successfully.
[*c], VaderReserve

[sef], VADER, balanceOf, 1, {c, 2, -1, 0}

{c, 2, -1, 0}
['c', '2', '-1', '0']
[xf], constructor

[xf], grant

[xf], initialize

[xf], reimburseImpermanentLoss

[t], global, _owner

[t], global, _ZERO_ADDRESS

[t], global, router

[t], global, vader, -1, -1, 0, VADER

[t], global, _GRANT_DELAY

[t], global, lastGrant

[t], global, _MAX_BASIS_POINTS

[t], global, _MAX_GRANT_BASIS_POINTS

[t], global, _ONE_YEAR

[*] VaderReserve run
Checking... constructor Visibility: public
[o] Marked
Checking... reserve Visibility: public
[x] No Binary
Checking... grant Visibility: external
[o] Marked
Checking... initialize Visibility: external
[o] Marked
Checking... reimburseImpermanentLoss Visibility: external
[o] Marked
Checking... _min Visibility: private
[x] Not visible 
Checking... slitherConstructorConstantVariables Visibility: internal
[x] Not visible 
State_var: _owner
Finding type for _owner...
address
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
State_var: router
Finding type for router...
address
State_var: vader
Finding type for vader...
IERC20
State_var: _GRANT_DELAY
Finding type for _GRANT_DELAY...
uint256
State_var: lastGrant
Finding type for lastGrant...
uint256
State_var: _MAX_BASIS_POINTS
Finding type for _MAX_BASIS_POINTS...
uint256
State_var: _MAX_GRANT_BASIS_POINTS
Finding type for _MAX_GRANT_BASIS_POINTS...
uint256
contract name: IVaderReserve
WARNING!!!!
IVaderReserve_types.txt
Finance File not Found
Type File not found.
[x] IVaderReserve not run
contract name: Ownable
WARNING!!!!
Ownable_types.txt
Finance File not Found
Type File not found.
[x] Ownable not run
contract name: IERC20
WARNING!!!!
IERC20_types.txt
Finance File not Found
Type File not found.
[x] IERC20 not run
contract name: IERC20Permit
WARNING!!!!
IERC20Permit_types.txt
Finance File not Found
Type File not found.
[x] IERC20Permit not run
contract name: SafeERC20
WARNING!!!!
SafeERC20_types.txt
Finance File not Found
Type File not found.
[x] SafeERC20 not run
contract name: Address
WARNING!!!!
Address_types.txt
Finance File not Found
Type File not found.
[x] Address not run
contract name: Context
WARNING!!!!
Context_types.txt
Finance File not Found
Type File not found.
[x] Context not run
contract name: ProtocolConstants
WARNING!!!!
ProtocolConstants_types.txt
Finance File not Found
Type File not found.
[x] ProtocolConstants not run
Seen contract: {} Contract name out: VaderReserve
[*] VaderReserve run
Reading Function: constructor
wooo
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: router Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: vader
Finding type for vader...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: vader Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _GRANT_DELAY
Finding type for _GRANT_DELAY...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _GRANT_DELAY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lastGrant
Finding type for lastGrant...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lastGrant Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_BASIS_POINTS
Finding type for _MAX_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_GRANT_BASIS_POINTS
Finding type for _MAX_GRANT_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_GRANT_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: reserve
Function reserve not marked
Mark Iterations TRUE, proceeding anyway
Function name: reserve
Function Visibility (test): public
clearning node...
clearing ir...?
vader_2(IERC20) := ϕ(['vader_0', 'vader_1', 'vader_3', 'vader_8', 'vader_11'])
has variable
typecheckig node...
vader_2(IERC20) := ϕ(['vader_0', 'vader_1', 'vader_3', 'vader_8', 'vader_11'])
Function name: reserve
Phi
[i]Type for vader

Name: vader Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_18 = CONVERT this to address
has variable
[i] TMP_18 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:vader_2(IERC20), function:balanceOf, arguments:['TMP_18']  
has variable
[i] TMP_19 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
vader_3(IERC20) := ϕ(['vader_1', 'vader_3', 'vader_8', 'vader_11', 'vader_2'])
has variable
clearing ir...?
RETURN TMP_19
typecheckig node...
TMP_18 = CONVERT this to address
Function name: reserve
[i]Type for TMP_18

Name: TMP_18 Function: reserve
Num: -1
Den: -1
Norm: u
LF: VaderReserve
Fields: 
Finance Type: undef
done.
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:vader_2(IERC20), function:balanceOf, arguments:['TMP_18']  
Function name: reserve
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_19
[i]Type for TMP_19

Name: TMP_19 Function: reserve
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
vader_3(IERC20) := ϕ(['vader_1', 'vader_3', 'vader_8', 'vader_11', 'vader_2'])
Function name: reserve
Phi
[i]Type for vader

Name: vader Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
RETURN TMP_19
RETURN

Name: TMP_19 Function: reserve
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "reserve":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: router Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: vader
Finding type for vader...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: vader Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _GRANT_DELAY
Finding type for _GRANT_DELAY...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _GRANT_DELAY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lastGrant
Finding type for lastGrant...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lastGrant Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_BASIS_POINTS
Finding type for _MAX_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_GRANT_BASIS_POINTS
Finding type for _MAX_GRANT_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_GRANT_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: grant
wooo
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: router Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: vader
Finding type for vader...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: vader Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _GRANT_DELAY
Finding type for _GRANT_DELAY...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _GRANT_DELAY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lastGrant
Finding type for lastGrant...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lastGrant Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_BASIS_POINTS
Finding type for _MAX_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_GRANT_BASIS_POINTS
Finding type for _MAX_GRANT_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_GRANT_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: initialize
wooo
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: router Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: vader
Finding type for vader...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: vader Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _GRANT_DELAY
Finding type for _GRANT_DELAY...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _GRANT_DELAY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lastGrant
Finding type for lastGrant...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lastGrant Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_BASIS_POINTS
Finding type for _MAX_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_GRANT_BASIS_POINTS
Finding type for _MAX_GRANT_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_GRANT_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: reimburseImpermanentLoss
wooo
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: router Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: vader
Finding type for vader...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: vader Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _GRANT_DELAY
Finding type for _GRANT_DELAY...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _GRANT_DELAY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lastGrant
Finding type for lastGrant...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lastGrant Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_BASIS_POINTS
Finding type for _MAX_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_GRANT_BASIS_POINTS
Finding type for _MAX_GRANT_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_GRANT_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _min
Function _min not marked
Mark Iterations TRUE, proceeding anyway
Function name: _min
Function Visibility (test): private
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: router Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: vader
Finding type for vader...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: vader Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _GRANT_DELAY
Finding type for _GRANT_DELAY...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _GRANT_DELAY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lastGrant
Finding type for lastGrant...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lastGrant Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_BASIS_POINTS
Finding type for _MAX_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_GRANT_BASIS_POINTS
Finding type for _MAX_GRANT_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_GRANT_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
Mark Iterations TRUE, proceeding anyway
Function name: slitherConstructorConstantVariables
Function Visibility (test): internal
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: router Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: vader
Finding type for vader...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: vader Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _GRANT_DELAY
Finding type for _GRANT_DELAY...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _GRANT_DELAY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lastGrant
Finding type for lastGrant...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lastGrant Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_BASIS_POINTS
Finding type for _MAX_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _MAX_GRANT_BASIS_POINTS
Finding type for _MAX_GRANT_BASIS_POINTS...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _MAX_GRANT_BASIS_POINTS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Errors: []
Seen contract: {'VaderReserve': True} Contract name out: IVaderReserve
[x] IVaderReserve not run
Seen contract: {'VaderReserve': True, 'IVaderReserve': True} Contract name out: Ownable
[x] Ownable not run
Seen contract: {'VaderReserve': True, 'IVaderReserve': True, 'Ownable': True} Contract name out: IERC20
[x] IERC20 not run
Seen contract: {'VaderReserve': True, 'IVaderReserve': True, 'Ownable': True, 'IERC20': True} Contract name out: IERC20Permit
[x] IERC20Permit not run
Seen contract: {'VaderReserve': True, 'IVaderReserve': True, 'Ownable': True, 'IERC20': True, 'IERC20Permit': True} Contract name out: SafeERC20
[x] SafeERC20 not run
Seen contract: {'VaderReserve': True, 'IVaderReserve': True, 'Ownable': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True} Contract name out: Address
[x] Address not run
Seen contract: {'VaderReserve': True, 'IVaderReserve': True, 'Ownable': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'Address': True} Contract name out: Context
[x] Context not run
Seen contract: {'VaderReserve': True, 'IVaderReserve': True, 'Ownable': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'Address': True, 'Context': True} Contract name out: ProtocolConstants
[x] ProtocolConstants not run
Function count: 1
VaderRouterV2
VaderMath
IBasePoolV2
IVaderPoolV2
IVaderRouterV2
IVaderReserve
Ownable
IERC20
IERC20Permit
SafeERC20
IERC721
Address
Context
IERC165
ProtocolConstants
contract name: VaderRouterV2
WARNING!!!!
VaderRouterV2_types.txt
Finance File not Found
"VaderRouterV2_types.txt" opened successfully.
[*c], VaderRouterV2

[sef], POOL, positionForeignAsset, 1, {c, -1, -1, 0, tokB}

{c, -1, -1, 0, tokB}
['c', '-1', '-1', '0', 'tokB']
[sef], POOL, burn, 3, {c, 1, -1, 0}, {c, 2, -1, 0}, {c, 1, -1, 6}

{c, 1, -1, 0}
['c', '1', '-1', '0']
{c, 2, -1, 0}
['c', '2', '-1', '0']
{c, 1, -1, 6}
['c', '1', '-1', '6']
[sef], POOL, mint

[sef], POOL, nativeAsset

[sef], POOL, swap

[sef], POOL, doubleSwap

constructor

addLiquidity

removeLiquidity

swapExactTokensForTokens

initialize

[t], global, _ZERO_ADDRESS

[t], global, nativeAsset, -1, -1, 0, tokA

[t], global, pool, -1, -1, 0, POOL

[t], global, _owner

[t], global, _ONE_YEAR

[t], global, reserve, -1, -1, 0, VaderReserve



[t], removeLiquidity, tokenA, -1, -1, 0, tokA

[t], removeLiquidity, tokenB, -1, -1, 0, tokB

[t], removeLiquidity, id

[t], removeLiquidity, amountAMin, 1, -1, 0

[t], removeLiquidity, amountBMin, 2, -1, 0

[t], removeLiquidity, to

[t], removeLiquidity, deadline

[t], addLiquidity, tokenA

[t], addLiquidity, tokenB

[t], addLiquidity, amountADesired, 2, -1, 0

[t], addLiquidity, amountBDesired, 1, -1, 0

[t], addLiquidity, a

[t], addLiquidity, b

[t], addLiquidity, to

[t], addLiquidity, deadline

[t], swapExactTokensForTokens, amountIn

[t], swapExactTokensForTokens, amountOutMin

[t], swapExactTokensForTokens, path

[t], swapExactTokensForTokens, to

[t], swapExactTokensForTokens, deadline

[*] VaderRouterV2 run
Checking... constructor Visibility: public
[o] Marked
Checking... addLiquidity Visibility: external
[x] No Binary
Checking... addLiquidity Visibility: public
[o] Marked
Checking... removeLiquidity Visibility: public
[o] Marked
Checking... swapExactTokensForTokens Visibility: external
[o] Marked
Checking... initialize Visibility: external
[o] Marked
Checking... _swap Visibility: private
[x] Not visible 
Checking... slitherConstructorConstantVariables Visibility: internal
[x] Not visible 
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'tokA')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pool
Finding type for pool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'POOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'VaderReserve')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
[*]Type fetched successfully
contract name: VaderMath
WARNING!!!!
VaderMath_types.txt
Finance File not Found
Type File not found.
[x] VaderMath not run
contract name: IBasePoolV2
WARNING!!!!
IBasePoolV2_types.txt
Finance File not Found
Type File not found.
[x] IBasePoolV2 not run
contract name: IVaderPoolV2
WARNING!!!!
IVaderPoolV2_types.txt
Finance File not Found
Type File not found.
[x] IVaderPoolV2 not run
contract name: IVaderRouterV2
WARNING!!!!
IVaderRouterV2_types.txt
Finance File not Found
Type File not found.
[x] IVaderRouterV2 not run
contract name: IVaderReserve
WARNING!!!!
IVaderReserve_types.txt
Finance File not Found
Type File not found.
[x] IVaderReserve not run
contract name: Ownable
WARNING!!!!
Ownable_types.txt
Finance File not Found
Type File not found.
[x] Ownable not run
contract name: IERC20
WARNING!!!!
IERC20_types.txt
Finance File not Found
Type File not found.
[x] IERC20 not run
contract name: IERC20Permit
WARNING!!!!
IERC20Permit_types.txt
Finance File not Found
Type File not found.
[x] IERC20Permit not run
contract name: SafeERC20
WARNING!!!!
SafeERC20_types.txt
Finance File not Found
Type File not found.
[x] SafeERC20 not run
contract name: IERC721
WARNING!!!!
IERC721_types.txt
Finance File not Found
Type File not found.
[x] IERC721 not run
contract name: Address
WARNING!!!!
Address_types.txt
Finance File not Found
Type File not found.
[x] Address not run
contract name: Context
WARNING!!!!
Context_types.txt
Finance File not Found
Type File not found.
[x] Context not run
contract name: IERC165
WARNING!!!!
IERC165_types.txt
Finance File not Found
Type File not found.
[x] IERC165 not run
contract name: ProtocolConstants
WARNING!!!!
ProtocolConstants_types.txt
Finance File not Found
Type File not found.
[x] ProtocolConstants not run
Seen contract: {'VaderReserve': True, 'IVaderReserve': True, 'Ownable': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'Address': True, 'Context': True, 'ProtocolConstants': True} Contract name out: VaderRouterV2
[*] VaderRouterV2 run
Reading Function: constructor
wooo
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'tokA')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pool
Finding type for pool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'POOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'VaderReserve')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: addLiquidity
Function name: addLiquidity
Function Visibility (test): external
tokenA
Finding type for tokenA...
IERC20
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: tokenA Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
tokenB
Finding type for tokenB...
IERC20
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: tokenB Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amountADesired
Finding type for amountADesired...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountADesired Function: addLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amountBDesired
Finding type for amountBDesired...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountBDesired Function: addLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
a
Finding type for a...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: a Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
b
Finding type for b...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: b Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
to
Finding type for to...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: to Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
deadline
Finding type for deadline...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: deadline Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 5
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 6
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 7
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_19(uint256) = INTERNAL_CALL, VaderRouterV2.addLiquidity(IERC20,IERC20,uint256,uint256,address,uint256)(tokenA_1,tokenB_1,amountADesired_1,amountBDesired_1,to_1,deadline_1)
has variable
[i] TMP_19 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
RETURN TMP_19
typecheckig node...
TMP_19(uint256) = INTERNAL_CALL, VaderRouterV2.addLiquidity(IERC20,IERC20,uint256,uint256,address,uint256)(tokenA_1,tokenB_1,amountADesired_1,amountBDesired_1,to_1,deadline_1)
Function name: addLiquidity
Internal call...
addLiquidity
tokenA
tokenB
amountADesired
amountBDesired
to
deadline
Function: addLiquidity
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 5
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
added
xyz
Function name: addLiquidity
Function Visibility: public
clearning node...
clearing ir...?
tokenA_1(IERC20) := ϕ(['tokenA_1'])
has variable
[i] tokenA cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
tokenB_1(IERC20) := ϕ(['tokenB_1'])
has variable
[i] tokenB cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
amountADesired_1(uint256) := ϕ(['amountADesired_1'])
has variable
[i] amountADesired cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
amountBDesired_1(uint256) := ϕ(['amountBDesired_1'])
has variable
[i] amountBDesired cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
deadline_1(uint256) := ϕ(['deadline_1'])
has variable
[i] deadline cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_3(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_0', 'pool_12'])
has variable
clearing ir...?
nativeAsset_2(IERC20) := ϕ(['nativeAsset_4', 'nativeAsset_3', 'nativeAsset_0', 'nativeAsset_1', 'nativeAsset_7'])
has variable
typecheckig node...
tokenA_1(IERC20) := ϕ(['tokenA_1'])
Function name: addLiquidity
Phi
[i]Type for tokenA

Name: tokenA Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tokenB_1(IERC20) := ϕ(['tokenB_1'])
Function name: addLiquidity
Phi
[i]Type for tokenB

Name: tokenB Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountADesired_1(uint256) := ϕ(['amountADesired_1'])
Function name: addLiquidity
Phi
[i]Type for amountADesired

Name: amountADesired Function: addLiquidity
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountBDesired_1(uint256) := ϕ(['amountBDesired_1'])
Function name: addLiquidity
Phi
[i]Type for amountBDesired

Name: amountBDesired Function: addLiquidity
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['to_1'])
Function name: addLiquidity
Phi
[i]Type for to

Name: to Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: to
Fields: 
Finance Type: undef
done.
deadline_1(uint256) := ϕ(['deadline_1'])
Function name: addLiquidity
Phi
[i]Type for deadline

Name: deadline Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_3(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_0', 'pool_12'])
Function name: addLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
nativeAsset_2(IERC20) := ϕ(['nativeAsset_4', 'nativeAsset_3', 'nativeAsset_0', 'nativeAsset_1', 'nativeAsset_7'])
Function name: addLiquidity
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, VaderRouterV2.ensure(uint256)(deadline_1)
typecheckig node...
MODIFIER_CALL, VaderRouterV2.ensure(uint256)(deadline_1)
Internal call...
ensure
deadline
Function: ensure
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
added
xyz
Function name: ensure
Function Visibility: internal
clearning node...
clearing ir...?
deadline_1(uint256) := ϕ(['deadline_1', 'deadline_1', 'deadline_1'])
has variable
[i] deadline cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
deadline_1(uint256) := ϕ(['deadline_1', 'deadline_1', 'deadline_1'])
Function name: ensure
Phi
[i]Type for deadline

Name: deadline Function: ensure
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_87(bool) = deadline_1 >= block.timestamp
has variable
[i] TMP_87 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,VaderRouterV2::ensure: Expired)
typecheckig node...
TMP_87(bool) = deadline_1 >= block.timestamp
Function name: ensure
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_87

Name: TMP_87 Function: ensure
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,VaderRouterV2::ensure: Expired)
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "ensure":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: ensure
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_20(bool) = tokenA_1 == nativeAsset_3
has variable
[i] TMP_20 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
CONDITION TMP_20
typecheckig node...
TMP_20(bool) = tokenA_1 == nativeAsset_3
Function name: addLiquidity
[i]Type for TMP_20

Name: TMP_20 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_20
Condition...
Conidtion: 
TMP_20
TMP_20
clearning node...
clearing ir...?
TMP_23(bool) = tokenB_1 == nativeAsset_3
has variable
[i] TMP_23 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_24(bool) = HIGH_LEVEL_CALL, dest:pool_4(IVaderPoolV2), function:supported, arguments:['tokenA_1']  
has variable
[i] TMP_24 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_6(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_5', 'pool_16', 'pool_17', 'pool_12'])
has variable
clearing ir...?
nativeAsset_4(IERC20) := ϕ(['nativeAsset_3', 'nativeAsset_7', 'nativeAsset_4', 'nativeAsset_1'])
has variable
clearing ir...?
TMP_25(bool) = TMP_23 && TMP_24
has variable
[i] TMP_25 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,VaderRouterV2::addLiquidity: Unsupported Assets Specified)
typecheckig node...
TMP_23(bool) = tokenB_1 == nativeAsset_3
Function name: addLiquidity
[i]Type for TMP_23

Name: TMP_23 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_24(bool) = HIGH_LEVEL_CALL, dest:pool_4(IVaderPoolV2), function:supported, arguments:['tokenA_1']  
Function name: addLiquidity
High Call: supported
func name:supported
other func name:supported
TMP_24
[i]Type for TMP_24

Name: TMP_24 Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_6(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_5', 'pool_16', 'pool_17', 'pool_12'])
Function name: addLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
nativeAsset_4(IERC20) := ϕ(['nativeAsset_3', 'nativeAsset_7', 'nativeAsset_4', 'nativeAsset_1'])
Function name: addLiquidity
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
TMP_25(bool) = TMP_23 && TMP_24
Function name: addLiquidity
[i]Type for TMP_25

Name: TMP_25 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,VaderRouterV2::addLiquidity: Unsupported Assets Specified)
[i]Type for TMP_26

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
foreignAsset_2(IERC20) := tokenA_1(IERC20)
has variable
[i] foreignAsset cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
foreignAsset_2(IERC20) := tokenA_1(IERC20)
Function name: addLiquidity
asgn

Name: tokenA Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignAsset Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignAsset

Name: foreignAsset Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_21(bool) = HIGH_LEVEL_CALL, dest:pool_4(IVaderPoolV2), function:supported, arguments:['tokenB_1']  
has variable
[i] TMP_21 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_5(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_4', 'pool_17', 'pool_12'])
has variable
clearing ir...?
TMP_22(None) = SOLIDITY_CALL require(bool,string)(TMP_21,VaderRouterV2::addLiquidity: Unsupported Assets Specified)
typecheckig node...
TMP_21(bool) = HIGH_LEVEL_CALL, dest:pool_4(IVaderPoolV2), function:supported, arguments:['tokenB_1']  
Function name: addLiquidity
High Call: supported
func name:supported
other func name:supported
TMP_21
[i]Type for TMP_21

Name: TMP_21 Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_5(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_4', 'pool_17', 'pool_12'])
Function name: addLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
TMP_22(None) = SOLIDITY_CALL require(bool,string)(TMP_21,VaderRouterV2::addLiquidity: Unsupported Assets Specified)
[i]Type for TMP_22

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
foreignAsset_1(IERC20) := tokenB_1(IERC20)
has variable
[i] foreignAsset cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
foreignAsset_1(IERC20) := tokenB_1(IERC20)
Function name: addLiquidity
asgn

Name: tokenB Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignAsset Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignAsset

Name: foreignAsset Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
foreignDeposit_2(uint256) := amountADesired_1(uint256)
has variable
[i] foreignDeposit cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
foreignDeposit_2(uint256) := amountADesired_1(uint256)
Function name: addLiquidity
asgn

Name: amountADesired Function: addLiquidity
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignDeposit

Name: foreignDeposit Function: addLiquidity
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
foreignDeposit_1(uint256) := amountBDesired_1(uint256)
has variable
[i] foreignDeposit cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
foreignDeposit_1(uint256) := amountBDesired_1(uint256)
Function name: addLiquidity
asgn

Name: amountBDesired Function: addLiquidity
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignDeposit

Name: foreignDeposit Function: addLiquidity
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
nativeDeposit_1(uint256) := amountADesired_1(uint256)
has variable
[i] nativeDeposit cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
nativeDeposit_1(uint256) := amountADesired_1(uint256)
Function name: addLiquidity
asgn

Name: amountADesired Function: addLiquidity
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nativeDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeDeposit

Name: nativeDeposit Function: addLiquidity
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
foreignAsset_3(IERC20) := ϕ(['foreignAsset_1', 'foreignAsset_2'])
has variable
[i] foreignAsset cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
nativeDeposit_3(uint256) := ϕ(['nativeDeposit_1', 'nativeDeposit_2'])
has variable
[i] nativeDeposit cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
foreignDeposit_3(uint256) := ϕ(['foreignDeposit_2', 'foreignDeposit_1'])
has variable
[i] foreignDeposit cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
foreignAsset_3(IERC20) := ϕ(['foreignAsset_1', 'foreignAsset_2'])
Function name: addLiquidity
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeDeposit_3(uint256) := ϕ(['nativeDeposit_1', 'nativeDeposit_2'])
Function name: addLiquidity
Phi
[i]Type for nativeDeposit

Name: nativeDeposit Function: addLiquidity
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
foreignDeposit_3(uint256) := ϕ(['foreignDeposit_2', 'foreignDeposit_1'])
Function name: addLiquidity
Phi
[i]Type for foreignDeposit

Name: foreignDeposit Function: addLiquidity
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_27(uint256) = HIGH_LEVEL_CALL, dest:pool_6(IVaderPoolV2), function:mint, arguments:['foreignAsset_3', 'nativeDeposit_3', 'foreignDeposit_3', 'msg.sender', 'to_1']  
has variable
[i] TMP_27 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_7(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_6', 'pool_12'])
has variable
clearing ir...?
liquidity_1(uint256) := TMP_27(uint256)
has variable
[i] liquidity cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_27(uint256) = HIGH_LEVEL_CALL, dest:pool_6(IVaderPoolV2), function:mint, arguments:['foreignAsset_3', 'nativeDeposit_3', 'foreignDeposit_3', 'msg.sender', 'to_1']  
Function name: addLiquidity
High Call: mint
func name:mint
other func name:mint
TMP_27
hlc contract name: POOL func_name: mint
wfc len: 0
COPIED
[i]Type for TMP_27

Name: TMP_27 Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_7(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_6', 'pool_12'])
Function name: addLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
liquidity_1(uint256) := TMP_27(uint256)
Function name: addLiquidity
asgn

Name: TMP_27 Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for liquidity

Name: liquidity Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
nativeDeposit_2(uint256) := amountBDesired_1(uint256)
has variable
[i] nativeDeposit cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
nativeDeposit_2(uint256) := amountBDesired_1(uint256)
Function name: addLiquidity
asgn

Name: amountBDesired Function: addLiquidity
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nativeDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeDeposit

Name: nativeDeposit Function: addLiquidity
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "addLiquidity":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: addLiquidity

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_19

Name: TMP_19 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_19
RETURN

Name: TMP_19 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "addLiquidity":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: addLiquidity

Name: TMP_19 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'tokA')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pool
Finding type for pool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'POOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'VaderReserve')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: addLiquidity
Function name: addLiquidity
Function Visibility (test): public
tokenA
Finding type for tokenA...
IERC20
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: tokenA Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
tokenB
Finding type for tokenB...
IERC20
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: tokenB Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amountADesired
Finding type for amountADesired...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountADesired Function: addLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amountBDesired
Finding type for amountBDesired...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountBDesired Function: addLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
to
Finding type for to...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: to Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
deadline
Finding type for deadline...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: deadline Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
0
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 5
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
tokenA_1(IERC20) := ϕ(['tokenA_1'])
has variable
[i] tokenA cleared

Name: tokenA Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
tokenB_1(IERC20) := ϕ(['tokenB_1'])
has variable
[i] tokenB cleared

Name: tokenB Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
amountADesired_1(uint256) := ϕ(['amountADesired_1'])
has variable
[i] amountADesired cleared

Name: amountADesired Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
amountBDesired_1(uint256) := ϕ(['amountBDesired_1'])
has variable
[i] amountBDesired cleared

Name: amountBDesired Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared

Name: to Function: addLiquidity
Num: 
Den: 
Norm: u
LF: to
Fields: 
Finance Type: undef
clearing ir...?
deadline_1(uint256) := ϕ(['deadline_1'])
has variable
[i] deadline cleared

Name: deadline Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_3(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_0', 'pool_12'])
has variable
clearing ir...?
nativeAsset_2(IERC20) := ϕ(['nativeAsset_4', 'nativeAsset_3', 'nativeAsset_0', 'nativeAsset_1', 'nativeAsset_7'])
has variable
typecheckig node...
tokenA_1(IERC20) := ϕ(['tokenA_1'])
Function name: addLiquidity
Phi
[i]Type for tokenA

Name: tokenA Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tokenB_1(IERC20) := ϕ(['tokenB_1'])
Function name: addLiquidity
Phi
[i]Type for tokenB

Name: tokenB Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountADesired_1(uint256) := ϕ(['amountADesired_1'])
Function name: addLiquidity
Phi
[i]Type for amountADesired

Name: amountADesired Function: addLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amountBDesired_1(uint256) := ϕ(['amountBDesired_1'])
Function name: addLiquidity
Phi
[i]Type for amountBDesired

Name: amountBDesired Function: addLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['to_1'])
Function name: addLiquidity
Phi
[i]Type for to

Name: to Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
deadline_1(uint256) := ϕ(['deadline_1'])
Function name: addLiquidity
Phi
[i]Type for deadline

Name: deadline Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_3(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_0', 'pool_12'])
Function name: addLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
nativeAsset_2(IERC20) := ϕ(['nativeAsset_4', 'nativeAsset_3', 'nativeAsset_0', 'nativeAsset_1', 'nativeAsset_7'])
Function name: addLiquidity
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, VaderRouterV2.ensure(uint256)(deadline_1)
typecheckig node...
MODIFIER_CALL, VaderRouterV2.ensure(uint256)(deadline_1)
Internal call...
ensure
deadline
Function: ensure
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
0
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_20(bool) = tokenA_1 == nativeAsset_3
has variable
[i] TMP_20 cleared

Name: TMP_20 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
CONDITION TMP_20
typecheckig node...
TMP_20(bool) = tokenA_1 == nativeAsset_3
Function name: addLiquidity
[i]Type for TMP_20

Name: TMP_20 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_20
Condition...
Conidtion: 
TMP_20
TMP_20
clearning node...
clearing ir...?
TMP_23(bool) = tokenB_1 == nativeAsset_3
has variable
[i] TMP_23 cleared

Name: TMP_23 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_24(bool) = HIGH_LEVEL_CALL, dest:pool_4(IVaderPoolV2), function:supported, arguments:['tokenA_1']  
has variable
[i] TMP_24 cleared

Name: TMP_24 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_6(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_5', 'pool_16', 'pool_17', 'pool_12'])
has variable
clearing ir...?
nativeAsset_4(IERC20) := ϕ(['nativeAsset_3', 'nativeAsset_7', 'nativeAsset_4', 'nativeAsset_1'])
has variable
clearing ir...?
TMP_25(bool) = TMP_23 && TMP_24
has variable
[i] TMP_25 cleared

Name: TMP_25 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,VaderRouterV2::addLiquidity: Unsupported Assets Specified)
typecheckig node...
TMP_23(bool) = tokenB_1 == nativeAsset_3
Function name: addLiquidity
[i]Type for TMP_23

Name: TMP_23 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_24(bool) = HIGH_LEVEL_CALL, dest:pool_4(IVaderPoolV2), function:supported, arguments:['tokenA_1']  
Function name: addLiquidity
High Call: supported
func name:supported
other func name:supported
TMP_24
[i]Type for TMP_24

Name: TMP_24 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_6(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_5', 'pool_16', 'pool_17', 'pool_12'])
Function name: addLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
nativeAsset_4(IERC20) := ϕ(['nativeAsset_3', 'nativeAsset_7', 'nativeAsset_4', 'nativeAsset_1'])
Function name: addLiquidity
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
TMP_25(bool) = TMP_23 && TMP_24
Function name: addLiquidity
[i]Type for TMP_25

Name: TMP_25 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,VaderRouterV2::addLiquidity: Unsupported Assets Specified)
[i]Type for TMP_26

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
foreignAsset_2(IERC20) := tokenA_1(IERC20)
has variable
[i] foreignAsset cleared

Name: foreignAsset Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
foreignAsset_2(IERC20) := tokenA_1(IERC20)
Function name: addLiquidity
asgn

Name: tokenA Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignAsset Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignAsset

Name: foreignAsset Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_21(bool) = HIGH_LEVEL_CALL, dest:pool_4(IVaderPoolV2), function:supported, arguments:['tokenB_1']  
has variable
[i] TMP_21 cleared

Name: TMP_21 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_5(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_4', 'pool_17', 'pool_12'])
has variable
clearing ir...?
TMP_22(None) = SOLIDITY_CALL require(bool,string)(TMP_21,VaderRouterV2::addLiquidity: Unsupported Assets Specified)
typecheckig node...
TMP_21(bool) = HIGH_LEVEL_CALL, dest:pool_4(IVaderPoolV2), function:supported, arguments:['tokenB_1']  
Function name: addLiquidity
High Call: supported
func name:supported
other func name:supported
TMP_21
[i]Type for TMP_21

Name: TMP_21 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_5(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_4', 'pool_17', 'pool_12'])
Function name: addLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
TMP_22(None) = SOLIDITY_CALL require(bool,string)(TMP_21,VaderRouterV2::addLiquidity: Unsupported Assets Specified)
[i]Type for TMP_22

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
foreignAsset_1(IERC20) := tokenB_1(IERC20)
has variable
[i] foreignAsset cleared

Name: foreignAsset Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
foreignAsset_1(IERC20) := tokenB_1(IERC20)
Function name: addLiquidity
asgn

Name: tokenB Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: foreignAsset Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignAsset

Name: foreignAsset Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
foreignDeposit_2(uint256) := amountADesired_1(uint256)
has variable
[i] foreignDeposit cleared

Name: foreignDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
foreignDeposit_2(uint256) := amountADesired_1(uint256)
Function name: addLiquidity
asgn

Name: amountADesired Function: addLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignDeposit

Name: foreignDeposit Function: addLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
foreignDeposit_1(uint256) := amountBDesired_1(uint256)
has variable
[i] foreignDeposit cleared

Name: foreignDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
foreignDeposit_1(uint256) := amountBDesired_1(uint256)
Function name: addLiquidity
asgn

Name: amountBDesired Function: addLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: foreignDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for foreignDeposit

Name: foreignDeposit Function: addLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
nativeDeposit_1(uint256) := amountADesired_1(uint256)
has variable
[i] nativeDeposit cleared

Name: nativeDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
nativeDeposit_1(uint256) := amountADesired_1(uint256)
Function name: addLiquidity
asgn

Name: amountADesired Function: addLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeDeposit

Name: nativeDeposit Function: addLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
foreignAsset_3(IERC20) := ϕ(['foreignAsset_1', 'foreignAsset_2'])
has variable
[i] foreignAsset cleared

Name: foreignAsset Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
nativeDeposit_3(uint256) := ϕ(['nativeDeposit_1', 'nativeDeposit_2'])
has variable
[i] nativeDeposit cleared

Name: nativeDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
foreignDeposit_3(uint256) := ϕ(['foreignDeposit_2', 'foreignDeposit_1'])
has variable
[i] foreignDeposit cleared

Name: foreignDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
foreignAsset_3(IERC20) := ϕ(['foreignAsset_1', 'foreignAsset_2'])
Function name: addLiquidity
Phi
[i]Type for foreignAsset

Name: foreignAsset Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nativeDeposit_3(uint256) := ϕ(['nativeDeposit_1', 'nativeDeposit_2'])
Function name: addLiquidity
Phi
[i]Type for nativeDeposit

Name: nativeDeposit Function: addLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
foreignDeposit_3(uint256) := ϕ(['foreignDeposit_2', 'foreignDeposit_1'])
Function name: addLiquidity
Phi
[i]Type for foreignDeposit

Name: foreignDeposit Function: addLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_27(uint256) = HIGH_LEVEL_CALL, dest:pool_6(IVaderPoolV2), function:mint, arguments:['foreignAsset_3', 'nativeDeposit_3', 'foreignDeposit_3', 'msg.sender', 'to_1']  
has variable
[i] TMP_27 cleared

Name: TMP_27 Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_7(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_6', 'pool_12'])
has variable
clearing ir...?
liquidity_1(uint256) := TMP_27(uint256)
has variable
[i] liquidity cleared

Name: liquidity Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_27(uint256) = HIGH_LEVEL_CALL, dest:pool_6(IVaderPoolV2), function:mint, arguments:['foreignAsset_3', 'nativeDeposit_3', 'foreignDeposit_3', 'msg.sender', 'to_1']  
Function name: addLiquidity
High Call: mint
func name:mint
other func name:mint
TMP_27
hlc contract name: POOL func_name: mint
wfc len: 0
COPIED
[i]Type for TMP_27

Name: TMP_27 Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_7(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_6', 'pool_12'])
Function name: addLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
liquidity_1(uint256) := TMP_27(uint256)
Function name: addLiquidity
asgn

Name: TMP_27 Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for liquidity

Name: liquidity Function: addLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
nativeDeposit_2(uint256) := amountBDesired_1(uint256)
has variable
[i] nativeDeposit cleared

Name: nativeDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
nativeDeposit_2(uint256) := amountBDesired_1(uint256)
Function name: addLiquidity
asgn

Name: amountBDesired Function: addLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: nativeDeposit Function: addLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nativeDeposit

Name: nativeDeposit Function: addLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "addLiquidity":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: addLiquidity

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'tokA')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pool
Finding type for pool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'POOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'VaderReserve')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: removeLiquidity
Function name: removeLiquidity
Function Visibility (test): public
tokenA
Finding type for tokenA...
address
Check copy_toekn_tuple
(-1, -1, 0, 'tokA')
----
Type: address
address
Final Type: address

Name: tokenA Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
[*]Type fetched successfully
tokenB
Finding type for tokenB...
address
Check copy_toekn_tuple
(-1, -1, 0, 'tokB')
----
Type: address
address
Final Type: address

Name: tokenB Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef
[*]Type fetched successfully
id
Finding type for id...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: id Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amountAMin
Finding type for amountAMin...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountAMin Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amountBMin
Finding type for amountBMin...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountBMin Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
to
Finding type for to...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: to Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
deadline
Finding type for deadline...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: deadline Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: tokA
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: tokB
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 5
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 6
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
pool_8(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_0', 'pool_12'])
has variable
clearing ir...?
nativeAsset_5(IERC20) := ϕ(['nativeAsset_4', 'nativeAsset_3', 'nativeAsset_0', 'nativeAsset_1', 'nativeAsset_7'])
has variable
clearing ir...?
reserve_1(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_0'])
has variable
typecheckig node...
pool_8(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_0', 'pool_12'])
Function name: removeLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
nativeAsset_5(IERC20) := ϕ(['nativeAsset_4', 'nativeAsset_3', 'nativeAsset_0', 'nativeAsset_1', 'nativeAsset_7'])
Function name: removeLiquidity
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
reserve_1(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_0'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, VaderRouterV2.ensure(uint256)(deadline_1)
typecheckig node...
MODIFIER_CALL, VaderRouterV2.ensure(uint256)(deadline_1)
Internal call...
ensure
deadline
Function: ensure
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
0
done.
clearning node...
clearing ir...?
TMP_29(IERC20) = HIGH_LEVEL_CALL, dest:pool_9(IVaderPoolV2), function:positionForeignAsset, arguments:['id_1']  
has variable
[i] TMP_29 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_10(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_9', 'pool_17', 'pool_12'])
has variable
clearing ir...?
nativeAsset_7(IERC20) := ϕ(['nativeAsset_4', 'nativeAsset_3', 'nativeAsset_6', 'nativeAsset_1', 'nativeAsset_7'])
has variable
clearing ir...?
reserve_3(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_2'])
has variable
clearing ir...?
_foreignAsset_1(IERC20) := TMP_29(IERC20)
has variable
[i] _foreignAsset cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_29(IERC20) = HIGH_LEVEL_CALL, dest:pool_9(IVaderPoolV2), function:positionForeignAsset, arguments:['id_1']  
Function name: removeLiquidity
High Call: positionForeignAsset
func name:positionForeignAsset
other func name:positionForeignAsset
TMP_29
hlc contract name: POOL func_name: positionForeignAsset
('c', [-1], [-1], 0, 'tokB')
id
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'tokB', -1)
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS
COPIED
[i]Type for TMP_29

Name: TMP_29 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef
done.
pool_10(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_9', 'pool_17', 'pool_12'])
Function name: removeLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
nativeAsset_7(IERC20) := ϕ(['nativeAsset_4', 'nativeAsset_3', 'nativeAsset_6', 'nativeAsset_1', 'nativeAsset_7'])
Function name: removeLiquidity
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
reserve_3(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_2'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
done.
_foreignAsset_1(IERC20) := TMP_29(IERC20)
Function name: removeLiquidity
asgn

Name: TMP_29 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef

Name: _foreignAsset Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _foreignAsset

Name: _foreignAsset Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_7(IERC20)
has variable
[i] _nativeAsset cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_7(IERC20)
Function name: removeLiquidity
asgn

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef

Name: _nativeAsset Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _nativeAsset

Name: _nativeAsset Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_30 = CONVERT tokenA_1 to IERC20
has variable
[i] TMP_30 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_31(bool) = _nativeAsset_1 == TMP_30
has variable
[i] TMP_31 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
isNativeA_1(bool) := TMP_31(bool)
has variable
[i] isNativeA cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_30 = CONVERT tokenA_1 to IERC20
Function name: removeLiquidity

Name: tokenA Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef

Name: TMP_30 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
TMP_31(bool) = _nativeAsset_1 == TMP_30
Function name: removeLiquidity
[i]Type for TMP_31

Name: TMP_31 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
isNativeA_1(bool) := TMP_31(bool)
Function name: removeLiquidity
asgn

Name: TMP_31 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: isNativeA Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for isNativeA

Name: isNativeA Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
isNativeA_1(bool) := TMP_31(bool)
XXXXX
clearning node...
clearing ir...?
CONDITION isNativeA_1
typecheckig node...
CONDITION isNativeA_1
Condition...
Conidtion: 
isNativeA_1
isNativeA_1
clearning node...
clearing ir...?
TMP_32 = CONVERT tokenB_1 to IERC20
has variable
[i] TMP_32 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_33(bool) = TMP_32 == _foreignAsset_1
has variable
[i] TMP_33 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_34(None) = SOLIDITY_CALL require(bool,string)(TMP_33,VaderRouterV2::removeLiquidity: Incorrect Addresses Specified)
typecheckig node...
TMP_32 = CONVERT tokenB_1 to IERC20
Function name: removeLiquidity

Name: tokenB Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef

Name: TMP_32 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef
done.
TMP_33(bool) = TMP_32 == _foreignAsset_1
Function name: removeLiquidity
[i]Type for TMP_33

Name: TMP_33 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_34(None) = SOLIDITY_CALL require(bool,string)(TMP_33,VaderRouterV2::removeLiquidity: Incorrect Addresses Specified)
[i]Type for TMP_34

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_35 = CONVERT tokenA_1 to IERC20
has variable
[i] TMP_35 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_36(bool) = TMP_35 == _foreignAsset_1
has variable
[i] TMP_36 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_37 = CONVERT tokenB_1 to IERC20
has variable
[i] TMP_37 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_38(bool) = TMP_37 == _nativeAsset_1
has variable
[i] TMP_38 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_39(bool) = TMP_36 && TMP_38
has variable
[i] TMP_39 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_40(None) = SOLIDITY_CALL require(bool,string)(TMP_39,VaderRouterV2::removeLiquidity: Incorrect Addresses Specified)
typecheckig node...
TMP_35 = CONVERT tokenA_1 to IERC20
Function name: removeLiquidity

Name: tokenA Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef

Name: TMP_35 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_35

Name: TMP_35 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
TMP_36(bool) = TMP_35 == _foreignAsset_1
Function name: removeLiquidity
[i]Type for TMP_36

Name: TMP_36 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_37 = CONVERT tokenB_1 to IERC20
Function name: removeLiquidity

Name: tokenB Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef

Name: TMP_37 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_37

Name: TMP_37 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef
done.
TMP_38(bool) = TMP_37 == _nativeAsset_1
Function name: removeLiquidity
[i]Type for TMP_38

Name: TMP_38 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_39(bool) = TMP_36 && TMP_38
Function name: removeLiquidity
[i]Type for TMP_39

Name: TMP_39 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_40(None) = SOLIDITY_CALL require(bool,string)(TMP_39,VaderRouterV2::removeLiquidity: Incorrect Addresses Specified)
[i]Type for TMP_40

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_41 = CONVERT pool_10 to address
has variable
[i] TMP_41 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
HIGH_LEVEL_CALL, dest:pool_10(IVaderPoolV2), function:transferFrom, arguments:['msg.sender', 'TMP_41', 'id_1']  
clearing ir...?
pool_11(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_10', 'pool_16', 'pool_17', 'pool_12'])
has variable
clearing ir...?
reserve_4(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_3'])
has variable
typecheckig node...
TMP_41 = CONVERT pool_10 to address
Function name: removeLiquidity

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef

Name: TMP_41 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_41

Name: TMP_41 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:pool_10(IVaderPoolV2), function:transferFrom, arguments:['msg.sender', 'TMP_41', 'id_1']  
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
done.
pool_11(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_10', 'pool_16', 'pool_17', 'pool_12'])
Function name: removeLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
reserve_4(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_3'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:pool_11(IVaderPoolV2), function:burn, arguments:['id_1', 'to_1']  
has variable
clearing ir...?
pool_12(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_11', 'pool_12'])
has variable
clearing ir...?
reserve_5(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_4'])
has variable
clearing ir...?
amountNative_1(uint256)= UNPACK TUPLE_0 index: 0 
has variable
[i] amountNative cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
amountForeign_1(uint256)= UNPACK TUPLE_0 index: 1 
has variable
[i] amountForeign cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
coveredLoss_1(uint256)= UNPACK TUPLE_0 index: 2 
has variable
[i] coveredLoss cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:pool_11(IVaderPoolV2), function:burn, arguments:['id_1', 'to_1']  
Function name: removeLiquidity
High Call: burn
func name:burn
other func name:burn
TUPLE_0
hlc contract name: POOL func_name: burn
('c', [1], [-1], 0, None)
id
to
('c', [2], [-1], 0, None)
id
to
('c', [1], [-1], 6, None)
id
to
wfc len: 3
COPIED
[i]Type for TUPLE_0

Name: TUPLE_0 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_12(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_11', 'pool_12'])
Function name: removeLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
reserve_5(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_4'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
done.
amountNative_1(uint256)= UNPACK TUPLE_0 index: 0 
Function name: removeLiquidity
Reading tuple TUPLE_0 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amountNative

Name: amountNative Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amountForeign_1(uint256)= UNPACK TUPLE_0 index: 1 
Function name: removeLiquidity
Reading tuple TUPLE_0 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amountForeign

Name: amountForeign Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
coveredLoss_1(uint256)= UNPACK TUPLE_0 index: 2 
Function name: removeLiquidity
Reading tuple TUPLE_0 index 2
Check copy_toekn_tuple
([1], [-1], 6, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for coveredLoss

Name: coveredLoss Function: removeLiquidity
Num: 1
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION isNativeA_1
typecheckig node...
CONDITION isNativeA_1
Condition...
Conidtion: 
isNativeA_1
isNativeA_1
clearning node...
clearing ir...?
amountA_2(uint256) := amountNative_1(uint256)
has variable
[i] amountA cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
amountB_2(uint256) := amountForeign_1(uint256)
has variable
[i] amountB cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
amountA_2(uint256) := amountNative_1(uint256)
Function name: removeLiquidity
asgn

Name: amountNative Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountA Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amountB_2(uint256) := amountForeign_1(uint256)
Function name: removeLiquidity
asgn

Name: amountForeign Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountB Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
amountA_3(uint256) := ϕ(['amountA_1', 'amountA_2'])
has variable
[i] amountA cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
amountB_3(uint256) := ϕ(['amountB_1', 'amountB_2'])
has variable
[i] amountB cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
amountA_3(uint256) := ϕ(['amountA_1', 'amountA_2'])
Function name: removeLiquidity
Phi
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amountB_3(uint256) := ϕ(['amountB_1', 'amountB_2'])
Function name: removeLiquidity
Phi
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_43(bool) = amountA_3 >= amountAMin_1
has variable
[i] TMP_43 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,VaderRouterV2: INSUFFICIENT_A_AMOUNT)
typecheckig node...
TMP_43(bool) = amountA_3 >= amountAMin_1
Function name: removeLiquidity
testing gt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_43

Name: TMP_43 Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,VaderRouterV2: INSUFFICIENT_A_AMOUNT)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
amountA_1(uint256) := amountForeign_1(uint256)
has variable
[i] amountA cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
amountB_1(uint256) := amountNative_1(uint256)
has variable
[i] amountB cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
amountA_1(uint256) := amountForeign_1(uint256)
Function name: removeLiquidity
asgn

Name: amountForeign Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountA Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amountB_1(uint256) := amountNative_1(uint256)
Function name: removeLiquidity
asgn

Name: amountNative Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountB Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_45(bool) = amountB_3 >= amountBMin_1
has variable
[i] TMP_45 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_46(None) = SOLIDITY_CALL require(bool,string)(TMP_45,VaderRouterV2: INSUFFICIENT_B_AMOUNT)
typecheckig node...
TMP_45(bool) = amountB_3 >= amountBMin_1
Function name: removeLiquidity
testing gt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
Error with TMP_45 in function removeLiquidity
Error with: TMP_45 in function removeLiquidity
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f7a266638b0>]
[i]Type for TMP_45

Name: TMP_45 Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_46(None) = SOLIDITY_CALL require(bool,string)(TMP_45,VaderRouterV2: INSUFFICIENT_B_AMOUNT)
[i]Type for TMP_46

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_47(uint256) = HIGH_LEVEL_CALL, dest:reserve_5(IVaderReserve), function:reimburseImpermanentLoss, arguments:['msg.sender', 'coveredLoss_1']  
has variable
[i] TMP_47 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
reserve_6(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_5'])
has variable
clearing ir...?
temp_1(uint256) := TMP_47(uint256)
has variable
[i] temp cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_47(uint256) = HIGH_LEVEL_CALL, dest:reserve_5(IVaderReserve), function:reimburseImpermanentLoss, arguments:['msg.sender', 'coveredLoss_1']  
Function name: removeLiquidity
High Call: reimburseImpermanentLoss
func name:reimburseImpermanentLoss
other func name:reimburseImpermanentLoss
TMP_47
hlc contract name: VaderReserve func_name: reimburseImpermanentLoss
msg.sender
msg.sender
not variable
not variable
coveredLoss_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
-100
added
xyz
Function name: reimburseImpermanentLoss
Function Visibility: external
clearning node...
clearing ir...?
vader_9(IERC20) := ϕ(['vader_0', 'vader_1', 'vader_3', 'vader_8', 'vader_11'])
has variable
clearing ir...?
router_2(address) := ϕ(['router_1', 'router_0'])
has variable
typecheckig node...
vader_9(IERC20) := ϕ(['vader_0', 'vader_1', 'vader_3', 'vader_8', 'vader_11'])
Function name: reimburseImpermanentLoss
Phi
[i]Type for vader

Name: vader Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
router_2(address) := ϕ(['router_1', 'router_0'])
Function name: reimburseImpermanentLoss
Phi
[i]Type for router

Name: router Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_34(bool) = msg.sender == router_2
has variable
[i] TMP_34 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderReserve::reimburseImpermanentLoss: Insufficient Priviledges)
typecheckig node...
TMP_34(bool) = msg.sender == router_2
Function name: reimburseImpermanentLoss
[i]Type for TMP_34

Name: TMP_34 Function: reimburseImpermanentLoss
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderReserve::reimburseImpermanentLoss: Insufficient Priviledges)
[i]Type for TMP_35

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_36(uint256) = INTERNAL_CALL, VaderReserve.reserve()()
has variable
[i] TMP_36 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
vader_10(IERC20) := ϕ(['vader_3'])
has variable
clearing ir...?
TMP_37(uint256) = INTERNAL_CALL, VaderReserve._min(uint256,uint256)(TMP_36,amount_1)
has variable
[i] TMP_37 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
actualAmount_1(uint256) := TMP_37(uint256)
has variable
[i] actualAmount cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_36(uint256) = INTERNAL_CALL, VaderReserve.reserve()()
Function name: reimburseImpermanentLoss
Internal call...
reserve
Function: reserve
ic
Internal cal param_cache
-100
added
xyz
Function name: reserve
Function Visibility: public
clearning node...
clearing ir...?
vader_2(IERC20) := ϕ(['vader_0', 'vader_1', 'vader_3', 'vader_8', 'vader_11'])
has variable
typecheckig node...
vader_2(IERC20) := ϕ(['vader_0', 'vader_1', 'vader_3', 'vader_8', 'vader_11'])
Function name: reserve
Phi
[i]Type for vader

Name: vader Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_18 = CONVERT this to address
has variable
[i] TMP_18 cleared

Name: TMP_18 Function: reserve
Num: 
Den: 
Norm: u
LF: VaderReserve
Fields: 
Finance Type: undef
clearing ir...?
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:vader_2(IERC20), function:balanceOf, arguments:['TMP_18']  
has variable
[i] TMP_19 cleared

Name: TMP_19 Function: reserve
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
vader_3(IERC20) := ϕ(['vader_1', 'vader_3', 'vader_8', 'vader_11', 'vader_2'])
has variable
clearing ir...?
RETURN TMP_19
typecheckig node...
TMP_18 = CONVERT this to address
Function name: reserve
[i]Type for TMP_18

Name: TMP_18 Function: reserve
Num: 
Den: 
Norm: u
LF: VaderRouterV2
Fields: 
Finance Type: undef
done.
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:vader_2(IERC20), function:balanceOf, arguments:['TMP_18']  
Function name: reserve
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_19
hlc contract name: VADER func_name: balanceOf
('c', [2], [-1], 0, None)
TMP_18
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_19

Name: TMP_19 Function: reserve
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
vader_3(IERC20) := ϕ(['vader_1', 'vader_3', 'vader_8', 'vader_11', 'vader_2'])
Function name: reserve
Phi
[i]Type for vader

Name: vader Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
RETURN TMP_19
RETURN

Name: TMP_19 Function: reserve
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "reserve":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: reserve

Name: TMP_19 Function: reserve
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_36

Name: TMP_36 Function: reimburseImpermanentLoss
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
vader_10(IERC20) := ϕ(['vader_3'])
Function name: reimburseImpermanentLoss
Phi
[i]Type for vader

Name: vader Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
TMP_37(uint256) = INTERNAL_CALL, VaderReserve._min(uint256,uint256)(TMP_36,amount_1)
Function name: reimburseImpermanentLoss
Internal call...
_min
TMP_36
amount
Function: _min
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
added
xyz
Function name: _min
Function Visibility: private
clearning node...
clearing ir...?
a_1(uint256) := ϕ(['TMP_36', 'TMP_22'])
has variable
[i] a cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
b_1(uint256) := ϕ(['amount_1', 'amount_1'])
has variable
[i] b cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
a_1(uint256) := ϕ(['TMP_36', 'TMP_22'])
Function name: _min
Phi
[i]Type for a

Name: a Function: _min
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
b_1(uint256) := ϕ(['amount_1', 'amount_1'])
Function name: _min
Phi
[i]Type for b

Name: b Function: _min
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_40(bool) = a_1 < b_1
has variable
[i] TMP_40 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
CONDITION TMP_40
typecheckig node...
TMP_40(bool) = a_1 < b_1
Function name: _min
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
Error with TMP_40 in function _min
Error with: TMP_40 in function _min
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f7a266638b0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f7a273e8d60>]
[i]Type for TMP_40

Name: TMP_40 Function: _min
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_40
Condition...
Conidtion: 
TMP_40
TMP_40
clearning node...
clearing ir...?
RETURN b_1
typecheckig node...
RETURN b_1
RETURN

Name: b Function: _min
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
RETURN a_1
typecheckig node...
RETURN a_1
RETURN

Name: a Function: _min
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_min":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _min

Name: a Function: _min
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
Check copy_toekn_tuple
([2], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for TMP_37

Name: TMP_37 Function: reimburseImpermanentLoss
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
actualAmount_1(uint256) := TMP_37(uint256)
Function name: reimburseImpermanentLoss
asgn

Name: TMP_37 Function: reimburseImpermanentLoss
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: actualAmount Function: reimburseImpermanentLoss
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for actualAmount

Name: actualAmount Function: reimburseImpermanentLoss
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['vader_11', 'recipient_1', 'actualAmount_1'] 
typecheckig node...
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['vader_11', 'recipient_1', 'actualAmount_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
RETURN 0
typecheckig node...
RETURN 0
RETURN
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "reimburseImpermanentLoss":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: reimburseImpermanentLoss
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_47

Name: TMP_47 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
reserve_6(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_5'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
done.
temp_1(uint256) := TMP_47(uint256)
Function name: removeLiquidity
asgn

Name: TMP_47 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: temp Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for temp

Name: temp Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "removeLiquidity":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
pool_8(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_0', 'pool_12'])
Function name: removeLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
nativeAsset_5(IERC20) := ϕ(['nativeAsset_4', 'nativeAsset_3', 'nativeAsset_0', 'nativeAsset_1', 'nativeAsset_7'])
Function name: removeLiquidity
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
reserve_1(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_0'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, VaderRouterV2.ensure(uint256)(deadline_1)
Internal call...
ensure
deadline
Function: ensure
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
0
done.
typecheckig node...
TMP_29(IERC20) = HIGH_LEVEL_CALL, dest:pool_9(IVaderPoolV2), function:positionForeignAsset, arguments:['id_1']  
Function name: removeLiquidity
High Call: positionForeignAsset
func name:positionForeignAsset
other func name:positionForeignAsset
TMP_29
hlc contract name: POOL func_name: positionForeignAsset
('c', [-1], [-1], 0, 'tokB')
id
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'tokB', -1)
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS
COPIED
[i]Type for TMP_29

Name: TMP_29 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef
done.
pool_10(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_9', 'pool_17', 'pool_12'])
Function name: removeLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
nativeAsset_7(IERC20) := ϕ(['nativeAsset_4', 'nativeAsset_3', 'nativeAsset_6', 'nativeAsset_1', 'nativeAsset_7'])
Function name: removeLiquidity
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
reserve_3(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_2'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
done.
_foreignAsset_1(IERC20) := TMP_29(IERC20)
Function name: removeLiquidity
asgn

Name: TMP_29 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef

Name: _foreignAsset Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _foreignAsset

Name: _foreignAsset Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef
done.
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_7(IERC20)
Function name: removeLiquidity
asgn

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef

Name: _nativeAsset Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _nativeAsset

Name: _nativeAsset Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_30 = CONVERT tokenA_1 to IERC20
Function name: removeLiquidity

Name: tokenA Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef

Name: TMP_30 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
TMP_31(bool) = _nativeAsset_1 == TMP_30
Function name: removeLiquidity
[i]Type for TMP_31

Name: TMP_31 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
isNativeA_1(bool) := TMP_31(bool)
Function name: removeLiquidity
asgn

Name: TMP_31 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: isNativeA Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for isNativeA

Name: isNativeA Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
isNativeA_1(bool) := TMP_31(bool)
XXXXX
typecheckig node...
CONDITION isNativeA_1
Condition...
Conidtion: 
isNativeA_1
isNativeA_1
typecheckig node...
TMP_32 = CONVERT tokenB_1 to IERC20
Function name: removeLiquidity

Name: tokenB Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef

Name: TMP_32 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef
done.
TMP_33(bool) = TMP_32 == _foreignAsset_1
Function name: removeLiquidity
[i]Type for TMP_33

Name: TMP_33 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_34(None) = SOLIDITY_CALL require(bool,string)(TMP_33,VaderRouterV2::removeLiquidity: Incorrect Addresses Specified)
[i]Type for TMP_34

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
TMP_35 = CONVERT tokenA_1 to IERC20
Function name: removeLiquidity

Name: tokenA Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef

Name: TMP_35 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
[i]Type for TMP_35

Name: TMP_35 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
TMP_36(bool) = TMP_35 == _foreignAsset_1
Function name: removeLiquidity
[i]Type for TMP_36

Name: TMP_36 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_37 = CONVERT tokenB_1 to IERC20
Function name: removeLiquidity

Name: tokenB Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef

Name: TMP_37 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef
[i]Type for TMP_37

Name: TMP_37 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: tokB
Fields: 
Finance Type: undef
done.
TMP_38(bool) = TMP_37 == _nativeAsset_1
Function name: removeLiquidity
[i]Type for TMP_38

Name: TMP_38 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_39(bool) = TMP_36 && TMP_38
Function name: removeLiquidity
[i]Type for TMP_39

Name: TMP_39 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_40(None) = SOLIDITY_CALL require(bool,string)(TMP_39,VaderRouterV2::removeLiquidity: Incorrect Addresses Specified)
[i]Type for TMP_40

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_41 = CONVERT pool_10 to address
Function name: removeLiquidity

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef

Name: TMP_41 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
[i]Type for TMP_41

Name: TMP_41 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:pool_10(IVaderPoolV2), function:transferFrom, arguments:['msg.sender', 'TMP_41', 'id_1']  
High Call: transferFrom
func name:transferFrom
other func name:transferFrom
done.
pool_11(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_10', 'pool_16', 'pool_17', 'pool_12'])
Function name: removeLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
reserve_4(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_3'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:pool_11(IVaderPoolV2), function:burn, arguments:['id_1', 'to_1']  
Function name: removeLiquidity
High Call: burn
func name:burn
other func name:burn
TUPLE_0
hlc contract name: POOL func_name: burn
('c', [1], [-1], 0, None)
id
to
('c', [2], [-1], 0, None)
id
to
('c', [1], [-1], 6, None)
id
to
wfc len: 3
COPIED
[i]Type for TUPLE_0

Name: TUPLE_0 Function: removeLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_12(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_11', 'pool_12'])
Function name: removeLiquidity
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
reserve_5(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_4'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
done.
amountNative_1(uint256)= UNPACK TUPLE_0 index: 0 
Function name: removeLiquidity
Reading tuple TUPLE_0 index 0
Check copy_toekn_tuple
([1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amountNative

Name: amountNative Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amountForeign_1(uint256)= UNPACK TUPLE_0 index: 1 
Function name: removeLiquidity
Reading tuple TUPLE_0 index 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amountForeign

Name: amountForeign Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
coveredLoss_1(uint256)= UNPACK TUPLE_0 index: 2 
Function name: removeLiquidity
Reading tuple TUPLE_0 index 2
Check copy_toekn_tuple
([1], [-1], 6, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for coveredLoss

Name: coveredLoss Function: removeLiquidity
Num: 1
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
CONDITION isNativeA_1
Condition...
Conidtion: 
isNativeA_1
isNativeA_1
typecheckig node...
amountA_2(uint256) := amountNative_1(uint256)
Function name: removeLiquidity
asgn

Name: amountNative Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountA Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amountB_2(uint256) := amountForeign_1(uint256)
Function name: removeLiquidity
asgn

Name: amountForeign Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountB Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
amountA_3(uint256) := ϕ(['amountA_1', 'amountA_2'])
Function name: removeLiquidity
Phi
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amountB_3(uint256) := ϕ(['amountB_1', 'amountB_2'])
Function name: removeLiquidity
Phi
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_43(bool) = amountA_3 >= amountAMin_1
Function name: removeLiquidity
testing gt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_43

Name: TMP_43 Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,VaderRouterV2: INSUFFICIENT_A_AMOUNT)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
amountA_1(uint256) := amountForeign_1(uint256)
Function name: removeLiquidity
asgn

Name: amountForeign Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountA Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountA

Name: amountA Function: removeLiquidity
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amountB_1(uint256) := amountNative_1(uint256)
Function name: removeLiquidity
asgn

Name: amountNative Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountB Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountB

Name: amountB Function: removeLiquidity
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_45(bool) = amountB_3 >= amountBMin_1
Function name: removeLiquidity
testing gt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_45

Name: TMP_45 Function: removeLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_46(None) = SOLIDITY_CALL require(bool,string)(TMP_45,VaderRouterV2: INSUFFICIENT_B_AMOUNT)
[i]Type for TMP_46

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_47(uint256) = HIGH_LEVEL_CALL, dest:reserve_5(IVaderReserve), function:reimburseImpermanentLoss, arguments:['msg.sender', 'coveredLoss_1']  
Function name: removeLiquidity
High Call: reimburseImpermanentLoss
func name:reimburseImpermanentLoss
other func name:reimburseImpermanentLoss
TMP_47
hlc contract name: VaderReserve func_name: reimburseImpermanentLoss
msg.sender
msg.sender
not variable
not variable
coveredLoss_1
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
0
0
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_47 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_47

Name: TMP_47 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
reserve_6(IVaderReserve) := ϕ(['reserve_7', 'reserve_6', 'reserve_5'])
Function name: removeLiquidity
Phi
[i]Type for reserve

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
done.
temp_1(uint256) := TMP_47(uint256)
Function name: removeLiquidity
asgn

Name: TMP_47 Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: temp Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for temp

Name: temp Function: removeLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "removeLiquidity":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: removeLiquidity

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'tokA')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pool
Finding type for pool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'POOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'VaderReserve')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: swapExactTokensForTokens
Function name: swapExactTokensForTokens
Function Visibility (test): external
amountIn
Finding type for amountIn...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountIn Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amountOutMin
Finding type for amountOutMin...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: amountOutMin Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
path
Finding type for path...
IERC20[]
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: IERC20[]
IERC20[]
IERC20
Final Type: IERC20
 NO FIELDS

Name: path Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
to
Finding type for to...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: to Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
deadline
Finding type for deadline...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: deadline Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
MODIFIER_CALL, VaderRouterV2.ensure(uint256)(deadline_1)
typecheckig node...
MODIFIER_CALL, VaderRouterV2.ensure(uint256)(deadline_1)
Internal call...
ensure
deadline
Function: ensure
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
0
done.
clearning node...
clearing ir...?
TMP_49(uint256) = INTERNAL_CALL, VaderRouterV2._swap(uint256,IERC20[],address)(amountIn_1,path_1 (-> []),to_1)
has variable
[i] TMP_49 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
amountOut_1(uint256) := TMP_49(uint256)
has variable
[i] amountOut cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_49(uint256) = INTERNAL_CALL, VaderRouterV2._swap(uint256,IERC20[],address)(amountIn_1,path_1 (-> []),to_1)
Function name: swapExactTokensForTokens
Internal call...
_swap
amountIn
path
to
Function: _swap
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
added
xyz
Function name: _swap
Function Visibility: private
clearning node...
clearing ir...?
amountIn_1(uint256) := ϕ(['amountIn_1'])
has variable
[i] amountIn cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
path_1 (-> [])(IERC20[]) := ϕ(['path_1 (-> [])'])
has variable
[i] path cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
to_1(address) := ϕ(['to_1'])
has variable
[i] to cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_13(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_0', 'pool_12'])
has variable
clearing ir...?
nativeAsset_8(IERC20) := ϕ(['nativeAsset_4', 'nativeAsset_3', 'nativeAsset_0', 'nativeAsset_1', 'nativeAsset_7'])
has variable
typecheckig node...
amountIn_1(uint256) := ϕ(['amountIn_1'])
Function name: _swap
Phi
[i]Type for amountIn

Name: amountIn Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1 (-> [])(IERC20[]) := ϕ(['path_1 (-> [])'])
Function name: _swap
Phi
[i]Type for path

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['to_1'])
Function name: _swap
Phi
[i]Type for to

Name: to Function: _swap
Num: -1
Den: -1
Norm: u
LF: to
Fields: 
Finance Type: undef
done.
pool_13(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_0', 'pool_12'])
Function name: _swap
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
nativeAsset_8(IERC20) := ϕ(['nativeAsset_4', 'nativeAsset_3', 'nativeAsset_0', 'nativeAsset_1', 'nativeAsset_7'])
Function name: _swap
Phi
[i]Type for nativeAsset

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_8 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_58(bool) = REF_8 == 3
has variable
[i] TMP_58 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
CONDITION TMP_58
typecheckig node...
REF_8 -> LENGTH path_1 (-> [])
[i]Type for REF_8

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_58(bool) = REF_8 == 3
Function name: _swap
[i]Type for TMP_58

Name: TMP_58 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_58
Condition...
Conidtion: 
TMP_58
TMP_58
clearning node...
clearing ir...?
REF_9(IERC20) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_10(IERC20) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_59(bool) = REF_9 != REF_10
has variable
[i] TMP_59 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
REF_11(IERC20) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_60(IERC20) = HIGH_LEVEL_CALL, dest:pool_13(IVaderPoolV2), function:nativeAsset, arguments:[]  
has variable
[i] TMP_60 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_14(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_13', 'pool_12'])
has variable
clearing ir...?
TMP_61(bool) = REF_11 == TMP_60
has variable
[i] TMP_61 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_62(bool) = TMP_59 && TMP_61
has variable
[i] TMP_62 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
REF_13(IERC20) -> path_1 (-> [])[2]
has variable
clearing ir...?
REF_14(IERC20) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_63(bool) = REF_13 != REF_14
has variable
[i] TMP_63 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_64(bool) = TMP_62 && TMP_63
has variable
[i] TMP_64 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_65(None) = SOLIDITY_CALL require(bool,string)(TMP_64,VaderRouterV2::_swap: Incorrect Path)
typecheckig node...
REF_9(IERC20) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_9

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_10(IERC20) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_10

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_59(bool) = REF_9 != REF_10
Function name: _swap
[i]Type for TMP_59

Name: TMP_59 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_11(IERC20) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_11

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_60(IERC20) = HIGH_LEVEL_CALL, dest:pool_13(IVaderPoolV2), function:nativeAsset, arguments:[]  
Function name: _swap
High Call: nativeAsset
func name:nativeAsset
other func name:nativeAsset
TMP_60
hlc contract name: POOL func_name: nativeAsset
wfc len: 0
COPIED
[i]Type for TMP_60

Name: TMP_60 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_14(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_13', 'pool_12'])
Function name: _swap
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
TMP_61(bool) = REF_11 == TMP_60
Function name: _swap
[i]Type for TMP_61

Name: TMP_61 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_62(bool) = TMP_59 && TMP_61
Function name: _swap
[i]Type for TMP_62

Name: TMP_62 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_13(IERC20) -> path_1 (-> [])[2]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_13

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_14(IERC20) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_14

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_63(bool) = REF_13 != REF_14
Function name: _swap
[i]Type for TMP_63

Name: TMP_63 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_64(bool) = TMP_62 && TMP_63
Function name: _swap
[i]Type for TMP_64

Name: TMP_64 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_65(None) = SOLIDITY_CALL require(bool,string)(TMP_64,VaderRouterV2::_swap: Incorrect Path)
[i]Type for TMP_65

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_15(IERC20) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_66 = CONVERT pool_14 to address
has variable
[i] TMP_66 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['REF_15', 'msg.sender', 'TMP_66', 'amountIn_1'] 
typecheckig node...
REF_15(IERC20) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_15

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_66 = CONVERT pool_14 to address
Function name: _swap

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef

Name: TMP_66 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_66

Name: TMP_66 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['REF_15', 'msg.sender', 'TMP_66', 'amountIn_1'] 
Library Call: safeTransferFrom
done.
clearning node...
clearing ir...?
REF_20 -> LENGTH path_1 (-> [])
clearing ir...?
TMP_69(bool) = REF_20 == 2
has variable
[i] TMP_69 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,VaderRouterV2::_swap: Incorrect Path Length)
typecheckig node...
REF_20 -> LENGTH path_1 (-> [])
[i]Type for REF_20

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_69(bool) = REF_20 == 2
Function name: _swap
[i]Type for TMP_69

Name: TMP_69 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_70(None) = SOLIDITY_CALL require(bool,string)(TMP_69,VaderRouterV2::_swap: Incorrect Path Length)
[i]Type for TMP_70

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_nativeAsset_1(IERC20) := nativeAsset_8(IERC20)
has variable
[i] _nativeAsset cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
_nativeAsset_1(IERC20) := nativeAsset_8(IERC20)
Function name: _swap
asgn

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef

Name: _nativeAsset Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _nativeAsset

Name: _nativeAsset Function: _swap
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_21(IERC20) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_22(IERC20) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_71(bool) = REF_21 != REF_22
has variable
[i] TMP_71 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_72(None) = SOLIDITY_CALL require(bool,string)(TMP_71,VaderRouterV2::_swap: Incorrect Path)
typecheckig node...
REF_21(IERC20) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_21

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_22(IERC20) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_22

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_71(bool) = REF_21 != REF_22
Function name: _swap
[i]Type for TMP_71

Name: TMP_71 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_72(None) = SOLIDITY_CALL require(bool,string)(TMP_71,VaderRouterV2::_swap: Incorrect Path)
[i]Type for TMP_72

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_23(IERC20) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_73 = CONVERT pool_13 to address
has variable
[i] TMP_73 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['REF_23', 'msg.sender', 'TMP_73', 'amountIn_1'] 
typecheckig node...
REF_23(IERC20) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_23

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73 = CONVERT pool_13 to address
Function name: _swap

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef

Name: TMP_73 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_73

Name: TMP_73 Function: _swap
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['REF_23', 'msg.sender', 'TMP_73', 'amountIn_1'] 
Library Call: safeTransferFrom
done.
clearning node...
clearing ir...?
REF_25(IERC20) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_75(bool) = REF_25 == _nativeAsset_1
has variable
[i] TMP_75 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
CONDITION TMP_75
typecheckig node...
REF_25(IERC20) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_25

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_75(bool) = REF_25 == _nativeAsset_1
Function name: _swap
[i]Type for TMP_75

Name: TMP_75 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_75
Condition...
Conidtion: 
TMP_75
TMP_75
clearning node...
clearing ir...?
REF_28(IERC20) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_77(bool) = REF_28 == _nativeAsset_1
has variable
[i] TMP_77 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,VaderRouterV2::_swap: Incorrect Path)
typecheckig node...
REF_28(IERC20) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_28

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_77(bool) = REF_28 == _nativeAsset_1
Function name: _swap
[i]Type for TMP_77

Name: TMP_77 Function: _swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,VaderRouterV2::_swap: Incorrect Path)
[i]Type for TMP_78

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_27(IERC20) -> path_1 (-> [])[1]
has variable
clearing ir...?
TMP_76(uint256) = HIGH_LEVEL_CALL, dest:pool_13(IVaderPoolV2), function:swap, arguments:['REF_27', 'amountIn_1', '0', 'to_1']  
has variable
[i] TMP_76 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_16(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_12'])
has variable
clearing ir...?
RETURN TMP_76
typecheckig node...
REF_27(IERC20) -> path_1 (-> [])[1]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_27

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_76(uint256) = HIGH_LEVEL_CALL, dest:pool_13(IVaderPoolV2), function:swap, arguments:['REF_27', 'amountIn_1', '0', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_76
hlc contract name: POOL func_name: swap
wfc len: 0
COPIED
[i]Type for TMP_76

Name: TMP_76 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_16(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_12'])
Function name: _swap
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
RETURN TMP_76
RETURN

Name: TMP_76 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
REF_30(IERC20) -> path_1 (-> [])[0]
has variable
clearing ir...?
TMP_79(uint256) = HIGH_LEVEL_CALL, dest:pool_13(IVaderPoolV2), function:swap, arguments:['REF_30', '0', 'amountIn_1', 'to_1']  
has variable
[i] TMP_79 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_17(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_12'])
has variable
clearing ir...?
RETURN TMP_79
typecheckig node...
REF_30(IERC20) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_30

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_79(uint256) = HIGH_LEVEL_CALL, dest:pool_13(IVaderPoolV2), function:swap, arguments:['REF_30', '0', 'amountIn_1', 'to_1']  
Function name: _swap
High Call: swap
func name:swap
other func name:swap
TMP_79
hlc contract name: POOL func_name: swap
wfc len: 0
COPIED
[i]Type for TMP_79

Name: TMP_79 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_17(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_17', 'pool_12'])
Function name: _swap
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
RETURN TMP_79
RETURN

Name: TMP_79 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
REF_18(IERC20) -> path_1 (-> [])[0]
has variable
clearing ir...?
REF_19(IERC20) -> path_1 (-> [])[2]
has variable
clearing ir...?
TMP_68(uint256) = HIGH_LEVEL_CALL, dest:pool_14(IVaderPoolV2), function:doubleSwap, arguments:['REF_18', 'REF_19', 'amountIn_1', 'to_1']  
has variable
[i] TMP_68 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pool_15(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_14', 'pool_17', 'pool_12'])
has variable
clearing ir...?
RETURN TMP_68
typecheckig node...
REF_18(IERC20) -> path_1 (-> [])[0]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_18

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_19(IERC20) -> path_1 (-> [])[2]
Function name: _swap
INDEX

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swap
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_19

Name: path Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_68(uint256) = HIGH_LEVEL_CALL, dest:pool_14(IVaderPoolV2), function:doubleSwap, arguments:['REF_18', 'REF_19', 'amountIn_1', 'to_1']  
Function name: _swap
High Call: doubleSwap
func name:doubleSwap
other func name:doubleSwap
TMP_68
hlc contract name: POOL func_name: doubleSwap
wfc len: 0
COPIED
[i]Type for TMP_68

Name: TMP_68 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pool_15(IVaderPoolV2) := ϕ(['pool_2', 'pool_15', 'pool_7', 'pool_16', 'pool_14', 'pool_17', 'pool_12'])
Function name: _swap
Phi
[i]Type for pool

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
done.
RETURN TMP_68
RETURN

Name: TMP_68 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_swap":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _swap

Name: TMP_68 Function: _swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for TMP_49

Name: TMP_49 Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := TMP_49(uint256)
Function name: swapExactTokensForTokens
asgn

Name: TMP_49 Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amountOut Function: swapExactTokensForTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountOut

Name: amountOut Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_50(bool) = amountOut_1 >= amountOutMin_1
has variable
[i] TMP_50 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,VaderRouterV2::swapExactTokensForTokens: Insufficient Trade Output)
typecheckig node...
TMP_50(bool) = amountOut_1 >= amountOutMin_1
Function name: swapExactTokensForTokens
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_50

Name: TMP_50 Function: swapExactTokensForTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,VaderRouterV2::swapExactTokensForTokens: Insufficient Trade Output)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "swapExactTokensForTokens":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: swapExactTokensForTokens

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'tokA')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pool
Finding type for pool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'POOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'VaderReserve')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: initialize
wooo
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'tokA')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pool
Finding type for pool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'POOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'VaderReserve')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _swap
Function _swap not marked
Mark Iterations TRUE, proceeding anyway
Function name: _swap
Function Visibility (test): private
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'tokA')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pool
Finding type for pool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'POOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'VaderReserve')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
Mark Iterations TRUE, proceeding anyway
Function name: slitherConstructorConstantVariables
Function Visibility (test): internal
State_var: _ZERO_ADDRESS
Finding type for _ZERO_ADDRESS...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _ZERO_ADDRESS Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nativeAsset
Finding type for nativeAsset...
IERC20
Check copy_toekn_tuple
(-1, -1, 0, 'tokA')
----
Type: IERC20
IERC20
Final Type: IERC20
 NO FIELDS

Name: nativeAsset Function: global
Num: -1
Den: -1
Norm: 0
LF: tokA
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pool
Finding type for pool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'POOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: pool Function: global
Num: -1
Den: -1
Norm: 0
LF: POOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _ONE_YEAR
Finding type for _ONE_YEAR...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _ONE_YEAR Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve
Finding type for reserve...
IVaderReserve
Check copy_toekn_tuple
(-1, -1, 0, 'VaderReserve')
----
Type: IVaderReserve
IVaderReserve
Final Type: IVaderReserve
 NO FIELDS

Name: reserve Function: global
Num: -1
Den: -1
Norm: 0
LF: VaderReserve
Fields: 
Finance Type: undef
[*]Type fetched successfully
Errors: [<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f7a266638b0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f7a273e8d60>]
Seen contract: {'VaderReserve': True, 'IVaderReserve': True, 'Ownable': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'Address': True, 'Context': True, 'ProtocolConstants': True, 'VaderRouterV2': True} Contract name out: VaderMath
[x] VaderMath not run
Seen contract: {'VaderReserve': True, 'IVaderReserve': True, 'Ownable': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'Address': True, 'Context': True, 'ProtocolConstants': True, 'VaderRouterV2': True, 'VaderMath': True} Contract name out: IBasePoolV2
[x] IBasePoolV2 not run
Seen contract: {'VaderReserve': True, 'IVaderReserve': True, 'Ownable': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'Address': True, 'Context': True, 'ProtocolConstants': True, 'VaderRouterV2': True, 'VaderMath': True, 'IBasePoolV2': True} Contract name out: IVaderPoolV2
[x] IVaderPoolV2 not run
Seen contract: {'VaderReserve': True, 'IVaderReserve': True, 'Ownable': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'Address': True, 'Context': True, 'ProtocolConstants': True, 'VaderRouterV2': True, 'VaderMath': True, 'IBasePoolV2': True, 'IVaderPoolV2': True} Contract name out: IVaderRouterV2
[x] IVaderRouterV2 not run
Seen contract: {'VaderReserve': True, 'IVaderReserve': True, 'Ownable': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'Address': True, 'Context': True, 'ProtocolConstants': True, 'VaderRouterV2': True, 'VaderMath': True, 'IBasePoolV2': True, 'IVaderPoolV2': True, 'IVaderRouterV2': True} Contract name out: IERC721
[x] IERC721 not run
Seen contract: {'VaderReserve': True, 'IVaderReserve': True, 'Ownable': True, 'IERC20': True, 'IERC20Permit': True, 'SafeERC20': True, 'Address': True, 'Context': True, 'ProtocolConstants': True, 'VaderRouterV2': True, 'VaderMath': True, 'IBasePoolV2': True, 'IVaderPoolV2': True, 'IVaderRouterV2': True, 'IERC721': True} Contract name out: IERC165
[x] IERC165 not run
Function count: 11
