TwapOracle
AggregatorV3Interface
IUniswapV2ERC20
IUniswapV2Factory
IUniswapV2Pair
Babylonian
BitMath
FixedPoint
FullMath
UniswapV2Library
UniswapV2OracleLibrary
IBasePoolV2
IVaderPoolV2
Ownable
IERC20
IERC20Metadata
IERC721
Context
IERC165
SafeMath
contract name: TwapOracle
WARNING!!!!
TwapOracle_types.txt
Finance File not Found
"TwapOracle_types.txt" opened successfully.
[*c], TwapOracle

[sef], TOKEN0, decimals, 1, {c, 1, -1, -404}

{c, 1, -1, -404}
['c', '1', '-1', '-404']
[sef], FixedPoint, decode144, 1, {t, [1], [-1], 1}

{t, [1], [-1], 1}
['t', '[1]', '[-1]', '1']
[sef], FACTORY, getPair, 1, {c, -1, -1, 0, PAIR}

{c, -1, -1, 0, PAIR}
['c', '-1', '-1', '0', 'PAIR']
[sef], UniswapV2OracleLibrary, currentCumulativePrices, 3, , , 


['']

['']

['']
[sef], PAIR, price0CumulativeLast

[sef], PAIR, price1CumulativeLast

[sef], PAIR, getReserves, 3, , , 


['']

['']

['']
[sef], VADERPOOL, getReserves, 3, , , 


['']

['']

['']
[sef], VADERPOOL, cumulativePrices, 3, , , , 


['']

['']

['']
[sef], AGGREGATOR, latestRoundData, 5, {c, -1, -1, 0}, {c, 2, -1, -404}, , , {c, -1, -1, 0}

{c, -1, -1, 0}
['c', '-1', '-1', '0']
{c, 2, -1, -404}
['c', '2', '-1', '-404']

['']

['']
{c, -1, -1, 0}
['c', '-1', '-1', '0']
[tref], _aggregators, -1, -1, 0, AGGREGATOR

[tref], _pairExists

[t], global, VADER, -1, -1, 0, VADER

[t], global, USDV, -1, -1, 0, USDV

[t], global, _usdvEnabled

[tref], _pairs, -1, -1, 0, PAIR

[t], global, _owner

[t], global, _updatePeriod

[t], global, _vaderPool, -1, -1, 0, VADERPOOL

[t], consult, token, -1, -1, 0, TOKEN0

[t*], global, _pairs, token0, -1, -1, 0, TOKEN0

[t*], global, _pairs, price1Average, 2, -1, -404

[t*], global, _pairs.price1Average, _x, 1, -1, 0

[t*], global, _pairs, token1, -1, -1, 0, TOKEN1

[t], pairExists, token0

[t], pairExists, token1

[t], initialize, _usdv

[t], initialize, _vader

[t], registerAggregator, asset

[t], registerAggregator, aggregator

[t], registerPair, factory, -1, -1, 0, FACTORY

[t], registerPair, token0

[t], registerPair, token1

[*] TwapOracle run
Checking... constructor Visibility: public
[x] No Binary
Checking... pairExists Visibility: public
[o] Marked
Checking... consult Visibility: public
[o] Marked
Checking... getRate Visibility: public
[o] Marked
Checking... usdvtoVader Visibility: external
[x] No Binary
Checking... vaderToUsdv Visibility: external
[x] No Binary
Checking... initialize Visibility: external
[o] Marked
Checking... enableUSDV Visibility: external
[x] No Binary
Checking... registerAggregator Visibility: external
[o] Marked
Checking... registerPair Visibility: external
[o] Marked
Checking... update Visibility: external
[o] Marked
State_var: _aggregators
Finding type for _aggregators...
mapping(address => address)
State_var: VADER
Finding type for VADER...
address
State_var: _usdvEnabled
Finding type for _usdvEnabled...
bool
State_var: _owner
Finding type for _owner...
address
State_var: _pairs
Finding type for _pairs...
TwapOracle.PairData[]
State_var: USDV
Finding type for USDV...
address
State_var: _vaderPool
Finding type for _vaderPool...
IVaderPoolV2
State_var: _updatePeriod
Finding type for _updatePeriod...
uint256
State_var: _pairExists
Finding type for _pairExists...
mapping(bytes32 => bool)
contract name: AggregatorV3Interface
WARNING!!!!
AggregatorV3Interface_types.txt
Finance File not Found
Type File not found.
[x] AggregatorV3Interface not run
contract name: IUniswapV2ERC20
WARNING!!!!
IUniswapV2ERC20_types.txt
Finance File not Found
Type File not found.
[x] IUniswapV2ERC20 not run
contract name: IUniswapV2Factory
WARNING!!!!
IUniswapV2Factory_types.txt
Finance File not Found
Type File not found.
[x] IUniswapV2Factory not run
contract name: IUniswapV2Pair
WARNING!!!!
IUniswapV2Pair_types.txt
Finance File not Found
Type File not found.
[x] IUniswapV2Pair not run
contract name: Babylonian
WARNING!!!!
Babylonian_types.txt
Finance File not Found
Type File not found.
[x] Babylonian not run
contract name: BitMath
WARNING!!!!
BitMath_types.txt
Finance File not Found
Type File not found.
[x] BitMath not run
contract name: FixedPoint
WARNING!!!!
FixedPoint_types.txt
Finance File not Found
Type File not found.
[x] FixedPoint not run
contract name: FullMath
WARNING!!!!
FullMath_types.txt
Finance File not Found
Type File not found.
[x] FullMath not run
contract name: UniswapV2Library
WARNING!!!!
UniswapV2Library_types.txt
Finance File not Found
Type File not found.
[x] UniswapV2Library not run
contract name: UniswapV2OracleLibrary
WARNING!!!!
UniswapV2OracleLibrary_types.txt
Finance File not Found
Type File not found.
[x] UniswapV2OracleLibrary not run
contract name: IBasePoolV2
WARNING!!!!
IBasePoolV2_types.txt
Finance File not Found
Type File not found.
[x] IBasePoolV2 not run
contract name: IVaderPoolV2
WARNING!!!!
IVaderPoolV2_types.txt
Finance File not Found
Type File not found.
[x] IVaderPoolV2 not run
contract name: Ownable
WARNING!!!!
Ownable_types.txt
Finance File not Found
Type File not found.
[x] Ownable not run
contract name: IERC20
WARNING!!!!
IERC20_types.txt
Finance File not Found
Type File not found.
[x] IERC20 not run
contract name: IERC20Metadata
WARNING!!!!
IERC20Metadata_types.txt
Finance File not Found
Type File not found.
[x] IERC20Metadata not run
contract name: IERC721
WARNING!!!!
IERC721_types.txt
Finance File not Found
Type File not found.
[x] IERC721 not run
contract name: Context
WARNING!!!!
Context_types.txt
Finance File not Found
Type File not found.
[x] Context not run
contract name: IERC165
WARNING!!!!
IERC165_types.txt
Finance File not Found
Type File not found.
[x] IERC165 not run
contract name: SafeMath
WARNING!!!!
SafeMath_types.txt
Finance File not Found
Type File not found.
[x] SafeMath not run
Seen contract: {} Contract name out: TwapOracle
[*] TwapOracle run
Reading Function: constructor
Function constructor not marked
Mark Iterations TRUE, proceeding anyway
Function name: constructor
Function Visibility (test): public
vaderPool
Finding type for vaderPool...
address
updatePeriod
Finding type for updatePeriod...
uint256
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: vaderPool
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, Ownable.constructor()()
typecheckig node...
INTERNAL_CALL, Ownable.constructor()()
Internal call...
constructor
Function: constructor
ic
done.
clearning node...
clearing ir...?
TMP_15 = CONVERT vaderPool_1 to IVaderPoolV2
has variable
[i] TMP_15 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
_vaderPool_1(IVaderPoolV2) := TMP_15(IVaderPoolV2)
has variable
typecheckig node...
TMP_15 = CONVERT vaderPool_1 to IVaderPoolV2
Function name: constructor

Name: vaderPool Function: constructor
Num: -1
Den: -1
Norm: u
LF: vaderPool
Fields: 
Finance Type: undef

Name: TMP_15 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_15

Name: TMP_15 Function: constructor
Num: -1
Den: -1
Norm: u
LF: vaderPool
Fields: 
Finance Type: undef
done.
_vaderPool_1(IVaderPoolV2) := TMP_15(IVaderPoolV2)
Function name: constructor
asgn

Name: TMP_15 Function: constructor
Num: -1
Den: -1
Norm: u
LF: vaderPool
Fields: 
Finance Type: undef

Name: _vaderPool Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _vaderPool

Name: _vaderPool Function: constructor
Num: -1
Den: -1
Norm: u
LF: vaderPool
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_updatePeriod_1(uint256) := updatePeriod_1(uint256)
has variable
typecheckig node...
_updatePeriod_1(uint256) := updatePeriod_1(uint256)
Function name: constructor
asgn

Name: updatePeriod Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _updatePeriod Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _updatePeriod

Name: _updatePeriod Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "constructor":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: _aggregators
Finding type for _aggregators...
mapping(address => address)
Check copy_toekn_tuple
([-1], [-1], 0, 'AGGREGATOR')
----
Type: mapping(address => address)
mapping(address => address)
address
Final Type: address

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _usdvEnabled
Finding type for _usdvEnabled...
bool
SKIP bool
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairs
Finding type for _pairs...
TwapOracle.PairData[]
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData[]
TwapOracle.PairData[]
TwapOracle.PairData
Final Type: TwapOracle.PairData
global
_pairs
pair
global
_pairs
token0
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN0')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
token1
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN1')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
price0CumulativeLast
global
_pairs
price1CumulativeLast
global
_pairs
blockTimestampLast
global
_pairs
price0Average
global
_pairs
price1Average
Check copy_toekn_tuple
([2], [-1], [-404], None)
----
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
None
price1Average
_x
FIELDS:
price1Average Fields:
^^^
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
_pairs.price1Average
_x
Check copy_toekn_tuple
([1], [-1], [0], None)
----
Type: uint224
uint224
Final Type: uint224
Type: uint224
uint224
Final Type: uint224
FIELDS:
_pairs.price1Average Fields:
_x
^^^
FIELDS:
_pairs Fields:
token0
token1
price1Average
^^^

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-1, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _vaderPool
Finding type for _vaderPool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'VADERPOOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _updatePeriod
Finding type for _updatePeriod...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairExists
Finding type for _pairExists...
mapping(bytes32 => bool)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes32 => bool)
mapping(bytes32 => bool)
bool
Final Type: bool

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: pairExists
Function name: pairExists
Function Visibility (test): public
token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: token0 Function: pairExists
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: token1 Function: pairExists
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
token0_1(address) := ϕ(['token0_1'])
has variable
[i] token0 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
token1_1(address) := ϕ(['token1_1'])
has variable
[i] token1 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_2', '_pairExists_0'])
has variable
typecheckig node...
token0_1(address) := ϕ(['token0_1'])
Function name: pairExists
Phi
[i]Type for token0

Name: token0 Function: pairExists
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_1(address) := ϕ(['token1_1'])
Function name: pairExists
Phi
[i]Type for token1

Name: token1 Function: pairExists
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_2', '_pairExists_0'])
Function name: pairExists
Phi
[i]Type for _pairExists

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
clearing ir...?
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
clearing ir...?
pairHash0_1(bytes32) := TMP_18(bytes32)
has variable
[i] pairHash0 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairHash0_1(bytes32) := TMP_18(bytes32)
Function name: pairExists
asgn

Name: TMP_18 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairHash0 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
pairHash0_1(bytes32) := TMP_18(bytes32)
XXXXX
clearning node...
clearing ir...?
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
clearing ir...?
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
clearing ir...?
pairHash1_1(bytes32) := TMP_20(bytes32)
has variable
[i] pairHash1 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairHash1_1(bytes32) := TMP_20(bytes32)
Function name: pairExists
asgn

Name: TMP_20 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairHash1 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
pairHash1_1(bytes32) := TMP_20(bytes32)
XXXXX
clearning node...
clearing ir...?
REF_2(bool) -> _pairExists_1[pairHash0_1]
has variable
clearing ir...?
REF_3(bool) -> _pairExists_1[pairHash1_1]
has variable
clearing ir...?
TMP_21(bool) = REF_2 || REF_3
has variable
[i] TMP_21 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
RETURN TMP_21
typecheckig node...
REF_2(bool) -> _pairExists_1[pairHash0_1]
Function name: pairExists
INDEX

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE IS BOOL TYPE
[i]Type for REF_2

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_3(bool) -> _pairExists_1[pairHash1_1]
Function name: pairExists
INDEX

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE IS BOOL TYPE
[i]Type for REF_3

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_21(bool) = REF_2 || REF_3
Function name: pairExists
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_21
RETURN

Name: TMP_21 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pairExists":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
token0_1(address) := ϕ(['token0_1'])
Function name: pairExists
Phi
[i]Type for token0

Name: token0 Function: pairExists
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_1(address) := ϕ(['token1_1'])
Function name: pairExists
Phi
[i]Type for token1

Name: token1 Function: pairExists
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_1', '_pairExists_2', '_pairExists_0'])
Function name: pairExists
Phi
[i]Type for _pairExists

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: TMP_18 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairHash0_1(bytes32) := TMP_18(bytes32)
Function name: pairExists
asgn

Name: TMP_18 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairHash0 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
pairHash0_1(bytes32) := TMP_18(bytes32)
XXXXX
typecheckig node...
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairHash1_1(bytes32) := TMP_20(bytes32)
Function name: pairExists
asgn

Name: TMP_20 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairHash1 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
pairHash1_1(bytes32) := TMP_20(bytes32)
XXXXX
typecheckig node...
REF_2(bool) -> _pairExists_1[pairHash0_1]
Function name: pairExists
INDEX

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE IS BOOL TYPE
[i]Type for REF_2

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_3(bool) -> _pairExists_1[pairHash1_1]
Function name: pairExists
INDEX

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE IS BOOL TYPE
[i]Type for REF_3

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_21(bool) = REF_2 || REF_3
Function name: pairExists
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_21
RETURN

Name: TMP_21 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "pairExists":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: pairExists

Name: TMP_21 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: _aggregators
Finding type for _aggregators...
mapping(address => address)
Check copy_toekn_tuple
([-1], [-1], 0, 'AGGREGATOR')
----
Type: mapping(address => address)
mapping(address => address)
address
Final Type: address

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _usdvEnabled
Finding type for _usdvEnabled...
bool
SKIP bool
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairs
Finding type for _pairs...
TwapOracle.PairData[]
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData[]
TwapOracle.PairData[]
TwapOracle.PairData
Final Type: TwapOracle.PairData
global
_pairs
pair
global
_pairs
token0
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN0')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
token1
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN1')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
price0CumulativeLast
global
_pairs
price1CumulativeLast
global
_pairs
blockTimestampLast
global
_pairs
price0Average
global
_pairs
price1Average
Check copy_toekn_tuple
([2], [-1], [-404], None)
----
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
price1Average
_x
FIELDS:
price1Average Fields:
_x
^^^
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
_pairs.price1Average
_x
Check copy_toekn_tuple
([1], [-1], [0], None)
----
Type: uint224
uint224
Final Type: uint224
Type: uint224
uint224
Final Type: uint224
FIELDS:
_pairs.price1Average Fields:
_x
^^^
FIELDS:
_pairs Fields:
token0
token1
price1Average
^^^

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-1, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _vaderPool
Finding type for _vaderPool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'VADERPOOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _updatePeriod
Finding type for _updatePeriod...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairExists
Finding type for _pairExists...
mapping(bytes32 => bool)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes32 => bool)
mapping(bytes32 => bool)
bool
Final Type: bool

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: consult
Function name: consult
Function Visibility (test): public
token
Finding type for token...
address
Check copy_toekn_tuple
(-1, -1, 0, 'TOKEN0')
----
Type: address
address
Final Type: address

Name: token Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: TOKEN0
    fields: []
    fintype: -1
clearning node...
clearing ir...?
token_1(address) := ϕ(['USDV_1', 'VADER_2', 'VADER_4'])
has variable
[i] token cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
has variable
clearing ir...?
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_0', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
has variable
typecheckig node...
token_1(address) := ϕ(['USDV_1', 'VADER_2', 'VADER_4'])
Function name: consult
Phi
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
done.
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Function name: consult
Phi
[i]Type for _aggregators

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_0', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: consult
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_4 -> LENGTH _pairs_1
clearing ir...?
pairCount_1(uint256) := REF_4(uint256)
has variable
[i] pairCount cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairCount_1(uint256) := REF_4(uint256)
Function name: consult
asgn

Name: REF_4 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairCount Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
pairCount_1(uint256) := REF_4(uint256)
XXXXX
clearning node...
clearing ir...?
sumNative_1(uint256) := 0(uint256)
has variable
[i] sumNative cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
sumNative_1(uint256) := 0(uint256)
Function name: consult
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
sumUSD_1(uint256) := 0(uint256)
has variable
[i] sumUSD cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
sumUSD_1(uint256) := 0(uint256)
Function name: consult
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: sumUSD Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
i_1(uint256) := 0(uint256)
has variable
[i] i cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
i_1(uint256) := 0(uint256)
Function name: consult
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
i_2(uint256) := ϕ(['i_1', 'i_3'])
has variable
[i] i cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_22(bool) = i_2 < pairCount_1
has variable
[i] TMP_22 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
CONDITION TMP_22
typecheckig node...
i_2(uint256) := ϕ(['i_1', 'i_3'])
Function name: consult
Phi
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_22(bool) = i_2 < pairCount_1
Function name: consult
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: i Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_22 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_22(bool) = i_2 < pairCount_1
XXXXX
CONDITION TMP_22
Condition...
Conidtion: 
TMP_22
TMP_22
clearning node...
clearing ir...?
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
has variable
clearing ir...?
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
has variable
[i] pairData cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
Function name: consult
INDEX

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_5

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
Function name: consult
asgn

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef

Name: pairData Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairData

Name: pairData Function: consult
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_6(address) -> pairData_1.token0
has variable
clearing ir...?
TMP_23(bool) = token_1 == REF_6
has variable
[i] TMP_23 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
CONDITION TMP_23
typecheckig node...
REF_6(address) -> pairData_1.token0
Function name: consult
MEMBER
pairData
token0
consult
pairData Fields:
token0
token1
price1Average
^^^

Name: token0 Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
[i]Type for REF_6

Name: pairData.token0 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef

Name: pairData.token0 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef

Name: token0 Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
done.
TMP_23(bool) = token_1 == REF_6
Function name: consult
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_23
Condition...
Conidtion: 
TMP_23
TMP_23
clearning node...
typecheckig node...
clearning node...
clearing ir...?
sumNative_3(uint256) := ϕ(['sumNative_1', 'sumNative_2'])
has variable
[i] sumNative cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
sumUSD_3(uint256) := ϕ(['sumUSD_2', 'sumUSD_1'])
has variable
[i] sumUSD cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
sumNative_3(uint256) := ϕ(['sumNative_1', 'sumNative_2'])
Function name: consult
Phi
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sumUSD_3(uint256) := ϕ(['sumUSD_2', 'sumUSD_1'])
Function name: consult
Phi
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_43(bool) = sumNative_3 != 0
has variable
[i] TMP_43 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
typecheckig node...
TMP_43(bool) = sumNative_3 != 0
Function name: consult
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
has variable
clearing ir...?
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
has variable
[i] TMP_24 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
has variable
[i] TMP_25 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
has variable
[i] sumNative cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
Function name: consult
MEMBER
pairData
price1Average
consult
pairData Fields:
token0
token1
price1Average
^^^

Name: price1Average Function: global
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef
[i]Type for REF_7

Name: pairData.price1Average Function: consult
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef

Name: pairData.price1Average Function: consult
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef

Name: price1Average Function: global
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef
done.
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
Function name: consult
Library Call: mul
testing mul...
val: 1
val: 1
lnorm: -404 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: pairData.price1Average Function: consult
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef

Name: TMP_24 Function: consult
Num: 
Den: 
Norm: -404
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef
done.
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
Function name: consult
Library Call: decode144
hlc contract name: FixedPoint func_name: decode144
('t', [1], [-1], 1, None)
TMP_24
wfc len: 1
Check copy_toekn_tuple
([2], [-1, -1], -404, None, -1)
----
Type: uint144
uint144
Final Type: uint144
COPIED
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
Function name: consult

Name: sumNative Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_25 Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for sumNative

Name: sumNative Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_45 = CONVERT token_1 to IERC20Metadata
has variable
[i] TMP_45 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
has variable
[i] TMP_46 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
has variable
clearing ir...?
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_4', '_pairs_3', '_pairs_16'])
has variable
clearing ir...?
TMP_47(uint256) = sumUSD_3 (c)* TMP_46
has variable
[i] TMP_47 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
has variable
[i] TMP_48 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
result_2(uint256) := TMP_48(uint256)
has variable
[i] result cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_45 = CONVERT token_1 to IERC20Metadata
Function name: consult

Name: token Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef

Name: TMP_45 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
done.
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
Function name: consult
High Call: decimals
func name:decimals
other func name:decimals
TMP_46
hlc contract name: TOKEN0 func_name: decimals
('c', [1], [-1], -404, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], -404, None, -1)
----
Type: uint8
uint8
Final Type: uint8
COPIED
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
Function name: consult
Phi
[i]Type for _aggregators

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_4', '_pairs_3', '_pairs_16'])
Function name: consult
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
TMP_47(uint256) = sumUSD_3 (c)* TMP_46
Function name: consult
testing mul...
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_46 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_47 Function: consult
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
Function name: consult
Error with TMP_48 in function consult
Error with: TMP_48 in function consult
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d241f0>]
lnorm: * rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_48 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_2 Function: None
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_48 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
result_2(uint256) := TMP_48(uint256)
Function name: consult
asgn

Name: TMP_48 Function: consult
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: result Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_49(uint256) := i_2(uint256)
has variable
[i] TMP_49 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
has variable
[i] i cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_49(uint256) := i_2(uint256)
Function name: consult
asgn

Name: i Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_49 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
i_3(uint256) = i_2 (c)+ 1
Function name: consult
val: 1

Name: i Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: consult
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
has variable
clearing ir...?
REF_11(uint224) -> REF_10._x
has variable
clearing ir...?
TMP_26(bool) = REF_11 != 0
has variable
[i] TMP_26 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
CONDITION TMP_26
typecheckig node...
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
Function name: consult
MEMBER
pairData
price1Average
consult
pairData Fields:
token0
token1
price1Average
^^^

Name: price1Average Function: global
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef
[i]Type for REF_10

Name: pairData.price1Average Function: consult
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef

Name: pairData.price1Average Function: consult
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef

Name: price1Average Function: global
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef
done.
REF_11(uint224) -> REF_10._x
Function name: consult
MEMBER
pairData.price1Average
_x
consult
pairData.price1Average Fields:
_x
^^^

Name: _x Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_11

Name: pairData.price1Average._x Function: consult
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1Average._x Function: consult
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _x Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_26(bool) = REF_11 != 0
Function name: consult
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_26
Condition...
Conidtion: 
TMP_26
TMP_26
clearning node...
clearing ir...?
TMP_50(bool) = sumNative_1 != 0
has variable
[i] TMP_50 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
typecheckig node...
TMP_50(bool) = sumNative_1 != 0
Function name: consult
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_52 = CONVERT token_1 to IERC20Metadata
has variable
[i] TMP_52 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
has variable
[i] TMP_53 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
has variable
[i] TMP_54 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
has variable
[i] TMP_55 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
result_3(uint256) := TMP_55(uint256)
has variable
[i] result cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_52 = CONVERT token_1 to IERC20Metadata
Function name: consult

Name: token Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef

Name: TMP_52 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
done.
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
Function name: consult
High Call: decimals
func name:decimals
other func name:decimals
TMP_53
hlc contract name: TOKEN0 func_name: decimals
('c', [1], [-1], -404, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], -404, None, -1)
----
Type: uint8
uint8
Final Type: uint8
COPIED
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
Function name: consult
testing mul...
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_53 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_54 Function: consult
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
Function name: consult
Error with TMP_55 in function consult
Error with: TMP_55 in function consult
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d241f0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d24a30>]
lnorm: * rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_55 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_3 Function: None
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_55 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
result_3(uint256) := TMP_55(uint256)
Function name: consult
asgn

Name: TMP_55 Function: consult
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: result Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_27(bool) = sumNative_2 != 0
has variable
[i] TMP_27 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
typecheckig node...
TMP_27(bool) = sumNative_2 != 0
Function name: consult
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_12(address) -> pairData_1.token1
has variable
clearing ir...?
REF_13(address) -> _aggregators_1[REF_12]
has variable
clearing ir...?
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
has variable
[i] TMP_29 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
has variable
clearing ir...?
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
has variable
clearing ir...?
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_16', '_pairs_4'])
has variable
clearing ir...?
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
has variable
[i] roundID cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
price_1(int256)= UNPACK TUPLE_0 index: 1 
has variable
[i] price cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
has variable
[i] answeredInRound cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
REF_12(address) -> pairData_1.token1
Function name: consult
MEMBER
pairData
token1
consult
pairData Fields:
_x
token0
token1
price1Average
^^^

Name: token1 Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN1
Fields: 
Finance Type: undef
[i]Type for REF_12

Name: pairData.token1 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN1
Fields: 
Finance Type: undef

Name: pairData.token1 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN1
Fields: 
Finance Type: undef

Name: token1 Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN1
Fields: 
Finance Type: undef
done.
REF_13(address) -> _aggregators_1[REF_12]
Function name: consult
INDEX

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_13

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
Function name: consult

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef

Name: TMP_29 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
Function name: consult
High Call: latestRoundData
func name:latestRoundData
other func name:latestRoundData
TUPLE_0
hlc contract name: AGGREGATOR func_name: latestRoundData
('c', [-1], [-1], 0, None)
('c', [2], [-1], -404, None)
('c', [-1], [-1], 'u', None)
('c', [-1], [-1], 'u', None)
('c', [-1], [-1], 0, None)
wfc len: 5
COPIED
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
Function name: consult
Phi
[i]Type for _aggregators

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_16', '_pairs_4'])
Function name: consult
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Function name: consult
Reading tuple TUPLE_0 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint80
uint80
Final Type: uint80
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
price_1(int256)= UNPACK TUPLE_0 index: 1 
Function name: consult
Reading tuple TUPLE_0 index 1
Check copy_toekn_tuple
([2], [-1], -404, None, -1)
----
Type: int256
int256
Final Type: int256
[i]Type for price

Name: price Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Function name: consult
Reading tuple TUPLE_0 index 4
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint80
uint80
Final Type: uint80
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_30(bool) = answeredInRound_1 >= roundID_1
has variable
[i] TMP_30 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
typecheckig node...
TMP_30(bool) = answeredInRound_1 >= roundID_1
Function name: consult
testing gt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_32(bool) = price_1 != 0
has variable
[i] TMP_32 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
typecheckig node...
TMP_32(bool) = price_1 != 0
Function name: consult
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_34 = CONVERT price_1 to uint256
has variable
[i] TMP_34 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_35(uint256) = 10 (c)** 10
has variable
[i] TMP_35 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_36(uint256) = TMP_34 (c)* TMP_35
has variable
[i] TMP_36 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
sumUSD_2(uint256) = sumUSD_1 (c)+ TMP_36
has variable
[i] sumUSD cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_34 = CONVERT price_1 to uint256
Function name: consult

Name: price Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_34 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_35(uint256) = 10 (c)** 10
Function name: consult
val: 10
1
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: TMP_35 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
10
val: 10
1
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: -1
Den: -1
Norm: 10
LF: None
Fields: 
Finance Type: undef
done.
TMP_36(uint256) = TMP_34 (c)* TMP_35
Function name: consult
testing mul...
Error with TMP_36 in function consult
Error with: TMP_36 in function consult
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d241f0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d24a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d10a60>]
lnorm: * rnorm: 10
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_34 Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_36 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sumUSD_2(uint256) = sumUSD_1 (c)+ TMP_36
Function name: consult

Name: sumUSD Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_36 Function: consult
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: sumUSD Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_37(bool) = sumNative_2 != 0
has variable
[i] TMP_37 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
typecheckig node...
TMP_37(bool) = sumNative_2 != 0
Function name: consult
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_39 = CONVERT token_1 to IERC20Metadata
has variable
[i] TMP_39 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
has variable
[i] TMP_40 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_8', '_aggregators_4', '_aggregators_2'])
has variable
clearing ir...?
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_2', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
has variable
clearing ir...?
TMP_41(uint256) = sumUSD_2 (c)* TMP_40
has variable
[i] TMP_41 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
has variable
[i] TMP_42 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
result_1(uint256) := TMP_42(uint256)
has variable
[i] result cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_39 = CONVERT token_1 to IERC20Metadata
Function name: consult

Name: token Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef

Name: TMP_39 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
done.
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
Function name: consult
High Call: decimals
func name:decimals
other func name:decimals
TMP_40
hlc contract name: TOKEN0 func_name: decimals
('c', [1], [-1], -404, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], -404, None, -1)
----
Type: uint8
uint8
Final Type: uint8
COPIED
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_8', '_aggregators_4', '_aggregators_2'])
Function name: consult
Phi
[i]Type for _aggregators

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_2', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: consult
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
TMP_41(uint256) = sumUSD_2 (c)* TMP_40
Function name: consult
testing mul...
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_4 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_41 Function: consult
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 2, 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
Function name: consult
Error with TMP_42 in function consult
Error with: TMP_42 in function consult
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d241f0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d24a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d10a60>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d19610>]
lnorm: * rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_42 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_5 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_42 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
result_1(uint256) := TMP_42(uint256)
Function name: consult
asgn

Name: TMP_42 Function: consult
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: result Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for result

Name: result Function: consult
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "consult":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
token_1(address) := ϕ(['USDV_1', 'VADER_2', 'VADER_4'])
Function name: consult
Phi
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
done.
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Function name: consult
Phi
[i]Type for _aggregators

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_0', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: consult
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairCount_1(uint256) := REF_4(uint256)
Function name: consult
asgn

Name: REF_4 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairCount Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
pairCount_1(uint256) := REF_4(uint256)
XXXXX
typecheckig node...
sumNative_1(uint256) := 0(uint256)
Function name: consult
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for sumNative

Name: sumNative Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
sumUSD_1(uint256) := 0(uint256)
Function name: consult
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: sumUSD Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
i_1(uint256) := 0(uint256)
Function name: consult
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
i_2(uint256) := ϕ(['i_1', 'i_3'])
Function name: consult
Phi
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_22(bool) = i_2 < pairCount_1
Function name: consult
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: i Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_22 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_22(bool) = i_2 < pairCount_1
XXXXX
CONDITION TMP_22
Condition...
Conidtion: 
TMP_22
TMP_22
typecheckig node...
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
Function name: consult
INDEX

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_5

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
Function name: consult
asgn

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef

Name: pairData Function: consult
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: _x, token0, token1, price1Average
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairData

Name: pairData Function: consult
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: _x, token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
REF_6(address) -> pairData_1.token0
Function name: consult
MEMBER
pairData
token0
consult
pairData Fields:
_x
token0
token1
price1Average
^^^

Name: token0 Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
[i]Type for REF_6

Name: pairData.token0 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef

Name: pairData.token0 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef

Name: token0 Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
done.
TMP_23(bool) = token_1 == REF_6
Function name: consult
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_23
Condition...
Conidtion: 
TMP_23
TMP_23
typecheckig node...
typecheckig node...
sumNative_3(uint256) := ϕ(['sumNative_1', 'sumNative_2'])
Function name: consult
Phi
[i]Type for sumNative

Name: sumNative Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
sumUSD_3(uint256) := ϕ(['sumUSD_2', 'sumUSD_1'])
Function name: consult
Phi
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_43(bool) = sumNative_3 != 0
Function name: consult
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
Function name: consult
MEMBER
pairData
price1Average
consult
pairData Fields:
_x
token0
token1
price1Average
^^^

Name: price1Average Function: global
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef
[i]Type for REF_7

Name: pairData.price1Average Function: consult
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef

Name: pairData.price1Average Function: consult
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef

Name: price1Average Function: global
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef
done.
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
Function name: consult
Library Call: mul
testing mul...
val: 1
val: 1
lnorm: -404 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: pairData.price1Average Function: consult
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef

Name: TMP_24 Function: consult
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef
done.
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
Function name: consult
Library Call: decode144
hlc contract name: FixedPoint func_name: decode144
('t', [1], [-1], 1, None)
TMP_24
wfc len: 1
Check copy_toekn_tuple
([2], [-1, -1], -404, None, -1)
----
Type: uint144
uint144
Final Type: uint144
COPIED
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
Function name: consult

Name: sumNative Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
Error with sumNative in function consult
Error with: sumNative in function consult
[W] Initializing defined variable to constant
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d241f0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d24a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d10a60>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d19610>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7f6736cf8c70>]
lnorm: * rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: sumNative Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: sumNative Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for sumNative

Name: sumNative Function: consult
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_45 = CONVERT token_1 to IERC20Metadata
Function name: consult

Name: token Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef

Name: TMP_45 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
done.
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
Function name: consult
High Call: decimals
func name:decimals
other func name:decimals
TMP_46
hlc contract name: TOKEN0 func_name: decimals
('c', [1], [-1], -404, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], -404, None, -1)
----
Type: uint8
uint8
Final Type: uint8
COPIED
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_8', '_aggregators_4'])
Function name: consult
Phi
[i]Type for _aggregators

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_4', '_pairs_3', '_pairs_16'])
Function name: consult
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
TMP_47(uint256) = sumUSD_3 (c)* TMP_46
Function name: consult
testing mul...
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_46 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_47 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
Function name: consult
lnorm: * rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_48 Function: consult
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: PIC_6 Function: None
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_48 Function: consult
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
result_2(uint256) := TMP_48(uint256)
Function name: consult
asgn

Name: TMP_48 Function: consult
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: result Function: consult
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_49(uint256) := i_2(uint256)
Function name: consult
asgn

Name: i Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_49 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
i_3(uint256) = i_2 (c)+ 1
Function name: consult
val: 1

Name: i Function: consult
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: consult
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
Function name: consult
MEMBER
pairData
price1Average
consult
pairData Fields:
_x
token0
token1
price1Average
^^^

Name: price1Average Function: global
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef
[i]Type for REF_10

Name: pairData.price1Average Function: consult
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef

Name: pairData.price1Average Function: consult
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef

Name: price1Average Function: global
Num: 2
Den: -1
Norm: -404
LF: None
Fields: _x
Finance Type: undef
done.
REF_11(uint224) -> REF_10._x
Function name: consult
MEMBER
[W] Initializing defined variable to constant
pairData.price1Average
_x
consult
pairData.price1Average Fields:
_x
^^^

Name: _x Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_11

Name: pairData.price1Average._x Function: consult
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1Average._x Function: consult
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _x Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_26(bool) = REF_11 != 0
Function name: consult
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_26
Condition...
Conidtion: 
TMP_26
TMP_26
typecheckig node...
TMP_50(bool) = sumNative_1 != 0
Function name: consult
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
TMP_52 = CONVERT token_1 to IERC20Metadata
Function name: consult

Name: token Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef

Name: TMP_52 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
done.
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
Function name: consult
High Call: decimals
func name:decimals
other func name:decimals
TMP_53
hlc contract name: TOKEN0 func_name: decimals
('c', [1], [-1], -404, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], -404, None, -1)
----
Type: uint8
uint8
Final Type: uint8
COPIED
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
Function name: consult
testing mul...
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_53 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_54 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
Function name: consult
lnorm: * rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_55 Function: consult
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: PIC_7 Function: None
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_55 Function: consult
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
result_3(uint256) := TMP_55(uint256)
Function name: consult
asgn

Name: TMP_55 Function: consult
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: result Function: consult
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_27(bool) = sumNative_2 != 0
Function name: consult
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
REF_12(address) -> pairData_1.token1
Function name: consult
MEMBER
pairData
token1
consult
pairData Fields:
_x
token0
token1
price1Average
^^^

Name: token1 Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN1
Fields: 
Finance Type: undef
[i]Type for REF_12

Name: pairData.token1 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN1
Fields: 
Finance Type: undef

Name: pairData.token1 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN1
Fields: 
Finance Type: undef

Name: token1 Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN1
Fields: 
Finance Type: undef
done.
REF_13(address) -> _aggregators_1[REF_12]
Function name: consult
INDEX

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_13

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
Function name: consult

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef

Name: TMP_29 Function: consult
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
Function name: consult
High Call: latestRoundData
func name:latestRoundData
other func name:latestRoundData
TUPLE_0
hlc contract name: AGGREGATOR func_name: latestRoundData
('c', [-1], [-1], 0, None)
('c', [2], [-1], -404, None)
('c', [-1], [-1], 'u', None)
('c', [-1], [-1], 'u', None)
('c', [-1], [-1], 0, None)
wfc len: 5
COPIED
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_8', '_aggregators_4'])
Function name: consult
Phi
[i]Type for _aggregators

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_16', '_pairs_4'])
Function name: consult
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
Function name: consult
Reading tuple TUPLE_0 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint80
uint80
Final Type: uint80
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
price_1(int256)= UNPACK TUPLE_0 index: 1 
Function name: consult
Reading tuple TUPLE_0 index 1
Check copy_toekn_tuple
([2], [-1], -404, None, -1)
----
Type: int256
int256
Final Type: int256
[i]Type for price

Name: price Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
Function name: consult
Reading tuple TUPLE_0 index 4
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint80
uint80
Final Type: uint80
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_30(bool) = answeredInRound_1 >= roundID_1
Function name: consult
testing gt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_32(bool) = price_1 != 0
Function name: consult
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_34 = CONVERT price_1 to uint256
Function name: consult

Name: price Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_34 Function: consult
Num: 2
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
Error with TMP_34 in function consult
Error with: TMP_34 in function consult
[W] Initializing defined variable to constant
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d241f0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d24a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d10a60>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d19610>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7f6736cf8c70>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d10820>]
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_35(uint256) = 10 (c)** 10
Function name: consult
val: 10
1
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: TMP_35 Function: consult
Num: -1
Den: -1
Norm: 10
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:10
10
val: 10
1
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: -1
Den: -1
Norm: 10
LF: None
Fields: 
Finance Type: undef
done.
TMP_36(uint256) = TMP_34 (c)* TMP_35
Function name: consult
testing mul...
lnorm: u rnorm: 10
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_35 Function: consult
Num: -1
Den: -1
Norm: 10
LF: None
Fields: 
Finance Type: undef

Name: TMP_36 Function: consult
Num: 2
Den: -1
Norm: 10
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 2
Den: -1
Norm: 10
LF: None
Fields: 
Finance Type: undef
done.
sumUSD_2(uint256) = sumUSD_1 (c)+ TMP_36
Function name: consult

Name: sumUSD Function: consult
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: 10
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_36 Function: consult
Num: 2
Den: -1
Norm: 10
LF: None
Fields: 
Finance Type: undef

Name: sumUSD Function: consult
Num: 2
Den: -1
Norm: 10
LF: None
Fields: 
Finance Type: undef
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 2
Den: -1
Norm: 10
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_37(bool) = sumNative_2 != 0
Function name: consult
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_39 = CONVERT token_1 to IERC20Metadata
Function name: consult

Name: token Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef

Name: TMP_39 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Norm: 0
LF: TOKEN0
Fields: 
Finance Type: undef
done.
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
Function name: consult
High Call: decimals
func name:decimals
other func name:decimals
TMP_40
hlc contract name: TOKEN0 func_name: decimals
('c', [1], [-1], -404, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], -404, None, -1)
----
Type: uint8
uint8
Final Type: uint8
COPIED
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_8', '_aggregators_4', '_aggregators_2'])
Function name: consult
Phi
[i]Type for _aggregators

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_2', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: consult
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
TMP_41(uint256) = sumUSD_2 (c)* TMP_40
Function name: consult
testing mul...
Error with TMP_41 in function consult
Error with: TMP_41 in function consult
[W] Initializing defined variable to constant
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d241f0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d24a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d10a60>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d19610>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7f6736cf8c70>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d10820>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d194f0>]
lnorm: 10 rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_8 Function: None
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_41 Function: consult
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 2, 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
Function name: consult
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_42 Function: consult
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_9 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_42 Function: consult
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
result_1(uint256) := TMP_42(uint256)
Function name: consult
asgn

Name: TMP_42 Function: consult
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: result Function: consult
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for result

Name: result Function: consult
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "consult":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: consult

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: _aggregators
Finding type for _aggregators...
mapping(address => address)
Check copy_toekn_tuple
([-1], [-1], 0, 'AGGREGATOR')
----
Type: mapping(address => address)
mapping(address => address)
address
Final Type: address

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _usdvEnabled
Finding type for _usdvEnabled...
bool
SKIP bool
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairs
Finding type for _pairs...
TwapOracle.PairData[]
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData[]
TwapOracle.PairData[]
TwapOracle.PairData
Final Type: TwapOracle.PairData
global
_pairs
pair
global
_pairs
token0
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN0')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
token1
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN1')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
price0CumulativeLast
global
_pairs
price1CumulativeLast
global
_pairs
blockTimestampLast
global
_pairs
price0Average
global
_pairs
price1Average
Check copy_toekn_tuple
([2], [-1], [-404], None)
----
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
price1Average
_x
FIELDS:
price1Average Fields:
_x
^^^
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
_pairs.price1Average
_x
Check copy_toekn_tuple
([1], [-1], [0], None)
----
Type: uint224
uint224
Final Type: uint224
Type: uint224
uint224
Final Type: uint224
FIELDS:
_pairs.price1Average Fields:
_x
^^^
FIELDS:
_pairs Fields:
token0
token1
price1Average
^^^

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-1, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _vaderPool
Finding type for _vaderPool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'VADERPOOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _updatePeriod
Finding type for _updatePeriod...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairExists
Finding type for _pairExists...
mapping(bytes32 => bool)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes32 => bool)
mapping(bytes32 => bool)
bool
Final Type: bool

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getRate
Function name: getRate
Function Visibility (test): public
-100
clearning node...
clearing ir...?
VADER_1(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
has variable
clearing ir...?
USDV_1(address) := ϕ(['USDV_8', 'USDV_5', 'USDV_0', 'USDV_2'])
has variable
typecheckig node...
VADER_1(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
Function name: getRate
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
USDV_1(address) := ϕ(['USDV_8', 'USDV_5', 'USDV_0', 'USDV_2'])
Function name: getRate
Phi
[i]Type for USDV

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_56(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(USDV_1)
has variable
[i] TMP_56 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
tUSDInUSDV_1(uint256) := TMP_56(uint256)
has variable
[i] tUSDInUSDV cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_56(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(USDV_1)
Function name: getRate
Internal call...
consult
USDV
Function: consult
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: USDV
    fields: []
    fintype: -1
0
0

Name: result Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_56 Function: getRate
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_56

Name: TMP_56 Function: getRate
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tUSDInUSDV_1(uint256) := TMP_56(uint256)
Function name: getRate
asgn

Name: TMP_56 Function: getRate
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: tUSDInUSDV Function: getRate
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tUSDInUSDV

Name: tUSDInUSDV Function: getRate
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_57(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(VADER_2)
has variable
[i] TMP_57 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
tUSDInVader_1(uint256) := TMP_57(uint256)
has variable
[i] tUSDInVader cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_57(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(VADER_2)
Function name: getRate
Internal call...
consult
VADER
Function: consult
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: VADER
    fields: []
    fintype: -1
0
0

Name: result Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_57 Function: getRate
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: getRate
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tUSDInVader_1(uint256) := TMP_57(uint256)
Function name: getRate
asgn

Name: TMP_57 Function: getRate
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: tUSDInVader Function: getRate
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tUSDInVader

Name: tUSDInVader Function: getRate
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_58(uint256) = tUSDInUSDV_1 (c)/ tUSDInVader_1
has variable
[i] TMP_58 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
result_1(uint256) := TMP_58(uint256)
has variable
[i] result cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_58(uint256) = tUSDInUSDV_1 (c)/ tUSDInVader_1
Function name: getRate
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_58 Function: getRate
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PIC_11 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_58 Function: getRate
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_58

Name: TMP_58 Function: getRate
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
result_1(uint256) := TMP_58(uint256)
Function name: getRate
asgn

Name: TMP_58 Function: getRate
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: result Function: getRate
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for result

Name: result Function: getRate
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "getRate":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: getRate

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: _aggregators
Finding type for _aggregators...
mapping(address => address)
Check copy_toekn_tuple
([-1], [-1], 0, 'AGGREGATOR')
----
Type: mapping(address => address)
mapping(address => address)
address
Final Type: address

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _usdvEnabled
Finding type for _usdvEnabled...
bool
SKIP bool
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairs
Finding type for _pairs...
TwapOracle.PairData[]
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData[]
TwapOracle.PairData[]
TwapOracle.PairData
Final Type: TwapOracle.PairData
global
_pairs
pair
global
_pairs
token0
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN0')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
token1
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN1')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
price0CumulativeLast
global
_pairs
price1CumulativeLast
global
_pairs
blockTimestampLast
global
_pairs
price0Average
global
_pairs
price1Average
Check copy_toekn_tuple
([2], [-1], [-404], None)
----
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
price1Average
_x
FIELDS:
price1Average Fields:
_x
^^^
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
_pairs.price1Average
_x
Check copy_toekn_tuple
([1], [-1], [0], None)
----
Type: uint224
uint224
Final Type: uint224
Type: uint224
uint224
Final Type: uint224
FIELDS:
_pairs.price1Average Fields:
_x
^^^
FIELDS:
_pairs Fields:
token0
token1
price1Average
^^^

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-1, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _vaderPool
Finding type for _vaderPool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'VADERPOOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _updatePeriod
Finding type for _updatePeriod...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairExists
Finding type for _pairExists...
mapping(bytes32 => bool)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes32 => bool)
mapping(bytes32 => bool)
bool
Final Type: bool

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: usdvtoVader
Function usdvtoVader not marked
Mark Iterations TRUE, proceeding anyway
Function name: usdvtoVader
Function Visibility (test): external
usdvAmount
Finding type for usdvAmount...
uint256
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_59(uint256) = INTERNAL_CALL, TwapOracle.getRate()()
has variable
[i] TMP_59 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_60(uint256) = usdvAmount_1 (c)* TMP_59
has variable
[i] TMP_60 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
RETURN TMP_60
typecheckig node...
TMP_59(uint256) = INTERNAL_CALL, TwapOracle.getRate()()
Function name: usdvtoVader
Internal call...
getRate
Function: getRate
ic
[i]Type for TMP_59

Name: TMP_59 Function: usdvtoVader
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_60(uint256) = usdvAmount_1 (c)* TMP_59
Function name: usdvtoVader
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: usdvAmount Function: usdvtoVader
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_60 Function: usdvtoVader
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: usdvtoVader
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_60(uint256) = usdvAmount_1 (c)* TMP_59
XXXXX
RETURN TMP_60
RETURN

Name: TMP_60 Function: usdvtoVader
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "usdvtoVader":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
TMP_59(uint256) = INTERNAL_CALL, TwapOracle.getRate()()
Function name: usdvtoVader
Internal call...
getRate
Function: getRate
ic
[i]Type for TMP_59

Name: TMP_59 Function: usdvtoVader
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_60(uint256) = usdvAmount_1 (c)* TMP_59
Function name: usdvtoVader
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: usdvAmount Function: usdvtoVader
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_60 Function: usdvtoVader
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: usdvtoVader
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_60(uint256) = usdvAmount_1 (c)* TMP_59
XXXXX
RETURN TMP_60
RETURN

Name: TMP_60 Function: usdvtoVader
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "usdvtoVader":
 New undefined nodes- 1
 Old undefined nodes- 1
No save for this scenario
State_var: _aggregators
Finding type for _aggregators...
mapping(address => address)
Check copy_toekn_tuple
([-1], [-1], 0, 'AGGREGATOR')
----
Type: mapping(address => address)
mapping(address => address)
address
Final Type: address

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _usdvEnabled
Finding type for _usdvEnabled...
bool
SKIP bool
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairs
Finding type for _pairs...
TwapOracle.PairData[]
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData[]
TwapOracle.PairData[]
TwapOracle.PairData
Final Type: TwapOracle.PairData
global
_pairs
pair
global
_pairs
token0
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN0')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
token1
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN1')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
price0CumulativeLast
global
_pairs
price1CumulativeLast
global
_pairs
blockTimestampLast
global
_pairs
price0Average
global
_pairs
price1Average
Check copy_toekn_tuple
([2], [-1], [-404], None)
----
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
price1Average
_x
FIELDS:
price1Average Fields:
_x
^^^
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
_pairs.price1Average
_x
Check copy_toekn_tuple
([1], [-1], [0], None)
----
Type: uint224
uint224
Final Type: uint224
Type: uint224
uint224
Final Type: uint224
FIELDS:
_pairs.price1Average Fields:
_x
^^^
FIELDS:
_pairs Fields:
token0
token1
price1Average
^^^

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-1, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _vaderPool
Finding type for _vaderPool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'VADERPOOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _updatePeriod
Finding type for _updatePeriod...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairExists
Finding type for _pairExists...
mapping(bytes32 => bool)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes32 => bool)
mapping(bytes32 => bool)
bool
Final Type: bool

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: vaderToUsdv
Function vaderToUsdv not marked
Mark Iterations TRUE, proceeding anyway
Function name: vaderToUsdv
Function Visibility (test): external
vaderAmount
Finding type for vaderAmount...
uint256
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
VADER_4(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
has variable
clearing ir...?
_usdvEnabled_1(bool) := ϕ(['_usdvEnabled_0', '_usdvEnabled_2'])
has variable
typecheckig node...
VADER_4(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
Function name: vaderToUsdv
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
_usdvEnabled_1(bool) := ϕ(['_usdvEnabled_0', '_usdvEnabled_2'])
Function name: vaderToUsdv
Phi
[i]Type for _usdvEnabled

Name: _usdvEnabled Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_61 = ! _usdvEnabled_1 
clearing ir...?
CONDITION TMP_61
typecheckig node...
TMP_61 = ! _usdvEnabled_1 
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_61
Condition...
Conidtion: 
TMP_61
TMP_61
clearning node...
clearing ir...?
TMP_62(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(VADER_4)
has variable
[i] TMP_62 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_63(uint256) = TMP_62 (c)* vaderAmount_1
has variable
[i] TMP_63 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
RETURN TMP_63
typecheckig node...
TMP_62(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(VADER_4)
Function name: vaderToUsdv
Internal call...
consult
VADER
Function: consult
ic
[i]Type for TMP_62

Name: TMP_62 Function: vaderToUsdv
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_63(uint256) = TMP_62 (c)* vaderAmount_1
Function name: vaderToUsdv
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: vaderAmount Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_63 Function: vaderToUsdv
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_63

Name: TMP_63 Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_63(uint256) = TMP_62 (c)* vaderAmount_1
XXXXX
RETURN TMP_63
RETURN

Name: TMP_63 Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_64(uint256) = INTERNAL_CALL, TwapOracle.getRate()()
has variable
[i] TMP_64 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_65(uint256) = vaderAmount_1 (c)/ TMP_64
has variable
[i] TMP_65 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
RETURN TMP_65
typecheckig node...
TMP_64(uint256) = INTERNAL_CALL, TwapOracle.getRate()()
Function name: vaderToUsdv
Internal call...
getRate
Function: getRate
ic
[i]Type for TMP_64

Name: TMP_64 Function: vaderToUsdv
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_65(uint256) = vaderAmount_1 (c)/ TMP_64
Function name: vaderToUsdv
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_65 Function: vaderToUsdv
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: vaderAmount Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_65 Function: vaderToUsdv
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_65

Name: TMP_65 Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_65(uint256) = vaderAmount_1 (c)/ TMP_64
XXXXX
RETURN TMP_65
RETURN

Name: TMP_65 Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "vaderToUsdv":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
VADER_4(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
Function name: vaderToUsdv
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
_usdvEnabled_1(bool) := ϕ(['_usdvEnabled_0', '_usdvEnabled_2'])
Function name: vaderToUsdv
Phi
[i]Type for _usdvEnabled

Name: _usdvEnabled Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_61 = ! _usdvEnabled_1 
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_61
Condition...
Conidtion: 
TMP_61
TMP_61
typecheckig node...
TMP_62(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(VADER_4)
Function name: vaderToUsdv
Internal call...
consult
VADER
Function: consult
ic
[i]Type for TMP_62

Name: TMP_62 Function: vaderToUsdv
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_63(uint256) = TMP_62 (c)* vaderAmount_1
Function name: vaderToUsdv
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: vaderAmount Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_63 Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_63

Name: TMP_63 Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_63(uint256) = TMP_62 (c)* vaderAmount_1
XXXXX
RETURN TMP_63
RETURN

Name: TMP_63 Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
typecheckig node...
TMP_64(uint256) = INTERNAL_CALL, TwapOracle.getRate()()
Function name: vaderToUsdv
Internal call...
getRate
Function: getRate
ic
[i]Type for TMP_64

Name: TMP_64 Function: vaderToUsdv
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_65(uint256) = vaderAmount_1 (c)/ TMP_64
Function name: vaderToUsdv
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_65 Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: vaderAmount Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_65 Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_65

Name: TMP_65 Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_65(uint256) = vaderAmount_1 (c)/ TMP_64
XXXXX
RETURN TMP_65
RETURN

Name: TMP_65 Function: vaderToUsdv
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "vaderToUsdv":
 New undefined nodes- 2
 Old undefined nodes- 2
No save for this scenario
State_var: _aggregators
Finding type for _aggregators...
mapping(address => address)
Check copy_toekn_tuple
([-1], [-1], 0, 'AGGREGATOR')
----
Type: mapping(address => address)
mapping(address => address)
address
Final Type: address

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _usdvEnabled
Finding type for _usdvEnabled...
bool
SKIP bool
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairs
Finding type for _pairs...
TwapOracle.PairData[]
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData[]
TwapOracle.PairData[]
TwapOracle.PairData
Final Type: TwapOracle.PairData
global
_pairs
pair
global
_pairs
token0
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN0')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
token1
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN1')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
price0CumulativeLast
global
_pairs
price1CumulativeLast
global
_pairs
blockTimestampLast
global
_pairs
price0Average
global
_pairs
price1Average
Check copy_toekn_tuple
([2], [-1], [-404], None)
----
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
price1Average
_x
FIELDS:
price1Average Fields:
_x
^^^
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
_pairs.price1Average
_x
Check copy_toekn_tuple
([1], [-1], [0], None)
----
Type: uint224
uint224
Final Type: uint224
Type: uint224
uint224
Final Type: uint224
FIELDS:
_pairs.price1Average Fields:
_x
^^^
FIELDS:
_pairs Fields:
token0
token1
price1Average
^^^

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-1, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _vaderPool
Finding type for _vaderPool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'VADERPOOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _updatePeriod
Finding type for _updatePeriod...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairExists
Finding type for _pairExists...
mapping(bytes32 => bool)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes32 => bool)
mapping(bytes32 => bool)
bool
Final Type: bool

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: initialize
Function name: initialize
Function Visibility (test): external
_usdv
Finding type for _usdv...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _usdv Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
_vader
Finding type for _vader...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _vader Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
VADER_6(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
has variable
clearing ir...?
USDV_3(address) := ϕ(['USDV_8', 'USDV_5', 'USDV_0', 'USDV_2'])
has variable
typecheckig node...
VADER_6(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
Function name: initialize
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
USDV_3(address) := ϕ(['USDV_8', 'USDV_5', 'USDV_0', 'USDV_2'])
Function name: initialize
Phi
[i]Type for USDV

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
typecheckig node...
MODIFIER_CALL, Ownable.onlyOwner()()
Internal call...
onlyOwner
Function: onlyOwner
ic
Internal cal param_cache
-100
added
xyz
Function name: onlyOwner
Function Visibility: internal
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, Ownable._checkOwner()()
typecheckig node...
INTERNAL_CALL, Ownable._checkOwner()()
Internal call...
_checkOwner
Function: _checkOwner
ic
Internal cal param_cache
-100
added
xyz
Function name: _checkOwner
Function Visibility: internal
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_2(address) = INTERNAL_CALL, Ownable.owner()()
has variable
[i] TMP_2 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_3(address) = INTERNAL_CALL, Context._msgSender()()
has variable
[i] TMP_3 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_4(bool) = TMP_2 == TMP_3
has variable
[i] TMP_4 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,Ownable: caller is not the owner)
typecheckig node...
TMP_2(address) = INTERNAL_CALL, Ownable.owner()()
Function name: _checkOwner
Internal call...
owner
Function: owner
ic
Internal cal param_cache
-100
added
xyz
Function name: owner
Function Visibility: public
clearning node...
clearing ir...?
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
has variable
typecheckig node...
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
Function name: owner
Phi
[i]Type for _owner

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN _owner_1
typecheckig node...
RETURN _owner_1
RETURN

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "owner":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: owner

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_2

Name: TMP_2 Function: _checkOwner
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_3(address) = INTERNAL_CALL, Context._msgSender()()
Function name: _checkOwner
Internal call...
_msgSender
Function: _msgSender
ic
Internal cal param_cache
-100
added
xyz
Function name: _msgSender
Function Visibility: internal
clearning node...
typecheckig node...
clearning node...
clearing ir...?
RETURN msg.sender
typecheckig node...
RETURN msg.sender
RETURN
msg.sender
WORKLIST iteration 0 for function call "_msgSender":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _msgSender

Name: PIC_14 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_3

Name: TMP_3 Function: _checkOwner
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_4(bool) = TMP_2 == TMP_3
Function name: _checkOwner
[i]Type for TMP_4

Name: TMP_4 Function: _checkOwner
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,Ownable: caller is not the owner)
[i]Type for TMP_5

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_checkOwner":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _checkOwner
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "onlyOwner":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: onlyOwner
done.
clearning node...
clearing ir...?
TMP_66 = CONVERT 0 to address
has variable
[i] TMP_66 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_67(bool) = VADER_7 == TMP_66
has variable
[i] TMP_67 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,TwapOracle::initialize: Vader already set)
typecheckig node...
TMP_66 = CONVERT 0 to address
Function name: initialize
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_66 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_66

Name: TMP_66 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_67(bool) = VADER_7 == TMP_66
Function name: initialize
[i]Type for TMP_67

Name: TMP_67 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,TwapOracle::initialize: Vader already set)
[i]Type for TMP_68

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_69 = CONVERT 0 to address
has variable
[i] TMP_69 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_70(bool) = USDV_4 == TMP_69
has variable
[i] TMP_70 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,TwapOracle::initialize: USDV already set)
typecheckig node...
TMP_69 = CONVERT 0 to address
Function name: initialize
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_69 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_69

Name: TMP_69 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_70(bool) = USDV_4 == TMP_69
Function name: initialize
[i]Type for TMP_70

Name: TMP_70 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,TwapOracle::initialize: USDV already set)
[i]Type for TMP_71

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_72 = CONVERT 0 to address
has variable
[i] TMP_72 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_73(bool) = _usdv_1 != TMP_72
has variable
[i] TMP_73 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,TwapOracle::initialize: can not set to a zero address)
typecheckig node...
TMP_72 = CONVERT 0 to address
Function name: initialize
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_72

Name: TMP_72 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_73(bool) = _usdv_1 != TMP_72
Function name: initialize
[i]Type for TMP_73

Name: TMP_73 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,TwapOracle::initialize: can not set to a zero address)
[i]Type for TMP_74

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_75 = CONVERT 0 to address
has variable
[i] TMP_75 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_76(bool) = _vader_1 != TMP_75
has variable
[i] TMP_76 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,TwapOracle::initialize: can not set to a zero address)
typecheckig node...
TMP_75 = CONVERT 0 to address
Function name: initialize
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_75 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_75

Name: TMP_75 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_76(bool) = _vader_1 != TMP_75
Function name: initialize
[i]Type for TMP_76

Name: TMP_76 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,TwapOracle::initialize: can not set to a zero address)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
VADER_8(address) := _vader_1(address)
has variable
typecheckig node...
VADER_8(address) := _vader_1(address)
Function name: initialize
asgn

Name: _vader Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: VADER Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for VADER

Name: VADER Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
USDV_5(address) := _usdv_1(address)
has variable
typecheckig node...
USDV_5(address) := _usdv_1(address)
Function name: initialize
asgn

Name: _usdv Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: USDV Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for USDV

Name: USDV Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "initialize":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: initialize
State_var: _aggregators
Finding type for _aggregators...
mapping(address => address)
Check copy_toekn_tuple
([-1], [-1], 0, 'AGGREGATOR')
----
Type: mapping(address => address)
mapping(address => address)
address
Final Type: address

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _usdvEnabled
Finding type for _usdvEnabled...
bool
SKIP bool
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairs
Finding type for _pairs...
TwapOracle.PairData[]
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData[]
TwapOracle.PairData[]
TwapOracle.PairData
Final Type: TwapOracle.PairData
global
_pairs
pair
global
_pairs
token0
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN0')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
token1
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN1')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
price0CumulativeLast
global
_pairs
price1CumulativeLast
global
_pairs
blockTimestampLast
global
_pairs
price0Average
global
_pairs
price1Average
Check copy_toekn_tuple
([2], [-1], [-404], None)
----
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
price1Average
_x
FIELDS:
price1Average Fields:
_x
^^^
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
_pairs.price1Average
_x
Check copy_toekn_tuple
([1], [-1], [0], None)
----
Type: uint224
uint224
Final Type: uint224
Type: uint224
uint224
Final Type: uint224
FIELDS:
_pairs.price1Average Fields:
_x
^^^
FIELDS:
_pairs Fields:
token0
token1
price1Average
^^^

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-1, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _vaderPool
Finding type for _vaderPool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'VADERPOOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _updatePeriod
Finding type for _updatePeriod...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairExists
Finding type for _pairExists...
mapping(bytes32 => bool)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes32 => bool)
mapping(bytes32 => bool)
bool
Final Type: bool

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: enableUSDV
Function enableUSDV not marked
Mark Iterations TRUE, proceeding anyway
Function name: enableUSDV
Function Visibility (test): external
clearning node...
typecheckig node...
clearning node...
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
typecheckig node...
MODIFIER_CALL, Ownable.onlyOwner()()
Internal call...
onlyOwner
Function: onlyOwner
ic
done.
clearning node...
clearing ir...?
_usdvEnabled_2(bool) := True(bool)
has variable
typecheckig node...
_usdvEnabled_2(bool) := True(bool)
Function name: enableUSDV
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _usdvEnabled Function: enableUSDV
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _usdvEnabled

Name: _usdvEnabled Function: enableUSDV
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "enableUSDV":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: _aggregators
Finding type for _aggregators...
mapping(address => address)
Check copy_toekn_tuple
([-1], [-1], 0, 'AGGREGATOR')
----
Type: mapping(address => address)
mapping(address => address)
address
Final Type: address

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _usdvEnabled
Finding type for _usdvEnabled...
bool
SKIP bool
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairs
Finding type for _pairs...
TwapOracle.PairData[]
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData[]
TwapOracle.PairData[]
TwapOracle.PairData
Final Type: TwapOracle.PairData
global
_pairs
pair
global
_pairs
token0
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN0')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
token1
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN1')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
price0CumulativeLast
global
_pairs
price1CumulativeLast
global
_pairs
blockTimestampLast
global
_pairs
price0Average
global
_pairs
price1Average
Check copy_toekn_tuple
([2], [-1], [-404], None)
----
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
price1Average
_x
FIELDS:
price1Average Fields:
_x
^^^
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
_pairs.price1Average
_x
Check copy_toekn_tuple
([1], [-1], [0], None)
----
Type: uint224
uint224
Final Type: uint224
Type: uint224
uint224
Final Type: uint224
FIELDS:
_pairs.price1Average Fields:
_x
^^^
FIELDS:
_pairs Fields:
token0
token1
price1Average
^^^

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-1, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _vaderPool
Finding type for _vaderPool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'VADERPOOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _updatePeriod
Finding type for _updatePeriod...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairExists
Finding type for _pairExists...
mapping(bytes32 => bool)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes32 => bool)
mapping(bytes32 => bool)
bool
Final Type: bool

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: registerAggregator
Function name: registerAggregator
Function Visibility (test): external
asset
Finding type for asset...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: asset Function: registerAggregator
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
aggregator
Finding type for aggregator...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: aggregator Function: registerAggregator
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
_aggregators_5(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
has variable
typecheckig node...
_aggregators_5(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_8', '_aggregators_4'])
Function name: registerAggregator
Phi
[i]Type for _aggregators

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
typecheckig node...
MODIFIER_CALL, Ownable.onlyOwner()()
Internal call...
onlyOwner
Function: onlyOwner
ic
Internal cal param_cache
0
0
done.
clearning node...
clearing ir...?
MODIFIER_CALL, TwapOracle.initialized()()
typecheckig node...
MODIFIER_CALL, TwapOracle.initialized()()
Internal call...
initialized
Function: initialized
ic
Internal cal param_cache
-100
added
xyz
Function name: initialized
Function Visibility: internal
clearning node...
clearing ir...?
VADER_17(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
has variable
clearing ir...?
USDV_9(address) := ϕ(['USDV_8', 'USDV_5', 'USDV_0', 'USDV_2'])
has variable
typecheckig node...
VADER_17(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
Function name: initialized
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
USDV_9(address) := ϕ(['USDV_8', 'USDV_5', 'USDV_0', 'USDV_2'])
Function name: initialized
Phi
[i]Type for USDV

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_142 = CONVERT 0 to address
has variable
[i] TMP_142 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_143(bool) = VADER_17 != TMP_142
has variable
[i] TMP_143 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_144 = CONVERT 0 to address
has variable
[i] TMP_144 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_145(bool) = USDV_9 != TMP_144
has variable
[i] TMP_145 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_146(bool) = TMP_143 && TMP_145
has variable
[i] TMP_146 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,TwapOracle::initialized: not initialized)
typecheckig node...
TMP_142 = CONVERT 0 to address
Function name: initialized
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_142 Function: initialized
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_142

Name: TMP_142 Function: initialized
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(bool) = VADER_17 != TMP_142
Function name: initialized
[i]Type for TMP_143

Name: TMP_143 Function: initialized
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_144 = CONVERT 0 to address
Function name: initialized
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_144 Function: initialized
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_144

Name: TMP_144 Function: initialized
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_145(bool) = USDV_9 != TMP_144
Function name: initialized
[i]Type for TMP_145

Name: TMP_145 Function: initialized
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_146(bool) = TMP_143 && TMP_145
Function name: initialized
[i]Type for TMP_146

Name: TMP_146 Function: initialized
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,TwapOracle::initialized: not initialized)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "initialized":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: initialized
done.
clearning node...
clearing ir...?
TMP_80 = CONVERT 0 to address
has variable
[i] TMP_80 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_81(bool) = asset_1 != TMP_80
has variable
[i] TMP_81 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,TwapOracle::registerAggregator: asset zero address provided)
typecheckig node...
TMP_80 = CONVERT 0 to address
Function name: registerAggregator
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_80 Function: registerAggregator
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_80

Name: TMP_80 Function: registerAggregator
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_81(bool) = asset_1 != TMP_80
Function name: registerAggregator
[i]Type for TMP_81

Name: TMP_81 Function: registerAggregator
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,TwapOracle::registerAggregator: asset zero address provided)
[i]Type for TMP_82

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_83 = CONVERT 0 to address
has variable
[i] TMP_83 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_84(bool) = aggregator_1 != TMP_83
has variable
[i] TMP_84 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_85(None) = SOLIDITY_CALL require(bool,string)(TMP_84,TwapOracle::registerAggregator: aggregator zero address provided)
typecheckig node...
TMP_83 = CONVERT 0 to address
Function name: registerAggregator
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_83 Function: registerAggregator
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_83

Name: TMP_83 Function: registerAggregator
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_84(bool) = aggregator_1 != TMP_83
Function name: registerAggregator
[i]Type for TMP_84

Name: TMP_84 Function: registerAggregator
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_85(None) = SOLIDITY_CALL require(bool,string)(TMP_84,TwapOracle::registerAggregator: aggregator zero address provided)
[i]Type for TMP_85

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_18(address) -> _aggregators_7[asset_1]
has variable
clearing ir...?
TMP_86 = CONVERT 0 to address
has variable
[i] TMP_86 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_87(bool) = REF_18 == TMP_86
has variable
[i] TMP_87 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,TwapOracle::registerAggregator: aggregator already exists)
typecheckig node...
REF_18(address) -> _aggregators_7[asset_1]
Function name: registerAggregator
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_aggregators
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'AGGREGATOR')
----
Type: address
address
Final Type: address
[i]Type for REF_18

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
TMP_86 = CONVERT 0 to address
Function name: registerAggregator
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_86 Function: registerAggregator
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_86

Name: TMP_86 Function: registerAggregator
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_87(bool) = REF_18 == TMP_86
Function name: registerAggregator
[i]Type for TMP_87

Name: TMP_87 Function: registerAggregator
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,TwapOracle::registerAggregator: aggregator already exists)
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_19(address) -> _aggregators_7[asset_1]
has variable
clearing ir...?
_aggregators_8(mapping(address => address)) := ϕ(['_aggregators_7'])
has variable
clearing ir...?
REF_19 (->_aggregators_8) := aggregator_1(address)
has variable
typecheckig node...
REF_19(address) -> _aggregators_7[asset_1]
Function name: registerAggregator
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_aggregators
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'AGGREGATOR')
----
Type: address
address
Final Type: address
[i]Type for REF_19

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
_aggregators_8(mapping(address => address)) := ϕ(['_aggregators_7'])
Function name: registerAggregator
Phi
[i]Type for _aggregators

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
REF_19 (->_aggregators_8) := aggregator_1(address)
Function name: registerAggregator
asgn

Name: aggregator Function: registerAggregator
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_19 Function: registerAggregator
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_19

Name: REF_19 Function: registerAggregator
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "registerAggregator":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: registerAggregator
State_var: _aggregators
Finding type for _aggregators...
mapping(address => address)
Check copy_toekn_tuple
([-1], [-1], 0, 'AGGREGATOR')
----
Type: mapping(address => address)
mapping(address => address)
address
Final Type: address

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _usdvEnabled
Finding type for _usdvEnabled...
bool
SKIP bool
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairs
Finding type for _pairs...
TwapOracle.PairData[]
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData[]
TwapOracle.PairData[]
TwapOracle.PairData
Final Type: TwapOracle.PairData
global
_pairs
pair
global
_pairs
token0
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN0')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
token1
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN1')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
price0CumulativeLast
global
_pairs
price1CumulativeLast
global
_pairs
blockTimestampLast
global
_pairs
price0Average
global
_pairs
price1Average
Check copy_toekn_tuple
([2], [-1], [-404], None)
----
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
price1Average
_x
FIELDS:
price1Average Fields:
_x
^^^
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
_pairs.price1Average
_x
Check copy_toekn_tuple
([1], [-1], [0], None)
----
Type: uint224
uint224
Final Type: uint224
Type: uint224
uint224
Final Type: uint224
FIELDS:
_pairs.price1Average Fields:
_x
^^^
FIELDS:
_pairs Fields:
token0
token1
price1Average
^^^

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-1, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _vaderPool
Finding type for _vaderPool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'VADERPOOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _updatePeriod
Finding type for _updatePeriod...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairExists
Finding type for _pairExists...
mapping(bytes32 => bool)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes32 => bool)
mapping(bytes32 => bool)
bool
Final Type: bool

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: registerPair
Function name: registerPair
Function Visibility (test): external
factory
Finding type for factory...
address
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: address
address
Final Type: address

Name: factory Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: token0 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: token1 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: FACTORY
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
VADER_9(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
has variable
clearing ir...?
USDV_6(address) := ϕ(['USDV_8', 'USDV_5', 'USDV_0', 'USDV_2'])
has variable
clearing ir...?
_vaderPool_2(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_0', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
has variable
clearing ir...?
_pairs_5(TwapOracle.PairData[]) := ϕ(['_pairs_0', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
has variable
typecheckig node...
VADER_9(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
Function name: registerPair
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
USDV_6(address) := ϕ(['USDV_8', 'USDV_5', 'USDV_0', 'USDV_2'])
Function name: registerPair
Phi
[i]Type for USDV

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
done.
_vaderPool_2(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_0', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
Function name: registerPair
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
_pairs_5(TwapOracle.PairData[]) := ϕ(['_pairs_0', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
typecheckig node...
MODIFIER_CALL, Ownable.onlyOwner()()
Internal call...
onlyOwner
Function: onlyOwner
ic
Internal cal param_cache
0
0
done.
clearning node...
clearing ir...?
MODIFIER_CALL, TwapOracle.initialized()()
typecheckig node...
MODIFIER_CALL, TwapOracle.initialized()()
Internal call...
initialized
Function: initialized
ic
Internal cal param_cache
0
0
done.
clearning node...
clearing ir...?
TMP_91(bool) = token0_1 == VADER_11
has variable
[i] TMP_91 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_92(bool) = token0_1 == USDV_8
has variable
[i] TMP_92 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_93(bool) = TMP_91 || TMP_92
has variable
[i] TMP_93 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,TwapOracle::registerPair: Invalid token0 address)
typecheckig node...
TMP_91(bool) = token0_1 == VADER_11
Function name: registerPair
[i]Type for TMP_91

Name: TMP_91 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_92(bool) = token0_1 == USDV_8
Function name: registerPair
[i]Type for TMP_92

Name: TMP_92 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_93(bool) = TMP_91 || TMP_92
Function name: registerPair
[i]Type for TMP_93

Name: TMP_93 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,TwapOracle::registerPair: Invalid token0 address)
[i]Type for TMP_94

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_95(bool) = token0_1 != token1_1
has variable
[i] TMP_95 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,TwapOracle::registerPair: Same token address)
typecheckig node...
TMP_95(bool) = token0_1 != token1_1
Function name: registerPair
[i]Type for TMP_95

Name: TMP_95 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,TwapOracle::registerPair: Same token address)
[i]Type for TMP_96

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_97(bool) = INTERNAL_CALL, TwapOracle.pairExists(address,address)(token0_1,token1_1)
has variable
[i] TMP_97 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_98 = ! TMP_97 
clearing ir...?
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,TwapOracle::registerPair: Pair exists)
typecheckig node...
TMP_97(bool) = INTERNAL_CALL, TwapOracle.pairExists(address,address)(token0_1,token1_1)
Function name: registerPair
Internal call...
pairExists
token0
token1
Function: pairExists
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
0

Name: TMP_21 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_97 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_97

Name: TMP_97 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_98 = ! TMP_97 
[i]Type for TMP_98

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,TwapOracle::registerPair: Pair exists)
[i]Type for TMP_99

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_100(bool) = token0_1 == VADER_12
has variable
[i] TMP_100 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
CONDITION TMP_100
typecheckig node...
TMP_100(bool) = token0_1 == VADER_12
Function name: registerPair
[i]Type for TMP_100

Name: TMP_100 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_100
Condition...
Conidtion: 
TMP_100
TMP_100
clearning node...
clearing ir...?
TMP_101 = CONVERT factory_1 to IUniswapV2Factory
has variable
[i] TMP_101 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_102(address) = HIGH_LEVEL_CALL, dest:TMP_101(IUniswapV2Factory), function:getPair, arguments:['token0_1', 'token1_1']  
has variable
[i] TMP_102 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
_pairs_11(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_10', '_pairs_4', '_pairs_16'])
has variable
clearing ir...?
TMP_103 = CONVERT TMP_102 to IUniswapV2Pair
has variable
[i] TMP_103 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pair_1(IUniswapV2Pair) := TMP_103(IUniswapV2Pair)
has variable
[i] pair cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_101 = CONVERT factory_1 to IUniswapV2Factory
Function name: registerPair

Name: factory Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef

Name: TMP_101 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_101

Name: TMP_101 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
TMP_102(address) = HIGH_LEVEL_CALL, dest:TMP_101(IUniswapV2Factory), function:getPair, arguments:['token0_1', 'token1_1']  
Function name: registerPair
High Call: getPair
func name:getPair
other func name:getPair
TMP_102
hlc contract name: FACTORY func_name: getPair
('c', [-1], [-1], 0, 'PAIR')
token0
token1
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR', -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_102

Name: TMP_102 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
_pairs_11(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_10', '_pairs_4', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
TMP_103 = CONVERT TMP_102 to IUniswapV2Pair
Function name: registerPair

Name: TMP_102 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef

Name: TMP_103 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_103

Name: TMP_103 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
pair_1(IUniswapV2Pair) := TMP_103(IUniswapV2Pair)
Function name: registerPair
asgn

Name: TMP_103 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef

Name: pair Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pair

Name: pair Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_104 = CONVERT pair_1 to address
has variable
[i] TMP_104 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pairAddr_2(address) := TMP_104(address)
has variable
[i] pairAddr cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_104 = CONVERT pair_1 to address
Function name: registerPair

Name: pair Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef

Name: TMP_104 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_104

Name: TMP_104 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
pairAddr_2(address) := TMP_104(address)
Function name: registerPair
asgn

Name: TMP_104 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef

Name: pairAddr Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_107 = CONVERT _vaderPool_5 to address
has variable
[i] TMP_107 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
pairAddr_1(address) := TMP_107(address)
has variable
[i] pairAddr cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_107 = CONVERT _vaderPool_5 to address
Function name: registerPair

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef

Name: TMP_107 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_107

Name: TMP_107 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
pairAddr_1(address) := TMP_107(address)
Function name: registerPair
asgn

Name: TMP_107 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef

Name: pairAddr Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_108 = CONVERT token1_1 to IERC20
has variable
[i] TMP_108 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TUPLE_2(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_5(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_108']  
has variable
clearing ir...?
_vaderPool_6(IVaderPoolV2) := ϕ(['_vaderPool_1', '_vaderPool_7', '_vaderPool_5', '_vaderPool_10'])
has variable
clearing ir...?
_pairs_9(TwapOracle.PairData[]) := ϕ(['_pairs_8', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
has variable
clearing ir...?
price0CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 0 
has variable
[i] price0CumulativeLast cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
price1CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 1 
has variable
[i] price1CumulativeLast cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_108 = CONVERT token1_1 to IERC20
Function name: registerPair

Name: token1 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_108 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_108

Name: TMP_108 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_2(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_5(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_108']  
Function name: registerPair
High Call: cumulativePrices
func name:cumulativePrices
other func name:cumulativePrices
TUPLE_2
hlc contract name: VADERPOOL func_name: cumulativePrices
('c', [-1], [-1], 'u', None)
TMP_108
('c', [-1], [-1], 'u', None)
TMP_108
('c', [-1], [-1], 'u', None)
TMP_108
wfc len: 3
COPIED
[i]Type for TUPLE_2

Name: TUPLE_2 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_vaderPool_6(IVaderPoolV2) := ϕ(['_vaderPool_1', '_vaderPool_7', '_vaderPool_5', '_vaderPool_10'])
Function name: registerPair
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
_pairs_9(TwapOracle.PairData[]) := ϕ(['_pairs_8', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
price0CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 0 
Function name: registerPair
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price1CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 1 
Function name: registerPair
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price0CumulativeLast, arguments:[]  
has variable
[i] TMP_105 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
_pairs_12(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_11', '_pairs_4', '_pairs_16'])
has variable
clearing ir...?
price0CumulativeLast_2(uint256) := TMP_105(uint256)
has variable
[i] price0CumulativeLast cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price0CumulativeLast, arguments:[]  
Function name: registerPair
High Call: price0CumulativeLast
func name:price0CumulativeLast
other func name:price0CumulativeLast
TMP_105
hlc contract name: PAIR func_name: price0CumulativeLast
wfc len: 0
COPIED
[i]Type for TMP_105

Name: TMP_105 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_12(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_11', '_pairs_4', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
price0CumulativeLast_2(uint256) := TMP_105(uint256)
Function name: registerPair
asgn

Name: TMP_105 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0CumulativeLast Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_109 = CONVERT token1_1 to IERC20
has variable
[i] TMP_109 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_6(IVaderPoolV2), function:getReserves, arguments:['TMP_109']  
has variable
clearing ir...?
_vaderPool_7(IVaderPoolV2) := ϕ(['_vaderPool_6', '_vaderPool_10', '_vaderPool_1', '_vaderPool_5', '_vaderPool_7'])
has variable
clearing ir...?
_pairs_10(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_4', '_pairs_9', '_pairs_16'])
has variable
clearing ir...?
reserve0_1(uint112)= UNPACK TUPLE_3 index: 0 
has variable
[i] reserve0 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
reserve1_1(uint112)= UNPACK TUPLE_3 index: 1 
has variable
[i] reserve1 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
blockTimestampLast_1(uint32)= UNPACK TUPLE_3 index: 2 
has variable
[i] blockTimestampLast cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_109 = CONVERT token1_1 to IERC20
Function name: registerPair

Name: token1 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_109 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_109

Name: TMP_109 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_6(IVaderPoolV2), function:getReserves, arguments:['TMP_109']  
Function name: registerPair
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_3
hlc contract name: VADERPOOL func_name: getReserves
('c', [-1], [-1], 'u', None)
TMP_109
('c', [-1], [-1], 'u', None)
TMP_109
('c', [-1], [-1], 'u', None)
TMP_109
wfc len: 3
COPIED
[i]Type for TUPLE_3

Name: TUPLE_3 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_vaderPool_7(IVaderPoolV2) := ϕ(['_vaderPool_6', '_vaderPool_10', '_vaderPool_1', '_vaderPool_5', '_vaderPool_7'])
Function name: registerPair
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
_pairs_10(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_4', '_pairs_9', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
reserve0_1(uint112)= UNPACK TUPLE_3 index: 0 
Function name: registerPair
Reading tuple TUPLE_3 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve1_1(uint112)= UNPACK TUPLE_3 index: 1 
Function name: registerPair
Reading tuple TUPLE_3 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestampLast_1(uint32)= UNPACK TUPLE_3 index: 2 
Function name: registerPair
Reading tuple TUPLE_3 index 2
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price1CumulativeLast, arguments:[]  
has variable
[i] TMP_106 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
_pairs_13(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_12', '_pairs_19', '_pairs_4', '_pairs_16'])
has variable
clearing ir...?
price1CumulativeLast_2(uint256) := TMP_106(uint256)
has variable
[i] price1CumulativeLast cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price1CumulativeLast, arguments:[]  
Function name: registerPair
High Call: price1CumulativeLast
func name:price1CumulativeLast
other func name:price1CumulativeLast
TMP_106
hlc contract name: PAIR func_name: price1CumulativeLast
wfc len: 0
COPIED
[i]Type for TMP_106

Name: TMP_106 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_13(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_12', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
price1CumulativeLast_2(uint256) := TMP_106(uint256)
Function name: registerPair
asgn

Name: TMP_106 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1CumulativeLast Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
pairAddr_3(address) := ϕ(['pairAddr_1', 'pairAddr_2'])
has variable
[i] pairAddr cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
price0CumulativeLast_3(uint256) := ϕ(['price0CumulativeLast_1', 'price0CumulativeLast_2'])
has variable
[i] price0CumulativeLast cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
price1CumulativeLast_3(uint256) := ϕ(['price1CumulativeLast_1', 'price1CumulativeLast_2'])
has variable
[i] price1CumulativeLast cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
reserve0_3(uint112) := ϕ(['reserve0_2', 'reserve0_1'])
has variable
[i] reserve0 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
reserve1_3(uint112) := ϕ(['reserve1_2', 'reserve1_1'])
has variable
[i] reserve1 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
blockTimestampLast_3(uint32) := ϕ(['blockTimestampLast_2', 'blockTimestampLast_1'])
has variable
[i] blockTimestampLast cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
pairAddr_3(address) := ϕ(['pairAddr_1', 'pairAddr_2'])
Function name: registerPair
Phi
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
price0CumulativeLast_3(uint256) := ϕ(['price0CumulativeLast_1', 'price0CumulativeLast_2'])
Function name: registerPair
Phi
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price1CumulativeLast_3(uint256) := ϕ(['price1CumulativeLast_1', 'price1CumulativeLast_2'])
Function name: registerPair
Phi
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_3(uint112) := ϕ(['reserve0_2', 'reserve0_1'])
Function name: registerPair
Phi
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve1_3(uint112) := ϕ(['reserve1_2', 'reserve1_1'])
Function name: registerPair
Phi
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestampLast_3(uint32) := ϕ(['blockTimestampLast_2', 'blockTimestampLast_1'])
Function name: registerPair
Phi
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TUPLE_1(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
has variable
clearing ir...?
_pairs_14(TwapOracle.PairData[]) := ϕ(['_pairs_13', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
has variable
clearing ir...?
reserve0_2(uint112)= UNPACK TUPLE_1 index: 0 
has variable
[i] reserve0 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
reserve1_2(uint112)= UNPACK TUPLE_1 index: 1 
has variable
[i] reserve1 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
blockTimestampLast_2(uint32)= UNPACK TUPLE_1 index: 2 
has variable
[i] blockTimestampLast cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TUPLE_1(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
Function name: registerPair
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_1
hlc contract name: PAIR func_name: getReserves
('c', [-1], [-1], 'u', None)
('c', [-1], [-1], 'u', None)
('c', [-1], [-1], 'u', None)
wfc len: 3
COPIED
[i]Type for TUPLE_1

Name: TUPLE_1 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_14(TwapOracle.PairData[]) := ϕ(['_pairs_13', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
reserve0_2(uint112)= UNPACK TUPLE_1 index: 0 
Function name: registerPair
Reading tuple TUPLE_1 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve1_2(uint112)= UNPACK TUPLE_1 index: 1 
Function name: registerPair
Reading tuple TUPLE_1 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestampLast_2(uint32)= UNPACK TUPLE_1 index: 2 
Function name: registerPair
Reading tuple TUPLE_1 index 2
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_110(bool) = reserve0_3 != 0
has variable
[i] TMP_110 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_111(bool) = reserve1_3 != 0
has variable
[i] TMP_111 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_112(bool) = TMP_110 && TMP_111
has variable
[i] TMP_112 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,TwapOracle::registerPair: No reserves)
typecheckig node...
TMP_110(bool) = reserve0_3 != 0
Function name: registerPair
[i]Type for TMP_110

Name: TMP_110 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_111(bool) = reserve1_3 != 0
Function name: registerPair
[i]Type for TMP_111

Name: TMP_111 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_112(bool) = TMP_110 && TMP_111
Function name: registerPair
[i]Type for TMP_112

Name: TMP_112 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,TwapOracle::registerPair: No reserves)
[i]Type for TMP_113

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_114(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
clearing ir...?
TMP_115(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_114)
clearing ir...?
REF_27(bool) -> _pairExists_1[TMP_115]
has variable
clearing ir...?
_pairExists_2(mapping(bytes32 => bool)) := ϕ(['_pairExists_1'])
has variable
clearing ir...?
REF_27 (->_pairExists_2) := True(bool)
has variable
typecheckig node...
TMP_114(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_114

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_115(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_114)
[i]Type for TMP_115

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_27(bool) -> _pairExists_1[TMP_115]
Function name: registerPair
INDEX

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE IS BOOL TYPE
[i]Type for REF_27

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairExists_2(mapping(bytes32 => bool)) := ϕ(['_pairExists_1'])
Function name: registerPair
Phi
[i]Type for _pairExists

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_27 (->_pairExists_2) := True(bool)
Function name: registerPair
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_27 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_27

Name: REF_27 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_116 = new uq112x112(0)
clearing ir...?
TMP_117 = new uq112x112(0)
clearing ir...?
TMP_118 = new PairData(pairAddr_3,token0_1,token1_1,price0CumulativeLast_3,price1CumulativeLast_3,blockTimestampLast_3,TMP_116,TMP_117)
clearing ir...?
REF_31 -> LENGTH _pairs_14
clearing ir...?
TMP_120(uint256) := REF_31(uint256)
has variable
[i] TMP_120 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_121(uint256) = TMP_120 (c)+ 1
has variable
[i] TMP_121 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
_pairs_15(TwapOracle.PairData[]) := ϕ(['_pairs_14'])
has variable
clearing ir...?
REF_31 (->_pairs_15) := TMP_121(uint256)
has variable
clearing ir...?
REF_32(TwapOracle.PairData) -> _pairs_15[TMP_120]
has variable
clearing ir...?
_pairs_16(TwapOracle.PairData[]) := ϕ(['_pairs_15'])
has variable
clearing ir...?
REF_32 (->_pairs_16) := TMP_118(TwapOracle.PairData)
has variable
typecheckig node...
TMP_116 = new uq112x112(0)
[i]Type for TMP_116

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_117 = new uq112x112(0)
[i]Type for TMP_117

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_118 = new PairData(pairAddr_3,token0_1,token1_1,price0CumulativeLast_3,price1CumulativeLast_3,blockTimestampLast_3,TMP_116,TMP_117)
[i]Type for TMP_118

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_31 -> LENGTH _pairs_14
[i]Type for REF_31

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_120(uint256) := REF_31(uint256)
Function name: registerPair
asgn

Name: REF_31 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_120 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_120

Name: TMP_120 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_120(uint256) := REF_31(uint256)
XXXXX
TMP_121(uint256) = TMP_120 (c)+ 1
Function name: registerPair
val: 1

Name: TMP_121 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_121 Function: registerPair
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_121

Name: TMP_121 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_121(uint256) = TMP_120 (c)+ 1
XXXXX
_pairs_15(TwapOracle.PairData[]) := ϕ(['_pairs_14'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
REF_31 (->_pairs_15) := TMP_121(uint256)
Function name: registerPair
asgn

Name: TMP_121 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_31 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_31

Name: REF_31 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_32(TwapOracle.PairData) -> _pairs_15[TMP_120]
Function name: registerPair
INDEX

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_32

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
_pairs_16(TwapOracle.PairData[]) := ϕ(['_pairs_15'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
REF_32 (->_pairs_16) := TMP_118(TwapOracle.PairData)
Function name: registerPair
asgn

Name: TMP_118 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_32 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_32

Name: REF_32 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
This IR caused addback:
REF_32 (->_pairs_16) := TMP_118(TwapOracle.PairData)
XXXXX
WORKLIST iteration 0 for function call "registerPair":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
VADER_9(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
Function name: registerPair
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
USDV_6(address) := ϕ(['USDV_8', 'USDV_5', 'USDV_0', 'USDV_2'])
Function name: registerPair
Phi
[i]Type for USDV

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
done.
_vaderPool_2(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_0', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
Function name: registerPair
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
_pairs_5(TwapOracle.PairData[]) := ϕ(['_pairs_0', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, Ownable.onlyOwner()()
Internal call...
onlyOwner
Function: onlyOwner
ic
Internal cal param_cache
0
0
done.
typecheckig node...
MODIFIER_CALL, TwapOracle.initialized()()
Internal call...
initialized
Function: initialized
ic
Internal cal param_cache
0
0
done.
typecheckig node...
TMP_91(bool) = token0_1 == VADER_11
Function name: registerPair
[i]Type for TMP_91

Name: TMP_91 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_92(bool) = token0_1 == USDV_8
Function name: registerPair
[i]Type for TMP_92

Name: TMP_92 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_93(bool) = TMP_91 || TMP_92
Function name: registerPair
[i]Type for TMP_93

Name: TMP_93 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,TwapOracle::registerPair: Invalid token0 address)
[i]Type for TMP_94

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_95(bool) = token0_1 != token1_1
Function name: registerPair
[i]Type for TMP_95

Name: TMP_95 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,TwapOracle::registerPair: Same token address)
[i]Type for TMP_96

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_97(bool) = INTERNAL_CALL, TwapOracle.pairExists(address,address)(token0_1,token1_1)
Function name: registerPair
Internal call...
pairExists
token0
token1
Function: pairExists
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
0

Name: TMP_21 Function: pairExists
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_97 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_97

Name: TMP_97 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_98 = ! TMP_97 
[i]Type for TMP_98

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,TwapOracle::registerPair: Pair exists)
[i]Type for TMP_99

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
TMP_100(bool) = token0_1 == VADER_12
Function name: registerPair
[i]Type for TMP_100

Name: TMP_100 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_100
Condition...
Conidtion: 
TMP_100
TMP_100
typecheckig node...
TMP_101 = CONVERT factory_1 to IUniswapV2Factory
Function name: registerPair

Name: factory Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef

Name: TMP_101 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[i]Type for TMP_101

Name: TMP_101 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
TMP_102(address) = HIGH_LEVEL_CALL, dest:TMP_101(IUniswapV2Factory), function:getPair, arguments:['token0_1', 'token1_1']  
Function name: registerPair
High Call: getPair
func name:getPair
other func name:getPair
TMP_102
hlc contract name: FACTORY func_name: getPair
('c', [-1], [-1], 0, 'PAIR')
token0
token1
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR', -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_102

Name: TMP_102 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
_pairs_11(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_10', '_pairs_4', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
TMP_103 = CONVERT TMP_102 to IUniswapV2Pair
Function name: registerPair

Name: TMP_102 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef

Name: TMP_103 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
[i]Type for TMP_103

Name: TMP_103 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
pair_1(IUniswapV2Pair) := TMP_103(IUniswapV2Pair)
Function name: registerPair
asgn

Name: TMP_103 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef

Name: pair Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pair

Name: pair Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_104 = CONVERT pair_1 to address
Function name: registerPair

Name: pair Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef

Name: TMP_104 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
[i]Type for TMP_104

Name: TMP_104 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
pairAddr_2(address) := TMP_104(address)
Function name: registerPair
asgn

Name: TMP_104 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_107 = CONVERT _vaderPool_5 to address
Function name: registerPair

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef

Name: TMP_107 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
[i]Type for TMP_107

Name: TMP_107 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
pairAddr_1(address) := TMP_107(address)
Function name: registerPair
asgn

Name: TMP_107 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_108 = CONVERT token1_1 to IERC20
Function name: registerPair

Name: token1 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_108 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_108

Name: TMP_108 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_2(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_5(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_108']  
Function name: registerPair
High Call: cumulativePrices
func name:cumulativePrices
other func name:cumulativePrices
TUPLE_2
hlc contract name: VADERPOOL func_name: cumulativePrices
('c', [-1], [-1], 'u', None)
TMP_108
('c', [-1], [-1], 'u', None)
TMP_108
('c', [-1], [-1], 'u', None)
TMP_108
wfc len: 3
COPIED
[i]Type for TUPLE_2

Name: TUPLE_2 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_vaderPool_6(IVaderPoolV2) := ϕ(['_vaderPool_1', '_vaderPool_7', '_vaderPool_5', '_vaderPool_10'])
Function name: registerPair
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
_pairs_9(TwapOracle.PairData[]) := ϕ(['_pairs_8', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
price0CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 0 
Function name: registerPair
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price1CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 1 
Function name: registerPair
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price0CumulativeLast, arguments:[]  
Function name: registerPair
High Call: price0CumulativeLast
func name:price0CumulativeLast
other func name:price0CumulativeLast
TMP_105
hlc contract name: PAIR func_name: price0CumulativeLast
wfc len: 0
COPIED
[i]Type for TMP_105

Name: TMP_105 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_12(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_11', '_pairs_4', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
price0CumulativeLast_2(uint256) := TMP_105(uint256)
Function name: registerPair
asgn

Name: TMP_105 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_109 = CONVERT token1_1 to IERC20
Function name: registerPair

Name: token1 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_109 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_109

Name: TMP_109 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_6(IVaderPoolV2), function:getReserves, arguments:['TMP_109']  
Function name: registerPair
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_3
hlc contract name: VADERPOOL func_name: getReserves
('c', [-1], [-1], 'u', None)
TMP_109
('c', [-1], [-1], 'u', None)
TMP_109
('c', [-1], [-1], 'u', None)
TMP_109
wfc len: 3
COPIED
[i]Type for TUPLE_3

Name: TUPLE_3 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_vaderPool_7(IVaderPoolV2) := ϕ(['_vaderPool_6', '_vaderPool_10', '_vaderPool_1', '_vaderPool_5', '_vaderPool_7'])
Function name: registerPair
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
_pairs_10(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_4', '_pairs_9', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
reserve0_1(uint112)= UNPACK TUPLE_3 index: 0 
Function name: registerPair
Reading tuple TUPLE_3 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve1_1(uint112)= UNPACK TUPLE_3 index: 1 
Function name: registerPair
Reading tuple TUPLE_3 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestampLast_1(uint32)= UNPACK TUPLE_3 index: 2 
Function name: registerPair
Reading tuple TUPLE_3 index 2
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price1CumulativeLast, arguments:[]  
Function name: registerPair
High Call: price1CumulativeLast
func name:price1CumulativeLast
other func name:price1CumulativeLast
TMP_106
hlc contract name: PAIR func_name: price1CumulativeLast
wfc len: 0
COPIED
[i]Type for TMP_106

Name: TMP_106 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_13(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_12', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
price1CumulativeLast_2(uint256) := TMP_106(uint256)
Function name: registerPair
asgn

Name: TMP_106 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
pairAddr_3(address) := ϕ(['pairAddr_1', 'pairAddr_2'])
Function name: registerPair
Phi
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
price0CumulativeLast_3(uint256) := ϕ(['price0CumulativeLast_1', 'price0CumulativeLast_2'])
Function name: registerPair
Phi
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price1CumulativeLast_3(uint256) := ϕ(['price1CumulativeLast_1', 'price1CumulativeLast_2'])
Function name: registerPair
Phi
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_3(uint112) := ϕ(['reserve0_2', 'reserve0_1'])
Function name: registerPair
Phi
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve1_3(uint112) := ϕ(['reserve1_2', 'reserve1_1'])
Function name: registerPair
Phi
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestampLast_3(uint32) := ϕ(['blockTimestampLast_2', 'blockTimestampLast_1'])
Function name: registerPair
Phi
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TUPLE_1(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
Function name: registerPair
High Call: getReserves
func name:getReserves
other func name:getReserves
TUPLE_1
hlc contract name: PAIR func_name: getReserves
('c', [-1], [-1], 'u', None)
('c', [-1], [-1], 'u', None)
('c', [-1], [-1], 'u', None)
wfc len: 3
COPIED
[i]Type for TUPLE_1

Name: TUPLE_1 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_14(TwapOracle.PairData[]) := ϕ(['_pairs_13', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
reserve0_2(uint112)= UNPACK TUPLE_1 index: 0 
Function name: registerPair
Reading tuple TUPLE_1 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve1_2(uint112)= UNPACK TUPLE_1 index: 1 
Function name: registerPair
Reading tuple TUPLE_1 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint112
uint112
Final Type: uint112
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestampLast_2(uint32)= UNPACK TUPLE_1 index: 2 
Function name: registerPair
Reading tuple TUPLE_1 index 2
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_110(bool) = reserve0_3 != 0
Function name: registerPair
[i]Type for TMP_110

Name: TMP_110 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_111(bool) = reserve1_3 != 0
Function name: registerPair
[i]Type for TMP_111

Name: TMP_111 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_112(bool) = TMP_110 && TMP_111
Function name: registerPair
[i]Type for TMP_112

Name: TMP_112 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,TwapOracle::registerPair: No reserves)
[i]Type for TMP_113

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_114(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_114

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_115(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_114)
[i]Type for TMP_115

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_27(bool) -> _pairExists_1[TMP_115]
Function name: registerPair
INDEX

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE IS BOOL TYPE
[i]Type for REF_27

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairExists_2(mapping(bytes32 => bool)) := ϕ(['_pairExists_1'])
Function name: registerPair
Phi
[i]Type for _pairExists

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_27 (->_pairExists_2) := True(bool)
Function name: registerPair
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_27 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_27

Name: REF_27 Function: registerPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_116 = new uq112x112(0)
[i]Type for TMP_116

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_117 = new uq112x112(0)
[i]Type for TMP_117

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_118 = new PairData(pairAddr_3,token0_1,token1_1,price0CumulativeLast_3,price1CumulativeLast_3,blockTimestampLast_3,TMP_116,TMP_117)
[i]Type for TMP_118

Name: TMP_118 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_31 -> LENGTH _pairs_14
[i]Type for REF_31

Name: REF_31 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_120(uint256) := REF_31(uint256)
Function name: registerPair
asgn

Name: REF_31 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_120 Function: registerPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_120

Name: TMP_120 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_121(uint256) = TMP_120 (c)+ 1
Function name: registerPair
val: 1

Name: TMP_121 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_121 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_121

Name: TMP_121 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_pairs_15(TwapOracle.PairData[]) := ϕ(['_pairs_14'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
REF_31 (->_pairs_15) := TMP_121(uint256)
Function name: registerPair
asgn

Name: TMP_121 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_31 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_31

Name: REF_31 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_32(TwapOracle.PairData) -> _pairs_15[TMP_120]
Function name: registerPair
INDEX

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_32

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
_pairs_16(TwapOracle.PairData[]) := ϕ(['_pairs_15'])
Function name: registerPair
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
REF_32 (->_pairs_16) := TMP_118(TwapOracle.PairData)
Function name: registerPair
asgn

Name: TMP_118 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_32 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_32

Name: REF_32 Function: registerPair
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
This IR caused addback:
REF_32 (->_pairs_16) := TMP_118(TwapOracle.PairData)
XXXXX
WORKLIST iteration 1 for function call "registerPair":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: registerPair
State_var: _aggregators
Finding type for _aggregators...
mapping(address => address)
Check copy_toekn_tuple
([-1], [-1], 0, 'AGGREGATOR')
----
Type: mapping(address => address)
mapping(address => address)
address
Final Type: address

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _usdvEnabled
Finding type for _usdvEnabled...
bool
SKIP bool
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairs
Finding type for _pairs...
TwapOracle.PairData[]
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData[]
TwapOracle.PairData[]
TwapOracle.PairData
Final Type: TwapOracle.PairData
global
_pairs
pair
global
_pairs
token0
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN0')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
token1
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN1')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
price0CumulativeLast
global
_pairs
price1CumulativeLast
global
_pairs
blockTimestampLast
global
_pairs
price0Average
global
_pairs
price1Average
Check copy_toekn_tuple
([2], [-1], [-404], None)
----
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
price1Average
_x
FIELDS:
price1Average Fields:
_x
^^^
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
_pairs.price1Average
_x
Check copy_toekn_tuple
([1], [-1], [0], None)
----
Type: uint224
uint224
Final Type: uint224
Type: uint224
uint224
Final Type: uint224
FIELDS:
_pairs.price1Average Fields:
_x
^^^
FIELDS:
_pairs Fields:
token0
token1
price1Average
^^^

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-1, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _vaderPool
Finding type for _vaderPool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'VADERPOOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _updatePeriod
Finding type for _updatePeriod...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairExists
Finding type for _pairExists...
mapping(bytes32 => bool)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes32 => bool)
mapping(bytes32 => bool)
bool
Final Type: bool

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: update
Function name: update
Function Visibility (test): external
-100
clearning node...
clearing ir...?
VADER_13(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
has variable
clearing ir...?
_vaderPool_8(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_0', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
has variable
clearing ir...?
_updatePeriod_2(uint256) := ϕ(['_updatePeriod_0', '_updatePeriod_4', '_updatePeriod_1'])
has variable
clearing ir...?
_pairs_17(TwapOracle.PairData[]) := ϕ(['_pairs_0', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
has variable
typecheckig node...
VADER_13(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
Function name: update
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
_vaderPool_8(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_0', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
Function name: update
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
_updatePeriod_2(uint256) := ϕ(['_updatePeriod_0', '_updatePeriod_4', '_updatePeriod_1'])
Function name: update
Phi
[i]Type for _updatePeriod

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_17(TwapOracle.PairData[]) := ϕ(['_pairs_0', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, Ownable.onlyOwner()()
typecheckig node...
MODIFIER_CALL, Ownable.onlyOwner()()
Internal call...
onlyOwner
Function: onlyOwner
ic
Internal cal param_cache
0
0
done.
clearning node...
clearing ir...?
MODIFIER_CALL, TwapOracle.initialized()()
typecheckig node...
MODIFIER_CALL, TwapOracle.initialized()()
Internal call...
initialized
Function: initialized
ic
Internal cal param_cache
0
0
done.
clearning node...
clearing ir...?
REF_33 -> LENGTH _pairs_19
clearing ir...?
pairCount_1(uint256) := REF_33(uint256)
has variable
[i] pairCount cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
REF_33 -> LENGTH _pairs_19
[i]Type for REF_33

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairCount_1(uint256) := REF_33(uint256)
Function name: update
asgn

Name: REF_33 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairCount Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairCount

Name: pairCount Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
pairCount_1(uint256) := REF_33(uint256)
XXXXX
clearning node...
clearing ir...?
i_1(uint256) := 0(uint256)
has variable
[i] i cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
i_1(uint256) := 0(uint256)
Function name: update
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
has variable
[i] i cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_124(bool) = i_2 < pairCount_1
has variable
[i] TMP_124 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
CONDITION TMP_124
typecheckig node...
i_2(uint256) := ϕ(['i_3', 'i_1'])
Function name: update
Phi
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_124(bool) = i_2 < pairCount_1
Function name: update
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_124 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_124

Name: TMP_124 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_124(bool) = i_2 < pairCount_1
XXXXX
CONDITION TMP_124
Condition...
Conidtion: 
TMP_124
TMP_124
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_34(TwapOracle.PairData) -> _pairs_19[i_2]
has variable
clearing ir...?
pairData_1 (-> ['_pairs'])(TwapOracle.PairData) := REF_34(TwapOracle.PairData)
has variable
[i] pairData cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
REF_34(TwapOracle.PairData) -> _pairs_19[i_2]
Function name: update
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_pairs
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData
TwapOracle.PairData
Final Type: TwapOracle.PairData
None
None
pair
None
None
token0
None
None
token1
None
None
price0CumulativeLast
None
None
price1CumulativeLast
None
None
blockTimestampLast
None
None
price0Average
None
None
price1Average
FIELDS:
None Fields:
^^^
[i]Type for REF_34

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
pairData_1 (-> ['_pairs'])(TwapOracle.PairData) := REF_34(TwapOracle.PairData)
Function name: update
asgn

Name: REF_34 Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef

Name: pairData Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_45(address) -> pairData_1 (-> ['_pairs']).token0
has variable
clearing ir...?
TMP_139(bool) = REF_45 == VADER_15
has variable
[i] TMP_139 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
CONDITION TMP_139
typecheckig node...
REF_45(address) -> pairData_1 (-> ['_pairs']).token0
Function name: update
MEMBER
pairData
token0
update
pairData Fields:
^^^
[i]Type for REF_45

Name: pairData.token0 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.token0 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_139(bool) = REF_45 == VADER_15
Function name: update
[i]Type for TMP_139

Name: TMP_139 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_139
Condition...
Conidtion: 
TMP_139
TMP_139
clearning node...
clearing ir...?
REF_49(address) -> pairData_1 (-> ['_pairs']).token1
has variable
clearing ir...?
TMP_140 = CONVERT REF_49 to IERC20
has variable
[i] TMP_140 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TUPLE_5(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_10(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_140']  
has variable
clearing ir...?
VADER_16(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_3', 'VADER_15', 'VADER_12'])
has variable
clearing ir...?
_vaderPool_11(IVaderPoolV2) := ϕ(['_vaderPool_1', '_vaderPool_7', '_vaderPool_5', '_vaderPool_10'])
has variable
clearing ir...?
_updatePeriod_5(uint256) := ϕ(['_updatePeriod_4', '_updatePeriod_1'])
has variable
clearing ir...?
_pairs_20(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_16', '_pairs_4'])
has variable
clearing ir...?
price0Cumulative_1(uint256)= UNPACK TUPLE_5 index: 0 
has variable
[i] price0Cumulative cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
price1Cumulative_1(uint256)= UNPACK TUPLE_5 index: 1 
has variable
[i] price1Cumulative cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
blockTimestamp_1(uint32)= UNPACK TUPLE_5 index: 2 
has variable
[i] blockTimestamp cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
REF_49(address) -> pairData_1 (-> ['_pairs']).token1
Function name: update
MEMBER
pairData
token1
update
pairData Fields:
token0
^^^
[i]Type for REF_49

Name: pairData.token1 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.token1 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_140 = CONVERT REF_49 to IERC20
Function name: update

Name: pairData.token1 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_140 = CONVERT REF_49 to IERC20
XXXXX
TUPLE_5(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_10(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_140']  
Function name: update
High Call: cumulativePrices
func name:cumulativePrices
other func name:cumulativePrices
TUPLE_5
hlc contract name: VADERPOOL func_name: cumulativePrices
('c', [-1], [-1], 'u', None)
TMP_140
('c', [-1], [-1], 'u', None)
TMP_140
('c', [-1], [-1], 'u', None)
TMP_140
wfc len: 3
COPIED
[i]Type for TUPLE_5

Name: TUPLE_5 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
VADER_16(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_3', 'VADER_15', 'VADER_12'])
Function name: update
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
_vaderPool_11(IVaderPoolV2) := ϕ(['_vaderPool_1', '_vaderPool_7', '_vaderPool_5', '_vaderPool_10'])
Function name: update
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
_updatePeriod_5(uint256) := ϕ(['_updatePeriod_4', '_updatePeriod_1'])
Function name: update
Phi
[i]Type for _updatePeriod

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_20(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_16', '_pairs_4'])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
price0Cumulative_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: update
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price1Cumulative_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: update
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestamp_1(uint32)= UNPACK TUPLE_5 index: 2 
Function name: update
Reading tuple TUPLE_5 index 2
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_47(address) -> pairData_1 (-> ['_pairs']).pair
has variable
clearing ir...?
TUPLE_4(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['REF_47'] 
has variable
clearing ir...?
price0Cumulative_2(uint256)= UNPACK TUPLE_4 index: 0 
has variable
[i] price0Cumulative cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
price1Cumulative_2(uint256)= UNPACK TUPLE_4 index: 1 
has variable
[i] price1Cumulative cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
blockTimestamp_2(uint32)= UNPACK TUPLE_4 index: 2 
has variable
[i] blockTimestamp cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
REF_47(address) -> pairData_1 (-> ['_pairs']).pair
Function name: update
MEMBER
pairData
pair
update
pairData Fields:
token0
token1
^^^
[i]Type for REF_47

Name: pairData.pair Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.pair Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_4(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['REF_47'] 
Function name: update
Library Call: currentCumulativePrices
hlc contract name: UniswapV2OracleLibrary func_name: currentCumulativePrices
('c', [-1], [-1], 'u', None)
REF_47
('c', [-1], [-1], 'u', None)
REF_47
('c', [-1], [-1], 'u', None)
REF_47
wfc len: 3
COPIED
[i]Type for TUPLE_4

Name: TUPLE_4 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price0Cumulative_2(uint256)= UNPACK TUPLE_4 index: 0 
Function name: update
Reading tuple TUPLE_4 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price1Cumulative_2(uint256)= UNPACK TUPLE_4 index: 1 
Function name: update
Reading tuple TUPLE_4 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestamp_2(uint32)= UNPACK TUPLE_4 index: 2 
Function name: update
Reading tuple TUPLE_4 index 2
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
price0Cumulative_3(uint256) := ϕ(['price0Cumulative_1', 'price0Cumulative_2'])
has variable
[i] price0Cumulative cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
price1Cumulative_3(uint256) := ϕ(['price1Cumulative_1', 'price1Cumulative_2'])
has variable
[i] price1Cumulative cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
blockTimestamp_3(uint32) := ϕ(['blockTimestamp_1', 'blockTimestamp_2'])
has variable
[i] blockTimestamp cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
price0Cumulative_3(uint256) := ϕ(['price0Cumulative_1', 'price0Cumulative_2'])
Function name: update
Phi
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price1Cumulative_3(uint256) := ϕ(['price1Cumulative_1', 'price1Cumulative_2'])
Function name: update
Phi
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestamp_3(uint32) := ϕ(['blockTimestamp_1', 'blockTimestamp_2'])
Function name: update
Phi
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_35(uint32) -> pairData_1 (-> ['_pairs']).blockTimestampLast
has variable
clearing ir...?
TMP_125(uint32) = blockTimestamp_3 (c)- REF_35
has variable
[i] TMP_125 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
timeElapsed_1(uint32) := TMP_125(uint32)
has variable
[i] timeElapsed cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
REF_35(uint32) -> pairData_1 (-> ['_pairs']).blockTimestampLast
Function name: update
MEMBER
pairData
blockTimestampLast
update
pairData Fields:
token0
token1
pair
^^^
[i]Type for REF_35

Name: pairData.blockTimestampLast Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.blockTimestampLast Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_125(uint32) = blockTimestamp_3 (c)- REF_35
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.blockTimestampLast Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_125 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_125

Name: TMP_125 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_125(uint32) = blockTimestamp_3 (c)- REF_35
XXXXX
timeElapsed_1(uint32) := TMP_125(uint32)
Function name: update
asgn

Name: TMP_125 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: timeElapsed Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for timeElapsed

Name: timeElapsed Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_126(bool) = timeElapsed_1 >= _updatePeriod_4
has variable
[i] TMP_126 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,TwapOracle::update: Period not elapsed)
typecheckig node...
TMP_126(bool) = timeElapsed_1 >= _updatePeriod_4
Function name: update
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_126

Name: TMP_126 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,TwapOracle::update: Period not elapsed)
[i]Type for TMP_127

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_36(FixedPoint.uq112x112) -> pairData_1 (-> ['_pairs']).price0Average
has variable
clearing ir...?
REF_38(uint256) -> pairData_1 (-> ['_pairs']).price0CumulativeLast
has variable
clearing ir...?
TMP_128(uint256) = price0Cumulative_3 - REF_38
has variable
[i] TMP_128 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_129(uint256) = TMP_128 / timeElapsed_1
has variable
[i] TMP_129 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_130 = CONVERT TMP_129 to uint224
has variable
[i] TMP_130 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_131 = new uq112x112(TMP_130)
clearing ir...?
pairData_2 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_1 (-> ['_pairs'])"])
has variable
[i] pairData cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
has variable
clearing ir...?
_pairs_21(TwapOracle.PairData[]) := ϕ(["pairData_2 (-> ['_pairs'])"])
has variable
typecheckig node...
REF_36(FixedPoint.uq112x112) -> pairData_1 (-> ['_pairs']).price0Average
Function name: update
MEMBER
pairData
price0Average
update
pairData Fields:
token0
token1
pair
blockTimestampLast
^^^
[i]Type for REF_36

Name: pairData.price0Average Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0Average Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_38(uint256) -> pairData_1 (-> ['_pairs']).price0CumulativeLast
Function name: update
MEMBER
pairData
price0CumulativeLast
update
pairData Fields:
token0
token1
pair
blockTimestampLast
^^^
[i]Type for REF_38

Name: pairData.price0CumulativeLast Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0CumulativeLast Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_128(uint256) = price0Cumulative_3 - REF_38
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0CumulativeLast Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_128 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_128

Name: TMP_128 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_128(uint256) = price0Cumulative_3 - REF_38
XXXXX
TMP_129(uint256) = TMP_128 / timeElapsed_1
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_129 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_129

Name: TMP_129 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_130 = CONVERT TMP_129 to uint224
Function name: update

Name: TMP_129 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_130 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_130

Name: TMP_130 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_131 = new uq112x112(TMP_130)
[i]Type for TMP_131

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_2 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_1 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price0Average
Finance Type: undef
done.
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
Function name: update
asgn

Name: TMP_131 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_36 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_36

Name: REF_36 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_36 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
XXXXX
_pairs_21(TwapOracle.PairData[]) := ϕ(["pairData_2 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_39(FixedPoint.uq112x112) -> pairData_2 (-> ['_pairs']).price1Average
has variable
clearing ir...?
REF_41(uint256) -> pairData_2 (-> ['_pairs']).price1CumulativeLast
has variable
clearing ir...?
TMP_132(uint256) = price1Cumulative_3 - REF_41
has variable
[i] TMP_132 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_133(uint256) = TMP_132 / timeElapsed_1
has variable
[i] TMP_133 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_134 = CONVERT TMP_133 to uint224
has variable
[i] TMP_134 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
TMP_135 = new uq112x112(TMP_134)
clearing ir...?
pairData_3 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_2 (-> ['_pairs'])"])
has variable
[i] pairData cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
has variable
clearing ir...?
_pairs_22(TwapOracle.PairData[]) := ϕ(["pairData_3 (-> ['_pairs'])"])
has variable
typecheckig node...
REF_39(FixedPoint.uq112x112) -> pairData_2 (-> ['_pairs']).price1Average
Function name: update
MEMBER
pairData
price1Average
update
pairData Fields:
price0Average
^^^
[i]Type for REF_39

Name: pairData.price1Average Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1Average Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_41(uint256) -> pairData_2 (-> ['_pairs']).price1CumulativeLast
Function name: update
MEMBER
pairData
price1CumulativeLast
update
pairData Fields:
price0Average
^^^
[i]Type for REF_41

Name: pairData.price1CumulativeLast Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1CumulativeLast Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_132(uint256) = price1Cumulative_3 - REF_41
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1CumulativeLast Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_132 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_132

Name: TMP_132 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_132(uint256) = price1Cumulative_3 - REF_41
XXXXX
TMP_133(uint256) = TMP_132 / timeElapsed_1
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_133 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_133

Name: TMP_133 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_134 = CONVERT TMP_133 to uint224
Function name: update

Name: TMP_133 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_134 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_134

Name: TMP_134 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_135 = new uq112x112(TMP_134)
[i]Type for TMP_135

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_3 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_2 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1Average, price0Average
Finance Type: undef
done.
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
Function name: update
asgn

Name: TMP_135 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_39 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_39

Name: REF_39 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_39 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
XXXXX
_pairs_22(TwapOracle.PairData[]) := ϕ(["pairData_3 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_42(uint256) -> pairData_3 (-> ['_pairs']).price0CumulativeLast
has variable
clearing ir...?
pairData_4 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_3 (-> ['_pairs'])"])
has variable
[i] pairData cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
REF_42 (->pairData_4 (-> ['_pairs'])) := price0Cumulative_3(uint256)
has variable
clearing ir...?
_pairs_23(TwapOracle.PairData[]) := ϕ(["pairData_4 (-> ['_pairs'])"])
has variable
typecheckig node...
REF_42(uint256) -> pairData_3 (-> ['_pairs']).price0CumulativeLast
Function name: update
MEMBER
pairData
price0CumulativeLast
update
pairData Fields:
price1Average
price0Average
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint256
uint256
Final Type: uint256
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_42

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_4 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_3 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price0CumulativeLast, price1Average, price0Average
Finance Type: undef
done.
REF_42 (->pairData_4 (-> ['_pairs'])) := price0Cumulative_3(uint256)
Function name: update
asgn

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_42 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_42

Name: REF_42 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_42 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_23(TwapOracle.PairData[]) := ϕ(["pairData_4 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_43(uint256) -> pairData_4 (-> ['_pairs']).price1CumulativeLast
has variable
clearing ir...?
pairData_5 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_4 (-> ['_pairs'])"])
has variable
[i] pairData cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
REF_43 (->pairData_5 (-> ['_pairs'])) := price1Cumulative_3(uint256)
has variable
clearing ir...?
_pairs_24(TwapOracle.PairData[]) := ϕ(["pairData_5 (-> ['_pairs'])"])
has variable
typecheckig node...
REF_43(uint256) -> pairData_4 (-> ['_pairs']).price1CumulativeLast
Function name: update
MEMBER
pairData
price1CumulativeLast
update
pairData Fields:
price0CumulativeLast
price1Average
price0Average
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint256
uint256
Final Type: uint256
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_43

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_5 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_4 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1CumulativeLast, price0CumulativeLast, price1Average, price0Average
Finance Type: undef
done.
REF_43 (->pairData_5 (-> ['_pairs'])) := price1Cumulative_3(uint256)
Function name: update
asgn

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_43 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_43

Name: REF_43 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_43 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_24(TwapOracle.PairData[]) := ϕ(["pairData_5 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_44(uint32) -> pairData_5 (-> ['_pairs']).blockTimestampLast
has variable
clearing ir...?
pairData_6 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_5 (-> ['_pairs'])"])
has variable
[i] pairData cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
REF_44 (->pairData_6 (-> ['_pairs'])) := blockTimestamp_3(uint32)
has variable
clearing ir...?
_pairs_25(TwapOracle.PairData[]) := ϕ(["pairData_6 (-> ['_pairs'])"])
has variable
typecheckig node...
REF_44(uint32) -> pairData_5 (-> ['_pairs']).blockTimestampLast
Function name: update
MEMBER
pairData
blockTimestampLast
update
pairData Fields:
price1CumulativeLast
price0CumulativeLast
price1Average
price0Average
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint32
uint32
Final Type: uint32
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_44

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_6 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_5 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: blockTimestampLast, price1CumulativeLast, price0CumulativeLast, price1Average, price0Average
Finance Type: undef
done.
REF_44 (->pairData_6 (-> ['_pairs'])) := blockTimestamp_3(uint32)
Function name: update
asgn

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_44 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_44

Name: REF_44 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_44 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_25(TwapOracle.PairData[]) := ϕ(["pairData_6 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_136(uint256) := i_2(uint256)
has variable
[i] TMP_136 cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
has variable
[i] i cleared

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
typecheckig node...
TMP_136(uint256) := i_2(uint256)
Function name: update
asgn

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_136 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_136

Name: TMP_136 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
i_3(uint256) = i_2 (c)+ 1
Function name: update
val: 1

Name: i Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: update
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "update":
 New undefined nodes- 6
 Old undefined nodes- 0
typecheckig node...
VADER_13(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
Function name: update
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
_vaderPool_8(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_0', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
Function name: update
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
_updatePeriod_2(uint256) := ϕ(['_updatePeriod_0', '_updatePeriod_4', '_updatePeriod_1'])
Function name: update
Phi
[i]Type for _updatePeriod

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_17(TwapOracle.PairData[]) := ϕ(['_pairs_0', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, Ownable.onlyOwner()()
Internal call...
onlyOwner
Function: onlyOwner
ic
Internal cal param_cache
0
0
done.
typecheckig node...
MODIFIER_CALL, TwapOracle.initialized()()
Internal call...
initialized
Function: initialized
ic
Internal cal param_cache
0
0
done.
typecheckig node...
REF_33 -> LENGTH _pairs_19
[i]Type for REF_33

Name: REF_33 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairCount_1(uint256) := REF_33(uint256)
Function name: update
asgn

Name: REF_33 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairCount Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairCount

Name: pairCount Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
pairCount_1(uint256) := REF_33(uint256)
XXXXX
typecheckig node...
i_1(uint256) := 0(uint256)
Function name: update
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
i_2(uint256) := ϕ(['i_3', 'i_1'])
Function name: update
Phi
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_124(bool) = i_2 < pairCount_1
Function name: update
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_124 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_124

Name: TMP_124 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_124(bool) = i_2 < pairCount_1
XXXXX
CONDITION TMP_124
Condition...
Conidtion: 
TMP_124
TMP_124
typecheckig node...
typecheckig node...
REF_34(TwapOracle.PairData) -> _pairs_19[i_2]
Function name: update
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_pairs
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData
TwapOracle.PairData
Final Type: TwapOracle.PairData
None
None
pair
None
None
token0
None
None
token1
None
None
price0CumulativeLast
None
None
price1CumulativeLast
None
None
blockTimestampLast
None
None
price0Average
None
None
price1Average
FIELDS:
None Fields:
^^^
[i]Type for REF_34

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
pairData_1 (-> ['_pairs'])(TwapOracle.PairData) := REF_34(TwapOracle.PairData)
Function name: update
asgn

Name: REF_34 Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
done.
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
REF_45(address) -> pairData_1 (-> ['_pairs']).token0
Function name: update
MEMBER
pairData
token0
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: token0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_45

Name: pairData.token0 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.token0 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_139(bool) = REF_45 == VADER_15
Function name: update
[i]Type for TMP_139

Name: TMP_139 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_139
Condition...
Conidtion: 
TMP_139
TMP_139
typecheckig node...
REF_49(address) -> pairData_1 (-> ['_pairs']).token1
Function name: update
MEMBER
pairData
token1
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: token1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_49

Name: pairData.token1 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.token1 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_140 = CONVERT REF_49 to IERC20
Function name: update

Name: pairData.token1 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_5(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_10(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_140']  
Function name: update
High Call: cumulativePrices
func name:cumulativePrices
other func name:cumulativePrices
TUPLE_5
hlc contract name: VADERPOOL func_name: cumulativePrices
('c', [-1], [-1], 'u', None)
TMP_140
('c', [-1], [-1], 'u', None)
TMP_140
('c', [-1], [-1], 'u', None)
TMP_140
wfc len: 3
COPIED
[i]Type for TUPLE_5

Name: TUPLE_5 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
VADER_16(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_3', 'VADER_15', 'VADER_12'])
Function name: update
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
_vaderPool_11(IVaderPoolV2) := ϕ(['_vaderPool_1', '_vaderPool_7', '_vaderPool_5', '_vaderPool_10'])
Function name: update
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
_updatePeriod_5(uint256) := ϕ(['_updatePeriod_4', '_updatePeriod_1'])
Function name: update
Phi
[i]Type for _updatePeriod

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_20(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_16', '_pairs_4'])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
price0Cumulative_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: update
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price1Cumulative_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: update
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestamp_1(uint32)= UNPACK TUPLE_5 index: 2 
Function name: update
Reading tuple TUPLE_5 index 2
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_47(address) -> pairData_1 (-> ['_pairs']).pair
Function name: update
MEMBER
pairData
pair
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: pair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_47

Name: pairData.pair Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.pair Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_4(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['REF_47'] 
Function name: update
Library Call: currentCumulativePrices
hlc contract name: UniswapV2OracleLibrary func_name: currentCumulativePrices
('c', [-1], [-1], 'u', None)
REF_47
('c', [-1], [-1], 'u', None)
REF_47
('c', [-1], [-1], 'u', None)
REF_47
wfc len: 3
COPIED
[i]Type for TUPLE_4

Name: TUPLE_4 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price0Cumulative_2(uint256)= UNPACK TUPLE_4 index: 0 
Function name: update
Reading tuple TUPLE_4 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price1Cumulative_2(uint256)= UNPACK TUPLE_4 index: 1 
Function name: update
Reading tuple TUPLE_4 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestamp_2(uint32)= UNPACK TUPLE_4 index: 2 
Function name: update
Reading tuple TUPLE_4 index 2
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
price0Cumulative_3(uint256) := ϕ(['price0Cumulative_1', 'price0Cumulative_2'])
Function name: update
Phi
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price1Cumulative_3(uint256) := ϕ(['price1Cumulative_1', 'price1Cumulative_2'])
Function name: update
Phi
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestamp_3(uint32) := ϕ(['blockTimestamp_1', 'blockTimestamp_2'])
Function name: update
Phi
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_35(uint32) -> pairData_1 (-> ['_pairs']).blockTimestampLast
Function name: update
MEMBER
pairData
blockTimestampLast
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: blockTimestampLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_35

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_125(uint32) = blockTimestamp_3 (c)- REF_35
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_125 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_125

Name: TMP_125 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
timeElapsed_1(uint32) := TMP_125(uint32)
Function name: update
asgn

Name: TMP_125 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: timeElapsed Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for timeElapsed

Name: timeElapsed Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_126(bool) = timeElapsed_1 >= _updatePeriod_4
Function name: update
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_126

Name: TMP_126 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,TwapOracle::update: Period not elapsed)
[i]Type for TMP_127

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_36(FixedPoint.uq112x112) -> pairData_1 (-> ['_pairs']).price0Average
Function name: update
MEMBER
pairData
price0Average
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: price0Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_36

Name: pairData.price0Average Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0Average Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_38(uint256) -> pairData_1 (-> ['_pairs']).price0CumulativeLast
Function name: update
MEMBER
pairData
price0CumulativeLast
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_38

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_128(uint256) = price0Cumulative_3 - REF_38
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_128 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_128

Name: TMP_128 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_129(uint256) = TMP_128 / timeElapsed_1
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_129 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_129

Name: TMP_129 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_130 = CONVERT TMP_129 to uint224
Function name: update

Name: TMP_129 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_130 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_130

Name: TMP_130 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_131 = new uq112x112(TMP_130)
[i]Type for TMP_131

Name: TMP_131 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_2 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_1 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1CumulativeLast, price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
done.
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
Function name: update
asgn

Name: TMP_131 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_36 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_36

Name: REF_36 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_36 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
XXXXX
_pairs_21(TwapOracle.PairData[]) := ϕ(["pairData_2 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
REF_39(FixedPoint.uq112x112) -> pairData_2 (-> ['_pairs']).price1Average
Function name: update
MEMBER
pairData
price1Average
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: price1Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_39

Name: pairData.price1Average Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1Average Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_41(uint256) -> pairData_2 (-> ['_pairs']).price1CumulativeLast
Function name: update
MEMBER
pairData
price1CumulativeLast
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_41

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_132(uint256) = price1Cumulative_3 - REF_41
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_132 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_132

Name: TMP_132 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_133(uint256) = TMP_132 / timeElapsed_1
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_133 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_133

Name: TMP_133 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_134 = CONVERT TMP_133 to uint224
Function name: update

Name: TMP_133 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_134 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_134

Name: TMP_134 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_135 = new uq112x112(TMP_134)
[i]Type for TMP_135

Name: TMP_135 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_3 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_2 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1CumulativeLast, price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
done.
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
Function name: update
asgn

Name: TMP_135 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_39 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_39

Name: REF_39 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_39 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
XXXXX
_pairs_22(TwapOracle.PairData[]) := ϕ(["pairData_3 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
REF_42(uint256) -> pairData_3 (-> ['_pairs']).price0CumulativeLast
Function name: update
MEMBER
pairData
price0CumulativeLast
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_42

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_4 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_3 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1CumulativeLast, price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
done.
REF_42 (->pairData_4 (-> ['_pairs'])) := price0Cumulative_3(uint256)
Function name: update
asgn

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_42 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_42

Name: REF_42 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_42 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_23(TwapOracle.PairData[]) := ϕ(["pairData_4 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
REF_43(uint256) -> pairData_4 (-> ['_pairs']).price1CumulativeLast
Function name: update
MEMBER
pairData
price1CumulativeLast
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_43

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_5 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_4 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1CumulativeLast, price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
done.
REF_43 (->pairData_5 (-> ['_pairs'])) := price1Cumulative_3(uint256)
Function name: update
asgn

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_43 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_43

Name: REF_43 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_43 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_24(TwapOracle.PairData[]) := ϕ(["pairData_5 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
REF_44(uint32) -> pairData_5 (-> ['_pairs']).blockTimestampLast
Function name: update
MEMBER
pairData
blockTimestampLast
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: blockTimestampLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_44

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_6 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_5 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1CumulativeLast, price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
done.
REF_44 (->pairData_6 (-> ['_pairs'])) := blockTimestamp_3(uint32)
Function name: update
asgn

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_44 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_44

Name: REF_44 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_44 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_25(TwapOracle.PairData[]) := ϕ(["pairData_6 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
TMP_136(uint256) := i_2(uint256)
Function name: update
asgn

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_136 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_136

Name: TMP_136 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
i_3(uint256) = i_2 (c)+ 1
Function name: update
val: 1

Name: i Function: update
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: update
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "update":
 New undefined nodes- 4
 Old undefined nodes- 6
typecheckig node...
VADER_13(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_0', 'VADER_3', 'VADER_15', 'VADER_12'])
Function name: update
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
_vaderPool_8(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_0', '_vaderPool_5', '_vaderPool_1', '_vaderPool_7'])
Function name: update
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
_updatePeriod_2(uint256) := ϕ(['_updatePeriod_0', '_updatePeriod_4', '_updatePeriod_1'])
Function name: update
Phi
[i]Type for _updatePeriod

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_17(TwapOracle.PairData[]) := ϕ(['_pairs_0', '_pairs_1', '_pairs_19', '_pairs_4', '_pairs_16'])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, Ownable.onlyOwner()()
Internal call...
onlyOwner
Function: onlyOwner
ic
Internal cal param_cache
0
0
done.
typecheckig node...
MODIFIER_CALL, TwapOracle.initialized()()
Internal call...
initialized
Function: initialized
ic
Internal cal param_cache
0
0
done.
typecheckig node...
REF_33 -> LENGTH _pairs_19
[i]Type for REF_33

Name: REF_33 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairCount_1(uint256) := REF_33(uint256)
Function name: update
asgn

Name: REF_33 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairCount Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairCount

Name: pairCount Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
pairCount_1(uint256) := REF_33(uint256)
XXXXX
typecheckig node...
i_1(uint256) := 0(uint256)
Function name: update
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
i_2(uint256) := ϕ(['i_3', 'i_1'])
Function name: update
Phi
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_124(bool) = i_2 < pairCount_1
Function name: update
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_124 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_124

Name: TMP_124 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_124(bool) = i_2 < pairCount_1
XXXXX
CONDITION TMP_124
Condition...
Conidtion: 
TMP_124
TMP_124
typecheckig node...
typecheckig node...
REF_34(TwapOracle.PairData) -> _pairs_19[i_2]
Function name: update
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_pairs
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData
TwapOracle.PairData
Final Type: TwapOracle.PairData
None
None
pair
None
None
token0
None
None
token1
None
None
price0CumulativeLast
None
None
price1CumulativeLast
None
None
blockTimestampLast
None
None
price0Average
None
None
price1Average
FIELDS:
None Fields:
^^^
[i]Type for REF_34

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef
done.
pairData_1 (-> ['_pairs'])(TwapOracle.PairData) := REF_34(TwapOracle.PairData)
Function name: update
asgn

Name: REF_34 Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: 
Finance Type: undef

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1CumulativeLast, price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1CumulativeLast, price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
done.
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
REF_45(address) -> pairData_1 (-> ['_pairs']).token0
Function name: update
MEMBER
pairData
token0
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: token0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_45

Name: pairData.token0 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.token0 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_139(bool) = REF_45 == VADER_15
Function name: update
[i]Type for TMP_139

Name: TMP_139 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_139
Condition...
Conidtion: 
TMP_139
TMP_139
typecheckig node...
REF_49(address) -> pairData_1 (-> ['_pairs']).token1
Function name: update
MEMBER
pairData
token1
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: token1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_49

Name: pairData.token1 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.token1 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_140 = CONVERT REF_49 to IERC20
Function name: update

Name: pairData.token1 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_140 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_140

Name: TMP_140 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_5(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_10(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_140']  
Function name: update
High Call: cumulativePrices
func name:cumulativePrices
other func name:cumulativePrices
TUPLE_5
hlc contract name: VADERPOOL func_name: cumulativePrices
('c', [-1], [-1], 'u', None)
TMP_140
('c', [-1], [-1], 'u', None)
TMP_140
('c', [-1], [-1], 'u', None)
TMP_140
wfc len: 3
COPIED
[i]Type for TUPLE_5

Name: TUPLE_5 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
VADER_16(address) := ϕ(['VADER_5', 'VADER_8', 'VADER_3', 'VADER_15', 'VADER_12'])
Function name: update
Phi
[i]Type for VADER

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
done.
_vaderPool_11(IVaderPoolV2) := ϕ(['_vaderPool_1', '_vaderPool_7', '_vaderPool_5', '_vaderPool_10'])
Function name: update
Phi
[i]Type for _vaderPool

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
done.
_updatePeriod_5(uint256) := ϕ(['_updatePeriod_4', '_updatePeriod_1'])
Function name: update
Phi
[i]Type for _updatePeriod

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_20(TwapOracle.PairData[]) := ϕ(['_pairs_1', '_pairs_19', '_pairs_16', '_pairs_4'])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
price0Cumulative_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: update
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price1Cumulative_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: update
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestamp_1(uint32)= UNPACK TUPLE_5 index: 2 
Function name: update
Reading tuple TUPLE_5 index 2
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_47(address) -> pairData_1 (-> ['_pairs']).pair
Function name: update
MEMBER
pairData
pair
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: pair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_47

Name: pairData.pair Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.pair Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_4(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['REF_47'] 
Function name: update
Library Call: currentCumulativePrices
hlc contract name: UniswapV2OracleLibrary func_name: currentCumulativePrices
('c', [-1], [-1], 'u', None)
REF_47
('c', [-1], [-1], 'u', None)
REF_47
('c', [-1], [-1], 'u', None)
REF_47
wfc len: 3
COPIED
[i]Type for TUPLE_4

Name: TUPLE_4 Function: update
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price0Cumulative_2(uint256)= UNPACK TUPLE_4 index: 0 
Function name: update
Reading tuple TUPLE_4 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price1Cumulative_2(uint256)= UNPACK TUPLE_4 index: 1 
Function name: update
Reading tuple TUPLE_4 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestamp_2(uint32)= UNPACK TUPLE_4 index: 2 
Function name: update
Reading tuple TUPLE_4 index 2
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
price0Cumulative_3(uint256) := ϕ(['price0Cumulative_1', 'price0Cumulative_2'])
Function name: update
Phi
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price1Cumulative_3(uint256) := ϕ(['price1Cumulative_1', 'price1Cumulative_2'])
Function name: update
Phi
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
blockTimestamp_3(uint32) := ϕ(['blockTimestamp_1', 'blockTimestamp_2'])
Function name: update
Phi
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_35(uint32) -> pairData_1 (-> ['_pairs']).blockTimestampLast
Function name: update
MEMBER
pairData
blockTimestampLast
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: blockTimestampLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_35

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_125(uint32) = blockTimestamp_3 (c)- REF_35
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_125 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_125

Name: TMP_125 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
timeElapsed_1(uint32) := TMP_125(uint32)
Function name: update
asgn

Name: TMP_125 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: timeElapsed Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for timeElapsed

Name: timeElapsed Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_126(bool) = timeElapsed_1 >= _updatePeriod_4
Function name: update
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_126

Name: TMP_126 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,TwapOracle::update: Period not elapsed)
[i]Type for TMP_127

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_36(FixedPoint.uq112x112) -> pairData_1 (-> ['_pairs']).price0Average
Function name: update
MEMBER
pairData
price0Average
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: price0Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_36

Name: pairData.price0Average Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0Average Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_38(uint256) -> pairData_1 (-> ['_pairs']).price0CumulativeLast
Function name: update
MEMBER
pairData
price0CumulativeLast
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_38

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_128(uint256) = price0Cumulative_3 - REF_38
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_128 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_128

Name: TMP_128 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_129(uint256) = TMP_128 / timeElapsed_1
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_129 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_129

Name: TMP_129 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_130 = CONVERT TMP_129 to uint224
Function name: update

Name: TMP_129 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_130 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_130

Name: TMP_130 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_131 = new uq112x112(TMP_130)
[i]Type for TMP_131

Name: TMP_131 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_2 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_1 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1CumulativeLast, price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
done.
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
Function name: update
asgn

Name: TMP_131 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_36 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_36

Name: REF_36 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_36 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
XXXXX
_pairs_21(TwapOracle.PairData[]) := ϕ(["pairData_2 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
REF_39(FixedPoint.uq112x112) -> pairData_2 (-> ['_pairs']).price1Average
Function name: update
MEMBER
pairData
price1Average
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: price1Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_39

Name: pairData.price1Average Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1Average Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_41(uint256) -> pairData_2 (-> ['_pairs']).price1CumulativeLast
Function name: update
MEMBER
pairData
price1CumulativeLast
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_41

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_132(uint256) = price1Cumulative_3 - REF_41
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_132 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_132

Name: TMP_132 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_133(uint256) = TMP_132 / timeElapsed_1
Function name: update
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_133 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_133

Name: TMP_133 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_134 = CONVERT TMP_133 to uint224
Function name: update

Name: TMP_133 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_134 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_134

Name: TMP_134 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_135 = new uq112x112(TMP_134)
[i]Type for TMP_135

Name: TMP_135 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_3 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_2 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1CumulativeLast, price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
done.
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
Function name: update
asgn

Name: TMP_135 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_39 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_39

Name: REF_39 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_39 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1Average Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
XXXXX
_pairs_22(TwapOracle.PairData[]) := ϕ(["pairData_3 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
REF_42(uint256) -> pairData_3 (-> ['_pairs']).price0CumulativeLast
Function name: update
MEMBER
pairData
price0CumulativeLast
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_42

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price0CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_4 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_3 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1CumulativeLast, price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
done.
REF_42 (->pairData_4 (-> ['_pairs'])) := price0Cumulative_3(uint256)
Function name: update
asgn

Name: price0Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_42 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_42

Name: REF_42 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_42 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price0CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_23(TwapOracle.PairData[]) := ϕ(["pairData_4 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
REF_43(uint256) -> pairData_4 (-> ['_pairs']).price1CumulativeLast
Function name: update
MEMBER
pairData
price1CumulativeLast
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_43

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.price1CumulativeLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_5 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_4 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1CumulativeLast, price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
done.
REF_43 (->pairData_5 (-> ['_pairs'])) := price1Cumulative_3(uint256)
Function name: update
asgn

Name: price1Cumulative Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_43 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_43

Name: REF_43 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_43 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price1CumulativeLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_24(TwapOracle.PairData[]) := ϕ(["pairData_5 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
REF_44(uint32) -> pairData_5 (-> ['_pairs']).blockTimestampLast
Function name: update
MEMBER
pairData
blockTimestampLast
update
pairData Fields:
price1CumulativeLast
price1Average
price0Average
token0
token1
pair
blockTimestampLast
price0CumulativeLast
^^^

Name: blockTimestampLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_44

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: pairData.blockTimestampLast Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pairData_6 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_5 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: price1CumulativeLast, price1Average, price0Average, token0, token1, pair, blockTimestampLast, price0CumulativeLast
Finance Type: undef
done.
REF_44 (->pairData_6 (-> ['_pairs'])) := blockTimestamp_3(uint32)
Function name: update
asgn

Name: blockTimestamp Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_44 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_44

Name: REF_44 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_44 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: blockTimestampLast Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_pairs_25(TwapOracle.PairData[]) := ϕ(["pairData_6 (-> ['_pairs'])"])
Function name: update
Phi
[i]Type for _pairs

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
done.
typecheckig node...
TMP_136(uint256) := i_2(uint256)
Function name: update
asgn

Name: i Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_136 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_136

Name: TMP_136 Function: update
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
i_3(uint256) = i_2 (c)+ 1
Function name: update
val: 1

Name: i Function: update
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: update
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 2 for function call "update":
 New undefined nodes- 4
 Old undefined nodes- 4
Saving return values for: update
State_var: _aggregators
Finding type for _aggregators...
mapping(address => address)
Check copy_toekn_tuple
([-1], [-1], 0, 'AGGREGATOR')
----
Type: mapping(address => address)
mapping(address => address)
address
Final Type: address

Name: _aggregators Function: global
Num: -1
Den: -1
Norm: 0
LF: AGGREGATOR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: VADER
Finding type for VADER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'VADER')
----
Type: address
address
Final Type: address

Name: VADER Function: global
Num: -1
Den: -1
Norm: 0
LF: VADER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _usdvEnabled
Finding type for _usdvEnabled...
bool
SKIP bool
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairs
Finding type for _pairs...
TwapOracle.PairData[]
Check copy_toekn_tuple
([-1], [-1], 0, 'PAIR')
----
Type: TwapOracle.PairData[]
TwapOracle.PairData[]
TwapOracle.PairData
Final Type: TwapOracle.PairData
global
_pairs
pair
global
_pairs
token0
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN0')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
token1
Check copy_toekn_tuple
([-1], [-1], [0], 'TOKEN1')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
_pairs
price0CumulativeLast
global
_pairs
price1CumulativeLast
global
_pairs
blockTimestampLast
global
_pairs
price0Average
global
_pairs
price1Average
Check copy_toekn_tuple
([2], [-1], [-404], None)
----
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
price1Average
_x
FIELDS:
price1Average Fields:
_x
^^^
Type: FixedPoint.uq112x112
FixedPoint.uq112x112
Final Type: FixedPoint.uq112x112
global
_pairs.price1Average
_x
Check copy_toekn_tuple
([1], [-1], [0], None)
----
Type: uint224
uint224
Final Type: uint224
Type: uint224
uint224
Final Type: uint224
FIELDS:
_pairs.price1Average Fields:
_x
^^^
FIELDS:
_pairs Fields:
token0
token1
price1Average
^^^

Name: _pairs Function: global
Num: -1
Den: -1
Norm: 0
LF: PAIR
Fields: token0, token1, price1Average
Finance Type: undef
[*]Type fetched successfully
State_var: USDV
Finding type for USDV...
address
Check copy_toekn_tuple
(-1, -1, 0, 'USDV')
----
Type: address
address
Final Type: address

Name: USDV Function: global
Num: -1
Den: -1
Norm: 0
LF: USDV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _vaderPool
Finding type for _vaderPool...
IVaderPoolV2
Check copy_toekn_tuple
(-1, -1, 0, 'VADERPOOL')
----
Type: IVaderPoolV2
IVaderPoolV2
Final Type: IVaderPoolV2
 NO FIELDS

Name: _vaderPool Function: global
Num: -1
Den: -1
Norm: 0
LF: VADERPOOL
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _updatePeriod
Finding type for _updatePeriod...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _updatePeriod Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _pairExists
Finding type for _pairExists...
mapping(bytes32 => bool)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes32 => bool)
mapping(bytes32 => bool)
bool
Final Type: bool

Name: _pairExists Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Errors: [<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d241f0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d24a30>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d10a60>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d19610>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7f6736cf8c70>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d10820>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f6736d194f0>]
Seen contract: {'TwapOracle': True} Contract name out: AggregatorV3Interface
[x] AggregatorV3Interface not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True} Contract name out: IUniswapV2ERC20
[x] IUniswapV2ERC20 not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True} Contract name out: IUniswapV2Factory
[x] IUniswapV2Factory not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True} Contract name out: IUniswapV2Pair
[x] IUniswapV2Pair not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True} Contract name out: Babylonian
[x] Babylonian not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True} Contract name out: BitMath
[x] BitMath not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True, 'BitMath': True} Contract name out: FixedPoint
[x] FixedPoint not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True, 'BitMath': True, 'FixedPoint': True} Contract name out: FullMath
[x] FullMath not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True, 'BitMath': True, 'FixedPoint': True, 'FullMath': True} Contract name out: UniswapV2Library
[x] UniswapV2Library not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True, 'BitMath': True, 'FixedPoint': True, 'FullMath': True, 'UniswapV2Library': True} Contract name out: UniswapV2OracleLibrary
[x] UniswapV2OracleLibrary not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True, 'BitMath': True, 'FixedPoint': True, 'FullMath': True, 'UniswapV2Library': True, 'UniswapV2OracleLibrary': True} Contract name out: IBasePoolV2
[x] IBasePoolV2 not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True, 'BitMath': True, 'FixedPoint': True, 'FullMath': True, 'UniswapV2Library': True, 'UniswapV2OracleLibrary': True, 'IBasePoolV2': True} Contract name out: IVaderPoolV2
[x] IVaderPoolV2 not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True, 'BitMath': True, 'FixedPoint': True, 'FullMath': True, 'UniswapV2Library': True, 'UniswapV2OracleLibrary': True, 'IBasePoolV2': True, 'IVaderPoolV2': True} Contract name out: Ownable
[x] Ownable not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True, 'BitMath': True, 'FixedPoint': True, 'FullMath': True, 'UniswapV2Library': True, 'UniswapV2OracleLibrary': True, 'IBasePoolV2': True, 'IVaderPoolV2': True, 'Ownable': True} Contract name out: IERC20
[x] IERC20 not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True, 'BitMath': True, 'FixedPoint': True, 'FullMath': True, 'UniswapV2Library': True, 'UniswapV2OracleLibrary': True, 'IBasePoolV2': True, 'IVaderPoolV2': True, 'Ownable': True, 'IERC20': True} Contract name out: IERC20Metadata
[x] IERC20Metadata not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True, 'BitMath': True, 'FixedPoint': True, 'FullMath': True, 'UniswapV2Library': True, 'UniswapV2OracleLibrary': True, 'IBasePoolV2': True, 'IVaderPoolV2': True, 'Ownable': True, 'IERC20': True, 'IERC20Metadata': True} Contract name out: IERC721
[x] IERC721 not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True, 'BitMath': True, 'FixedPoint': True, 'FullMath': True, 'UniswapV2Library': True, 'UniswapV2OracleLibrary': True, 'IBasePoolV2': True, 'IVaderPoolV2': True, 'Ownable': True, 'IERC20': True, 'IERC20Metadata': True, 'IERC721': True} Contract name out: Context
[x] Context not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True, 'BitMath': True, 'FixedPoint': True, 'FullMath': True, 'UniswapV2Library': True, 'UniswapV2OracleLibrary': True, 'IBasePoolV2': True, 'IVaderPoolV2': True, 'Ownable': True, 'IERC20': True, 'IERC20Metadata': True, 'IERC721': True, 'Context': True} Contract name out: IERC165
[x] IERC165 not run
Seen contract: {'TwapOracle': True, 'AggregatorV3Interface': True, 'IUniswapV2ERC20': True, 'IUniswapV2Factory': True, 'IUniswapV2Pair': True, 'Babylonian': True, 'BitMath': True, 'FixedPoint': True, 'FullMath': True, 'UniswapV2Library': True, 'UniswapV2OracleLibrary': True, 'IBasePoolV2': True, 'IVaderPoolV2': True, 'Ownable': True, 'IERC20': True, 'IERC20Metadata': True, 'IERC721': True, 'Context': True, 'IERC165': True} Contract name out: SafeMath
[x] SafeMath not run
Function count: 16
