LaunchEvent
IJoeFactory
IJoePair
IJoeRouter01
IJoeRouter02
IRocketJoeFactory
IRocketJoeToken
IWAVAX
Ownable
IERC20
IERC20Metadata
Context
contract name: LaunchEvent
WARNING!!!!
LaunchEvent_types.txt
Finance File not Found
"LaunchEvent_types.txt" opened successfully.
[*c], LaunchEvent



initialize

depositAVAX

withdrawAVAX

getPair

withdrawLiquidity

withdrawIncentives

emergencyWithdraw

allowEmergencyWithdraw

[xf], penaltyCollector

[xf], skim

[xf], getReserves

[xf], getRJoeAmount

[xf], pairBalance



[sef], FACTORY, getPair, 1, {c, -1, -1, 0, JOEPAIR}

{c, -1, -1, 0, JOEPAIR}
['c', '-1', '-1', '0', 'JOEPAIR']
[sef], JOEPAIR, totalSupply, 1, {c, 2, -1, 6} 

{c, 2, -1, 6}
['c', '2', '-1', '6']
[sef], TOKEN, balanceOf, 1, {c, 1, -1, 18}

{c, 1, -1, 18}
['c', '1', '-1', '18']
[sef], TOKEN, decimals, 1, {c, -1, -1, -404}

{c, -1, -1, -404}
['c', '-1', '-1', '-404']
[sef], ROUTER, addLiquidity, 3, , , 


['']

['']

['']
[sef], RJFACTORY, penaltyCollector

[sef], LaunchEvent, wavax

[sef], LaunchEvent, router, -1, -1, 0, ROUTER

[sef], LaunchEvent, factory, -1, -1, 0, FACTORY

[sef], LaunchEvent, rJoe, -1, -1, 0, RJOE

[sef], LaunchEvent, rJoePerAvax

[sef], LaunchEvent, PHASE_ONE_DURATION

[sef], LaunchEvent, PHASE_ONE_NO_FEE_DURATION

[sef], LaunchEvent, PHASE_TWO_DURATION





[t], global, WAVAX, -1, -1, 0, WAVAX

[t], global, rJoePerAvax

[t], global, rocketJoeFactory, -1, -1, 0, RJFACTORY

[t], global, token, -1, -1, 0, TOKEN

[t], global, tokenIncentivesBalance, 1, -1, 18

[t], global, tokenReserve, 1, -1, 18

[t], global, wavaxReserve, 2, -1, 6

[t], global, getUserInfo

[t], global, issuer, -1, -1, 0, ISSUER

[t], global, PHASE_ONE_DURATION

[t], global, _owner

[t], global, factory, -1, -1, 0, FACTORY

[t], global, floorPrice, 1, -1, 18

[t], global, pair, -1, -1, 0, JOEPAIR

[t], global, router, -1, -1, 0, ROUTER

[t], global, tokenIncentivesForUsers, 1, -1, 18

[t], global, wavaxAllocated, 2, -1, 6

[t], global, PHASE_TWO_DURATION

[t], global, auctionStart

[t], global, stopped

[t], global, lpSupply

[t], global, maxAllocation, 2, -1, 6

[t], global, rJoe, -1, -1, 0, RJTOKEN

[t], global, tokenIncentiveIssuerRefund, 1, -1, 18

[t], global, initialized

[t], global, issuerTimelock

[t], global, userTimelock

[t], global, PHASE_ONE_NO_FEE_DURATION

[t], global, fixedWithdrawPenalty, -1, -1, 18

[t], global, maxWithdrawPenalty, -1, -1, 18

[t], initialize, _issuer, -1, -1, 0, ISSUER

[t], initialize, _auctionStart

[t], initialize, _token, -1, -1, 0, TOKEN

[t], initialize, _tokenIncentivesPercent

[t], initialize, _floorPrice

[t], initialize, _maxWithdrawPenalty

[t], initialize, _fixedWithdrawPenalty

[t], initialize, _maxAllocation

[t], initialize, _userTimelock

[t], initialize, _issuerTimelock

[t], withdrawAVAX, _amount, 2, -1, 6

[*] LaunchEvent run
Checking... receive Visibility: external
[o] Marked
Checking... initialize Visibility: external
[o] Marked
Checking... currentPhase Visibility: public
[o] Marked
Checking... depositAVAX Visibility: external
[o] Marked
Checking... withdrawAVAX Visibility: public
[o] Marked
Checking... createPair Visibility: external
[o] Marked
Checking... withdrawLiquidity Visibility: external
[o] Marked
Checking... withdrawIncentives Visibility: external
[o] Marked
Checking... emergencyWithdraw Visibility: external
[o] Marked
Checking... allowEmergencyWithdraw Visibility: external
[o] Marked
Checking... skim Visibility: external
[o] Marked
Checking... getPenalty Visibility: public
[o] Marked
Checking... getReserves Visibility: external
[o] Marked
Checking... getRJoeAmount Visibility: public
[o] Marked
Checking... pairBalance Visibility: public
[o] Marked
Checking... _atPhase Visibility: internal
[x] Not visible 
Checking... _safeTransferAVAX Visibility: internal
[x] Not visible 
State_var: WAVAX
Finding type for WAVAX...
IWAVAX
State_var: rocketJoeFactory
Finding type for rocketJoeFactory...
IRocketJoeFactory
State_var: token
Finding type for token...
IERC20Metadata
State_var: tokenIncentivesBalance
Finding type for tokenIncentivesBalance...
uint256
State_var: tokenReserve
Finding type for tokenReserve...
uint256
State_var: wavaxReserve
Finding type for wavaxReserve...
uint256
State_var: getUserInfo
Finding type for getUserInfo...
mapping(address => LaunchEvent.UserInfo)
State_var: issuer
Finding type for issuer...
address
State_var: pair
Finding type for pair...
IJoePair
State_var: tokenIncentiveIssuerRefund
Finding type for tokenIncentiveIssuerRefund...
uint256
State_var: tokenIncentivesForUsers
Finding type for tokenIncentivesForUsers...
uint256
State_var: wavaxAllocated
Finding type for wavaxAllocated...
uint256
State_var: _owner
Finding type for _owner...
address
State_var: initialized
Finding type for initialized...
bool
State_var: PHASE_ONE_DURATION
Finding type for PHASE_ONE_DURATION...
uint256
State_var: PHASE_TWO_DURATION
Finding type for PHASE_TWO_DURATION...
uint256
State_var: auctionStart
Finding type for auctionStart...
uint256
State_var: issuerTimelock
Finding type for issuerTimelock...
uint256
State_var: userTimelock
Finding type for userTimelock...
uint256
State_var: lpSupply
Finding type for lpSupply...
uint256
State_var: PHASE_ONE_NO_FEE_DURATION
Finding type for PHASE_ONE_NO_FEE_DURATION...
uint256
State_var: fixedWithdrawPenalty
Finding type for fixedWithdrawPenalty...
uint256
State_var: maxWithdrawPenalty
Finding type for maxWithdrawPenalty...
uint256
State_var: factory
Finding type for factory...
IJoeFactory
State_var: floorPrice
Finding type for floorPrice...
uint256
State_var: router
Finding type for router...
IJoeRouter02
State_var: stopped
Finding type for stopped...
bool
State_var: maxAllocation
Finding type for maxAllocation...
uint256
State_var: rJoe
Finding type for rJoe...
IRocketJoeToken
State_var: rJoePerAvax
Finding type for rJoePerAvax...
uint256
contract name: IJoeFactory
WARNING!!!!
IJoeFactory_types.txt
Finance File not Found
Type File not found.
[x] IJoeFactory not run
contract name: IJoePair
WARNING!!!!
IJoePair_types.txt
Finance File not Found
Type File not found.
[x] IJoePair not run
contract name: IJoeRouter01
WARNING!!!!
IJoeRouter01_types.txt
Finance File not Found
Type File not found.
[x] IJoeRouter01 not run
contract name: IJoeRouter02
WARNING!!!!
IJoeRouter02_types.txt
Finance File not Found
Type File not found.
[x] IJoeRouter02 not run
contract name: IRocketJoeFactory
WARNING!!!!
IRocketJoeFactory_types.txt
Finance File not Found
Type File not found.
[x] IRocketJoeFactory not run
contract name: IRocketJoeToken
WARNING!!!!
IRocketJoeToken_types.txt
Finance File not Found
Type File not found.
[x] IRocketJoeToken not run
contract name: IWAVAX
WARNING!!!!
IWAVAX_types.txt
Finance File not Found
Type File not found.
[x] IWAVAX not run
contract name: Ownable
WARNING!!!!
Ownable_types.txt
Finance File not Found
Type File not found.
[x] Ownable not run
contract name: IERC20
WARNING!!!!
IERC20_types.txt
Finance File not Found
Type File not found.
[x] IERC20 not run
contract name: IERC20Metadata
WARNING!!!!
IERC20Metadata_types.txt
Finance File not Found
Type File not found.
[x] IERC20Metadata not run
contract name: Context
WARNING!!!!
Context_types.txt
Finance File not Found
Type File not found.
[x] Context not run
Seen contract: {} Contract name out: LaunchEvent
[*] LaunchEvent run
Reading Function: receive
Function name: receive
Function Visibility (test): external
-100
Add new
clearning node...
clearing ir...?
WAVAX_1(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
has variable
typecheckig node...
WAVAX_1(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: receive
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_11 = CONVERT WAVAX_1 to address
has variable
[i] TMP_11 cleared
clearing ir...?
TMP_12(bool) = msg.sender == TMP_11
has variable
[i] TMP_12 cleared
clearing ir...?
TMP_13(None) = SOLIDITY_CALL require(bool,string)(TMP_12,LaunchEvent: you can't send AVAX directly to this contract)
typecheckig node...
TMP_11 = CONVERT WAVAX_1 to address
Function name: receive

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_11 Function: receive
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_11

Name: TMP_11 Function: receive
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_12(bool) = msg.sender == TMP_11
Function name: receive
[i]Type for TMP_12

Name: TMP_12 Function: receive
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_13(None) = SOLIDITY_CALL require(bool,string)(TMP_12,LaunchEvent: you can't send AVAX directly to this contract)
[i]Type for TMP_13

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "receive":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: receive
State_var: WAVAX
Finding type for WAVAX...
IWAVAX
Check copy_toekn_tuple
(-1, -1, 0, 'WAVAX')
----
Type: IWAVAX
IWAVAX
Final Type: IWAVAX
 NO FIELDS

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rocketJoeFactory
Finding type for rocketJoeFactory...
IRocketJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'RJFACTORY')
----
Type: IRocketJoeFactory
IRocketJoeFactory
Final Type: IRocketJoeFactory
 NO FIELDS

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token
Finding type for token...
IERC20Metadata
Check copy_toekn_tuple
(-1, -1, 0, 'TOKEN')
----
Type: IERC20Metadata
IERC20Metadata
Final Type: IERC20Metadata
 NO FIELDS

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesBalance
Finding type for tokenIncentivesBalance...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenReserve
Finding type for tokenReserve...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxReserve
Finding type for wavaxReserve...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: getUserInfo
Finding type for getUserInfo...
mapping(address => LaunchEvent.UserInfo)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => LaunchEvent.UserInfo)
mapping(address => LaunchEvent.UserInfo)
LaunchEvent.UserInfo
Final Type: LaunchEvent.UserInfo
global
getUserInfo
allocation
global
getUserInfo
balance
global
getUserInfo
hasWithdrawnPair
global
getUserInfo
hasWithdrawnIncentives
FIELDS:
getUserInfo Fields:
^^^

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuer
Finding type for issuer...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ISSUER')
----
Type: address
address
Final Type: address

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pair
Finding type for pair...
IJoePair
Check copy_toekn_tuple
(-1, -1, 0, 'JOEPAIR')
----
Type: IJoePair
IJoePair
Final Type: IJoePair
 NO FIELDS

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentiveIssuerRefund
Finding type for tokenIncentiveIssuerRefund...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesForUsers
Finding type for tokenIncentivesForUsers...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxAllocated
Finding type for wavaxAllocated...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: initialized
Finding type for initialized...
bool
SKIP bool
State_var: PHASE_ONE_DURATION
Finding type for PHASE_ONE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_TWO_DURATION
Finding type for PHASE_TWO_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: auctionStart
Finding type for auctionStart...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuerTimelock
Finding type for issuerTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: issuerTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: userTimelock
Finding type for userTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: userTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpSupply
Finding type for lpSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_ONE_NO_FEE_DURATION
Finding type for PHASE_ONE_NO_FEE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: fixedWithdrawPenalty
Finding type for fixedWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: fixedWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: maxWithdrawPenalty
Finding type for maxWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: factory
Finding type for factory...
IJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IJoeFactory
IJoeFactory
Final Type: IJoeFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: floorPrice
Finding type for floorPrice...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
IJoeRouter02
Check copy_toekn_tuple
(-1, -1, 0, 'ROUTER')
----
Type: IJoeRouter02
IJoeRouter02
Final Type: IJoeRouter02
 NO FIELDS

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: stopped
Finding type for stopped...
bool
SKIP bool
State_var: maxAllocation
Finding type for maxAllocation...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxAllocation Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoe
Finding type for rJoe...
IRocketJoeToken
Check copy_toekn_tuple
(-1, -1, 0, 'RJTOKEN')
----
Type: IRocketJoeToken
IRocketJoeToken
Final Type: IRocketJoeToken
 NO FIELDS

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoePerAvax
Finding type for rJoePerAvax...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: rJoePerAvax Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: initialize
Function name: initialize
Function Visibility (test): external
_issuer
Finding type for _issuer...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ISSUER')
----
Type: address
address
Final Type: address

Name: _issuer Function: initialize
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
[*]Type fetched successfully
_auctionStart
Finding type for _auctionStart...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _auctionStart Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
_token
Finding type for _token...
address
Check copy_toekn_tuple
(-1, -1, 0, 'TOKEN')
----
Type: address
address
Final Type: address

Name: _token Function: initialize
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
_tokenIncentivesPercent
Finding type for _tokenIncentivesPercent...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _tokenIncentivesPercent Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
_floorPrice
Finding type for _floorPrice...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _floorPrice Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
_maxWithdrawPenalty
Finding type for _maxWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _maxWithdrawPenalty Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
_fixedWithdrawPenalty
Finding type for _fixedWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _fixedWithdrawPenalty Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
_maxAllocation
Finding type for _maxAllocation...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _maxAllocation Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
_userTimelock
Finding type for _userTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _userTimelock Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
_issuerTimelock
Finding type for _issuerTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: _issuerTimelock Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: ISSUER
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: TOKEN
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 5
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 6
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 7
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 8
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 9
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: ISSUER
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: TOKEN
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 5
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 6
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 7
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 8
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 9
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
initialized_1(bool) := ϕ(['initialized_3', 'initialized_0'])
has variable
typecheckig node...
initialized_1(bool) := ϕ(['initialized_3', 'initialized_0'])
Function name: initialize
Phi
[i]Type for initialized

Name: initialized Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_9(LaunchEvent.Phase) -> Phase.NotStarted
has variable
clearing ir...?
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_9)
typecheckig node...
REF_9(LaunchEvent.Phase) -> Phase.NotStarted
Function name: initialize
MEMBER
Phase
Phase
NotStarted
global
Phase Fields:
^^^
[i]Type for REF_9

Name: Phase.NotStarted Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.NotStarted Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_9)
Internal call...
atPhase
REF_9
Function: atPhase
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[], [], 'u', None, [], -1]
added
xyz
Function name: atPhase
Function Visibility: internal
clearning node...
clearing ir...?
_phase_1(LaunchEvent.Phase) := ϕ(['REF_22', 'REF_38', 'REF_9'])
has variable
[i] _phase cleared
typecheckig node...
_phase_1(LaunchEvent.Phase) := ϕ(['REF_22', 'REF_38', 'REF_9'])
Function name: atPhase
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
typecheckig node...
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
Internal call...
_atPhase
_phase
Function: _atPhase
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[], [], 'u', None, [], -1]
added
xyz
Function name: _atPhase
Function Visibility: internal
clearning node...
clearing ir...?
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
has variable
[i] _phase cleared
typecheckig node...
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Function name: _atPhase
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
has variable
clearing ir...?
TMP_205(bool) = _phase_1 == REF_64
has variable
[i] TMP_205 cleared
clearing ir...?
CONDITION TMP_205
typecheckig node...
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
Function name: _atPhase
MEMBER
Phase
Phase
NotStarted
global
Phase Fields:
NotStarted
^^^

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(bool) = _phase_1 == REF_64
Function name: _atPhase
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_205
Condition...
Conidtion: 
TMP_205
TMP_205
clearning node...
clearing ir...?
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
TMP_209(bool) = _phase_1 == REF_66
has variable
[i] TMP_209 cleared
clearing ir...?
CONDITION TMP_209
typecheckig node...
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: _atPhase
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
^^^
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_209(bool) = _phase_1 == REF_66
Function name: _atPhase
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_209
Condition...
Conidtion: 
TMP_209
TMP_209
clearning node...
clearing ir...?
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
has variable
clearing ir...?
TMP_213(bool) = _phase_1 == REF_68
has variable
[i] TMP_213 cleared
clearing ir...?
CONDITION TMP_213
typecheckig node...
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: _atPhase
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
^^^
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_213(bool) = _phase_1 == REF_68
Function name: _atPhase
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_213
Condition...
Conidtion: 
TMP_213
TMP_213
clearning node...
clearing ir...?
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_210 cleared
clearing ir...?
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
TMP_211(bool) = TMP_210 == REF_67
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
typecheckig node...
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: currentPhase
Function Visibility: public
clearning node...
clearing ir...?
auctionStart_2(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
has variable
clearing ir...?
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
has variable
clearing ir...?
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_1', 'PHASE_TWO_DURATION_0'])
has variable
typecheckig node...
auctionStart_2(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
Function name: currentPhase
Phi
[i]Type for auctionStart

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Function name: currentPhase
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_1', 'PHASE_TWO_DURATION_0'])
Function name: currentPhase
Phi
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_47(bool) = block.timestamp < auctionStart_2
has variable
[i] TMP_47 cleared
clearing ir...?
TMP_48(bool) = auctionStart_2 == 0
has variable
[i] TMP_48 cleared
clearing ir...?
TMP_49(bool) = TMP_47 || TMP_48
has variable
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
typecheckig node...
TMP_47(bool) = block.timestamp < auctionStart_2
Function name: currentPhase
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_47

Name: TMP_47 Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_48(bool) = auctionStart_2 == 0
Function name: currentPhase
[i]Type for TMP_48

Name: TMP_48 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_49(bool) = TMP_47 || TMP_48
Function name: currentPhase
[i]Type for TMP_49

Name: TMP_49 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_49
Condition...
Conidtion: 
TMP_49
TMP_49
clearning node...
clearing ir...?
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
has variable
[i] TMP_50 cleared
clearing ir...?
TMP_51(bool) = block.timestamp < TMP_50
has variable
[i] TMP_51 cleared
clearing ir...?
CONDITION TMP_51
typecheckig node...
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
Function name: currentPhase

Name: TMP_50 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_50 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_50

Name: TMP_50 Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_51(bool) = block.timestamp < TMP_50
Function name: currentPhase
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_51

Name: TMP_51 Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_51
Condition...
Conidtion: 
TMP_51
TMP_51
clearning node...
clearing ir...?
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
RETURN REF_11
typecheckig node...
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: currentPhase
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_11

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN REF_11
RETURN

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
has variable
[i] TMP_52 cleared
clearing ir...?
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
has variable
[i] TMP_53 cleared
clearing ir...?
TMP_54(bool) = block.timestamp < TMP_53
has variable
[i] TMP_54 cleared
clearing ir...?
CONDITION TMP_54
typecheckig node...
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
Function name: currentPhase

Name: TMP_52 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_52 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_52

Name: TMP_52 Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
Function name: currentPhase

Name: TMP_53 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_53 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_53

Name: TMP_53 Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_54(bool) = block.timestamp < TMP_53
Function name: currentPhase
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_54

Name: TMP_54 Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_54
Condition...
Conidtion: 
TMP_54
TMP_54
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
has variable
clearing ir...?
RETURN REF_12
typecheckig node...
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: currentPhase
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_12

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN REF_12
RETURN

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
has variable
clearing ir...?
RETURN REF_13
typecheckig node...
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
Function name: currentPhase
MEMBER
Phase
Phase
PhaseThree
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
^^^
[i]Type for REF_13

Name: Phase.PhaseThree Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseThree Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN REF_13
RETURN

Name: Phase.PhaseThree Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
has variable
clearing ir...?
RETURN REF_10
typecheckig node...
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
Function name: currentPhase
MEMBER
Phase
Phase
NotStarted
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_10

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN REF_10
RETURN

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "currentPhase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: currentPhase

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: LaunchEvent.Phase
LaunchEvent.Phase
Final Type: LaunchEvent.Phase
 NO FIELDS
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: _atPhase
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = TMP_210 == REF_67
Function name: _atPhase
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_206 cleared
clearing ir...?
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
has variable
clearing ir...?
TMP_207(bool) = TMP_206 == REF_65
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
typecheckig node...
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
Function name: _atPhase
MEMBER
Phase
Phase
NotStarted
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_207(bool) = TMP_206 == REF_65
Function name: _atPhase
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
has variable
clearing ir...?
TMP_217(bool) = _phase_1 == REF_70
has variable
[i] TMP_217 cleared
clearing ir...?
CONDITION TMP_217
typecheckig node...
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
Function name: _atPhase
MEMBER
Phase
Phase
PhaseThree
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_217(bool) = _phase_1 == REF_70
Function name: _atPhase
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_217
Condition...
Conidtion: 
TMP_217
TMP_217
clearning node...
clearing ir...?
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_214 cleared
clearing ir...?
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
has variable
clearing ir...?
TMP_215(bool) = TMP_214 == REF_69
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
typecheckig node...
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: _atPhase
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_215(bool) = TMP_214 == REF_69
Function name: _atPhase
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
typecheckig node...
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_218 cleared
clearing ir...?
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
has variable
clearing ir...?
TMP_219(bool) = TMP_218 == REF_71
has variable
[i] TMP_219 cleared
clearing ir...?
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
typecheckig node...
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
Function name: _atPhase
MEMBER
Phase
Phase
PhaseThree
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_219(bool) = TMP_218 == REF_71
Function name: _atPhase
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_atPhase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _atPhase
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "atPhase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: atPhase
done.
clearning node...
clearing ir...?
TMP_14 = ! initialized_2 
clearing ir...?
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,LaunchEvent: already initialized)
typecheckig node...
TMP_14 = ! initialized_2 
[i]Type for TMP_14

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,LaunchEvent: already initialized)
[i]Type for TMP_15

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_16 = CONVERT msg.sender to IRocketJoeFactory
has variable
[i] TMP_16 cleared
clearing ir...?
rocketJoeFactory_1(IRocketJoeFactory) := TMP_16(IRocketJoeFactory)
has variable
typecheckig node...
TMP_16 = CONVERT msg.sender to IRocketJoeFactory
Function name: initialize
[i]Type for TMP_16

Name: TMP_16 Function: initialize
Num: -1
Den: -1
Norm: u
LF: LaunchEvent
Fields: 
Finance Type: undef
done.
rocketJoeFactory_1(IRocketJoeFactory) := TMP_16(IRocketJoeFactory)
Function name: initialize
asgn

Name: TMP_16 Function: initialize
Num: -1
Den: -1
Norm: u
LF: LaunchEvent
Fields: 
Finance Type: undef

Name: rocketJoeFactory Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Norm: u
LF: LaunchEvent
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_17(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_1(IRocketJoeFactory), function:wavax, arguments:[]  
has variable
[i] TMP_17 cleared
clearing ir...?
rocketJoeFactory_2(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_1', 'rocketJoeFactory_15'])
has variable
clearing ir...?
TMP_18 = CONVERT TMP_17 to IWAVAX
has variable
[i] TMP_18 cleared
clearing ir...?
WAVAX_2(IWAVAX) := TMP_18(IWAVAX)
has variable
typecheckig node...
TMP_17(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_1(IRocketJoeFactory), function:wavax, arguments:[]  
Function name: initialize
High Call: wavax
func name:wavax
other func name:wavax
TMP_17
hlc contract name: LaunchEvent func_name: wavax
wfc len: 0
COPIED
[i]Type for TMP_17

Name: TMP_17 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rocketJoeFactory_2(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_1', 'rocketJoeFactory_15'])
Function name: initialize
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: u
LF: LaunchEvent
Fields: 
Finance Type: undef
done.
TMP_18 = CONVERT TMP_17 to IWAVAX
Function name: initialize

Name: TMP_17 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_18 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_18

Name: TMP_18 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WAVAX_2(IWAVAX) := TMP_18(IWAVAX)
Function name: initialize
asgn

Name: TMP_18 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: WAVAX Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for WAVAX

Name: WAVAX Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_19(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_2(IRocketJoeFactory), function:router, arguments:[]  
has variable
[i] TMP_19 cleared
clearing ir...?
rocketJoeFactory_3(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_2'])
has variable
clearing ir...?
TMP_20 = CONVERT TMP_19 to IJoeRouter02
has variable
[i] TMP_20 cleared
clearing ir...?
router_1(IJoeRouter02) := TMP_20(IJoeRouter02)
has variable
typecheckig node...
TMP_19(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_2(IRocketJoeFactory), function:router, arguments:[]  
Function name: initialize
High Call: router
func name:router
other func name:router
TMP_19
hlc contract name: LaunchEvent func_name: router
wfc len: 0
COPIED
[i]Type for TMP_19

Name: TMP_19 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rocketJoeFactory_3(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_2'])
Function name: initialize
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: u
LF: LaunchEvent
Fields: 
Finance Type: undef
done.
TMP_20 = CONVERT TMP_19 to IJoeRouter02
Function name: initialize

Name: TMP_19 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_20 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_20

Name: TMP_20 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
router_1(IJoeRouter02) := TMP_20(IJoeRouter02)
Function name: initialize
asgn

Name: TMP_20 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: router Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for router

Name: router Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_21(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_3(IRocketJoeFactory), function:factory, arguments:[]  
has variable
[i] TMP_21 cleared
clearing ir...?
rocketJoeFactory_4(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_3', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
has variable
clearing ir...?
TMP_22 = CONVERT TMP_21 to IJoeFactory
has variable
[i] TMP_22 cleared
clearing ir...?
factory_1(IJoeFactory) := TMP_22(IJoeFactory)
has variable
typecheckig node...
TMP_21(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_3(IRocketJoeFactory), function:factory, arguments:[]  
Function name: initialize
High Call: factory
func name:factory
other func name:factory
TMP_21
hlc contract name: LaunchEvent func_name: factory
wfc len: 0
COPIED
[i]Type for TMP_21

Name: TMP_21 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rocketJoeFactory_4(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_3', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Function name: initialize
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: u
LF: LaunchEvent
Fields: 
Finance Type: undef
done.
TMP_22 = CONVERT TMP_21 to IJoeFactory
Function name: initialize

Name: TMP_21 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_22 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_22

Name: TMP_22 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
factory_1(IJoeFactory) := TMP_22(IJoeFactory)
Function name: initialize
asgn

Name: TMP_22 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: factory Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for factory

Name: factory Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_23(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_4(IRocketJoeFactory), function:rJoe, arguments:[]  
has variable
[i] TMP_23 cleared
clearing ir...?
rocketJoeFactory_5(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_4', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
has variable
clearing ir...?
TMP_24 = CONVERT TMP_23 to IRocketJoeToken
has variable
[i] TMP_24 cleared
clearing ir...?
rJoe_1(IRocketJoeToken) := TMP_24(IRocketJoeToken)
has variable
typecheckig node...
TMP_23(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_4(IRocketJoeFactory), function:rJoe, arguments:[]  
Function name: initialize
High Call: rJoe
func name:rJoe
other func name:rJoe
TMP_23
hlc contract name: LaunchEvent func_name: rJoe
wfc len: 0
COPIED
[i]Type for TMP_23

Name: TMP_23 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rocketJoeFactory_5(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_4', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Function name: initialize
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: u
LF: LaunchEvent
Fields: 
Finance Type: undef
done.
TMP_24 = CONVERT TMP_23 to IRocketJoeToken
Function name: initialize

Name: TMP_23 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_24 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_24

Name: TMP_24 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rJoe_1(IRocketJoeToken) := TMP_24(IRocketJoeToken)
Function name: initialize
asgn

Name: TMP_24 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: rJoe Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for rJoe

Name: rJoe Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_25(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_5(IRocketJoeFactory), function:rJoePerAvax, arguments:[]  
has variable
[i] TMP_25 cleared
clearing ir...?
rocketJoeFactory_6(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_5'])
has variable
clearing ir...?
rJoePerAvax_1(uint256) := TMP_25(uint256)
has variable
typecheckig node...
TMP_25(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_5(IRocketJoeFactory), function:rJoePerAvax, arguments:[]  
Function name: initialize
High Call: rJoePerAvax
func name:rJoePerAvax
other func name:rJoePerAvax
TMP_25
hlc contract name: LaunchEvent func_name: rJoePerAvax
wfc len: 0
COPIED
[i]Type for TMP_25

Name: TMP_25 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rocketJoeFactory_6(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_5'])
Function name: initialize
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: u
LF: LaunchEvent
Fields: 
Finance Type: undef
done.
rJoePerAvax_1(uint256) := TMP_25(uint256)
Function name: initialize
asgn

Name: TMP_25 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: rJoePerAvax Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for rJoePerAvax

Name: rJoePerAvax Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_26(bool) = _maxWithdrawPenalty_1 <= 500000000000000000
has variable
[i] TMP_26 cleared
clearing ir...?
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,LaunchEvent: maxWithdrawPenalty too big)
typecheckig node...
TMP_26(bool) = _maxWithdrawPenalty_1 <= 500000000000000000
Function name: initialize
testing lt...
val: 500000000000000000
17
val: 500000000000000000
17
lnorm: u rnorm: 17
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_26

Name: TMP_26 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,LaunchEvent: maxWithdrawPenalty too big)
[i]Type for TMP_27

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_28(bool) = _fixedWithdrawPenalty_1 <= 500000000000000000
has variable
[i] TMP_28 cleared
clearing ir...?
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,LaunchEvent: fixedWithdrawPenalty too big)
typecheckig node...
TMP_28(bool) = _fixedWithdrawPenalty_1 <= 500000000000000000
Function name: initialize
testing lt...
val: 500000000000000000
17
val: 500000000000000000
17
lnorm: u rnorm: 17
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_28

Name: TMP_28 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,LaunchEvent: fixedWithdrawPenalty too big)
[i]Type for TMP_29

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_30(bool) = _userTimelock_1 <= 604800
has variable
[i] TMP_30 cleared
clearing ir...?
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LaunchEvent: can't lock user LP for more than 7 days)
typecheckig node...
TMP_30(bool) = _userTimelock_1 <= 604800
Function name: initialize
testing lt...
val: 604800
val: 604800
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_30

Name: TMP_30 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LaunchEvent: can't lock user LP for more than 7 days)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_32(bool) = _issuerTimelock_1 > _userTimelock_1
has variable
[i] TMP_32 cleared
clearing ir...?
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LaunchEvent: issuer can't withdraw before users)
typecheckig node...
TMP_32(bool) = _issuerTimelock_1 > _userTimelock_1
Function name: initialize
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _userTimelock Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_32

Name: TMP_32 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LaunchEvent: issuer can't withdraw before users)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_34(bool) = _auctionStart_1 > block.timestamp
has variable
[i] TMP_34 cleared
clearing ir...?
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,LaunchEvent: start of phase 1 cannot be in the past)
typecheckig node...
TMP_34(bool) = _auctionStart_1 > block.timestamp
Function name: initialize
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_8 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_34

Name: TMP_34 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,LaunchEvent: start of phase 1 cannot be in the past)
[i]Type for TMP_35

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
issuer_1(address) := _issuer_1(address)
has variable
typecheckig node...
issuer_1(address) := _issuer_1(address)
Function name: initialize
asgn

Name: _issuer Function: initialize
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef

Name: issuer Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for issuer

Name: issuer Function: initialize
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
auctionStart_1(uint256) := _auctionStart_1(uint256)
has variable
typecheckig node...
auctionStart_1(uint256) := _auctionStart_1(uint256)
Function name: initialize
asgn

Name: _auctionStart Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: auctionStart Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for auctionStart

Name: auctionStart Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_36(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_6(IRocketJoeFactory), function:PHASE_ONE_DURATION, arguments:[]  
has variable
[i] TMP_36 cleared
clearing ir...?
rocketJoeFactory_7(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_6', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
has variable
clearing ir...?
PHASE_ONE_DURATION_1(uint256) := TMP_36(uint256)
has variable
typecheckig node...
TMP_36(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_6(IRocketJoeFactory), function:PHASE_ONE_DURATION, arguments:[]  
Function name: initialize
High Call: PHASE_ONE_DURATION
func name:PHASE_ONE_DURATION
other func name:PHASE_ONE_DURATION
TMP_36
hlc contract name: LaunchEvent func_name: PHASE_ONE_DURATION
wfc len: 0
COPIED
[i]Type for TMP_36

Name: TMP_36 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rocketJoeFactory_7(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_6', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Function name: initialize
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: u
LF: LaunchEvent
Fields: 
Finance Type: undef
done.
PHASE_ONE_DURATION_1(uint256) := TMP_36(uint256)
Function name: initialize
asgn

Name: TMP_36 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PHASE_ONE_DURATION Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_37(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_7(IRocketJoeFactory), function:PHASE_ONE_NO_FEE_DURATION, arguments:[]  
has variable
[i] TMP_37 cleared
clearing ir...?
rocketJoeFactory_8(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_7', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
has variable
clearing ir...?
PHASE_ONE_NO_FEE_DURATION_1(uint256) := TMP_37(uint256)
has variable
typecheckig node...
TMP_37(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_7(IRocketJoeFactory), function:PHASE_ONE_NO_FEE_DURATION, arguments:[]  
Function name: initialize
High Call: PHASE_ONE_NO_FEE_DURATION
func name:PHASE_ONE_NO_FEE_DURATION
other func name:PHASE_ONE_NO_FEE_DURATION
TMP_37
hlc contract name: LaunchEvent func_name: PHASE_ONE_NO_FEE_DURATION
wfc len: 0
COPIED
[i]Type for TMP_37

Name: TMP_37 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rocketJoeFactory_8(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_7', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Function name: initialize
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: u
LF: LaunchEvent
Fields: 
Finance Type: undef
done.
PHASE_ONE_NO_FEE_DURATION_1(uint256) := TMP_37(uint256)
Function name: initialize
asgn

Name: TMP_37 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PHASE_ONE_NO_FEE_DURATION Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for PHASE_ONE_NO_FEE_DURATION

Name: PHASE_ONE_NO_FEE_DURATION Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_38(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_8(IRocketJoeFactory), function:PHASE_TWO_DURATION, arguments:[]  
has variable
[i] TMP_38 cleared
clearing ir...?
rocketJoeFactory_9(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_8'])
has variable
clearing ir...?
PHASE_TWO_DURATION_1(uint256) := TMP_38(uint256)
has variable
typecheckig node...
TMP_38(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_8(IRocketJoeFactory), function:PHASE_TWO_DURATION, arguments:[]  
Function name: initialize
High Call: PHASE_TWO_DURATION
func name:PHASE_TWO_DURATION
other func name:PHASE_TWO_DURATION
TMP_38
hlc contract name: LaunchEvent func_name: PHASE_TWO_DURATION
wfc len: 0
COPIED
[i]Type for TMP_38

Name: TMP_38 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rocketJoeFactory_9(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_8'])
Function name: initialize
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: u
LF: LaunchEvent
Fields: 
Finance Type: undef
done.
PHASE_TWO_DURATION_1(uint256) := TMP_38(uint256)
Function name: initialize
asgn

Name: TMP_38 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PHASE_TWO_DURATION Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_39 = CONVERT _token_1 to IERC20Metadata
has variable
[i] TMP_39 cleared
clearing ir...?
token_1(IERC20Metadata) := TMP_39(IERC20Metadata)
has variable
typecheckig node...
TMP_39 = CONVERT _token_1 to IERC20Metadata
Function name: initialize

Name: _token Function: initialize
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef

Name: TMP_39 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_39

Name: TMP_39 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
token_1(IERC20Metadata) := TMP_39(IERC20Metadata)
Function name: initialize
asgn

Name: TMP_39 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef

Name: token Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for token

Name: token Function: initialize
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_40 = CONVERT this to address
has variable
[i] TMP_40 cleared
clearing ir...?
TMP_41(uint256) = HIGH_LEVEL_CALL, dest:token_1(IERC20Metadata), function:balanceOf, arguments:['TMP_40']  
has variable
[i] TMP_41 cleared
clearing ir...?
token_2(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_1', 'token_21', 'token_25', 'token_11', 'token_22'])
has variable
clearing ir...?
balance_1(uint256) := TMP_41(uint256)
has variable
[i] balance cleared
typecheckig node...
TMP_40 = CONVERT this to address
Function name: initialize
[i]Type for TMP_40

Name: TMP_40 Function: initialize
Num: -1
Den: -1
Norm: u
LF: LaunchEvent
Fields: 
Finance Type: undef
done.
TMP_41(uint256) = HIGH_LEVEL_CALL, dest:token_1(IERC20Metadata), function:balanceOf, arguments:['TMP_40']  
Function name: initialize
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_41
hlc contract name: TOKEN func_name: balanceOf
('c', [1], [-1], 18, None)
TMP_40
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 18, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_41

Name: TMP_41 Function: initialize
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
token_2(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_1', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: initialize
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
balance_1(uint256) := TMP_41(uint256)
Function name: initialize
asgn

Name: TMP_41 Function: initialize
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: balance Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance

Name: balance Function: initialize
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
tokenIncentivesPercent_1(uint256) := _tokenIncentivesPercent_1(uint256)
has variable
typecheckig node...
tokenIncentivesPercent_1(uint256) := _tokenIncentivesPercent_1(uint256)
Function name: initialize
asgn

Name: _tokenIncentivesPercent Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesPercent Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenIncentivesPercent

Name: tokenIncentivesPercent Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_42(uint256) = balance_1 (c)* 1000000000000000000
has variable
[i] TMP_42 cleared
clearing ir...?
TMP_43(uint256) = 1000000000000000000 (c)+ _tokenIncentivesPercent_1
has variable
[i] TMP_43 cleared
clearing ir...?
TMP_44(uint256) = TMP_42 (c)/ TMP_43
has variable
[i] TMP_44 cleared
clearing ir...?
tokenReserve_1(uint256) := TMP_44(uint256)
has variable
typecheckig node...
TMP_42(uint256) = balance_1 (c)* 1000000000000000000
Function name: initialize
testing mul...
val: 1000000000000000000
18
val: 1000000000000000000
18
lnorm: 18 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: balance Function: initialize
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: TMP_42 Function: initialize
Num: 
Den: 
Norm: 36
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_42

Name: TMP_42 Function: initialize
Num: 1
Den: -1
Norm: 36
LF: None
Fields: 
Finance Type: undef
done.
TMP_43(uint256) = 1000000000000000000 (c)+ _tokenIncentivesPercent_1
Function name: initialize
val: 1000000000000000000
18

Name: TMP_43 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1000000000000000000
18
lnorm: 18 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _tokenIncentivesPercent Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_43 Function: initialize
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_43

Name: TMP_43 Function: initialize
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_44(uint256) = TMP_42 (c)/ TMP_43
Function name: initialize
lnorm: 36 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_44 Function: initialize
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: TMP_42 Function: initialize
Num: 1
Den: -1
Norm: 36
LF: None
Fields: 
Finance Type: undef

Name: TMP_44 Function: initialize
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_44

Name: TMP_44 Function: initialize
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenReserve_1(uint256) := TMP_44(uint256)
Function name: initialize
asgn

Name: TMP_44 Function: initialize
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: tokenReserve Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenReserve

Name: tokenReserve Function: initialize
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_45(uint256) = balance_1 (c)- tokenReserve_1
has variable
[i] TMP_45 cleared
clearing ir...?
tokenIncentivesForUsers_1(uint256) := TMP_45(uint256)
has variable
typecheckig node...
TMP_45(uint256) = balance_1 (c)- tokenReserve_1
Function name: initialize
lnorm: 18 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: balance Function: initialize
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: balance Function: initialize
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: TMP_45 Function: initialize
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_45

Name: TMP_45 Function: initialize
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesForUsers_1(uint256) := TMP_45(uint256)
Function name: initialize
asgn

Name: TMP_45 Function: initialize
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesForUsers Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: initialize
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
tokenIncentivesBalance_1(uint256) := tokenIncentivesForUsers_1(uint256)
has variable
typecheckig node...
tokenIncentivesBalance_1(uint256) := tokenIncentivesForUsers_1(uint256)
Function name: initialize
asgn

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesBalance Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: initialize
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
floorPrice_1(uint256) := _floorPrice_1(uint256)
has variable
typecheckig node...
floorPrice_1(uint256) := _floorPrice_1(uint256)
Function name: initialize
asgn

Name: _floorPrice Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: floorPrice Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for floorPrice

Name: floorPrice Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
maxWithdrawPenalty_1(uint256) := _maxWithdrawPenalty_1(uint256)
has variable
typecheckig node...
maxWithdrawPenalty_1(uint256) := _maxWithdrawPenalty_1(uint256)
Function name: initialize
asgn

Name: _maxWithdrawPenalty Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: maxWithdrawPenalty Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for maxWithdrawPenalty

Name: maxWithdrawPenalty Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
fixedWithdrawPenalty_1(uint256) := _fixedWithdrawPenalty_1(uint256)
has variable
typecheckig node...
fixedWithdrawPenalty_1(uint256) := _fixedWithdrawPenalty_1(uint256)
Function name: initialize
asgn

Name: _fixedWithdrawPenalty Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: fixedWithdrawPenalty Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for fixedWithdrawPenalty

Name: fixedWithdrawPenalty Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
maxAllocation_1(uint256) := _maxAllocation_1(uint256)
has variable
typecheckig node...
maxAllocation_1(uint256) := _maxAllocation_1(uint256)
Function name: initialize
asgn

Name: _maxAllocation Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: maxAllocation Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for maxAllocation

Name: maxAllocation Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
userTimelock_1(uint256) := _userTimelock_1(uint256)
has variable
typecheckig node...
userTimelock_1(uint256) := _userTimelock_1(uint256)
Function name: initialize
asgn

Name: _userTimelock Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: userTimelock Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for userTimelock

Name: userTimelock Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
issuerTimelock_1(uint256) := _issuerTimelock_1(uint256)
has variable
typecheckig node...
issuerTimelock_1(uint256) := _issuerTimelock_1(uint256)
Function name: initialize
asgn

Name: _issuerTimelock Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: issuerTimelock Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for issuerTimelock

Name: issuerTimelock Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
initialized_3(bool) := True(bool)
has variable
typecheckig node...
initialized_3(bool) := True(bool)
Function name: initialize
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: initialized Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for initialized

Name: initialized Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "initialize":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: initialize
State_var: WAVAX
Finding type for WAVAX...
IWAVAX
Check copy_toekn_tuple
(-1, -1, 0, 'WAVAX')
----
Type: IWAVAX
IWAVAX
Final Type: IWAVAX
 NO FIELDS

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rocketJoeFactory
Finding type for rocketJoeFactory...
IRocketJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'RJFACTORY')
----
Type: IRocketJoeFactory
IRocketJoeFactory
Final Type: IRocketJoeFactory
 NO FIELDS

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token
Finding type for token...
IERC20Metadata
Check copy_toekn_tuple
(-1, -1, 0, 'TOKEN')
----
Type: IERC20Metadata
IERC20Metadata
Final Type: IERC20Metadata
 NO FIELDS

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesBalance
Finding type for tokenIncentivesBalance...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenReserve
Finding type for tokenReserve...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxReserve
Finding type for wavaxReserve...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: getUserInfo
Finding type for getUserInfo...
mapping(address => LaunchEvent.UserInfo)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => LaunchEvent.UserInfo)
mapping(address => LaunchEvent.UserInfo)
LaunchEvent.UserInfo
Final Type: LaunchEvent.UserInfo
global
getUserInfo
allocation
global
getUserInfo
balance
global
getUserInfo
hasWithdrawnPair
global
getUserInfo
hasWithdrawnIncentives
FIELDS:
getUserInfo Fields:
^^^

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuer
Finding type for issuer...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ISSUER')
----
Type: address
address
Final Type: address

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pair
Finding type for pair...
IJoePair
Check copy_toekn_tuple
(-1, -1, 0, 'JOEPAIR')
----
Type: IJoePair
IJoePair
Final Type: IJoePair
 NO FIELDS

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentiveIssuerRefund
Finding type for tokenIncentiveIssuerRefund...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesForUsers
Finding type for tokenIncentivesForUsers...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxAllocated
Finding type for wavaxAllocated...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: initialized
Finding type for initialized...
bool
SKIP bool
State_var: PHASE_ONE_DURATION
Finding type for PHASE_ONE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_TWO_DURATION
Finding type for PHASE_TWO_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: auctionStart
Finding type for auctionStart...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuerTimelock
Finding type for issuerTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: issuerTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: userTimelock
Finding type for userTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: userTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpSupply
Finding type for lpSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_ONE_NO_FEE_DURATION
Finding type for PHASE_ONE_NO_FEE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: fixedWithdrawPenalty
Finding type for fixedWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: fixedWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: maxWithdrawPenalty
Finding type for maxWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: factory
Finding type for factory...
IJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IJoeFactory
IJoeFactory
Final Type: IJoeFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: floorPrice
Finding type for floorPrice...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
IJoeRouter02
Check copy_toekn_tuple
(-1, -1, 0, 'ROUTER')
----
Type: IJoeRouter02
IJoeRouter02
Final Type: IJoeRouter02
 NO FIELDS

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: stopped
Finding type for stopped...
bool
SKIP bool
State_var: maxAllocation
Finding type for maxAllocation...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxAllocation Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoe
Finding type for rJoe...
IRocketJoeToken
Check copy_toekn_tuple
(-1, -1, 0, 'RJTOKEN')
----
Type: IRocketJoeToken
IRocketJoeToken
Final Type: IRocketJoeToken
 NO FIELDS

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoePerAvax
Finding type for rJoePerAvax...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: rJoePerAvax Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: currentPhase
Function name: currentPhase
Function Visibility (test): public
Its the same:
0
clearning node...
clearing ir...?
auctionStart_2(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
has variable
clearing ir...?
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
has variable
clearing ir...?
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_1', 'PHASE_TWO_DURATION_0'])
has variable
typecheckig node...
auctionStart_2(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
Function name: currentPhase
Phi
[i]Type for auctionStart

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Function name: currentPhase
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_1', 'PHASE_TWO_DURATION_0'])
Function name: currentPhase
Phi
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_47(bool) = block.timestamp < auctionStart_2
has variable
[i] TMP_47 cleared
clearing ir...?
TMP_48(bool) = auctionStart_2 == 0
has variable
[i] TMP_48 cleared
clearing ir...?
TMP_49(bool) = TMP_47 || TMP_48
has variable
[i] TMP_49 cleared
clearing ir...?
CONDITION TMP_49
typecheckig node...
TMP_47(bool) = block.timestamp < auctionStart_2
Function name: currentPhase
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_47

Name: TMP_47 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_48(bool) = auctionStart_2 == 0
Function name: currentPhase
[i]Type for TMP_48

Name: TMP_48 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_49(bool) = TMP_47 || TMP_48
Function name: currentPhase
[i]Type for TMP_49

Name: TMP_49 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_49
Condition...
Conidtion: 
TMP_49
TMP_49
clearning node...
clearing ir...?
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
has variable
[i] TMP_50 cleared
clearing ir...?
TMP_51(bool) = block.timestamp < TMP_50
has variable
[i] TMP_51 cleared
clearing ir...?
CONDITION TMP_51
typecheckig node...
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
Function name: currentPhase

Name: TMP_50 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_50 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_50

Name: TMP_50 Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_51(bool) = block.timestamp < TMP_50
Function name: currentPhase
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_51

Name: TMP_51 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_51
Condition...
Conidtion: 
TMP_51
TMP_51
clearning node...
clearing ir...?
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
has variable
clearing ir...?
RETURN REF_10
typecheckig node...
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
Function name: currentPhase
MEMBER
Phase
Phase
NotStarted
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_10

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN REF_10
RETURN

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
RETURN REF_11
typecheckig node...
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: currentPhase
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_11

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN REF_11
RETURN

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
has variable
[i] TMP_52 cleared
clearing ir...?
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
has variable
[i] TMP_53 cleared
clearing ir...?
TMP_54(bool) = block.timestamp < TMP_53
has variable
[i] TMP_54 cleared
clearing ir...?
CONDITION TMP_54
typecheckig node...
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
Function name: currentPhase

Name: TMP_52 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_52 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_52

Name: TMP_52 Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
Function name: currentPhase

Name: TMP_53 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_53 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_53

Name: TMP_53 Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_54(bool) = block.timestamp < TMP_53
Function name: currentPhase
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_54

Name: TMP_54 Function: currentPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_54
Condition...
Conidtion: 
TMP_54
TMP_54
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
has variable
clearing ir...?
RETURN REF_12
typecheckig node...
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: currentPhase
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_12

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN REF_12
RETURN

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
has variable
clearing ir...?
RETURN REF_13
typecheckig node...
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
Function name: currentPhase
MEMBER
Phase
Phase
PhaseThree
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_13

Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN REF_13
RETURN

Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "currentPhase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: currentPhase

Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: WAVAX
Finding type for WAVAX...
IWAVAX
Check copy_toekn_tuple
(-1, -1, 0, 'WAVAX')
----
Type: IWAVAX
IWAVAX
Final Type: IWAVAX
 NO FIELDS

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rocketJoeFactory
Finding type for rocketJoeFactory...
IRocketJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'RJFACTORY')
----
Type: IRocketJoeFactory
IRocketJoeFactory
Final Type: IRocketJoeFactory
 NO FIELDS

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token
Finding type for token...
IERC20Metadata
Check copy_toekn_tuple
(-1, -1, 0, 'TOKEN')
----
Type: IERC20Metadata
IERC20Metadata
Final Type: IERC20Metadata
 NO FIELDS

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesBalance
Finding type for tokenIncentivesBalance...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenReserve
Finding type for tokenReserve...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxReserve
Finding type for wavaxReserve...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: getUserInfo
Finding type for getUserInfo...
mapping(address => LaunchEvent.UserInfo)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => LaunchEvent.UserInfo)
mapping(address => LaunchEvent.UserInfo)
LaunchEvent.UserInfo
Final Type: LaunchEvent.UserInfo
global
getUserInfo
allocation
global
getUserInfo
balance
global
getUserInfo
hasWithdrawnPair
global
getUserInfo
hasWithdrawnIncentives
FIELDS:
getUserInfo Fields:
^^^

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuer
Finding type for issuer...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ISSUER')
----
Type: address
address
Final Type: address

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pair
Finding type for pair...
IJoePair
Check copy_toekn_tuple
(-1, -1, 0, 'JOEPAIR')
----
Type: IJoePair
IJoePair
Final Type: IJoePair
 NO FIELDS

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentiveIssuerRefund
Finding type for tokenIncentiveIssuerRefund...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesForUsers
Finding type for tokenIncentivesForUsers...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxAllocated
Finding type for wavaxAllocated...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: initialized
Finding type for initialized...
bool
SKIP bool
State_var: PHASE_ONE_DURATION
Finding type for PHASE_ONE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_TWO_DURATION
Finding type for PHASE_TWO_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: auctionStart
Finding type for auctionStart...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuerTimelock
Finding type for issuerTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: issuerTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: userTimelock
Finding type for userTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: userTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpSupply
Finding type for lpSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_ONE_NO_FEE_DURATION
Finding type for PHASE_ONE_NO_FEE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: fixedWithdrawPenalty
Finding type for fixedWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: fixedWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: maxWithdrawPenalty
Finding type for maxWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: factory
Finding type for factory...
IJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IJoeFactory
IJoeFactory
Final Type: IJoeFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: floorPrice
Finding type for floorPrice...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
IJoeRouter02
Check copy_toekn_tuple
(-1, -1, 0, 'ROUTER')
----
Type: IJoeRouter02
IJoeRouter02
Final Type: IJoeRouter02
 NO FIELDS

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: stopped
Finding type for stopped...
bool
SKIP bool
State_var: maxAllocation
Finding type for maxAllocation...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxAllocation Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoe
Finding type for rJoe...
IRocketJoeToken
Check copy_toekn_tuple
(-1, -1, 0, 'RJTOKEN')
----
Type: IRocketJoeToken
IRocketJoeToken
Final Type: IRocketJoeToken
 NO FIELDS

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoePerAvax
Finding type for rJoePerAvax...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: rJoePerAvax Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: depositAVAX
Function name: depositAVAX
Function Visibility (test): external
-100
Add new
clearning node...
clearing ir...?
issuer_2(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
has variable
clearing ir...?
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_5', 'rJoe_1', 'rJoe_4', 'rJoe_0', 'rJoe_6'])
has variable
clearing ir...?
WAVAX_3(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
has variable
clearing ir...?
maxAllocation_2(uint256) := ϕ(['maxAllocation_4', 'maxAllocation_0', 'maxAllocation_1'])
has variable
clearing ir...?
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
has variable
clearing ir...?
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
has variable
typecheckig node...
issuer_2(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: depositAVAX
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_5', 'rJoe_1', 'rJoe_4', 'rJoe_0', 'rJoe_6'])
Function name: depositAVAX
Phi
[i]Type for rJoe

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
done.
WAVAX_3(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: depositAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
maxAllocation_2(uint256) := ϕ(['maxAllocation_4', 'maxAllocation_0', 'maxAllocation_1'])
Function name: depositAVAX
Phi
[i]Type for maxAllocation

Name: maxAllocation Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: depositAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
Function name: depositAVAX
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
Internal call...
isStopped
False
Function: isStopped
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: isStopped
Function Visibility: internal
clearning node...
clearing ir...?
stopped_2(bool) := ϕ(['stopped_1', 'stopped_0'])
has variable
typecheckig node...
stopped_2(bool) := ϕ(['stopped_1', 'stopped_0'])
Function name: isStopped
Phi
[i]Type for stopped

Name: stopped Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION _stopped_1
typecheckig node...
CONDITION _stopped_1
Condition...
Conidtion: 
_stopped_1
_stopped_1
clearning node...
clearing ir...?
TMP_240 = ! stopped_2 
clearing ir...?
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,LaunchEvent: stopped)
typecheckig node...
TMP_240 = ! stopped_2 
[i]Type for TMP_240

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,LaunchEvent: stopped)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_239(None) = SOLIDITY_CALL require(bool,string)(stopped_2,LaunchEvent: is still running)
typecheckig node...
TMP_239(None) = SOLIDITY_CALL require(bool,string)(stopped_2,LaunchEvent: is still running)
[i]Type for TMP_239

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "isStopped":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: isStopped
done.
clearning node...
clearing ir...?
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
typecheckig node...
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: depositAVAX
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_22

Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
Internal call...
atPhase
REF_22
Function: atPhase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[], [], 'u', None, [], -1]
added
xyz
Function name: atPhase
Function Visibility: internal
clearning node...
clearing ir...?
_phase_1(LaunchEvent.Phase) := ϕ(['REF_22', 'REF_38', 'REF_9'])
has variable
[i] _phase cleared
typecheckig node...
_phase_1(LaunchEvent.Phase) := ϕ(['REF_22', 'REF_38', 'REF_9'])
Function name: atPhase
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
typecheckig node...
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
Internal call...
_atPhase
_phase
Function: _atPhase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[], [], 'u', None, [], -1]
added
xyz
Function name: _atPhase
Function Visibility: internal
clearning node...
clearing ir...?
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
has variable
[i] _phase cleared
typecheckig node...
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Function name: _atPhase
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
has variable
clearing ir...?
TMP_205(bool) = _phase_1 == REF_64
has variable
[i] TMP_205 cleared
clearing ir...?
CONDITION TMP_205
typecheckig node...
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
Function name: _atPhase
MEMBER
Phase
Phase
NotStarted
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(bool) = _phase_1 == REF_64
Function name: _atPhase
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_205
Condition...
Conidtion: 
TMP_205
TMP_205
clearning node...
clearing ir...?
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
TMP_209(bool) = _phase_1 == REF_66
has variable
[i] TMP_209 cleared
clearing ir...?
CONDITION TMP_209
typecheckig node...
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: _atPhase
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_209(bool) = _phase_1 == REF_66
Function name: _atPhase
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_209
Condition...
Conidtion: 
TMP_209
TMP_209
clearning node...
clearing ir...?
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
has variable
clearing ir...?
TMP_213(bool) = _phase_1 == REF_68
has variable
[i] TMP_213 cleared
clearing ir...?
CONDITION TMP_213
typecheckig node...
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: _atPhase
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_213(bool) = _phase_1 == REF_68
Function name: _atPhase
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_213
Condition...
Conidtion: 
TMP_213
TMP_213
clearning node...
clearing ir...?
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_210 cleared
clearing ir...?
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
TMP_211(bool) = TMP_210 == REF_67
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
typecheckig node...
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: _atPhase
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = TMP_210 == REF_67
Function name: _atPhase
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_206 cleared
clearing ir...?
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
has variable
clearing ir...?
TMP_207(bool) = TMP_206 == REF_65
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
typecheckig node...
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
Function name: _atPhase
MEMBER
Phase
Phase
NotStarted
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_207(bool) = TMP_206 == REF_65
Function name: _atPhase
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
has variable
clearing ir...?
TMP_217(bool) = _phase_1 == REF_70
has variable
[i] TMP_217 cleared
clearing ir...?
CONDITION TMP_217
typecheckig node...
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
Function name: _atPhase
MEMBER
Phase
Phase
PhaseThree
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_217(bool) = _phase_1 == REF_70
Function name: _atPhase
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_217
Condition...
Conidtion: 
TMP_217
TMP_217
clearning node...
clearing ir...?
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_214 cleared
clearing ir...?
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
has variable
clearing ir...?
TMP_215(bool) = TMP_214 == REF_69
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
typecheckig node...
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: _atPhase
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_215(bool) = TMP_214 == REF_69
Function name: _atPhase
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
typecheckig node...
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_218 cleared
clearing ir...?
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
has variable
clearing ir...?
TMP_219(bool) = TMP_218 == REF_71
has variable
[i] TMP_219 cleared
clearing ir...?
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
typecheckig node...
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
Function name: _atPhase
MEMBER
Phase
Phase
PhaseThree
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_219(bool) = TMP_218 == REF_71
Function name: _atPhase
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_atPhase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _atPhase
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "atPhase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: atPhase
done.
clearning node...
clearing ir...?
TMP_55(bool) = msg.sender != issuer_4
has variable
[i] TMP_55 cleared
clearing ir...?
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
typecheckig node...
TMP_55(bool) = msg.sender != issuer_4
Function name: depositAVAX
[i]Type for TMP_55

Name: TMP_55 Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_57(bool) = msg.value > 0
has variable
[i] TMP_57 cleared
clearing ir...?
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
typecheckig node...
TMP_57(bool) = msg.value > 0
Function name: depositAVAX
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
not variable
not variable
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_57 Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_57(bool) = msg.value > 0
XXXXX
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
has variable
clearing ir...?
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
has variable
[i] user cleared
typecheckig node...
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
Function name: depositAVAX
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_14

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
Function name: depositAVAX
asgn

Name: REF_14 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
has variable
clearing ir...?
TMP_59(uint256) = REF_15 (c)+ msg.value
has variable
[i] TMP_59 cleared
clearing ir...?
newAllocation_1(uint256) := TMP_59(uint256)
has variable
[i] newAllocation cleared
typecheckig node...
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: depositAVAX
MEMBER
user
balance
depositAVAX
user Fields:
^^^
[i]Type for REF_15

Name: user.balance Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_59(uint256) = REF_15 (c)+ msg.value
Function name: depositAVAX

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
not variable
[i]Type for TMP_59

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_59(uint256) = REF_15 (c)+ msg.value
XXXXX
newAllocation_1(uint256) := TMP_59(uint256)
Function name: depositAVAX
asgn

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newAllocation Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newAllocation

Name: newAllocation Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
newAllocation_1(uint256) := TMP_59(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
has variable
[i] TMP_60 cleared
clearing ir...?
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
typecheckig node...
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
Function name: depositAVAX
testing lt...
lnorm: u rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: maxAllocation Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: TMP_60 Function: depositAVAX
Num: 
Den: 
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: depositAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
XXXXX
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
has variable
clearing ir...?
TMP_62(bool) = newAllocation_1 > REF_16
has variable
[i] TMP_62 cleared
clearing ir...?
CONDITION TMP_62
typecheckig node...
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
Function name: depositAVAX
MEMBER
user
allocation
depositAVAX
user Fields:
balance
^^^
[i]Type for REF_16

Name: user.allocation Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_62(bool) = newAllocation_1 > REF_16
Function name: depositAVAX
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: user.allocation Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
False

Name: user.allocation Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_62 Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_62

Name: TMP_62 Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_62(bool) = newAllocation_1 > REF_16
XXXXX
CONDITION TMP_62
Condition...
Conidtion: 
TMP_62
TMP_62
clearning node...
clearing ir...?
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])", "user_2 (-> ['getUserInfo'])"])
has variable
[i] user cleared
clearing ir...?
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_0', 'rJoeNeeded_1'])
has variable
[i] rJoeNeeded cleared
typecheckig node...
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])", "user_2 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_0', 'rJoeNeeded_1'])
Function name: depositAVAX
Phi
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
has variable
clearing ir...?
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
has variable
[i] user cleared
clearing ir...?
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
has variable
clearing ir...?
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
has variable
typecheckig node...
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
Function name: depositAVAX
MEMBER
user
balance
depositAVAX
user Fields:
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint256
uint256
Final Type: uint256
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_19

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
done.
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Function name: depositAVAX
asgn

Name: newAllocation Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
XXXXX
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
has variable
clearing ir...?
TMP_63(uint256) = newAllocation_1 (c)- REF_17
has variable
[i] TMP_63 cleared
clearing ir...?
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
has variable
[i] TMP_64 cleared
clearing ir...?
rJoeNeeded_1(uint256) := TMP_64(uint256)
has variable
[i] rJoeNeeded cleared
typecheckig node...
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
Function name: depositAVAX
MEMBER
user
allocation
depositAVAX
user Fields:
allocation
balance
^^^

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_63(uint256) = newAllocation_1 (c)- REF_17
Function name: depositAVAX
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: newAllocation Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_63 Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_63

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_63(uint256) = newAllocation_1 (c)- REF_17
XXXXX
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
Function name: depositAVAX
Internal call...
getRJoeAmount
TMP_63
Function: getRJoeAmount
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: getRJoeAmount
Function Visibility: public
clearning node...
clearing ir...?
_avaxAmount_1(uint256) := ϕ(['TMP_63'])
has variable
[i] _avaxAmount cleared
clearing ir...?
rJoePerAvax_2(uint256) := ϕ(['rJoePerAvax_0', 'rJoePerAvax_1'])
has variable
typecheckig node...
_avaxAmount_1(uint256) := ϕ(['TMP_63'])
Function name: getRJoeAmount
Phi
[i]Type for _avaxAmount

Name: _avaxAmount Function: getRJoeAmount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rJoePerAvax_2(uint256) := ϕ(['rJoePerAvax_0', 'rJoePerAvax_1'])
Function name: getRJoeAmount
Phi
[i]Type for rJoePerAvax

Name: rJoePerAvax Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_199(uint256) = _avaxAmount_1 (c)* rJoePerAvax_2
has variable
[i] TMP_199 cleared
clearing ir...?
RETURN TMP_199
typecheckig node...
TMP_199(uint256) = _avaxAmount_1 (c)* rJoePerAvax_2
Function name: getRJoeAmount
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: rJoePerAvax Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_199 Function: getRJoeAmount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_199

Name: TMP_199 Function: getRJoeAmount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_199
RETURN

Name: TMP_199 Function: getRJoeAmount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getRJoeAmount":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: getRJoeAmount

Name: TMP_199 Function: getRJoeAmount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_64

Name: TMP_64 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rJoeNeeded_1(uint256) := TMP_64(uint256)
Function name: depositAVAX
asgn

Name: TMP_64 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: rJoeNeeded Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
has variable
typecheckig node...
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
Function name: depositAVAX

Name: wavaxReserve Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 6 rnorm: u
not variable

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
XXXXX
clearning node...
clearing ir...?
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
has variable
clearing ir...?
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
has variable
[i] user cleared
clearing ir...?
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
has variable
clearing ir...?
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
has variable
typecheckig node...
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
Function name: depositAVAX
MEMBER
user
allocation
depositAVAX
user Fields:
allocation
balance
^^^

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_18

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: allocation, balance
Finance Type: undef
done.
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Function name: depositAVAX
asgn

Name: newAllocation Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
XXXXX
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_65(bool) = rJoeNeeded_2 > 0
has variable
[i] TMP_65 cleared
clearing ir...?
CONDITION TMP_65
typecheckig node...
TMP_65(bool) = rJoeNeeded_2 > 0
Function name: depositAVAX
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_65

Name: TMP_65 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_65
Condition...
Conidtion: 
TMP_65
TMP_65
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
clearing ir...?
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_5', 'rJoe_6', 'rJoe_1'])
has variable
clearing ir...?
WAVAX_7(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_6', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
High Call: burnFrom
func name:burnFrom
other func name:burnFrom
done.
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_5', 'rJoe_6', 'rJoe_1'])
Function name: depositAVAX
Phi
[i]Type for rJoe

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
done.
WAVAX_7(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_6', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: depositAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
clearing ir...?
WAVAX_8(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_7', 'WAVAX_29', 'WAVAX_24'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
High Call: deposit
func name:deposit
other func name:deposit
done.
WAVAX_8(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_7', 'WAVAX_29', 'WAVAX_24'])
Function name: depositAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
Emit UserParticipated(msg.sender,msg.value,rJoeNeeded_2)
typecheckig node...
Emit UserParticipated(msg.sender,msg.value,rJoeNeeded_2)
WORKLIST iteration 0 for function call "depositAVAX":
 New undefined nodes- 9
 Old undefined nodes- 0
typecheckig node...
issuer_2(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: depositAVAX
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_5', 'rJoe_1', 'rJoe_4', 'rJoe_0', 'rJoe_6'])
Function name: depositAVAX
Phi
[i]Type for rJoe

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
done.
WAVAX_3(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: depositAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
maxAllocation_2(uint256) := ϕ(['maxAllocation_4', 'maxAllocation_0', 'maxAllocation_1'])
Function name: depositAVAX
Phi
[i]Type for maxAllocation

Name: maxAllocation Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: depositAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
Function name: depositAVAX
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
Internal call...
isStopped
False
Function: isStopped
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
typecheckig node...
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: depositAVAX
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_22

Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
Internal call...
atPhase
REF_22
Function: atPhase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[], [], 'u', None, [], -1]
added
xyz
Function name: atPhase
Function Visibility: internal
clearning node...
clearing ir...?
_phase_1(LaunchEvent.Phase) := ϕ(['REF_22', 'REF_38', 'REF_9'])
has variable
[i] _phase cleared
typecheckig node...
_phase_1(LaunchEvent.Phase) := ϕ(['REF_22', 'REF_38', 'REF_9'])
Function name: atPhase
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
typecheckig node...
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
Internal call...
_atPhase
_phase
Function: _atPhase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[], [], 'u', None, [], -1]
added
xyz
Function name: _atPhase
Function Visibility: internal
clearning node...
clearing ir...?
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
has variable
[i] _phase cleared
typecheckig node...
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Function name: _atPhase
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
has variable
clearing ir...?
TMP_205(bool) = _phase_1 == REF_64
has variable
[i] TMP_205 cleared
clearing ir...?
CONDITION TMP_205
typecheckig node...
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
Function name: _atPhase
MEMBER
Phase
Phase
NotStarted
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(bool) = _phase_1 == REF_64
Function name: _atPhase
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_205
Condition...
Conidtion: 
TMP_205
TMP_205
clearning node...
clearing ir...?
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
TMP_209(bool) = _phase_1 == REF_66
has variable
[i] TMP_209 cleared
clearing ir...?
CONDITION TMP_209
typecheckig node...
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: _atPhase
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_209(bool) = _phase_1 == REF_66
Function name: _atPhase
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_209
Condition...
Conidtion: 
TMP_209
TMP_209
clearning node...
clearing ir...?
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
has variable
clearing ir...?
TMP_213(bool) = _phase_1 == REF_68
has variable
[i] TMP_213 cleared
clearing ir...?
CONDITION TMP_213
typecheckig node...
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: _atPhase
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_213(bool) = _phase_1 == REF_68
Function name: _atPhase
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_213
Condition...
Conidtion: 
TMP_213
TMP_213
clearning node...
clearing ir...?
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_210 cleared
clearing ir...?
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
TMP_211(bool) = TMP_210 == REF_67
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
typecheckig node...
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: _atPhase
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = TMP_210 == REF_67
Function name: _atPhase
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_206 cleared
clearing ir...?
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
has variable
clearing ir...?
TMP_207(bool) = TMP_206 == REF_65
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
typecheckig node...
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
Function name: _atPhase
MEMBER
Phase
Phase
NotStarted
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_207(bool) = TMP_206 == REF_65
Function name: _atPhase
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
has variable
clearing ir...?
TMP_217(bool) = _phase_1 == REF_70
has variable
[i] TMP_217 cleared
clearing ir...?
CONDITION TMP_217
typecheckig node...
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
Function name: _atPhase
MEMBER
Phase
Phase
PhaseThree
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_217(bool) = _phase_1 == REF_70
Function name: _atPhase
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_217
Condition...
Conidtion: 
TMP_217
TMP_217
clearning node...
clearing ir...?
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_214 cleared
clearing ir...?
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
has variable
clearing ir...?
TMP_215(bool) = TMP_214 == REF_69
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
typecheckig node...
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: _atPhase
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_215(bool) = TMP_214 == REF_69
Function name: _atPhase
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
typecheckig node...
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_218 cleared
clearing ir...?
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
has variable
clearing ir...?
TMP_219(bool) = TMP_218 == REF_71
has variable
[i] TMP_219 cleared
clearing ir...?
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
typecheckig node...
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
Function name: _atPhase
MEMBER
Phase
Phase
PhaseThree
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_219(bool) = TMP_218 == REF_71
Function name: _atPhase
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_atPhase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _atPhase
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "atPhase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: atPhase
done.
typecheckig node...
TMP_55(bool) = msg.sender != issuer_4
Function name: depositAVAX
[i]Type for TMP_55

Name: TMP_55 Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_57(bool) = msg.value > 0
Function name: depositAVAX
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
not variable
not variable
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_57 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_57(bool) = msg.value > 0
XXXXX
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
Function name: depositAVAX
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_14

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
Function name: depositAVAX
asgn

Name: REF_14 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: allocation, balance
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: allocation, balance
Finance Type: undef
done.
typecheckig node...
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: depositAVAX
MEMBER
user
balance
depositAVAX
user Fields:
allocation
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_15

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_59(uint256) = REF_15 (c)+ msg.value
Function name: depositAVAX

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
not variable

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_59(uint256) = REF_15 (c)+ msg.value
XXXXX
newAllocation_1(uint256) := TMP_59(uint256)
Function name: depositAVAX
asgn

Name: TMP_59 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newAllocation Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newAllocation

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
Function name: depositAVAX
testing lt...
lnorm: u rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[W] Initializing defined variable to constant
[i]Type for TMP_60

Name: TMP_60 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
Function name: depositAVAX
MEMBER
user
allocation
depositAVAX
user Fields:
allocation
balance
^^^

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_16

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_62(bool) = newAllocation_1 > REF_16
Function name: depositAVAX
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_62

Name: TMP_62 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_62
Condition...
Conidtion: 
TMP_62
TMP_62
typecheckig node...
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])", "user_2 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: allocation, balance
Finance Type: undef
done.
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_0', 'rJoeNeeded_1'])
Function name: depositAVAX
Phi
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
Function name: depositAVAX
MEMBER
user
balance
depositAVAX
user Fields:
allocation
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_19

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: allocation, balance
Finance Type: undef
done.
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Function name: depositAVAX
asgn

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
Function name: depositAVAX
MEMBER
user
allocation
depositAVAX
user Fields:
allocation
balance
^^^

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_63(uint256) = newAllocation_1 (c)- REF_17
Function name: depositAVAX
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_63

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
Function name: depositAVAX
Internal call...
getRJoeAmount
TMP_63
Function: getRJoeAmount
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_18 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_64 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_64

Name: TMP_64 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rJoeNeeded_1(uint256) := TMP_64(uint256)
Function name: depositAVAX
asgn

Name: TMP_64 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: rJoeNeeded Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
Function name: depositAVAX

Name: wavaxReserve Function: depositAVAX
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
not variable

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: depositAVAX
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
XXXXX
typecheckig node...
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
Function name: depositAVAX
MEMBER
user
allocation
depositAVAX
user Fields:
allocation
balance
^^^

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_18

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: allocation, balance
Finance Type: undef
done.
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Function name: depositAVAX
asgn

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_65(bool) = rJoeNeeded_2 > 0
Function name: depositAVAX
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_65

Name: TMP_65 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_65
Condition...
Conidtion: 
TMP_65
TMP_65
typecheckig node...
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
High Call: burnFrom
func name:burnFrom
other func name:burnFrom
done.
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_5', 'rJoe_6', 'rJoe_1'])
Function name: depositAVAX
Phi
[i]Type for rJoe

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
done.
WAVAX_7(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_6', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: depositAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
High Call: deposit
func name:deposit
other func name:deposit
done.
WAVAX_8(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_7', 'WAVAX_29', 'WAVAX_24'])
Function name: depositAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
typecheckig node...
Emit UserParticipated(msg.sender,msg.value,rJoeNeeded_2)
WORKLIST iteration 1 for function call "depositAVAX":
 New undefined nodes- 4
 Old undefined nodes- 9
typecheckig node...
issuer_2(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: depositAVAX
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_5', 'rJoe_1', 'rJoe_4', 'rJoe_0', 'rJoe_6'])
Function name: depositAVAX
Phi
[i]Type for rJoe

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
done.
WAVAX_3(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: depositAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
maxAllocation_2(uint256) := ϕ(['maxAllocation_4', 'maxAllocation_0', 'maxAllocation_1'])
Function name: depositAVAX
Phi
[i]Type for maxAllocation

Name: maxAllocation Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: depositAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
Function name: depositAVAX
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
Internal call...
isStopped
False
Function: isStopped
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
typecheckig node...
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: depositAVAX
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_22

Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
Internal call...
atPhase
REF_22
Function: atPhase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[], [], 'u', None, [], -1]
added
xyz
Function name: atPhase
Function Visibility: internal
clearning node...
clearing ir...?
_phase_1(LaunchEvent.Phase) := ϕ(['REF_22', 'REF_38', 'REF_9'])
has variable
[i] _phase cleared
typecheckig node...
_phase_1(LaunchEvent.Phase) := ϕ(['REF_22', 'REF_38', 'REF_9'])
Function name: atPhase
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
typecheckig node...
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
Internal call...
_atPhase
_phase
Function: _atPhase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[], [], 'u', None, [], -1]
added
xyz
Function name: _atPhase
Function Visibility: internal
clearning node...
clearing ir...?
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
has variable
[i] _phase cleared
typecheckig node...
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Function name: _atPhase
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
has variable
clearing ir...?
TMP_205(bool) = _phase_1 == REF_64
has variable
[i] TMP_205 cleared
clearing ir...?
CONDITION TMP_205
typecheckig node...
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
Function name: _atPhase
MEMBER
Phase
Phase
NotStarted
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(bool) = _phase_1 == REF_64
Function name: _atPhase
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_205
Condition...
Conidtion: 
TMP_205
TMP_205
clearning node...
clearing ir...?
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
TMP_209(bool) = _phase_1 == REF_66
has variable
[i] TMP_209 cleared
clearing ir...?
CONDITION TMP_209
typecheckig node...
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: _atPhase
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_209(bool) = _phase_1 == REF_66
Function name: _atPhase
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_209
Condition...
Conidtion: 
TMP_209
TMP_209
clearning node...
clearing ir...?
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
has variable
clearing ir...?
TMP_213(bool) = _phase_1 == REF_68
has variable
[i] TMP_213 cleared
clearing ir...?
CONDITION TMP_213
typecheckig node...
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: _atPhase
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_213(bool) = _phase_1 == REF_68
Function name: _atPhase
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_213
Condition...
Conidtion: 
TMP_213
TMP_213
clearning node...
clearing ir...?
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_210 cleared
clearing ir...?
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
TMP_211(bool) = TMP_210 == REF_67
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
typecheckig node...
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: _atPhase
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = TMP_210 == REF_67
Function name: _atPhase
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_206 cleared
clearing ir...?
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
has variable
clearing ir...?
TMP_207(bool) = TMP_206 == REF_65
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
typecheckig node...
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
Function name: _atPhase
MEMBER
Phase
Phase
NotStarted
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_207(bool) = TMP_206 == REF_65
Function name: _atPhase
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
has variable
clearing ir...?
TMP_217(bool) = _phase_1 == REF_70
has variable
[i] TMP_217 cleared
clearing ir...?
CONDITION TMP_217
typecheckig node...
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
Function name: _atPhase
MEMBER
Phase
Phase
PhaseThree
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_217(bool) = _phase_1 == REF_70
Function name: _atPhase
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_217
Condition...
Conidtion: 
TMP_217
TMP_217
clearning node...
clearing ir...?
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_214 cleared
clearing ir...?
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
has variable
clearing ir...?
TMP_215(bool) = TMP_214 == REF_69
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
typecheckig node...
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: _atPhase
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_215(bool) = TMP_214 == REF_69
Function name: _atPhase
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
typecheckig node...
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_218 cleared
clearing ir...?
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
has variable
clearing ir...?
TMP_219(bool) = TMP_218 == REF_71
has variable
[i] TMP_219 cleared
clearing ir...?
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
typecheckig node...
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
Function name: _atPhase
MEMBER
Phase
Phase
PhaseThree
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_219(bool) = TMP_218 == REF_71
Function name: _atPhase
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_atPhase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _atPhase
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "atPhase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: atPhase
done.
typecheckig node...
TMP_55(bool) = msg.sender != issuer_4
Function name: depositAVAX
[i]Type for TMP_55

Name: TMP_55 Function: depositAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_57(bool) = msg.value > 0
Function name: depositAVAX
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
not variable
not variable
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_57 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_57(bool) = msg.value > 0
XXXXX
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
Function name: depositAVAX
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_14

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
Function name: depositAVAX
asgn

Name: REF_14 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: allocation, balance
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: allocation, balance
Finance Type: undef
done.
typecheckig node...
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: depositAVAX
MEMBER
user
balance
depositAVAX
user Fields:
allocation
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_15

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_59(uint256) = REF_15 (c)+ msg.value
Function name: depositAVAX

Name: TMP_59 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
not variable

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_59 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_59(uint256) = REF_15 (c)+ msg.value
XXXXX
newAllocation_1(uint256) := TMP_59(uint256)
Function name: depositAVAX
asgn

Name: TMP_59 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newAllocation

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
Function name: depositAVAX
testing lt...
lnorm: u rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_60

Name: TMP_60 Function: depositAVAX
Num: -1
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
Function name: depositAVAX
MEMBER
user
allocation
depositAVAX
user Fields:
allocation
balance
^^^

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_16

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_62(bool) = newAllocation_1 > REF_16
Function name: depositAVAX
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_62

Name: TMP_62 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_62
Condition...
Conidtion: 
TMP_62
TMP_62
typecheckig node...
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])", "user_2 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: allocation, balance
Finance Type: undef
done.
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_0', 'rJoeNeeded_1'])
Function name: depositAVAX
Phi
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
Function name: depositAVAX
MEMBER
user
balance
depositAVAX
user Fields:
allocation
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_19

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: allocation, balance
Finance Type: undef
done.
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Function name: depositAVAX
asgn

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
Function name: depositAVAX
MEMBER
user
allocation
depositAVAX
user Fields:
allocation
balance
^^^

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_63(uint256) = newAllocation_1 (c)- REF_17
Function name: depositAVAX
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_63

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
Function name: depositAVAX
Internal call...
getRJoeAmount
TMP_63
Function: getRJoeAmount
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_18 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_64 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_64

Name: TMP_64 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rJoeNeeded_1(uint256) := TMP_64(uint256)
Function name: depositAVAX
asgn

Name: TMP_64 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: rJoeNeeded Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
Function name: depositAVAX

Name: wavaxReserve Function: depositAVAX
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
not variable

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: depositAVAX
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
XXXXX
typecheckig node...
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
Function name: depositAVAX
MEMBER
user
allocation
depositAVAX
user Fields:
allocation
balance
^^^

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_18

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: allocation, balance
Finance Type: undef
done.
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Function name: depositAVAX
asgn

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: allocation Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: depositAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_65(bool) = rJoeNeeded_2 > 0
Function name: depositAVAX
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_65

Name: TMP_65 Function: depositAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_65
Condition...
Conidtion: 
TMP_65
TMP_65
typecheckig node...
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
High Call: burnFrom
func name:burnFrom
other func name:burnFrom
done.
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_5', 'rJoe_6', 'rJoe_1'])
Function name: depositAVAX
Phi
[i]Type for rJoe

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
done.
WAVAX_7(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_6', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: depositAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
High Call: deposit
func name:deposit
other func name:deposit
done.
WAVAX_8(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_7', 'WAVAX_29', 'WAVAX_24'])
Function name: depositAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
typecheckig node...
Emit UserParticipated(msg.sender,msg.value,rJoeNeeded_2)
WORKLIST iteration 2 for function call "depositAVAX":
 New undefined nodes- 4
 Old undefined nodes- 4
Saving return values for: depositAVAX
State_var: WAVAX
Finding type for WAVAX...
IWAVAX
Check copy_toekn_tuple
(-1, -1, 0, 'WAVAX')
----
Type: IWAVAX
IWAVAX
Final Type: IWAVAX
 NO FIELDS

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rocketJoeFactory
Finding type for rocketJoeFactory...
IRocketJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'RJFACTORY')
----
Type: IRocketJoeFactory
IRocketJoeFactory
Final Type: IRocketJoeFactory
 NO FIELDS

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token
Finding type for token...
IERC20Metadata
Check copy_toekn_tuple
(-1, -1, 0, 'TOKEN')
----
Type: IERC20Metadata
IERC20Metadata
Final Type: IERC20Metadata
 NO FIELDS

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesBalance
Finding type for tokenIncentivesBalance...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenReserve
Finding type for tokenReserve...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxReserve
Finding type for wavaxReserve...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: getUserInfo
Finding type for getUserInfo...
mapping(address => LaunchEvent.UserInfo)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => LaunchEvent.UserInfo)
mapping(address => LaunchEvent.UserInfo)
LaunchEvent.UserInfo
Final Type: LaunchEvent.UserInfo
global
getUserInfo
allocation
global
getUserInfo
balance
global
getUserInfo
hasWithdrawnPair
global
getUserInfo
hasWithdrawnIncentives
FIELDS:
getUserInfo Fields:
^^^

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuer
Finding type for issuer...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ISSUER')
----
Type: address
address
Final Type: address

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pair
Finding type for pair...
IJoePair
Check copy_toekn_tuple
(-1, -1, 0, 'JOEPAIR')
----
Type: IJoePair
IJoePair
Final Type: IJoePair
 NO FIELDS

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentiveIssuerRefund
Finding type for tokenIncentiveIssuerRefund...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesForUsers
Finding type for tokenIncentivesForUsers...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxAllocated
Finding type for wavaxAllocated...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: initialized
Finding type for initialized...
bool
SKIP bool
State_var: PHASE_ONE_DURATION
Finding type for PHASE_ONE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_TWO_DURATION
Finding type for PHASE_TWO_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: auctionStart
Finding type for auctionStart...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuerTimelock
Finding type for issuerTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: issuerTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: userTimelock
Finding type for userTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: userTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpSupply
Finding type for lpSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_ONE_NO_FEE_DURATION
Finding type for PHASE_ONE_NO_FEE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: fixedWithdrawPenalty
Finding type for fixedWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: fixedWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: maxWithdrawPenalty
Finding type for maxWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: factory
Finding type for factory...
IJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IJoeFactory
IJoeFactory
Final Type: IJoeFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: floorPrice
Finding type for floorPrice...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
IJoeRouter02
Check copy_toekn_tuple
(-1, -1, 0, 'ROUTER')
----
Type: IJoeRouter02
IJoeRouter02
Final Type: IJoeRouter02
 NO FIELDS

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: stopped
Finding type for stopped...
bool
SKIP bool
State_var: maxAllocation
Finding type for maxAllocation...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxAllocation Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoe
Finding type for rJoe...
IRocketJoeToken
Check copy_toekn_tuple
(-1, -1, 0, 'RJTOKEN')
----
Type: IRocketJoeToken
IRocketJoeToken
Final Type: IRocketJoeToken
 NO FIELDS

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoePerAvax
Finding type for rJoePerAvax...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: rJoePerAvax Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: withdrawAVAX
Function name: withdrawAVAX
Function Visibility (test): public
_amount
Finding type for _amount...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
WAVAX_9(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
has variable
clearing ir...?
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_0', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
has variable
clearing ir...?
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
has variable
clearing ir...?
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
has variable
typecheckig node...
WAVAX_9(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: withdrawAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_0', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Function name: withdrawAVAX
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
done.
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: withdrawAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
Function name: withdrawAVAX
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
Internal call...
isStopped
False
Function: isStopped
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
clearning node...
clearing ir...?
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_71 cleared
clearing ir...?
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
has variable
[i] _currentPhase cleared
typecheckig node...
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: withdrawAVAX
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_71

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
Function name: withdrawAVAX
asgn

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _currentPhase

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
XXXXX
clearning node...
clearing ir...?
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
TMP_72(bool) = _currentPhase_1 == REF_23
has variable
[i] TMP_72 cleared
clearing ir...?
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
has variable
clearing ir...?
TMP_73(bool) = _currentPhase_1 == REF_24
has variable
[i] TMP_73 cleared
clearing ir...?
TMP_74(bool) = TMP_72 || TMP_73
has variable
[i] TMP_74 cleared
clearing ir...?
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
typecheckig node...
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: withdrawAVAX
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_23

Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_72(bool) = _currentPhase_1 == REF_23
Function name: withdrawAVAX
[i]Type for TMP_72

Name: TMP_72 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: withdrawAVAX
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_24

Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73(bool) = _currentPhase_1 == REF_24
Function name: withdrawAVAX
[i]Type for TMP_73

Name: TMP_73 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_74(bool) = TMP_72 || TMP_73
Function name: withdrawAVAX
[i]Type for TMP_74

Name: TMP_74 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_76(bool) = _amount_1 > 0
has variable
[i] TMP_76 cleared
clearing ir...?
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
typecheckig node...
TMP_76(bool) = _amount_1 > 0
Function name: withdrawAVAX
testing gt...
val: 0
val: 0
lnorm: 6 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_76

Name: TMP_76 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
has variable
clearing ir...?
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
has variable
[i] user cleared
typecheckig node...
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
Function name: withdrawAVAX
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_25

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
Function name: withdrawAVAX
asgn

Name: REF_25 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
has variable
clearing ir...?
TMP_78(bool) = REF_26 >= _amount_1
has variable
[i] TMP_78 cleared
clearing ir...?
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
typecheckig node...
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: withdrawAVAX
MEMBER
user
balance
withdrawAVAX
user Fields:
^^^
[i]Type for REF_26

Name: user.balance Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(bool) = REF_26 >= _amount_1
Function name: withdrawAVAX
testing gt...
lnorm: u rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: TMP_78 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_78

Name: TMP_78 Function: withdrawAVAX
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_78(bool) = REF_26 >= _amount_1
XXXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
has variable
clearing ir...?
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
has variable
[i] user cleared
clearing ir...?
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
has variable
clearing ir...?
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
has variable
typecheckig node...
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: withdrawAVAX
MEMBER
user
balance
withdrawAVAX
user Fields:
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_27

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: withdrawAVAX
Phi
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
done.
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
Function name: withdrawAVAX
lnorm: u rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_27

Name: REF_27 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: withdrawAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
has variable
[i] TMP_80 cleared
clearing ir...?
TMP_81(uint256) = _amount_1 (c)* TMP_80
has variable
[i] TMP_81 cleared
clearing ir...?
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
has variable
[i] TMP_82 cleared
clearing ir...?
feeAmount_1(uint256) := TMP_82(uint256)
has variable
[i] feeAmount cleared
typecheckig node...
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
Function name: withdrawAVAX
Internal call...
getPenalty
Function: getPenalty
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: getPenalty
Function Visibility: public
clearning node...
clearing ir...?
auctionStart_3(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
has variable
clearing ir...?
PHASE_ONE_DURATION_3(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
has variable
clearing ir...?
PHASE_ONE_NO_FEE_DURATION_2(uint256) := ϕ(['PHASE_ONE_NO_FEE_DURATION_1', 'PHASE_ONE_NO_FEE_DURATION_0'])
has variable
clearing ir...?
maxWithdrawPenalty_2(uint256) := ϕ(['maxWithdrawPenalty_0', 'maxWithdrawPenalty_1'])
has variable
clearing ir...?
fixedWithdrawPenalty_2(uint256) := ϕ(['fixedWithdrawPenalty_1', 'fixedWithdrawPenalty_0'])
has variable
typecheckig node...
auctionStart_3(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
Function name: getPenalty
Phi
[i]Type for auctionStart

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
PHASE_ONE_DURATION_3(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Function name: getPenalty
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
PHASE_ONE_NO_FEE_DURATION_2(uint256) := ϕ(['PHASE_ONE_NO_FEE_DURATION_1', 'PHASE_ONE_NO_FEE_DURATION_0'])
Function name: getPenalty
Phi
[i]Type for PHASE_ONE_NO_FEE_DURATION

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
maxWithdrawPenalty_2(uint256) := ϕ(['maxWithdrawPenalty_0', 'maxWithdrawPenalty_1'])
Function name: getPenalty
Phi
[i]Type for maxWithdrawPenalty

Name: maxWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
fixedWithdrawPenalty_2(uint256) := ϕ(['fixedWithdrawPenalty_1', 'fixedWithdrawPenalty_0'])
Function name: getPenalty
Phi
[i]Type for fixedWithdrawPenalty

Name: fixedWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_189(uint256) = block.timestamp (c)- auctionStart_3
has variable
[i] TMP_189 cleared
clearing ir...?
timeElapsed_1(uint256) := TMP_189(uint256)
has variable
[i] timeElapsed cleared
typecheckig node...
TMP_189(uint256) = block.timestamp (c)- auctionStart_3
Function name: getPenalty
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_24 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_189 Function: getPenalty
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_189

Name: TMP_189 Function: getPenalty
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
timeElapsed_1(uint256) := TMP_189(uint256)
Function name: getPenalty
asgn

Name: TMP_189 Function: getPenalty
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: timeElapsed Function: getPenalty
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for timeElapsed

Name: timeElapsed Function: getPenalty
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_190(bool) = timeElapsed_1 < PHASE_ONE_NO_FEE_DURATION_2
has variable
[i] TMP_190 cleared
clearing ir...?
CONDITION TMP_190
typecheckig node...
TMP_190(bool) = timeElapsed_1 < PHASE_ONE_NO_FEE_DURATION_2
Function name: getPenalty
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_190

Name: TMP_190 Function: getPenalty
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_190
Condition...
Conidtion: 
TMP_190
TMP_190
clearning node...
clearing ir...?
TMP_192(bool) = timeElapsed_1 < PHASE_ONE_DURATION_3
has variable
[i] TMP_192 cleared
clearing ir...?
CONDITION TMP_192
typecheckig node...
TMP_192(bool) = timeElapsed_1 < PHASE_ONE_DURATION_3
Function name: getPenalty
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_192

Name: TMP_192 Function: getPenalty
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_192
Condition...
Conidtion: 
TMP_192
TMP_192
clearning node...
clearing ir...?
TMP_193(uint256) = timeElapsed_1 (c)- PHASE_ONE_NO_FEE_DURATION_2
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(uint256) = TMP_193 (c)* maxWithdrawPenalty_2
has variable
[i] TMP_194 cleared
clearing ir...?
TMP_195(uint256) = PHASE_ONE_DURATION_3 (c)- PHASE_ONE_NO_FEE_DURATION_2
has variable
[i] TMP_195 cleared
clearing ir...?
TMP_196 = CONVERT TMP_195 to uint256
has variable
[i] TMP_196 cleared
clearing ir...?
TMP_197(uint256) = TMP_194 (c)/ TMP_196
has variable
[i] TMP_197 cleared
clearing ir...?
RETURN TMP_197
typecheckig node...
TMP_193(uint256) = timeElapsed_1 (c)- PHASE_ONE_NO_FEE_DURATION_2
Function name: getPenalty
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: timeElapsed Function: getPenalty
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_193 Function: getPenalty
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_193

Name: TMP_193 Function: getPenalty
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_194(uint256) = TMP_193 (c)* maxWithdrawPenalty_2
Function name: getPenalty
testing mul...
lnorm: u rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: maxWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: TMP_194 Function: getPenalty
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_194

Name: TMP_194 Function: getPenalty
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_195(uint256) = PHASE_ONE_DURATION_3 (c)- PHASE_ONE_NO_FEE_DURATION_2
Function name: getPenalty
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_195 Function: getPenalty
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_195

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_196 = CONVERT TMP_195 to uint256
Function name: getPenalty

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_196 Function: getPenalty
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_196

Name: TMP_196 Function: getPenalty
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_197(uint256) = TMP_194 (c)/ TMP_196
Function name: getPenalty
lnorm: 18 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_197 Function: getPenalty
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_197

Name: TMP_197 Function: getPenalty
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_197
RETURN

Name: TMP_197 Function: getPenalty
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
RETURN fixedWithdrawPenalty_2
typecheckig node...
RETURN fixedWithdrawPenalty_2
RETURN

Name: fixedWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
TMP_191(uint256) = maxWithdrawPenalty_2 (c)* 0
has variable
[i] TMP_191 cleared
clearing ir...?
RETURN TMP_191
typecheckig node...
TMP_191(uint256) = maxWithdrawPenalty_2 (c)* 0
Function name: getPenalty
testing mul...
val: 0
val: 0
lnorm: 18 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_191 Function: getPenalty
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_191

Name: TMP_191 Function: getPenalty
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_191
RETURN

Name: TMP_191 Function: getPenalty
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getPenalty":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: getPenalty

Name: TMP_191 Function: getPenalty
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
___
Check copy_toekn_tuple
([-1], [-1], 18, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for TMP_80

Name: TMP_80 Function: withdrawAVAX
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_81(uint256) = _amount_1 (c)* TMP_80
Function name: withdrawAVAX
testing mul...
lnorm: 6 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: withdrawAVAX
Num: 
Den: 
Norm: 24
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_81

Name: TMP_81 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 24
LF: None
Fields: 
Finance Type: undef
done.
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
Function name: withdrawAVAX
val: 1000000000000000000
18
val: 1000000000000000000
18
lnorm: 24 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_82 Function: withdrawAVAX
Num: 
Den: 
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 24
LF: None
Fields: 
Finance Type: undef

Name: TMP_82 Function: withdrawAVAX
Num: 
Den: 
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_82

Name: TMP_82 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
feeAmount_1(uint256) := TMP_82(uint256)
Function name: withdrawAVAX
asgn

Name: TMP_82 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: feeAmount Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeAmount

Name: feeAmount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
has variable
[i] TMP_83 cleared
clearing ir...?
amountMinusFee_1(uint256) := TMP_83(uint256)
has variable
[i] amountMinusFee cleared
typecheckig node...
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
Function name: withdrawAVAX
lnorm: 6 rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: feeAmount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: TMP_83 Function: withdrawAVAX
Num: 
Den: 
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_83

Name: TMP_83 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
amountMinusFee_1(uint256) := TMP_83(uint256)
Function name: withdrawAVAX
asgn

Name: TMP_83 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: amountMinusFee Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountMinusFee

Name: amountMinusFee Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
has variable
typecheckig node...
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
Function name: withdrawAVAX
lnorm: 6 rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: withdrawAVAX
Num: 
Den: 
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
clearing ir...?
WAVAX_13(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_12', 'WAVAX_29', 'WAVAX_24'])
has variable
clearing ir...?
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
High Call: withdraw
func name:withdraw
other func name:withdraw
done.
WAVAX_13(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_12', 'WAVAX_29', 'WAVAX_24'])
Function name: withdrawAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Function name: withdrawAVAX
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
typecheckig node...
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
Internal call...
_safeTransferAVAX
msg.sender
amountMinusFee
Function: _safeTransferAVAX
ic
msg.sender
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[2], [-1], 6, None, [], -1]
added
xyz
Function name: _safeTransferAVAX
Function Visibility: internal
clearning node...
clearing ir...?
_to_1(address) := ϕ(['penaltyCollector_1', 'msg.sender', 'TMP_87'])
has variable
[i] _to cleared
clearing ir...?
_value_1(uint256) := ϕ(['balance_1', 'amountMinusFee_1', 'feeAmount_1', 'excessAvax_1'])
has variable
[i] _value cleared
typecheckig node...
_to_1(address) := ϕ(['penaltyCollector_1', 'msg.sender', 'TMP_87'])
Function name: _safeTransferAVAX
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: -1
Den: -1
Norm: u
LF: _to
Fields: 
Finance Type: undef
done.
_value_1(uint256) := ϕ(['balance_1', 'amountMinusFee_1', 'feeAmount_1', 'excessAvax_1'])
Function name: _safeTransferAVAX
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_223 = new bytes(0)
clearing ir...?
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
clearing ir...?
success_1(bool)= UNPACK TUPLE_1 index: 0 
has variable
[i] success cleared
typecheckig node...
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
success_1(bool)= UNPACK TUPLE_1 index: 0 
Function name: _safeTransferAVAX
Reading tuple TUPLE_1 index 0
Finding type for success...
bool
SKIP bool
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
typecheckig node...
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_safeTransferAVAX":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _safeTransferAVAX
done.
clearning node...
clearing ir...?
TMP_86(bool) = feeAmount_1 > 0
has variable
[i] TMP_86 cleared
clearing ir...?
CONDITION TMP_86
typecheckig node...
TMP_86(bool) = feeAmount_1 > 0
Function name: withdrawAVAX
testing gt...
val: 0
val: 0
lnorm: 6 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_86

Name: TMP_86 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_86
Condition...
Conidtion: 
TMP_86
TMP_86
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
has variable
[i] TMP_87 cleared
clearing ir...?
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
has variable
clearing ir...?
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)
typecheckig node...
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
Function name: withdrawAVAX
High Call: penaltyCollector
func name:penaltyCollector
other func name:penaltyCollector
TMP_87
hlc contract name: RJFACTORY func_name: penaltyCollector
wfc len: 0
COPIED
[i]Type for TMP_87

Name: TMP_87 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Function name: withdrawAVAX
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)
Internal call...
_safeTransferAVAX
TMP_87
feeAmount
Function: _safeTransferAVAX
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[2], [-1], 6, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[2], [-1], 6, None, [], -1]
0
done.
WORKLIST iteration 0 for function call "withdrawAVAX":
 New undefined nodes- 3
 Old undefined nodes- 0
typecheckig node...
WAVAX_9(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: withdrawAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_0', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Function name: withdrawAVAX
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
done.
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: withdrawAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
Function name: withdrawAVAX
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
Internal call...
isStopped
False
Function: isStopped
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
typecheckig node...
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: withdrawAVAX
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_71

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
Function name: withdrawAVAX
asgn

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _currentPhase

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
XXXXX
typecheckig node...
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: withdrawAVAX
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_23

Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_72(bool) = _currentPhase_1 == REF_23
Function name: withdrawAVAX
[i]Type for TMP_72

Name: TMP_72 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: withdrawAVAX
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_24

Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73(bool) = _currentPhase_1 == REF_24
Function name: withdrawAVAX
[i]Type for TMP_73

Name: TMP_73 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_74(bool) = TMP_72 || TMP_73
Function name: withdrawAVAX
[i]Type for TMP_74

Name: TMP_74 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_76(bool) = _amount_1 > 0
Function name: withdrawAVAX
testing gt...
val: 0
val: 0
lnorm: 6 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_76

Name: TMP_76 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
Function name: withdrawAVAX
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_25

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
Function name: withdrawAVAX
asgn

Name: REF_25 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
done.
typecheckig node...
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: withdrawAVAX
MEMBER
user
balance
withdrawAVAX
user Fields:
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_26

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(bool) = REF_26 >= _amount_1
Function name: withdrawAVAX
testing gt...
lnorm: u rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[W] Initializing defined variable to constant
[i]Type for TMP_78

Name: TMP_78 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: withdrawAVAX
MEMBER
user
balance
withdrawAVAX
user Fields:
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_27

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: withdrawAVAX
Phi
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
done.
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
Function name: withdrawAVAX
lnorm: u rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_27

Name: REF_27 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: withdrawAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
Function name: withdrawAVAX
Internal call...
getPenalty
Function: getPenalty
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_80

Name: TMP_80 Function: withdrawAVAX
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_81(uint256) = _amount_1 (c)* TMP_80
Function name: withdrawAVAX
testing mul...
lnorm: 6 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 24
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_81

Name: TMP_81 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 24
LF: None
Fields: 
Finance Type: undef
done.
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
Function name: withdrawAVAX
val: 1000000000000000000
18
val: 1000000000000000000
18
lnorm: 24 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_82 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 24
LF: None
Fields: 
Finance Type: undef

Name: TMP_82 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_82

Name: TMP_82 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
feeAmount_1(uint256) := TMP_82(uint256)
Function name: withdrawAVAX
asgn

Name: TMP_82 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: feeAmount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeAmount

Name: feeAmount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
Function name: withdrawAVAX
lnorm: 6 rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: feeAmount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: TMP_83 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_83

Name: TMP_83 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
amountMinusFee_1(uint256) := TMP_83(uint256)
Function name: withdrawAVAX
asgn

Name: TMP_83 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: amountMinusFee Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountMinusFee

Name: amountMinusFee Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
Function name: withdrawAVAX
lnorm: 6 rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
High Call: withdraw
func name:withdraw
other func name:withdraw
done.
WAVAX_13(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_12', 'WAVAX_29', 'WAVAX_24'])
Function name: withdrawAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Function name: withdrawAVAX
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
done.
typecheckig node...
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
Internal call...
_safeTransferAVAX
msg.sender
amountMinusFee
Function: _safeTransferAVAX
ic
msg.sender
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[2], [-1], 6, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[2], [-1], 6, None, [], -1]
0
done.
typecheckig node...
TMP_86(bool) = feeAmount_1 > 0
Function name: withdrawAVAX
testing gt...
val: 0
val: 0
lnorm: 6 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_86

Name: TMP_86 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_86
Condition...
Conidtion: 
TMP_86
TMP_86
typecheckig node...
typecheckig node...
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
Function name: withdrawAVAX
High Call: penaltyCollector
func name:penaltyCollector
other func name:penaltyCollector
TMP_87
hlc contract name: RJFACTORY func_name: penaltyCollector
wfc len: 0
COPIED
[i]Type for TMP_87

Name: TMP_87 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Function name: withdrawAVAX
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)
Internal call...
_safeTransferAVAX
TMP_87
feeAmount
Function: _safeTransferAVAX
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[2], [-1], 6, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[2], [-1], 6, None, [], -1]
0
done.
WORKLIST iteration 1 for function call "withdrawAVAX":
 New undefined nodes- 2
 Old undefined nodes- 3
typecheckig node...
WAVAX_9(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: withdrawAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_0', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Function name: withdrawAVAX
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
done.
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: withdrawAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
Function name: withdrawAVAX
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
Internal call...
isStopped
False
Function: isStopped
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
typecheckig node...
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: withdrawAVAX
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_71

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
Function name: withdrawAVAX
asgn

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _currentPhase

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
XXXXX
typecheckig node...
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: withdrawAVAX
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_23

Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_72(bool) = _currentPhase_1 == REF_23
Function name: withdrawAVAX
[i]Type for TMP_72

Name: TMP_72 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: withdrawAVAX
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_24

Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73(bool) = _currentPhase_1 == REF_24
Function name: withdrawAVAX
[i]Type for TMP_73

Name: TMP_73 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_74(bool) = TMP_72 || TMP_73
Function name: withdrawAVAX
[i]Type for TMP_74

Name: TMP_74 Function: withdrawAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_76(bool) = _amount_1 > 0
Function name: withdrawAVAX
testing gt...
val: 0
val: 0
lnorm: 6 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_76

Name: TMP_76 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
Function name: withdrawAVAX
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_25

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
Function name: withdrawAVAX
asgn

Name: REF_25 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
done.
typecheckig node...
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: withdrawAVAX
MEMBER
user
balance
withdrawAVAX
user Fields:
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_26

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(bool) = REF_26 >= _amount_1
Function name: withdrawAVAX
testing gt...
lnorm: u rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_78

Name: TMP_78 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: withdrawAVAX
MEMBER
user
balance
withdrawAVAX
user Fields:
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_27

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: withdrawAVAX
Phi
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
done.
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
Function name: withdrawAVAX
lnorm: u rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_27

Name: REF_27 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: withdrawAVAX
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
Function name: withdrawAVAX
Internal call...
getPenalty
Function: getPenalty
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_80

Name: TMP_80 Function: withdrawAVAX
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_81(uint256) = _amount_1 (c)* TMP_80
Function name: withdrawAVAX
testing mul...
lnorm: 6 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 24
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_81

Name: TMP_81 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 24
LF: None
Fields: 
Finance Type: undef
done.
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
Function name: withdrawAVAX
val: 1000000000000000000
18
val: 1000000000000000000
18
lnorm: 24 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_82 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 24
LF: None
Fields: 
Finance Type: undef

Name: TMP_82 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_82

Name: TMP_82 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
feeAmount_1(uint256) := TMP_82(uint256)
Function name: withdrawAVAX
asgn

Name: TMP_82 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: feeAmount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeAmount

Name: feeAmount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
Function name: withdrawAVAX
lnorm: 6 rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: feeAmount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: TMP_83 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_83

Name: TMP_83 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
amountMinusFee_1(uint256) := TMP_83(uint256)
Function name: withdrawAVAX
asgn

Name: TMP_83 Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: amountMinusFee Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountMinusFee

Name: amountMinusFee Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
Function name: withdrawAVAX
lnorm: 6 rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: _amount Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
High Call: withdraw
func name:withdraw
other func name:withdraw
done.
WAVAX_13(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_12', 'WAVAX_29', 'WAVAX_24'])
Function name: withdrawAVAX
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Function name: withdrawAVAX
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
done.
typecheckig node...
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
Internal call...
_safeTransferAVAX
msg.sender
amountMinusFee
Function: _safeTransferAVAX
ic
msg.sender
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[2], [-1], 6, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[2], [-1], 6, None, [], -1]
0
done.
typecheckig node...
TMP_86(bool) = feeAmount_1 > 0
Function name: withdrawAVAX
testing gt...
val: 0
val: 0
lnorm: 6 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_86

Name: TMP_86 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_86
Condition...
Conidtion: 
TMP_86
TMP_86
typecheckig node...
typecheckig node...
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
Function name: withdrawAVAX
High Call: penaltyCollector
func name:penaltyCollector
other func name:penaltyCollector
TMP_87
hlc contract name: RJFACTORY func_name: penaltyCollector
wfc len: 0
COPIED
[i]Type for TMP_87

Name: TMP_87 Function: withdrawAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Function name: withdrawAVAX
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)
Internal call...
_safeTransferAVAX
TMP_87
feeAmount
Function: _safeTransferAVAX
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[2], [-1], 6, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[2], [-1], 6, None, [], -1]
0
done.
WORKLIST iteration 2 for function call "withdrawAVAX":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: withdrawAVAX
State_var: WAVAX
Finding type for WAVAX...
IWAVAX
Check copy_toekn_tuple
(-1, -1, 0, 'WAVAX')
----
Type: IWAVAX
IWAVAX
Final Type: IWAVAX
 NO FIELDS

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rocketJoeFactory
Finding type for rocketJoeFactory...
IRocketJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'RJFACTORY')
----
Type: IRocketJoeFactory
IRocketJoeFactory
Final Type: IRocketJoeFactory
 NO FIELDS

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token
Finding type for token...
IERC20Metadata
Check copy_toekn_tuple
(-1, -1, 0, 'TOKEN')
----
Type: IERC20Metadata
IERC20Metadata
Final Type: IERC20Metadata
 NO FIELDS

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesBalance
Finding type for tokenIncentivesBalance...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenReserve
Finding type for tokenReserve...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxReserve
Finding type for wavaxReserve...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: getUserInfo
Finding type for getUserInfo...
mapping(address => LaunchEvent.UserInfo)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => LaunchEvent.UserInfo)
mapping(address => LaunchEvent.UserInfo)
LaunchEvent.UserInfo
Final Type: LaunchEvent.UserInfo
global
getUserInfo
allocation
global
getUserInfo
balance
global
getUserInfo
hasWithdrawnPair
global
getUserInfo
hasWithdrawnIncentives
FIELDS:
getUserInfo Fields:
^^^

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuer
Finding type for issuer...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ISSUER')
----
Type: address
address
Final Type: address

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pair
Finding type for pair...
IJoePair
Check copy_toekn_tuple
(-1, -1, 0, 'JOEPAIR')
----
Type: IJoePair
IJoePair
Final Type: IJoePair
 NO FIELDS

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentiveIssuerRefund
Finding type for tokenIncentiveIssuerRefund...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesForUsers
Finding type for tokenIncentivesForUsers...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxAllocated
Finding type for wavaxAllocated...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: initialized
Finding type for initialized...
bool
SKIP bool
State_var: PHASE_ONE_DURATION
Finding type for PHASE_ONE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_TWO_DURATION
Finding type for PHASE_TWO_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: auctionStart
Finding type for auctionStart...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuerTimelock
Finding type for issuerTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: issuerTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: userTimelock
Finding type for userTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: userTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpSupply
Finding type for lpSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_ONE_NO_FEE_DURATION
Finding type for PHASE_ONE_NO_FEE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: fixedWithdrawPenalty
Finding type for fixedWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: fixedWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: maxWithdrawPenalty
Finding type for maxWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: factory
Finding type for factory...
IJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IJoeFactory
IJoeFactory
Final Type: IJoeFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: floorPrice
Finding type for floorPrice...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
IJoeRouter02
Check copy_toekn_tuple
(-1, -1, 0, 'ROUTER')
----
Type: IJoeRouter02
IJoeRouter02
Final Type: IJoeRouter02
 NO FIELDS

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: stopped
Finding type for stopped...
bool
SKIP bool
State_var: maxAllocation
Finding type for maxAllocation...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxAllocation Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoe
Finding type for rJoe...
IRocketJoeToken
Check copy_toekn_tuple
(-1, -1, 0, 'RJTOKEN')
----
Type: IRocketJoeToken
IRocketJoeToken
Final Type: IRocketJoeToken
 NO FIELDS

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoePerAvax
Finding type for rJoePerAvax...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: rJoePerAvax Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: createPair
Function name: createPair
Function Visibility (test): external
-100
Add new
clearning node...
clearing ir...?
floorPrice_2(uint256) := ϕ(['floorPrice_1', 'floorPrice_7', 'floorPrice_8', 'floorPrice_0'])
has variable
clearing ir...?
WAVAX_14(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
has variable
clearing ir...?
token_3(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_21', 'token_26', 'token_0', 'token_25', 'token_11', 'token_22'])
has variable
clearing ir...?
router_2(IJoeRouter02) := ϕ(['router_1', 'router_0', 'router_11'])
has variable
clearing ir...?
factory_2(IJoeFactory) := ϕ(['factory_1', 'factory_0', 'factory_12'])
has variable
clearing ir...?
tokenReserve_2(uint256) := ϕ(['tokenReserve_0', 'tokenReserve_20', 'tokenReserve_17', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_13', 'tokenReserve_1'])
has variable
clearing ir...?
tokenIncentivesBalance_2(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
has variable
clearing ir...?
tokenIncentivesForUsers_2(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_0'])
has variable
clearing ir...?
wavaxReserve_11(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
has variable
typecheckig node...
floorPrice_2(uint256) := ϕ(['floorPrice_1', 'floorPrice_7', 'floorPrice_8', 'floorPrice_0'])
Function name: createPair
Phi
[i]Type for floorPrice

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
WAVAX_14(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: createPair
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
token_3(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_21', 'token_26', 'token_0', 'token_25', 'token_11', 'token_22'])
Function name: createPair
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
router_2(IJoeRouter02) := ϕ(['router_1', 'router_0', 'router_11'])
Function name: createPair
Phi
[i]Type for router

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
factory_2(IJoeFactory) := ϕ(['factory_1', 'factory_0', 'factory_12'])
Function name: createPair
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
tokenReserve_2(uint256) := ϕ(['tokenReserve_0', 'tokenReserve_20', 'tokenReserve_17', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_13', 'tokenReserve_1'])
Function name: createPair
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesBalance_2(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
Function name: createPair
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesForUsers_2(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_0'])
Function name: createPair
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_11(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
Function name: createPair
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
Internal call...
isStopped
False
Function: isStopped
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
clearning node...
clearing ir...?
REF_38(LaunchEvent.Phase) -> Phase.PhaseThree
has variable
clearing ir...?
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_38)
typecheckig node...
REF_38(LaunchEvent.Phase) -> Phase.PhaseThree
Function name: createPair
MEMBER
Phase
Phase
PhaseThree
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_38

Name: Phase.PhaseThree Function: createPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseThree Function: createPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_38)
Internal call...
atPhase
REF_38
Function: atPhase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[], [], 'u', None, [], -1]
added
xyz
Function name: atPhase
Function Visibility: internal
clearning node...
clearing ir...?
_phase_1(LaunchEvent.Phase) := ϕ(['REF_22', 'REF_38', 'REF_9'])
has variable
[i] _phase cleared
typecheckig node...
_phase_1(LaunchEvent.Phase) := ϕ(['REF_22', 'REF_38', 'REF_9'])
Function name: atPhase
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
typecheckig node...
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
Internal call...
_atPhase
_phase
Function: _atPhase
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[], [], 'u', None, [], -1]
added
xyz
Function name: _atPhase
Function Visibility: internal
clearning node...
clearing ir...?
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
has variable
[i] _phase cleared
typecheckig node...
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Function name: _atPhase
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
has variable
clearing ir...?
TMP_205(bool) = _phase_1 == REF_64
has variable
[i] TMP_205 cleared
clearing ir...?
CONDITION TMP_205
typecheckig node...
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
Function name: _atPhase
MEMBER
Phase
Phase
NotStarted
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(bool) = _phase_1 == REF_64
Function name: _atPhase
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_205
Condition...
Conidtion: 
TMP_205
TMP_205
clearning node...
clearing ir...?
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
TMP_209(bool) = _phase_1 == REF_66
has variable
[i] TMP_209 cleared
clearing ir...?
CONDITION TMP_209
typecheckig node...
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: _atPhase
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_209(bool) = _phase_1 == REF_66
Function name: _atPhase
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_209
Condition...
Conidtion: 
TMP_209
TMP_209
clearning node...
clearing ir...?
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
has variable
clearing ir...?
TMP_213(bool) = _phase_1 == REF_68
has variable
[i] TMP_213 cleared
clearing ir...?
CONDITION TMP_213
typecheckig node...
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: _atPhase
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_213(bool) = _phase_1 == REF_68
Function name: _atPhase
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_213
Condition...
Conidtion: 
TMP_213
TMP_213
clearning node...
clearing ir...?
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_210 cleared
clearing ir...?
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
has variable
clearing ir...?
TMP_211(bool) = TMP_210 == REF_67
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
typecheckig node...
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
Function name: _atPhase
MEMBER
Phase
Phase
PhaseOne
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseOne Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = TMP_210 == REF_67
Function name: _atPhase
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_206 cleared
clearing ir...?
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
has variable
clearing ir...?
TMP_207(bool) = TMP_206 == REF_65
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
typecheckig node...
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
Function name: _atPhase
MEMBER
Phase
Phase
NotStarted
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: NotStarted Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_207(bool) = TMP_206 == REF_65
Function name: _atPhase
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
has variable
clearing ir...?
TMP_217(bool) = _phase_1 == REF_70
has variable
[i] TMP_217 cleared
clearing ir...?
CONDITION TMP_217
typecheckig node...
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
Function name: _atPhase
MEMBER
Phase
Phase
PhaseThree
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_217(bool) = _phase_1 == REF_70
Function name: _atPhase
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_217
Condition...
Conidtion: 
TMP_217
TMP_217
clearning node...
clearing ir...?
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_214 cleared
clearing ir...?
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
has variable
clearing ir...?
TMP_215(bool) = TMP_214 == REF_69
has variable
[i] TMP_215 cleared
clearing ir...?
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
typecheckig node...
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
Function name: _atPhase
MEMBER
Phase
Phase
PhaseTwo
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseTwo Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_215(bool) = TMP_214 == REF_69
Function name: _atPhase
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
typecheckig node...
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
has variable
[i] TMP_218 cleared
clearing ir...?
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
has variable
clearing ir...?
TMP_219(bool) = TMP_218 == REF_71
has variable
[i] TMP_219 cleared
clearing ir...?
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
typecheckig node...
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Function name: _atPhase
Internal call...
currentPhase
Function: currentPhase
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
Function name: _atPhase
MEMBER
Phase
Phase
PhaseThree
global
Phase Fields:
NotStarted
PhaseOne
PhaseTwo
PhaseThree
^^^

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: PhaseThree Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_219(bool) = TMP_218 == REF_71
Function name: _atPhase
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_atPhase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _atPhase
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "atPhase":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: atPhase
done.
clearning node...
clearing ir...?
TMP_90 = CONVERT WAVAX_16 to address
has variable
[i] TMP_90 cleared
clearing ir...?
wavaxAddress_1(address) := TMP_90(address)
has variable
[i] wavaxAddress cleared
typecheckig node...
TMP_90 = CONVERT WAVAX_16 to address
Function name: createPair

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef

Name: TMP_90 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_90

Name: TMP_90 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
wavaxAddress_1(address) := TMP_90(address)
Function name: createPair
asgn

Name: TMP_90 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef

Name: wavaxAddress Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for wavaxAddress

Name: wavaxAddress Function: createPair
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_91 = CONVERT token_5 to address
has variable
[i] TMP_91 cleared
clearing ir...?
tokenAddress_1(address) := TMP_91(address)
has variable
[i] tokenAddress cleared
typecheckig node...
TMP_91 = CONVERT token_5 to address
Function name: createPair

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef

Name: TMP_91 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_91

Name: TMP_91 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
tokenAddress_1(address) := TMP_91(address)
Function name: createPair
asgn

Name: TMP_91 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef

Name: tokenAddress Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenAddress

Name: tokenAddress Function: createPair
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_92(address) = HIGH_LEVEL_CALL, dest:factory_4(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
has variable
[i] TMP_92 cleared
clearing ir...?
floorPrice_5(uint256) := ϕ(['floorPrice_1', 'floorPrice_7', 'floorPrice_4', 'floorPrice_8'])
has variable
clearing ir...?
WAVAX_17(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_16', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
has variable
clearing ir...?
token_6(IERC20Metadata) := ϕ(['token_19', 'token_5', 'token_15', 'token_2', 'token_26', 'token_21', 'token_25', 'token_11', 'token_22'])
has variable
clearing ir...?
router_5(IJoeRouter02) := ϕ(['router_4', 'router_1', 'router_11'])
has variable
clearing ir...?
factory_5(IJoeFactory) := ϕ(['factory_1', 'factory_12', 'factory_4'])
has variable
clearing ir...?
tokenReserve_5(uint256) := ϕ(['tokenReserve_24', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_4', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
has variable
clearing ir...?
tokenIncentivesBalance_5(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_4', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
has variable
clearing ir...?
tokenIncentivesForUsers_5(uint256) := ϕ(['tokenIncentivesForUsers_4', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
has variable
clearing ir...?
wavaxReserve_14(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_13', 'wavaxReserve_10'])
has variable
clearing ir...?
TMP_93 = CONVERT 0 to address
has variable
[i] TMP_93 cleared
clearing ir...?
TMP_94(bool) = TMP_92 == TMP_93
has variable
[i] TMP_94 cleared
clearing ir...?
TMP_95 = CONVERT factory_5 to IJoeFactory
has variable
[i] TMP_95 cleared
clearing ir...?
TMP_96(address) = HIGH_LEVEL_CALL, dest:TMP_95(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
has variable
[i] TMP_96 cleared
clearing ir...?
floorPrice_6(uint256) := ϕ(['floorPrice_1', 'floorPrice_7', 'floorPrice_5', 'floorPrice_8'])
has variable
clearing ir...?
WAVAX_18(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_17', 'WAVAX_29', 'WAVAX_24'])
has variable
clearing ir...?
token_7(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_6', 'token_21', 'token_25', 'token_11', 'token_22'])
has variable
clearing ir...?
router_6(IJoeRouter02) := ϕ(['router_1', 'router_5', 'router_11'])
has variable
clearing ir...?
factory_6(IJoeFactory) := ϕ(['factory_1', 'factory_12', 'factory_5'])
has variable
clearing ir...?
tokenReserve_6(uint256) := ϕ(['tokenReserve_5', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
has variable
clearing ir...?
tokenIncentivesBalance_6(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_5', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
has variable
clearing ir...?
tokenIncentivesForUsers_6(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_5', 'tokenIncentivesForUsers_7'])
has variable
clearing ir...?
wavaxReserve_15(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_14'])
has variable
clearing ir...?
TMP_97 = CONVERT TMP_96 to IJoePair
has variable
[i] TMP_97 cleared
clearing ir...?
TMP_98(uint256) = HIGH_LEVEL_CALL, dest:TMP_97(IJoePair), function:totalSupply, arguments:[]  
has variable
[i] TMP_98 cleared
clearing ir...?
floorPrice_7(uint256) := ϕ(['floorPrice_1', 'floorPrice_7', 'floorPrice_6', 'floorPrice_8'])
has variable
clearing ir...?
WAVAX_19(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_18', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
has variable
clearing ir...?
token_8(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_7', 'token_21', 'token_25', 'token_11', 'token_22'])
has variable
clearing ir...?
router_7(IJoeRouter02) := ϕ(['router_1', 'router_6', 'router_11'])
has variable
clearing ir...?
factory_7(IJoeFactory) := ϕ(['factory_1', 'factory_6', 'factory_12'])
has variable
clearing ir...?
tokenReserve_7(uint256) := ϕ(['tokenReserve_6', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
has variable
clearing ir...?
tokenIncentivesBalance_7(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_6', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
has variable
clearing ir...?
tokenIncentivesForUsers_7(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_6', 'tokenIncentivesForUsers_7'])
has variable
clearing ir...?
wavaxReserve_16(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_15'])
has variable
clearing ir...?
TMP_99(bool) = TMP_98 == 0
has variable
[i] TMP_99 cleared
clearing ir...?
TMP_100(bool) = TMP_94 || TMP_99
has variable
[i] TMP_100 cleared
clearing ir...?
TMP_101(None) = SOLIDITY_CALL require(bool,string)(TMP_100,LaunchEvent: liquid pair already exists)
typecheckig node...
TMP_92(address) = HIGH_LEVEL_CALL, dest:factory_4(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
Function name: createPair
High Call: getPair
func name:getPair
other func name:getPair
TMP_92
hlc contract name: FACTORY func_name: getPair
('c', [-1], [-1], 0, 'JOEPAIR')
wavaxAddress
tokenAddress
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'JOEPAIR', -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_92

Name: TMP_92 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
floorPrice_5(uint256) := ϕ(['floorPrice_1', 'floorPrice_7', 'floorPrice_4', 'floorPrice_8'])
Function name: createPair
Phi
[i]Type for floorPrice

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
WAVAX_17(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_16', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: createPair
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
token_6(IERC20Metadata) := ϕ(['token_19', 'token_5', 'token_15', 'token_2', 'token_26', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: createPair
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
router_5(IJoeRouter02) := ϕ(['router_4', 'router_1', 'router_11'])
Function name: createPair
Phi
[i]Type for router

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
factory_5(IJoeFactory) := ϕ(['factory_1', 'factory_12', 'factory_4'])
Function name: createPair
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
tokenReserve_5(uint256) := ϕ(['tokenReserve_24', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_4', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
Function name: createPair
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesBalance_5(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_4', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
Function name: createPair
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesForUsers_5(uint256) := ϕ(['tokenIncentivesForUsers_4', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
Function name: createPair
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_14(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_13', 'wavaxReserve_10'])
Function name: createPair
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
TMP_93 = CONVERT 0 to address
Function name: createPair
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_93 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_93

Name: TMP_93 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_94(bool) = TMP_92 == TMP_93
Function name: createPair
[i]Type for TMP_94

Name: TMP_94 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_95 = CONVERT factory_5 to IJoeFactory
Function name: createPair

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef

Name: TMP_95 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_95

Name: TMP_95 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
TMP_96(address) = HIGH_LEVEL_CALL, dest:TMP_95(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
Function name: createPair
High Call: getPair
func name:getPair
other func name:getPair
TMP_96
hlc contract name: FACTORY func_name: getPair
('c', [-1], [-1], 0, 'JOEPAIR')
wavaxAddress
tokenAddress
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'JOEPAIR', -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_96

Name: TMP_96 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
floorPrice_6(uint256) := ϕ(['floorPrice_1', 'floorPrice_7', 'floorPrice_5', 'floorPrice_8'])
Function name: createPair
Phi
[i]Type for floorPrice

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
WAVAX_18(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_17', 'WAVAX_29', 'WAVAX_24'])
Function name: createPair
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
token_7(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_6', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: createPair
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
router_6(IJoeRouter02) := ϕ(['router_1', 'router_5', 'router_11'])
Function name: createPair
Phi
[i]Type for router

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
factory_6(IJoeFactory) := ϕ(['factory_1', 'factory_12', 'factory_5'])
Function name: createPair
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
tokenReserve_6(uint256) := ϕ(['tokenReserve_5', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
Function name: createPair
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesBalance_6(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_5', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
Function name: createPair
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesForUsers_6(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_5', 'tokenIncentivesForUsers_7'])
Function name: createPair
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_15(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_14'])
Function name: createPair
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
TMP_97 = CONVERT TMP_96 to IJoePair
Function name: createPair

Name: TMP_96 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef

Name: TMP_97 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_97

Name: TMP_97 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
TMP_98(uint256) = HIGH_LEVEL_CALL, dest:TMP_97(IJoePair), function:totalSupply, arguments:[]  
Function name: createPair
High Call: totalSupply
func name:totalSupply
other func name:totalSupply
TMP_98
hlc contract name: JOEPAIR func_name: totalSupply
('c', [2], [-1], 6, None)
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 6, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_98

Name: TMP_98 Function: createPair
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
floorPrice_7(uint256) := ϕ(['floorPrice_1', 'floorPrice_7', 'floorPrice_6', 'floorPrice_8'])
Function name: createPair
Phi
[i]Type for floorPrice

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
WAVAX_19(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_18', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: createPair
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
token_8(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_7', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: createPair
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
router_7(IJoeRouter02) := ϕ(['router_1', 'router_6', 'router_11'])
Function name: createPair
Phi
[i]Type for router

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
factory_7(IJoeFactory) := ϕ(['factory_1', 'factory_6', 'factory_12'])
Function name: createPair
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
tokenReserve_7(uint256) := ϕ(['tokenReserve_6', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
Function name: createPair
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesBalance_7(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_6', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
Function name: createPair
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesForUsers_7(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_6', 'tokenIncentivesForUsers_7'])
Function name: createPair
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_16(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_15'])
Function name: createPair
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
TMP_99(bool) = TMP_98 == 0
Function name: createPair
[i]Type for TMP_99

Name: TMP_99 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_100(bool) = TMP_94 || TMP_99
Function name: createPair
[i]Type for TMP_100

Name: TMP_100 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_101(None) = SOLIDITY_CALL require(bool,string)(TMP_100,LaunchEvent: liquid pair already exists)
[i]Type for TMP_101

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_102(bool) = wavaxReserve_16 > 0
has variable
[i] TMP_102 cleared
clearing ir...?
TMP_103(None) = SOLIDITY_CALL require(bool,string)(TMP_102,LaunchEvent: no wavax balance)
typecheckig node...
TMP_102(bool) = wavaxReserve_16 > 0
Function name: createPair
testing gt...
val: 0
val: 0
lnorm: 6 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_102

Name: TMP_102 Function: createPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_103(None) = SOLIDITY_CALL require(bool,string)(TMP_102,LaunchEvent: no wavax balance)
[i]Type for TMP_103

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
tokenAllocated_1(uint256) := tokenReserve_7(uint256)
has variable
[i] tokenAllocated cleared
typecheckig node...
tokenAllocated_1(uint256) := tokenReserve_7(uint256)
Function name: createPair
asgn

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: tokenAllocated Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_104(uint256) = 10 (c)** 18
has variable
[i] TMP_104 cleared
clearing ir...?
TMP_105(uint256) = wavaxReserve_16 (c)* TMP_104
has variable
[i] TMP_105 cleared
clearing ir...?
TMP_106(uint256) = TMP_105 (c)/ tokenAllocated_1
has variable
[i] TMP_106 cleared
clearing ir...?
TMP_107(bool) = floorPrice_7 > TMP_106
has variable
[i] TMP_107 cleared
clearing ir...?
CONDITION TMP_107
typecheckig node...
TMP_104(uint256) = 10 (c)** 18
Function name: createPair
val: 10
1
val: 18

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: 18 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_104 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
18
val: 10
1
[i]Type for TMP_104

Name: TMP_104 Function: createPair
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_105(uint256) = wavaxReserve_16 (c)* TMP_104
Function name: createPair
testing mul...
lnorm: 6 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: TMP_105 Function: createPair
Num: 
Den: 
Norm: 24
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_105

Name: TMP_105 Function: createPair
Num: 2
Den: -1
Norm: 24
LF: None
Fields: 
Finance Type: undef
done.
TMP_106(uint256) = TMP_105 (c)/ tokenAllocated_1
Function name: createPair
lnorm: 24 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_106 Function: createPair
Num: 
Den: 
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: PIC_33 Function: None
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_106 Function: createPair
Num: 
Den: 
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_106

Name: TMP_106 Function: createPair
Num: 2
Den: 1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
TMP_107(bool) = floorPrice_7 > TMP_106
Function name: createPair
testing gt...
lnorm: 18 rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_106 Function: createPair
Num: 2
Den: 1
Norm: 6
LF: None
Fields: 
Finance Type: undef
False
Error with TMP_107 in function createPair
Error with: TMP_107 in function createPair
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fa068358130>]
[i]Type for TMP_107

Name: TMP_107 Function: createPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_107
Condition...
Conidtion: 
TMP_107
TMP_107
clearning node...
clearing ir...?
tokenAllocated_3(uint256) := ϕ(['tokenAllocated_1', 'tokenAllocated_2'])
has variable
[i] tokenAllocated cleared
typecheckig node...
tokenAllocated_3(uint256) := ϕ(['tokenAllocated_1', 'tokenAllocated_2'])
Function name: createPair
Phi
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_115 = CONVERT router_8 to address
has variable
[i] TMP_115 cleared
clearing ir...?
TMP_116(bool) = HIGH_LEVEL_CALL, dest:WAVAX_20(IWAVAX), function:approve, arguments:['TMP_115', 'wavaxReserve_17']  
has variable
[i] TMP_116 cleared
clearing ir...?
WAVAX_21(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_20', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
has variable
clearing ir...?
token_10(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_9', 'token_21', 'token_25', 'token_11', 'token_22'])
has variable
clearing ir...?
router_9(IJoeRouter02) := ϕ(['router_1', 'router_8', 'router_11'])
has variable
clearing ir...?
factory_9(IJoeFactory) := ϕ(['factory_1', 'factory_12', 'factory_8'])
has variable
clearing ir...?
tokenReserve_9(uint256) := ϕ(['tokenReserve_8', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
has variable
clearing ir...?
wavaxReserve_18(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_17'])
has variable
typecheckig node...
TMP_115 = CONVERT router_8 to address
Function name: createPair

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_115 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_115

Name: TMP_115 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_116(bool) = HIGH_LEVEL_CALL, dest:WAVAX_20(IWAVAX), function:approve, arguments:['TMP_115', 'wavaxReserve_17']  
Function name: createPair
High Call: approve
func name:approve
other func name:approve
TMP_116
[i]Type for TMP_116

Name: TMP_116 Function: createPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WAVAX_21(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_20', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: createPair
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
token_10(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_9', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: createPair
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
router_9(IJoeRouter02) := ϕ(['router_1', 'router_8', 'router_11'])
Function name: createPair
Phi
[i]Type for router

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
factory_9(IJoeFactory) := ϕ(['factory_1', 'factory_12', 'factory_8'])
Function name: createPair
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
tokenReserve_9(uint256) := ϕ(['tokenReserve_8', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
Function name: createPair
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_18(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_17'])
Function name: createPair
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_108(uint8) = HIGH_LEVEL_CALL, dest:token_8(IERC20Metadata), function:decimals, arguments:[]  
has variable
[i] TMP_108 cleared
clearing ir...?
floorPrice_8(uint256) := ϕ(['floorPrice_1', 'floorPrice_7', 'floorPrice_8'])
has variable
clearing ir...?
WAVAX_20(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_19', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
has variable
clearing ir...?
token_9(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_8', 'token_21', 'token_25', 'token_11', 'token_22'])
has variable
clearing ir...?
router_8(IJoeRouter02) := ϕ(['router_7', 'router_1', 'router_11'])
has variable
clearing ir...?
factory_8(IJoeFactory) := ϕ(['factory_7', 'factory_1', 'factory_12'])
has variable
clearing ir...?
tokenReserve_8(uint256) := ϕ(['tokenReserve_7', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
has variable
clearing ir...?
tokenIncentivesBalance_8(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
has variable
clearing ir...?
tokenIncentivesForUsers_8(uint256) := ϕ(['tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9'])
has variable
clearing ir...?
wavaxReserve_17(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_16', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10'])
has variable
clearing ir...?
TMP_109(uint256) = 10 (c)** TMP_108
has variable
[i] TMP_109 cleared
clearing ir...?
TMP_110(uint256) = wavaxReserve_17 (c)* TMP_109
has variable
[i] TMP_110 cleared
clearing ir...?
TMP_111(uint256) = TMP_110 (c)/ floorPrice_8
has variable
[i] TMP_111 cleared
clearing ir...?
tokenAllocated_2(uint256) := TMP_111(uint256)
has variable
[i] tokenAllocated cleared
typecheckig node...
TMP_108(uint8) = HIGH_LEVEL_CALL, dest:token_8(IERC20Metadata), function:decimals, arguments:[]  
Function name: createPair
High Call: decimals
func name:decimals
other func name:decimals
TMP_108
hlc contract name: TOKEN func_name: decimals
('c', [-1], [-1], -404, None)
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], -404, None, -1)
----
Type: uint8
uint8
Final Type: uint8
COPIED
[i]Type for TMP_108

Name: TMP_108 Function: createPair
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
floorPrice_8(uint256) := ϕ(['floorPrice_1', 'floorPrice_7', 'floorPrice_8'])
Function name: createPair
Phi
[i]Type for floorPrice

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
WAVAX_20(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_19', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: createPair
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
token_9(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_8', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: createPair
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
router_8(IJoeRouter02) := ϕ(['router_7', 'router_1', 'router_11'])
Function name: createPair
Phi
[i]Type for router

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
factory_8(IJoeFactory) := ϕ(['factory_7', 'factory_1', 'factory_12'])
Function name: createPair
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
tokenReserve_8(uint256) := ϕ(['tokenReserve_7', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
Function name: createPair
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesBalance_8(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
Function name: createPair
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesForUsers_8(uint256) := ϕ(['tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9'])
Function name: createPair
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_17(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_16', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10'])
Function name: createPair
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
TMP_109(uint256) = 10 (c)** TMP_108
Function name: createPair
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: TMP_108 Function: createPair
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_109 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_109

Name: TMP_109 Function: createPair
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_110(uint256) = wavaxReserve_17 (c)* TMP_109
Function name: createPair
testing mul...
Error with TMP_110 in function createPair
Error with: TMP_110 in function createPair
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fa068358130>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fa068363070>]
lnorm: 6 rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: TMP_110 Function: createPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_110

Name: TMP_110 Function: createPair
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_111(uint256) = TMP_110 (c)/ floorPrice_8
Function name: createPair
lnorm: u rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_111 Function: createPair
Num: 
Den: 
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: PIC_34 Function: None
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_111 Function: createPair
Num: 
Den: 
Norm: -18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_111

Name: TMP_111 Function: createPair
Num: 2
Den: 1
Norm: -18
LF: None
Fields: 
Finance Type: undef
done.
tokenAllocated_2(uint256) := TMP_111(uint256)
Function name: createPair
asgn

Name: TMP_111 Function: createPair
Num: 2
Den: 1
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: tokenAllocated Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: 2
Den: 1
Norm: -18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_117 = CONVERT router_9 to address
has variable
[i] TMP_117 cleared
clearing ir...?
TMP_118(bool) = HIGH_LEVEL_CALL, dest:token_10(IERC20Metadata), function:approve, arguments:['TMP_117', 'tokenAllocated_3']  
has variable
[i] TMP_118 cleared
clearing ir...?
token_11(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_21', 'token_10', 'token_25', 'token_11', 'token_22'])
has variable
clearing ir...?
router_10(IJoeRouter02) := ϕ(['router_1', 'router_9', 'router_11'])
has variable
clearing ir...?
factory_10(IJoeFactory) := ϕ(['factory_9', 'factory_1', 'factory_12'])
has variable
clearing ir...?
tokenReserve_10(uint256) := ϕ(['tokenReserve_24', 'tokenReserve_9', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
has variable
clearing ir...?
wavaxReserve_19(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_18', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10'])
has variable
typecheckig node...
TMP_117 = CONVERT router_9 to address
Function name: createPair

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef

Name: TMP_117 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_117

Name: TMP_117 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
TMP_118(bool) = HIGH_LEVEL_CALL, dest:token_10(IERC20Metadata), function:approve, arguments:['TMP_117', 'tokenAllocated_3']  
Function name: createPair
High Call: approve
func name:approve
other func name:approve
TMP_118
[i]Type for TMP_118

Name: TMP_118 Function: createPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token_11(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_21', 'token_10', 'token_25', 'token_11', 'token_22'])
Function name: createPair
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
router_10(IJoeRouter02) := ϕ(['router_1', 'router_9', 'router_11'])
Function name: createPair
Phi
[i]Type for router

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
factory_10(IJoeFactory) := ϕ(['factory_9', 'factory_1', 'factory_12'])
Function name: createPair
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
tokenReserve_10(uint256) := ϕ(['tokenReserve_24', 'tokenReserve_9', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
Function name: createPair
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_19(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_18', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10'])
Function name: createPair
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_112(uint256) = tokenIncentivesForUsers_8 (c)* tokenAllocated_2
has variable
[i] TMP_112 cleared
clearing ir...?
TMP_113(uint256) = TMP_112 (c)/ tokenReserve_8
has variable
[i] TMP_113 cleared
clearing ir...?
tokenIncentivesForUsers_9(uint256) := TMP_113(uint256)
has variable
typecheckig node...
TMP_112(uint256) = tokenIncentivesForUsers_8 (c)* tokenAllocated_2
Function name: createPair
testing mul...
lnorm: 18 rnorm: -18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_35 Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_112 Function: createPair
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_112

Name: TMP_112 Function: createPair
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_113(uint256) = TMP_112 (c)/ tokenReserve_8
Function name: createPair
lnorm: 0 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_113 Function: createPair
Num: 
Den: 
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: PIC_36 Function: None
Num: 2
Den: 1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_113 Function: createPair
Num: 
Den: 
Norm: -18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_113

Name: TMP_113 Function: createPair
Num: 2
Den: 1
Norm: -18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesForUsers_9(uint256) := TMP_113(uint256)
Function name: createPair
asgn

Name: TMP_113 Function: createPair
Num: 2
Den: 1
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesForUsers Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: 2
Den: 1
Norm: -18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_119 = CONVERT this to address
has variable
[i] TMP_119 cleared
clearing ir...?
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:router_10(IJoeRouter02), function:addLiquidity, arguments:['wavaxAddress_1', 'tokenAddress_1', 'wavaxReserve_19', 'tokenAllocated_3', 'wavaxReserve_19', 'tokenAllocated_3', 'TMP_119', 'block.timestamp']  
has variable
clearing ir...?
router_11(IJoeRouter02) := ϕ(['router_10', 'router_1', 'router_11'])
has variable
clearing ir...?
factory_11(IJoeFactory) := ϕ(['factory_1', 'factory_12', 'factory_10'])
has variable
clearing ir...?
tokenReserve_11(uint256) := ϕ(['tokenReserve_24', 'tokenReserve_21', 'tokenReserve_10', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
has variable
clearing ir...?
wavaxReserve_20(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_19', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10'])
has variable
clearing ir...?
lpSupply_1(uint256)= UNPACK TUPLE_0 index: 2 
has variable
typecheckig node...
TMP_119 = CONVERT this to address
Function name: createPair
[i]Type for TMP_119

Name: TMP_119 Function: createPair
Num: -1
Den: -1
Norm: u
LF: LaunchEvent
Fields: 
Finance Type: undef
done.
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:router_10(IJoeRouter02), function:addLiquidity, arguments:['wavaxAddress_1', 'tokenAddress_1', 'wavaxReserve_19', 'tokenAllocated_3', 'wavaxReserve_19', 'tokenAllocated_3', 'TMP_119', 'block.timestamp']  
Function name: createPair
High Call: addLiquidity
func name:addLiquidity
other func name:addLiquidity
TUPLE_0
hlc contract name: ROUTER func_name: addLiquidity
('c', [-1], [-1], 'u', None)
wavaxAddress
tokenAddress
wavaxReserve
tokenAllocated
wavaxReserve
tokenAllocated
TMP_119
block.timestamp
('c', [-1], [-1], 'u', None)
wavaxAddress
tokenAddress
wavaxReserve
tokenAllocated
wavaxReserve
tokenAllocated
TMP_119
block.timestamp
('c', [-1], [-1], 'u', None)
wavaxAddress
tokenAddress
wavaxReserve
tokenAllocated
wavaxReserve
tokenAllocated
TMP_119
block.timestamp
wfc len: 3
COPIED
[i]Type for TUPLE_0

Name: TUPLE_0 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
router_11(IJoeRouter02) := ϕ(['router_10', 'router_1', 'router_11'])
Function name: createPair
Phi
[i]Type for router

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
done.
factory_11(IJoeFactory) := ϕ(['factory_1', 'factory_12', 'factory_10'])
Function name: createPair
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
tokenReserve_11(uint256) := ϕ(['tokenReserve_24', 'tokenReserve_21', 'tokenReserve_10', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
Function name: createPair
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_20(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_19', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10'])
Function name: createPair
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
lpSupply_1(uint256)= UNPACK TUPLE_0 index: 2 
Function name: createPair
Reading tuple TUPLE_0 index 2
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for lpSupply

Name: lpSupply Function: createPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_114(uint256) = tokenIncentivesBalance_8 (c)- tokenIncentivesForUsers_9
has variable
[i] TMP_114 cleared
clearing ir...?
tokenIncentiveIssuerRefund_1(uint256) := TMP_114(uint256)
has variable
typecheckig node...
TMP_114(uint256) = tokenIncentivesBalance_8 (c)- tokenIncentivesForUsers_9
Function name: createPair
Error with TMP_114 in function createPair
Error with: TMP_114 in function createPair
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fa068358130>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fa068363070>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fa068363790>]
lnorm: 18 rnorm: -18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesForUsers Function: global
Num: 2
Den: 1
Norm: -18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_114

Name: TMP_114 Function: createPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentiveIssuerRefund_1(uint256) := TMP_114(uint256)
Function name: createPair
asgn

Name: TMP_114 Function: createPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentiveIssuerRefund Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenIncentiveIssuerRefund

Name: tokenIncentiveIssuerRefund Function: createPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_120(address) = HIGH_LEVEL_CALL, dest:factory_11(IJoeFactory), function:getPair, arguments:['tokenAddress_1', 'wavaxAddress_1']  
has variable
[i] TMP_120 cleared
clearing ir...?
factory_12(IJoeFactory) := ϕ(['factory_11', 'factory_1', 'factory_12'])
has variable
clearing ir...?
tokenReserve_12(uint256) := ϕ(['tokenReserve_11', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
has variable
clearing ir...?
wavaxReserve_21(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_20', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10'])
has variable
clearing ir...?
TMP_121 = CONVERT TMP_120 to IJoePair
has variable
[i] TMP_121 cleared
clearing ir...?
pair_1(IJoePair) := TMP_121(IJoePair)
has variable
typecheckig node...
TMP_120(address) = HIGH_LEVEL_CALL, dest:factory_11(IJoeFactory), function:getPair, arguments:['tokenAddress_1', 'wavaxAddress_1']  
Function name: createPair
High Call: getPair
func name:getPair
other func name:getPair
TMP_120
hlc contract name: FACTORY func_name: getPair
('c', [-1], [-1], 0, 'JOEPAIR')
tokenAddress
wavaxAddress
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'JOEPAIR', -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_120

Name: TMP_120 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
factory_12(IJoeFactory) := ϕ(['factory_11', 'factory_1', 'factory_12'])
Function name: createPair
Phi
[i]Type for factory

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
done.
tokenReserve_12(uint256) := ϕ(['tokenReserve_11', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_17', 'tokenReserve_20'])
Function name: createPair
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_21(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_20', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10'])
Function name: createPair
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
TMP_121 = CONVERT TMP_120 to IJoePair
Function name: createPair

Name: TMP_120 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef

Name: TMP_121 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_121

Name: TMP_121 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
pair_1(IJoePair) := TMP_121(IJoePair)
Function name: createPair
asgn

Name: TMP_121 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef

Name: pair Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for pair

Name: pair Function: createPair
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
wavaxAllocated_1(uint256) := wavaxReserve_21(uint256)
has variable
typecheckig node...
wavaxAllocated_1(uint256) := wavaxReserve_21(uint256)
Function name: createPair
asgn

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: wavaxAllocated Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: createPair
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
wavaxReserve_22(uint256) := 0(uint256)
has variable
typecheckig node...
wavaxReserve_22(uint256) := 0(uint256)
Function name: createPair
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
tokenReserve_13(uint256) = tokenReserve_12 (c)- tokenAllocated_3
has variable
typecheckig node...
tokenReserve_13(uint256) = tokenReserve_12 (c)- tokenAllocated_3
Function name: createPair
Error with tokenReserve in function createPair
Error with: tokenReserve in function createPair
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fa068358130>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fa068363070>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fa068363790>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fa0682f5dc0>]
lnorm: 18 rnorm: -18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: tokenAllocated Function: createPair
Num: 2
Den: 1
Norm: -18
LF: None
Fields: 
Finance Type: undef
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_122 = CONVERT pair_1 to address
has variable
[i] TMP_122 cleared
clearing ir...?
Emit LiquidityPoolCreated(TMP_122,tokenAddress_1,wavaxAddress_1,tokenAllocated_3,wavaxAllocated_1)
typecheckig node...
TMP_122 = CONVERT pair_1 to address
Function name: createPair

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef

Name: TMP_122 Function: createPair
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_122

Name: TMP_122 Function: createPair
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
Emit LiquidityPoolCreated(TMP_122,tokenAddress_1,wavaxAddress_1,tokenAllocated_3,wavaxAllocated_1)
WORKLIST iteration 0 for function call "createPair":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: createPair
State_var: WAVAX
Finding type for WAVAX...
IWAVAX
Check copy_toekn_tuple
(-1, -1, 0, 'WAVAX')
----
Type: IWAVAX
IWAVAX
Final Type: IWAVAX
 NO FIELDS

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rocketJoeFactory
Finding type for rocketJoeFactory...
IRocketJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'RJFACTORY')
----
Type: IRocketJoeFactory
IRocketJoeFactory
Final Type: IRocketJoeFactory
 NO FIELDS

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token
Finding type for token...
IERC20Metadata
Check copy_toekn_tuple
(-1, -1, 0, 'TOKEN')
----
Type: IERC20Metadata
IERC20Metadata
Final Type: IERC20Metadata
 NO FIELDS

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesBalance
Finding type for tokenIncentivesBalance...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenReserve
Finding type for tokenReserve...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxReserve
Finding type for wavaxReserve...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: getUserInfo
Finding type for getUserInfo...
mapping(address => LaunchEvent.UserInfo)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => LaunchEvent.UserInfo)
mapping(address => LaunchEvent.UserInfo)
LaunchEvent.UserInfo
Final Type: LaunchEvent.UserInfo
global
getUserInfo
allocation
global
getUserInfo
balance
global
getUserInfo
hasWithdrawnPair
global
getUserInfo
hasWithdrawnIncentives
FIELDS:
getUserInfo Fields:
^^^

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuer
Finding type for issuer...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ISSUER')
----
Type: address
address
Final Type: address

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pair
Finding type for pair...
IJoePair
Check copy_toekn_tuple
(-1, -1, 0, 'JOEPAIR')
----
Type: IJoePair
IJoePair
Final Type: IJoePair
 NO FIELDS

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentiveIssuerRefund
Finding type for tokenIncentiveIssuerRefund...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesForUsers
Finding type for tokenIncentivesForUsers...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxAllocated
Finding type for wavaxAllocated...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: initialized
Finding type for initialized...
bool
SKIP bool
State_var: PHASE_ONE_DURATION
Finding type for PHASE_ONE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_TWO_DURATION
Finding type for PHASE_TWO_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: auctionStart
Finding type for auctionStart...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuerTimelock
Finding type for issuerTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: issuerTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: userTimelock
Finding type for userTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: userTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpSupply
Finding type for lpSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_ONE_NO_FEE_DURATION
Finding type for PHASE_ONE_NO_FEE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: fixedWithdrawPenalty
Finding type for fixedWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: fixedWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: maxWithdrawPenalty
Finding type for maxWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: factory
Finding type for factory...
IJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IJoeFactory
IJoeFactory
Final Type: IJoeFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: floorPrice
Finding type for floorPrice...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
IJoeRouter02
Check copy_toekn_tuple
(-1, -1, 0, 'ROUTER')
----
Type: IJoeRouter02
IJoeRouter02
Final Type: IJoeRouter02
 NO FIELDS

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: stopped
Finding type for stopped...
bool
SKIP bool
State_var: maxAllocation
Finding type for maxAllocation...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxAllocation Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoe
Finding type for rJoe...
IRocketJoeToken
Check copy_toekn_tuple
(-1, -1, 0, 'RJTOKEN')
----
Type: IRocketJoeToken
IRocketJoeToken
Final Type: IRocketJoeToken
 NO FIELDS

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoePerAvax
Finding type for rJoePerAvax...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: rJoePerAvax Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: withdrawLiquidity
Function name: withdrawLiquidity
Function Visibility (test): external
-100
Add new
clearning node...
clearing ir...?
issuer_5(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
has variable
clearing ir...?
token_12(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_21', 'token_26', 'token_0', 'token_25', 'token_11', 'token_22'])
has variable
clearing ir...?
getUserInfo_10(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
has variable
clearing ir...?
pair_2(IJoePair) := ϕ(['pair_7', 'pair_0', 'pair_1', 'pair_9'])
has variable
clearing ir...?
lpSupply_2(uint256) := ϕ(['lpSupply_0', 'lpSupply_5', 'lpSupply_1'])
has variable
clearing ir...?
tokenReserve_14(uint256) := ϕ(['tokenReserve_0', 'tokenReserve_20', 'tokenReserve_17', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_13', 'tokenReserve_1'])
has variable
typecheckig node...
issuer_5(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: withdrawLiquidity
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
token_12(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_21', 'token_26', 'token_0', 'token_25', 'token_11', 'token_22'])
Function name: withdrawLiquidity
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
getUserInfo_10(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: withdrawLiquidity
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pair_2(IJoePair) := ϕ(['pair_7', 'pair_0', 'pair_1', 'pair_9'])
Function name: withdrawLiquidity
Phi
[i]Type for pair

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
lpSupply_2(uint256) := ϕ(['lpSupply_0', 'lpSupply_5', 'lpSupply_1'])
Function name: withdrawLiquidity
Phi
[i]Type for lpSupply

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tokenReserve_14(uint256) := ϕ(['tokenReserve_0', 'tokenReserve_20', 'tokenReserve_17', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_13', 'tokenReserve_1'])
Function name: withdrawLiquidity
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
Internal call...
isStopped
False
Function: isStopped
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
clearning node...
clearing ir...?
MODIFIER_CALL, LaunchEvent.timelockElapsed()()
typecheckig node...
MODIFIER_CALL, LaunchEvent.timelockElapsed()()
Internal call...
timelockElapsed
Function: timelockElapsed
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: timelockElapsed
Function Visibility: internal
clearning node...
clearing ir...?
issuer_14(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
has variable
clearing ir...?
auctionStart_4(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
has variable
clearing ir...?
PHASE_ONE_DURATION_4(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
has variable
clearing ir...?
PHASE_TWO_DURATION_3(uint256) := ϕ(['PHASE_TWO_DURATION_1', 'PHASE_TWO_DURATION_0'])
has variable
clearing ir...?
userTimelock_2(uint256) := ϕ(['userTimelock_1', 'userTimelock_0'])
has variable
clearing ir...?
issuerTimelock_2(uint256) := ϕ(['issuerTimelock_1', 'issuerTimelock_0'])
has variable
typecheckig node...
issuer_14(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: timelockElapsed
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
auctionStart_4(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
Function name: timelockElapsed
Phi
[i]Type for auctionStart

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
PHASE_ONE_DURATION_4(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Function name: timelockElapsed
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
PHASE_TWO_DURATION_3(uint256) := ϕ(['PHASE_TWO_DURATION_1', 'PHASE_TWO_DURATION_0'])
Function name: timelockElapsed
Phi
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
userTimelock_2(uint256) := ϕ(['userTimelock_1', 'userTimelock_0'])
Function name: timelockElapsed
Phi
[i]Type for userTimelock

Name: userTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
issuerTimelock_2(uint256) := ϕ(['issuerTimelock_1', 'issuerTimelock_0'])
Function name: timelockElapsed
Phi
[i]Type for issuerTimelock

Name: issuerTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_230(uint256) = auctionStart_4 (c)+ PHASE_ONE_DURATION_4
has variable
[i] TMP_230 cleared
clearing ir...?
TMP_231(uint256) = TMP_230 (c)+ PHASE_TWO_DURATION_3
has variable
[i] TMP_231 cleared
clearing ir...?
phase3Start_1(uint256) := TMP_231(uint256)
has variable
[i] phase3Start cleared
typecheckig node...
TMP_230(uint256) = auctionStart_4 (c)+ PHASE_ONE_DURATION_4
Function name: timelockElapsed

Name: TMP_230 Function: timelockElapsed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_230 Function: timelockElapsed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_230

Name: TMP_230 Function: timelockElapsed
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_231(uint256) = TMP_230 (c)+ PHASE_TWO_DURATION_3
Function name: timelockElapsed

Name: TMP_231 Function: timelockElapsed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_231 Function: timelockElapsed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_231

Name: TMP_231 Function: timelockElapsed
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
phase3Start_1(uint256) := TMP_231(uint256)
Function name: timelockElapsed
asgn

Name: TMP_231 Function: timelockElapsed
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: phase3Start Function: timelockElapsed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for phase3Start

Name: phase3Start Function: timelockElapsed
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_232(bool) = msg.sender == issuer_14
has variable
[i] TMP_232 cleared
clearing ir...?
CONDITION TMP_232
typecheckig node...
TMP_232(bool) = msg.sender == issuer_14
Function name: timelockElapsed
[i]Type for TMP_232

Name: TMP_232 Function: timelockElapsed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_232
Condition...
Conidtion: 
TMP_232
TMP_232
clearning node...
clearing ir...?
TMP_233(uint256) = phase3Start_1 (c)+ issuerTimelock_2
has variable
[i] TMP_233 cleared
clearing ir...?
TMP_234(bool) = block.timestamp > TMP_233
has variable
[i] TMP_234 cleared
clearing ir...?
TMP_235(None) = SOLIDITY_CALL require(bool,string)(TMP_234,LaunchEvent: can't withdraw before issuer's timelock)
typecheckig node...
TMP_233(uint256) = phase3Start_1 (c)+ issuerTimelock_2
Function name: timelockElapsed

Name: TMP_233 Function: timelockElapsed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: issuerTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_233 Function: timelockElapsed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_233

Name: TMP_233 Function: timelockElapsed
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_234(bool) = block.timestamp > TMP_233
Function name: timelockElapsed
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_233 Function: timelockElapsed
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_234

Name: TMP_234 Function: timelockElapsed
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_235(None) = SOLIDITY_CALL require(bool,string)(TMP_234,LaunchEvent: can't withdraw before issuer's timelock)
[i]Type for TMP_235

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_236(uint256) = phase3Start_1 (c)+ userTimelock_2
has variable
[i] TMP_236 cleared
clearing ir...?
TMP_237(bool) = block.timestamp > TMP_236
has variable
[i] TMP_237 cleared
clearing ir...?
TMP_238(None) = SOLIDITY_CALL require(bool,string)(TMP_237,LaunchEvent: can't withdraw before user's timelock)
typecheckig node...
TMP_236(uint256) = phase3Start_1 (c)+ userTimelock_2
Function name: timelockElapsed

Name: TMP_236 Function: timelockElapsed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: userTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_236 Function: timelockElapsed
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_236

Name: TMP_236 Function: timelockElapsed
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_237(bool) = block.timestamp > TMP_236
Function name: timelockElapsed
testing gt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_236 Function: timelockElapsed
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_237

Name: TMP_237 Function: timelockElapsed
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_238(None) = SOLIDITY_CALL require(bool,string)(TMP_237,LaunchEvent: can't withdraw before user's timelock)
[i]Type for TMP_238

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "timelockElapsed":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: timelockElapsed
done.
clearning node...
clearing ir...?
TMP_126 = CONVERT pair_4 to address
has variable
[i] TMP_126 cleared
clearing ir...?
TMP_127 = CONVERT 0 to address
has variable
[i] TMP_127 cleared
clearing ir...?
TMP_128(bool) = TMP_126 != TMP_127
has variable
[i] TMP_128 cleared
clearing ir...?
TMP_129(None) = SOLIDITY_CALL require(bool,string)(TMP_128,LaunchEvent: pair not created)
typecheckig node...
TMP_126 = CONVERT pair_4 to address
Function name: withdrawLiquidity

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef

Name: TMP_126 Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_126

Name: TMP_126 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
TMP_127 = CONVERT 0 to address
Function name: withdrawLiquidity
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_127 Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_127

Name: TMP_127 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_128(bool) = TMP_126 != TMP_127
Function name: withdrawLiquidity
[i]Type for TMP_128

Name: TMP_128 Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_129(None) = SOLIDITY_CALL require(bool,string)(TMP_128,LaunchEvent: pair not created)
[i]Type for TMP_129

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_39(LaunchEvent.UserInfo) -> getUserInfo_12[msg.sender]
has variable
clearing ir...?
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_39(LaunchEvent.UserInfo)
has variable
[i] user cleared
typecheckig node...
REF_39(LaunchEvent.UserInfo) -> getUserInfo_12[msg.sender]
Function name: withdrawLiquidity
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_39

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_39(LaunchEvent.UserInfo) -> getUserInfo_12[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_39(LaunchEvent.UserInfo)
Function name: withdrawLiquidity
asgn

Name: REF_39 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_40(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
has variable
clearing ir...?
TMP_130 = ! REF_40 
clearing ir...?
TMP_131(None) = SOLIDITY_CALL require(bool,string)(TMP_130,LaunchEvent: liquidity already withdrawn)
typecheckig node...
REF_40(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
Function name: withdrawLiquidity
MEMBER
user
hasWithdrawnPair
withdrawLiquidity
user Fields:
^^^
[i]Type for REF_40

Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_130 = ! REF_40 
[i]Type for TMP_130

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_131(None) = SOLIDITY_CALL require(bool,string)(TMP_130,LaunchEvent: liquidity already withdrawn)
[i]Type for TMP_131

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_132(uint256) = INTERNAL_CALL, LaunchEvent.pairBalance(address)(msg.sender)
has variable
[i] TMP_132 cleared
clearing ir...?
balance_1(uint256) := TMP_132(uint256)
has variable
[i] balance cleared
typecheckig node...
TMP_132(uint256) = INTERNAL_CALL, LaunchEvent.pairBalance(address)(msg.sender)
Function name: withdrawLiquidity
Internal call...
pairBalance
msg.sender
Function: pairBalance
ic
msg.sender
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: pairBalance
Function Visibility: public
clearning node...
clearing ir...?
_user_1(address) := ϕ(['msg.sender'])
has variable
[i] _user cleared
clearing ir...?
getUserInfo_20(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
has variable
clearing ir...?
wavaxAllocated_4(uint256) := ϕ(['wavaxAllocated_1', 'wavaxAllocated_0', 'wavaxAllocated_3'])
has variable
clearing ir...?
lpSupply_6(uint256) := ϕ(['lpSupply_0', 'lpSupply_5', 'lpSupply_1'])
has variable
typecheckig node...
_user_1(address) := ϕ(['msg.sender'])
Function name: pairBalance
Phi
[i]Type for _user

Name: _user Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: _user
Fields: 
Finance Type: undef
done.
getUserInfo_20(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: pairBalance
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
wavaxAllocated_4(uint256) := ϕ(['wavaxAllocated_1', 'wavaxAllocated_0', 'wavaxAllocated_3'])
Function name: pairBalance
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
lpSupply_6(uint256) := ϕ(['lpSupply_0', 'lpSupply_5', 'lpSupply_1'])
Function name: pairBalance
Phi
[i]Type for lpSupply

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_61(LaunchEvent.UserInfo) -> getUserInfo_20[_user_1]
has variable
clearing ir...?
user_1(LaunchEvent.UserInfo) := REF_61(LaunchEvent.UserInfo)
has variable
[i] user cleared
typecheckig node...
REF_61(LaunchEvent.UserInfo) -> getUserInfo_20[_user_1]
Function name: pairBalance
INDEX

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_61

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_1(LaunchEvent.UserInfo) := REF_61(LaunchEvent.UserInfo)
Function name: pairBalance
asgn

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: pairBalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_200(bool) = wavaxAllocated_4 == 0
has variable
[i] TMP_200 cleared
clearing ir...?
REF_62(bool) -> user_1.hasWithdrawnPair
has variable
clearing ir...?
TMP_201(bool) = TMP_200 || REF_62
has variable
[i] TMP_201 cleared
clearing ir...?
CONDITION TMP_201
typecheckig node...
TMP_200(bool) = wavaxAllocated_4 == 0
Function name: pairBalance
[i]Type for TMP_200

Name: TMP_200 Function: pairBalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_62(bool) -> user_1.hasWithdrawnPair
Function name: pairBalance
MEMBER
user
hasWithdrawnPair
pairBalance
user Fields:
^^^
[i]Type for REF_62

Name: user.hasWithdrawnPair Function: pairBalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.hasWithdrawnPair Function: pairBalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_201(bool) = TMP_200 || REF_62
Function name: pairBalance
[i]Type for TMP_201

Name: TMP_201 Function: pairBalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_201
Condition...
Conidtion: 
TMP_201
TMP_201
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_63(uint256) -> user_1.balance
has variable
clearing ir...?
TMP_202(uint256) = REF_63 (c)* lpSupply_6
has variable
[i] TMP_202 cleared
clearing ir...?
TMP_203(uint256) = TMP_202 (c)/ wavaxAllocated_4
has variable
[i] TMP_203 cleared
clearing ir...?
TMP_204(uint256) = TMP_203 (c)/ 2
has variable
[i] TMP_204 cleared
clearing ir...?
RETURN TMP_204
typecheckig node...
REF_63(uint256) -> user_1.balance
Function name: pairBalance
MEMBER
user
balance
pairBalance
user Fields:
hasWithdrawnPair
^^^
[i]Type for REF_63

Name: user.balance Function: pairBalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: pairBalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_202(uint256) = REF_63 (c)* lpSupply_6
Function name: pairBalance
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_202 Function: pairBalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_202

Name: TMP_202 Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_202(uint256) = REF_63 (c)* lpSupply_6
XXXXX
TMP_203(uint256) = TMP_202 (c)/ wavaxAllocated_4
Function name: pairBalance
lnorm: u rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_203 Function: pairBalance
Num: 
Den: 
Norm: -6
LF: None
Fields: 
Finance Type: undef

Name: PIC_43 Function: None
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef
done.
TMP_204(uint256) = TMP_203 (c)/ 2
Function name: pairBalance
val: 2
val: 2
lnorm: -6 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_204 Function: pairBalance
Num: 
Den: 
Norm: -6
LF: None
Fields: 
Finance Type: undef

Name: TMP_203 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef

Name: TMP_204 Function: pairBalance
Num: 
Den: 
Norm: -6
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_204
RETURN

Name: TMP_204 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
RETURN 0
typecheckig node...
RETURN 0
RETURN
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pairBalance":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
_user_1(address) := ϕ(['msg.sender'])
Function name: pairBalance
Phi
[i]Type for _user

Name: _user Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: _user
Fields: 
Finance Type: undef
done.
getUserInfo_20(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: pairBalance
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
wavaxAllocated_4(uint256) := ϕ(['wavaxAllocated_1', 'wavaxAllocated_0', 'wavaxAllocated_3'])
Function name: pairBalance
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
lpSupply_6(uint256) := ϕ(['lpSupply_0', 'lpSupply_5', 'lpSupply_1'])
Function name: pairBalance
Phi
[i]Type for lpSupply

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_61(LaunchEvent.UserInfo) -> getUserInfo_20[_user_1]
Function name: pairBalance
INDEX

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_61

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_1(LaunchEvent.UserInfo) := REF_61(LaunchEvent.UserInfo)
Function name: pairBalance
asgn

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: hasWithdrawnPair, balance
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: hasWithdrawnPair, balance
Finance Type: undef
done.
typecheckig node...
TMP_200(bool) = wavaxAllocated_4 == 0
Function name: pairBalance
[i]Type for TMP_200

Name: TMP_200 Function: pairBalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_62(bool) -> user_1.hasWithdrawnPair
Function name: pairBalance
MEMBER
user
hasWithdrawnPair
pairBalance
user Fields:
hasWithdrawnPair
balance
^^^

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_62

Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_201(bool) = TMP_200 || REF_62
Function name: pairBalance
[i]Type for TMP_201

Name: TMP_201 Function: pairBalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_201
Condition...
Conidtion: 
TMP_201
TMP_201
typecheckig node...
typecheckig node...
REF_63(uint256) -> user_1.balance
Function name: pairBalance
MEMBER
user
balance
pairBalance
user Fields:
hasWithdrawnPair
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_63

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_202(uint256) = REF_63 (c)* lpSupply_6
Function name: pairBalance
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_202 Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_202

Name: TMP_202 Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_203(uint256) = TMP_202 (c)/ wavaxAllocated_4
Function name: pairBalance
lnorm: u rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_203 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef

Name: PIC_45 Function: None
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef
done.
TMP_204(uint256) = TMP_203 (c)/ 2
Function name: pairBalance
val: 2
val: 2
lnorm: -6 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_204 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef

Name: TMP_203 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef

Name: TMP_204 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_204
RETURN

Name: TMP_204 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
RETURN 0
typecheckig node...
RETURN 0
RETURN
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "pairBalance":
 New undefined nodes- 0
 Old undefined nodes- 1
typecheckig node...
_user_1(address) := ϕ(['msg.sender'])
Function name: pairBalance
Phi
[i]Type for _user

Name: _user Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: _user
Fields: 
Finance Type: undef
done.
getUserInfo_20(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: pairBalance
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
wavaxAllocated_4(uint256) := ϕ(['wavaxAllocated_1', 'wavaxAllocated_0', 'wavaxAllocated_3'])
Function name: pairBalance
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
lpSupply_6(uint256) := ϕ(['lpSupply_0', 'lpSupply_5', 'lpSupply_1'])
Function name: pairBalance
Phi
[i]Type for lpSupply

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_61(LaunchEvent.UserInfo) -> getUserInfo_20[_user_1]
Function name: pairBalance
INDEX

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_61

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_1(LaunchEvent.UserInfo) := REF_61(LaunchEvent.UserInfo)
Function name: pairBalance
asgn

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: hasWithdrawnPair, balance
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: hasWithdrawnPair, balance
Finance Type: undef
done.
typecheckig node...
TMP_200(bool) = wavaxAllocated_4 == 0
Function name: pairBalance
[i]Type for TMP_200

Name: TMP_200 Function: pairBalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_62(bool) -> user_1.hasWithdrawnPair
Function name: pairBalance
MEMBER
user
hasWithdrawnPair
pairBalance
user Fields:
hasWithdrawnPair
balance
^^^

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_62

Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_201(bool) = TMP_200 || REF_62
Function name: pairBalance
[i]Type for TMP_201

Name: TMP_201 Function: pairBalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_201
Condition...
Conidtion: 
TMP_201
TMP_201
typecheckig node...
typecheckig node...
REF_63(uint256) -> user_1.balance
Function name: pairBalance
MEMBER
user
balance
pairBalance
user Fields:
hasWithdrawnPair
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_63

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_202(uint256) = REF_63 (c)* lpSupply_6
Function name: pairBalance
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_202 Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_202

Name: TMP_202 Function: pairBalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_203(uint256) = TMP_202 (c)/ wavaxAllocated_4
Function name: pairBalance
lnorm: u rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_203 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef

Name: PIC_47 Function: None
Num: -1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_203

Name: TMP_203 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef
done.
TMP_204(uint256) = TMP_203 (c)/ 2
Function name: pairBalance
val: 2
val: 2
lnorm: -6 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_204 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef

Name: TMP_203 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef

Name: TMP_204 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_204

Name: TMP_204 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_204
RETURN

Name: TMP_204 Function: pairBalance
Num: -1
Den: 2
Norm: -6
LF: None
Fields: 
Finance Type: undef
clearning node...
clearing ir...?
RETURN 0
typecheckig node...
RETURN 0
RETURN
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 2 for function call "pairBalance":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pairBalance

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for TMP_132

Name: TMP_132 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
balance_1(uint256) := TMP_132(uint256)
Function name: withdrawLiquidity
asgn

Name: TMP_132 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: balance Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_41(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
has variable
clearing ir...?
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
has variable
[i] user cleared
clearing ir...?
REF_41 (->user_2 (-> ['getUserInfo'])) := True(bool)
has variable
clearing ir...?
getUserInfo_13(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
has variable
typecheckig node...
REF_41(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
Function name: withdrawLiquidity
MEMBER
user
hasWithdrawnPair
withdrawLiquidity
user Fields:
hasWithdrawnPair
^^^

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_41

Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: withdrawLiquidity
Phi
[i]Type for user

Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: hasWithdrawnPair
Finance Type: undef
done.
REF_41 (->user_2 (-> ['getUserInfo'])) := True(bool)
Function name: withdrawLiquidity
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_41

Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_13(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: withdrawLiquidity
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_133(bool) = msg.sender == issuer_8
has variable
[i] TMP_133 cleared
clearing ir...?
CONDITION TMP_133
typecheckig node...
TMP_133(bool) = msg.sender == issuer_8
Function name: withdrawLiquidity
[i]Type for TMP_133

Name: TMP_133 Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_133
Condition...
Conidtion: 
TMP_133
TMP_133
clearning node...
clearing ir...?
TMP_139 = CONVERT pair_5 to address
has variable
[i] TMP_139 cleared
clearing ir...?
Emit UserLiquidityWithdrawn(msg.sender,TMP_139,balance_1)
typecheckig node...
TMP_139 = CONVERT pair_5 to address
Function name: withdrawLiquidity

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef

Name: TMP_139 Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_139

Name: TMP_139 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
Emit UserLiquidityWithdrawn(msg.sender,TMP_139,balance_1)
clearning node...
clearing ir...?
TMP_134(uint256) = lpSupply_5 (c)/ 2
has variable
[i] TMP_134 cleared
clearing ir...?
balance_2(uint256) := TMP_134(uint256)
has variable
[i] balance cleared
typecheckig node...
TMP_134(uint256) = lpSupply_5 (c)/ 2
Function name: withdrawLiquidity
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_134 Function: withdrawLiquidity
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 2
[i]Type for TMP_134

Name: TMP_134 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
balance_2(uint256) := TMP_134(uint256)
Function name: withdrawLiquidity
asgn

Name: TMP_134 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: balance Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_135 = CONVERT pair_5 to address
has variable
[i] TMP_135 cleared
clearing ir...?
Emit IssuerLiquidityWithdrawn(msg.sender,TMP_135,balance_2)
typecheckig node...
TMP_135 = CONVERT pair_5 to address
Function name: withdrawLiquidity

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef

Name: TMP_135 Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_135

Name: TMP_135 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
Emit IssuerLiquidityWithdrawn(msg.sender,TMP_135,balance_2)
clearning node...
clearing ir...?
balance_3(uint256) := ϕ(['balance_1', 'balance_2'])
has variable
[i] balance cleared
typecheckig node...
balance_3(uint256) := ϕ(['balance_1', 'balance_2'])
Function name: withdrawLiquidity
Phi
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_137(bool) = tokenReserve_17 > 0
has variable
[i] TMP_137 cleared
clearing ir...?
CONDITION TMP_137
typecheckig node...
TMP_137(bool) = tokenReserve_17 > 0
Function name: withdrawLiquidity
testing gt...
val: 0
val: 0
lnorm: 18 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_137

Name: TMP_137 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_137
Condition...
Conidtion: 
TMP_137
TMP_137
clearning node...
clearing ir...?
amount_1(uint256) := tokenReserve_17(uint256)
has variable
[i] amount cleared
typecheckig node...
amount_1(uint256) := tokenReserve_17(uint256)
Function name: withdrawLiquidity
asgn

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: amount Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amount

Name: amount Function: withdrawLiquidity
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_141(bool) = HIGH_LEVEL_CALL, dest:pair_6(IJoePair), function:transfer, arguments:['msg.sender', 'balance_3']  
has variable
[i] TMP_141 cleared
clearing ir...?
pair_7(IJoePair) := ϕ(['pair_6', 'pair_7', 'pair_9', 'pair_1'])
has variable
typecheckig node...
TMP_141(bool) = HIGH_LEVEL_CALL, dest:pair_6(IJoePair), function:transfer, arguments:['msg.sender', 'balance_3']  
Function name: withdrawLiquidity
High Call: transfer
func name:transfer
other func name:transfer
TMP_141
[i]Type for TMP_141

Name: TMP_141 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pair_7(IJoePair) := ϕ(['pair_6', 'pair_7', 'pair_9', 'pair_1'])
Function name: withdrawLiquidity
Phi
[i]Type for pair

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
tokenReserve_18(uint256) := 0(uint256)
has variable
typecheckig node...
tokenReserve_18(uint256) := 0(uint256)
Function name: withdrawLiquidity
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: tokenReserve Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenReserve

Name: tokenReserve Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_138(bool) = HIGH_LEVEL_CALL, dest:token_15(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_1']  
has variable
[i] TMP_138 cleared
clearing ir...?
token_16(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_21', 'token_25', 'token_11', 'token_22'])
has variable
clearing ir...?
pair_6(IJoePair) := ϕ(['pair_5', 'pair_7', 'pair_9', 'pair_1'])
has variable
typecheckig node...
TMP_138(bool) = HIGH_LEVEL_CALL, dest:token_15(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_1']  
Function name: withdrawLiquidity
High Call: transfer
func name:transfer
other func name:transfer
TMP_138
[i]Type for TMP_138

Name: TMP_138 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token_16(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: withdrawLiquidity
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
pair_6(IJoePair) := ϕ(['pair_5', 'pair_7', 'pair_9', 'pair_1'])
Function name: withdrawLiquidity
Phi
[i]Type for pair

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "withdrawLiquidity":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
issuer_5(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: withdrawLiquidity
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
token_12(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_21', 'token_26', 'token_0', 'token_25', 'token_11', 'token_22'])
Function name: withdrawLiquidity
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
getUserInfo_10(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: withdrawLiquidity
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pair_2(IJoePair) := ϕ(['pair_7', 'pair_0', 'pair_1', 'pair_9'])
Function name: withdrawLiquidity
Phi
[i]Type for pair

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
lpSupply_2(uint256) := ϕ(['lpSupply_0', 'lpSupply_5', 'lpSupply_1'])
Function name: withdrawLiquidity
Phi
[i]Type for lpSupply

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tokenReserve_14(uint256) := ϕ(['tokenReserve_0', 'tokenReserve_20', 'tokenReserve_17', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_13', 'tokenReserve_1'])
Function name: withdrawLiquidity
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
Internal call...
isStopped
False
Function: isStopped
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
typecheckig node...
MODIFIER_CALL, LaunchEvent.timelockElapsed()()
Internal call...
timelockElapsed
Function: timelockElapsed
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
typecheckig node...
TMP_126 = CONVERT pair_4 to address
Function name: withdrawLiquidity

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef

Name: TMP_126 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[i]Type for TMP_126

Name: TMP_126 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
TMP_127 = CONVERT 0 to address
Function name: withdrawLiquidity
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_127 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_127

Name: TMP_127 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_128(bool) = TMP_126 != TMP_127
Function name: withdrawLiquidity
[i]Type for TMP_128

Name: TMP_128 Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_129(None) = SOLIDITY_CALL require(bool,string)(TMP_128,LaunchEvent: pair not created)
[i]Type for TMP_129

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_39(LaunchEvent.UserInfo) -> getUserInfo_12[msg.sender]
Function name: withdrawLiquidity
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_39

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_39(LaunchEvent.UserInfo) -> getUserInfo_12[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_39(LaunchEvent.UserInfo)
Function name: withdrawLiquidity
asgn

Name: REF_39 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: hasWithdrawnPair
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: hasWithdrawnPair
Finance Type: undef
done.
typecheckig node...
REF_40(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
Function name: withdrawLiquidity
MEMBER
user
hasWithdrawnPair
withdrawLiquidity
user Fields:
hasWithdrawnPair
^^^

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_40

Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_130 = ! REF_40 
[i]Type for TMP_130

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_131(None) = SOLIDITY_CALL require(bool,string)(TMP_130,LaunchEvent: liquidity already withdrawn)
[i]Type for TMP_131

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_132(uint256) = INTERNAL_CALL, LaunchEvent.pairBalance(address)(msg.sender)
Function name: withdrawLiquidity
Internal call...
pairBalance
msg.sender
Function: pairBalance
ic
msg.sender
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0
[i]Type for TMP_132

Name: TMP_132 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
balance_1(uint256) := TMP_132(uint256)
Function name: withdrawLiquidity
asgn

Name: TMP_132 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_41(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
Function name: withdrawLiquidity
MEMBER
user
hasWithdrawnPair
withdrawLiquidity
user Fields:
hasWithdrawnPair
^^^

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_41

Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: withdrawLiquidity
Phi
[i]Type for user

Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: hasWithdrawnPair
Finance Type: undef
done.
REF_41 (->user_2 (-> ['getUserInfo'])) := True(bool)
Function name: withdrawLiquidity
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_41

Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_13(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: withdrawLiquidity
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_133(bool) = msg.sender == issuer_8
Function name: withdrawLiquidity
[i]Type for TMP_133

Name: TMP_133 Function: withdrawLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_133
Condition...
Conidtion: 
TMP_133
TMP_133
typecheckig node...
TMP_139 = CONVERT pair_5 to address
Function name: withdrawLiquidity

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef

Name: TMP_139 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[i]Type for TMP_139

Name: TMP_139 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
Emit UserLiquidityWithdrawn(msg.sender,TMP_139,balance_1)
typecheckig node...
TMP_134(uint256) = lpSupply_5 (c)/ 2
Function name: withdrawLiquidity
val: 2
val: 2
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_134 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 2
[i]Type for TMP_134

Name: TMP_134 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
balance_2(uint256) := TMP_134(uint256)
Function name: withdrawLiquidity
asgn

Name: TMP_134 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_135 = CONVERT pair_5 to address
Function name: withdrawLiquidity

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef

Name: TMP_135 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[i]Type for TMP_135

Name: TMP_135 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
Emit IssuerLiquidityWithdrawn(msg.sender,TMP_135,balance_2)
typecheckig node...
balance_3(uint256) := ϕ(['balance_1', 'balance_2'])
Function name: withdrawLiquidity
Phi
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_137(bool) = tokenReserve_17 > 0
Function name: withdrawLiquidity
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_137

Name: TMP_137 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_137
Condition...
Conidtion: 
TMP_137
TMP_137
typecheckig node...
amount_1(uint256) := tokenReserve_17(uint256)
Function name: withdrawLiquidity
asgn

Name: tokenReserve Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amount Function: withdrawLiquidity
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amount

Name: amount Function: withdrawLiquidity
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_141(bool) = HIGH_LEVEL_CALL, dest:pair_6(IJoePair), function:transfer, arguments:['msg.sender', 'balance_3']  
Function name: withdrawLiquidity
High Call: transfer
func name:transfer
other func name:transfer
TMP_141
[i]Type for TMP_141

Name: TMP_141 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pair_7(IJoePair) := ϕ(['pair_6', 'pair_7', 'pair_9', 'pair_1'])
Function name: withdrawLiquidity
Phi
[i]Type for pair

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
tokenReserve_18(uint256) := 0(uint256)
Function name: withdrawLiquidity
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: tokenReserve Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenReserve

Name: tokenReserve Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_138(bool) = HIGH_LEVEL_CALL, dest:token_15(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_1']  
Function name: withdrawLiquidity
High Call: transfer
func name:transfer
other func name:transfer
TMP_138
[i]Type for TMP_138

Name: TMP_138 Function: withdrawLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token_16(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: withdrawLiquidity
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
pair_6(IJoePair) := ϕ(['pair_5', 'pair_7', 'pair_9', 'pair_1'])
Function name: withdrawLiquidity
Phi
[i]Type for pair

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "withdrawLiquidity":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: withdrawLiquidity
State_var: WAVAX
Finding type for WAVAX...
IWAVAX
Check copy_toekn_tuple
(-1, -1, 0, 'WAVAX')
----
Type: IWAVAX
IWAVAX
Final Type: IWAVAX
 NO FIELDS

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rocketJoeFactory
Finding type for rocketJoeFactory...
IRocketJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'RJFACTORY')
----
Type: IRocketJoeFactory
IRocketJoeFactory
Final Type: IRocketJoeFactory
 NO FIELDS

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token
Finding type for token...
IERC20Metadata
Check copy_toekn_tuple
(-1, -1, 0, 'TOKEN')
----
Type: IERC20Metadata
IERC20Metadata
Final Type: IERC20Metadata
 NO FIELDS

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesBalance
Finding type for tokenIncentivesBalance...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenReserve
Finding type for tokenReserve...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxReserve
Finding type for wavaxReserve...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: getUserInfo
Finding type for getUserInfo...
mapping(address => LaunchEvent.UserInfo)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => LaunchEvent.UserInfo)
mapping(address => LaunchEvent.UserInfo)
LaunchEvent.UserInfo
Final Type: LaunchEvent.UserInfo
global
getUserInfo
allocation
global
getUserInfo
balance
global
getUserInfo
hasWithdrawnPair
global
getUserInfo
hasWithdrawnIncentives
FIELDS:
getUserInfo Fields:
^^^

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuer
Finding type for issuer...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ISSUER')
----
Type: address
address
Final Type: address

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pair
Finding type for pair...
IJoePair
Check copy_toekn_tuple
(-1, -1, 0, 'JOEPAIR')
----
Type: IJoePair
IJoePair
Final Type: IJoePair
 NO FIELDS

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentiveIssuerRefund
Finding type for tokenIncentiveIssuerRefund...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesForUsers
Finding type for tokenIncentivesForUsers...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxAllocated
Finding type for wavaxAllocated...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: initialized
Finding type for initialized...
bool
SKIP bool
State_var: PHASE_ONE_DURATION
Finding type for PHASE_ONE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_TWO_DURATION
Finding type for PHASE_TWO_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: auctionStart
Finding type for auctionStart...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuerTimelock
Finding type for issuerTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: issuerTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: userTimelock
Finding type for userTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: userTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpSupply
Finding type for lpSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_ONE_NO_FEE_DURATION
Finding type for PHASE_ONE_NO_FEE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: fixedWithdrawPenalty
Finding type for fixedWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: fixedWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: maxWithdrawPenalty
Finding type for maxWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: factory
Finding type for factory...
IJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IJoeFactory
IJoeFactory
Final Type: IJoeFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: floorPrice
Finding type for floorPrice...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
IJoeRouter02
Check copy_toekn_tuple
(-1, -1, 0, 'ROUTER')
----
Type: IJoeRouter02
IJoeRouter02
Final Type: IJoeRouter02
 NO FIELDS

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: stopped
Finding type for stopped...
bool
SKIP bool
State_var: maxAllocation
Finding type for maxAllocation...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxAllocation Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoe
Finding type for rJoe...
IRocketJoeToken
Check copy_toekn_tuple
(-1, -1, 0, 'RJTOKEN')
----
Type: IRocketJoeToken
IRocketJoeToken
Final Type: IRocketJoeToken
 NO FIELDS

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoePerAvax
Finding type for rJoePerAvax...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: rJoePerAvax Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: withdrawIncentives
Function name: withdrawIncentives
Function Visibility (test): external
-100
Add new
clearning node...
clearing ir...?
issuer_9(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
has variable
clearing ir...?
token_17(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_21', 'token_26', 'token_0', 'token_25', 'token_11', 'token_22'])
has variable
clearing ir...?
getUserInfo_14(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
has variable
clearing ir...?
pair_8(IJoePair) := ϕ(['pair_7', 'pair_0', 'pair_1', 'pair_9'])
has variable
clearing ir...?
wavaxAllocated_2(uint256) := ϕ(['wavaxAllocated_1', 'wavaxAllocated_0', 'wavaxAllocated_3'])
has variable
clearing ir...?
tokenIncentivesBalance_9(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
has variable
clearing ir...?
tokenIncentivesForUsers_10(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_0'])
has variable
clearing ir...?
tokenIncentiveIssuerRefund_2(uint256) := ϕ(['tokenIncentiveIssuerRefund_0', 'tokenIncentiveIssuerRefund_1', 'tokenIncentiveIssuerRefund_3'])
has variable
typecheckig node...
issuer_9(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: withdrawIncentives
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
token_17(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_21', 'token_26', 'token_0', 'token_25', 'token_11', 'token_22'])
Function name: withdrawIncentives
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
getUserInfo_14(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: withdrawIncentives
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pair_8(IJoePair) := ϕ(['pair_7', 'pair_0', 'pair_1', 'pair_9'])
Function name: withdrawIncentives
Phi
[i]Type for pair

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
wavaxAllocated_2(uint256) := ϕ(['wavaxAllocated_1', 'wavaxAllocated_0', 'wavaxAllocated_3'])
Function name: withdrawIncentives
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesBalance_9(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
Function name: withdrawIncentives
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesForUsers_10(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_0'])
Function name: withdrawIncentives
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentiveIssuerRefund_2(uint256) := ϕ(['tokenIncentiveIssuerRefund_0', 'tokenIncentiveIssuerRefund_1', 'tokenIncentiveIssuerRefund_3'])
Function name: withdrawIncentives
Phi
[i]Type for tokenIncentiveIssuerRefund

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
Internal call...
isStopped
False
Function: isStopped
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
clearning node...
clearing ir...?
TMP_144 = CONVERT pair_9 to address
has variable
[i] TMP_144 cleared
clearing ir...?
TMP_145 = CONVERT 0 to address
has variable
[i] TMP_145 cleared
clearing ir...?
TMP_146(bool) = TMP_144 != TMP_145
has variable
[i] TMP_146 cleared
clearing ir...?
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,LaunchEvent: pair not created)
typecheckig node...
TMP_144 = CONVERT pair_9 to address
Function name: withdrawIncentives

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef

Name: TMP_144 Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: withdrawIncentives
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
TMP_145 = CONVERT 0 to address
Function name: withdrawIncentives
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_145 Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_145

Name: TMP_145 Function: withdrawIncentives
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_146(bool) = TMP_144 != TMP_145
Function name: withdrawIncentives
[i]Type for TMP_146

Name: TMP_146 Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,LaunchEvent: pair not created)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
has variable
clearing ir...?
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_44(LaunchEvent.UserInfo)
has variable
[i] user cleared
typecheckig node...
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
Function name: withdrawIncentives
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_44

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_44(LaunchEvent.UserInfo)
Function name: withdrawIncentives
asgn

Name: REF_44 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_45(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
has variable
clearing ir...?
TMP_148 = ! REF_45 
clearing ir...?
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,LaunchEvent: incentives already withdrawn)
typecheckig node...
REF_45(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
Function name: withdrawIncentives
MEMBER
user
hasWithdrawnIncentives
withdrawIncentives
user Fields:
^^^
[i]Type for REF_45

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_148 = ! REF_45 
[i]Type for TMP_148

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,LaunchEvent: incentives already withdrawn)
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_46(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
has variable
clearing ir...?
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
has variable
[i] user cleared
clearing ir...?
REF_46 (->user_2 (-> ['getUserInfo'])) := True(bool)
has variable
clearing ir...?
getUserInfo_16(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
has variable
typecheckig node...
REF_46(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
Function name: withdrawIncentives
MEMBER
user
hasWithdrawnIncentives
withdrawIncentives
user Fields:
hasWithdrawnIncentives
^^^

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_46

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: withdrawIncentives
Phi
[i]Type for user

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: hasWithdrawnIncentives
Finance Type: undef
done.
REF_46 (->user_2 (-> ['getUserInfo'])) := True(bool)
Function name: withdrawIncentives
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_46

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_16(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: withdrawIncentives
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_150(bool) = msg.sender == issuer_10
has variable
[i] TMP_150 cleared
clearing ir...?
CONDITION TMP_150
typecheckig node...
TMP_150(bool) = msg.sender == issuer_10
Function name: withdrawIncentives
[i]Type for TMP_150

Name: TMP_150 Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_150
Condition...
Conidtion: 
TMP_150
TMP_150
clearning node...
clearing ir...?
REF_47(uint256) -> user_2 (-> ['getUserInfo']).balance
has variable
clearing ir...?
TMP_151(uint256) = REF_47 (c)* tokenIncentivesForUsers_11
has variable
[i] TMP_151 cleared
clearing ir...?
TMP_152(uint256) = TMP_151 (c)/ wavaxAllocated_3
has variable
[i] TMP_152 cleared
clearing ir...?
amount_2(uint256) := TMP_152(uint256)
has variable
[i] amount cleared
typecheckig node...
REF_47(uint256) -> user_2 (-> ['getUserInfo']).balance
Function name: withdrawIncentives
MEMBER
user
balance
withdrawIncentives
user Fields:
hasWithdrawnIncentives
^^^
[i]Type for REF_47

Name: user.balance Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151(uint256) = REF_47 (c)* tokenIncentivesForUsers_11
Function name: withdrawIncentives
testing mul...
lnorm: u rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: withdrawIncentives
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_151(uint256) = REF_47 (c)* tokenIncentivesForUsers_11
XXXXX
TMP_152(uint256) = TMP_151 (c)/ wavaxAllocated_3
Function name: withdrawIncentives
lnorm: 18 rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_152 Function: withdrawIncentives
Num: 
Den: 
Norm: 12
LF: None
Fields: 
Finance Type: undef

Name: PIC_51 Function: None
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_152 Function: withdrawIncentives
Num: 
Den: 
Norm: 12
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef
done.
amount_2(uint256) := TMP_152(uint256)
Function name: withdrawIncentives
asgn

Name: TMP_152 Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef

Name: amount Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
amount_3(uint256) := ϕ(['amount_1', 'amount_2'])
has variable
[i] amount cleared
typecheckig node...
amount_3(uint256) := ϕ(['amount_1', 'amount_2'])
Function name: withdrawIncentives
Phi
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_153(bool) = amount_3 > 0
has variable
[i] TMP_153 cleared
clearing ir...?
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,LaunchEvent: caller has no incentive to claim)
typecheckig node...
TMP_153(bool) = amount_3 > 0
Function name: withdrawIncentives
testing gt...
val: 0
val: 0
lnorm: 12 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_153

Name: TMP_153 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,LaunchEvent: caller has no incentive to claim)
[i]Type for TMP_154

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
amount_1(uint256) := tokenIncentiveIssuerRefund_3(uint256)
has variable
[i] amount cleared
typecheckig node...
amount_1(uint256) := tokenIncentiveIssuerRefund_3(uint256)
Function name: withdrawIncentives
asgn

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: amount Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
tokenIncentivesBalance_11(uint256) = tokenIncentivesBalance_10 (c)- amount_3
has variable
typecheckig node...
tokenIncentivesBalance_11(uint256) = tokenIncentivesBalance_10 (c)- amount_3
Function name: withdrawIncentives
lnorm: 18 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: amount Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_155(bool) = HIGH_LEVEL_CALL, dest:token_18(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_3']  
has variable
[i] TMP_155 cleared
clearing ir...?
token_19(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_18', 'token_2', 'token_26', 'token_21', 'token_25', 'token_11', 'token_22'])
has variable
typecheckig node...
TMP_155(bool) = HIGH_LEVEL_CALL, dest:token_18(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_3']  
Function name: withdrawIncentives
High Call: transfer
func name:transfer
other func name:transfer
TMP_155
[i]Type for TMP_155

Name: TMP_155 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token_19(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_18', 'token_2', 'token_26', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: withdrawIncentives
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "withdrawIncentives":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
issuer_9(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: withdrawIncentives
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
token_17(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_21', 'token_26', 'token_0', 'token_25', 'token_11', 'token_22'])
Function name: withdrawIncentives
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
getUserInfo_14(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: withdrawIncentives
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pair_8(IJoePair) := ϕ(['pair_7', 'pair_0', 'pair_1', 'pair_9'])
Function name: withdrawIncentives
Phi
[i]Type for pair

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
wavaxAllocated_2(uint256) := ϕ(['wavaxAllocated_1', 'wavaxAllocated_0', 'wavaxAllocated_3'])
Function name: withdrawIncentives
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesBalance_9(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
Function name: withdrawIncentives
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesForUsers_10(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_0'])
Function name: withdrawIncentives
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentiveIssuerRefund_2(uint256) := ϕ(['tokenIncentiveIssuerRefund_0', 'tokenIncentiveIssuerRefund_1', 'tokenIncentiveIssuerRefund_3'])
Function name: withdrawIncentives
Phi
[i]Type for tokenIncentiveIssuerRefund

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
Internal call...
isStopped
False
Function: isStopped
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
typecheckig node...
TMP_144 = CONVERT pair_9 to address
Function name: withdrawIncentives

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef

Name: TMP_144 Function: withdrawIncentives
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: withdrawIncentives
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
TMP_145 = CONVERT 0 to address
Function name: withdrawIncentives
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_145 Function: withdrawIncentives
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_145

Name: TMP_145 Function: withdrawIncentives
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_146(bool) = TMP_144 != TMP_145
Function name: withdrawIncentives
[i]Type for TMP_146

Name: TMP_146 Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,LaunchEvent: pair not created)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
Function name: withdrawIncentives
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_44

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_44(LaunchEvent.UserInfo)
Function name: withdrawIncentives
asgn

Name: REF_44 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: hasWithdrawnIncentives
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: hasWithdrawnIncentives
Finance Type: undef
done.
typecheckig node...
REF_45(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
Function name: withdrawIncentives
MEMBER
user
hasWithdrawnIncentives
withdrawIncentives
user Fields:
hasWithdrawnIncentives
^^^

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_45

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_148 = ! REF_45 
[i]Type for TMP_148

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,LaunchEvent: incentives already withdrawn)
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_46(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
Function name: withdrawIncentives
MEMBER
user
hasWithdrawnIncentives
withdrawIncentives
user Fields:
hasWithdrawnIncentives
^^^

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_46

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: withdrawIncentives
Phi
[i]Type for user

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance, hasWithdrawnIncentives
Finance Type: undef
done.
REF_46 (->user_2 (-> ['getUserInfo'])) := True(bool)
Function name: withdrawIncentives
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_46

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_16(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: withdrawIncentives
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
TMP_150(bool) = msg.sender == issuer_10
Function name: withdrawIncentives
[i]Type for TMP_150

Name: TMP_150 Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_150
Condition...
Conidtion: 
TMP_150
TMP_150
typecheckig node...
REF_47(uint256) -> user_2 (-> ['getUserInfo']).balance
Function name: withdrawIncentives
MEMBER
user
balance
withdrawIncentives
user Fields:
balance
hasWithdrawnIncentives
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_47

Name: user.balance Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151(uint256) = REF_47 (c)* tokenIncentivesForUsers_11
Function name: withdrawIncentives
testing mul...
lnorm: u rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_152(uint256) = TMP_151 (c)/ wavaxAllocated_3
Function name: withdrawIncentives
lnorm: 18 rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_152 Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef

Name: PIC_52 Function: None
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_152 Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef
done.
amount_2(uint256) := TMP_152(uint256)
Function name: withdrawIncentives
asgn

Name: TMP_152 Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef

Name: amount Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
amount_3(uint256) := ϕ(['amount_1', 'amount_2'])
Function name: withdrawIncentives
Phi
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_153(bool) = amount_3 > 0
Function name: withdrawIncentives
testing gt...
val: 0
val: 0
lnorm: 12 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_153

Name: TMP_153 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,LaunchEvent: caller has no incentive to claim)
[i]Type for TMP_154

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
amount_1(uint256) := tokenIncentiveIssuerRefund_3(uint256)
Function name: withdrawIncentives
asgn

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: amount Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
tokenIncentivesBalance_11(uint256) = tokenIncentivesBalance_10 (c)- amount_3
Function name: withdrawIncentives
lnorm: 18 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: amount Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_155(bool) = HIGH_LEVEL_CALL, dest:token_18(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_3']  
Function name: withdrawIncentives
High Call: transfer
func name:transfer
other func name:transfer
TMP_155
[i]Type for TMP_155

Name: TMP_155 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token_19(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_18', 'token_2', 'token_26', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: withdrawIncentives
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "withdrawIncentives":
 New undefined nodes- 1
 Old undefined nodes- 2
typecheckig node...
issuer_9(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: withdrawIncentives
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
token_17(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_21', 'token_26', 'token_0', 'token_25', 'token_11', 'token_22'])
Function name: withdrawIncentives
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
getUserInfo_14(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: withdrawIncentives
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
pair_8(IJoePair) := ϕ(['pair_7', 'pair_0', 'pair_1', 'pair_9'])
Function name: withdrawIncentives
Phi
[i]Type for pair

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
wavaxAllocated_2(uint256) := ϕ(['wavaxAllocated_1', 'wavaxAllocated_0', 'wavaxAllocated_3'])
Function name: withdrawIncentives
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesBalance_9(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
Function name: withdrawIncentives
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesForUsers_10(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_0'])
Function name: withdrawIncentives
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentiveIssuerRefund_2(uint256) := ϕ(['tokenIncentiveIssuerRefund_0', 'tokenIncentiveIssuerRefund_1', 'tokenIncentiveIssuerRefund_3'])
Function name: withdrawIncentives
Phi
[i]Type for tokenIncentiveIssuerRefund

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
Internal call...
isStopped
False
Function: isStopped
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
typecheckig node...
TMP_144 = CONVERT pair_9 to address
Function name: withdrawIncentives

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef

Name: TMP_144 Function: withdrawIncentives
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[i]Type for TMP_144

Name: TMP_144 Function: withdrawIncentives
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
done.
TMP_145 = CONVERT 0 to address
Function name: withdrawIncentives
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_145 Function: withdrawIncentives
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_145

Name: TMP_145 Function: withdrawIncentives
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_146(bool) = TMP_144 != TMP_145
Function name: withdrawIncentives
[i]Type for TMP_146

Name: TMP_146 Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,LaunchEvent: pair not created)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
Function name: withdrawIncentives
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_44

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_44(LaunchEvent.UserInfo)
Function name: withdrawIncentives
asgn

Name: REF_44 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: hasWithdrawnIncentives
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: hasWithdrawnIncentives
Finance Type: undef
done.
typecheckig node...
REF_45(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
Function name: withdrawIncentives
MEMBER
user
hasWithdrawnIncentives
withdrawIncentives
user Fields:
balance
hasWithdrawnIncentives
^^^

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_45

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_148 = ! REF_45 
[i]Type for TMP_148

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,LaunchEvent: incentives already withdrawn)
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_46(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
Function name: withdrawIncentives
MEMBER
user
hasWithdrawnIncentives
withdrawIncentives
user Fields:
balance
hasWithdrawnIncentives
^^^

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_46

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: withdrawIncentives
Phi
[i]Type for user

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance, hasWithdrawnIncentives
Finance Type: undef
done.
REF_46 (->user_2 (-> ['getUserInfo'])) := True(bool)
Function name: withdrawIncentives
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_46

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_16(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: withdrawIncentives
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
TMP_150(bool) = msg.sender == issuer_10
Function name: withdrawIncentives
[i]Type for TMP_150

Name: TMP_150 Function: withdrawIncentives
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_150
Condition...
Conidtion: 
TMP_150
TMP_150
typecheckig node...
REF_47(uint256) -> user_2 (-> ['getUserInfo']).balance
Function name: withdrawIncentives
MEMBER
user
balance
withdrawIncentives
user Fields:
balance
hasWithdrawnIncentives
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_47

Name: user.balance Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151(uint256) = REF_47 (c)* tokenIncentivesForUsers_11
Function name: withdrawIncentives
testing mul...
lnorm: u rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_152(uint256) = TMP_151 (c)/ wavaxAllocated_3
Function name: withdrawIncentives
lnorm: 18 rnorm: 6
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_152 Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef

Name: PIC_53 Function: None
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_152 Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef
done.
amount_2(uint256) := TMP_152(uint256)
Function name: withdrawIncentives
asgn

Name: TMP_152 Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef

Name: amount Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
amount_3(uint256) := ϕ(['amount_1', 'amount_2'])
Function name: withdrawIncentives
Phi
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: 1
Den: 2
Norm: 12
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_153(bool) = amount_3 > 0
Function name: withdrawIncentives
testing gt...
val: 0
val: 0
lnorm: 12 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_153

Name: TMP_153 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,LaunchEvent: caller has no incentive to claim)
[i]Type for TMP_154

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
amount_1(uint256) := tokenIncentiveIssuerRefund_3(uint256)
Function name: withdrawIncentives
asgn

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: amount Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
tokenIncentivesBalance_11(uint256) = tokenIncentivesBalance_10 (c)- amount_3
Function name: withdrawIncentives
lnorm: 18 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: amount Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_155(bool) = HIGH_LEVEL_CALL, dest:token_18(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_3']  
Function name: withdrawIncentives
High Call: transfer
func name:transfer
other func name:transfer
TMP_155
[i]Type for TMP_155

Name: TMP_155 Function: withdrawIncentives
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token_19(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_18', 'token_2', 'token_26', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: withdrawIncentives
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
WORKLIST iteration 2 for function call "withdrawIncentives":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: withdrawIncentives
State_var: WAVAX
Finding type for WAVAX...
IWAVAX
Check copy_toekn_tuple
(-1, -1, 0, 'WAVAX')
----
Type: IWAVAX
IWAVAX
Final Type: IWAVAX
 NO FIELDS

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rocketJoeFactory
Finding type for rocketJoeFactory...
IRocketJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'RJFACTORY')
----
Type: IRocketJoeFactory
IRocketJoeFactory
Final Type: IRocketJoeFactory
 NO FIELDS

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token
Finding type for token...
IERC20Metadata
Check copy_toekn_tuple
(-1, -1, 0, 'TOKEN')
----
Type: IERC20Metadata
IERC20Metadata
Final Type: IERC20Metadata
 NO FIELDS

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesBalance
Finding type for tokenIncentivesBalance...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenReserve
Finding type for tokenReserve...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxReserve
Finding type for wavaxReserve...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: getUserInfo
Finding type for getUserInfo...
mapping(address => LaunchEvent.UserInfo)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => LaunchEvent.UserInfo)
mapping(address => LaunchEvent.UserInfo)
LaunchEvent.UserInfo
Final Type: LaunchEvent.UserInfo
global
getUserInfo
allocation
global
getUserInfo
balance
global
getUserInfo
hasWithdrawnPair
global
getUserInfo
hasWithdrawnIncentives
FIELDS:
getUserInfo Fields:
^^^

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuer
Finding type for issuer...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ISSUER')
----
Type: address
address
Final Type: address

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pair
Finding type for pair...
IJoePair
Check copy_toekn_tuple
(-1, -1, 0, 'JOEPAIR')
----
Type: IJoePair
IJoePair
Final Type: IJoePair
 NO FIELDS

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentiveIssuerRefund
Finding type for tokenIncentiveIssuerRefund...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesForUsers
Finding type for tokenIncentivesForUsers...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxAllocated
Finding type for wavaxAllocated...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: initialized
Finding type for initialized...
bool
SKIP bool
State_var: PHASE_ONE_DURATION
Finding type for PHASE_ONE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_TWO_DURATION
Finding type for PHASE_TWO_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: auctionStart
Finding type for auctionStart...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuerTimelock
Finding type for issuerTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: issuerTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: userTimelock
Finding type for userTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: userTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpSupply
Finding type for lpSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_ONE_NO_FEE_DURATION
Finding type for PHASE_ONE_NO_FEE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: fixedWithdrawPenalty
Finding type for fixedWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: fixedWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: maxWithdrawPenalty
Finding type for maxWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: factory
Finding type for factory...
IJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IJoeFactory
IJoeFactory
Final Type: IJoeFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: floorPrice
Finding type for floorPrice...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: router
Finding type for router...
IJoeRouter02
Check copy_toekn_tuple
(-1, -1, 0, 'ROUTER')
----
Type: IJoeRouter02
IJoeRouter02
Final Type: IJoeRouter02
 NO FIELDS

Name: router Function: global
Num: -1
Den: -1
Norm: 0
LF: ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: stopped
Finding type for stopped...
bool
SKIP bool
State_var: maxAllocation
Finding type for maxAllocation...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxAllocation Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoe
Finding type for rJoe...
IRocketJoeToken
Check copy_toekn_tuple
(-1, -1, 0, 'RJTOKEN')
----
Type: IRocketJoeToken
IRocketJoeToken
Final Type: IRocketJoeToken
 NO FIELDS

Name: rJoe Function: global
Num: -1
Den: -1
Norm: 0
LF: RJTOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rJoePerAvax
Finding type for rJoePerAvax...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: rJoePerAvax Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: emergencyWithdraw
Function name: emergencyWithdraw
Function Visibility (test): external
-100
Add new
clearning node...
clearing ir...?
issuer_11(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
has variable
clearing ir...?
WAVAX_22(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
has variable
clearing ir...?
token_20(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_21', 'token_26', 'token_0', 'token_25', 'token_11', 'token_22'])
has variable
clearing ir...?
getUserInfo_17(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
has variable
clearing ir...?
tokenReserve_19(uint256) := ϕ(['tokenReserve_0', 'tokenReserve_20', 'tokenReserve_17', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_13', 'tokenReserve_1'])
has variable
clearing ir...?
tokenIncentivesBalance_12(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
has variable
clearing ir...?
wavaxReserve_23(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
has variable
typecheckig node...
issuer_11(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: emergencyWithdraw
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
WAVAX_22(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: emergencyWithdraw
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
token_20(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_21', 'token_26', 'token_0', 'token_25', 'token_11', 'token_22'])
Function name: emergencyWithdraw
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
getUserInfo_17(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: emergencyWithdraw
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tokenReserve_19(uint256) := ϕ(['tokenReserve_0', 'tokenReserve_20', 'tokenReserve_17', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_13', 'tokenReserve_1'])
Function name: emergencyWithdraw
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesBalance_12(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
Function name: emergencyWithdraw
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_23(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
Function name: emergencyWithdraw
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, LaunchEvent.isStopped(bool)(True)
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(True)
Internal call...
isStopped
True
Function: isStopped
ic
val: True
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
clearning node...
clearing ir...?
TMP_157(bool) = msg.sender != issuer_12
has variable
[i] TMP_157 cleared
clearing ir...?
CONDITION TMP_157
typecheckig node...
TMP_157(bool) = msg.sender != issuer_12
Function name: emergencyWithdraw
[i]Type for TMP_157

Name: TMP_157 Function: emergencyWithdraw
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_157
Condition...
Conidtion: 
TMP_157
TMP_157
clearning node...
clearing ir...?
REF_49(LaunchEvent.UserInfo) -> getUserInfo_18[msg.sender]
has variable
clearing ir...?
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_49(LaunchEvent.UserInfo)
has variable
[i] user cleared
typecheckig node...
REF_49(LaunchEvent.UserInfo) -> getUserInfo_18[msg.sender]
Function name: emergencyWithdraw
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_49

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_49(LaunchEvent.UserInfo) -> getUserInfo_18[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_49(LaunchEvent.UserInfo)
Function name: emergencyWithdraw
asgn

Name: REF_49 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: emergencyWithdraw
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_163(uint256) = tokenReserve_20 (c)+ tokenIncentivesBalance_13
has variable
[i] TMP_163 cleared
clearing ir...?
balance_scope_0_1(uint256) := TMP_163(uint256)
has variable
[i] balance_scope_0 cleared
typecheckig node...
TMP_163(uint256) = tokenReserve_20 (c)+ tokenIncentivesBalance_13
Function name: emergencyWithdraw

Name: TMP_163 Function: emergencyWithdraw
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 18 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: TMP_163 Function: emergencyWithdraw
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_163

Name: TMP_163 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
balance_scope_0_1(uint256) := TMP_163(uint256)
Function name: emergencyWithdraw
asgn

Name: TMP_163 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: balance_scope_0 Function: emergencyWithdraw
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance_scope_0

Name: balance_scope_0 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
tokenReserve_21(uint256) := 0(uint256)
has variable
typecheckig node...
tokenReserve_21(uint256) := 0(uint256)
Function name: emergencyWithdraw
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: tokenReserve Function: emergencyWithdraw
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenReserve

Name: tokenReserve Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_50(uint256) -> user_1 (-> ['getUserInfo']).balance
has variable
clearing ir...?
TMP_158(bool) = REF_50 > 0
has variable
[i] TMP_158 cleared
clearing ir...?
TMP_159(None) = SOLIDITY_CALL require(bool,string)(TMP_158,LaunchEvent: expected user to have non-zero balance to perform emergency withdraw)
typecheckig node...
REF_50(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: emergencyWithdraw
MEMBER
user
balance
emergencyWithdraw
user Fields:
^^^
[i]Type for REF_50

Name: user.balance Function: emergencyWithdraw
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: emergencyWithdraw
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_158(bool) = REF_50 > 0
Function name: emergencyWithdraw
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_158 Function: emergencyWithdraw
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_158

Name: TMP_158 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_158(bool) = REF_50 > 0
XXXXX
TMP_159(None) = SOLIDITY_CALL require(bool,string)(TMP_158,LaunchEvent: expected user to have non-zero balance to perform emergency withdraw)
[i]Type for TMP_159

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
tokenIncentivesBalance_14(uint256) := 0(uint256)
has variable
typecheckig node...
tokenIncentivesBalance_14(uint256) := 0(uint256)
Function name: emergencyWithdraw
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_51(uint256) -> user_1 (-> ['getUserInfo']).balance
has variable
clearing ir...?
balance_1(uint256) := REF_51(uint256)
has variable
[i] balance cleared
typecheckig node...
REF_51(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: emergencyWithdraw
MEMBER
user
balance
emergencyWithdraw
user Fields:
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance_1(uint256) := REF_51(uint256)
Function name: emergencyWithdraw
asgn

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: emergencyWithdraw
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_164(bool) = HIGH_LEVEL_CALL, dest:token_21(IERC20Metadata), function:transfer, arguments:['issuer_12', 'balance_scope_0_1']  
has variable
[i] TMP_164 cleared
clearing ir...?
issuer_13(address) := ϕ(['issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
has variable
clearing ir...?
token_22(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_21', 'token_25', 'token_11', 'token_22'])
has variable
typecheckig node...
TMP_164(bool) = HIGH_LEVEL_CALL, dest:token_21(IERC20Metadata), function:transfer, arguments:['issuer_12', 'balance_scope_0_1']  
Function name: emergencyWithdraw
High Call: transfer
func name:transfer
other func name:transfer
TMP_164
[i]Type for TMP_164

Name: TMP_164 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
issuer_13(address) := ϕ(['issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: emergencyWithdraw
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
token_22(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: emergencyWithdraw
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_52(uint256) -> user_1 (-> ['getUserInfo']).balance
has variable
clearing ir...?
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
has variable
[i] user cleared
clearing ir...?
REF_52 (->user_2 (-> ['getUserInfo'])) := 0(uint256)
has variable
clearing ir...?
getUserInfo_19(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
has variable
typecheckig node...
REF_52(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: emergencyWithdraw
MEMBER
user
balance
emergencyWithdraw
user Fields:
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: emergencyWithdraw
Phi
[i]Type for user

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
done.
REF_52 (->user_2 (-> ['getUserInfo'])) := 0(uint256)
Function name: emergencyWithdraw
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_52

Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_19(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: emergencyWithdraw
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
Emit TokenEmergencyWithdraw(msg.sender,balance_scope_0_1)
typecheckig node...
Emit TokenEmergencyWithdraw(msg.sender,balance_scope_0_1)
clearning node...
clearing ir...?
wavaxReserve_25(uint256) = wavaxReserve_24 (c)- balance_1
has variable
typecheckig node...
wavaxReserve_25(uint256) = wavaxReserve_24 (c)- balance_1
Function name: emergencyWithdraw
lnorm: 6 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: emergencyWithdraw
Num: 
Den: 
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for wavaxReserve

Name: wavaxReserve Function: emergencyWithdraw
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:WAVAX_23(IWAVAX), function:withdraw, arguments:['balance_1']  
clearing ir...?
WAVAX_24(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:WAVAX_23(IWAVAX), function:withdraw, arguments:['balance_1']  
High Call: withdraw
func name:withdraw
other func name:withdraw
done.
WAVAX_24(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: emergencyWithdraw
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,balance_1)
typecheckig node...
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,balance_1)
Internal call...
_safeTransferAVAX
msg.sender
balance
Function: _safeTransferAVAX
ic
msg.sender
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[2], [-1], 6, None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[2], [-1], 6, None, [], -1]
added
xyz
Function name: _safeTransferAVAX
Function Visibility: internal
clearning node...
clearing ir...?
_to_1(address) := ϕ(['penaltyCollector_1', 'msg.sender', 'TMP_87'])
has variable
[i] _to cleared
clearing ir...?
_value_1(uint256) := ϕ(['balance_1', 'amountMinusFee_1', 'feeAmount_1', 'excessAvax_1'])
has variable
[i] _value cleared
typecheckig node...
_to_1(address) := ϕ(['penaltyCollector_1', 'msg.sender', 'TMP_87'])
Function name: _safeTransferAVAX
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: -1
Den: -1
Norm: u
LF: _to
Fields: 
Finance Type: undef
done.
_value_1(uint256) := ϕ(['balance_1', 'amountMinusFee_1', 'feeAmount_1', 'excessAvax_1'])
Function name: _safeTransferAVAX
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_223 = new bytes(0)
clearing ir...?
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
clearing ir...?
success_1(bool)= UNPACK TUPLE_1 index: 0 
has variable
[i] success cleared
typecheckig node...
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
success_1(bool)= UNPACK TUPLE_1 index: 0 
Function name: _safeTransferAVAX
Reading tuple TUPLE_1 index 0
Finding type for success...
bool
SKIP bool
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
typecheckig node...
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_safeTransferAVAX":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _safeTransferAVAX
done.
clearning node...
clearing ir...?
Emit AvaxEmergencyWithdraw(msg.sender,balance_1)
typecheckig node...
Emit AvaxEmergencyWithdraw(msg.sender,balance_1)
WORKLIST iteration 0 for function call "emergencyWithdraw":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
issuer_11(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: emergencyWithdraw
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
WAVAX_22(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: emergencyWithdraw
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
token_20(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_21', 'token_26', 'token_0', 'token_25', 'token_11', 'token_22'])
Function name: emergencyWithdraw
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
getUserInfo_17(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: emergencyWithdraw
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tokenReserve_19(uint256) := ϕ(['tokenReserve_0', 'tokenReserve_20', 'tokenReserve_17', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_13', 'tokenReserve_1'])
Function name: emergencyWithdraw
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesBalance_12(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
Function name: emergencyWithdraw
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_23(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
Function name: emergencyWithdraw
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(True)
Internal call...
isStopped
True
Function: isStopped
ic
val: True
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
typecheckig node...
TMP_157(bool) = msg.sender != issuer_12
Function name: emergencyWithdraw
[i]Type for TMP_157

Name: TMP_157 Function: emergencyWithdraw
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_157
Condition...
Conidtion: 
TMP_157
TMP_157
typecheckig node...
REF_49(LaunchEvent.UserInfo) -> getUserInfo_18[msg.sender]
Function name: emergencyWithdraw
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_49

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_49(LaunchEvent.UserInfo) -> getUserInfo_18[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_49(LaunchEvent.UserInfo)
Function name: emergencyWithdraw
asgn

Name: REF_49 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
done.
typecheckig node...
TMP_163(uint256) = tokenReserve_20 (c)+ tokenIncentivesBalance_13
Function name: emergencyWithdraw

Name: TMP_163 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: tokenIncentivesBalance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_163 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_163

Name: TMP_163 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
balance_scope_0_1(uint256) := TMP_163(uint256)
Function name: emergencyWithdraw
asgn

Name: TMP_163 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: balance_scope_0 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance_scope_0

Name: balance_scope_0 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
tokenReserve_21(uint256) := 0(uint256)
Function name: emergencyWithdraw
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: tokenReserve Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenReserve

Name: tokenReserve Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_50(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: emergencyWithdraw
MEMBER
user
balance
emergencyWithdraw
user Fields:
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_50

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_158(bool) = REF_50 > 0
Function name: emergencyWithdraw
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_158

Name: TMP_158 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_159(None) = SOLIDITY_CALL require(bool,string)(TMP_158,LaunchEvent: expected user to have non-zero balance to perform emergency withdraw)
[i]Type for TMP_159

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
tokenIncentivesBalance_14(uint256) := 0(uint256)
Function name: emergencyWithdraw
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_51(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: emergencyWithdraw
MEMBER
user
balance
emergencyWithdraw
user Fields:
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance_1(uint256) := REF_51(uint256)
Function name: emergencyWithdraw
asgn

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_164(bool) = HIGH_LEVEL_CALL, dest:token_21(IERC20Metadata), function:transfer, arguments:['issuer_12', 'balance_scope_0_1']  
Function name: emergencyWithdraw
High Call: transfer
func name:transfer
other func name:transfer
TMP_164
[i]Type for TMP_164

Name: TMP_164 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
issuer_13(address) := ϕ(['issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: emergencyWithdraw
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
token_22(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: emergencyWithdraw
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_52(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: emergencyWithdraw
MEMBER
user
balance
emergencyWithdraw
user Fields:
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: emergencyWithdraw
Phi
[i]Type for user

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
done.
REF_52 (->user_2 (-> ['getUserInfo'])) := 0(uint256)
Function name: emergencyWithdraw
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_52

Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_19(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: emergencyWithdraw
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
Emit TokenEmergencyWithdraw(msg.sender,balance_scope_0_1)
typecheckig node...
wavaxReserve_25(uint256) = wavaxReserve_24 (c)- balance_1
Function name: emergencyWithdraw
lnorm: 6 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: emergencyWithdraw
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for wavaxReserve

Name: wavaxReserve Function: emergencyWithdraw
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
HIGH_LEVEL_CALL, dest:WAVAX_23(IWAVAX), function:withdraw, arguments:['balance_1']  
High Call: withdraw
func name:withdraw
other func name:withdraw
done.
WAVAX_24(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: emergencyWithdraw
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
typecheckig node...
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,balance_1)
Internal call...
_safeTransferAVAX
msg.sender
balance
Function: _safeTransferAVAX
ic
msg.sender
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[2], [-1], 6, None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[2], [-1], 6, None, [], -1]
added
xyz
Function name: _safeTransferAVAX
Function Visibility: internal
clearning node...
clearing ir...?
_to_1(address) := ϕ(['penaltyCollector_1', 'msg.sender', 'TMP_87'])
has variable
[i] _to cleared
clearing ir...?
_value_1(uint256) := ϕ(['balance_1', 'amountMinusFee_1', 'feeAmount_1', 'excessAvax_1'])
has variable
[i] _value cleared
typecheckig node...
_to_1(address) := ϕ(['penaltyCollector_1', 'msg.sender', 'TMP_87'])
Function name: _safeTransferAVAX
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: -1
Den: -1
Norm: u
LF: _to
Fields: 
Finance Type: undef
done.
_value_1(uint256) := ϕ(['balance_1', 'amountMinusFee_1', 'feeAmount_1', 'excessAvax_1'])
Function name: _safeTransferAVAX
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_223 = new bytes(0)
clearing ir...?
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
clearing ir...?
success_1(bool)= UNPACK TUPLE_1 index: 0 
has variable
[i] success cleared
typecheckig node...
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
success_1(bool)= UNPACK TUPLE_1 index: 0 
Function name: _safeTransferAVAX
Reading tuple TUPLE_1 index 0
Finding type for success...
bool
SKIP bool
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
typecheckig node...
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_safeTransferAVAX":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _safeTransferAVAX
done.
typecheckig node...
Emit AvaxEmergencyWithdraw(msg.sender,balance_1)
WORKLIST iteration 1 for function call "emergencyWithdraw":
 New undefined nodes- 1
 Old undefined nodes- 2
typecheckig node...
issuer_11(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: emergencyWithdraw
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
WAVAX_22(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_0', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: emergencyWithdraw
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
token_20(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_21', 'token_26', 'token_0', 'token_25', 'token_11', 'token_22'])
Function name: emergencyWithdraw
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
getUserInfo_17(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9'])
Function name: emergencyWithdraw
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tokenReserve_19(uint256) := ϕ(['tokenReserve_0', 'tokenReserve_20', 'tokenReserve_17', 'tokenReserve_24', 'tokenReserve_21', 'tokenReserve_13', 'tokenReserve_1'])
Function name: emergencyWithdraw
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tokenIncentivesBalance_12(uint256) := ϕ(['tokenIncentivesBalance_17', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_7'])
Function name: emergencyWithdraw
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
wavaxReserve_23(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_25', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_10', 'wavaxReserve_0'])
Function name: emergencyWithdraw
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, LaunchEvent.isStopped(bool)(True)
Internal call...
isStopped
True
Function: isStopped
ic
val: True
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], -1]
0
done.
typecheckig node...
TMP_157(bool) = msg.sender != issuer_12
Function name: emergencyWithdraw
[i]Type for TMP_157

Name: TMP_157 Function: emergencyWithdraw
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_157
Condition...
Conidtion: 
TMP_157
TMP_157
typecheckig node...
REF_49(LaunchEvent.UserInfo) -> getUserInfo_18[msg.sender]
Function name: emergencyWithdraw
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
not variable
getUserInfo
[i]Type for REF_49

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_49(LaunchEvent.UserInfo) -> getUserInfo_18[msg.sender]
XXXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_49(LaunchEvent.UserInfo)
Function name: emergencyWithdraw
asgn

Name: REF_49 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for user

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
done.
typecheckig node...
TMP_163(uint256) = tokenReserve_20 (c)+ tokenIncentivesBalance_13
Function name: emergencyWithdraw

Name: TMP_163 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: tokenIncentivesBalance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_163 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_163

Name: TMP_163 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
balance_scope_0_1(uint256) := TMP_163(uint256)
Function name: emergencyWithdraw
asgn

Name: TMP_163 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: balance_scope_0 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance_scope_0

Name: balance_scope_0 Function: emergencyWithdraw
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
tokenReserve_21(uint256) := 0(uint256)
Function name: emergencyWithdraw
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: tokenReserve Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenReserve

Name: tokenReserve Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_50(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: emergencyWithdraw
MEMBER
user
balance
emergencyWithdraw
user Fields:
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_50

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_158(bool) = REF_50 > 0
Function name: emergencyWithdraw
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_158

Name: TMP_158 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_159(None) = SOLIDITY_CALL require(bool,string)(TMP_158,LaunchEvent: expected user to have non-zero balance to perform emergency withdraw)
[i]Type for TMP_159

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
tokenIncentivesBalance_14(uint256) := 0(uint256)
Function name: emergencyWithdraw
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_51(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: emergencyWithdraw
MEMBER
user
balance
emergencyWithdraw
user Fields:
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance_1(uint256) := REF_51(uint256)
Function name: emergencyWithdraw
asgn

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_164(bool) = HIGH_LEVEL_CALL, dest:token_21(IERC20Metadata), function:transfer, arguments:['issuer_12', 'balance_scope_0_1']  
Function name: emergencyWithdraw
High Call: transfer
func name:transfer
other func name:transfer
TMP_164
[i]Type for TMP_164

Name: TMP_164 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
issuer_13(address) := ϕ(['issuer_1', 'issuer_10', 'issuer_12', 'issuer_13', 'issuer_8', 'issuer_4'])
Function name: emergencyWithdraw
Phi
[i]Type for issuer

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
done.
token_22(IERC20Metadata) := ϕ(['token_19', 'token_15', 'token_2', 'token_26', 'token_21', 'token_25', 'token_11', 'token_22'])
Function name: emergencyWithdraw
Phi
[i]Type for token

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_52(uint256) -> user_1 (-> ['getUserInfo']).balance
Function name: emergencyWithdraw
MEMBER
user
balance
emergencyWithdraw
user Fields:
balance
^^^

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Function name: emergencyWithdraw
Phi
[i]Type for user

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: balance
Finance Type: undef
done.
REF_52 (->user_2 (-> ['getUserInfo'])) := 0(uint256)
Function name: emergencyWithdraw
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_52

Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
getUserInfo_19(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Function name: emergencyWithdraw
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
Emit TokenEmergencyWithdraw(msg.sender,balance_scope_0_1)
typecheckig node...
wavaxReserve_25(uint256) = wavaxReserve_24 (c)- balance_1
Function name: emergencyWithdraw
lnorm: 6 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef

Name: wavaxReserve Function: emergencyWithdraw
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[i]Type for wavaxReserve

Name: wavaxReserve Function: emergencyWithdraw
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
HIGH_LEVEL_CALL, dest:WAVAX_23(IWAVAX), function:withdraw, arguments:['balance_1']  
High Call: withdraw
func name:withdraw
other func name:withdraw
done.
WAVAX_24(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_24'])
Function name: emergencyWithdraw
Phi
[i]Type for WAVAX

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
done.
typecheckig node...
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,balance_1)
Internal call...
_safeTransferAVAX
msg.sender
balance
Function: _safeTransferAVAX
ic
msg.sender
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 6
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[2], [-1], 6, None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[2], [-1], 6, None, [], -1]
added
xyz
Function name: _safeTransferAVAX
Function Visibility: internal
clearning node...
clearing ir...?
_to_1(address) := ϕ(['penaltyCollector_1', 'msg.sender', 'TMP_87'])
has variable
[i] _to cleared
clearing ir...?
_value_1(uint256) := ϕ(['balance_1', 'amountMinusFee_1', 'feeAmount_1', 'excessAvax_1'])
has variable
[i] _value cleared
typecheckig node...
_to_1(address) := ϕ(['penaltyCollector_1', 'msg.sender', 'TMP_87'])
Function name: _safeTransferAVAX
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: -1
Den: -1
Norm: u
LF: _to
Fields: 
Finance Type: undef
done.
_value_1(uint256) := ϕ(['balance_1', 'amountMinusFee_1', 'feeAmount_1', 'excessAvax_1'])
Function name: _safeTransferAVAX
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_223 = new bytes(0)
clearing ir...?
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
clearing ir...?
success_1(bool)= UNPACK TUPLE_1 index: 0 
has variable
[i] success cleared
typecheckig node...
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
success_1(bool)= UNPACK TUPLE_1 index: 0 
Function name: _safeTransferAVAX
Reading tuple TUPLE_1 index 0
Finding type for success...
bool
SKIP bool
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
typecheckig node...
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_safeTransferAVAX":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _safeTransferAVAX
done.
typecheckig node...
Emit AvaxEmergencyWithdraw(msg.sender,balance_1)
WORKLIST iteration 2 for function call "emergencyWithdraw":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: emergencyWithdraw
State_var: WAVAX
Finding type for WAVAX...
IWAVAX
Check copy_toekn_tuple
(-1, -1, 0, 'WAVAX')
----
Type: IWAVAX
IWAVAX
Final Type: IWAVAX
 NO FIELDS

Name: WAVAX Function: global
Num: -1
Den: -1
Norm: 0
LF: WAVAX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rocketJoeFactory
Finding type for rocketJoeFactory...
IRocketJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'RJFACTORY')
----
Type: IRocketJoeFactory
IRocketJoeFactory
Final Type: IRocketJoeFactory
 NO FIELDS

Name: rocketJoeFactory Function: global
Num: -1
Den: -1
Norm: 0
LF: RJFACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token
Finding type for token...
IERC20Metadata
Check copy_toekn_tuple
(-1, -1, 0, 'TOKEN')
----
Type: IERC20Metadata
IERC20Metadata
Final Type: IERC20Metadata
 NO FIELDS

Name: token Function: global
Num: -1
Den: -1
Norm: 0
LF: TOKEN
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesBalance
Finding type for tokenIncentivesBalance...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesBalance Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenReserve
Finding type for tokenReserve...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenReserve Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxReserve
Finding type for wavaxReserve...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxReserve Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: getUserInfo
Finding type for getUserInfo...
mapping(address => LaunchEvent.UserInfo)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => LaunchEvent.UserInfo)
mapping(address => LaunchEvent.UserInfo)
LaunchEvent.UserInfo
Final Type: LaunchEvent.UserInfo
global
getUserInfo
allocation
global
getUserInfo
balance
global
getUserInfo
hasWithdrawnPair
global
getUserInfo
hasWithdrawnIncentives
FIELDS:
getUserInfo Fields:
^^^

Name: getUserInfo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuer
Finding type for issuer...
address
Check copy_toekn_tuple
(-1, -1, 0, 'ISSUER')
----
Type: address
address
Final Type: address

Name: issuer Function: global
Num: -1
Den: -1
Norm: 0
LF: ISSUER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pair
Finding type for pair...
IJoePair
Check copy_toekn_tuple
(-1, -1, 0, 'JOEPAIR')
----
Type: IJoePair
IJoePair
Final Type: IJoePair
 NO FIELDS

Name: pair Function: global
Num: -1
Den: -1
Norm: 0
LF: JOEPAIR
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentiveIssuerRefund
Finding type for tokenIncentiveIssuerRefund...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentiveIssuerRefund Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenIncentivesForUsers
Finding type for tokenIncentivesForUsers...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: tokenIncentivesForUsers Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: wavaxAllocated
Finding type for wavaxAllocated...
uint256
Check copy_toekn_tuple
(2, -1, 6, None)
----
Type: uint256
uint256
Final Type: uint256

Name: wavaxAllocated Function: global
Num: 2
Den: -1
Norm: 6
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _owner
Finding type for _owner...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _owner Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: initialized
Finding type for initialized...
bool
SKIP bool
State_var: PHASE_ONE_DURATION
Finding type for PHASE_ONE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_TWO_DURATION
Finding type for PHASE_TWO_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_TWO_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: auctionStart
Finding type for auctionStart...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: auctionStart Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: issuerTimelock
Finding type for issuerTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: issuerTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: userTimelock
Finding type for userTimelock...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: userTimelock Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpSupply
Finding type for lpSupply...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: lpSupply Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: PHASE_ONE_NO_FEE_DURATION
Finding type for PHASE_ONE_NO_FEE_DURATION...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: PHASE_ONE_NO_FEE_DURATION Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: fixedWithdrawPenalty
Finding type for fixedWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: fixedWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: maxWithdrawPenalty
Finding type for maxWithdrawPenalty...
uint256
Check copy_toekn_tuple
(-1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: maxWithdrawPenalty Function: global
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: factory
Finding type for factory...
IJoeFactory
Check copy_toekn_tuple
(-1, -1, 0, 'FACTORY')
----
Type: IJoeFactory
IJoeFactory
Final Type: IJoeFactory
 NO FIELDS

Name: factory Function: global
Num: -1
Den: -1
Norm: 0
LF: FACTORY
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: floorPrice
Finding type for floorPrice...
uint256
Check copy_toekn_tuple
(1, -1, 18, None)
----
Type: uint256
uint256
Final Type: uint256

Name: floorPrice Function: global
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef