/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface AuthorizedForwarderInterface extends Interface {
  functions: {
    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    forward: TypedFunctionDescription<{
      encode([to, data]: [string, Arrayish]): string;
    }>;

    getAuthorizedSenders: TypedFunctionDescription<{ encode([]: []): string }>;

    getChainlinkToken: TypedFunctionDescription<{ encode([]: []): string }>;

    isAuthorizedSender: TypedFunctionDescription<{
      encode([sender]: [string]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    ownerForward: TypedFunctionDescription<{
      encode([to, data]: [string, Arrayish]): string;
    }>;

    setAuthorizedSenders: TypedFunctionDescription<{
      encode([senders]: [string[]]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([to]: [string]): string;
    }>;

    transferOwnershipWithMessage: TypedFunctionDescription<{
      encode([to, message]: [string, Arrayish]): string;
    }>;
  };

  events: {
    AuthorizedSendersChanged: TypedEventDescription<{
      encodeTopics([senders, changedBy]: [null, null]): string[];
    }>;

    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransferRequestedWithMessage: TypedEventDescription<{
      encodeTopics([from, to, message]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;
  };
}

export class AuthorizedForwarder extends Contract {
  connect(signerOrProvider: Signer | Provider | string): AuthorizedForwarder;
  attach(addressOrName: string): AuthorizedForwarder;
  deployed(): Promise<AuthorizedForwarder>;

  on(event: EventFilter | string, listener: Listener): AuthorizedForwarder;
  once(event: EventFilter | string, listener: Listener): AuthorizedForwarder;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): AuthorizedForwarder;
  removeAllListeners(eventName: EventFilter | string): AuthorizedForwarder;
  removeListener(eventName: any, listener: Listener): AuthorizedForwarder;

  interface: AuthorizedForwarderInterface;

  functions: {
    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    forward(
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "forward(address,bytes)"(
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getAuthorizedSenders(overrides?: TransactionOverrides): Promise<string[]>;

    "getAuthorizedSenders()"(
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    getChainlinkToken(overrides?: TransactionOverrides): Promise<string>;

    "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<string>;

    isAuthorizedSender(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isAuthorizedSender(address)"(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    ownerForward(
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "ownerForward(address,bytes)"(
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAuthorizedSenders(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAuthorizedSenders(address[])"(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnershipWithMessage(
      to: string,
      message: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnershipWithMessage(address,bytes)"(
      to: string,
      message: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  forward(
    to: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "forward(address,bytes)"(
    to: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getAuthorizedSenders(overrides?: TransactionOverrides): Promise<string[]>;

  "getAuthorizedSenders()"(overrides?: TransactionOverrides): Promise<string[]>;

  getChainlinkToken(overrides?: TransactionOverrides): Promise<string>;

  "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<string>;

  isAuthorizedSender(
    sender: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "isAuthorizedSender(address)"(
    sender: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  ownerForward(
    to: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "ownerForward(address,bytes)"(
    to: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAuthorizedSenders(
    senders: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAuthorizedSenders(address[])"(
    senders: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnershipWithMessage(
    to: string,
    message: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnershipWithMessage(address,bytes)"(
    to: string,
    message: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AuthorizedSendersChanged(senders: null, changedBy: null): EventFilter;

    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransferRequestedWithMessage(
      from: string | null,
      to: string | null,
      message: null
    ): EventFilter;

    OwnershipTransferred(from: string | null, to: string | null): EventFilter;
  };

  estimate: {
    acceptOwnership(overrides?: TransactionOverrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    forward(
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "forward(address,bytes)"(
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getAuthorizedSenders(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getAuthorizedSenders()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getChainlinkToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    isAuthorizedSender(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isAuthorizedSender(address)"(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    ownerForward(
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "ownerForward(address,bytes)"(
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setAuthorizedSenders(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAuthorizedSenders(address[])"(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferOwnershipWithMessage(
      to: string,
      message: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnershipWithMessage(address,bytes)"(
      to: string,
      message: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
