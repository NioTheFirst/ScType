/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface MockCompoundOracleInterface extends Interface {
  functions: {
    price: TypedFunctionDescription<{ encode([symbol]: [string]): string }>;

    setPrice: TypedFunctionDescription<{
      encode([symbol, newPrice, newDecimals]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class MockCompoundOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MockCompoundOracle;
  attach(addressOrName: string): MockCompoundOracle;
  deployed(): Promise<MockCompoundOracle>;

  on(event: EventFilter | string, listener: Listener): MockCompoundOracle;
  once(event: EventFilter | string, listener: Listener): MockCompoundOracle;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MockCompoundOracle;
  removeAllListeners(eventName: EventFilter | string): MockCompoundOracle;
  removeListener(eventName: any, listener: Listener): MockCompoundOracle;

  interface: MockCompoundOracleInterface;

  functions: {
    price(symbol: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "price(string)"(
      symbol: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setPrice(
      symbol: string,
      newPrice: BigNumberish,
      newDecimals: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setPrice(string,uint256,uint256)"(
      symbol: string,
      newPrice: BigNumberish,
      newDecimals: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  price(symbol: string, overrides?: TransactionOverrides): Promise<BigNumber>;

  "price(string)"(
    symbol: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  setPrice(
    symbol: string,
    newPrice: BigNumberish,
    newDecimals: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setPrice(string,uint256,uint256)"(
    symbol: string,
    newPrice: BigNumberish,
    newDecimals: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    price(symbol: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "price(string)"(
      symbol: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setPrice(
      symbol: string,
      newPrice: BigNumberish,
      newDecimals: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setPrice(string,uint256,uint256)"(
      symbol: string,
      newPrice: BigNumberish,
      newDecimals: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
