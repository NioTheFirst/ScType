/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from "..";
import { GasGuzzler } from "../GasGuzzler";

export class GasGuzzler__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: TransactionOverrides): Promise<GasGuzzler> {
    return super.deploy(overrides) as Promise<GasGuzzler>;
  }
  getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
    return super.getDeployTransaction(overrides);
  }
  attach(address: string): GasGuzzler {
    return super.attach(address) as GasGuzzler;
  }
  connect(signer: Signer): GasGuzzler__factory {
    return super.connect(signer) as GasGuzzler__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GasGuzzler {
    return new Contract(address, _abi, signerOrProvider) as GasGuzzler;
  }
}

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50601680601d6000396000f3fe60806040525b600556fea164736f6c6343000606000a";
