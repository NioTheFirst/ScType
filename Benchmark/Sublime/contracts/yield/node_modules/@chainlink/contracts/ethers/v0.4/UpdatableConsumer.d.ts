/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface UpdatableConsumerInterface extends Interface {
  functions: {
    fulfill: TypedFunctionDescription<{
      encode([_requestId, _price]: [Arrayish, Arrayish]): string;
    }>;

    getChainlinkToken: TypedFunctionDescription<{ encode([]: []): string }>;

    requestEthereumPrice: TypedFunctionDescription<{
      encode([_currency]: [string]): string;
    }>;

    getOracle: TypedFunctionDescription<{ encode([]: []): string }>;

    withdrawLink: TypedFunctionDescription<{ encode([]: []): string }>;

    currentPrice: TypedFunctionDescription<{ encode([]: []): string }>;

    updateOracle: TypedFunctionDescription<{ encode([]: []): string }>;

    cancelRequest: TypedFunctionDescription<{
      encode([_requestId, _payment, _callbackFunctionId, _expiration]: [
        Arrayish,
        BigNumberish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    RequestFulfilled: TypedEventDescription<{
      encodeTopics([requestId, price]: [
        Arrayish | null,
        Arrayish | null
      ]): string[];
    }>;

    ChainlinkRequested: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkFulfilled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkCancelled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;
  };
}

export class UpdatableConsumer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): UpdatableConsumer;
  attach(addressOrName: string): UpdatableConsumer;
  deployed(): Promise<UpdatableConsumer>;

  on(event: EventFilter | string, listener: Listener): UpdatableConsumer;
  once(event: EventFilter | string, listener: Listener): UpdatableConsumer;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): UpdatableConsumer;
  removeAllListeners(eventName: EventFilter | string): UpdatableConsumer;
  removeListener(eventName: any, listener: Listener): UpdatableConsumer;

  interface: UpdatableConsumerInterface;

  functions: {
    fulfill(
      _requestId: Arrayish,
      _price: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "fulfill(bytes32,bytes32)"(
      _requestId: Arrayish,
      _price: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getChainlinkToken(overrides?: TransactionOverrides): Promise<string>;

    "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<string>;

    requestEthereumPrice(
      _currency: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "requestEthereumPrice(string)"(
      _currency: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getOracle(overrides?: TransactionOverrides): Promise<string>;

    "getOracle()"(overrides?: TransactionOverrides): Promise<string>;

    withdrawLink(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "withdrawLink()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    currentPrice(overrides?: TransactionOverrides): Promise<string>;

    "currentPrice()"(overrides?: TransactionOverrides): Promise<string>;

    updateOracle(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "updateOracle()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    cancelRequest(
      _requestId: Arrayish,
      _payment: BigNumberish,
      _callbackFunctionId: Arrayish,
      _expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "cancelRequest(bytes32,uint256,bytes4,uint256)"(
      _requestId: Arrayish,
      _payment: BigNumberish,
      _callbackFunctionId: Arrayish,
      _expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  fulfill(
    _requestId: Arrayish,
    _price: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "fulfill(bytes32,bytes32)"(
    _requestId: Arrayish,
    _price: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getChainlinkToken(overrides?: TransactionOverrides): Promise<string>;

  "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<string>;

  requestEthereumPrice(
    _currency: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "requestEthereumPrice(string)"(
    _currency: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getOracle(overrides?: TransactionOverrides): Promise<string>;

  "getOracle()"(overrides?: TransactionOverrides): Promise<string>;

  withdrawLink(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "withdrawLink()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  currentPrice(overrides?: TransactionOverrides): Promise<string>;

  "currentPrice()"(overrides?: TransactionOverrides): Promise<string>;

  updateOracle(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "updateOracle()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  cancelRequest(
    _requestId: Arrayish,
    _payment: BigNumberish,
    _callbackFunctionId: Arrayish,
    _expiration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "cancelRequest(bytes32,uint256,bytes4,uint256)"(
    _requestId: Arrayish,
    _payment: BigNumberish,
    _callbackFunctionId: Arrayish,
    _expiration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    RequestFulfilled(
      requestId: Arrayish | null,
      price: Arrayish | null
    ): EventFilter;

    ChainlinkRequested(id: Arrayish | null): EventFilter;

    ChainlinkFulfilled(id: Arrayish | null): EventFilter;

    ChainlinkCancelled(id: Arrayish | null): EventFilter;
  };

  estimate: {
    fulfill(
      _requestId: Arrayish,
      _price: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "fulfill(bytes32,bytes32)"(
      _requestId: Arrayish,
      _price: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getChainlinkToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    requestEthereumPrice(
      _currency: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "requestEthereumPrice(string)"(
      _currency: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getOracle(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getOracle()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    withdrawLink(overrides?: TransactionOverrides): Promise<BigNumber>;

    "withdrawLink()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    currentPrice(overrides?: TransactionOverrides): Promise<BigNumber>;

    "currentPrice()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    updateOracle(overrides?: TransactionOverrides): Promise<BigNumber>;

    "updateOracle()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    cancelRequest(
      _requestId: Arrayish,
      _payment: BigNumberish,
      _callbackFunctionId: Arrayish,
      _expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "cancelRequest(bytes32,uint256,bytes4,uint256)"(
      _requestId: Arrayish,
      _payment: BigNumberish,
      _callbackFunctionId: Arrayish,
      _expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
