/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface MockAggregatorValidatorInterface extends Interface {
  functions: {
    validate: TypedFunctionDescription<{
      encode([previousRoundId, previousAnswer, currentRoundId, currentAnswer]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    ValidateCalled: TypedEventDescription<{
      encodeTopics([
        id,
        previousRoundId,
        previousAnswer,
        currentRoundId,
        currentAnswer,
      ]: [null, null, null, null, null]): string[];
    }>;
  };
}

export class MockAggregatorValidator extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): MockAggregatorValidator;
  attach(addressOrName: string): MockAggregatorValidator;
  deployed(): Promise<MockAggregatorValidator>;

  on(event: EventFilter | string, listener: Listener): MockAggregatorValidator;
  once(
    event: EventFilter | string,
    listener: Listener
  ): MockAggregatorValidator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MockAggregatorValidator;
  removeAllListeners(eventName: EventFilter | string): MockAggregatorValidator;
  removeListener(eventName: any, listener: Listener): MockAggregatorValidator;

  interface: MockAggregatorValidatorInterface;

  functions: {
    validate(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "validate(uint256,int256,uint256,int256)"(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  validate(
    previousRoundId: BigNumberish,
    previousAnswer: BigNumberish,
    currentRoundId: BigNumberish,
    currentAnswer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "validate(uint256,int256,uint256,int256)"(
    previousRoundId: BigNumberish,
    previousAnswer: BigNumberish,
    currentRoundId: BigNumberish,
    currentAnswer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ValidateCalled(
      id: null,
      previousRoundId: null,
      previousAnswer: null,
      currentRoundId: null,
      currentAnswer: null
    ): EventFilter;
  };

  estimate: {
    validate(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "validate(uint256,int256,uint256,int256)"(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
