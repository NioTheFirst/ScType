/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface VRFD20Interface extends Interface {
  functions: {
    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    fee: TypedFunctionDescription<{ encode([]: []): string }>;

    house: TypedFunctionDescription<{ encode([player]: [string]): string }>;

    keyHash: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    rawFulfillRandomness: TypedFunctionDescription<{
      encode([requestId, randomness]: [Arrayish, BigNumberish]): string;
    }>;

    rollDice: TypedFunctionDescription<{ encode([roller]: [string]): string }>;

    setFee: TypedFunctionDescription<{ encode([fee]: [BigNumberish]): string }>;

    setKeyHash: TypedFunctionDescription<{
      encode([keyHash]: [Arrayish]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_to]: [string]): string;
    }>;

    withdrawLINK: TypedFunctionDescription<{
      encode([to, value]: [string, BigNumberish]): string;
    }>;
  };

  events: {
    DiceLanded: TypedEventDescription<{
      encodeTopics([requestId, result]: [
        Arrayish | null,
        BigNumberish | null
      ]): string[];
    }>;

    DiceRolled: TypedEventDescription<{
      encodeTopics([requestId, roller]: [
        Arrayish | null,
        string | null
      ]): string[];
    }>;

    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;
  };
}

export class VRFD20 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): VRFD20;
  attach(addressOrName: string): VRFD20;
  deployed(): Promise<VRFD20>;

  on(event: EventFilter | string, listener: Listener): VRFD20;
  once(event: EventFilter | string, listener: Listener): VRFD20;
  addListener(eventName: EventFilter | string, listener: Listener): VRFD20;
  removeAllListeners(eventName: EventFilter | string): VRFD20;
  removeListener(eventName: any, listener: Listener): VRFD20;

  interface: VRFD20Interface;

  functions: {
    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    fee(overrides?: TransactionOverrides): Promise<BigNumber>;

    "fee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    house(player: string, overrides?: TransactionOverrides): Promise<string>;

    "house(address)"(
      player: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    keyHash(overrides?: TransactionOverrides): Promise<string>;

    "keyHash()"(overrides?: TransactionOverrides): Promise<string>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    rawFulfillRandomness(
      requestId: Arrayish,
      randomness: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "rawFulfillRandomness(bytes32,uint256)"(
      requestId: Arrayish,
      randomness: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    rollDice(
      roller: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "rollDice(address)"(
      roller: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setFee(
      fee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setFee(uint256)"(
      fee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setKeyHash(
      keyHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setKeyHash(bytes32)"(
      keyHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawLINK(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "withdrawLINK(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  fee(overrides?: TransactionOverrides): Promise<BigNumber>;

  "fee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  house(player: string, overrides?: TransactionOverrides): Promise<string>;

  "house(address)"(
    player: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  keyHash(overrides?: TransactionOverrides): Promise<string>;

  "keyHash()"(overrides?: TransactionOverrides): Promise<string>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  rawFulfillRandomness(
    requestId: Arrayish,
    randomness: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "rawFulfillRandomness(bytes32,uint256)"(
    requestId: Arrayish,
    randomness: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  rollDice(
    roller: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "rollDice(address)"(
    roller: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setFee(
    fee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setFee(uint256)"(
    fee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setKeyHash(
    keyHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setKeyHash(bytes32)"(
    keyHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawLINK(
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "withdrawLINK(address,uint256)"(
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    DiceLanded(
      requestId: Arrayish | null,
      result: BigNumberish | null
    ): EventFilter;

    DiceRolled(requestId: Arrayish | null, roller: string | null): EventFilter;

    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransferred(from: string | null, to: string | null): EventFilter;
  };

  estimate: {
    acceptOwnership(overrides?: TransactionOverrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    fee(overrides?: TransactionOverrides): Promise<BigNumber>;

    "fee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    house(player: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "house(address)"(
      player: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    keyHash(overrides?: TransactionOverrides): Promise<BigNumber>;

    "keyHash()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: Arrayish,
      randomness: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "rawFulfillRandomness(bytes32,uint256)"(
      requestId: Arrayish,
      randomness: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    rollDice(
      roller: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "rollDice(address)"(
      roller: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setFee(
      fee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setFee(uint256)"(
      fee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setKeyHash(
      keyHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setKeyHash(bytes32)"(
      keyHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdrawLINK(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdrawLINK(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
