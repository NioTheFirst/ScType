/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface BlockhashStoreInterface extends Interface {
  functions: {
    getBlockhash: TypedFunctionDescription<{
      encode([n]: [BigNumberish]): string;
    }>;

    store: TypedFunctionDescription<{ encode([n]: [BigNumberish]): string }>;

    storeEarliest: TypedFunctionDescription<{ encode([]: []): string }>;

    storeVerifyHeader: TypedFunctionDescription<{
      encode([n, header]: [BigNumberish, Arrayish]): string;
    }>;
  };

  events: {};
}

export class BlockhashStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): BlockhashStore;
  attach(addressOrName: string): BlockhashStore;
  deployed(): Promise<BlockhashStore>;

  on(event: EventFilter | string, listener: Listener): BlockhashStore;
  once(event: EventFilter | string, listener: Listener): BlockhashStore;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): BlockhashStore;
  removeAllListeners(eventName: EventFilter | string): BlockhashStore;
  removeListener(eventName: any, listener: Listener): BlockhashStore;

  interface: BlockhashStoreInterface;

  functions: {
    getBlockhash(
      n: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getBlockhash(uint256)"(
      n: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    store(
      n: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "store(uint256)"(
      n: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    storeEarliest(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "storeEarliest()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    storeVerifyHeader(
      n: BigNumberish,
      header: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "storeVerifyHeader(uint256,bytes)"(
      n: BigNumberish,
      header: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getBlockhash(
    n: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getBlockhash(uint256)"(
    n: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  store(
    n: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "store(uint256)"(
    n: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  storeEarliest(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "storeEarliest()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  storeVerifyHeader(
    n: BigNumberish,
    header: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "storeVerifyHeader(uint256,bytes)"(
    n: BigNumberish,
    header: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    getBlockhash(
      n: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getBlockhash(uint256)"(
      n: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    store(
      n: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "store(uint256)"(
      n: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    storeEarliest(overrides?: TransactionOverrides): Promise<BigNumber>;

    "storeEarliest()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    storeVerifyHeader(
      n: BigNumberish,
      header: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "storeVerifyHeader(uint256,bytes)"(
      n: BigNumberish,
      header: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
