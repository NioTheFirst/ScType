/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface TypeAndVersionInterfaceInterface extends Interface {
  functions: {
    typeAndVersion: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class TypeAndVersionInterface extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): TypeAndVersionInterface;
  attach(addressOrName: string): TypeAndVersionInterface;
  deployed(): Promise<TypeAndVersionInterface>;

  on(event: EventFilter | string, listener: Listener): TypeAndVersionInterface;
  once(
    event: EventFilter | string,
    listener: Listener
  ): TypeAndVersionInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): TypeAndVersionInterface;
  removeAllListeners(eventName: EventFilter | string): TypeAndVersionInterface;
  removeListener(eventName: any, listener: Listener): TypeAndVersionInterface;

  interface: TypeAndVersionInterfaceInterface;

  functions: {
    typeAndVersion(overrides?: TransactionOverrides): Promise<string>;

    "typeAndVersion()"(overrides?: TransactionOverrides): Promise<string>;
  };

  typeAndVersion(overrides?: TransactionOverrides): Promise<string>;

  "typeAndVersion()"(overrides?: TransactionOverrides): Promise<string>;

  filters: {};

  estimate: {
    typeAndVersion(overrides?: TransactionOverrides): Promise<BigNumber>;

    "typeAndVersion()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };
}
