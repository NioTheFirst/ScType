/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface AggregatorValidatorInterfaceInterface extends Interface {
  functions: {
    validate: TypedFunctionDescription<{
      encode([previousRoundId, previousAnswer, currentRoundId, currentAnswer]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class AggregatorValidatorInterface extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): AggregatorValidatorInterface;
  attach(addressOrName: string): AggregatorValidatorInterface;
  deployed(): Promise<AggregatorValidatorInterface>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): AggregatorValidatorInterface;
  once(
    event: EventFilter | string,
    listener: Listener
  ): AggregatorValidatorInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): AggregatorValidatorInterface;
  removeAllListeners(
    eventName: EventFilter | string
  ): AggregatorValidatorInterface;
  removeListener(
    eventName: any,
    listener: Listener
  ): AggregatorValidatorInterface;

  interface: AggregatorValidatorInterfaceInterface;

  functions: {
    validate(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "validate(uint256,int256,uint256,int256)"(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  validate(
    previousRoundId: BigNumberish,
    previousAnswer: BigNumberish,
    currentRoundId: BigNumberish,
    currentAnswer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "validate(uint256,int256,uint256,int256)"(
    previousRoundId: BigNumberish,
    previousAnswer: BigNumberish,
    currentRoundId: BigNumberish,
    currentAnswer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    validate(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "validate(uint256,int256,uint256,int256)"(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
