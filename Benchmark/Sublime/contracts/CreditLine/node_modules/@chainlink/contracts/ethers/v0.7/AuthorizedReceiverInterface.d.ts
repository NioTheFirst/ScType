/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface AuthorizedReceiverInterfaceInterface extends Interface {
  functions: {
    getAuthorizedSenders: TypedFunctionDescription<{ encode([]: []): string }>;

    isAuthorizedSender: TypedFunctionDescription<{
      encode([sender]: [string]): string;
    }>;

    setAuthorizedSenders: TypedFunctionDescription<{
      encode([senders]: [string[]]): string;
    }>;
  };

  events: {};
}

export class AuthorizedReceiverInterface extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): AuthorizedReceiverInterface;
  attach(addressOrName: string): AuthorizedReceiverInterface;
  deployed(): Promise<AuthorizedReceiverInterface>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): AuthorizedReceiverInterface;
  once(
    event: EventFilter | string,
    listener: Listener
  ): AuthorizedReceiverInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): AuthorizedReceiverInterface;
  removeAllListeners(
    eventName: EventFilter | string
  ): AuthorizedReceiverInterface;
  removeListener(
    eventName: any,
    listener: Listener
  ): AuthorizedReceiverInterface;

  interface: AuthorizedReceiverInterfaceInterface;

  functions: {
    getAuthorizedSenders(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "getAuthorizedSenders()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isAuthorizedSender(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isAuthorizedSender(address)"(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    setAuthorizedSenders(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAuthorizedSenders(address[])"(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getAuthorizedSenders(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "getAuthorizedSenders()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isAuthorizedSender(
    sender: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "isAuthorizedSender(address)"(
    sender: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  setAuthorizedSenders(
    senders: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAuthorizedSenders(address[])"(
    senders: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    getAuthorizedSenders(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getAuthorizedSenders()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isAuthorizedSender(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isAuthorizedSender(address)"(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setAuthorizedSenders(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAuthorizedSenders(address[])"(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
