/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface FluxAggregatorTestHelperInterface extends Interface {
  functions: {
    readGetAnswer: TypedFunctionDescription<{
      encode([_aggregator, _roundID]: [string, BigNumberish]): string;
    }>;

    readGetRoundData: TypedFunctionDescription<{
      encode([_aggregator, _roundID]: [string, BigNumberish]): string;
    }>;

    readGetTimestamp: TypedFunctionDescription<{
      encode([_aggregator, _roundID]: [string, BigNumberish]): string;
    }>;

    readLatestAnswer: TypedFunctionDescription<{
      encode([_aggregator]: [string]): string;
    }>;

    readLatestRound: TypedFunctionDescription<{
      encode([_aggregator]: [string]): string;
    }>;

    readLatestRoundData: TypedFunctionDescription<{
      encode([_aggregator]: [string]): string;
    }>;

    readLatestTimestamp: TypedFunctionDescription<{
      encode([_aggregator]: [string]): string;
    }>;

    readOracleRoundState: TypedFunctionDescription<{
      encode([_aggregator, _oracle]: [string, string]): string;
    }>;

    requestNewRound: TypedFunctionDescription<{
      encode([_aggregator]: [string]): string;
    }>;

    requestedRoundId: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class FluxAggregatorTestHelper extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): FluxAggregatorTestHelper;
  attach(addressOrName: string): FluxAggregatorTestHelper;
  deployed(): Promise<FluxAggregatorTestHelper>;

  on(event: EventFilter | string, listener: Listener): FluxAggregatorTestHelper;
  once(
    event: EventFilter | string,
    listener: Listener
  ): FluxAggregatorTestHelper;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): FluxAggregatorTestHelper;
  removeAllListeners(eventName: EventFilter | string): FluxAggregatorTestHelper;
  removeListener(eventName: any, listener: Listener): FluxAggregatorTestHelper;

  interface: FluxAggregatorTestHelperInterface;

  functions: {
    readGetAnswer(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "readGetAnswer(address,uint256)"(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    readGetRoundData(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "readGetRoundData(address,uint80)"(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    readGetTimestamp(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "readGetTimestamp(address,uint256)"(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    readLatestAnswer(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "readLatestAnswer(address)"(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    readLatestRound(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "readLatestRound(address)"(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    readLatestRoundData(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "readLatestRoundData(address)"(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    readLatestTimestamp(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "readLatestTimestamp(address)"(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    readOracleRoundState(
      _aggregator: string,
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "readOracleRoundState(address,address)"(
      _aggregator: string,
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestNewRound(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "requestNewRound(address)"(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestedRoundId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "requestedRoundId()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };

  readGetAnswer(
    _aggregator: string,
    _roundID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "readGetAnswer(address,uint256)"(
    _aggregator: string,
    _roundID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  readGetRoundData(
    _aggregator: string,
    _roundID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "readGetRoundData(address,uint80)"(
    _aggregator: string,
    _roundID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  readGetTimestamp(
    _aggregator: string,
    _roundID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "readGetTimestamp(address,uint256)"(
    _aggregator: string,
    _roundID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  readLatestAnswer(
    _aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "readLatestAnswer(address)"(
    _aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  readLatestRound(
    _aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "readLatestRound(address)"(
    _aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  readLatestRoundData(
    _aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "readLatestRoundData(address)"(
    _aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  readLatestTimestamp(
    _aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "readLatestTimestamp(address)"(
    _aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  readOracleRoundState(
    _aggregator: string,
    _oracle: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "readOracleRoundState(address,address)"(
    _aggregator: string,
    _oracle: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requestNewRound(
    _aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "requestNewRound(address)"(
    _aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requestedRoundId(overrides?: TransactionOverrides): Promise<BigNumber>;

  "requestedRoundId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  filters: {};

  estimate: {
    readGetAnswer(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "readGetAnswer(address,uint256)"(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    readGetRoundData(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "readGetRoundData(address,uint80)"(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    readGetTimestamp(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "readGetTimestamp(address,uint256)"(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    readLatestAnswer(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "readLatestAnswer(address)"(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    readLatestRound(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "readLatestRound(address)"(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    readLatestRoundData(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "readLatestRoundData(address)"(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    readLatestTimestamp(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "readLatestTimestamp(address)"(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    readOracleRoundState(
      _aggregator: string,
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "readOracleRoundState(address,address)"(
      _aggregator: string,
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    requestNewRound(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "requestNewRound(address)"(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    requestedRoundId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "requestedRoundId()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };
}
