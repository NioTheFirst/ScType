/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface AggregatorValidatorMockInterface extends Interface {
  functions: {
    currentAnswer: TypedFunctionDescription<{ encode([]: []): string }>;

    currentRoundId: TypedFunctionDescription<{ encode([]: []): string }>;

    previousAnswer: TypedFunctionDescription<{ encode([]: []): string }>;

    previousRoundId: TypedFunctionDescription<{ encode([]: []): string }>;

    validate: TypedFunctionDescription<{
      encode([
        _previousRoundId,
        _previousAnswer,
        _currentRoundId,
        _currentAnswer,
      ]: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]): string;
    }>;
  };

  events: {
    Validated: TypedEventDescription<{
      encodeTopics([
        _previousRoundId,
        _previousAnswer,
        _currentRoundId,
        _currentAnswer,
      ]: [null, BigNumberish | null, null, BigNumberish | null]): string[];
    }>;
  };
}

export class AggregatorValidatorMock extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): AggregatorValidatorMock;
  attach(addressOrName: string): AggregatorValidatorMock;
  deployed(): Promise<AggregatorValidatorMock>;

  on(event: EventFilter | string, listener: Listener): AggregatorValidatorMock;
  once(
    event: EventFilter | string,
    listener: Listener
  ): AggregatorValidatorMock;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): AggregatorValidatorMock;
  removeAllListeners(eventName: EventFilter | string): AggregatorValidatorMock;
  removeListener(eventName: any, listener: Listener): AggregatorValidatorMock;

  interface: AggregatorValidatorMockInterface;

  functions: {
    currentAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

    "currentAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    currentRoundId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "currentRoundId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    previousAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

    "previousAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    previousRoundId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "previousRoundId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    validate(
      _previousRoundId: BigNumberish,
      _previousAnswer: BigNumberish,
      _currentRoundId: BigNumberish,
      _currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "validate(uint256,int256,uint256,int256)"(
      _previousRoundId: BigNumberish,
      _previousAnswer: BigNumberish,
      _currentRoundId: BigNumberish,
      _currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  currentAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

  "currentAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  currentRoundId(overrides?: TransactionOverrides): Promise<BigNumber>;

  "currentRoundId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  previousAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

  "previousAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  previousRoundId(overrides?: TransactionOverrides): Promise<BigNumber>;

  "previousRoundId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  validate(
    _previousRoundId: BigNumberish,
    _previousAnswer: BigNumberish,
    _currentRoundId: BigNumberish,
    _currentAnswer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "validate(uint256,int256,uint256,int256)"(
    _previousRoundId: BigNumberish,
    _previousAnswer: BigNumberish,
    _currentRoundId: BigNumberish,
    _currentAnswer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Validated(
      _previousRoundId: null,
      _previousAnswer: BigNumberish | null,
      _currentRoundId: null,
      _currentAnswer: BigNumberish | null
    ): EventFilter;
  };

  estimate: {
    currentAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

    "currentAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    currentRoundId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "currentRoundId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    previousAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

    "previousAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    previousRoundId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "previousRoundId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    validate(
      _previousRoundId: BigNumberish,
      _previousAnswer: BigNumberish,
      _currentRoundId: BigNumberish,
      _currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "validate(uint256,int256,uint256,int256)"(
      _previousRoundId: BigNumberish,
      _previousAnswer: BigNumberish,
      _currentRoundId: BigNumberish,
      _currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
