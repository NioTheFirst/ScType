/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface VRFCoordinatorMockInterface extends Interface {
  functions: {
    LINK: TypedFunctionDescription<{ encode([]: []): string }>;

    callBackWithRandomness: TypedFunctionDescription<{
      encode([requestId, randomness, consumerContract]: [
        Arrayish,
        BigNumberish,
        string
      ]): string;
    }>;

    onTokenTransfer: TypedFunctionDescription<{
      encode([sender, fee, _data]: [string, BigNumberish, Arrayish]): string;
    }>;
  };

  events: {
    RandomnessRequest: TypedEventDescription<{
      encodeTopics([sender, keyHash, seed]: [
        string | null,
        Arrayish | null,
        BigNumberish | null
      ]): string[];
    }>;
  };
}

export class VRFCoordinatorMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): VRFCoordinatorMock;
  attach(addressOrName: string): VRFCoordinatorMock;
  deployed(): Promise<VRFCoordinatorMock>;

  on(event: EventFilter | string, listener: Listener): VRFCoordinatorMock;
  once(event: EventFilter | string, listener: Listener): VRFCoordinatorMock;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): VRFCoordinatorMock;
  removeAllListeners(eventName: EventFilter | string): VRFCoordinatorMock;
  removeListener(eventName: any, listener: Listener): VRFCoordinatorMock;

  interface: VRFCoordinatorMockInterface;

  functions: {
    LINK(overrides?: TransactionOverrides): Promise<string>;

    "LINK()"(overrides?: TransactionOverrides): Promise<string>;

    callBackWithRandomness(
      requestId: Arrayish,
      randomness: BigNumberish,
      consumerContract: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "callBackWithRandomness(bytes32,uint256,address)"(
      requestId: Arrayish,
      randomness: BigNumberish,
      consumerContract: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onTokenTransfer(
      sender: string,
      fee: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "onTokenTransfer(address,uint256,bytes)"(
      sender: string,
      fee: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  LINK(overrides?: TransactionOverrides): Promise<string>;

  "LINK()"(overrides?: TransactionOverrides): Promise<string>;

  callBackWithRandomness(
    requestId: Arrayish,
    randomness: BigNumberish,
    consumerContract: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "callBackWithRandomness(bytes32,uint256,address)"(
    requestId: Arrayish,
    randomness: BigNumberish,
    consumerContract: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onTokenTransfer(
    sender: string,
    fee: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "onTokenTransfer(address,uint256,bytes)"(
    sender: string,
    fee: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    RandomnessRequest(
      sender: string | null,
      keyHash: Arrayish | null,
      seed: BigNumberish | null
    ): EventFilter;
  };

  estimate: {
    LINK(overrides?: TransactionOverrides): Promise<BigNumber>;

    "LINK()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    callBackWithRandomness(
      requestId: Arrayish,
      randomness: BigNumberish,
      consumerContract: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "callBackWithRandomness(bytes32,uint256,address)"(
      requestId: Arrayish,
      randomness: BigNumberish,
      consumerContract: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    onTokenTransfer(
      sender: string,
      fee: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "onTokenTransfer(address,uint256,bytes)"(
      sender: string,
      fee: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
