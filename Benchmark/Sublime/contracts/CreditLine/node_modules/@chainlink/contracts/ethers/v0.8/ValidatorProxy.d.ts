/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface ValidatorProxyInterface extends Interface {
  functions: {
    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    getAggregators: TypedFunctionDescription<{ encode([]: []): string }>;

    getValidators: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    proposeNewAggregator: TypedFunctionDescription<{
      encode([proposed]: [string]): string;
    }>;

    proposeNewValidator: TypedFunctionDescription<{
      encode([proposed]: [string]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([to]: [string]): string;
    }>;

    typeAndVersion: TypedFunctionDescription<{ encode([]: []): string }>;

    upgradeAggregator: TypedFunctionDescription<{ encode([]: []): string }>;

    upgradeValidator: TypedFunctionDescription<{ encode([]: []): string }>;

    validate: TypedFunctionDescription<{
      encode([previousRoundId, previousAnswer, currentRoundId, currentAnswer]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    AggregatorProposed: TypedEventDescription<{
      encodeTopics([aggregator]: [string | null]): string[];
    }>;

    AggregatorUpgraded: TypedEventDescription<{
      encodeTopics([previous, current]: [
        string | null,
        string | null
      ]): string[];
    }>;

    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    ProposedAggregatorValidateCall: TypedEventDescription<{
      encodeTopics([
        proposed,
        previousRoundId,
        previousAnswer,
        currentRoundId,
        currentAnswer,
      ]: [string | null, null, null, null, null]): string[];
    }>;

    ValidatorProposed: TypedEventDescription<{
      encodeTopics([validator]: [string | null]): string[];
    }>;

    ValidatorUpgraded: TypedEventDescription<{
      encodeTopics([previous, current]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class ValidatorProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ValidatorProxy;
  attach(addressOrName: string): ValidatorProxy;
  deployed(): Promise<ValidatorProxy>;

  on(event: EventFilter | string, listener: Listener): ValidatorProxy;
  once(event: EventFilter | string, listener: Listener): ValidatorProxy;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ValidatorProxy;
  removeAllListeners(eventName: EventFilter | string): ValidatorProxy;
  removeListener(eventName: any, listener: Listener): ValidatorProxy;

  interface: ValidatorProxyInterface;

  functions: {
    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getAggregators(
      overrides?: TransactionOverrides
    ): Promise<
      [string, boolean, string] & {
        current: string;
        hasProposal: boolean;
        proposed: string;
      }
    >;

    "getAggregators()"(
      overrides?: TransactionOverrides
    ): Promise<
      [string, boolean, string] & {
        current: string;
        hasProposal: boolean;
        proposed: string;
      }
    >;

    getValidators(
      overrides?: TransactionOverrides
    ): Promise<
      [string, boolean, string] & {
        current: string;
        hasProposal: boolean;
        proposed: string;
      }
    >;

    "getValidators()"(
      overrides?: TransactionOverrides
    ): Promise<
      [string, boolean, string] & {
        current: string;
        hasProposal: boolean;
        proposed: string;
      }
    >;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    proposeNewAggregator(
      proposed: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "proposeNewAggregator(address)"(
      proposed: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    proposeNewValidator(
      proposed: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "proposeNewValidator(address)"(
      proposed: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    typeAndVersion(overrides?: TransactionOverrides): Promise<string>;

    "typeAndVersion()"(overrides?: TransactionOverrides): Promise<string>;

    upgradeAggregator(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "upgradeAggregator()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    upgradeValidator(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "upgradeValidator()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    validate(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "validate(uint256,int256,uint256,int256)"(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getAggregators(
    overrides?: TransactionOverrides
  ): Promise<
    [string, boolean, string] & {
      current: string;
      hasProposal: boolean;
      proposed: string;
    }
  >;

  "getAggregators()"(
    overrides?: TransactionOverrides
  ): Promise<
    [string, boolean, string] & {
      current: string;
      hasProposal: boolean;
      proposed: string;
    }
  >;

  getValidators(
    overrides?: TransactionOverrides
  ): Promise<
    [string, boolean, string] & {
      current: string;
      hasProposal: boolean;
      proposed: string;
    }
  >;

  "getValidators()"(
    overrides?: TransactionOverrides
  ): Promise<
    [string, boolean, string] & {
      current: string;
      hasProposal: boolean;
      proposed: string;
    }
  >;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  proposeNewAggregator(
    proposed: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "proposeNewAggregator(address)"(
    proposed: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  proposeNewValidator(
    proposed: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "proposeNewValidator(address)"(
    proposed: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  typeAndVersion(overrides?: TransactionOverrides): Promise<string>;

  "typeAndVersion()"(overrides?: TransactionOverrides): Promise<string>;

  upgradeAggregator(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "upgradeAggregator()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  upgradeValidator(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "upgradeValidator()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  validate(
    previousRoundId: BigNumberish,
    previousAnswer: BigNumberish,
    currentRoundId: BigNumberish,
    currentAnswer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "validate(uint256,int256,uint256,int256)"(
    previousRoundId: BigNumberish,
    previousAnswer: BigNumberish,
    currentRoundId: BigNumberish,
    currentAnswer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AggregatorProposed(aggregator: string | null): EventFilter;

    AggregatorUpgraded(
      previous: string | null,
      current: string | null
    ): EventFilter;

    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransferred(from: string | null, to: string | null): EventFilter;

    ProposedAggregatorValidateCall(
      proposed: string | null,
      previousRoundId: null,
      previousAnswer: null,
      currentRoundId: null,
      currentAnswer: null
    ): EventFilter;

    ValidatorProposed(validator: string | null): EventFilter;

    ValidatorUpgraded(
      previous: string | null,
      current: string | null
    ): EventFilter;
  };

  estimate: {
    acceptOwnership(overrides?: TransactionOverrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getAggregators(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getAggregators()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getValidators(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getValidators()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    proposeNewAggregator(
      proposed: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "proposeNewAggregator(address)"(
      proposed: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    proposeNewValidator(
      proposed: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "proposeNewValidator(address)"(
      proposed: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    typeAndVersion(overrides?: TransactionOverrides): Promise<BigNumber>;

    "typeAndVersion()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    upgradeAggregator(overrides?: TransactionOverrides): Promise<BigNumber>;

    "upgradeAggregator()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    upgradeValidator(overrides?: TransactionOverrides): Promise<BigNumber>;

    "upgradeValidator()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    validate(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "validate(uint256,int256,uint256,int256)"(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
