'use strict'
Object.defineProperty(exports, '__esModule', { value: true })
const contract = require('@truffle/contract')
const KeeperCompatibleInterface = contract({
 "contractName": "KeeperCompatibleInterface",
 "abi": [
  {
   "inputs": [
    {
     "internalType": "bytes",
     "name": "checkData",
     "type": "bytes"
    }
   ],
   "name": "checkUpkeep",
   "outputs": [
    {
     "internalType": "bool",
     "name": "upkeepNeeded",
     "type": "bool"
    },
    {
     "internalType": "bytes",
     "name": "performData",
     "type": "bytes"
    }
   ],
   "stateMutability": "nonpayable",
   "type": "function"
  },
  {
   "inputs": [
    {
     "internalType": "bytes",
     "name": "performData",
     "type": "bytes"
    }
   ],
   "name": "performUpkeep",
   "outputs": [],
   "stateMutability": "nonpayable",
   "type": "function"
  }
 ],
 "evm": {
  "bytecode": {
   "object": "0x",
   "sourceMap": ""
  },
  "deployedBytecode": {
   "object": "0x",
   "sourceMap": ""
  },
  "methodIdentifiers": {
   "checkUpkeep(bytes)": "6e04ff0d",
   "performUpkeep(bytes)": "4585e33b"
  }
 },
 "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"params\":{\"checkData\":\"data passed to the contract when checking for upkeep.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"checks if the contract requires work to be done.\"},\"performUpkeep(bytes)\":{\"notice\":\"Performs work on the contract. Executed by the keepers, via the registry.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/KeeperCompatibleInterface.sol\":\"KeeperCompatibleInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/KeeperCompatibleInterface.sol\":{\"keccak256\":\"0x810df99a0e7d0e5c61f98e5a1bc0d8319399740f6c83e375a46f3c9d5466024c\",\"urls\":[\"bzz-raw://809e9be4b35d5044e760eb7d0f6505ffb5c5dd98e8436775bedb1bb4b0a8ce7b\",\"dweb:/ipfs/QmUsNDDtMme2uogD1NLCwdxpsh7BNqhhwia3VF7aW92AP8\"]}},\"version\":1}"
})

if (process.env.NODE_ENV === 'test') {
  try {
    eval('KeeperCompatibleInterface.setProvider(web3.currentProvider)')
  } catch (e) {}
}

exports.KeeperCompatibleInterface = KeeperCompatibleInterface
