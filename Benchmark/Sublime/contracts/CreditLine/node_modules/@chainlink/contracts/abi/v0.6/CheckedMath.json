{
	"schemaVersion": "2.0.0",
	"contractName": "CheckedMath",
	"compilerOutput": {
		"abi": [],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x602d6023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000606000a",
				"opcodes": "PUSH1 0x2D PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP MOD MOD STOP EXP ",
				"sourceMap": "209:1637:5:-:0;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
			},
			"deployedBytecode": {
				"immutableReferences": {},
				"linkReferences": {},
				"object": "0x73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000606000a",
				"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP MOD MOD STOP EXP ",
				"sourceMap": "209:1637:5:-:0;;;;;;12:1:-1;9;2:12"
			},
			"methodIdentifiers": {}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/CheckedMath.sol\":\"CheckedMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/CheckedMath.sol\":{\"keccak256\":\"0x439a63c43130864169cc5c31b5a812389cc1d9ebf292cdf64f47c4d059d3c48e\",\"urls\":[\"bzz-raw://a18a2d559d2bb124030cbb399d54b214a977d7c94e6f53cc7b2b0e4d1c89c8c1\",\"dweb:/ipfs/QmWvLUVcBfhDeXSKBgVnFRkZetP4XfRxvWVNq4VXf9Bghw\"]}},\"version\":1}",
		"userdoc": {
			"methods": {}
		}
	},
	"sources": {
		"CheckedMath.sol": {
			"id": 5
		}
	},
	"sourceCodes": {
		"CheckedMath.sol": "// SPDX-License-Identifier: MIT\n// Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/97894a140d2a698e5a0f913648a8f56d62277a70/contracts/math/SignedSafeMath.sol\n\npragma solidity ^0.6.0;\n\nlibrary CheckedMath {\n\n  int256 constant internal INT256_MIN = -2**255;\n\n  /**\n   * @dev Subtracts two signed integers, returns false 2nd param on overflow.\n   */\n  function add(\n    int256 a,\n    int256 b\n  )\n    internal\n    pure\n    returns (int256 result, bool ok)\n  {\n    int256 c = a + b;\n    if ((b >= 0 && c < a) || (b < 0 && c >= a)) return (0, false);\n\n    return (c, true);\n  }\n\n  /**\n   * @dev Subtracts two signed integers, returns false 2nd param on overflow.\n   */\n  function sub(\n    int256 a,\n    int256 b\n  )\n    internal\n    pure\n    returns (int256 result, bool ok)\n  {\n    int256 c = a - b;\n    if ((b < 0 && c <= a) || (b >= 0 && c > a)) return (0, false);\n\n    return (c, true);\n  }\n\n\n  /**\n   * @dev Multiplies two signed integers, returns false 2nd param on overflow.\n   */\n  function mul(\n    int256 a,\n    int256 b\n  )\n    internal\n    pure\n    returns (int256 result, bool ok)\n  {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    if (a == 0) return (0, true);\n    if (a == -1 && b == INT256_MIN) return (0, false);\n\n    int256 c = a * b;\n    if (!(c / a == b)) return (0, false);\n\n    return (c, true);\n  }\n\n  /**\n   * @dev Divides two signed integers, returns false 2nd param on overflow.\n   */\n  function div(\n    int256 a,\n    int256 b\n  )\n    internal\n    pure\n    returns (int256 result, bool ok)\n  {\n    if (b == 0) return (0, false);\n    if (b == -1 && a == INT256_MIN) return (0, false);\n\n    int256 c = a / b;\n\n    return (c, true);\n  }\n\n}\n"
	},
	"sourceTreeHashHex": "0x439a63c43130864169cc5c31b5a812389cc1d9ebf292cdf64f47c4d059d3c48e",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.6.6+commit.6c089d02.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"metadata": {
				"bytecodeHash": "none"
			},
			"remappings": []
		}
	},
	"chains": {}
}