{
	"schemaVersion": "2.0.0",
	"contractName": "Consumer",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_link",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_oracle",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_specId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "ChainlinkCancelled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "ChainlinkFulfilled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "ChainlinkRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "price",
						"type": "bytes32"
					}
				],
				"name": "RequestFulfilled",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_oracle",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_requestId",
						"type": "bytes32"
					}
				],
				"name": "addExternalRequest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_oracle",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_requestId",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "_payment",
						"type": "uint256"
					},
					{
						"internalType": "bytes4",
						"name": "_callbackFunctionId",
						"type": "bytes4"
					},
					{
						"internalType": "uint256",
						"name": "_expiration",
						"type": "uint256"
					}
				],
				"name": "cancelRequest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentPrice",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_requestId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_price",
						"type": "bytes32"
					}
				],
				"name": "fulfill",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_currency",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_payment",
						"type": "uint256"
					}
				],
				"name": "requestEthereumPrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_currency",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_payment",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_callback",
						"type": "address"
					}
				],
				"name": "requestEthereumPriceByCallback",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawLink",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"evm": {
			"bytecode": {
				"object": "0x6080604052600160045534801561001557600080fd5b506040516112e13803806112e18339818101604052606081101561003857600080fd5b508051602082015160409092015190919061005283610066565b61005b82610088565b600655506100aa9050565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b611228806100b96000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806383db5cbc1161005b57806383db5cbc146101d55780638dc654a21461027d5780639d1b464a14610285578063e8d5359d1461029f5761007d565b8063042f2b65146100825780635591a608146100a757806374961d4d14610114575b600080fd5b6100a56004803603604081101561009857600080fd5b50803590602001356102d8565b005b6100a5600480360360a08110156100bd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135906040810135907fffffffff0000000000000000000000000000000000000000000000000000000060608201351690608001356103e5565b6100a56004803603606081101561012a57600080fd5b81019060208101813564010000000081111561014557600080fd5b82018360208201111561015757600080fd5b8035906020019184600183028401116401000000008311171561017957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020013573ffffffffffffffffffffffffffffffffffffffff166104ac565b6100a5600480360360408110156101eb57600080fd5b81019060208101813564010000000081111561020657600080fd5b82018360208201111561021857600080fd5b8035906020019184600183028401116401000000008311171561023a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506105c1915050565b6100a56105d0565b61028d61079a565b60408051918252519081900360200190f35b6100a5600480360360408110156102b557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107a0565b600082815260056020526040902054829073ffffffffffffffffffffffffffffffffffffffff163314610356576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806111ad6028913960400191505060405180910390fd5b60008181526005602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a2604051829084907f0c2366233f634048c0f0458060d1228fab36d00f7c0ecf6bdf2d9c458503631190600090a35060075550565b604080517f6ee4d55300000000000000000000000000000000000000000000000000000000815260048101869052602481018590527fffffffff0000000000000000000000000000000000000000000000000000000084166044820152606481018390529051869173ffffffffffffffffffffffffffffffffffffffff831691636ee4d5539160848082019260009290919082900301818387803b15801561048c57600080fd5b505af11580156104a0573d6000803e3d6000fd5b50505050505050505050565b60006104c26006548363042f2b6560e01b6107aa565b905061051e6040518060400160405280600381526020017f67657400000000000000000000000000000000000000000000000000000000008152506040518060800160405280604781526020016111d5604791398391906107cf565b604080516001808252818301909252600091816020015b6060815260200190600190039081610535579050509050848160008151811061055a57fe5b60200260200101819052506105af6040518060400160405280600481526020017f706174680000000000000000000000000000000000000000000000000000000081525082846107f29092919063ffffffff16565b6105b9828561085a565b505050505050565b6105cc8282306104ac565b5050565b60006105da61088a565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561066057600080fd5b505afa158015610674573d6000803e3d6000fd5b505050506040513d602081101561068a57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff909316600484015260248301919091525160448083019260209291908290030181600087803b15801561070057600080fd5b505af1158015610714573d6000803e3d6000fd5b505050506040513d602081101561072a57600080fd5b505161079757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e61626c6520746f207472616e736665720000000000000000000000000000604482015290519081900360640190fd5b50565b60075481565b6105cc82826108a6565b6107b261113a565b6107ba61113a565b6107c68186868661098d565b95945050505050565b60808301516107de90836109ef565b60808301516107ed90826109ef565b505050565b608083015161080190836109ef565b61080e8360800151610a06565b60005b815181101561084c5761084482828151811061082957fe5b602002602001015185608001516109ef90919063ffffffff16565b600101610811565b506107ed8360800151610a11565b6003546000906108819073ffffffffffffffffffffffffffffffffffffffff168484610a1c565b90505b92915050565b60025473ffffffffffffffffffffffffffffffffffffffff1690565b600081815260056020526040902054819073ffffffffffffffffffffffffffffffffffffffff161561093957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5265717565737420697320616c72656164792070656e64696e67000000000000604482015290519081900360640190fd5b50600090815260056020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61099561113a565b6109a58560800151610100610a54565b505091835273ffffffffffffffffffffffffffffffffffffffff1660208301527fffffffff0000000000000000000000000000000000000000000000000000000016604082015290565b6109fc8260038351610a8e565b6107ed8282610b68565b610797816004610b82565b610797816007610b82565b6000610a4c84848460017f4042994600000000000000000000000000000000000000000000000000000000610b97565b949350505050565b610a5c61116f565b6020820615610a715760208206602003820191505b506020828101829052604080518085526000815290920101905290565b60178111610aaf57610aa98360e0600585901b168317610f4a565b506107ed565b60ff8111610ad957610acc836018611fe0600586901b1617610f4a565b50610aa983826001610f62565b61ffff8111610b0457610af7836019611fe0600586901b1617610f4a565b50610aa983826002610f62565b63ffffffff8111610b3157610b2483601a611fe0600586901b1617610f4a565b50610aa983826004610f62565b67ffffffffffffffff81116107ed57610b5583601b611fe0600586901b1617610f4a565b50610b6283826008610f62565b50505050565b610b7061116f565b61088183846000015151848551610f7b565b6107ed82601f611fe0600585901b1617610f4a565b6004546040805130606090811b60208084019190915260348084018690528451808503909101815260549093018452825192810192909220908801939093526000838152600590915281812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a16179055905182917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af991a2600082600080886000015189602001518a604001518b606001518a8d6080015160000151604051602401808973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff168152602001857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d21578181015183820152602001610d09565b50505050905090810190601f168015610d4e5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08887846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e68578181015183820152602001610e50565b50505050905090810190601f168015610e955780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610eb657600080fd5b505af1158015610eca573d6000803e3d6000fd5b505050506040513d6020811015610ee057600080fd5b5051610f37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061118a6023913960400191505060405180910390fd5b5060048054600101905595945050505050565b610f5261116f565b6108818384600001515184611063565b610f6a61116f565b610a4c8485600001515185856110ae565b610f8361116f565b8251821115610f9157600080fd5b84602001518285011115610fbb57610fbb85610fb3876020015187860161110c565b600202611123565b600080865180518760208301019350808887011115610fda5787860182525b505050602084015b6020841061101f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09093019260209182019101610fe2565b5181517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60208690036101000a019081169019919091161790525083949350505050565b61106b61116f565b8360200151831061108757611087848560200151600202611123565b8351805160208583010184815350808514156110a4576001810182525b5093949350505050565b6110b661116f565b846020015184830111156110d3576110d385858401600202611123565b60006001836101000a0390508551838682010185831982511617815250805184870111156111015783860181525b509495945050505050565b60008183111561111d575081610884565b50919050565b815161112f8383610a54565b50610b628382610b68565b6040805160a08101825260008082526020820181905291810182905260608101919091526080810161116a61116f565b905290565b60405180604001604052806060815260200160008152509056fe756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261636c65536f75726365206d75737420626520746865206f7261636c65206f6620746865207265717565737468747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963653f6673796d3d455448267473796d733d5553442c4555522c4a5059a164736f6c6343000706000a",
				"sourceMap": "91:2031:33:-:0;;;1221:1:1;1190:32;;342:180:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;342:180:33;;;;;;;;;;;;;;438:24;342:180;438:17;:24::i;:::-;468:27;487:7;468:18;:27::i;:::-;501:6;:16;-1:-1:-1;91:2031:33;;-1:-1:-1;91:2031:33;7485:120:1;7562:4;:38;;-1:-1:-1;;;;;;7562:38:1;-1:-1:-1;;;;;7562:38:1;;;;;;;;;;7485:120::o;7239:126::-;7319:6;:41;;-1:-1:-1;;;;;;7319:41:1;-1:-1:-1;;;;;7319:41:1;;;;;;;;;;7239:126::o;91:2031:33:-;;;;;;;"
			},
			"deployedBytecode": {
				"object": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806383db5cbc1161005b57806383db5cbc146101d55780638dc654a21461027d5780639d1b464a14610285578063e8d5359d1461029f5761007d565b8063042f2b65146100825780635591a608146100a757806374961d4d14610114575b600080fd5b6100a56004803603604081101561009857600080fd5b50803590602001356102d8565b005b6100a5600480360360a08110156100bd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135906040810135907fffffffff0000000000000000000000000000000000000000000000000000000060608201351690608001356103e5565b6100a56004803603606081101561012a57600080fd5b81019060208101813564010000000081111561014557600080fd5b82018360208201111561015757600080fd5b8035906020019184600183028401116401000000008311171561017957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020013573ffffffffffffffffffffffffffffffffffffffff166104ac565b6100a5600480360360408110156101eb57600080fd5b81019060208101813564010000000081111561020657600080fd5b82018360208201111561021857600080fd5b8035906020019184600183028401116401000000008311171561023a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506105c1915050565b6100a56105d0565b61028d61079a565b60408051918252519081900360200190f35b6100a5600480360360408110156102b557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107a0565b600082815260056020526040902054829073ffffffffffffffffffffffffffffffffffffffff163314610356576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806111ad6028913960400191505060405180910390fd5b60008181526005602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a2604051829084907f0c2366233f634048c0f0458060d1228fab36d00f7c0ecf6bdf2d9c458503631190600090a35060075550565b604080517f6ee4d55300000000000000000000000000000000000000000000000000000000815260048101869052602481018590527fffffffff0000000000000000000000000000000000000000000000000000000084166044820152606481018390529051869173ffffffffffffffffffffffffffffffffffffffff831691636ee4d5539160848082019260009290919082900301818387803b15801561048c57600080fd5b505af11580156104a0573d6000803e3d6000fd5b50505050505050505050565b60006104c26006548363042f2b6560e01b6107aa565b905061051e6040518060400160405280600381526020017f67657400000000000000000000000000000000000000000000000000000000008152506040518060800160405280604781526020016111d5604791398391906107cf565b604080516001808252818301909252600091816020015b6060815260200190600190039081610535579050509050848160008151811061055a57fe5b60200260200101819052506105af6040518060400160405280600481526020017f706174680000000000000000000000000000000000000000000000000000000081525082846107f29092919063ffffffff16565b6105b9828561085a565b505050505050565b6105cc8282306104ac565b5050565b60006105da61088a565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561066057600080fd5b505afa158015610674573d6000803e3d6000fd5b505050506040513d602081101561068a57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff909316600484015260248301919091525160448083019260209291908290030181600087803b15801561070057600080fd5b505af1158015610714573d6000803e3d6000fd5b505050506040513d602081101561072a57600080fd5b505161079757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e61626c6520746f207472616e736665720000000000000000000000000000604482015290519081900360640190fd5b50565b60075481565b6105cc82826108a6565b6107b261113a565b6107ba61113a565b6107c68186868661098d565b95945050505050565b60808301516107de90836109ef565b60808301516107ed90826109ef565b505050565b608083015161080190836109ef565b61080e8360800151610a06565b60005b815181101561084c5761084482828151811061082957fe5b602002602001015185608001516109ef90919063ffffffff16565b600101610811565b506107ed8360800151610a11565b6003546000906108819073ffffffffffffffffffffffffffffffffffffffff168484610a1c565b90505b92915050565b60025473ffffffffffffffffffffffffffffffffffffffff1690565b600081815260056020526040902054819073ffffffffffffffffffffffffffffffffffffffff161561093957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5265717565737420697320616c72656164792070656e64696e67000000000000604482015290519081900360640190fd5b50600090815260056020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61099561113a565b6109a58560800151610100610a54565b505091835273ffffffffffffffffffffffffffffffffffffffff1660208301527fffffffff0000000000000000000000000000000000000000000000000000000016604082015290565b6109fc8260038351610a8e565b6107ed8282610b68565b610797816004610b82565b610797816007610b82565b6000610a4c84848460017f4042994600000000000000000000000000000000000000000000000000000000610b97565b949350505050565b610a5c61116f565b6020820615610a715760208206602003820191505b506020828101829052604080518085526000815290920101905290565b60178111610aaf57610aa98360e0600585901b168317610f4a565b506107ed565b60ff8111610ad957610acc836018611fe0600586901b1617610f4a565b50610aa983826001610f62565b61ffff8111610b0457610af7836019611fe0600586901b1617610f4a565b50610aa983826002610f62565b63ffffffff8111610b3157610b2483601a611fe0600586901b1617610f4a565b50610aa983826004610f62565b67ffffffffffffffff81116107ed57610b5583601b611fe0600586901b1617610f4a565b50610b6283826008610f62565b50505050565b610b7061116f565b61088183846000015151848551610f7b565b6107ed82601f611fe0600585901b1617610f4a565b6004546040805130606090811b60208084019190915260348084018690528451808503909101815260549093018452825192810192909220908801939093526000838152600590915281812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a16179055905182917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af991a2600082600080886000015189602001518a604001518b606001518a8d6080015160000151604051602401808973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff168152602001857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d21578181015183820152602001610d09565b50505050905090810190601f168015610d4e5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08887846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e68578181015183820152602001610e50565b50505050905090810190601f168015610e955780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610eb657600080fd5b505af1158015610eca573d6000803e3d6000fd5b505050506040513d6020811015610ee057600080fd5b5051610f37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061118a6023913960400191505060405180910390fd5b5060048054600101905595945050505050565b610f5261116f565b6108818384600001515184611063565b610f6a61116f565b610a4c8485600001515185856110ae565b610f8361116f565b8251821115610f9157600080fd5b84602001518285011115610fbb57610fbb85610fb3876020015187860161110c565b600202611123565b600080865180518760208301019350808887011115610fda5787860182525b505050602084015b6020841061101f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09093019260209182019101610fe2565b5181517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60208690036101000a019081169019919091161790525083949350505050565b61106b61116f565b8360200151831061108757611087848560200151600202611123565b8351805160208583010184815350808514156110a4576001810182525b5093949350505050565b6110b661116f565b846020015184830111156110d3576110d385858401600202611123565b60006001836101000a0390508551838682010185831982511617815250805184870111156111015783860181525b509495945050505050565b60008183111561111d575081610884565b50919050565b815161112f8383610a54565b50610b628382610b68565b6040805160a08101825260008082526020820181905291810182905260608101919091526080810161116a61116f565b905290565b60405180604001604052806060815260200160008152509056fe756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261636c65536f75726365206d75737420626520746865206f7261636c65206f6620746865207265717565737468747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963653f6673796d3d455448267473796d733d5553442c4555522c4a5059a164736f6c6343000706000a",
				"sourceMap": "91:2031:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1919:200;;;;;;;;;;;;;;;;-1:-1:-1;1919:200:33;;;;;;;:::i;:::-;;1205:338;;;;;;;;;;;;;;;;-1:-1:-1;1205:338:33;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;705:496::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;705:496:33;;-1:-1:-1;;705:496:33;;;-1:-1:-1;;;705:496:33;;;;;;:::i;526:175::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;526:175:33;;-1:-1:-1;;526:175:33;;;-1:-1:-1;526:175:33;;-1:-1:-1;;526:175:33:i;1547:213::-;;;:::i;201:27::-;;;:::i;:::-;;;;;;;;;;;;;;;;1764:151;;;;;;;;;;;;;;;;-1:-1:-1;1764:151:33;;;;;;;;;:::i;1919:200::-;10638:26:1;;;;:15;:26;;;;;;;;;;10624:10;:40;10616:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10734:26;;;;:15;:26;;;;;;10727:33;;;;;;10771:29;10750:9;;10771:29;;;2051:36:33::1;::::0;2080:6;;2068:10;;2051:36:::1;::::0;;;::::1;-1:-1:-1::0;2093:12:33::1;:21:::0;-1:-1:-1;1919:200:33:o;1205:338::-;1453:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1439:7;;1453:29;;;;;;:85;;;;;1375:35;;1453:85;;;;;;;;1375:35;1453:29;:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1205:338;;;;;;:::o;705:496::-;842:28;873:63;895:6;;903:9;914:21;;;873;:63::i;:::-;842:94;;942:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:3;;:89;:7;:89::i;:::-;1060:15;;;1073:1;1060:15;;;;;;;;;1037:20;;1060:15;;;;;;;;;;;;;;;;;;;;1037:38;;1091:9;1081:4;1086:1;1081:7;;;;;;;;;;;;;:19;;;;1106:32;;;;;;;;;;;;;;;;;;1133:4;1106:3;:18;;:32;;;;;:::i;:::-;1161:35;1182:3;1187:8;1161:20;:35::i;:::-;;705:496;;;;;:::o;526:175::-;630:66;661:9;672:8;690:4;630:30;:66::i;:::-;526:175;;:::o;1547:213::-;1590:24;1636:23;:21;:23::i;:::-;1590:70;;1674:5;:14;;;1689:10;1701:5;:15;;;1725:4;1701:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1701:30:33;1674:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1701:30;;1674:58;;;;;;;-1:-1:-1;1674:58:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1674:58:33;1666:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1547:213;:::o;201:27::-;;;;:::o;1764:151::-;1862:48;1890:7;1899:10;1862:27;:48::i;1846:315:1:-;2010:24;;:::i;:::-;2049:28;;:::i;:::-;2090:66;:3;2105:6;2113:15;2130:25;2090:14;:66::i;:::-;2083:73;1846:315;-1:-1:-1;;;;;1846:315:1:o;2003:185:0:-;2123:8;;;;:26;;2145:3;2123:21;:26::i;:::-;2155:8;;;;:28;;2177:5;2155:21;:28::i;:::-;2003:185;;;:::o;3571:316::-;3705:8;;;;:26;;3727:3;3705:21;:26::i;:::-;3737:21;:4;:8;;;:19;:21::i;:::-;3769:9;3764:91;3788:6;:13;3784:1;:17;3764:91;;;3816:32;3838:6;3845:1;3838:9;;;;;;;;;;;;;;3816:4;:8;;;:21;;:32;;;;:::i;:::-;3803:3;;3764:91;;;;3860:22;:4;:8;;;:20;:22::i;2466:209:1:-;2648:6;;2588:7;;2617:53;;2648:6;;2657:3;2662:7;2617:22;:53::i;:::-;2610:60;;2466:209;;;;;:::o;7977:122::-;8089:4;;;;7977:122;:::o;8629:192::-;11041:1;11003:26;;;:15;:26;;;;;;8755:9;;11003:40;:26;:40;10995:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8774:26:1::1;::::0;;;:15:::1;:26;::::0;;;;:42;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;8629:192::o;991:377:0:-;1152:24;;:::i;:::-;1191:49;1212:4;:8;;;365:3;1191:20;:49::i;:::-;-1:-1:-1;;1246:15:0;;;1267:35;;:20;;;:35;1308:38;;:23;;;:38;1246:15;991:377::o;2793:210:40:-;2913:55;2924:3;386:1;2954:5;2948:19;2913:10;:55::i;:::-;2974:24;:3;2991:5;2974:10;:24::i;3007:147::-;3100:49;3127:3;433:1;3100:26;:49::i;3305:155::-;3399:56;3426:3;577:1;3399:26;:56::i;3193:286:1:-;3344:17;3383:91;3394:13;3409:3;3414:7;777:1;3444:29;3383:10;:91::i;:::-;3376:98;3193:286;-1:-1:-1;;;;3193:286:1:o;982:433:39:-;1083:13;;:::i;:::-;1126:2;1115:8;:13;:18;1111:71;;1172:2;1161:8;:13;1155:2;:20;1143:32;;;;1111:71;-1:-1:-1;1229:12:39;;;;:23;;;1292:4;1286:11;;1304:16;;;-1:-1:-1;1327:14:39;;1369:18;;;1361:27;1348:41;;1229:12;982:433::o;685:670:40:-;822:2;813:5;:11;810:541;;834:44;:3;856:20;866:1;857:10;;;856:20;;;834:15;:44::i;:::-;;810:541;;;903:4;894:5;:13;891:460;;917:41;:3;954:2;940:10;949:1;940:10;;;;939:17;917:15;:41::i;:::-;-1:-1:-1;966:23:40;:3;980:5;987:1;966:13;:23::i;891:460::-;1014:6;1005:5;:15;1002:349;;1030:41;:3;1067:2;1053:10;1062:1;1053:10;;;;1052:17;1030:15;:41::i;:::-;-1:-1:-1;1079:23:40;:3;1093:5;1100:1;1079:13;:23::i;1002:349::-;1127:10;1118:5;:19;1115:236;;1147:41;:3;1184:2;1170:10;1179:1;1170:10;;;;1169:17;1147:15;:41::i;:::-;-1:-1:-1;1196:23:40;:3;1210:5;1217:1;1196:13;:23::i;1115:236::-;1244:18;1235:5;:27;1232:119;;1272:41;:3;1309:2;1295:10;1304:1;1295:10;;;;1294:17;1272:15;:41::i;:::-;-1:-1:-1;1321:23:40;:3;1335:5;1342:1;1321:13;:23::i;:::-;;685:670;;;:::o;4790:193:39:-;4898:13;;:::i;:::-;4933:45;4939:3;4944;:7;;;:14;4960:4;4966;:11;4933:5;:45::i;1359:171:40:-;1484:41;:3;1521:2;1507:10;1516:1;1507:10;;;;1506:17;1484:15;:41::i;5261:951:1:-;5526:12;;5503:36;;;5520:4;5503:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5493:47;;;;;;;;;5546:9;;;:24;;;;-1:-1:-1;5576:26:1;;;:15;:26;;;;;;:42;;;;5503:36;5576:42;;;;;5629:29;;5493:47;;5629:29;;;5664:24;5721:12;724:1;668;5954:3;:6;;;5968:3;:19;;;5995:3;:22;;;6025:3;:9;;;6042:11;6061:3;:7;;;:11;;;5691:382;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5664:409;;6087:4;;;;;;;;;;;:20;;;6108:13;6123:7;6132:11;6087:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6087:57:1;6079:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6190:12:1;:17;;6206:1;6190:17;;;5261:951;;-1:-1:-1;;;;;5261:951:1:o;6185:182:39:-;6290:13;;:::i;:::-;6325:37;6336:3;6341;:7;;;:14;6357:4;6325:10;:37::i;10125:196::-;10241:13;;:::i;:::-;10276:40;10285:3;10290;:7;;;:14;10306:4;10312:3;10276:8;:40::i;2857:1186::-;2991:13;;:::i;:::-;3034:4;:11;3027:3;:18;;3019:27;;;;;;3069:3;:12;;;3063:3;3057;:9;:24;3053:90;;;3091:45;3098:3;3103:28;3107:3;:12;;;3127:3;3121;:9;3103:3;:28::i;:::-;3134:1;3103:32;3091:6;:45::i;:::-;3149:9;3164:8;3258:3;3252:10;3329:6;3323:13;3445:3;3440:2;3432:6;3428:15;3424:25;3416:33;;3529:6;3523:3;3518;3514:13;3511:25;3508:2;;;3571:3;3566;3562:13;3554:6;3547:29;3508:2;-1:-1:-1;;;3608:2:39;3598:13;;3669:129;3683:2;3676:3;:9;3669:129;;3738:10;;3725:24;;3687:9;;;;;3772:2;3764:10;;;;3782:9;3669:129;;;3907:10;3956:11;;3844:21;3852:2;:8;;;3844:3;:17;:21;3952:22;;;3919:9;;3903:26;;;;3994:21;3981:35;;-1:-1:-1;4035:3:39;2857:1186;;;;;;:::o;5277:661::-;5395:13;;:::i;:::-;5434:3;:12;;;5427:3;:19;5423:69;;5456:29;5463:3;5468;:12;;;5483:1;5468:16;5456:6;:29::i;:::-;5578:3;5572:10;5649:6;5643:13;5761:2;5755:3;5747:6;5743:16;5739:25;5785:4;5779;5771:19;;5856:6;5851:3;5848:15;5845:2;;;5901:1;5893:6;5889:14;5881:6;5874:30;5845:2;-1:-1:-1;5930:3:39;;5277:661;-1:-1:-1;;;;5277:661:39:o;9186:688::-;9314:13;;:::i;:::-;9358:3;:12;;;9352:3;9346;:9;:24;9342:73;;;9380:28;9387:3;9399;9393;:9;9406:1;9392:15;9380:6;:28::i;:::-;9421:9;9446:1;9440:3;9433;:10;:14;9421:26;;9533:3;9527:10;9648:3;9642;9634:6;9630:16;9626:26;9704:4;9696;9692:9;9685:4;9679:11;9675:27;9672:37;9666:4;9659:51;;9792:6;9786:13;9780:3;9775;9771:13;9768:32;9765:2;;;9835:3;9830;9826:13;9818:6;9811:29;9765:2;-1:-1:-1;9866:3:39;;9186:688;-1:-1:-1;;;;;9186:688:39:o;2023:152::-;2104:4;2131:1;2127;:5;2123:34;;;-1:-1:-1;2149:1:39;2142:8;;2123:34;-1:-1:-1;2169:1:39;2023:152;-1:-1:-1;2023:152:39:o;1844:175::-;1957:7;;1970:19;1957:3;1980:8;1970:4;:19::i;:::-;;1995;2002:3;2007:6;1995;:19::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o"
			},
			"methodIdentifiers": {
				"addExternalRequest(address,bytes32)": "e8d5359d",
				"cancelRequest(address,bytes32,uint256,bytes4,uint256)": "5591a608",
				"currentPrice()": "9d1b464a",
				"fulfill(bytes32,bytes32)": "042f2b65",
				"requestEthereumPrice(string,uint256)": "83db5cbc",
				"requestEthereumPriceByCallback(string,uint256,address)": "74961d4d",
				"withdrawLink()": "8dc654a2"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_specId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"price\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"addExternalRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"cancelRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_price\",\"type\":\"bytes32\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"}],\"name\":\"requestEthereumPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callback\",\"type\":\"address\"}],\"name\":\"requestEthereumPriceByCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/tests/Consumer.sol\":\"Consumer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/Chainlink.sol\":{\"keccak256\":\"0x4ab273e532f6be401324ca7b6357a6fdfec7c4022eaa2436a93c3005759abf01\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://144b39f620542fd48b828655a30661fada5f3d208c076d6e0770787370010457\",\"dweb:/ipfs/QmdLx2gLgAb2erSdLZuQajdTnmmWtPmpaerT3H2qAvhRcz\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/ChainlinkClient.sol\":{\"keccak256\":\"0x507efc1aa7d0f902ba635c055b479dc3d748fe59ec16e30b53765a3fe0bc861f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4af0fd7d163935ef857067ce83abde9575b8061a5ec420470a461f2370e0ca6a\",\"dweb:/ipfs/QmWBntAY3QS5tx2FUa6kWjxeBJsm9DXKkhL71AJJKXb4Yb\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/ChainlinkRequestInterface.sol\":{\"keccak256\":\"0x5461aa441a5578fdb7181169e0060b8cb3e7eb96441140e8353424deae730073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a71019411365d5e12056b55669366926caf128e60584269f8bc6715ba93e756\",\"dweb:/ipfs/QmaRS5tzQcSAkoFaj6aSM4aywiK7mgyVg9Xv9c9jii9rv8\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/ENSInterface.sol\":{\"keccak256\":\"0xf88323c9018ea9eb0b175aed507e06c05537d6eafb8d31b7850cf5f3b3a8f361\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1705a564356be83ee179cbbe5bce775b93d62275d73a1e6bddaa70d2bedadc1d\",\"dweb:/ipfs/QmWwdQJkcMqFhUB2duvAAeS4PKQjSgNXkPCwbeW7MB5J7A\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/LinkTokenInterface.sol\":{\"keccak256\":\"0xfa5c9db0efdd0fc8659b3d973929645883282e9a3e0bd3a95e625d06eded8cbc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c96843bd511f705c7847c826174e12aa23117dc2517f4802ef46a7c994533019\",\"dweb:/ipfs/QmQ5MCvEJktQ9EExX7Mgg5ccUbKgkitkoYYamVwtr9MXAH\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/OperatorInterface.sol\":{\"keccak256\":\"0x120e5c9c58e4c0fac6e3ed977dd8dffe09b377bebdbdee3fd10478f9251867e2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa5eccf74f0d284438861be7c4036db505686c76fe417eb736a408a9b2f87ef6\",\"dweb:/ipfs/QmZ17QX5KEoPPqmbGJwCzGVoiEtthaSoQmccWesRQGM2pc\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/OracleInterface.sol\":{\"keccak256\":\"0xaed6dd4b2d459742adac17f25eab467d840c8c6ea9d92f07c10a2c0ab3bb9768\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d0626b656d2afe88c1f558ab5e67926ddfd5760789a42cdba1125a4a0f5455d5\",\"dweb:/ipfs/QmW43891ANK2b7UR5bsyfoC99N8dK2e8KGfuxUdkeQfuoU\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/PointerInterface.sol\":{\"keccak256\":\"0x79adfb74c71599154293d4bd301f2fb4ca50944c96643c2918e01d730eb46034\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2a9e44d11cdb59d4e0b64d83ff0fb2a5d264329edaa524e7abee56f2acd6568b\",\"dweb:/ipfs/QmS5YmDqSpXJisi6DMMzbdMZXLPprcqmhC8mgq69rJFacd\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/tests/Consumer.sol\":{\"keccak256\":\"0x8bf6bfe20136faff095e59c07d22743c0abb0ea0ad5adbd9b7ed7d5db02c4fbe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b9e7ae97b8fe34bcfd9773fbd6ccc8b8421d251c861539993c17170683bab118\",\"dweb:/ipfs/QmbPAySRLXCNy4runJwcb7Towz1gA76D4e8SW6Mbh6zc6q\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/vendor/BufferChainlink.sol\":{\"keccak256\":\"0xf8da02f65937c8e5ba0f9d6d2d3b0121b525966bc9389e733fd029114b865eb5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d220205e33938cea9c112b246491b6a419fa0f90296d7f9c2e3408e82709fb6e\",\"dweb:/ipfs/QmPLCt6dj3bz5WUY3SbrDecXtZaidQoLnrdCVuDpVjYunx\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/vendor/CBORChainlink.sol\":{\"keccak256\":\"0xe7c6e4290ac2a41a138e6bd89d89a2779f66847a5ee6fb5a6f2a3386e5ce589d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1eb0e7821c4963b125b47c93e31cd6e073d2b87550651054fc526e63915d92ab\",\"dweb:/ipfs/QmVJq2sNTzX4Hfyway8JiY4RoQw4vQRSbzJWbsC7JsiyUs\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/vendor/ENSResolver.sol\":{\"keccak256\":\"0x4c7ac22fe48972e9c1d982e98ec3e788ec6bc63f3e38114311b974f521613d2b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0507f13ce5d108ce0b4c03ae0df451c47fd1cacdf00614efa65bbb6d23e64d2\",\"dweb:/ipfs/QmPyBbk4jShH9ioxTwUpKeuKzGqW9A8AbqrpwGM1P49MQJ\"]}},\"version\":1}",
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"sources": {
		"tests/Consumer.sol": {
			"id": 33
		},
		"ChainlinkClient.sol": {
			"id": 1
		},
		"Chainlink.sol": {
			"id": 0
		},
		"vendor/CBORChainlink.sol": {
			"id": 40
		},
		"vendor/BufferChainlink.sol": {
			"id": 39
		},
		"interfaces/ENSInterface.sol": {
			"id": 20
		},
		"interfaces/LinkTokenInterface.sol": {
			"id": 23
		},
		"interfaces/OperatorInterface.sol": {
			"id": 24
		},
		"interfaces/ChainlinkRequestInterface.sol": {
			"id": 19
		},
		"interfaces/OracleInterface.sol": {
			"id": 25
		},
		"interfaces/PointerInterface.sol": {
			"id": 27
		},
		"vendor/ENSResolver.sol": {
			"id": 41
		}
	},
	"sourceCodes": {
		"tests/Consumer.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"../ChainlinkClient.sol\";\n\ncontract Consumer is ChainlinkClient {\n  using Chainlink for Chainlink.Request;\n\n  bytes32 internal specId;\n  bytes32 public currentPrice;\n\n  event RequestFulfilled(\n    bytes32 indexed requestId,  // User-defined ID\n    bytes32 indexed price\n  );\n\n  constructor(\n    address _link,\n    address _oracle,\n    bytes32 _specId\n  )\n    public\n  {\n    setChainlinkToken(_link);\n    setChainlinkOracle(_oracle);\n    specId = _specId;\n  }\n\n  function requestEthereumPrice(\n    string memory _currency,\n    uint256 _payment\n  )\n    public\n  {\n    requestEthereumPriceByCallback(_currency, _payment, address(this));\n  }\n\n  function requestEthereumPriceByCallback(\n    string memory _currency,\n    uint256 _payment,\n    address _callback\n  )\n    public\n  {\n    Chainlink.Request memory req = buildChainlinkRequest(specId, _callback, this.fulfill.selector);\n    req.add(\"get\", \"https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD,EUR,JPY\");\n    string[] memory path = new string[](1);\n    path[0] = _currency;\n    req.addStringArray(\"path\", path);\n    // version 2\n    sendChainlinkRequest(req, _payment);\n  }\n\n  function cancelRequest(\n    address _oracle,\n    bytes32 _requestId,\n    uint256 _payment,\n    bytes4 _callbackFunctionId,\n    uint256 _expiration\n  )\n    public\n  {\n    ChainlinkRequestInterface requested = ChainlinkRequestInterface(_oracle);\n    requested.cancelOracleRequest(_requestId, _payment, _callbackFunctionId, _expiration);\n  }\n\n  function withdrawLink()\n    public\n  {\n    LinkTokenInterface _link = LinkTokenInterface(chainlinkTokenAddress());\n    require(_link.transfer(msg.sender, _link.balanceOf(address(this))), \"Unable to transfer\");\n  }\n\n  function addExternalRequest(\n    address _oracle,\n    bytes32 _requestId\n  )\n    external\n  {\n    addChainlinkExternalRequest(_oracle, _requestId);\n  }\n\n  function fulfill(\n    bytes32 _requestId,\n    bytes32 _price\n  )\n    public\n    recordChainlinkFulfillment(_requestId)\n  {\n    emit RequestFulfilled(_requestId, _price);\n    currentPrice = _price;\n  }\n\n}\n",
		"ChainlinkClient.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./Chainlink.sol\";\nimport \"./interfaces/ENSInterface.sol\";\nimport \"./interfaces/LinkTokenInterface.sol\";\nimport \"./interfaces/OperatorInterface.sol\";\nimport \"./interfaces/PointerInterface.sol\";\nimport { ENSResolver as ENSResolver_Chainlink } from \"./vendor/ENSResolver.sol\";\n\n/**\n * @title The ChainlinkClient contract\n * @notice Contract writers can inherit this contract in order to create requests for the\n * Chainlink network\n */\ncontract ChainlinkClient {\n  using Chainlink for Chainlink.Request;\n\n  uint256 constant internal LINK_DIVISIBILITY = 10**18;\n  uint256 constant private AMOUNT_OVERRIDE = 0;\n  address constant private SENDER_OVERRIDE = address(0);\n  uint256 constant private ORACLE_ARGS_VERSION = 1;\n  uint256 constant private OPERATOR_ARGS_VERSION = 2;\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\"link\");\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\"oracle\");\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\n\n  ENSInterface private ens;\n  bytes32 private ensNode;\n  LinkTokenInterface private link;\n  OperatorInterface private oracle;\n  uint256 private requestCount = 1;\n  mapping(bytes32 => address) private pendingRequests;\n\n  event ChainlinkRequested(\n    bytes32 indexed id\n  );\n  event ChainlinkFulfilled(\n    bytes32 indexed id\n  );\n  event ChainlinkCancelled(\n    bytes32 indexed id\n  );\n\n  /**\n   * @notice Creates a request that can hold additional parameters\n   * @param specId The Job Specification ID that the request will be created for\n   * @param callbackAddress The callback address that the response will be sent to\n   * @param callbackFunctionSignature The callback function signature to use for the callback address\n   * @return A Chainlink Request struct in memory\n   */\n  function buildChainlinkRequest(\n    bytes32 specId,\n    address callbackAddress,\n    bytes4 callbackFunctionSignature\n  )\n    internal\n    pure\n    returns (\n      Chainlink.Request memory\n    )\n  {\n    Chainlink.Request memory req;\n    return req.initialize(specId, callbackAddress, callbackFunctionSignature);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the stored oracle address\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendChainlinkRequest(\n    Chainlink.Request memory req,\n    uint256 payment\n  )\n    internal\n    returns (\n      bytes32\n    )\n  {\n    return sendChainlinkRequestTo(address(oracle), req, payment);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the specified oracle address\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n   * send LINK which creates a request on the target oracle contract.\n   * Emits ChainlinkRequested event.\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendChainlinkRequestTo(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment\n  )\n    internal\n    returns (\n      bytes32 requestId\n    )\n  {\n    return rawRequest(oracleAddress, req, payment, ORACLE_ARGS_VERSION, oracle.oracleRequest.selector);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the stored oracle address\n   * @dev This function supports multi-word response\n   * @dev Calls `requestOracleDataFrom` with the stored oracle address\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function requestOracleData(\n    Chainlink.Request memory req,\n    uint256 payment\n  )\n    internal\n    returns (\n      bytes32\n    )\n  {\n    return requestOracleDataFrom(address(oracle), req, payment);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the specified oracle address\n   * @dev This function supports multi-word response\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n   * send LINK which creates a request on the target oracle contract.\n   * Emits ChainlinkRequested event.\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function requestOracleDataFrom(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment\n  )\n    internal\n    returns (\n      bytes32 requestId\n    )\n  {\n    return rawRequest(oracleAddress, req, payment, OPERATOR_ARGS_VERSION, oracle.requestOracleData.selector);\n  }\n\n  /**\n   * @notice Make a request to an oracle\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @param argsVersion The version of data support (single word, multi word)\n   * @return requestId The request ID\n   */\n  function rawRequest(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment,\n    uint256 argsVersion,\n    bytes4 funcSelector\n  )\n    private\n    returns (\n      bytes32 requestId\n    )\n  {\n    requestId = keccak256(abi.encodePacked(this, requestCount));\n    req.nonce = requestCount;\n    pendingRequests[requestId] = oracleAddress;\n    emit ChainlinkRequested(requestId);\n    bytes memory encodedData = abi.encodeWithSelector(\n      funcSelector,\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\n      req.id,\n      req.callbackAddress,\n      req.callbackFunctionId,\n      req.nonce,\n      argsVersion,\n      req.buf.buf);\n    require(link.transferAndCall(oracleAddress, payment, encodedData), \"unable to transferAndCall to oracle\");\n    requestCount += 1;\n  }\n\n  /**\n   * @notice Allows a request to be cancelled if it has not been fulfilled\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\n   * Deletes the request from the `pendingRequests` mapping.\n   * Emits ChainlinkCancelled event.\n   * @param requestId The request ID\n   * @param payment The amount of LINK sent for the request\n   * @param callbackFunc The callback function specified for the request\n   * @param expiration The time of the expiration for the request\n   */\n  function cancelChainlinkRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunc,\n    uint256 expiration\n  )\n    internal\n  {\n    OperatorInterface requested = OperatorInterface(pendingRequests[requestId]);\n    delete pendingRequests[requestId];\n    emit ChainlinkCancelled(requestId);\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\n  }\n\n  /**\n   * @notice Sets the stored oracle address\n   * @param oracleAddress The address of the oracle contract\n   */\n  function setChainlinkOracle(\n    address oracleAddress\n  )\n    internal\n  {\n    oracle = OperatorInterface(oracleAddress);\n  }\n\n  /**\n   * @notice Sets the LINK token address\n   * @param linkAddress The address of the LINK token contract\n   */\n  function setChainlinkToken(\n    address linkAddress\n  )\n    internal\n  {\n    link = LinkTokenInterface(linkAddress);\n  }\n\n  /**\n   * @notice Sets the Chainlink token address for the public\n   * network as given by the Pointer contract\n   */\n  function setPublicChainlinkToken() \n    internal\n  {\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\n  }\n\n  /**\n   * @notice Retrieves the stored address of the LINK token\n   * @return The address of the LINK token\n   */\n  function chainlinkTokenAddress()\n    internal\n    view\n    returns (\n      address\n    )\n  {\n    return address(link);\n  }\n\n  /**\n   * @notice Retrieves the stored address of the oracle contract\n   * @return The address of the oracle contract\n   */\n  function chainlinkOracleAddress()\n    internal\n    view\n    returns (\n      address\n    )\n  {\n    return address(oracle);\n  }\n\n  /**\n   * @notice Allows for a request which was created on another contract to be fulfilled\n   * on this contract\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\n   * @param requestId The request ID used for the response\n   */\n  function addChainlinkExternalRequest(\n    address oracleAddress,\n    bytes32 requestId\n  )\n    internal\n    notPendingRequest(requestId)\n  {\n    pendingRequests[requestId] = oracleAddress;\n  }\n\n  /**\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\n   * @dev Accounts for subnodes having different resolvers\n   * @param ensAddress The address of the ENS contract\n   * @param node The ENS node hash\n   */\n  function useChainlinkWithENS(\n    address ensAddress,\n    bytes32 node\n  )\n    internal\n  {\n    ens = ENSInterface(ensAddress);\n    ensNode = node;\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\n    setChainlinkToken(resolver.addr(linkSubnode));\n    updateChainlinkOracleWithENS();\n  }\n\n  /**\n   * @notice Sets the stored oracle contract with the address resolved by ENS\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\n   */\n  function updateChainlinkOracleWithENS()\n    internal\n  {\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\n    setChainlinkOracle(resolver.addr(oracleSubnode));\n  }\n\n  /**\n   * @notice Ensures that the fulfillment is valid for this contract\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\n   * @param requestId The request ID for fulfillment\n   */\n  function validateChainlinkCallback(\n    bytes32 requestId\n  )\n    internal\n    recordChainlinkFulfillment(requestId)\n    // solhint-disable-next-line no-empty-blocks\n  {}\n\n  /**\n   * @dev Reverts if the sender is not the oracle of the request.\n   * Emits ChainlinkFulfilled event.\n   * @param requestId The request ID for fulfillment\n   */\n  modifier recordChainlinkFulfillment(\n    bytes32 requestId\n  )\n  {\n    require(msg.sender == pendingRequests[requestId],\n            \"Source must be the oracle of the request\");\n    delete pendingRequests[requestId];\n    emit ChainlinkFulfilled(requestId);\n    _;\n  }\n\n  /**\n   * @dev Reverts if the request is already pending\n   * @param requestId The request ID for fulfillment\n   */\n  modifier notPendingRequest(\n    bytes32 requestId\n  )\n  {\n    require(pendingRequests[requestId] == address(0), \"Request is already pending\");\n    _;\n  }\n}\n",
		"Chainlink.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport { CBORChainlink } from \"./vendor/CBORChainlink.sol\";\nimport { BufferChainlink } from \"./vendor/BufferChainlink.sol\";\n\n/**\n * @title Library for common Chainlink functions\n * @dev Uses imported CBOR library for encoding to buffer\n */\nlibrary Chainlink {\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\n\n  using CBORChainlink for BufferChainlink.buffer;\n\n  struct Request {\n    bytes32 id;\n    address callbackAddress;\n    bytes4 callbackFunctionId;\n    uint256 nonce;\n    BufferChainlink.buffer buf;\n  }\n\n  /**\n   * @notice Initializes a Chainlink request\n   * @dev Sets the ID, callback address, and callback function signature on the request\n   * @param self The uninitialized request\n   * @param jobId The Job Specification ID\n   * @param callbackAddr The callback address\n   * @param callbackFunc The callback function signature\n   * @return The initialized request\n   */\n  function initialize(\n    Request memory self,\n    bytes32 jobId,\n    address callbackAddr,\n    bytes4 callbackFunc\n  )\n    internal\n    pure\n    returns (\n      Chainlink.Request memory\n    )\n  {\n    BufferChainlink.init(self.buf, defaultBufferSize);\n    self.id = jobId;\n    self.callbackAddress = callbackAddr;\n    self.callbackFunctionId = callbackFunc;\n    return self;\n  }\n\n  /**\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\n   * @param self The initialized request\n   * @param data The CBOR data\n   */\n  function setBuffer(\n    Request memory self,\n    bytes memory data\n  )\n    internal\n    pure\n  {\n    BufferChainlink.init(self.buf, data.length);\n    BufferChainlink.append(self.buf, data);\n  }\n\n  /**\n   * @notice Adds a string value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The string value to add\n   */\n  function add(\n    Request memory self,\n    string memory key,\n    string memory value\n  )\n    internal\n    pure\n  {\n    self.buf.encodeString(key);\n    self.buf.encodeString(value);\n  }\n\n  /**\n   * @notice Adds a bytes value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The bytes value to add\n   */\n  function addBytes(\n    Request memory self,\n    string memory key,\n    bytes memory value\n  )\n    internal\n    pure\n  {\n    self.buf.encodeString(key);\n    self.buf.encodeBytes(value);\n  }\n\n  /**\n   * @notice Adds a int256 value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The int256 value to add\n   */\n  function addInt(\n    Request memory self,\n    string memory key,\n    int256 value\n  )\n    internal\n    pure\n  {\n    self.buf.encodeString(key);\n    self.buf.encodeInt(value);\n  }\n\n  /**\n   * @notice Adds a uint256 value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The uint256 value to add\n   */\n  function addUint(\n    Request memory self,\n    string memory key,\n    uint256 value\n  )\n    internal\n    pure\n  {\n    self.buf.encodeString(key);\n    self.buf.encodeUInt(value);\n  }\n\n  /**\n   * @notice Adds an array of strings to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param values The array of string values to add\n   */\n  function addStringArray(\n    Request memory self,\n    string memory key,\n    string[] memory values\n  )\n    internal\n    pure\n  {\n    self.buf.encodeString(key);\n    self.buf.startArray();\n    for (uint256 i = 0; i < values.length; i++) {\n      self.buf.encodeString(values[i]);\n    }\n    self.buf.endSequence();\n  }\n}\n",
		"vendor/CBORChainlink.sol": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.19;\n\nimport { BufferChainlink } from \"./BufferChainlink.sol\";\n\nlibrary CBORChainlink {\n  using BufferChainlink for BufferChainlink.buffer;\n\n  uint8 private constant MAJOR_TYPE_INT = 0;\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\n  uint8 private constant MAJOR_TYPE_STRING = 3;\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\n  uint8 private constant MAJOR_TYPE_MAP = 5;\n  uint8 private constant MAJOR_TYPE_TAG = 6;\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\n\n  function encodeType(\n    BufferChainlink.buffer memory buf,\n    uint8 major,\n    uint value\n  )\n    private\n    pure\n  {\n    if(value <= 23) {\n      buf.appendUint8(uint8((major << 5) | value));\n    } else if(value <= 0xFF) {\n      buf.appendUint8(uint8((major << 5) | 24));\n      buf.appendInt(value, 1);\n    } else if(value <= 0xFFFF) {\n      buf.appendUint8(uint8((major << 5) | 25));\n      buf.appendInt(value, 2);\n    } else if(value <= 0xFFFFFFFF) {\n      buf.appendUint8(uint8((major << 5) | 26));\n      buf.appendInt(value, 4);\n    } else if(value <= 0xFFFFFFFFFFFFFFFF) {\n      buf.appendUint8(uint8((major << 5) | 27));\n      buf.appendInt(value, 8);\n    }\n  }\n\n  function encodeIndefiniteLengthType(\n    BufferChainlink.buffer memory buf,\n    uint8 major\n  )\n    private\n    pure\n  {\n    buf.appendUint8(uint8((major << 5) | 31));\n  }\n\n  function encodeUInt(\n    BufferChainlink.buffer memory buf,\n    uint value\n  )\n    internal\n    pure\n  {\n    encodeType(buf, MAJOR_TYPE_INT, value);\n  }\n\n  function encodeInt(\n    BufferChainlink.buffer memory buf,\n    int value\n  )\n    internal\n    pure\n  {\n    if(value < -0x10000000000000000) {\n      encodeSignedBigNum(buf, value);\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\n      encodeBigNum(buf, value);\n    } else if(value >= 0) {\n      encodeType(buf, MAJOR_TYPE_INT, uint(value));\n    } else {\n      encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\n    }\n  }\n\n  function encodeBytes(\n    BufferChainlink.buffer memory buf,\n    bytes memory value\n  )\n    internal\n    pure\n  {\n    encodeType(buf, MAJOR_TYPE_BYTES, value.length);\n    buf.append(value);\n  }\n\n  function encodeBigNum(\n    BufferChainlink.buffer memory buf,\n    int value\n  )\n    internal\n    pure\n  {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\n    encodeBytes(buf, abi.encode(uint(value)));\n  }\n\n  function encodeSignedBigNum(\n    BufferChainlink.buffer memory buf,\n    int input\n  )\n    internal\n    pure\n  {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\n    encodeBytes(buf, abi.encode(uint(-1 - input)));\n  }\n\n  function encodeString(\n    BufferChainlink.buffer memory buf,\n    string memory value\n  )\n    internal\n    pure\n  {\n    encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\n    buf.append(bytes(value));\n  }\n\n  function startArray(\n    BufferChainlink.buffer memory buf\n  )\n    internal\n    pure\n  {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n  }\n\n  function startMap(\n    BufferChainlink.buffer memory buf\n  )\n    internal\n    pure\n  {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n  }\n\n  function endSequence(\n    BufferChainlink.buffer memory buf\n  )\n    internal\n    pure\n  {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n  }\n}\n",
		"vendor/BufferChainlink.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\n/**\n* @dev A library for working with mutable byte buffers in Solidity.\n*\n* Byte buffers are mutable and expandable, and provide a variety of primitives\n* for writing to them. At any time you can fetch a bytes object containing the\n* current contents of the buffer. The bytes object should not be stored between\n* operations, as it may change due to resizing of the buffer.\n*/\nlibrary BufferChainlink {\n  /**\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n  *      a capacity. The capacity may be longer than the current value, in\n  *      which case it can be extended without the need to allocate more memory.\n  */\n  struct buffer {\n    bytes buf;\n    uint capacity;\n  }\n\n  /**\n  * @dev Initializes a buffer with an initial capacity.\n  * @param buf The buffer to initialize.\n  * @param capacity The number of bytes of space to allocate the buffer.\n  * @return The buffer, for chaining.\n  */\n  function init(\n    buffer memory buf,\n    uint capacity\n  )\n    internal\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    if (capacity % 32 != 0) {\n      capacity += 32 - (capacity % 32);\n    }\n    // Allocate space for the buffer data\n    buf.capacity = capacity;\n    assembly {\n      let ptr := mload(0x40)\n      mstore(buf, ptr)\n      mstore(ptr, 0)\n      mstore(0x40, add(32, add(ptr, capacity)))\n    }\n    return buf;\n  }\n\n  /**\n  * @dev Initializes a new buffer from an existing bytes object.\n  *      Changes to the buffer may mutate the original value.\n  * @param b The bytes object to initialize the buffer with.\n  * @return A new buffer.\n  */\n  function fromBytes(\n    bytes memory b\n  )\n    internal\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    buffer memory buf;\n    buf.buf = b;\n    buf.capacity = b.length;\n    return buf;\n  }\n\n  function resize(\n    buffer memory buf,\n    uint capacity\n  )\n    private\n    pure\n  {\n    bytes memory oldbuf = buf.buf;\n    init(buf, capacity);\n    append(buf, oldbuf);\n  }\n\n  function max(\n    uint a,\n    uint b\n  )\n    private\n    pure\n    returns(\n      uint\n    )\n  {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  /**\n  * @dev Sets buffer length to 0.\n  * @param buf The buffer to truncate.\n  * @return The original buffer, for chaining..\n  */\n  function truncate(\n    buffer memory buf\n  )\n    internal\n    pure\n    returns (\n      buffer memory\n    )\n  {\n    assembly {\n      let bufptr := mload(buf)\n      mstore(bufptr, 0)\n    }\n    return buf;\n  }\n\n  /**\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The start offset to write to.\n  * @param data The data to append.\n  * @param len The number of bytes to copy.\n  * @return The original buffer, for chaining.\n  */\n  function write(\n    buffer memory buf,\n    uint off,\n    bytes memory data,\n    uint len\n  )\n    internal\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    require(len <= data.length);\n\n    if (off + len > buf.capacity) {\n      resize(buf, max(buf.capacity, len + off) * 2);\n    }\n\n    uint dest;\n    uint src;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Start address = buffer address + offset + sizeof(buffer length)\n      dest := add(add(bufptr, 32), off)\n      // Update buffer length if we're extending it\n      if gt(add(len, off), buflen) {\n        mstore(bufptr, add(len, off))\n      }\n      src := add(data, 32)\n    }\n\n    // Copy word-length chunks while possible\n    for (; len >= 32; len -= 32) {\n      assembly {\n        mstore(dest, mload(src))\n      }\n      dest += 32;\n      src += 32;\n    }\n\n    // Copy remaining bytes\n    uint mask = 256 ** (32 - len) - 1;\n    assembly {\n      let srcpart := and(mload(src), not(mask))\n      let destpart := and(mload(dest), mask)\n      mstore(dest, or(destpart, srcpart))\n    }\n\n    return buf;\n  }\n\n  /**\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @param len The number of bytes to copy.\n  * @return The original buffer, for chaining.\n  */\n  function append(\n    buffer memory buf,\n    bytes memory data,\n    uint len\n  )\n    internal\n    pure\n    returns (\n      buffer memory\n    )\n  {\n    return write(buf, buf.buf.length, data, len);\n  }\n\n  /**\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function append(\n    buffer memory buf,\n    bytes memory data\n  )\n    internal\n    pure\n    returns (\n      buffer memory\n    )\n  {\n    return write(buf, buf.buf.length, data, data.length);\n  }\n\n  /**\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\n  *      capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The offset to write the byte at.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function writeUint8(\n    buffer memory buf,\n    uint off,\n    uint8 data\n  )\n    internal\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    if (off >= buf.capacity) {\n      resize(buf, buf.capacity * 2);\n    }\n\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Address = buffer address + sizeof(buffer length) + off\n      let dest := add(add(bufptr, off), 32)\n      mstore8(dest, data)\n      // Update buffer length if we extended it\n      if eq(off, buflen) {\n        mstore(bufptr, add(buflen, 1))\n      }\n    }\n    return buf;\n  }\n\n  /**\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n  *      capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function appendUint8(\n    buffer memory buf,\n    uint8 data\n  )\n    internal\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    return writeUint8(buf, buf.buf.length, data);\n  }\n\n  /**\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n  *      exceed the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The offset to write at.\n  * @param data The data to append.\n  * @param len The number of bytes to write (left-aligned).\n  * @return The original buffer, for chaining.\n  */\n  function write(\n    buffer memory buf,\n    uint off,\n    bytes32 data,\n    uint len\n  )\n    private\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    uint mask = 256 ** len - 1;\n    // Right-align data\n    data = data >> (8 * (32 - len));\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Address = buffer address + sizeof(buffer length) + off + len\n      let dest := add(add(bufptr, off), len)\n      mstore(dest, or(and(mload(dest), not(mask)), data))\n      // Update buffer length if we extended it\n      if gt(add(off, len), mload(bufptr)) {\n        mstore(bufptr, add(off, len))\n      }\n    }\n    return buf;\n  }\n\n  /**\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n  *      capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The offset to write at.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function writeBytes20(\n    buffer memory buf,\n    uint off,\n    bytes20 data\n  )\n    internal\n    pure\n    returns (\n      buffer memory\n    )\n  {\n    return write(buf, off, bytes32(data), 20);\n  }\n\n  /**\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @return The original buffer, for chhaining.\n  */\n  function appendBytes20(\n    buffer memory buf,\n    bytes20 data\n  )\n    internal\n    pure\n    returns (\n      buffer memory\n    )\n  {\n    return write(buf, buf.buf.length, bytes32(data), 20);\n  }\n\n  /**\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function appendBytes32(\n    buffer memory buf,\n    bytes32 data\n  )\n    internal\n    pure\n    returns (\n      buffer memory\n    )\n  {\n    return write(buf, buf.buf.length, data, 32);\n  }\n\n  /**\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The offset to write at.\n  * @param data The data to append.\n  * @param len The number of bytes to write (right-aligned).\n  * @return The original buffer, for chaining.\n  */\n  function writeInt(\n    buffer memory buf,\n    uint off,\n    uint data,\n    uint len\n  )\n    private\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    uint mask = 256 ** len - 1;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Address = buffer address + off + sizeof(buffer length) + len\n      let dest := add(add(bufptr, off), len)\n      mstore(dest, or(and(mload(dest), not(mask)), data))\n      // Update buffer length if we extended it\n      if gt(add(off, len), mload(bufptr)) {\n        mstore(bufptr, add(off, len))\n      }\n    }\n    return buf;\n  }\n\n  /**\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n    * exceed the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer.\n    */\n  function appendInt(\n    buffer memory buf,\n    uint data,\n    uint len\n  )\n    internal\n    pure\n    returns(\n      buffer memory\n    )\n  {\n    return writeInt(buf, buf.buf.length, data, len);\n  }\n}\n",
		"interfaces/ENSInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface ENSInterface {\n\n  // Logged when the owner of a node assigns a new owner to a subnode.\n  event NewOwner(\n    bytes32 indexed node,\n    bytes32 indexed label,\n    address owner\n  );\n\n  // Logged when the owner of a node transfers ownership to a new account.\n  event Transfer(\n    bytes32 indexed node,\n    address owner\n  );\n\n  // Logged when the resolver for a node changes.\n  event NewResolver(\n    bytes32 indexed node,\n    address resolver\n  );\n\n  // Logged when the TTL of a node changes\n  event NewTTL(\n    bytes32 indexed node,\n    uint64 ttl\n  );\n\n\n  function setSubnodeOwner(\n    bytes32 node,\n    bytes32 label,\n    address owner\n  ) external;\n\n  function setResolver(\n    bytes32 node,\n    address resolver\n  ) external;\n\n  function setOwner(\n    bytes32 node,\n    address owner\n  ) external;\n\n  function setTTL(\n    bytes32 node,\n    uint64 ttl\n  ) external;\n\n  function owner(\n    bytes32 node\n  )\n    external\n    view\n    returns (\n      address\n    );\n\n  function resolver(\n    bytes32 node\n  )\n    external\n    view\n    returns (\n      address\n    );\n\n  function ttl(\n    bytes32 node\n  )\n    external\n    view\n    returns (\n      uint64\n    );\n\n}\n",
		"interfaces/LinkTokenInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface LinkTokenInterface {\n\n  function allowance(\n    address owner,\n    address spender\n  )\n    external\n    view\n    returns (\n      uint256 remaining\n    );\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function balanceOf(\n    address owner\n  )\n    external\n    view\n    returns (\n      uint256 balance\n    );\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8 decimalPlaces\n    );\n\n  function decreaseApproval(\n    address spender,\n    uint256 addedValue\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function increaseApproval(\n    address spender,\n    uint256 subtractedValue\n  ) external;\n\n  function name()\n    external\n    view\n    returns (\n      string memory tokenName\n    );\n\n  function symbol()\n    external\n    view\n    returns (\n      string memory tokenSymbol\n    );\n\n  function totalSupply()\n    external\n    view\n    returns (\n      uint256 totalTokensIssued\n    );\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n}\n",
		"interfaces/OperatorInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./ChainlinkRequestInterface.sol\";\nimport \"./OracleInterface.sol\";\n\ninterface OperatorInterface is\n  ChainlinkRequestInterface,\n  OracleInterface\n{\n\n  function requestOracleData(\n    address sender,\n    uint256 payment,\n    bytes32 specId,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  )\n    external;\n\n  function fulfillOracleRequest2(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool\n    );\n\n  function ownerTransferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool success\n    );\n\n}\n",
		"interfaces/ChainlinkRequestInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface ChainlinkRequestInterface {\n  function oracleRequest(\n    address sender,\n    uint256 requestPrice,\n    bytes32 serviceAgreementID,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  ) external;\n\n  function cancelOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunctionId,\n    uint256 expiration\n  ) external;\n}\n",
		"interfaces/OracleInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface OracleInterface {\n  function fulfillOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes32 data\n  )\n    external\n    returns (\n      bool\n    );\n\n  function withdraw(\n    address recipient,\n    uint256 amount\n  ) external;\n\n  function withdrawable()\n    external\n    view\n    returns (\n      uint256\n    );\n}\n",
		"interfaces/PointerInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface PointerInterface {\n  \n  function getAddress()\n    external\n    view\n    returns (\n      address\n    );\n}\n",
		"vendor/ENSResolver.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nabstract contract ENSResolver {\n  function addr(\n    bytes32 node\n  )\n    public\n    view\n    virtual\n    returns (\n      address\n    );\n}\n"
	},
	"sourceTreeHashHex": "0x43134c80ead0eb29b79160191a469f899ede5379681aa81b572bb2ae115f6972",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.7.6+commit.7338295f.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"metadata": {
				"bytecodeHash": "none"
			},
			"remappings": []
		}
	},
	"chains": {}
}