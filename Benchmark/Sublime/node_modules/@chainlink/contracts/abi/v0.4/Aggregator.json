{
	"schemaVersion": "2.0.0",
	"contractName": "Aggregator",
	"compilerOutput": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"name": "_requestId",
						"type": "bytes32"
					},
					{
						"name": "_payment",
						"type": "uint256"
					},
					{
						"name": "_expiration",
						"type": "uint256"
					}
				],
				"name": "cancelRequest",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "authorizedRequesters",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"name": "jobIds",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "latestAnswer",
				"outputs": [
					{
						"name": "",
						"type": "int256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "minimumResponses",
				"outputs": [
					{
						"name": "",
						"type": "uint128"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"name": "oracles",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_recipient",
						"type": "address"
					},
					{
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "transferLINK",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "latestRound",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_clRequestId",
						"type": "bytes32"
					},
					{
						"name": "_response",
						"type": "int256"
					}
				],
				"name": "chainlinkCallback",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_paymentAmount",
						"type": "uint128"
					},
					{
						"name": "_minimumResponses",
						"type": "uint128"
					},
					{
						"name": "_oracles",
						"type": "address[]"
					},
					{
						"name": "_jobIds",
						"type": "bytes32[]"
					}
				],
				"name": "updateRequestDetails",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "latestTimestamp",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "destroy",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_roundId",
						"type": "uint256"
					}
				],
				"name": "getAnswer",
				"outputs": [
					{
						"name": "",
						"type": "int256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_roundId",
						"type": "uint256"
					}
				],
				"name": "getTimestamp",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "paymentAmount",
				"outputs": [
					{
						"name": "",
						"type": "uint128"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "requestRateUpdate",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_requester",
						"type": "address"
					},
					{
						"name": "_allowed",
						"type": "bool"
					}
				],
				"name": "setAuthorization",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_link",
						"type": "address"
					},
					{
						"name": "_paymentAmount",
						"type": "uint128"
					},
					{
						"name": "_minimumResponses",
						"type": "uint128"
					},
					{
						"name": "_oracles",
						"type": "address[]"
					},
					{
						"name": "_jobIds",
						"type": "bytes32[]"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "response",
						"type": "int256"
					},
					{
						"indexed": true,
						"name": "answerId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"name": "sender",
						"type": "address"
					}
				],
				"name": "ResponseReceived",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "previousOwner",
						"type": "address"
					}
				],
				"name": "OwnershipRenounced",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "ChainlinkRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "ChainlinkFulfilled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "id",
						"type": "bytes32"
					}
				],
				"name": "ChainlinkCancelled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "current",
						"type": "int256"
					},
					{
						"indexed": true,
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "AnswerUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"name": "startedBy",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "startedAt",
						"type": "uint256"
					}
				],
				"name": "NewRound",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"cancelRequest(bytes32,uint256,uint256)": {
					"params": {
						"_expiration": "is the time when the request expires",
						"_payment": "is the amount of LINK paid to the oracle for the request",
						"_requestId": "is the identifier for the chainlink request being cancelled"
					}
				},
				"chainlinkCallback(bytes32,int256)": {
					"details": "This function can only be called by the oracle that received the request.",
					"params": {
						"_clRequestId": "The Chainlink request ID associated with the answer",
						"_response": "The answer provided by the Chainlink node"
					}
				},
				"getAnswer(uint256)": {
					"params": {
						"_roundId": "the answer number to retrieve the answer for"
					}
				},
				"getTimestamp(uint256)": {
					"params": {
						"_roundId": "the answer number to retrieve the updated timestamp for"
					}
				},
				"renounceOwnership()": {
					"details": "Allows the current owner to relinquish control of the contract."
				},
				"requestRateUpdate()": {
					"details": "This example does not include request parameters. Reference any documentation associated with the Job IDs used to determine the required parameters per-request."
				},
				"setAuthorization(address,bool)": {
					"params": {
						"_allowed": "boolean that determines whether the requester is permissioned or not",
						"_requester": "the address whose permissions are being set"
					}
				},
				"transferLINK(address,uint256)": {
					"details": "The contract will need to have a LINK balance in order to create requests.",
					"params": {
						"_amount": "The amount of LINK to send from the contract",
						"_recipient": "The address to receive the LINK tokens"
					}
				},
				"transferOwnership(address)": {
					"details": "Allows the current owner to transfer control of the contract to a newOwner.",
					"params": {
						"_newOwner": "The address to transfer ownership to."
					}
				},
				"updateRequestDetails(uint128,uint128,address[],bytes32[])": {
					"details": "Arrays are validated to be equal length.",
					"params": {
						"_jobIds": "An array of Job IDs",
						"_minimumResponses": "the minimum number of responses before an answer will be calculated",
						"_oracles": "An array of oracle addresses",
						"_paymentAmount": "the amount of LINK to be sent to each oracle for each request"
					}
				}
			},
			"title": "An example Chainlink contract with aggregation"
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405260016004556001600d553480156200001b57600080fd5b50604051620024b6380380620024b683398101604090815281516020830151918301516060840151608085015160068054600160a060020a03191633179055929491929082019101620000778564010000000062000099810204565b6200008e84848484640100000000620000bb810204565b5050505050620003ee565b60028054600160a060020a031916600160a060020a0392909216919091179055565b600654600160a060020a03163314620000d357600080fd5b826001608060020a03168282601c8251111515156200015357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f63616e6e6f742068617665206d6f7265207468616e203435206f7261636c6573604482015290519081900360640190fd5b8151831115620001ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f6d7573742068617665206174206c65617374206173206d616e79206f7261636c60448201527f657320617320726573706f6e7365730000000000000000000000000000000000606482015290519081900360840190fd5b80518251146200028157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f6d75737420686176652065786163746c79206173206d616e79206f7261636c6560448201527f73206173206a6f62204944730000000000000000000000000000000000000000606482015290519081900360840190fd5b600a80546001608060020a0388811670010000000000000000000000000000000002818b166001608060020a031990931692909217161790558351620002cf90600b906020870190620002ef565b508451620002e590600c90602088019062000341565b5050505050505050565b8280548282559060005260206000209081019282156200032f579160200282015b828111156200032f578251825560209092019160019091019062000310565b506200033d929150620003a7565b5090565b82805482825590600052602060002090810192821562000399579160200282015b82811115620003995782518254600160a060020a031916600160a060020a0390911617825560209092019160019091019062000362565b506200033d929150620003c7565b620003c491905b808211156200033d5760008155600101620003ae565b90565b620003c491905b808211156200033d578054600160a060020a0319168155600101620003ce565b6120b880620003fe6000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166333bfcdd881146101165780633ea478aa146101365780634162cc881461017857806350d25bcd146101a257806354bcd7ff146101b75780635b69a7d8146101f15780635cd9b90b14610232578063668a0f02146102635780636a9705b414610278578063715018a61461029357806378a66674146102a85780638205bf6a1461035557806383197ef01461036a5780638da5cb5b1461037f578063b5ab58dc14610394578063b633620c146103ac578063c35905c6146103c4578063daa6d556146103d9578063eecea000146103ee578063f2fde38b14610421575b600080fd5b34801561012257600080fd5b5061013460043560243560443561044f565b005b34801561014257600080fd5b5061016473ffffffffffffffffffffffffffffffffffffffff60043516610628565b604080519115158252519081900360200190f35b34801561018457600080fd5b5061019060043561063d565b60408051918252519081900360200190f35b3480156101ae57600080fd5b5061019061065c565b3480156101c357600080fd5b506101cc610672565b604080516fffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101fd57600080fd5b5061020960043561069e565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561023e57600080fd5b5061013473ffffffffffffffffffffffffffffffffffffffff600435166024356106d3565b34801561026f57600080fd5b50610190610845565b34801561028457600080fd5b5061013460043560243561084b565b34801561029f57600080fd5b506101346108ce565b3480156102b457600080fd5b5060408051602060046044358181013583810280860185019096528085526101349583356fffffffffffffffffffffffffffffffff9081169660248035909216963696956064959294930192829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506109619650505050505050565b34801561036157600080fd5b50610190610bc4565b34801561037657600080fd5b50610134610bd9565b34801561038b57600080fd5b50610209610cd0565b3480156103a057600080fd5b50610190600435610cec565b3480156103b857600080fd5b50610190600435610cfe565b3480156103d057600080fd5b506101cc610d10565b3480156103e557600080fd5b50610134610d28565b3480156103fa57600080fd5b5061013473ffffffffffffffffffffffffffffffffffffffff600435166024351515610f9b565b34801561042d57600080fd5b5061013473ffffffffffffffffffffffffffffffffffffffff60043516611015565b336000908152600e602052604081205460ff1680610484575060065473ffffffffffffffffffffffffffffffffffffffff1633145b151561051757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4e6f7420616e20617574686f72697a6564206164647265737320666f7220637260448201527f656174696e672072657175657374730000000000000000000000000000000000606482015290519081900360840190fd5b506000838152600f602052604090205460095481106105bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f43616e6e6f74206d6f6469667920616e20696e2d70726f677265737320616e7360448201527f7765720000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000848152600f60209081526040808320839055838352601082528220600190810180549182018155835290822001556105f681611045565b61062284847f6a9705b400000000000000000000000000000000000000000000000000000000856110ac565b50505050565b600e6020526000908152604090205460ff1681565b600b80548290811061064b57fe5b600091825260209091200154905081565b6009546000908152601160205260409020545b90565b600a5470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1681565b600c8054829081106106ac57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60065460009073ffffffffffffffffffffffffffffffffffffffff1633146106fa57600080fd5b6107026111e7565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156107a757600080fd5b505af11580156107bb573d6000803e3d6000fd5b505050506040513d60208110156107d157600080fd5b5051151561084057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4c494e4b207472616e73666572206661696c6564000000000000000000000000604482015290519081900360640190fd5b505050565b60095490565b600061085683611203565b506000828152600f602090815260408083208054908490558084526010835281842060019081018054918201815585529284209092018490555190913391839185917fb51168059c83c860caf5b830c5d2e64c2172c6fb2fe9f25447d9838e18d93b609190a46108c58161131c565b61084081611045565b60065473ffffffffffffffffffffffffffffffffffffffff1633146108f257600080fd5b60065460405173ffffffffffffffffffffffffffffffffffffffff909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a2600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60065473ffffffffffffffffffffffffffffffffffffffff16331461098557600080fd5b826fffffffffffffffffffffffffffffffff168282601c825111151515610a0d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f63616e6e6f742068617665206d6f7265207468616e203435206f7261636c6573604482015290519081900360640190fd5b8151831115610aa357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f6d7573742068617665206174206c65617374206173206d616e79206f7261636c60448201527f657320617320726573706f6e7365730000000000000000000000000000000000606482015290519081900360840190fd5b8051825114610b3957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f6d75737420686176652065786163746c79206173206d616e79206f7261636c6560448201527f73206173206a6f62204944730000000000000000000000000000000000000000606482015290519081900360840190fd5b600a80546fffffffffffffffffffffffffffffffff88811670010000000000000000000000000000000002818b167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090931692909217161790558351610ba690600b906020870190611ef8565b508451610bba90600c906020880190611f45565b5050505050505050565b60095460009081526012602052604090205490565b60065460009073ffffffffffffffffffffffffffffffffffffffff163314610c0057600080fd5b610c086111e7565b600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051929350610cb59273ffffffffffffffffffffffffffffffffffffffff928316928516916370a082319160248083019260209291908290030181600087803b158015610c8457600080fd5b505af1158015610c98573d6000803e3d6000fd5b505050506040513d6020811015610cae57600080fd5b50516106d3565b60065473ffffffffffffffffffffffffffffffffffffffff16ff5b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60009081526011602052604090205490565b60009081526012602052604090205490565b600a546fffffffffffffffffffffffffffffffff1681565b610d30611fcb565b336000908152600e60205260408120548190819060ff1680610d69575060065473ffffffffffffffffffffffffffffffffffffffff1633145b1515610dfc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4e6f7420616e20617574686f72697a6564206164647265737320666f7220637260448201527f656174696e672072657175657374730000000000000000000000000000000000606482015290519081900360840190fd5b5050600a546fffffffffffffffffffffffffffffffff1660005b600c54811015610ec057610e67600b82815481101515610e3257fe5b906000526020600020015430636a9705b47c010000000000000000000000000000000000000000000000000000000002611578565b9350610ea4600c82815481101515610e7b57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1685846115a3565b600d546000828152600f60205260409020559250600101610e16565b600a54600d8054600090815260106020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff70010000000000000000000000000000000097889004811691909117909155600c5485548552938290208054948216909602931692909217909355905481514281529151339391927f0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac6027192908290030190a3600d54610f9290600163ffffffff61190516565b600d5550505050565b60065473ffffffffffffffffffffffffffffffffffffffff163314610fbf57600080fd5b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600e6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60065473ffffffffffffffffffffffffffffffffffffffff16331461103957600080fd5b61104281611918565b50565b60008181526010602052604090208054600190910154829170010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1614156110a8576000828152601060205260408120818155906106226001830182612000565b5050565b60008481526005602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000008116909155905173ffffffffffffffffffffffffffffffffffffffff9091169186917fe1fe3afa0f7f761ff0a8b89086790efd5140d2907ebd5b7ff6bfcb5e075fd4c59190a2604080517f6ee4d55300000000000000000000000000000000000000000000000000000000815260048101879052602481018690527fffffffff000000000000000000000000000000000000000000000000000000008516604482015260648101849052905173ffffffffffffffffffffffffffffffffffffffff831691636ee4d55391608480830192600092919082900301818387803b1580156111c857600080fd5b505af11580156111dc573d6000803e3d6000fd5b505050505050505050565b60025473ffffffffffffffffffffffffffffffffffffffff1690565b600081815260056020526040902054819073ffffffffffffffffffffffffffffffffffffffff1633146112bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f536f75726365206d75737420626520746865206f7261636c65206f662074686560448201527f2072657175657374000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008181526005602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a25050565b60008181526010602052604081208054600190910154829182918291829187916fffffffffffffffffffffffffffffffff161161156f578680600954111515610bba57600088815260106020526040902060010154965061138487600263ffffffff6119c816565b95506002870615156114965760008881526010602090815260409182902060010180548351818402810184019094528084526113f593928301828280156113ea57602002820191906000526020600020905b8154815260200190600101908083116113d6575b5050505050876119dd565b600089815260106020908152604091829020600101805483518184028101840190945280845293975061147193909183018282801561145357602002820191906000526020600020905b81548152602001906001019080831161143f575b505050505061146c60018961190590919063ffffffff16565b6119dd565b92506002611485858563ffffffff611bd116565b81151561148e57fe5b05945061150a565b60008881526010602090815260409182902060010180548351818402810184019094528084526115079392830182828015611453576020028201919060005260206000209081548152602001906001019080831161143f57505050505061146c60018961190590919063ffffffff16565b94505b6007859055600988905542600881905560008981526012602090815260408083208490556011825291829020889055815192835290518a9288927f0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f92918290030190a3505b50505050505050565b611580611fcb565b611588611fcb565b61159a8186868663ffffffff611c9516565b95945050505050565b600030600454604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831061165757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161161a565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199092169116179052604080519290940182900390912060045460608a01526000818152600590925283822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8c1617905592519295508594507fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99350919050a260025473ffffffffffffffffffffffffffffffffffffffff16634000aea0858461174887611cf7565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117e85781810151838201526020016117d0565b50505050905090810190601f1680156118155780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561183657600080fd5b505af115801561184a573d6000803e3d6000fd5b505050506040513d602081101561186057600080fd5b505115156118f557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160448201527f636c650000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6004805460010190559392505050565b8181018281101561191257fe5b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116151561193a57600080fd5b60065460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600081838115156119d557fe5b049392505050565b600060606000806060806000806000808b98508a97508851965086604051908082528060200260200182016040528015611a21578160200160208202803883390190505b50955086604051908082528060200260200182016040528015611a4e578160200160208202803883390190505b5094505b88611a6488600263ffffffff6119c816565b81518110611a6e57fe5b9060200190602002015191506000935060009250600090505b86811015611b4757818982815181101515611a9e57fe5b906020019060200201511215611ae9578881815181101515611abc57fe5b906020019060200201518685815181101515611ad457fe5b60209081029091010152600190930192611b3f565b818982815181101515611af857fe5b906020019060200201511315611b3f578881815181101515611b1657fe5b906020019060200201518584815181101515611b2e57fe5b602090810290910101526001909201915b600101611a87565b838811611b6557839650611b5b8987611ea9565b9099509550611bbd565b611b75878463ffffffff611eac16565b881115611bb557611b9c611b8f888563ffffffff611eac16565b899063ffffffff611eac16565b9750829650611bab8986611ea9565b9099509450611bbd565b819950611bc2565b611a52565b50505050505050505092915050565b6000828201818312801590611be65750838112155b80611bfb5750600083128015611bfb57508381125b1515611c8e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f60448201527f7700000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b9392505050565b611c9d611fcb565b611cad8560800151610100611ebe565b505091835273ffffffffffffffffffffffffffffffffffffffff1660208301527fffffffff0000000000000000000000000000000000000000000000000000000016604082015290565b8051602080830151604080850151606086810151608088015151935160006024820181815260448301829052606483018a905273ffffffffffffffffffffffffffffffffffffffff881660848401527fffffffff00000000000000000000000000000000000000000000000000000000861660a484015260c48301849052600160e48401819052610100610104850190815288516101248601528851969b7f40429946000000000000000000000000000000000000000000000000000000009b949a8b9a91999098909796939591949361014401918501908083838e5b83811015611dec578181015183820152602001611dd4565b50505050905090810190601f168015611e195780820380516001836020036101000a031916815260200191505b50604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909d169c909c17909b5250989950505050505050505050919050565b91565b600082821115611eb857fe5b50900390565b611ec661201e565b6020820615611edb5760208206602003820191505b506020828101829052604080518085526000815290920101905290565b828054828255906000526020600020908101928215611f35579160200282015b82811115611f355782518255602090920191600190910190611f18565b50611f41929150612036565b5090565b828054828255906000526020600020908101928215611fbf579160200282015b82811115611fbf57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190611f65565b50611f41929150612050565b6040805160c081018252600080825260208201819052918101829052606081019190915260808101611ffb61201e565b905290565b50805460008255906000526020600020908101906110429190612036565b60408051808201909152606081526000602082015290565b61066f91905b80821115611f41576000815560010161203c565b61066f91905b80821115611f415780547fffffffffffffffffffffffff00000000000000000000000000000000000000001681556001016120565600a165627a7a723058207dabb358b3a539f84681731b76e6b99e56536ea693fc062573ea827def511ed90029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0x4 SSTORE PUSH1 0x1 PUSH1 0xD SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x24B6 CODESIZE SUB DUP1 PUSH3 0x24B6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 SWAP1 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD SWAP2 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER OR SWAP1 SSTORE SWAP3 SWAP5 SWAP2 SWAP3 SWAP1 DUP3 ADD SWAP2 ADD PUSH3 0x77 DUP6 PUSH5 0x100000000 PUSH3 0x99 DUP2 MUL DIV JUMP JUMPDEST PUSH3 0x8E DUP5 DUP5 DUP5 DUP5 PUSH5 0x100000000 PUSH3 0xBB DUP2 MUL DIV JUMP JUMPDEST POP POP POP POP POP PUSH3 0x3EE JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH3 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x80 PUSH1 0x2 EXP SUB AND DUP3 DUP3 PUSH1 0x1C DUP3 MLOAD GT ISZERO ISZERO ISZERO PUSH3 0x153 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742068617665206D6F7265207468616E203435206F7261636C6573 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 MLOAD DUP4 GT ISZERO PUSH3 0x1EA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D7573742068617665206174206C65617374206173206D616E79206F7261636C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x657320617320726573706F6E7365730000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH3 0x281 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D75737420686176652065786163746C79206173206D616E79206F7261636C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x73206173206A6F62204944730000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x80 PUSH1 0x2 EXP SUB DUP9 DUP2 AND PUSH17 0x100000000000000000000000000000000 MUL DUP2 DUP12 AND PUSH1 0x1 PUSH1 0x80 PUSH1 0x2 EXP SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR AND OR SWAP1 SSTORE DUP4 MLOAD PUSH3 0x2CF SWAP1 PUSH1 0xB SWAP1 PUSH1 0x20 DUP8 ADD SWAP1 PUSH3 0x2EF JUMP JUMPDEST POP DUP5 MLOAD PUSH3 0x2E5 SWAP1 PUSH1 0xC SWAP1 PUSH1 0x20 DUP9 ADD SWAP1 PUSH3 0x341 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x32F JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x32F JUMPI DUP3 MLOAD DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH3 0x310 JUMP JUMPDEST POP PUSH3 0x33D SWAP3 SWAP2 POP PUSH3 0x3A7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x399 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x399 JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH3 0x362 JUMP JUMPDEST POP PUSH3 0x33D SWAP3 SWAP2 POP PUSH3 0x3C7 JUMP JUMPDEST PUSH3 0x3C4 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x33D JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x3AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH3 0x3C4 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x33D JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x3CE JUMP JUMPDEST PUSH2 0x20B8 DUP1 PUSH3 0x3FE PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x111 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x33BFCDD8 DUP2 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x3EA478AA EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x4162CC88 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x50D25BCD EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x54BCD7FF EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0x5B69A7D8 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x5CD9B90B EQ PUSH2 0x232 JUMPI DUP1 PUSH4 0x668A0F02 EQ PUSH2 0x263 JUMPI DUP1 PUSH4 0x6A9705B4 EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x293 JUMPI DUP1 PUSH4 0x78A66674 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x8205BF6A EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x83197EF0 EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x37F JUMPI DUP1 PUSH4 0xB5AB58DC EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0xB633620C EQ PUSH2 0x3AC JUMPI DUP1 PUSH4 0xC35905C6 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0xDAA6D556 EQ PUSH2 0x3D9 JUMPI DUP1 PUSH4 0xEECEA000 EQ PUSH2 0x3EE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x421 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x44 CALLDATALOAD PUSH2 0x44F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x164 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0x628 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x190 PUSH1 0x4 CALLDATALOAD PUSH2 0x63D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x190 PUSH2 0x65C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CC PUSH2 0x672 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH1 0x4 CALLDATALOAD PUSH2 0x69E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x6D3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x190 PUSH2 0x845 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH2 0x84B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x8CE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x4 PUSH1 0x44 CALLDATALOAD DUP2 DUP2 ADD CALLDATALOAD DUP4 DUP2 MUL DUP1 DUP7 ADD DUP6 ADD SWAP1 SWAP7 MSTORE DUP1 DUP6 MSTORE PUSH2 0x134 SWAP6 DUP4 CALLDATALOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP7 PUSH1 0x24 DUP1 CALLDATALOAD SWAP1 SWAP3 AND SWAP7 CALLDATASIZE SWAP7 SWAP6 PUSH1 0x64 SWAP6 SWAP3 SWAP5 SWAP4 ADD SWAP3 DUP3 SWAP2 DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP POP PUSH1 0x40 DUP1 MLOAD DUP8 CALLDATALOAD DUP10 ADD DUP1 CALLDATALOAD PUSH1 0x20 DUP2 DUP2 MUL DUP5 DUP2 ADD DUP3 ADD SWAP1 SWAP6 MSTORE DUP2 DUP5 MSTORE SWAP9 SWAP12 SWAP11 SWAP10 DUP10 ADD SWAP9 SWAP3 SWAP8 POP SWAP1 DUP3 ADD SWAP6 POP SWAP4 POP DUP4 SWAP3 POP DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 0x961 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x190 PUSH2 0xBC4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0xBD9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0xCD0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x190 PUSH1 0x4 CALLDATALOAD PUSH2 0xCEC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x190 PUSH1 0x4 CALLDATALOAD PUSH2 0xCFE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CC PUSH2 0xD10 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0xD28 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD ISZERO ISZERO PUSH2 0xF9B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0x1015 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 PUSH2 0x484 JUMPI POP PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ JUMPDEST ISZERO ISZERO PUSH2 0x517 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420616E20617574686F72697A6564206164647265737320666F72206372 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656174696E672072657175657374730000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x9 SLOAD DUP2 LT PUSH2 0x5BD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74206D6F6469667920616E20696E2D70726F677265737320616E73 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7765720000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE DUP4 DUP4 MSTORE PUSH1 0x10 DUP3 MSTORE DUP3 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE DUP4 MSTORE SWAP1 DUP3 KECCAK256 ADD SSTORE PUSH2 0x5F6 DUP2 PUSH2 0x1045 JUMP JUMPDEST PUSH2 0x622 DUP5 DUP5 PUSH32 0x6A9705B400000000000000000000000000000000000000000000000000000000 DUP6 PUSH2 0x10AC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x64B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x6AC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x6FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x702 PUSH2 0x11E7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 0x840 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C494E4B207472616E73666572206661696C6564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x856 DUP4 PUSH2 0x1203 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD SWAP1 DUP5 SWAP1 SSTORE DUP1 DUP5 MSTORE PUSH1 0x10 DUP4 MSTORE DUP2 DUP5 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE DUP6 MSTORE SWAP3 DUP5 KECCAK256 SWAP1 SWAP3 ADD DUP5 SWAP1 SSTORE MLOAD SWAP1 SWAP2 CALLER SWAP2 DUP4 SWAP2 DUP6 SWAP2 PUSH32 0xB51168059C83C860CAF5B830C5D2E64C2172C6FB2FE9F25447D9838E18D93B60 SWAP2 SWAP1 LOG4 PUSH2 0x8C5 DUP2 PUSH2 0x131C JUMP JUMPDEST PUSH2 0x840 DUP2 PUSH2 0x1045 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x8F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH32 0xF8DF31144D9C2F0F6B59D69B8B98ABD5459D07F2742C4DF920B25AAE33C64820 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x6 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x985 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 DUP3 PUSH1 0x1C DUP3 MLOAD GT ISZERO ISZERO ISZERO PUSH2 0xA0D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742068617665206D6F7265207468616E203435206F7261636C6573 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 MLOAD DUP4 GT ISZERO PUSH2 0xAA3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D7573742068617665206174206C65617374206173206D616E79206F7261636C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x657320617320726573706F6E7365730000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0xB39 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D75737420686176652065786163746C79206173206D616E79206F7261636C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x73206173206A6F62204944730000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND PUSH17 0x100000000000000000000000000000000 MUL DUP2 DUP12 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR AND OR SWAP1 SSTORE DUP4 MLOAD PUSH2 0xBA6 SWAP1 PUSH1 0xB SWAP1 PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0x1EF8 JUMP JUMPDEST POP DUP5 MLOAD PUSH2 0xBBA SWAP1 PUSH1 0xC SWAP1 PUSH1 0x20 DUP9 ADD SWAP1 PUSH2 0x1F45 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x12 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xC00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC08 PUSH2 0x11E7 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD SWAP3 SWAP4 POP PUSH2 0xCB5 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND SWAP3 DUP6 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC98 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x6D3 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFDESTRUCT JUMPDEST PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x12 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xD30 PUSH2 0x1FCB JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH1 0xFF AND DUP1 PUSH2 0xD69 JUMPI POP PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ JUMPDEST ISZERO ISZERO PUSH2 0xDFC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420616E20617574686F72697A6564206164647265737320666F72206372 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656174696E672072657175657374730000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP POP PUSH1 0xA SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 JUMPDEST PUSH1 0xC SLOAD DUP2 LT ISZERO PUSH2 0xEC0 JUMPI PUSH2 0xE67 PUSH1 0xB DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0xE32 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD ADDRESS PUSH4 0x6A9705B4 PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL PUSH2 0x1578 JUMP JUMPDEST SWAP4 POP PUSH2 0xEA4 PUSH1 0xC DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0xE7B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP5 PUSH2 0x15A3 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE SWAP3 POP PUSH1 0x1 ADD PUSH2 0xE16 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0xD DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH17 0x100000000000000000000000000000000 SWAP8 DUP9 SWAP1 DIV DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0xC SLOAD DUP6 SLOAD DUP6 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD SWAP5 DUP3 AND SWAP1 SWAP7 MUL SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP4 SSTORE SWAP1 SLOAD DUP2 MLOAD TIMESTAMP DUP2 MSTORE SWAP2 MLOAD CALLER SWAP4 SWAP2 SWAP3 PUSH32 0x109FC6F55CF40689F02FBAAD7AF7FE7BBAC8A3D2186600AFC7D3E10CAC60271 SWAP3 SWAP1 DUP3 SWAP1 SUB ADD SWAP1 LOG3 PUSH1 0xD SLOAD PUSH2 0xF92 SWAP1 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x1905 AND JUMP JUMPDEST PUSH1 0xD SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xFBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1039 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1042 DUP2 PUSH2 0x1918 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 SWAP2 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x10A8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE SWAP1 PUSH2 0x622 PUSH1 0x1 DUP4 ADD DUP3 PUSH2 0x2000 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP2 AND SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 DUP7 SWAP2 PUSH32 0xE1FE3AFA0F7F761FF0A8B89086790EFD5140D2907EBD5B7FF6BFCB5E075FD4C5 SWAP2 SWAP1 LOG2 PUSH1 0x40 DUP1 MLOAD PUSH32 0x6EE4D55300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP2 PUSH4 0x6EE4D553 SWAP2 PUSH1 0x84 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x12BD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536F75726365206D75737420626520746865206F7261636C65206F6620746865 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2072657175657374000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x7CC135E0CEBB02C3480AE5D74D377283180A2601F8F644EDF7987B009316C63A SWAP2 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP8 SWAP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x156F JUMPI DUP7 DUP1 PUSH1 0x9 SLOAD GT ISZERO ISZERO PUSH2 0xBBA JUMPI PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP7 POP PUSH2 0x1384 DUP8 PUSH1 0x2 PUSH4 0xFFFFFFFF PUSH2 0x19C8 AND JUMP JUMPDEST SWAP6 POP PUSH1 0x2 DUP8 MOD ISZERO ISZERO PUSH2 0x1496 JUMPI PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH2 0x13F5 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x13EA JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x13D6 JUMPI JUMPDEST POP POP POP POP POP DUP8 PUSH2 0x19DD JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP8 POP PUSH2 0x1471 SWAP4 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1453 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x143F JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x146C PUSH1 0x1 DUP10 PUSH2 0x1905 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x19DD JUMP JUMPDEST SWAP3 POP PUSH1 0x2 PUSH2 0x1485 DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1BD1 AND JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 0x148E JUMPI INVALID JUMPDEST SDIV SWAP5 POP PUSH2 0x150A JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH2 0x1507 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1453 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x143F JUMPI POP POP POP POP POP PUSH2 0x146C PUSH1 0x1 DUP10 PUSH2 0x1905 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP5 POP JUMPDEST PUSH1 0x7 DUP6 SWAP1 SSTORE PUSH1 0x9 DUP9 SWAP1 SSTORE TIMESTAMP PUSH1 0x8 DUP2 SWAP1 SSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x12 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x11 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP9 SWAP1 SSTORE DUP2 MLOAD SWAP3 DUP4 MSTORE SWAP1 MLOAD DUP11 SWAP3 DUP9 SWAP3 PUSH32 0x559884FD3A460DB3073B7FC896CC77986F16E378210DED43186175BF646FC5F SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1580 PUSH2 0x1FCB JUMP JUMPDEST PUSH2 0x1588 PUSH2 0x1FCB JUMP JUMPDEST PUSH2 0x159A DUP2 DUP7 DUP7 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x1C95 AND JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1657 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x161A JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SLOAD PUSH1 0x60 DUP11 ADD MSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP3 MSTORE DUP4 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND OR SWAP1 SSTORE SWAP3 MLOAD SWAP3 SWAP6 POP DUP6 SWAP5 POP PUSH32 0xB5E6E01E79F91267DC17B4E6314D5D4D03593D2CEEE0FBB452B750BD70EA5AF9 SWAP4 POP SWAP2 SWAP1 POP LOG2 PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4000AEA0 DUP6 DUP5 PUSH2 0x1748 DUP8 PUSH2 0x1CF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17E8 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17D0 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1815 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1836 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x184A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1860 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 0x18F5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x756E61626C6520746F207472616E73666572416E6443616C6C20746F206F7261 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636C650000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 0x1912 JUMPI INVALID JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO ISZERO PUSH2 0x193A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x6 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 DUP2 ISZERO ISZERO PUSH2 0x19D5 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP12 SWAP9 POP DUP11 SWAP8 POP DUP9 MLOAD SWAP7 POP DUP7 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A21 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP6 POP DUP7 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A4E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP5 POP JUMPDEST DUP9 PUSH2 0x1A64 DUP9 PUSH1 0x2 PUSH4 0xFFFFFFFF PUSH2 0x19C8 AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1A6E JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SWAP2 POP PUSH1 0x0 SWAP4 POP PUSH1 0x0 SWAP3 POP PUSH1 0x0 SWAP1 POP JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1B47 JUMPI DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1A9E JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SLT ISZERO PUSH2 0x1AE9 JUMPI DUP9 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1ABC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1AD4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1B3F JUMP JUMPDEST DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1AF8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SGT ISZERO PUSH2 0x1B3F JUMPI DUP9 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1B16 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1B2E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 JUMPDEST PUSH1 0x1 ADD PUSH2 0x1A87 JUMP JUMPDEST DUP4 DUP9 GT PUSH2 0x1B65 JUMPI DUP4 SWAP7 POP PUSH2 0x1B5B DUP10 DUP8 PUSH2 0x1EA9 JUMP JUMPDEST SWAP1 SWAP10 POP SWAP6 POP PUSH2 0x1BBD JUMP JUMPDEST PUSH2 0x1B75 DUP8 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1EAC AND JUMP JUMPDEST DUP9 GT ISZERO PUSH2 0x1BB5 JUMPI PUSH2 0x1B9C PUSH2 0x1B8F DUP9 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1EAC AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1EAC AND JUMP JUMPDEST SWAP8 POP DUP3 SWAP7 POP PUSH2 0x1BAB DUP10 DUP7 PUSH2 0x1EA9 JUMP JUMPDEST SWAP1 SWAP10 POP SWAP5 POP PUSH2 0x1BBD JUMP JUMPDEST DUP2 SWAP10 POP PUSH2 0x1BC2 JUMP JUMPDEST PUSH2 0x1A52 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP2 DUP4 SLT DUP1 ISZERO SWAP1 PUSH2 0x1BE6 JUMPI POP DUP4 DUP2 SLT ISZERO JUMPDEST DUP1 PUSH2 0x1BFB JUMPI POP PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x1BFB JUMPI POP DUP4 DUP2 SLT JUMPDEST ISZERO ISZERO PUSH2 0x1C8E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5369676E6564536166654D6174683A206164646974696F6E206F766572666C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7700000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1C9D PUSH2 0x1FCB JUMP JUMPDEST PUSH2 0x1CAD DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0x100 PUSH2 0x1EBE JUMP JUMPDEST POP POP SWAP2 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 DUP1 DUP6 ADD MLOAD PUSH1 0x60 DUP7 DUP2 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD MLOAD SWAP4 MLOAD PUSH1 0x0 PUSH1 0x24 DUP3 ADD DUP2 DUP2 MSTORE PUSH1 0x44 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x64 DUP4 ADD DUP11 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x84 DUP5 ADD MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP7 AND PUSH1 0xA4 DUP5 ADD MSTORE PUSH1 0xC4 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0xE4 DUP5 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 PUSH2 0x104 DUP6 ADD SWAP1 DUP2 MSTORE DUP9 MLOAD PUSH2 0x124 DUP7 ADD MSTORE DUP9 MLOAD SWAP7 SWAP12 PUSH32 0x4042994600000000000000000000000000000000000000000000000000000000 SWAP12 SWAP5 SWAP11 DUP12 SWAP11 SWAP2 SWAP10 SWAP1 SWAP9 SWAP1 SWAP8 SWAP7 SWAP4 SWAP6 SWAP2 SWAP5 SWAP4 PUSH2 0x144 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 DUP15 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1DEC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1DD4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1E19 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP14 AND SWAP13 SWAP1 SWAP13 OR SWAP1 SWAP12 MSTORE POP SWAP9 SWAP10 POP POP POP POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1EB8 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1EC6 PUSH2 0x201E JUMP JUMPDEST PUSH1 0x20 DUP3 MOD ISZERO PUSH2 0x1EDB JUMPI PUSH1 0x20 DUP3 MOD PUSH1 0x20 SUB DUP3 ADD SWAP2 POP JUMPDEST POP PUSH1 0x20 DUP3 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP6 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 SWAP3 ADD ADD SWAP1 MSTORE SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x1F35 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1F35 JUMPI DUP3 MLOAD DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1F18 JUMP JUMPDEST POP PUSH2 0x1F41 SWAP3 SWAP2 POP PUSH2 0x2036 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x1FBF JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1FBF JUMPI DUP3 MLOAD DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1F65 JUMP JUMPDEST POP PUSH2 0x1F41 SWAP3 SWAP2 POP PUSH2 0x2050 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x1FFB PUSH2 0x201E JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1042 SWAP2 SWAP1 PUSH2 0x2036 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x66F SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1F41 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x203C JUMP JUMPDEST PUSH2 0x66F SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1F41 JUMPI DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2056 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH30 0xABB358B3A539F84681731B76E6B99E56536EA693FC062573EA827DEF511E 0xd9 STOP 0x29 ",
				"sourceMap": "453:12760:0:-;;;1121:1:2;1094:28;;1080:1:0;1048:33;;2021:273;8:9:-1;5:2;;;30:1;27;20:12;5:2;2021:273:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;567:5:38;:18;;-1:-1:-1;;;;;;567:18:38;575:10;567:18;;;2021:273:0;;;;;;;;;2185:24;2021:273;2185:17;;;;:24;:::i;:::-;2215:74;2236:14;2252:17;2271:8;2281:7;2215:20;;;;:74;:::i;:::-;2021:273;;;;;453:12760;;4751:94:2;4808:4;:32;;-1:-1:-1;;;;;;4808:32:2;-1:-1:-1;;;;;4808:32:2;;;;;;;;;;4751:94::o;4410:367:0:-;719:5:38;;-1:-1:-1;;;;;719:5:38;705:10;:19;697:28;;;;;;4608:17:0;-1:-1:-1;;;;;12540:414:0;4627:8;4637:7;1396:2;12672:8;:15;:35;;12664:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12758:15;;:36;-1:-1:-1;12758:36:0;12750:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12879:14;;12860:15;;:33;12852:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4654:13;:30;;-1:-1:-1;;;;;4690:36:0;;;;;4654:30;;;-1:-1:-1;;;;;;4654:30:0;;;;;;;4690:36;;;;4732:16;;;;:6;;:16;;;;;:::i;:::-;-1:-1:-1;4754:18:0;;;;:7;;:18;;;;;:::i;:::-;;731:1:38;;;4410:367:0;;;;:::o;453:12760::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;453:12760:0;;;-1:-1:-1;453:12760:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;453:12760:0;-1:-1:-1;;;;;453:12760:0;;;;;;;;;;;-1:-1:-1;453:12760:0;;;;;;;-1:-1:-1;453:12760:0;;;-1:-1:-1;453:12760:0;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;;453:12760:0;;;;;;;;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166333bfcdd881146101165780633ea478aa146101365780634162cc881461017857806350d25bcd146101a257806354bcd7ff146101b75780635b69a7d8146101f15780635cd9b90b14610232578063668a0f02146102635780636a9705b414610278578063715018a61461029357806378a66674146102a85780638205bf6a1461035557806383197ef01461036a5780638da5cb5b1461037f578063b5ab58dc14610394578063b633620c146103ac578063c35905c6146103c4578063daa6d556146103d9578063eecea000146103ee578063f2fde38b14610421575b600080fd5b34801561012257600080fd5b5061013460043560243560443561044f565b005b34801561014257600080fd5b5061016473ffffffffffffffffffffffffffffffffffffffff60043516610628565b604080519115158252519081900360200190f35b34801561018457600080fd5b5061019060043561063d565b60408051918252519081900360200190f35b3480156101ae57600080fd5b5061019061065c565b3480156101c357600080fd5b506101cc610672565b604080516fffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101fd57600080fd5b5061020960043561069e565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561023e57600080fd5b5061013473ffffffffffffffffffffffffffffffffffffffff600435166024356106d3565b34801561026f57600080fd5b50610190610845565b34801561028457600080fd5b5061013460043560243561084b565b34801561029f57600080fd5b506101346108ce565b3480156102b457600080fd5b5060408051602060046044358181013583810280860185019096528085526101349583356fffffffffffffffffffffffffffffffff9081169660248035909216963696956064959294930192829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506109619650505050505050565b34801561036157600080fd5b50610190610bc4565b34801561037657600080fd5b50610134610bd9565b34801561038b57600080fd5b50610209610cd0565b3480156103a057600080fd5b50610190600435610cec565b3480156103b857600080fd5b50610190600435610cfe565b3480156103d057600080fd5b506101cc610d10565b3480156103e557600080fd5b50610134610d28565b3480156103fa57600080fd5b5061013473ffffffffffffffffffffffffffffffffffffffff600435166024351515610f9b565b34801561042d57600080fd5b5061013473ffffffffffffffffffffffffffffffffffffffff60043516611015565b336000908152600e602052604081205460ff1680610484575060065473ffffffffffffffffffffffffffffffffffffffff1633145b151561051757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4e6f7420616e20617574686f72697a6564206164647265737320666f7220637260448201527f656174696e672072657175657374730000000000000000000000000000000000606482015290519081900360840190fd5b506000838152600f602052604090205460095481106105bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f43616e6e6f74206d6f6469667920616e20696e2d70726f677265737320616e7360448201527f7765720000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000848152600f60209081526040808320839055838352601082528220600190810180549182018155835290822001556105f681611045565b61062284847f6a9705b400000000000000000000000000000000000000000000000000000000856110ac565b50505050565b600e6020526000908152604090205460ff1681565b600b80548290811061064b57fe5b600091825260209091200154905081565b6009546000908152601160205260409020545b90565b600a5470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1681565b600c8054829081106106ac57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60065460009073ffffffffffffffffffffffffffffffffffffffff1633146106fa57600080fd5b6107026111e7565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156107a757600080fd5b505af11580156107bb573d6000803e3d6000fd5b505050506040513d60208110156107d157600080fd5b5051151561084057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4c494e4b207472616e73666572206661696c6564000000000000000000000000604482015290519081900360640190fd5b505050565b60095490565b600061085683611203565b506000828152600f602090815260408083208054908490558084526010835281842060019081018054918201815585529284209092018490555190913391839185917fb51168059c83c860caf5b830c5d2e64c2172c6fb2fe9f25447d9838e18d93b609190a46108c58161131c565b61084081611045565b60065473ffffffffffffffffffffffffffffffffffffffff1633146108f257600080fd5b60065460405173ffffffffffffffffffffffffffffffffffffffff909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a2600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60065473ffffffffffffffffffffffffffffffffffffffff16331461098557600080fd5b826fffffffffffffffffffffffffffffffff168282601c825111151515610a0d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f63616e6e6f742068617665206d6f7265207468616e203435206f7261636c6573604482015290519081900360640190fd5b8151831115610aa357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f6d7573742068617665206174206c65617374206173206d616e79206f7261636c60448201527f657320617320726573706f6e7365730000000000000000000000000000000000606482015290519081900360840190fd5b8051825114610b3957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f6d75737420686176652065786163746c79206173206d616e79206f7261636c6560448201527f73206173206a6f62204944730000000000000000000000000000000000000000606482015290519081900360840190fd5b600a80546fffffffffffffffffffffffffffffffff88811670010000000000000000000000000000000002818b167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090931692909217161790558351610ba690600b906020870190611ef8565b508451610bba90600c906020880190611f45565b5050505050505050565b60095460009081526012602052604090205490565b60065460009073ffffffffffffffffffffffffffffffffffffffff163314610c0057600080fd5b610c086111e7565b600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051929350610cb59273ffffffffffffffffffffffffffffffffffffffff928316928516916370a082319160248083019260209291908290030181600087803b158015610c8457600080fd5b505af1158015610c98573d6000803e3d6000fd5b505050506040513d6020811015610cae57600080fd5b50516106d3565b60065473ffffffffffffffffffffffffffffffffffffffff16ff5b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60009081526011602052604090205490565b60009081526012602052604090205490565b600a546fffffffffffffffffffffffffffffffff1681565b610d30611fcb565b336000908152600e60205260408120548190819060ff1680610d69575060065473ffffffffffffffffffffffffffffffffffffffff1633145b1515610dfc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4e6f7420616e20617574686f72697a6564206164647265737320666f7220637260448201527f656174696e672072657175657374730000000000000000000000000000000000606482015290519081900360840190fd5b5050600a546fffffffffffffffffffffffffffffffff1660005b600c54811015610ec057610e67600b82815481101515610e3257fe5b906000526020600020015430636a9705b47c010000000000000000000000000000000000000000000000000000000002611578565b9350610ea4600c82815481101515610e7b57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1685846115a3565b600d546000828152600f60205260409020559250600101610e16565b600a54600d8054600090815260106020908152604080832080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff70010000000000000000000000000000000097889004811691909117909155600c5485548552938290208054948216909602931692909217909355905481514281529151339391927f0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac6027192908290030190a3600d54610f9290600163ffffffff61190516565b600d5550505050565b60065473ffffffffffffffffffffffffffffffffffffffff163314610fbf57600080fd5b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600e6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60065473ffffffffffffffffffffffffffffffffffffffff16331461103957600080fd5b61104281611918565b50565b60008181526010602052604090208054600190910154829170010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1614156110a8576000828152601060205260408120818155906106226001830182612000565b5050565b60008481526005602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000008116909155905173ffffffffffffffffffffffffffffffffffffffff9091169186917fe1fe3afa0f7f761ff0a8b89086790efd5140d2907ebd5b7ff6bfcb5e075fd4c59190a2604080517f6ee4d55300000000000000000000000000000000000000000000000000000000815260048101879052602481018690527fffffffff000000000000000000000000000000000000000000000000000000008516604482015260648101849052905173ffffffffffffffffffffffffffffffffffffffff831691636ee4d55391608480830192600092919082900301818387803b1580156111c857600080fd5b505af11580156111dc573d6000803e3d6000fd5b505050505050505050565b60025473ffffffffffffffffffffffffffffffffffffffff1690565b600081815260056020526040902054819073ffffffffffffffffffffffffffffffffffffffff1633146112bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f536f75726365206d75737420626520746865206f7261636c65206f662074686560448201527f2072657175657374000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008181526005602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a25050565b60008181526010602052604081208054600190910154829182918291829187916fffffffffffffffffffffffffffffffff161161156f578680600954111515610bba57600088815260106020526040902060010154965061138487600263ffffffff6119c816565b95506002870615156114965760008881526010602090815260409182902060010180548351818402810184019094528084526113f593928301828280156113ea57602002820191906000526020600020905b8154815260200190600101908083116113d6575b5050505050876119dd565b600089815260106020908152604091829020600101805483518184028101840190945280845293975061147193909183018282801561145357602002820191906000526020600020905b81548152602001906001019080831161143f575b505050505061146c60018961190590919063ffffffff16565b6119dd565b92506002611485858563ffffffff611bd116565b81151561148e57fe5b05945061150a565b60008881526010602090815260409182902060010180548351818402810184019094528084526115079392830182828015611453576020028201919060005260206000209081548152602001906001019080831161143f57505050505061146c60018961190590919063ffffffff16565b94505b6007859055600988905542600881905560008981526012602090815260408083208490556011825291829020889055815192835290518a9288927f0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f92918290030190a3505b50505050505050565b611580611fcb565b611588611fcb565b61159a8186868663ffffffff611c9516565b95945050505050565b600030600454604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831061165757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161161a565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199092169116179052604080519290940182900390912060045460608a01526000818152600590925283822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8c1617905592519295508594507fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99350919050a260025473ffffffffffffffffffffffffffffffffffffffff16634000aea0858461174887611cf7565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117e85781810151838201526020016117d0565b50505050905090810190601f1680156118155780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561183657600080fd5b505af115801561184a573d6000803e3d6000fd5b505050506040513d602081101561186057600080fd5b505115156118f557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160448201527f636c650000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6004805460010190559392505050565b8181018281101561191257fe5b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116151561193a57600080fd5b60065460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600081838115156119d557fe5b049392505050565b600060606000806060806000806000808b98508a97508851965086604051908082528060200260200182016040528015611a21578160200160208202803883390190505b50955086604051908082528060200260200182016040528015611a4e578160200160208202803883390190505b5094505b88611a6488600263ffffffff6119c816565b81518110611a6e57fe5b9060200190602002015191506000935060009250600090505b86811015611b4757818982815181101515611a9e57fe5b906020019060200201511215611ae9578881815181101515611abc57fe5b906020019060200201518685815181101515611ad457fe5b60209081029091010152600190930192611b3f565b818982815181101515611af857fe5b906020019060200201511315611b3f578881815181101515611b1657fe5b906020019060200201518584815181101515611b2e57fe5b602090810290910101526001909201915b600101611a87565b838811611b6557839650611b5b8987611ea9565b9099509550611bbd565b611b75878463ffffffff611eac16565b881115611bb557611b9c611b8f888563ffffffff611eac16565b899063ffffffff611eac16565b9750829650611bab8986611ea9565b9099509450611bbd565b819950611bc2565b611a52565b50505050505050505092915050565b6000828201818312801590611be65750838112155b80611bfb5750600083128015611bfb57508381125b1515611c8e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f60448201527f7700000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b9392505050565b611c9d611fcb565b611cad8560800151610100611ebe565b505091835273ffffffffffffffffffffffffffffffffffffffff1660208301527fffffffff0000000000000000000000000000000000000000000000000000000016604082015290565b8051602080830151604080850151606086810151608088015151935160006024820181815260448301829052606483018a905273ffffffffffffffffffffffffffffffffffffffff881660848401527fffffffff00000000000000000000000000000000000000000000000000000000861660a484015260c48301849052600160e48401819052610100610104850190815288516101248601528851969b7f40429946000000000000000000000000000000000000000000000000000000009b949a8b9a91999098909796939591949361014401918501908083838e5b83811015611dec578181015183820152602001611dd4565b50505050905090810190601f168015611e195780820380516001836020036101000a031916815260200191505b50604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909d169c909c17909b5250989950505050505050505050919050565b91565b600082821115611eb857fe5b50900390565b611ec661201e565b6020820615611edb5760208206602003820191505b506020828101829052604080518085526000815290920101905290565b828054828255906000526020600020908101928215611f35579160200282015b82811115611f355782518255602090920191600190910190611f18565b50611f41929150612036565b5090565b828054828255906000526020600020908101928215611fbf579160200282015b82811115611fbf57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190611f65565b50611f41929150612050565b6040805160c081018252600080825260208201819052918101829052606081019190915260808101611ffb61201e565b905290565b50805460008255906000526020600020908101906110429190612036565b60408051808201909152606081526000602082015290565b61066f91905b80821115611f41576000815560010161203c565b61066f91905b80821115611f415780547fffffffffffffffffffffffff00000000000000000000000000000000000000001681556001016120565600a165627a7a723058207dabb358b3a539f84681731b76e6b99e56536ea693fc062573ea827def511ed90029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x111 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x33BFCDD8 DUP2 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x3EA478AA EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x4162CC88 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x50D25BCD EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x54BCD7FF EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0x5B69A7D8 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x5CD9B90B EQ PUSH2 0x232 JUMPI DUP1 PUSH4 0x668A0F02 EQ PUSH2 0x263 JUMPI DUP1 PUSH4 0x6A9705B4 EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x293 JUMPI DUP1 PUSH4 0x78A66674 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x8205BF6A EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x83197EF0 EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x37F JUMPI DUP1 PUSH4 0xB5AB58DC EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0xB633620C EQ PUSH2 0x3AC JUMPI DUP1 PUSH4 0xC35905C6 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0xDAA6D556 EQ PUSH2 0x3D9 JUMPI DUP1 PUSH4 0xEECEA000 EQ PUSH2 0x3EE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x421 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x44 CALLDATALOAD PUSH2 0x44F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x164 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0x628 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x190 PUSH1 0x4 CALLDATALOAD PUSH2 0x63D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x190 PUSH2 0x65C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CC PUSH2 0x672 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH1 0x4 CALLDATALOAD PUSH2 0x69E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x6D3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x190 PUSH2 0x845 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH2 0x84B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x8CE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x4 PUSH1 0x44 CALLDATALOAD DUP2 DUP2 ADD CALLDATALOAD DUP4 DUP2 MUL DUP1 DUP7 ADD DUP6 ADD SWAP1 SWAP7 MSTORE DUP1 DUP6 MSTORE PUSH2 0x134 SWAP6 DUP4 CALLDATALOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP7 PUSH1 0x24 DUP1 CALLDATALOAD SWAP1 SWAP3 AND SWAP7 CALLDATASIZE SWAP7 SWAP6 PUSH1 0x64 SWAP6 SWAP3 SWAP5 SWAP4 ADD SWAP3 DUP3 SWAP2 DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP POP PUSH1 0x40 DUP1 MLOAD DUP8 CALLDATALOAD DUP10 ADD DUP1 CALLDATALOAD PUSH1 0x20 DUP2 DUP2 MUL DUP5 DUP2 ADD DUP3 ADD SWAP1 SWAP6 MSTORE DUP2 DUP5 MSTORE SWAP9 SWAP12 SWAP11 SWAP10 DUP10 ADD SWAP9 SWAP3 SWAP8 POP SWAP1 DUP3 ADD SWAP6 POP SWAP4 POP DUP4 SWAP3 POP DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 0x961 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x190 PUSH2 0xBC4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0xBD9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0xCD0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x190 PUSH1 0x4 CALLDATALOAD PUSH2 0xCEC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x190 PUSH1 0x4 CALLDATALOAD PUSH2 0xCFE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CC PUSH2 0xD10 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0xD28 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD ISZERO ISZERO PUSH2 0xF9B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0x1015 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND DUP1 PUSH2 0x484 JUMPI POP PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ JUMPDEST ISZERO ISZERO PUSH2 0x517 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420616E20617574686F72697A6564206164647265737320666F72206372 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656174696E672072657175657374730000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x9 SLOAD DUP2 LT PUSH2 0x5BD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74206D6F6469667920616E20696E2D70726F677265737320616E73 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7765720000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE DUP4 DUP4 MSTORE PUSH1 0x10 DUP3 MSTORE DUP3 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE DUP4 MSTORE SWAP1 DUP3 KECCAK256 ADD SSTORE PUSH2 0x5F6 DUP2 PUSH2 0x1045 JUMP JUMPDEST PUSH2 0x622 DUP5 DUP5 PUSH32 0x6A9705B400000000000000000000000000000000000000000000000000000000 DUP6 PUSH2 0x10AC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x64B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x6AC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x6FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x702 PUSH2 0x11E7 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 0x840 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C494E4B207472616E73666572206661696C6564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x856 DUP4 PUSH2 0x1203 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD SWAP1 DUP5 SWAP1 SSTORE DUP1 DUP5 MSTORE PUSH1 0x10 DUP4 MSTORE DUP2 DUP5 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE DUP6 MSTORE SWAP3 DUP5 KECCAK256 SWAP1 SWAP3 ADD DUP5 SWAP1 SSTORE MLOAD SWAP1 SWAP2 CALLER SWAP2 DUP4 SWAP2 DUP6 SWAP2 PUSH32 0xB51168059C83C860CAF5B830C5D2E64C2172C6FB2FE9F25447D9838E18D93B60 SWAP2 SWAP1 LOG4 PUSH2 0x8C5 DUP2 PUSH2 0x131C JUMP JUMPDEST PUSH2 0x840 DUP2 PUSH2 0x1045 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x8F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH32 0xF8DF31144D9C2F0F6B59D69B8B98ABD5459D07F2742C4DF920B25AAE33C64820 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x6 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x985 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 DUP3 PUSH1 0x1C DUP3 MLOAD GT ISZERO ISZERO ISZERO PUSH2 0xA0D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742068617665206D6F7265207468616E203435206F7261636C6573 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 MLOAD DUP4 GT ISZERO PUSH2 0xAA3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D7573742068617665206174206C65617374206173206D616E79206F7261636C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x657320617320726573706F6E7365730000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0xB39 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D75737420686176652065786163746C79206173206D616E79206F7261636C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x73206173206A6F62204944730000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND PUSH17 0x100000000000000000000000000000000 MUL DUP2 DUP12 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR AND OR SWAP1 SSTORE DUP4 MLOAD PUSH2 0xBA6 SWAP1 PUSH1 0xB SWAP1 PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0x1EF8 JUMP JUMPDEST POP DUP5 MLOAD PUSH2 0xBBA SWAP1 PUSH1 0xC SWAP1 PUSH1 0x20 DUP9 ADD SWAP1 PUSH2 0x1F45 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x12 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xC00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC08 PUSH2 0x11E7 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD SWAP3 SWAP4 POP PUSH2 0xCB5 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND SWAP3 DUP6 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC98 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xCAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x6D3 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFDESTRUCT JUMPDEST PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x12 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xD30 PUSH2 0x1FCB JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH1 0xFF AND DUP1 PUSH2 0xD69 JUMPI POP PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ JUMPDEST ISZERO ISZERO PUSH2 0xDFC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420616E20617574686F72697A6564206164647265737320666F72206372 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656174696E672072657175657374730000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST POP POP PUSH1 0xA SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 JUMPDEST PUSH1 0xC SLOAD DUP2 LT ISZERO PUSH2 0xEC0 JUMPI PUSH2 0xE67 PUSH1 0xB DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0xE32 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD ADDRESS PUSH4 0x6A9705B4 PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL PUSH2 0x1578 JUMP JUMPDEST SWAP4 POP PUSH2 0xEA4 PUSH1 0xC DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0xE7B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP5 PUSH2 0x15A3 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE SWAP3 POP PUSH1 0x1 ADD PUSH2 0xE16 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0xD DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH17 0x100000000000000000000000000000000 SWAP8 DUP9 SWAP1 DIV DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 0xC SLOAD DUP6 SLOAD DUP6 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD SWAP5 DUP3 AND SWAP1 SWAP7 MUL SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP4 SSTORE SWAP1 SLOAD DUP2 MLOAD TIMESTAMP DUP2 MSTORE SWAP2 MLOAD CALLER SWAP4 SWAP2 SWAP3 PUSH32 0x109FC6F55CF40689F02FBAAD7AF7FE7BBAC8A3D2186600AFC7D3E10CAC60271 SWAP3 SWAP1 DUP3 SWAP1 SUB ADD SWAP1 LOG3 PUSH1 0xD SLOAD PUSH2 0xF92 SWAP1 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x1905 AND JUMP JUMPDEST PUSH1 0xD SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xFBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1039 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1042 DUP2 PUSH2 0x1918 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 SWAP2 PUSH17 0x100000000000000000000000000000000 SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x10A8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE SWAP1 PUSH2 0x622 PUSH1 0x1 DUP4 ADD DUP3 PUSH2 0x2000 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP2 AND SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 DUP7 SWAP2 PUSH32 0xE1FE3AFA0F7F761FF0A8B89086790EFD5140D2907EBD5B7FF6BFCB5E075FD4C5 SWAP2 SWAP1 LOG2 PUSH1 0x40 DUP1 MLOAD PUSH32 0x6EE4D55300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP6 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP2 PUSH4 0x6EE4D553 SWAP2 PUSH1 0x84 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x12BD JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536F75726365206D75737420626520746865206F7261636C65206F6620746865 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2072657175657374000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x7CC135E0CEBB02C3480AE5D74D377283180A2601F8F644EDF7987B009316C63A SWAP2 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP8 SWAP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x156F JUMPI DUP7 DUP1 PUSH1 0x9 SLOAD GT ISZERO ISZERO PUSH2 0xBBA JUMPI PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP7 POP PUSH2 0x1384 DUP8 PUSH1 0x2 PUSH4 0xFFFFFFFF PUSH2 0x19C8 AND JUMP JUMPDEST SWAP6 POP PUSH1 0x2 DUP8 MOD ISZERO ISZERO PUSH2 0x1496 JUMPI PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH2 0x13F5 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x13EA JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x13D6 JUMPI JUMPDEST POP POP POP POP POP DUP8 PUSH2 0x19DD JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP4 SWAP8 POP PUSH2 0x1471 SWAP4 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1453 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x143F JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x146C PUSH1 0x1 DUP10 PUSH2 0x1905 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x19DD JUMP JUMPDEST SWAP3 POP PUSH1 0x2 PUSH2 0x1485 DUP6 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1BD1 AND JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 0x148E JUMPI INVALID JUMPDEST SDIV SWAP5 POP PUSH2 0x150A JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH2 0x1507 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1453 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x143F JUMPI POP POP POP POP POP PUSH2 0x146C PUSH1 0x1 DUP10 PUSH2 0x1905 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP5 POP JUMPDEST PUSH1 0x7 DUP6 SWAP1 SSTORE PUSH1 0x9 DUP9 SWAP1 SSTORE TIMESTAMP PUSH1 0x8 DUP2 SWAP1 SSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x12 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x11 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP9 SWAP1 SSTORE DUP2 MLOAD SWAP3 DUP4 MSTORE SWAP1 MLOAD DUP11 SWAP3 DUP9 SWAP3 PUSH32 0x559884FD3A460DB3073B7FC896CC77986F16E378210DED43186175BF646FC5F SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1580 PUSH2 0x1FCB JUMP JUMPDEST PUSH2 0x1588 PUSH2 0x1FCB JUMP JUMPDEST PUSH2 0x159A DUP2 DUP7 DUP7 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x1C95 AND JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1657 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x161A JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SLOAD PUSH1 0x60 DUP11 ADD MSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP3 MSTORE DUP4 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND OR SWAP1 SSTORE SWAP3 MLOAD SWAP3 SWAP6 POP DUP6 SWAP5 POP PUSH32 0xB5E6E01E79F91267DC17B4E6314D5D4D03593D2CEEE0FBB452B750BD70EA5AF9 SWAP4 POP SWAP2 SWAP1 POP LOG2 PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x4000AEA0 DUP6 DUP5 PUSH2 0x1748 DUP8 PUSH2 0x1CF7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17E8 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17D0 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1815 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1836 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x184A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1860 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 0x18F5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x756E61626C6520746F207472616E73666572416E6443616C6C20746F206F7261 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636C650000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 0x1912 JUMPI INVALID JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO ISZERO PUSH2 0x193A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x6 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 DUP2 ISZERO ISZERO PUSH2 0x19D5 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP12 SWAP9 POP DUP11 SWAP8 POP DUP9 MLOAD SWAP7 POP DUP7 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A21 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP6 POP DUP7 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A4E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP5 POP JUMPDEST DUP9 PUSH2 0x1A64 DUP9 PUSH1 0x2 PUSH4 0xFFFFFFFF PUSH2 0x19C8 AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1A6E JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SWAP2 POP PUSH1 0x0 SWAP4 POP PUSH1 0x0 SWAP3 POP PUSH1 0x0 SWAP1 POP JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1B47 JUMPI DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1A9E JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SLT ISZERO PUSH2 0x1AE9 JUMPI DUP9 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1ABC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1AD4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x1B3F JUMP JUMPDEST DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1AF8 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SGT ISZERO PUSH2 0x1B3F JUMPI DUP9 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1B16 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x1B2E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 JUMPDEST PUSH1 0x1 ADD PUSH2 0x1A87 JUMP JUMPDEST DUP4 DUP9 GT PUSH2 0x1B65 JUMPI DUP4 SWAP7 POP PUSH2 0x1B5B DUP10 DUP8 PUSH2 0x1EA9 JUMP JUMPDEST SWAP1 SWAP10 POP SWAP6 POP PUSH2 0x1BBD JUMP JUMPDEST PUSH2 0x1B75 DUP8 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1EAC AND JUMP JUMPDEST DUP9 GT ISZERO PUSH2 0x1BB5 JUMPI PUSH2 0x1B9C PUSH2 0x1B8F DUP9 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1EAC AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1EAC AND JUMP JUMPDEST SWAP8 POP DUP3 SWAP7 POP PUSH2 0x1BAB DUP10 DUP7 PUSH2 0x1EA9 JUMP JUMPDEST SWAP1 SWAP10 POP SWAP5 POP PUSH2 0x1BBD JUMP JUMPDEST DUP2 SWAP10 POP PUSH2 0x1BC2 JUMP JUMPDEST PUSH2 0x1A52 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP2 DUP4 SLT DUP1 ISZERO SWAP1 PUSH2 0x1BE6 JUMPI POP DUP4 DUP2 SLT ISZERO JUMPDEST DUP1 PUSH2 0x1BFB JUMPI POP PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x1BFB JUMPI POP DUP4 DUP2 SLT JUMPDEST ISZERO ISZERO PUSH2 0x1C8E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5369676E6564536166654D6174683A206164646974696F6E206F766572666C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7700000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1C9D PUSH2 0x1FCB JUMP JUMPDEST PUSH2 0x1CAD DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0x100 PUSH2 0x1EBE JUMP JUMPDEST POP POP SWAP2 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 DUP1 DUP6 ADD MLOAD PUSH1 0x60 DUP7 DUP2 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD MLOAD SWAP4 MLOAD PUSH1 0x0 PUSH1 0x24 DUP3 ADD DUP2 DUP2 MSTORE PUSH1 0x44 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x64 DUP4 ADD DUP11 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x84 DUP5 ADD MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP7 AND PUSH1 0xA4 DUP5 ADD MSTORE PUSH1 0xC4 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0xE4 DUP5 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 PUSH2 0x104 DUP6 ADD SWAP1 DUP2 MSTORE DUP9 MLOAD PUSH2 0x124 DUP7 ADD MSTORE DUP9 MLOAD SWAP7 SWAP12 PUSH32 0x4042994600000000000000000000000000000000000000000000000000000000 SWAP12 SWAP5 SWAP11 DUP12 SWAP11 SWAP2 SWAP10 SWAP1 SWAP9 SWAP1 SWAP8 SWAP7 SWAP4 SWAP6 SWAP2 SWAP5 SWAP4 PUSH2 0x144 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 DUP15 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1DEC JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1DD4 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1E19 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP14 AND SWAP13 SWAP1 SWAP13 OR SWAP1 SWAP12 MSTORE POP SWAP9 SWAP10 POP POP POP POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1EB8 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1EC6 PUSH2 0x201E JUMP JUMPDEST PUSH1 0x20 DUP3 MOD ISZERO PUSH2 0x1EDB JUMPI PUSH1 0x20 DUP3 MOD PUSH1 0x20 SUB DUP3 ADD SWAP2 POP JUMPDEST POP PUSH1 0x20 DUP3 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP6 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 SWAP3 ADD ADD SWAP1 MSTORE SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x1F35 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1F35 JUMPI DUP3 MLOAD DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1F18 JUMP JUMPDEST POP PUSH2 0x1F41 SWAP3 SWAP2 POP PUSH2 0x2036 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x1FBF JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1FBF JUMPI DUP3 MLOAD DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1F65 JUMP JUMPDEST POP PUSH2 0x1F41 SWAP3 SWAP2 POP PUSH2 0x2050 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x1FFB PUSH2 0x201E JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1042 SWAP2 SWAP1 PUSH2 0x2036 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x66F SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1F41 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x203C JUMP JUMPDEST PUSH2 0x66F SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1F41 JUMPI DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2056 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH30 0xABB358B3A539F84681731B76E6B99E56536EA693FC062573EA827DEF511E 0xd9 STOP 0x29 ",
				"sourceMap": "453:12760:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6228:523;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6228:523:0;;;;;;;;;;;1085:52;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1085:52:0;;;;;;;;;;;;;;;;;;;;;;;;;992:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;992:23:0;;;;;;;;;;;;;;;;;;;;;8505:124;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8505:124:0;;;;957:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;957:31:0;;;;;;;;;;;;;;;;;;;;;;;1019:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1019:24:0;;;;;;;;;;;;;;;;;;;;;;;;5112:251;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5112:251:0;;;;;;;;;9450:108;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9450:108:0;;;;3558:399;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3558:399:0;;;;;;;1001:111:38;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1001:111:38;;;;4410:367:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4410:367:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4410:367:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4410:367:0;;;;-1:-1:-1;4410:367:0;-1:-1:-1;4410:367:0;;-1:-1:-1;4410:367:0;;;;;;;;;-1:-1:-1;4410:367:0;;-1:-1:-1;4410:367:0;;-1:-1:-1;;;;;;;4410:367:0;8698:131;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8698:131:0;;;;6907:221;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6907:221:0;;;;238:20:38;;8:9:-1;5:2;;;30:1;27;20:12;5:2;238:20:38;;;;8948:124:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;8948:124:0;;;;;9230:131;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;9230:131:0;;;;;925:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;925:28:0;;;;2565:694;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2565:694:0;;;;5646:146;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5646:146:0;;;;;;;;;;;1274:103:38;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1274:103:38;;;;;;;6228:523:0;13112:10;6379:16;13091:32;;;:20;:32;;;;;;;;;:55;;-1:-1:-1;13141:5:0;;;;13127:10;:19;13091:55;13083:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6398:26:0;;;;:14;:26;;;;;;6449:21;;6438:32;;6430:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6524:26;;;;:14;:26;;;;;;;;6517:33;;;6556:17;;;:7;:17;;;;:27;;;;27:10:-1;;23:18;;;45:23;;6556:35:0;;;;;;;6597:22;6564:8;6597:12;:22::i;:::-;6626:120;6656:10;6674:8;6690:31;6729:11;6626:22;:120::i;:::-;6228:523;;;;:::o;1085:52::-;;;;;;;;;;;;;;;:::o;992:23::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;992:23:0;:::o;8505:124::-;8602:21;;8564:6;8587:37;;;:14;:37;;;;;;8505:124;;:::o;957:31::-;;;;;;;;;:::o;1019:24::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1019:24:0;:::o;5112:251::-;719:5:38;;5206:28:0;;719:5:38;;705:10;:19;697:28;;;;;;5256:23:0;:21;:23::i;:::-;5206:74;;5294:9;:18;;;5313:10;5325:7;5294:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5294:39:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5294:39:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5294:39:0;5286:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5112:251;;;:::o;9450:108::-;9532:21;;9450:108;:::o;3558:399::-;3692:16;3646:39;3672:12;3646:25;:39::i;:::-;-1:-1:-1;3711:28:0;;;;:14;:28;;;;;;;;;;3745:35;;;;3787:17;;;:7;:17;;;;;-1:-1:-1;3787:27:0;;;27:10:-1;;23:18;;;45:23;;3787:43:0;;;;;;;;;;;3841:49;3711:28;;3879:10;;3711:28;;3820:9;;3841:49;;3711:28;3841:49;3896:28;3915:8;3896:18;:28::i;:::-;3930:22;3943:8;3930:12;:22::i;1001:111:38:-;719:5;;;;705:10;:19;697:28;;;;;;1077:5;;1058:25;;1077:5;;;;;1058:25;;1077:5;;1058:25;1089:5;:18;;;;;;1001:111::o;4410:367:0:-;719:5:38;;;;705:10;:19;697:28;;;;;;4608:17:0;12540:414;;4627:8;4637:7;1396:2;12672:8;:15;:35;;12664:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12758:15;;:36;-1:-1:-1;12758:36:0;12750:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12879:14;;12860:15;;:33;12852:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4654:13;:30;;;4690:36;;;;;4654:30;;;;;;;;;;;4690:36;;;;4732:16;;;;:6;;:16;;;;;:::i;:::-;-1:-1:-1;4754:18:0;;;;:7;;:18;;;;;:::i;:::-;;731:1:38;;;4410:367:0;;;;:::o;8698:131::-;8802:21;;8760:7;8784:40;;;:17;:40;;;;;;8698:131;:::o;6907:221::-;719:5:38;;6963:28:0;;719:5:38;;705:10;:19;697:28;;;;;;7013:23:0;:21;:23::i;:::-;7056:5;;7063:34;;;;;;7091:4;7063:34;;;;;;6963:74;;-1:-1:-1;7043:55:0;;7056:5;;;;;7063:19;;;;;:34;;;;;;;;;;;;;;7056:5;7063:19;:34;;;5:2:-1;;;;30:1;27;20:12;5:2;7063:34:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7063:34:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7063:34:0;7043:12;:55::i;:::-;7117:5;;;;7104:19;238:20:38;;;;;;:::o;8948:124:0:-;9020:6;9043:24;;;:14;:24;;;;;;;8948:124::o;9230:131::-;9305:7;9329:27;;;:17;:27;;;;;;;9230:131::o;925:28::-;;;;;;:::o;2565:694::-;2647:32;;:::i;:::-;13112:10;2685:17;13091:32;;;:20;:32;;;;;;2685:17;;;;13091:32;;;:55;;-1:-1:-1;13141:5:0;;;;13127:10;:19;13091:55;13083:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2732:13:0;;;;;2752:265;2773:7;:14;2769:18;;2752:265;;;2812:71;2834:6;2841:1;2834:9;;;;;;;;;;;;;;;;;;2845:4;2851:31;;;2812:21;:71::i;:::-;2802:81;;2903:58;2926:7;2934:1;2926:10;;;;;;;;;;;;;;;;;;;;;;2938:7;2947:13;2903:22;:58::i;:::-;2997:13;;2969:25;;;;:14;:25;;;;;:41;2891:70;-1:-1:-1;2789:3:0;;2752:265;;;3064:16;;3030:13;;;3022:22;;;;3064:16;3022:22;;;;;;;;:58;;;;3064:16;;;;;;;;3022:58;;;;;;;3132:7;:14;3094:13;;3086:22;;;;;;:61;;;;;;;;;;;;;;;;;3168:13;;3159:52;;3195:15;3159:52;;;;3183:10;;3168:13;;3159:52;;;;;;;;;3234:13;;:20;;3252:1;3234:20;:17;:20;:::i;:::-;3218:13;:36;-1:-1:-1;;;;2565:694:0:o;5646:146::-;719:5:38;;;;705:10;:19;697:28;;;;;;5744:32:0;;;;;;;;;:20;:32;;;;;:43;;;;;;;;;;;;;5646:146::o;1274:103:38:-;719:5;;;;705:10;:19;697:28;;;;;;1343:29;1362:9;1343:18;:29::i;:::-;1274:103;:::o;11222:133:0:-;12030:18;;;;:7;:18;;;;;:31;;11991:28;;;;:35;12030:18;;:31;;;;;11991:70;11987:92;;;11332:18;;;;:7;:18;;;;;11325:25;;;11332:18;11325:25;;;;11332:18;11325:25;:::i;11987:92::-;11222:133;;:::o;3997:417:2:-;4151:35;4215:27;;;:15;:27;;;;;;;;4249:34;;;;;;4294:30;;4215:27;;;;;4231:10;;4294:30;;4151:35;4294:30;4330:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:29;;;;;;:79;;;;;;;;;;;;;;;:29;:79;;;5:2:-1;;;;30:1;27;20:12;5:2;4330:79:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4330:79:2;;;;3997:417;;;;;:::o;5210:110::-;5310:4;;;;5210:110;:::o;8239:164::-;8660:27;;;;:15;:27;;;;;;;;;;8646:10;:41;8638:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8745:27;;;;:15;:27;;;;;;8738:34;;;;;;8783:30;8761:10;;8783:30;;;8239:164;;:::o;7416:1022:0:-;7563:22;11678:18;;;:7;:18;;;;;:35;;;11639:28;;;:35;7563:22;;;;;;;;7506:9;;11678:35;;-1:-1:-1;11635:96:0;;7544:9;12353;12328:21;;:34;;12324:56;;;7588:18;;;;:7;:18;;;;;:28;;:35;;-1:-1:-1;7651:21:0;7588:35;7670:1;7651:21;:18;:21;:::i;:::-;7629:43;-1:-1:-1;7729:1:0;7712:14;:18;:23;7708:460;;;7774:18;;;;:7;:18;;;;;;;;;:28;;7762:54;;;;;;;;;;;;;;;;;;;;;;7774:28;7762:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7804:11;7762;:54::i;:::-;7853:18;;;;:7;:18;;;;;;;;;:28;;7841:61;;;;;;;;;;;;;;;;;7745:71;;-1:-1:-1;7841:61:0;;7853:28;;7841:61;;7853:28;7841:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7883:18;7899:1;7883:11;:15;;:18;;;;:::i;:::-;7841:11;:61::i;:::-;7824:78;-1:-1:-1;7981:1:0;7958:20;:7;7824:78;7958:20;:11;:20;:::i;:::-;:24;;;;;;;;7938:44;;7708:460;;;8084:18;;;;:7;:18;;;;;;;;;:28;;8072:61;;;;;;;;;;;;;;;;;;;;;;8084:28;8072:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8114:18;8130:1;8114:11;:15;;:18;;;;:::i;8072:61::-;8052:81;;7708:460;8173:18;:38;;;8217:21;:33;;;8280:3;8256:21;:27;;;-1:-1:-1;8289:28:0;;;:17;:28;;;;;;;;:34;;;8329:14;:25;;;;;;:45;;;8385:48;;;;;;;8241:9;;8194:17;;8385:48;;;;;;;;;11723:1;11635:96;7416:1022;;;;;;;:::o;1725:295:2:-;1873:17;;:::i;:::-;1905:28;;:::i;:::-;1946:69;:3;1961:7;1970:16;1988:26;1946:69;:14;:69;:::i;:::-;1939:76;1725:295;-1:-1:-1;;;;;1725:295:2:o;3001:476::-;3125:17;3191:4;3197:8;;3174:32;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3174:32:2;;;3164:43;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;139:12;;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;246:30;;311:9;;295:26;;;340:21;;377:20;365:33;;3164:43:2;;;;;;;;;;;;;3226:8;;3213:10;;;:21;-1:-1:-1;3240:26:2;;;:15;:26;;;;;;:36;;;;;;;;;;3287:29;;3164:43;;-1:-1:-1;3164:43:2;;-1:-1:-1;3287:29:2;;-1:-1:-1;;3287:29:2;-1:-1:-1;3287:29:2;3330:4;;;;:20;3351:7;3360:8;3370:19;3384:4;3370:13;:19::i;:::-;3330:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3330:60:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3330:60:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3330:60:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3330:60:2;3322:108;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3436:8;:13;;3448:1;3436:13;;;3001:476;;;;;:::o;1247:128:40:-;1328:7;;;1348;;;;1341:15;;;;1247:128;;;;:::o;1512:171:38:-;1582:23;;;;;1574:32;;;;;;1638:5;;1617:38;;;;;;;1638:5;;1617:38;;1638:5;;1617:38;1661:5;:17;;;;;;;;;;;;;;;1512:171::o;674:283:40:-;734:7;950:2;945;:7;;;;;;;;;674:283;-1:-1:-1;;;674:283:40:o;9834:893:0:-;9921:6;9937:17;9965:9;9985:12;10014:18;10059;10104:13;10123;10142:12;10160:9;9957:2;9937:22;;9977:2;9965:14;;10000:1;:8;9985:23;;10048:4;10035:18;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;10035:18:0;;10014:39;;10093:4;10080:18;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;10080:18:0;;10059:39;;10176:547;10205:1;10207:11;:4;10216:1;10207:11;:8;:11;:::i;:::-;10205:14;;;;;;;;;;;;;;;;10197:22;;10235:1;10227:9;;10252:1;10244:9;;10270:1;10266:5;;10261:203;10277:4;10273:1;:8;10261:203;;;10309:5;10302:1;10304;10302:4;;;;;;;;;;;;;;;;;;:12;10298:158;;;10340:1;10342;10340:4;;;;;;;;;;;;;;;;;;10328:2;10331:5;10328:9;;;;;;;;;;;;;;;;;;:16;10356:7;;;;;10298:158;;;10391:5;10384:1;10386;10384:4;;;;;;;;;;;;;;;;;;:12;10380:76;;;10422:1;10424;10422:4;;;;;;;;;;;;;;;;;;10410:2;10413:5;10410:9;;;;;;;;;;;;;;;;;;:16;10438:7;;;;;10380:76;10283:3;;10261:203;;;10475:10;;;10471:246;;10504:5;10497:12;;10529:11;10534:1;10537:2;10529:4;:11::i;:::-;10519:21;;-1:-1:-1;10519:21:0;-1:-1:-1;10471:246:0;;;10564:15;:4;10573:5;10564:15;:8;:15;:::i;:::-;10559:1;:21;10555:162;;;10596:22;10602:15;:4;10611:5;10602:15;:8;:15;:::i;:::-;10596:1;;:22;:5;:22;:::i;:::-;10592:26;;10635:5;10628:12;;10660:11;10665:1;10668:2;10660:4;:11::i;:::-;10650:21;;-1:-1:-1;10650:21:0;-1:-1:-1;10555:162:0;;;10703:5;10696:12;;;;10555:162;10176:547;;;9834:893;;;;;;;;;;;;;:::o;1508:196:41:-;1564:6;1589:5;;;1609:6;;;;;;:16;;;1624:1;1619;:6;;1609:16;1608:38;;;;1635:1;1631;:5;:14;;;;;1644:1;1640;:5;1631:14;1600:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1698:1;1508:196;-1:-1:-1;;;1508:196:41:o;972:366:1:-;1121:17;;:::i;:::-;1153:50;1175:4;:8;;;336:3;1153:21;:50::i;:::-;-1:-1:-1;;1209:13:1;;;1228:39;;:20;;;:39;1273:43;;:23;;;:43;1209:13;972:366::o;7481:527:2:-;7878:7;;7893:20;;;;;7921:23;;;;;7569:5;7952:10;;;;7990:8;;;;:12;7598:405;;7628:6;7598:405;;;;;;;;;;;;;;;;;;7628:6;7598:405;;;;;;;;;;;;;;;;;;;7628:6;7598:405;;;;;;7628:6;7598:405;;;;;;;;;;;;;;7569:5;;7628:29;;:6;;;;7878:7;;7893:20;;7921:23;;7952:10;7628:6;;7990:12;;7598:405;;;;;;;;;;7628:6;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;7598:405:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7598:405:2;;;22:32:-1;26:21;;;22:32;6:49;;7598:405:2;;;49:4:-1;25:18;;61:17;;7598:405:2;182:15:-1;7598:405:2;;;;179:29:-1;;;;160:49;;;-1:-1;7598:405:2;;-1:-1:-1;;;;;;;;;;7481:527:2;;;:::o;10917:149:0:-;11054:2;10917:149::o;1069:116:40:-;1129:7;1151:8;;;;1144:16;;;;-1:-1:-1;1173:7:40;;;1069:116::o;942:395:33:-;1012:6;;:::i;:::-;1048:2;1037:8;:13;:18;1033:71;;1094:2;1083:8;:13;1077:2;:20;1065:32;;;;1033:71;-1:-1:-1;1151:12:33;;;;:23;;;1214:4;1208:11;;1226:16;;;-1:-1:-1;1249:14:33;;1291:18;;;1283:27;1270:41;;1151:12;942:395::o;453:12760:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;453:12760:0;;;-1:-1:-1;453:12760:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;453:12760:0;;;;;;;-1:-1:-1;453:12760:0;;;-1:-1:-1;453:12760:0;:::i;:::-;;;;;;;;;-1:-1:-1;453:12760:0;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;453:12760:0;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
			},
			"methodIdentifiers": {
				"authorizedRequesters(address)": "3ea478aa",
				"cancelRequest(bytes32,uint256,uint256)": "33bfcdd8",
				"chainlinkCallback(bytes32,int256)": "6a9705b4",
				"destroy()": "83197ef0",
				"getAnswer(uint256)": "b5ab58dc",
				"getTimestamp(uint256)": "b633620c",
				"jobIds(uint256)": "4162cc88",
				"latestAnswer()": "50d25bcd",
				"latestRound()": "668a0f02",
				"latestTimestamp()": "8205bf6a",
				"minimumResponses()": "54bcd7ff",
				"oracles(uint256)": "5b69a7d8",
				"owner()": "8da5cb5b",
				"paymentAmount()": "c35905c6",
				"renounceOwnership()": "715018a6",
				"requestRateUpdate()": "daa6d556",
				"setAuthorization(address,bool)": "eecea000",
				"transferLINK(address,uint256)": "5cd9b90b",
				"transferOwnership(address)": "f2fde38b",
				"updateRequestDetails(uint128,uint128,address[],bytes32[])": "78a66674"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"name\":\"_payment\",\"type\":\"uint256\"},{\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"cancelRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedRequesters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jobIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumResponses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracles\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferLINK\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clRequestId\",\"type\":\"bytes32\"},{\"name\":\"_response\",\"type\":\"int256\"}],\"name\":\"chainlinkCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentAmount\",\"type\":\"uint128\"},{\"name\":\"_minimumResponses\",\"type\":\"uint128\"},{\"name\":\"_oracles\",\"type\":\"address[]\"},{\"name\":\"_jobIds\",\"type\":\"bytes32[]\"}],\"name\":\"updateRequestDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestRateUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requester\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAuthorization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_link\",\"type\":\"address\"},{\"name\":\"_paymentAmount\",\"type\":\"uint128\"},{\"name\":\"_minimumResponses\",\"type\":\"uint128\"},{\"name\":\"_oracles\",\"type\":\"address[]\"},{\"name\":\"_jobIds\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"response\",\"type\":\"int256\"},{\"indexed\":true,\"name\":\"answerId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ResponseReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"cancelRequest(bytes32,uint256,uint256)\":{\"params\":{\"_expiration\":\"is the time when the request expires\",\"_payment\":\"is the amount of LINK paid to the oracle for the request\",\"_requestId\":\"is the identifier for the chainlink request being cancelled\"}},\"chainlinkCallback(bytes32,int256)\":{\"details\":\"This function can only be called by the oracle that received the request.\",\"params\":{\"_clRequestId\":\"The Chainlink request ID associated with the answer\",\"_response\":\"The answer provided by the Chainlink node\"}},\"getAnswer(uint256)\":{\"params\":{\"_roundId\":\"the answer number to retrieve the answer for\"}},\"getTimestamp(uint256)\":{\"params\":{\"_roundId\":\"the answer number to retrieve the updated timestamp for\"}},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"requestRateUpdate()\":{\"details\":\"This example does not include request parameters. Reference any documentation associated with the Job IDs used to determine the required parameters per-request.\"},\"setAuthorization(address,bool)\":{\"params\":{\"_allowed\":\"boolean that determines whether the requester is permissioned or not\",\"_requester\":\"the address whose permissions are being set\"}},\"transferLINK(address,uint256)\":{\"details\":\"The contract will need to have a LINK balance in order to create requests.\",\"params\":{\"_amount\":\"The amount of LINK to send from the contract\",\"_recipient\":\"The address to receive the LINK tokens\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"_newOwner\":\"The address to transfer ownership to.\"}},\"updateRequestDetails(uint128,uint128,address[],bytes32[])\":{\"details\":\"Arrays are validated to be equal length.\",\"params\":{\"_jobIds\":\"An array of Job IDs\",\"_minimumResponses\":\"the minimum number of responses before an answer will be calculated\",\"_oracles\":\"An array of oracle addresses\",\"_paymentAmount\":\"the amount of LINK to be sent to each oracle for each request\"}}},\"title\":\"An example Chainlink contract with aggregation\"},\"userdoc\":{\"methods\":{\"cancelRequest(bytes32,uint256,uint256)\":{\"notice\":\"Cancels an outstanding Chainlink request. The oracle contract requires the request ID and additional metadata to validate the cancellation. Only old answers can be cancelled.\"},\"chainlinkCallback(bytes32,int256)\":{\"notice\":\"Receives the answer from the Chainlink node.\"},\"destroy()\":{\"notice\":\"Called by the owner to kill the contract. This transfers all LINK balance and ETH balance (if there is any) to the owner.\"},\"getAnswer(uint256)\":{\"notice\":\"get past rounds answers\"},\"getTimestamp(uint256)\":{\"notice\":\"get block timestamp when an answer was last updated\"},\"latestAnswer()\":{\"notice\":\"get the most recently reported answer\"},\"latestRound()\":{\"notice\":\"get the latest completed round where the answer was updated\"},\"latestTimestamp()\":{\"notice\":\"get the last updated at block timestamp\"},\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"},\"requestRateUpdate()\":{\"notice\":\"Creates a Chainlink request for each oracle in the oracles array.\"},\"setAuthorization(address,bool)\":{\"notice\":\"Called by the owner to permission other addresses to generate new requests to oracles.\"},\"transferLINK(address,uint256)\":{\"notice\":\"Allows the owner of the contract to withdraw any LINK balance available on the contract.\"},\"updateRequestDetails(uint128,uint128,address[],bytes32[])\":{\"notice\":\"Updates the arrays of oracles and jobIds with new values, overwriting the old values.\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/Aggregator.sol\":\"Aggregator\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/Aggregator.sol\":{\"keccak256\":\"0x6894b629d1a332fcf970e765f36a4c6561eb0b6cc7d53973712860ed92ccc684\",\"urls\":[\"bzzr://1669ba7f4f8af6071b89d3a15842b1bc903ab5ceaaa628a4d9f4413aaed1b9aa\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/Chainlink.sol\":{\"keccak256\":\"0x3e8d01f8aead4e1eac6b3332d366ed8bc2ef5d889c2c8c344777b981d4071f63\",\"urls\":[\"bzzr://7be4bdda81bc444446593968124112fb399d460f529d80761e50c47874b9cb4f\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/ChainlinkClient.sol\":{\"keccak256\":\"0xc36504687b2b37000d8e6e25830cdb613c3e88509b0253aa09220e18876dc380\",\"urls\":[\"bzzr://a678a44b26b199a1600d422f4f6eda5d805f00a360245037a1c465b48274fe6d\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/interfaces/AggregatorInterface.sol\":{\"keccak256\":\"0xb21fa756e241d3fbfe7546158a7e1bb4a98f261744751c4e9dfe5f474ea46338\",\"urls\":[\"bzzr://acb860d28a70616f38d2d7d72ce5c82a2221734deefe67ace468112e92679bf7\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/interfaces/ChainlinkRequestInterface.sol\":{\"keccak256\":\"0x7d3983584065248fba8f0ce75fd86feac43ade43784466f87ea502254ddec992\",\"urls\":[\"bzzr://30de07df8cb9fb4ec53aff0f115f88d65936ffd6e90d2aeb031a05d6bf4de6c1\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/interfaces/ENSInterface.sol\":{\"keccak256\":\"0xd0b1a6134b5d6c0213bc4db5df8693ec41e13de3d97d43cc8d19639e516f9767\",\"urls\":[\"bzzr://93d66e26b4b5cf6cfa8c6a5d04cb56ff27d49a2aee8f54858ac3db7658355b1f\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/interfaces/LinkTokenInterface.sol\":{\"keccak256\":\"0x37f31fbd4f4f28ba236cbd9a61ae9b6f7806ea7fe0a684a855e4835f808f8b92\",\"urls\":[\"bzzr://5518135de15ba1afd8bdac829875935dea5520b152d1f602cdc34551d3c0b806\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/interfaces/PointerInterface.sol\":{\"keccak256\":\"0x8019f30a207af4ee80a8b2774e42aba721641254ed0a97826a54f33d7caef218\",\"urls\":[\"bzzr://8ddbb9ae67ec27aed40d6013d6ea176c05f7cd61d4f6fa95492a03fa086d90af\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/vendor/Buffer.sol\":{\"keccak256\":\"0x900b4c8ab35b4876d89835a8b050c96107ace250a70f64c5bba6a78a60f03883\",\"urls\":[\"bzzr://408340da4e8fa35e608196ee508f11f9d44f6f70a10f0db0083ab20b5a894d59\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/vendor/CBOR.sol\":{\"keccak256\":\"0x93faa5cd4bb12e81f73ee0edd3c1fe4fa6dbb0a0a7ab550e46b3c3d845268c9d\",\"urls\":[\"bzzr://c7f8bd088823a62b35a8138d5b2ff380d0527a030121a226c2a47559ea7d3679\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/vendor/ENSResolver.sol\":{\"keccak256\":\"0x08965df63f00cb8d164d6fc36a0c388740725906b0bfb79b17391d5dfeabf683\",\"urls\":[\"bzzr://0700cb12e032ed8ed8327e446dfd805ae9fa28785a2909a73def511fe374b8cd\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/vendor/Ownable.sol\":{\"keccak256\":\"0x84c7090c27cf3657b73d9e26b6b316975fa0bd233b8169f254de0c3b3acfaefc\",\"urls\":[\"bzzr://b983355647976c1daa5de581a1b6a41be9c5adc17cce257b8679649db78f8a11\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/vendor/SafeMathChainlink.sol\":{\"keccak256\":\"0xb822782dea15f1fa4992c27639e9f9e4a4758b2c2fd8b12ec90c4de336de9074\",\"urls\":[\"bzzr://1328bb1e33d56d48209e5bbea79fa18b212e8df3f449ac9a75d20962cc36cce5\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.4/vendor/SignedSafeMath.sol\":{\"keccak256\":\"0xc4d1131c258388162b46ce765e2ceeb68122dbf586447c47f99101d65d5f75af\",\"urls\":[\"bzzr://305e6947adba7e8d4eb6b8e4bc989d874780507df4a2c1fb5cc29d139f2f4efa\"]}},\"version\":1}",
		"userdoc": {
			"methods": {
				"cancelRequest(bytes32,uint256,uint256)": {
					"notice": "Cancels an outstanding Chainlink request. The oracle contract requires the request ID and additional metadata to validate the cancellation. Only old answers can be cancelled."
				},
				"chainlinkCallback(bytes32,int256)": {
					"notice": "Receives the answer from the Chainlink node."
				},
				"destroy()": {
					"notice": "Called by the owner to kill the contract. This transfers all LINK balance and ETH balance (if there is any) to the owner."
				},
				"getAnswer(uint256)": {
					"notice": "get past rounds answers"
				},
				"getTimestamp(uint256)": {
					"notice": "get block timestamp when an answer was last updated"
				},
				"latestAnswer()": {
					"notice": "get the most recently reported answer"
				},
				"latestRound()": {
					"notice": "get the latest completed round where the answer was updated"
				},
				"latestTimestamp()": {
					"notice": "get the last updated at block timestamp"
				},
				"renounceOwnership()": {
					"notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
				},
				"requestRateUpdate()": {
					"notice": "Creates a Chainlink request for each oracle in the oracles array."
				},
				"setAuthorization(address,bool)": {
					"notice": "Called by the owner to permission other addresses to generate new requests to oracles."
				},
				"transferLINK(address,uint256)": {
					"notice": "Allows the owner of the contract to withdraw any LINK balance available on the contract."
				},
				"updateRequestDetails(uint128,uint128,address[],bytes32[])": {
					"notice": "Updates the arrays of oracles and jobIds with new values, overwriting the old values."
				}
			}
		}
	},
	"sources": {
		"Aggregator.sol": {
			"id": 0
		},
		"ChainlinkClient.sol": {
			"id": 2
		},
		"Chainlink.sol": {
			"id": 1
		},
		"vendor/CBOR.sol": {
			"id": 34
		},
		"vendor/Buffer.sol": {
			"id": 33
		},
		"interfaces/ENSInterface.sol": {
			"id": 12
		},
		"interfaces/LinkTokenInterface.sol": {
			"id": 18
		},
		"interfaces/ChainlinkRequestInterface.sol": {
			"id": 11
		},
		"interfaces/PointerInterface.sol": {
			"id": 20
		},
		"vendor/ENSResolver.sol": {
			"id": 37
		},
		"interfaces/AggregatorInterface.sol": {
			"id": 9
		},
		"vendor/SignedSafeMath.sol": {
			"id": 41
		},
		"vendor/Ownable.sol": {
			"id": 38
		},
		"vendor/SafeMathChainlink.sol": {
			"id": 40
		}
	},
	"sourceCodes": {
		"Aggregator.sol": "pragma solidity 0.4.24;\n\nimport \"./ChainlinkClient.sol\";\nimport \"./interfaces/AggregatorInterface.sol\";\nimport \"./vendor/SignedSafeMath.sol\";\nimport \"./vendor/Ownable.sol\";\nimport \"./vendor/SafeMathChainlink.sol\";\n\n/**\n * @title An example Chainlink contract with aggregation\n * @notice Requesters can use this contract as a framework for creating\n * requests to multiple Chainlink nodes and running aggregation\n * as the contract receives answers.\n */\ncontract Aggregator is AggregatorInterface, ChainlinkClient, Ownable {\n  using SafeMathChainlink for uint256;\n  using SignedSafeMath for int256;\n\n  struct Answer {\n    uint128 minimumResponses;\n    uint128 maxResponses;\n    int256[] responses;\n  }\n\n  event ResponseReceived(int256 indexed response, uint256 indexed answerId, address indexed sender);\n\n  int256 private currentAnswerValue;\n  uint256 private updatedTimestampValue;\n  uint256 private latestCompletedAnswer;\n  uint128 public paymentAmount;\n  uint128 public minimumResponses;\n  bytes32[] public jobIds;\n  address[] public oracles;\n\n  uint256 private answerCounter = 1;\n  mapping(address => bool) public authorizedRequesters;\n  mapping(bytes32 => uint256) private requestAnswers;\n  mapping(uint256 => Answer) private answers;\n  mapping(uint256 => int256) private currentAnswers;\n  mapping(uint256 => uint256) private updatedTimestamps;\n\n  uint256 constant private MAX_ORACLE_COUNT = 28;\n\n  /**\n   * @notice Deploy with the address of the LINK token and arrays of matching\n   * length containing the addresses of the oracles and their corresponding\n   * Job IDs.\n   * @dev Sets the LinkToken address for the network, addresses of the oracles,\n   * and jobIds in storage.\n   * @param _link The address of the LINK token\n   * @param _paymentAmount the amount of LINK to be sent to each oracle for each request\n   * @param _minimumResponses the minimum number of responses\n   * before an answer will be calculated\n   * @param _oracles An array of oracle addresses\n   * @param _jobIds An array of Job IDs\n   */\n  constructor(\n    address _link,\n    uint128 _paymentAmount,\n    uint128 _minimumResponses,\n    address[] _oracles,\n    bytes32[] _jobIds\n  ) public Ownable() {\n    setChainlinkToken(_link);\n    updateRequestDetails(_paymentAmount, _minimumResponses, _oracles, _jobIds);\n  }\n\n  /**\n   * @notice Creates a Chainlink request for each oracle in the oracles array.\n   * @dev This example does not include request parameters. Reference any documentation\n   * associated with the Job IDs used to determine the required parameters per-request.\n   */\n  function requestRateUpdate()\n    external\n    ensureAuthorizedRequester()\n  {\n    Chainlink.Request memory request;\n    bytes32 requestId;\n    uint256 oraclePayment = paymentAmount;\n\n    for (uint i = 0; i < oracles.length; i++) {\n      request = buildChainlinkRequest(jobIds[i], this, this.chainlinkCallback.selector);\n      requestId = sendChainlinkRequestTo(oracles[i], request, oraclePayment);\n      requestAnswers[requestId] = answerCounter;\n    }\n    answers[answerCounter].minimumResponses = minimumResponses;\n    answers[answerCounter].maxResponses = uint128(oracles.length);\n\n    emit NewRound(answerCounter, msg.sender, block.timestamp);\n\n    answerCounter = answerCounter.add(1);\n  }\n\n  /**\n   * @notice Receives the answer from the Chainlink node.\n   * @dev This function can only be called by the oracle that received the request.\n   * @param _clRequestId The Chainlink request ID associated with the answer\n   * @param _response The answer provided by the Chainlink node\n   */\n  function chainlinkCallback(bytes32 _clRequestId, int256 _response)\n    external\n  {\n    validateChainlinkCallback(_clRequestId);\n\n    uint256 answerId = requestAnswers[_clRequestId];\n    delete requestAnswers[_clRequestId];\n\n    answers[answerId].responses.push(_response);\n    emit ResponseReceived(_response, answerId, msg.sender);\n    updateLatestAnswer(answerId);\n    deleteAnswer(answerId);\n  }\n\n  /**\n   * @notice Updates the arrays of oracles and jobIds with new values,\n   * overwriting the old values.\n   * @dev Arrays are validated to be equal length.\n   * @param _paymentAmount the amount of LINK to be sent to each oracle for each request\n   * @param _minimumResponses the minimum number of responses\n   * before an answer will be calculated\n   * @param _oracles An array of oracle addresses\n   * @param _jobIds An array of Job IDs\n   */\n  function updateRequestDetails(\n    uint128 _paymentAmount,\n    uint128 _minimumResponses,\n    address[] _oracles,\n    bytes32[] _jobIds\n  )\n    public\n    onlyOwner()\n    validateAnswerRequirements(_minimumResponses, _oracles, _jobIds)\n  {\n    paymentAmount = _paymentAmount;\n    minimumResponses = _minimumResponses;\n    jobIds = _jobIds;\n    oracles = _oracles;\n  }\n\n  /**\n   * @notice Allows the owner of the contract to withdraw any LINK balance\n   * available on the contract.\n   * @dev The contract will need to have a LINK balance in order to create requests.\n   * @param _recipient The address to receive the LINK tokens\n   * @param _amount The amount of LINK to send from the contract\n   */\n  function transferLINK(address _recipient, uint256 _amount)\n    public\n    onlyOwner()\n  {\n    LinkTokenInterface linkToken = LinkTokenInterface(chainlinkTokenAddress());\n    require(linkToken.transfer(_recipient, _amount), \"LINK transfer failed\");\n  }\n\n  /**\n   * @notice Called by the owner to permission other addresses to generate new\n   * requests to oracles.\n   * @param _requester the address whose permissions are being set\n   * @param _allowed boolean that determines whether the requester is\n   * permissioned or not\n   */\n  function setAuthorization(address _requester, bool _allowed)\n    external\n    onlyOwner()\n  {\n    authorizedRequesters[_requester] = _allowed;\n  }\n\n  /**\n   * @notice Cancels an outstanding Chainlink request.\n   * The oracle contract requires the request ID and additional metadata to\n   * validate the cancellation. Only old answers can be cancelled.\n   * @param _requestId is the identifier for the chainlink request being cancelled\n   * @param _payment is the amount of LINK paid to the oracle for the request\n   * @param _expiration is the time when the request expires\n   */\n  function cancelRequest(\n    bytes32 _requestId,\n    uint256 _payment,\n    uint256 _expiration\n  )\n    external\n    ensureAuthorizedRequester()\n  {\n    uint256 answerId = requestAnswers[_requestId];\n    require(answerId < latestCompletedAnswer, \"Cannot modify an in-progress answer\");\n\n    delete requestAnswers[_requestId];\n    answers[answerId].responses.push(0);\n    deleteAnswer(answerId);\n\n    cancelChainlinkRequest(\n      _requestId,\n      _payment,\n      this.chainlinkCallback.selector,\n      _expiration\n    );\n  }\n\n  /**\n   * @notice Called by the owner to kill the contract. This transfers all LINK\n   * balance and ETH balance (if there is any) to the owner.\n   */\n  function destroy()\n    external\n    onlyOwner()\n  {\n    LinkTokenInterface linkToken = LinkTokenInterface(chainlinkTokenAddress());\n    transferLINK(owner, linkToken.balanceOf(address(this)));\n    selfdestruct(owner);\n  }\n\n  /**\n   * @dev Performs aggregation of the answers received from the Chainlink nodes.\n   * Assumes that at least half the oracles are honest and so can't contol the\n   * middle of the ordered responses.\n   * @param _answerId The answer ID associated with the group of requests\n   */\n  function updateLatestAnswer(uint256 _answerId)\n    private\n    ensureMinResponsesReceived(_answerId)\n    ensureOnlyLatestAnswer(_answerId)\n  {\n    uint256 responseLength = answers[_answerId].responses.length;\n    uint256 middleIndex = responseLength.div(2);\n    int256 currentAnswerTemp;\n    if (responseLength % 2 == 0) {\n      int256 median1 = quickselect(answers[_answerId].responses, middleIndex);\n      int256 median2 = quickselect(answers[_answerId].responses, middleIndex.add(1)); // quickselect is 1 indexed\n      currentAnswerTemp = median1.add(median2) / 2; // signed integers are not supported by SafeMath\n    } else {\n      currentAnswerTemp = quickselect(answers[_answerId].responses, middleIndex.add(1)); // quickselect is 1 indexed\n    }\n    currentAnswerValue = currentAnswerTemp;\n    latestCompletedAnswer = _answerId;\n    updatedTimestampValue = now;\n    updatedTimestamps[_answerId] = now;\n    currentAnswers[_answerId] = currentAnswerTemp;\n    emit AnswerUpdated(currentAnswerTemp, _answerId, now);\n  }\n\n  /**\n   * @notice get the most recently reported answer\n   */\n  function latestAnswer()\n    external\n    view\n    returns (int256)\n  {\n    return currentAnswers[latestCompletedAnswer];\n  }\n\n  /**\n   * @notice get the last updated at block timestamp\n   */\n  function latestTimestamp()\n    external\n    view\n    returns (uint256)\n  {\n    return updatedTimestamps[latestCompletedAnswer];\n  }\n\n  /**\n   * @notice get past rounds answers\n   * @param _roundId the answer number to retrieve the answer for\n   */\n  function getAnswer(uint256 _roundId)\n    external\n    view\n    returns (int256)\n  {\n    return currentAnswers[_roundId];\n  }\n\n  /**\n   * @notice get block timestamp when an answer was last updated\n   * @param _roundId the answer number to retrieve the updated timestamp for\n   */\n  function getTimestamp(uint256 _roundId)\n    external\n    view\n    returns (uint256)\n  {\n    return updatedTimestamps[_roundId];\n  }\n\n  /**\n   * @notice get the latest completed round where the answer was updated\n   */\n  function latestRound()\n    external\n    view\n    returns (uint256)\n  {\n    return latestCompletedAnswer;\n  }\n\n  /**\n   * @dev Returns the kth value of the ordered array\n   * See: http://www.cs.yale.edu/homes/aspnes/pinewiki/QuickSelect.html\n   * @param _a The list of elements to pull from\n   * @param _k The index, 1 based, of the elements you want to pull from when ordered\n   */\n  function quickselect(int256[] memory _a, uint256 _k)\n    private\n    pure\n    returns (int256)\n  {\n    int256[] memory a = _a;\n    uint256 k = _k;\n    uint256 aLen = a.length;\n    int256[] memory a1 = new int256[](aLen);\n    int256[] memory a2 = new int256[](aLen);\n    uint256 a1Len;\n    uint256 a2Len;\n    int256 pivot;\n    uint256 i;\n\n    while (true) {\n      pivot = a[aLen.div(2)];\n      a1Len = 0;\n      a2Len = 0;\n      for (i = 0; i < aLen; i++) {\n        if (a[i] < pivot) {\n          a1[a1Len] = a[i];\n          a1Len++;\n        } else if (a[i] > pivot) {\n          a2[a2Len] = a[i];\n          a2Len++;\n        }\n      }\n      if (k <= a1Len) {\n        aLen = a1Len;\n        (a, a1) = swap(a, a1);\n      } else if (k > (aLen.sub(a2Len))) {\n        k = k.sub(aLen.sub(a2Len));\n        aLen = a2Len;\n        (a, a2) = swap(a, a2);\n      } else {\n        return pivot;\n      }\n    }\n  }\n\n  /**\n   * @dev Swaps the pointers to two uint256 arrays in memory\n   * @param _a The pointer to the first in memory array\n   * @param _b The pointer to the second in memory array\n   */\n  function swap(int256[] memory _a, int256[] memory _b)\n    private\n    pure\n    returns(int256[] memory, int256[] memory)\n  {\n    return (_b, _a);\n  }\n\n  /**\n   * @dev Cleans up the answer record if all responses have been received.\n   * @param _answerId The identifier of the answer to be deleted\n   */\n  function deleteAnswer(uint256 _answerId)\n    private\n    ensureAllResponsesReceived(_answerId)\n  {\n    delete answers[_answerId];\n  }\n\n  /**\n   * @dev Prevents taking an action if the minimum number of responses has not\n   * been received for an answer.\n   * @param _answerId The the identifier of the answer that keeps track of the responses.\n   */\n  modifier ensureMinResponsesReceived(uint256 _answerId) {\n    if (answers[_answerId].responses.length >= answers[_answerId].minimumResponses) {\n      _;\n    }\n  }\n\n  /**\n   * @dev Prevents taking an action if not all responses are received for an answer.\n   * @param _answerId The the identifier of the answer that keeps track of the responses.\n   */\n  modifier ensureAllResponsesReceived(uint256 _answerId) {\n    if (answers[_answerId].responses.length == answers[_answerId].maxResponses) {\n      _;\n    }\n  }\n\n  /**\n   * @dev Prevents taking an action if a newer answer has been recorded.\n   * @param _answerId The current answer's identifier.\n   * Answer IDs are in ascending order.\n   */\n  modifier ensureOnlyLatestAnswer(uint256 _answerId) {\n    if (latestCompletedAnswer <= _answerId) {\n      _;\n    }\n  }\n\n  /**\n   * @dev Ensures corresponding number of oracles and jobs.\n   * @param _oracles The list of oracles.\n   * @param _jobIds The list of jobs.\n   */\n  modifier validateAnswerRequirements(\n    uint256 _minimumResponses,\n    address[] _oracles,\n    bytes32[] _jobIds\n  ) {\n    require(_oracles.length <= MAX_ORACLE_COUNT, \"cannot have more than 45 oracles\");\n    require(_oracles.length >= _minimumResponses, \"must have at least as many oracles as responses\");\n    require(_oracles.length == _jobIds.length, \"must have exactly as many oracles as job IDs\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if `msg.sender` is not authorized to make requests.\n   */\n  modifier ensureAuthorizedRequester() {\n    require(authorizedRequesters[msg.sender] || msg.sender == owner, \"Not an authorized address for creating requests\");\n    _;\n  }\n\n}\n",
		"ChainlinkClient.sol": "pragma solidity ^0.4.24;\n\nimport \"./Chainlink.sol\";\nimport \"./interfaces/ENSInterface.sol\";\nimport \"./interfaces/LinkTokenInterface.sol\";\nimport \"./interfaces/ChainlinkRequestInterface.sol\";\nimport \"./interfaces/PointerInterface.sol\";\nimport { ENSResolver as ENSResolver_Chainlink } from \"./vendor/ENSResolver.sol\";\n\n/**\n * @title The ChainlinkClient contract\n * @notice Contract writers can inherit this contract in order to create requests for the\n * Chainlink network\n */\ncontract ChainlinkClient {\n  using Chainlink for Chainlink.Request;\n\n  uint256 constant internal LINK = 10**18;\n  uint256 constant private AMOUNT_OVERRIDE = 0;\n  address constant private SENDER_OVERRIDE = 0x0;\n  uint256 constant private ARGS_VERSION = 1;\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\"link\");\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\"oracle\");\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\n\n  ENSInterface private ens;\n  bytes32 private ensNode;\n  LinkTokenInterface private link;\n  ChainlinkRequestInterface private oracle;\n  uint256 private requests = 1;\n  mapping(bytes32 => address) private pendingRequests;\n\n  event ChainlinkRequested(bytes32 indexed id);\n  event ChainlinkFulfilled(bytes32 indexed id);\n  event ChainlinkCancelled(bytes32 indexed id);\n\n  /**\n   * @notice Creates a request that can hold additional parameters\n   * @param _specId The Job Specification ID that the request will be created for\n   * @param _callbackAddress The callback address that the response will be sent to\n   * @param _callbackFunctionSignature The callback function signature to use for the callback address\n   * @return A Chainlink Request struct in memory\n   */\n  function buildChainlinkRequest(\n    bytes32 _specId,\n    address _callbackAddress,\n    bytes4 _callbackFunctionSignature\n  ) internal pure returns (Chainlink.Request memory) {\n    Chainlink.Request memory req;\n    return req.initialize(_specId, _callbackAddress, _callbackFunctionSignature);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the stored oracle address\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\n   * @param _req The initialized Chainlink Request\n   * @param _payment The amount of LINK to send for the request\n   * @return The request ID\n   */\n  function sendChainlinkRequest(Chainlink.Request memory _req, uint256 _payment)\n    internal\n    returns (bytes32)\n  {\n    return sendChainlinkRequestTo(oracle, _req, _payment);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the specified oracle address\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n   * send LINK which creates a request on the target oracle contract.\n   * Emits ChainlinkRequested event.\n   * @param _oracle The address of the oracle for the request\n   * @param _req The initialized Chainlink Request\n   * @param _payment The amount of LINK to send for the request\n   * @return The request ID\n   */\n  function sendChainlinkRequestTo(address _oracle, Chainlink.Request memory _req, uint256 _payment)\n    internal\n    returns (bytes32 requestId)\n  {\n    requestId = keccak256(abi.encodePacked(this, requests));\n    _req.nonce = requests;\n    pendingRequests[requestId] = _oracle;\n    emit ChainlinkRequested(requestId);\n    require(link.transferAndCall(_oracle, _payment, encodeRequest(_req)), \"unable to transferAndCall to oracle\");\n    requests += 1;\n\n    return requestId;\n  }\n\n  /**\n   * @notice Allows a request to be cancelled if it has not been fulfilled\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\n   * Deletes the request from the `pendingRequests` mapping.\n   * Emits ChainlinkCancelled event.\n   * @param _requestId The request ID\n   * @param _payment The amount of LINK sent for the request\n   * @param _callbackFunc The callback function specified for the request\n   * @param _expiration The time of the expiration for the request\n   */\n  function cancelChainlinkRequest(\n    bytes32 _requestId,\n    uint256 _payment,\n    bytes4 _callbackFunc,\n    uint256 _expiration\n  )\n    internal\n  {\n    ChainlinkRequestInterface requested = ChainlinkRequestInterface(pendingRequests[_requestId]);\n    delete pendingRequests[_requestId];\n    emit ChainlinkCancelled(_requestId);\n    requested.cancelOracleRequest(_requestId, _payment, _callbackFunc, _expiration);\n  }\n\n  /**\n   * @notice Sets the stored oracle address\n   * @param _oracle The address of the oracle contract\n   */\n  function setChainlinkOracle(address _oracle) internal {\n    oracle = ChainlinkRequestInterface(_oracle);\n  }\n\n  /**\n   * @notice Sets the LINK token address\n   * @param _link The address of the LINK token contract\n   */\n  function setChainlinkToken(address _link) internal {\n    link = LinkTokenInterface(_link);\n  }\n\n  /**\n   * @notice Sets the Chainlink token address for the public\n   * network as given by the Pointer contract\n   */\n  function setPublicChainlinkToken() internal {\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\n  }\n\n  /**\n   * @notice Retrieves the stored address of the LINK token\n   * @return The address of the LINK token\n   */\n  function chainlinkTokenAddress()\n    internal\n    view\n    returns (address)\n  {\n    return address(link);\n  }\n\n  /**\n   * @notice Retrieves the stored address of the oracle contract\n   * @return The address of the oracle contract\n   */\n  function chainlinkOracleAddress()\n    internal\n    view\n    returns (address)\n  {\n    return address(oracle);\n  }\n\n  /**\n   * @notice Allows for a request which was created on another contract to be fulfilled\n   * on this contract\n   * @param _oracle The address of the oracle contract that will fulfill the request\n   * @param _requestId The request ID used for the response\n   */\n  function addChainlinkExternalRequest(address _oracle, bytes32 _requestId)\n    internal\n    notPendingRequest(_requestId)\n  {\n    pendingRequests[_requestId] = _oracle;\n  }\n\n  /**\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\n   * @dev Accounts for subnodes having different resolvers\n   * @param _ens The address of the ENS contract\n   * @param _node The ENS node hash\n   */\n  function useChainlinkWithENS(address _ens, bytes32 _node)\n    internal\n  {\n    ens = ENSInterface(_ens);\n    ensNode = _node;\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\n    setChainlinkToken(resolver.addr(linkSubnode));\n    updateChainlinkOracleWithENS();\n  }\n\n  /**\n   * @notice Sets the stored oracle contract with the address resolved by ENS\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\n   */\n  function updateChainlinkOracleWithENS()\n    internal\n  {\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\n    setChainlinkOracle(resolver.addr(oracleSubnode));\n  }\n\n  /**\n   * @notice Encodes the request to be sent to the oracle contract\n   * @dev The Chainlink node expects values to be in order for the request to be picked up. Order of types\n   * will be validated in the oracle contract.\n   * @param _req The initialized Chainlink Request\n   * @return The bytes payload for the `transferAndCall` method\n   */\n  function encodeRequest(Chainlink.Request memory _req)\n    private\n    view\n    returns (bytes memory)\n  {\n    return abi.encodeWithSelector(\n      oracle.oracleRequest.selector,\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\n      _req.id,\n      _req.callbackAddress,\n      _req.callbackFunctionId,\n      _req.nonce,\n      ARGS_VERSION,\n      _req.buf.buf);\n  }\n\n  /**\n   * @notice Ensures that the fulfillment is valid for this contract\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\n   * @param _requestId The request ID for fulfillment\n   */\n  function validateChainlinkCallback(bytes32 _requestId)\n    internal\n    recordChainlinkFulfillment(_requestId)\n    // solhint-disable-next-line no-empty-blocks\n  {}\n\n  /**\n   * @dev Reverts if the sender is not the oracle of the request.\n   * Emits ChainlinkFulfilled event.\n   * @param _requestId The request ID for fulfillment\n   */\n  modifier recordChainlinkFulfillment(bytes32 _requestId) {\n    require(msg.sender == pendingRequests[_requestId], \"Source must be the oracle of the request\");\n    delete pendingRequests[_requestId];\n    emit ChainlinkFulfilled(_requestId);\n    _;\n  }\n\n  /**\n   * @dev Reverts if the request is already pending\n   * @param _requestId The request ID for fulfillment\n   */\n  modifier notPendingRequest(bytes32 _requestId) {\n    require(pendingRequests[_requestId] == address(0), \"Request is already pending\");\n    _;\n  }\n}\n",
		"Chainlink.sol": "pragma solidity ^0.4.24;\n\nimport { CBOR as CBOR_Chainlink } from \"./vendor/CBOR.sol\";\nimport { Buffer as Buffer_Chainlink } from \"./vendor/Buffer.sol\";\n\n/**\n * @title Library for common Chainlink functions\n * @dev Uses imported CBOR library for encoding to buffer\n */\nlibrary Chainlink {\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\n\n  using CBOR_Chainlink for Buffer_Chainlink.buffer;\n\n  struct Request {\n    bytes32 id;\n    address callbackAddress;\n    bytes4 callbackFunctionId;\n    uint256 nonce;\n    Buffer_Chainlink.buffer buf;\n  }\n\n  /**\n   * @notice Initializes a Chainlink request\n   * @dev Sets the ID, callback address, and callback function signature on the request\n   * @param self The uninitialized request\n   * @param _id The Job Specification ID\n   * @param _callbackAddress The callback address\n   * @param _callbackFunction The callback function signature\n   * @return The initialized request\n   */\n  function initialize(\n    Request memory self,\n    bytes32 _id,\n    address _callbackAddress,\n    bytes4 _callbackFunction\n  ) internal pure returns (Chainlink.Request memory) {\n    Buffer_Chainlink.init(self.buf, defaultBufferSize);\n    self.id = _id;\n    self.callbackAddress = _callbackAddress;\n    self.callbackFunctionId = _callbackFunction;\n    return self;\n  }\n\n  /**\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\n   * @param self The initialized request\n   * @param _data The CBOR data\n   */\n  function setBuffer(Request memory self, bytes _data)\n    internal pure\n  {\n    Buffer_Chainlink.init(self.buf, _data.length);\n    Buffer_Chainlink.append(self.buf, _data);\n  }\n\n  /**\n   * @notice Adds a string value to the request with a given key name\n   * @param self The initialized request\n   * @param _key The name of the key\n   * @param _value The string value to add\n   */\n  function add(Request memory self, string _key, string _value)\n    internal pure\n  {\n    self.buf.encodeString(_key);\n    self.buf.encodeString(_value);\n  }\n\n  /**\n   * @notice Adds a bytes value to the request with a given key name\n   * @param self The initialized request\n   * @param _key The name of the key\n   * @param _value The bytes value to add\n   */\n  function addBytes(Request memory self, string _key, bytes _value)\n    internal pure\n  {\n    self.buf.encodeString(_key);\n    self.buf.encodeBytes(_value);\n  }\n\n  /**\n   * @notice Adds a int256 value to the request with a given key name\n   * @param self The initialized request\n   * @param _key The name of the key\n   * @param _value The int256 value to add\n   */\n  function addInt(Request memory self, string _key, int256 _value)\n    internal pure\n  {\n    self.buf.encodeString(_key);\n    self.buf.encodeInt(_value);\n  }\n\n  /**\n   * @notice Adds a uint256 value to the request with a given key name\n   * @param self The initialized request\n   * @param _key The name of the key\n   * @param _value The uint256 value to add\n   */\n  function addUint(Request memory self, string _key, uint256 _value)\n    internal pure\n  {\n    self.buf.encodeString(_key);\n    self.buf.encodeUInt(_value);\n  }\n\n  /**\n   * @notice Adds an array of strings to the request with a given key name\n   * @param self The initialized request\n   * @param _key The name of the key\n   * @param _values The array of string values to add\n   */\n  function addStringArray(Request memory self, string _key, string[] memory _values)\n    internal pure\n  {\n    self.buf.encodeString(_key);\n    self.buf.startArray();\n    for (uint256 i = 0; i < _values.length; i++) {\n      self.buf.encodeString(_values[i]);\n    }\n    self.buf.endSequence();\n  }\n}\n",
		"vendor/CBOR.sol": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.19 < 0.7.0;\n\nimport { Buffer as BufferChainlink } from \"./Buffer.sol\";\n\nlibrary CBOR {\n    using BufferChainlink for BufferChainlink.buffer;\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_TAG = 6;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\n\n    function encodeType(BufferChainlink.buffer memory buf, uint8 major, uint value) private pure {\n        if(value <= 23) {\n            buf.appendUint8(uint8((major << 5) | value));\n        } else if(value <= 0xFF) {\n            buf.appendUint8(uint8((major << 5) | 24));\n            buf.appendInt(value, 1);\n        } else if(value <= 0xFFFF) {\n            buf.appendUint8(uint8((major << 5) | 25));\n            buf.appendInt(value, 2);\n        } else if(value <= 0xFFFFFFFF) {\n            buf.appendUint8(uint8((major << 5) | 26));\n            buf.appendInt(value, 4);\n        } else if(value <= 0xFFFFFFFFFFFFFFFF) {\n            buf.appendUint8(uint8((major << 5) | 27));\n            buf.appendInt(value, 8);\n        }\n    }\n\n    function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\n        buf.appendUint8(uint8((major << 5) | 31));\n    }\n\n    function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\n        encodeType(buf, MAJOR_TYPE_INT, value);\n    }\n\n    function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\n        if(value < -0x10000000000000000) {\n            encodeSignedBigNum(buf, value);\n        } else if(value > 0xFFFFFFFFFFFFFFFF) {\n            encodeBigNum(buf, value);\n        } else if(value >= 0) {\n            encodeType(buf, MAJOR_TYPE_INT, uint(value));\n        } else {\n            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\n        }\n    }\n\n    function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\n        encodeType(buf, MAJOR_TYPE_BYTES, value.length);\n        buf.append(value);\n    }\n\n    function encodeBigNum(BufferChainlink.buffer memory buf, int value) internal pure {\n      buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\n      encodeBytes(buf, abi.encode(uint(value)));\n    }\n\n    function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\n      buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\n      encodeBytes(buf, abi.encode(uint(-1 - input)));\n    }\n\n    function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\n        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\n        buf.append(bytes(value));\n    }\n\n    function startArray(BufferChainlink.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n    }\n\n    function startMap(BufferChainlink.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n    }\n\n    function endSequence(BufferChainlink.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n    }\n}\n",
		"vendor/Buffer.sol": "pragma solidity >0.4.18;\n\n/**\n* @dev A library for working with mutable byte buffers in Solidity.\n*\n* Byte buffers are mutable and expandable, and provide a variety of primitives\n* for writing to them. At any time you can fetch a bytes object containing the\n* current contents of the buffer. The bytes object should not be stored between\n* operations, as it may change due to resizing of the buffer.\n*/\nlibrary Buffer {\n  /**\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n  *      a capacity. The capacity may be longer than the current value, in\n  *      which case it can be extended without the need to allocate more memory.\n  */\n  struct buffer {\n    bytes buf;\n    uint capacity;\n  }\n\n  /**\n  * @dev Initializes a buffer with an initial capacity.\n  * @param buf The buffer to initialize.\n  * @param capacity The number of bytes of space to allocate the buffer.\n  * @return The buffer, for chaining.\n  */\n  function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\n    if (capacity % 32 != 0) {\n      capacity += 32 - (capacity % 32);\n    }\n    // Allocate space for the buffer data\n    buf.capacity = capacity;\n    assembly {\n      let ptr := mload(0x40)\n      mstore(buf, ptr)\n      mstore(ptr, 0)\n      mstore(0x40, add(32, add(ptr, capacity)))\n    }\n    return buf;\n  }\n\n  /**\n  * @dev Initializes a new buffer from an existing bytes object.\n  *      Changes to the buffer may mutate the original value.\n  * @param b The bytes object to initialize the buffer with.\n  * @return A new buffer.\n  */\n  function fromBytes(bytes memory b) internal pure returns(buffer memory) {\n    buffer memory buf;\n    buf.buf = b;\n    buf.capacity = b.length;\n    return buf;\n  }\n\n  function resize(buffer memory buf, uint capacity) private pure {\n    bytes memory oldbuf = buf.buf;\n    init(buf, capacity);\n    append(buf, oldbuf);\n  }\n\n  function max(uint a, uint b) private pure returns(uint) {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  /**\n  * @dev Sets buffer length to 0.\n  * @param buf The buffer to truncate.\n  * @return The original buffer, for chaining..\n  */\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\n    assembly {\n      let bufptr := mload(buf)\n      mstore(bufptr, 0)\n    }\n    return buf;\n  }\n\n  /**\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The start offset to write to.\n  * @param data The data to append.\n  * @param len The number of bytes to copy.\n  * @return The original buffer, for chaining.\n  */\n  function write(buffer memory buf, uint off, bytes memory data, uint len) internal pure returns(buffer memory) {\n    require(len <= data.length);\n\n    if (off + len > buf.capacity) {\n      resize(buf, max(buf.capacity, len + off) * 2);\n    }\n\n    uint dest;\n    uint src;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Start address = buffer address + offset + sizeof(buffer length)\n      dest := add(add(bufptr, 32), off)\n      // Update buffer length if we're extending it\n      if gt(add(len, off), buflen) {\n        mstore(bufptr, add(len, off))\n      }\n      src := add(data, 32)\n    }\n\n    // Copy word-length chunks while possible\n    for (; len >= 32; len -= 32) {\n      assembly {\n        mstore(dest, mload(src))\n      }\n      dest += 32;\n      src += 32;\n    }\n\n    // Copy remaining bytes\n    uint mask = 256 ** (32 - len) - 1;\n    assembly {\n      let srcpart := and(mload(src), not(mask))\n      let destpart := and(mload(dest), mask)\n      mstore(dest, or(destpart, srcpart))\n    }\n\n    return buf;\n  }\n\n  /**\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @param len The number of bytes to copy.\n  * @return The original buffer, for chaining.\n  */\n  function append(buffer memory buf, bytes memory data, uint len) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, len);\n  }\n\n  /**\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, data.length);\n  }\n\n  /**\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\n  *      capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The offset to write the byte at.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function writeUint8(buffer memory buf, uint off, uint8 data) internal pure returns(buffer memory) {\n    if (off >= buf.capacity) {\n      resize(buf, buf.capacity * 2);\n    }\n\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Address = buffer address + sizeof(buffer length) + off\n      let dest := add(add(bufptr, off), 32)\n      mstore8(dest, data)\n      // Update buffer length if we extended it\n      if eq(off, buflen) {\n        mstore(bufptr, add(buflen, 1))\n      }\n    }\n    return buf;\n  }\n\n  /**\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n  *      capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\n    return writeUint8(buf, buf.buf.length, data);\n  }\n\n  /**\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n  *      exceed the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The offset to write at.\n  * @param data The data to append.\n  * @param len The number of bytes to write (left-aligned).\n  * @return The original buffer, for chaining.\n  */\n  function write(buffer memory buf, uint off, bytes32 data, uint len) private pure returns(buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    uint mask = 256 ** len - 1;\n    // Right-align data\n    data = data >> (8 * (32 - len));\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Address = buffer address + sizeof(buffer length) + off + len\n      let dest := add(add(bufptr, off), len)\n      mstore(dest, or(and(mload(dest), not(mask)), data))\n      // Update buffer length if we extended it\n      if gt(add(off, len), mload(bufptr)) {\n        mstore(bufptr, add(off, len))\n      }\n    }\n    return buf;\n  }\n\n  /**\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n  *      capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The offset to write at.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function writeBytes20(buffer memory buf, uint off, bytes20 data) internal pure returns (buffer memory) {\n    return write(buf, off, bytes32(data), 20);\n  }\n\n  /**\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @return The original buffer, for chhaining.\n  */\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, bytes32(data), 20);\n  }\n\n  /**\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param data The data to append.\n  * @return The original buffer, for chaining.\n  */\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, 32);\n  }\n\n  /**\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\n  *      the capacity of the buffer.\n  * @param buf The buffer to append to.\n  * @param off The offset to write at.\n  * @param data The data to append.\n  * @param len The number of bytes to write (right-aligned).\n  * @return The original buffer, for chaining.\n  */\n  function writeInt(buffer memory buf, uint off, uint data, uint len) private pure returns(buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    uint mask = 256 ** len - 1;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Address = buffer address + off + sizeof(buffer length) + len\n      let dest := add(add(bufptr, off), len)\n      mstore(dest, or(and(mload(dest), not(mask)), data))\n      // Update buffer length if we extended it\n      if gt(add(off, len), mload(bufptr)) {\n        mstore(bufptr, add(off, len))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n   * exceed the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer.\n   */\n  function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n    return writeInt(buf, buf.buf.length, data, len);\n  }\n}\n",
		"interfaces/ENSInterface.sol": "pragma solidity ^0.4.24;\n\ninterface ENSInterface {\n\n  // Logged when the owner of a node assigns a new owner to a subnode.\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n  // Logged when the owner of a node transfers ownership to a new account.\n  event Transfer(bytes32 indexed node, address owner);\n\n  // Logged when the resolver for a node changes.\n  event NewResolver(bytes32 indexed node, address resolver);\n\n  // Logged when the TTL of a node changes\n  event NewTTL(bytes32 indexed node, uint64 ttl);\n\n\n  function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\n  function setResolver(bytes32 node, address resolver) external;\n  function setOwner(bytes32 node, address owner) external;\n  function setTTL(bytes32 node, uint64 ttl) external;\n  function owner(bytes32 node) external view returns (address);\n  function resolver(bytes32 node) external view returns (address);\n  function ttl(bytes32 node) external view returns (uint64);\n\n}\n",
		"interfaces/LinkTokenInterface.sol": "pragma solidity ^0.4.24;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n  function approve(address spender, uint256 value) external returns (bool success);\n  function balanceOf(address owner) external view returns (uint256 balance);\n  function decimals() external view returns (uint8 decimalPlaces);\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n  function name() external view returns (string tokenName);\n  function symbol() external view returns (string tokenSymbol);\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n  function transfer(address to, uint256 value) external returns (bool success);\n  function transferAndCall(address to, uint256 value, bytes data) external returns (bool success);\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n}\n",
		"interfaces/ChainlinkRequestInterface.sol": "pragma solidity ^0.4.24;\n\ninterface ChainlinkRequestInterface {\n  function oracleRequest(\n    address sender,\n    uint256 payment,\n    bytes32 id,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 version,\n    bytes data\n  ) external;\n\n  function cancelOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunctionId,\n    uint256 expiration\n  ) external;\n}\n",
		"interfaces/PointerInterface.sol": "pragma solidity ^0.4.24;\n\ninterface PointerInterface {\n  function getAddress() external view returns (address);\n}\n",
		"vendor/ENSResolver.sol": "pragma solidity 0.4.24;\n\ncontract ENSResolver {\n  function addr(bytes32 node) public view returns (address);\n}\n",
		"interfaces/AggregatorInterface.sol": "pragma solidity >=0.4.24;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n  function latestTimestamp() external view returns (uint256);\n  function latestRound() external view returns (uint256);\n  function getAnswer(uint256 roundId) external view returns (int256);\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n",
		"vendor/SignedSafeMath.sol": "pragma solidity 0.4.24;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n  int256 constant private _INT256_MIN = -2**255;\n\n  /**\n   * @dev Multiplies two signed integers, reverts on overflow.\n   */\n  function mul(int256 a, int256 b) internal pure returns (int256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n    int256 c = a * b;\n    require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n   */\n  function div(int256 a, int256 b) internal pure returns (int256) {\n    require(b != 0, \"SignedSafeMath: division by zero\");\n    require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n    int256 c = a / b;\n\n    return c;\n  }\n\n  /**\n   * @dev Subtracts two signed integers, reverts on overflow.\n   */\n  function sub(int256 a, int256 b) internal pure returns (int256) {\n    int256 c = a - b;\n    require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Adds two signed integers, reverts on overflow.\n   */\n  function add(int256 a, int256 b) internal pure returns (int256) {\n    int256 c = a + b;\n    require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n    return c;\n  }\n}\n",
		"vendor/Ownable.sol": "pragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n",
		"vendor/SafeMathChainlink.sol": "pragma solidity ^0.4.11;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMathChainlink {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n"
	},
	"sourceTreeHashHex": "0xc929a77f512731ebbbf55b3bc476a89536375a6dac461bd0ac14350da6f141a3",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.4.24+commit.e67f0147.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"metadata": {
				"bytecodeHash": "none"
			},
			"remappings": []
		}
	},
	"chains": {}
}