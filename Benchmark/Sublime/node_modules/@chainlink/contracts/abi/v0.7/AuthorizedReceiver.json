{
	"schemaVersion": "2.0.0",
	"contractName": "AuthorizedReceiver",
	"compilerOutput": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "senders",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "changedBy",
						"type": "address"
					}
				],
				"name": "AuthorizedSendersChanged",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "getAuthorizedSenders",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "isAuthorizedSender",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "senders",
						"type": "address[]"
					}
				],
				"name": "setAuthorizedSenders",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"getAuthorizedSenders()": {
					"returns": {
						"_0": "array of addresses"
					}
				},
				"isAuthorizedSender(address)": {
					"params": {
						"sender": "The address of the Chainlink node"
					},
					"returns": {
						"_0": "The authorization status of the node"
					}
				},
				"setAuthorizedSenders(address[])": {
					"params": {
						"senders": "The addresses of the authorized Chainlink node"
					}
				}
			},
			"version": 1
		},
		"evm": {
			"bytecode": {
				"object": "0x",
				"sourceMap": ""
			},
			"deployedBytecode": {
				"object": "0x",
				"sourceMap": ""
			},
			"methodIdentifiers": {
				"getAuthorizedSenders()": "2408afaa",
				"isAuthorizedSender(address)": "fa00763a",
				"setAuthorizedSenders(address[])": "ee56997b"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"AuthorizedSendersChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAuthorizedSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isAuthorizedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"}],\"name\":\"setAuthorizedSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAuthorizedSenders()\":{\"returns\":{\"_0\":\"array of addresses\"}},\"isAuthorizedSender(address)\":{\"params\":{\"sender\":\"The address of the Chainlink node\"},\"returns\":{\"_0\":\"The authorization status of the node\"}},\"setAuthorizedSenders(address[])\":{\"params\":{\"senders\":\"The addresses of the authorized Chainlink node\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAuthorizedSenders()\":{\"notice\":\"Retrieve a list of authorized senders\"},\"isAuthorizedSender(address)\":{\"notice\":\"Use this to check if a node is authorized for fulfilling requests\"},\"setAuthorizedSenders(address[])\":{\"notice\":\"Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/AuthorizedReceiver.sol\":\"AuthorizedReceiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/AuthorizedReceiver.sol\":{\"keccak256\":\"0xdf8629200c2b65826a638c955c193e3ac0cca520feee67cfba2ad562cf02c156\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc0cb2d401959af812abee6d6beaf4d194c3d1b74865164286596615e138d45b\",\"dweb:/ipfs/QmPRwok3wt2ikvDMtcpqBF1EiEYuJAwRuDyXzZTvQA1qJJ\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/AuthorizedReceiverInterface.sol\":{\"keccak256\":\"0x647fc393b9d6be0c20e5ac5bcb19114f9a50e808d567979ed04abba5ee18a22f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef307221efe7b5e72ced7e24005a8363384013b1b26e307d9c9735e1624ac677\",\"dweb:/ipfs/QmYfcisfmWohe1v7bQH1EBA58Ct2zdkTNpSUjq3aKUqpkX\"]}},\"version\":1}",
		"userdoc": {
			"kind": "user",
			"methods": {
				"getAuthorizedSenders()": {
					"notice": "Retrieve a list of authorized senders"
				},
				"isAuthorizedSender(address)": {
					"notice": "Use this to check if a node is authorized for fulfilling requests"
				},
				"setAuthorizedSenders(address[])": {
					"notice": "Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow."
				}
			},
			"version": 1
		}
	},
	"sources": {
		"dev/AuthorizedReceiver.sol": {
			"id": 4
		},
		"interfaces/AuthorizedReceiverInterface.sol": {
			"id": 18
		}
	},
	"sourceCodes": {
		"dev/AuthorizedReceiver.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"../interfaces/AuthorizedReceiverInterface.sol\";\n\nabstract contract AuthorizedReceiver is\n  AuthorizedReceiverInterface\n{\n\n  mapping(address => bool) private s_authorizedSenders;\n  address[] private s_authorizedSenderList;\n\n  event AuthorizedSendersChanged(\n    address[] senders,\n    address changedBy\n  );\n\n  /**\n   * @notice Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\n   * @param senders The addresses of the authorized Chainlink node\n   */\n  function setAuthorizedSenders(\n    address[] calldata senders\n  )\n    external\n    override\n    validateAuthorizedSenderSetter()\n  {\n    require(senders.length > 0, \"Must have at least 1 authorized sender\");\n    // Set previous authorized senders to false\n    uint256 authorizedSendersLength = s_authorizedSenderList.length;\n    for (uint256 i = 0; i < authorizedSendersLength; i++) {\n      s_authorizedSenders[s_authorizedSenderList[i]] = false;\n    }\n    // Set new to true\n    for (uint256 i = 0; i < senders.length; i++) {\n      s_authorizedSenders[senders[i]] = true;\n    }\n    // Replace list\n    s_authorizedSenderList = senders;\n    emit AuthorizedSendersChanged(senders, msg.sender);\n  }\n\n  /**\n   * @notice Retrieve a list of authorized senders\n   * @return array of addresses\n   */\n  function getAuthorizedSenders()\n    external\n    view\n    override\n    returns (\n      address[] memory\n    )\n  {\n    return s_authorizedSenderList;\n  }\n\n  /**\n   * @notice Use this to check if a node is authorized for fulfilling requests\n   * @param sender The address of the Chainlink node\n   * @return The authorization status of the node\n   */\n  function isAuthorizedSender(\n    address sender\n  )\n    public\n    view\n    override\n    returns (bool)\n  {\n    return s_authorizedSenders[sender];\n  }\n\n  /**\n   * @notice customizable guard of who can update the authorized sender list\n   * @return bool whether sender can update authorized sender list\n   */\n  function _canSetAuthorizedSenders()\n    internal\n    virtual\n    returns (bool);\n\n  /**\n   * @notice validates the sender is an authorized sender\n   */\n  function _validateIsAuthorizedSender()\n    internal\n    view\n  {\n    require(isAuthorizedSender(msg.sender), \"Not authorized sender\");\n  }\n\n  /**\n   * @notice prevents non-authorized addresses from calling this method\n   */\n  modifier validateAuthorizedSender()\n  {\n    _validateIsAuthorizedSender();\n    _;\n  }\n\n  /**\n   * @notice prevents non-authorized addresses from calling this method\n   */\n  modifier validateAuthorizedSenderSetter()\n  {\n    require(_canSetAuthorizedSenders(), \"Cannot set authorized senders\");\n    _;\n  }\n\n}\n",
		"interfaces/AuthorizedReceiverInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface AuthorizedReceiverInterface {\n\n  function isAuthorizedSender(\n    address sender\n  )\n    external\n    view\n    returns (bool);\n\n  function getAuthorizedSenders()\n    external\n    returns (\n      address[] memory\n    );\n\n  function setAuthorizedSenders(\n    address[] calldata senders\n  )\n    external;\n\n}\n"
	},
	"sourceTreeHashHex": "0x6aeac7f12aaa45587748a513162202e07d18599d2f7b4c928d74f6909bb955bd",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.7.6+commit.7338295f.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"metadata": {
				"bytecodeHash": "none"
			},
			"remappings": []
		}
	},
	"chains": {}
}