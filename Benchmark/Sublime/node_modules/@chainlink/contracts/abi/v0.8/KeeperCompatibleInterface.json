{
	"schemaVersion": "2.0.0",
	"contractName": "KeeperCompatibleInterface",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "checkData",
						"type": "bytes"
					}
				],
				"name": "checkUpkeep",
				"outputs": [
					{
						"internalType": "bool",
						"name": "upkeepNeeded",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "performData",
						"type": "bytes"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "performData",
						"type": "bytes"
					}
				],
				"name": "performUpkeep",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"checkUpkeep(bytes)": {
					"params": {
						"checkData": "data passed to the contract when checking for upkeep."
					},
					"returns": {
						"performData": "bytes that the keeper should call performUpkeep with, if upkeep is needed.",
						"upkeepNeeded": "boolean to indicate whether the keeper should call performUpkeep or not."
					}
				},
				"performUpkeep(bytes)": {
					"params": {
						"performData": "is the data which was passed back from the checkData simulation."
					}
				}
			},
			"version": 1
		},
		"evm": {
			"bytecode": {
				"object": "0x",
				"sourceMap": ""
			},
			"deployedBytecode": {
				"object": "0x",
				"sourceMap": ""
			},
			"methodIdentifiers": {
				"checkUpkeep(bytes)": "6e04ff0d",
				"performUpkeep(bytes)": "4585e33b"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"params\":{\"checkData\":\"data passed to the contract when checking for upkeep.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"checks if the contract requires work to be done.\"},\"performUpkeep(bytes)\":{\"notice\":\"Performs work on the contract. Executed by the keepers, via the registry.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":\"KeeperCompatibleInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"keccak256\":\"0xc3edbedba5ea6a5acb19cdeef8e37c7515f217445a75679a3c9a369ad7771fc9\",\"urls\":[\"bzz-raw://1024f8c7124cba5bc976c4120d2f4e4bffd688567b620d37cd81391a749ce4d9\",\"dweb:/ipfs/QmVoY9Z1BUr1yU8dkiM2UrrZDrWAXEoFsQ8HXRRzFZTgmn\"]}},\"version\":1}",
		"userdoc": {
			"kind": "user",
			"methods": {
				"checkUpkeep(bytes)": {
					"notice": "checks if the contract requires work to be done."
				},
				"performUpkeep(bytes)": {
					"notice": "Performs work on the contract. Executed by the keepers, via the registry."
				}
			},
			"version": 1
		}
	},
	"sources": {
		"interfaces/KeeperCompatibleInterface.sol": {
			"id": 12
		}
	},
	"sourceCodes": {
		"interfaces/KeeperCompatibleInterface.sol": "pragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n\n  /**\n   * @notice checks if the contract requires work to be done.\n   * @param checkData data passed to the contract when checking for upkeep.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with,\n   * if upkeep is needed.\n   */\n  function checkUpkeep(\n    bytes calldata checkData\n  )\n    external\n    returns (\n      bool upkeepNeeded,\n      bytes memory performData\n    );\n\n  /**\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\n   * @param performData is the data which was passed back from the checkData\n   * simulation.\n   */\n  function performUpkeep(\n    bytes calldata performData\n  ) external;\n}\n"
	},
	"sourceTreeHashHex": "0xc3edbedba5ea6a5acb19cdeef8e37c7515f217445a75679a3c9a369ad7771fc9",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.8.3+commit.8d00100c.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"metadata": {
				"bytecodeHash": "none"
			},
			"remappings": []
		}
	},
	"chains": {}
}