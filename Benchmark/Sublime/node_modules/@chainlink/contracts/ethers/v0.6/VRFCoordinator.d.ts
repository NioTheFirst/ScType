/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface VRFCoordinatorInterface extends Interface {
  functions: {
    PRESEED_OFFSET: TypedFunctionDescription<{ encode([]: []): string }>;

    PROOF_LENGTH: TypedFunctionDescription<{ encode([]: []): string }>;

    PUBLIC_KEY_OFFSET: TypedFunctionDescription<{ encode([]: []): string }>;

    callbacks: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    fulfillRandomnessRequest: TypedFunctionDescription<{
      encode([_proof]: [Arrayish]): string;
    }>;

    hashOfKey: TypedFunctionDescription<{
      encode([_publicKey]: [BigNumberish[]]): string;
    }>;

    isOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    onTokenTransfer: TypedFunctionDescription<{
      encode([_sender, _fee, _data]: [string, BigNumberish, Arrayish]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    registerProvingKey: TypedFunctionDescription<{
      encode([_fee, _oracle, _publicProvingKey, _jobID]: [
        BigNumberish,
        string,
        BigNumberish[],
        Arrayish
      ]): string;
    }>;

    serviceAgreements: TypedFunctionDescription<{
      encode([]: [Arrayish]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([_recipient, _amount]: [string, BigNumberish]): string;
    }>;

    withdrawableTokens: TypedFunctionDescription<{
      encode([]: [string]): string;
    }>;
  };

  events: {
    NewServiceAgreement: TypedEventDescription<{
      encodeTopics([keyHash, fee]: [null, null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    RandomnessRequest: TypedEventDescription<{
      encodeTopics([keyHash, seed, jobID, sender, fee, requestID]: [
        null,
        null,
        Arrayish | null,
        null,
        null,
        null
      ]): string[];
    }>;

    RandomnessRequestFulfilled: TypedEventDescription<{
      encodeTopics([requestId, output]: [null, null]): string[];
    }>;
  };
}

export class VRFCoordinator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): VRFCoordinator;
  attach(addressOrName: string): VRFCoordinator;
  deployed(): Promise<VRFCoordinator>;

  on(event: EventFilter | string, listener: Listener): VRFCoordinator;
  once(event: EventFilter | string, listener: Listener): VRFCoordinator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): VRFCoordinator;
  removeAllListeners(eventName: EventFilter | string): VRFCoordinator;
  removeListener(eventName: any, listener: Listener): VRFCoordinator;

  interface: VRFCoordinatorInterface;

  functions: {
    PRESEED_OFFSET(overrides?: TransactionOverrides): Promise<BigNumber>;

    "PRESEED_OFFSET()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    PROOF_LENGTH(overrides?: TransactionOverrides): Promise<BigNumber>;

    "PROOF_LENGTH()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    PUBLIC_KEY_OFFSET(overrides?: TransactionOverrides): Promise<BigNumber>;

    "PUBLIC_KEY_OFFSET()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    callbacks(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, string] & {
        callbackContract: string;
        randomnessFee: BigNumber;
        seedAndBlockNum: string;
      }
    >;

    "callbacks(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, string] & {
        callbackContract: string;
        randomnessFee: BigNumber;
        seedAndBlockNum: string;
      }
    >;

    fulfillRandomnessRequest(
      _proof: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "fulfillRandomnessRequest(bytes)"(
      _proof: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    hashOfKey(
      _publicKey: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<string>;

    "hashOfKey(uint256[2])"(
      _publicKey: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<string>;

    isOwner(overrides?: TransactionOverrides): Promise<boolean>;

    "isOwner()"(overrides?: TransactionOverrides): Promise<boolean>;

    onTokenTransfer(
      _sender: string,
      _fee: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "onTokenTransfer(address,uint256,bytes)"(
      _sender: string,
      _fee: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    registerProvingKey(
      _fee: BigNumberish,
      _oracle: string,
      _publicProvingKey: BigNumberish[],
      _jobID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "registerProvingKey(uint256,address,uint256[2],bytes32)"(
      _fee: BigNumberish,
      _oracle: string,
      _publicProvingKey: BigNumberish[],
      _jobID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    serviceAgreements(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, string] & {
        vRFOracle: string;
        fee: BigNumber;
        jobID: string;
      }
    >;

    "serviceAgreements(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<
      [string, BigNumber, string] & {
        vRFOracle: string;
        fee: BigNumber;
        jobID: string;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawableTokens(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdrawableTokens(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };

  PRESEED_OFFSET(overrides?: TransactionOverrides): Promise<BigNumber>;

  "PRESEED_OFFSET()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  PROOF_LENGTH(overrides?: TransactionOverrides): Promise<BigNumber>;

  "PROOF_LENGTH()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  PUBLIC_KEY_OFFSET(overrides?: TransactionOverrides): Promise<BigNumber>;

  "PUBLIC_KEY_OFFSET()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  callbacks(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, string] & {
      callbackContract: string;
      randomnessFee: BigNumber;
      seedAndBlockNum: string;
    }
  >;

  "callbacks(bytes32)"(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, string] & {
      callbackContract: string;
      randomnessFee: BigNumber;
      seedAndBlockNum: string;
    }
  >;

  fulfillRandomnessRequest(
    _proof: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "fulfillRandomnessRequest(bytes)"(
    _proof: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  hashOfKey(
    _publicKey: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<string>;

  "hashOfKey(uint256[2])"(
    _publicKey: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<string>;

  isOwner(overrides?: TransactionOverrides): Promise<boolean>;

  "isOwner()"(overrides?: TransactionOverrides): Promise<boolean>;

  onTokenTransfer(
    _sender: string,
    _fee: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "onTokenTransfer(address,uint256,bytes)"(
    _sender: string,
    _fee: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  registerProvingKey(
    _fee: BigNumberish,
    _oracle: string,
    _publicProvingKey: BigNumberish[],
    _jobID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "registerProvingKey(uint256,address,uint256[2],bytes32)"(
    _fee: BigNumberish,
    _oracle: string,
    _publicProvingKey: BigNumberish[],
    _jobID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  serviceAgreements(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, string] & {
      vRFOracle: string;
      fee: BigNumber;
      jobID: string;
    }
  >;

  "serviceAgreements(bytes32)"(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<
    [string, BigNumber, string] & {
      vRFOracle: string;
      fee: BigNumber;
      jobID: string;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawableTokens(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "withdrawableTokens(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  filters: {
    NewServiceAgreement(keyHash: null, fee: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RandomnessRequest(
      keyHash: null,
      seed: null,
      jobID: Arrayish | null,
      sender: null,
      fee: null,
      requestID: null
    ): EventFilter;

    RandomnessRequestFulfilled(requestId: null, output: null): EventFilter;
  };

  estimate: {
    PRESEED_OFFSET(overrides?: TransactionOverrides): Promise<BigNumber>;

    "PRESEED_OFFSET()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    PROOF_LENGTH(overrides?: TransactionOverrides): Promise<BigNumber>;

    "PROOF_LENGTH()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    PUBLIC_KEY_OFFSET(overrides?: TransactionOverrides): Promise<BigNumber>;

    "PUBLIC_KEY_OFFSET()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    callbacks(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "callbacks(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    fulfillRandomnessRequest(
      _proof: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "fulfillRandomnessRequest(bytes)"(
      _proof: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    hashOfKey(
      _publicKey: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "hashOfKey(uint256[2])"(
      _publicKey: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    onTokenTransfer(
      _sender: string,
      _fee: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "onTokenTransfer(address,uint256,bytes)"(
      _sender: string,
      _fee: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    registerProvingKey(
      _fee: BigNumberish,
      _oracle: string,
      _publicProvingKey: BigNumberish[],
      _jobID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "registerProvingKey(uint256,address,uint256[2],bytes32)"(
      _fee: BigNumberish,
      _oracle: string,
      _publicProvingKey: BigNumberish[],
      _jobID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    serviceAgreements(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "serviceAgreements(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdraw(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdrawableTokens(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdrawableTokens(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
