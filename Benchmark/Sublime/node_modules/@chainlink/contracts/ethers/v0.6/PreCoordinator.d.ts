/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface PreCoordinatorInterface extends Interface {
  functions: {
    cancelOracleRequest: TypedFunctionDescription<{
      encode([_requestId, _payment, _callbackFunctionId, _expiration]: [
        Arrayish,
        BigNumberish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    chainlinkCallback: TypedFunctionDescription<{
      encode([_requestId, _data]: [Arrayish, BigNumberish]): string;
    }>;

    createServiceAgreement: TypedFunctionDescription<{
      encode([_minResponses, _oracles, _jobIds, _payments]: [
        BigNumberish,
        string[],
        Arrayish[],
        BigNumberish[]
      ]): string;
    }>;

    getChainlinkToken: TypedFunctionDescription<{ encode([]: []): string }>;

    getServiceAgreement: TypedFunctionDescription<{
      encode([_saId]: [Arrayish]): string;
    }>;

    isOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    onTokenTransfer: TypedFunctionDescription<{
      encode([_sender, _amount, _data]: [
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    oracleRequest: TypedFunctionDescription<{
      encode([
        _sender,
        _payment,
        _saId,
        _callbackAddress,
        _callbackFunctionId,
        _nonce,
        ,
        _data,
      ]: [
        string,
        BigNumberish,
        Arrayish,
        string,
        Arrayish,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    withdrawLink: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    ChainlinkCancelled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkFulfilled: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    ChainlinkRequested: TypedEventDescription<{
      encodeTopics([id]: [Arrayish | null]): string[];
    }>;

    NewServiceAgreement: TypedEventDescription<{
      encodeTopics([saId, payment, minresponses]: [
        Arrayish | null,
        null,
        null
      ]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    ServiceAgreementAnswerUpdated: TypedEventDescription<{
      encodeTopics([saId, requestId, answer]: [
        Arrayish | null,
        Arrayish | null,
        null
      ]): string[];
    }>;

    ServiceAgreementDeleted: TypedEventDescription<{
      encodeTopics([saId]: [Arrayish | null]): string[];
    }>;

    ServiceAgreementRequested: TypedEventDescription<{
      encodeTopics([saId, requestId, payment]: [
        Arrayish | null,
        Arrayish | null,
        null
      ]): string[];
    }>;

    ServiceAgreementResponseReceived: TypedEventDescription<{
      encodeTopics([saId, requestId, oracle, answer]: [
        Arrayish | null,
        Arrayish | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class PreCoordinator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PreCoordinator;
  attach(addressOrName: string): PreCoordinator;
  deployed(): Promise<PreCoordinator>;

  on(event: EventFilter | string, listener: Listener): PreCoordinator;
  once(event: EventFilter | string, listener: Listener): PreCoordinator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): PreCoordinator;
  removeAllListeners(eventName: EventFilter | string): PreCoordinator;
  removeListener(eventName: any, listener: Listener): PreCoordinator;

  interface: PreCoordinatorInterface;

  functions: {
    cancelOracleRequest(
      _requestId: Arrayish,
      _payment: BigNumberish,
      _callbackFunctionId: Arrayish,
      _expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "cancelOracleRequest(bytes32,uint256,bytes4,uint256)"(
      _requestId: Arrayish,
      _payment: BigNumberish,
      _callbackFunctionId: Arrayish,
      _expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    chainlinkCallback(
      _requestId: Arrayish,
      _data: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "chainlinkCallback(bytes32,int256)"(
      _requestId: Arrayish,
      _data: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    createServiceAgreement(
      _minResponses: BigNumberish,
      _oracles: string[],
      _jobIds: Arrayish[],
      _payments: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "createServiceAgreement(uint256,address[],bytes32[],uint256[])"(
      _minResponses: BigNumberish,
      _oracles: string[],
      _jobIds: Arrayish[],
      _payments: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getChainlinkToken(overrides?: TransactionOverrides): Promise<string>;

    "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<string>;

    getServiceAgreement(
      _saId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, string[], string[], BigNumber[]] & {
        totalPayment: BigNumber;
        minResponses: BigNumber;
        oracles: string[];
        jobIds: string[];
        payments: BigNumber[];
      }
    >;

    "getServiceAgreement(bytes32)"(
      _saId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, string[], string[], BigNumber[]] & {
        totalPayment: BigNumber;
        minResponses: BigNumber;
        oracles: string[];
        jobIds: string[];
        payments: BigNumber[];
      }
    >;

    isOwner(overrides?: TransactionOverrides): Promise<boolean>;

    "isOwner()"(overrides?: TransactionOverrides): Promise<boolean>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "onTokenTransfer(address,uint256,bytes)"(
      _sender: string,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    oracleRequest(
      _sender: string,
      _payment: BigNumberish,
      _saId: Arrayish,
      _callbackAddress: string,
      _callbackFunctionId: Arrayish,
      _nonce: BigNumberish,
      arg6: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)"(
      _sender: string,
      _payment: BigNumberish,
      _saId: Arrayish,
      _callbackAddress: string,
      _callbackFunctionId: Arrayish,
      _nonce: BigNumberish,
      arg6: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawLink(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "withdrawLink()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  cancelOracleRequest(
    _requestId: Arrayish,
    _payment: BigNumberish,
    _callbackFunctionId: Arrayish,
    _expiration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "cancelOracleRequest(bytes32,uint256,bytes4,uint256)"(
    _requestId: Arrayish,
    _payment: BigNumberish,
    _callbackFunctionId: Arrayish,
    _expiration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  chainlinkCallback(
    _requestId: Arrayish,
    _data: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "chainlinkCallback(bytes32,int256)"(
    _requestId: Arrayish,
    _data: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  createServiceAgreement(
    _minResponses: BigNumberish,
    _oracles: string[],
    _jobIds: Arrayish[],
    _payments: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "createServiceAgreement(uint256,address[],bytes32[],uint256[])"(
    _minResponses: BigNumberish,
    _oracles: string[],
    _jobIds: Arrayish[],
    _payments: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getChainlinkToken(overrides?: TransactionOverrides): Promise<string>;

  "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<string>;

  getServiceAgreement(
    _saId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, string[], string[], BigNumber[]] & {
      totalPayment: BigNumber;
      minResponses: BigNumber;
      oracles: string[];
      jobIds: string[];
      payments: BigNumber[];
    }
  >;

  "getServiceAgreement(bytes32)"(
    _saId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, string[], string[], BigNumber[]] & {
      totalPayment: BigNumber;
      minResponses: BigNumber;
      oracles: string[];
      jobIds: string[];
      payments: BigNumber[];
    }
  >;

  isOwner(overrides?: TransactionOverrides): Promise<boolean>;

  "isOwner()"(overrides?: TransactionOverrides): Promise<boolean>;

  onTokenTransfer(
    _sender: string,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "onTokenTransfer(address,uint256,bytes)"(
    _sender: string,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  oracleRequest(
    _sender: string,
    _payment: BigNumberish,
    _saId: Arrayish,
    _callbackAddress: string,
    _callbackFunctionId: Arrayish,
    _nonce: BigNumberish,
    arg6: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)"(
    _sender: string,
    _payment: BigNumberish,
    _saId: Arrayish,
    _callbackAddress: string,
    _callbackFunctionId: Arrayish,
    _nonce: BigNumberish,
    arg6: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawLink(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "withdrawLink()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ChainlinkCancelled(id: Arrayish | null): EventFilter;

    ChainlinkFulfilled(id: Arrayish | null): EventFilter;

    ChainlinkRequested(id: Arrayish | null): EventFilter;

    NewServiceAgreement(
      saId: Arrayish | null,
      payment: null,
      minresponses: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ServiceAgreementAnswerUpdated(
      saId: Arrayish | null,
      requestId: Arrayish | null,
      answer: null
    ): EventFilter;

    ServiceAgreementDeleted(saId: Arrayish | null): EventFilter;

    ServiceAgreementRequested(
      saId: Arrayish | null,
      requestId: Arrayish | null,
      payment: null
    ): EventFilter;

    ServiceAgreementResponseReceived(
      saId: Arrayish | null,
      requestId: Arrayish | null,
      oracle: string | null,
      answer: null
    ): EventFilter;
  };

  estimate: {
    cancelOracleRequest(
      _requestId: Arrayish,
      _payment: BigNumberish,
      _callbackFunctionId: Arrayish,
      _expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "cancelOracleRequest(bytes32,uint256,bytes4,uint256)"(
      _requestId: Arrayish,
      _payment: BigNumberish,
      _callbackFunctionId: Arrayish,
      _expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    chainlinkCallback(
      _requestId: Arrayish,
      _data: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "chainlinkCallback(bytes32,int256)"(
      _requestId: Arrayish,
      _data: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    createServiceAgreement(
      _minResponses: BigNumberish,
      _oracles: string[],
      _jobIds: Arrayish[],
      _payments: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "createServiceAgreement(uint256,address[],bytes32[],uint256[])"(
      _minResponses: BigNumberish,
      _oracles: string[],
      _jobIds: Arrayish[],
      _payments: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getChainlinkToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getServiceAgreement(
      _saId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getServiceAgreement(bytes32)"(
      _saId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "onTokenTransfer(address,uint256,bytes)"(
      _sender: string,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    oracleRequest(
      _sender: string,
      _payment: BigNumberish,
      _saId: Arrayish,
      _callbackAddress: string,
      _callbackFunctionId: Arrayish,
      _nonce: BigNumberish,
      arg6: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)"(
      _sender: string,
      _payment: BigNumberish,
      _saId: Arrayish,
      _callbackAddress: string,
      _callbackFunctionId: Arrayish,
      _nonce: BigNumberish,
      arg6: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdrawLink(overrides?: TransactionOverrides): Promise<BigNumber>;

    "withdrawLink()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };
}
