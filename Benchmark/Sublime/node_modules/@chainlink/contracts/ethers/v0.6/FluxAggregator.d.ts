/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface FluxAggregatorInterface extends Interface {
  functions: {
    acceptAdmin: TypedFunctionDescription<{
      encode([_oracle]: [string]): string;
    }>;

    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    allocatedFunds: TypedFunctionDescription<{ encode([]: []): string }>;

    availableFunds: TypedFunctionDescription<{ encode([]: []): string }>;

    changeOracles: TypedFunctionDescription<{
      encode([
        _removed,
        _added,
        _addedAdmins,
        _minSubmissions,
        _maxSubmissions,
        _restartDelay,
      ]: [
        string[],
        string[],
        string[],
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    description: TypedFunctionDescription<{ encode([]: []): string }>;

    getAdmin: TypedFunctionDescription<{ encode([_oracle]: [string]): string }>;

    getAnswer: TypedFunctionDescription<{
      encode([_roundId]: [BigNumberish]): string;
    }>;

    getOracles: TypedFunctionDescription<{ encode([]: []): string }>;

    getRoundData: TypedFunctionDescription<{
      encode([_roundId]: [BigNumberish]): string;
    }>;

    getTimestamp: TypedFunctionDescription<{
      encode([_roundId]: [BigNumberish]): string;
    }>;

    latestAnswer: TypedFunctionDescription<{ encode([]: []): string }>;

    latestRound: TypedFunctionDescription<{ encode([]: []): string }>;

    latestRoundData: TypedFunctionDescription<{ encode([]: []): string }>;

    latestTimestamp: TypedFunctionDescription<{ encode([]: []): string }>;

    linkToken: TypedFunctionDescription<{ encode([]: []): string }>;

    maxSubmissionCount: TypedFunctionDescription<{ encode([]: []): string }>;

    maxSubmissionValue: TypedFunctionDescription<{ encode([]: []): string }>;

    minSubmissionCount: TypedFunctionDescription<{ encode([]: []): string }>;

    minSubmissionValue: TypedFunctionDescription<{ encode([]: []): string }>;

    onTokenTransfer: TypedFunctionDescription<{
      encode([, , _data]: [string, BigNumberish, Arrayish]): string;
    }>;

    oracleCount: TypedFunctionDescription<{ encode([]: []): string }>;

    oracleRoundState: TypedFunctionDescription<{
      encode([_oracle, _queriedRoundId]: [string, BigNumberish]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    paymentAmount: TypedFunctionDescription<{ encode([]: []): string }>;

    requestNewRound: TypedFunctionDescription<{ encode([]: []): string }>;

    restartDelay: TypedFunctionDescription<{ encode([]: []): string }>;

    setRequesterPermissions: TypedFunctionDescription<{
      encode([_requester, _authorized, _delay]: [
        string,
        boolean,
        BigNumberish
      ]): string;
    }>;

    setValidator: TypedFunctionDescription<{
      encode([_newValidator]: [string]): string;
    }>;

    submit: TypedFunctionDescription<{
      encode([_roundId, _submission]: [BigNumberish, BigNumberish]): string;
    }>;

    timeout: TypedFunctionDescription<{ encode([]: []): string }>;

    transferAdmin: TypedFunctionDescription<{
      encode([_oracle, _newAdmin]: [string, string]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_to]: [string]): string;
    }>;

    updateAvailableFunds: TypedFunctionDescription<{ encode([]: []): string }>;

    updateFutureRounds: TypedFunctionDescription<{
      encode([
        _paymentAmount,
        _minSubmissions,
        _maxSubmissions,
        _restartDelay,
        _timeout,
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    validator: TypedFunctionDescription<{ encode([]: []): string }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;

    withdrawFunds: TypedFunctionDescription<{
      encode([_recipient, _amount]: [string, BigNumberish]): string;
    }>;

    withdrawPayment: TypedFunctionDescription<{
      encode([_oracle, _recipient, _amount]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    withdrawablePayment: TypedFunctionDescription<{
      encode([_oracle]: [string]): string;
    }>;
  };

  events: {
    AnswerUpdated: TypedEventDescription<{
      encodeTopics([current, roundId, updatedAt]: [
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    AvailableFundsUpdated: TypedEventDescription<{
      encodeTopics([amount]: [BigNumberish | null]): string[];
    }>;

    NewRound: TypedEventDescription<{
      encodeTopics([roundId, startedBy, startedAt]: [
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;

    OracleAdminUpdateRequested: TypedEventDescription<{
      encodeTopics([oracle, admin, newAdmin]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    OracleAdminUpdated: TypedEventDescription<{
      encodeTopics([oracle, newAdmin]: [
        string | null,
        string | null
      ]): string[];
    }>;

    OraclePermissionsUpdated: TypedEventDescription<{
      encodeTopics([oracle, whitelisted]: [
        string | null,
        boolean | null
      ]): string[];
    }>;

    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    RequesterPermissionsSet: TypedEventDescription<{
      encodeTopics([requester, authorized, delay]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    RoundDetailsUpdated: TypedEventDescription<{
      encodeTopics([
        paymentAmount,
        minSubmissionCount,
        maxSubmissionCount,
        restartDelay,
        timeout,
      ]: [
        BigNumberish | null,
        BigNumberish | null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    SubmissionReceived: TypedEventDescription<{
      encodeTopics([submission, round, oracle]: [
        BigNumberish | null,
        BigNumberish | null,
        string | null
      ]): string[];
    }>;

    ValidatorUpdated: TypedEventDescription<{
      encodeTopics([previous, current]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class FluxAggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): FluxAggregator;
  attach(addressOrName: string): FluxAggregator;
  deployed(): Promise<FluxAggregator>;

  on(event: EventFilter | string, listener: Listener): FluxAggregator;
  once(event: EventFilter | string, listener: Listener): FluxAggregator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): FluxAggregator;
  removeAllListeners(eventName: EventFilter | string): FluxAggregator;
  removeListener(eventName: any, listener: Listener): FluxAggregator;

  interface: FluxAggregatorInterface;

  functions: {
    acceptAdmin(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "acceptAdmin(address)"(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    allocatedFunds(overrides?: TransactionOverrides): Promise<BigNumber>;

    "allocatedFunds()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    availableFunds(overrides?: TransactionOverrides): Promise<BigNumber>;

    "availableFunds()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    changeOracles(
      _removed: string[],
      _added: string[],
      _addedAdmins: string[],
      _minSubmissions: BigNumberish,
      _maxSubmissions: BigNumberish,
      _restartDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "changeOracles(address[],address[],address[],uint32,uint32,uint32)"(
      _removed: string[],
      _added: string[],
      _addedAdmins: string[],
      _minSubmissions: BigNumberish,
      _maxSubmissions: BigNumberish,
      _restartDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: TransactionOverrides): Promise<number>;

    "decimals()"(overrides?: TransactionOverrides): Promise<number>;

    description(overrides?: TransactionOverrides): Promise<string>;

    "description()"(overrides?: TransactionOverrides): Promise<string>;

    getAdmin(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getAdmin(address)"(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getAnswer(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getAnswer(uint256)"(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getOracles(overrides?: TransactionOverrides): Promise<string[]>;

    "getOracles()"(overrides?: TransactionOverrides): Promise<string[]>;

    getRoundData(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    "getRoundData(uint80)"(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getTimestamp(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTimestamp(uint256)"(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    latestAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestRound(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestRound()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestRoundData(
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    "latestRoundData()"(
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    latestTimestamp(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestTimestamp()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    linkToken(overrides?: TransactionOverrides): Promise<string>;

    "linkToken()"(overrides?: TransactionOverrides): Promise<string>;

    maxSubmissionCount(overrides?: TransactionOverrides): Promise<number>;

    "maxSubmissionCount()"(overrides?: TransactionOverrides): Promise<number>;

    maxSubmissionValue(overrides?: TransactionOverrides): Promise<BigNumber>;

    "maxSubmissionValue()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    minSubmissionCount(overrides?: TransactionOverrides): Promise<number>;

    "minSubmissionCount()"(overrides?: TransactionOverrides): Promise<number>;

    minSubmissionValue(overrides?: TransactionOverrides): Promise<BigNumber>;

    "minSubmissionValue()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    onTokenTransfer(
      arg0: string,
      arg1: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "onTokenTransfer(address,uint256,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    oracleCount(overrides?: TransactionOverrides): Promise<number>;

    "oracleCount()"(overrides?: TransactionOverrides): Promise<number>;

    oracleRoundState(
      _oracle: string,
      _queriedRoundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        boolean,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        _eligibleToSubmit: boolean;
        _roundId: number;
        _latestSubmission: BigNumber;
        _startedAt: BigNumber;
        _timeout: BigNumber;
        _availableFunds: BigNumber;
        _oracleCount: number;
        _paymentAmount: BigNumber;
      }
    >;

    "oracleRoundState(address,uint32)"(
      _oracle: string,
      _queriedRoundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [
        boolean,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        _eligibleToSubmit: boolean;
        _roundId: number;
        _latestSubmission: BigNumber;
        _startedAt: BigNumber;
        _timeout: BigNumber;
        _availableFunds: BigNumber;
        _oracleCount: number;
        _paymentAmount: BigNumber;
      }
    >;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    paymentAmount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "paymentAmount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    requestNewRound(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "requestNewRound()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    restartDelay(overrides?: TransactionOverrides): Promise<number>;

    "restartDelay()"(overrides?: TransactionOverrides): Promise<number>;

    setRequesterPermissions(
      _requester: string,
      _authorized: boolean,
      _delay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setRequesterPermissions(address,bool,uint32)"(
      _requester: string,
      _authorized: boolean,
      _delay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setValidator(
      _newValidator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setValidator(address)"(
      _newValidator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submit(
      _roundId: BigNumberish,
      _submission: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "submit(uint256,int256)"(
      _roundId: BigNumberish,
      _submission: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    timeout(overrides?: TransactionOverrides): Promise<number>;

    "timeout()"(overrides?: TransactionOverrides): Promise<number>;

    transferAdmin(
      _oracle: string,
      _newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferAdmin(address,address)"(
      _oracle: string,
      _newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateAvailableFunds(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "updateAvailableFunds()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateFutureRounds(
      _paymentAmount: BigNumberish,
      _minSubmissions: BigNumberish,
      _maxSubmissions: BigNumberish,
      _restartDelay: BigNumberish,
      _timeout: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "updateFutureRounds(uint128,uint32,uint32,uint32,uint32)"(
      _paymentAmount: BigNumberish,
      _minSubmissions: BigNumberish,
      _maxSubmissions: BigNumberish,
      _restartDelay: BigNumberish,
      _timeout: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    validator(overrides?: TransactionOverrides): Promise<string>;

    "validator()"(overrides?: TransactionOverrides): Promise<string>;

    version(overrides?: TransactionOverrides): Promise<BigNumber>;

    "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "withdrawFunds(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawPayment(
      _oracle: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "withdrawPayment(address,address,uint256)"(
      _oracle: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawablePayment(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdrawablePayment(address)"(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };

  acceptAdmin(
    _oracle: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "acceptAdmin(address)"(
    _oracle: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  allocatedFunds(overrides?: TransactionOverrides): Promise<BigNumber>;

  "allocatedFunds()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  availableFunds(overrides?: TransactionOverrides): Promise<BigNumber>;

  "availableFunds()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  changeOracles(
    _removed: string[],
    _added: string[],
    _addedAdmins: string[],
    _minSubmissions: BigNumberish,
    _maxSubmissions: BigNumberish,
    _restartDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "changeOracles(address[],address[],address[],uint32,uint32,uint32)"(
    _removed: string[],
    _added: string[],
    _addedAdmins: string[],
    _minSubmissions: BigNumberish,
    _maxSubmissions: BigNumberish,
    _restartDelay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: TransactionOverrides): Promise<number>;

  "decimals()"(overrides?: TransactionOverrides): Promise<number>;

  description(overrides?: TransactionOverrides): Promise<string>;

  "description()"(overrides?: TransactionOverrides): Promise<string>;

  getAdmin(_oracle: string, overrides?: TransactionOverrides): Promise<string>;

  "getAdmin(address)"(
    _oracle: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getAnswer(
    _roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getAnswer(uint256)"(
    _roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getOracles(overrides?: TransactionOverrides): Promise<string[]>;

  "getOracles()"(overrides?: TransactionOverrides): Promise<string[]>;

  getRoundData(
    _roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  "getRoundData(uint80)"(
    _roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  getTimestamp(
    _roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getTimestamp(uint256)"(
    _roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  latestAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

  "latestAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  latestRound(overrides?: TransactionOverrides): Promise<BigNumber>;

  "latestRound()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  latestRoundData(
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  "latestRoundData()"(
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  latestTimestamp(overrides?: TransactionOverrides): Promise<BigNumber>;

  "latestTimestamp()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  linkToken(overrides?: TransactionOverrides): Promise<string>;

  "linkToken()"(overrides?: TransactionOverrides): Promise<string>;

  maxSubmissionCount(overrides?: TransactionOverrides): Promise<number>;

  "maxSubmissionCount()"(overrides?: TransactionOverrides): Promise<number>;

  maxSubmissionValue(overrides?: TransactionOverrides): Promise<BigNumber>;

  "maxSubmissionValue()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  minSubmissionCount(overrides?: TransactionOverrides): Promise<number>;

  "minSubmissionCount()"(overrides?: TransactionOverrides): Promise<number>;

  minSubmissionValue(overrides?: TransactionOverrides): Promise<BigNumber>;

  "minSubmissionValue()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  onTokenTransfer(
    arg0: string,
    arg1: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "onTokenTransfer(address,uint256,bytes)"(
    arg0: string,
    arg1: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  oracleCount(overrides?: TransactionOverrides): Promise<number>;

  "oracleCount()"(overrides?: TransactionOverrides): Promise<number>;

  oracleRoundState(
    _oracle: string,
    _queriedRoundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      boolean,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber
    ] & {
      _eligibleToSubmit: boolean;
      _roundId: number;
      _latestSubmission: BigNumber;
      _startedAt: BigNumber;
      _timeout: BigNumber;
      _availableFunds: BigNumber;
      _oracleCount: number;
      _paymentAmount: BigNumber;
    }
  >;

  "oracleRoundState(address,uint32)"(
    _oracle: string,
    _queriedRoundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [
      boolean,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber
    ] & {
      _eligibleToSubmit: boolean;
      _roundId: number;
      _latestSubmission: BigNumber;
      _startedAt: BigNumber;
      _timeout: BigNumber;
      _availableFunds: BigNumber;
      _oracleCount: number;
      _paymentAmount: BigNumber;
    }
  >;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  paymentAmount(overrides?: TransactionOverrides): Promise<BigNumber>;

  "paymentAmount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  requestNewRound(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "requestNewRound()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  restartDelay(overrides?: TransactionOverrides): Promise<number>;

  "restartDelay()"(overrides?: TransactionOverrides): Promise<number>;

  setRequesterPermissions(
    _requester: string,
    _authorized: boolean,
    _delay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setRequesterPermissions(address,bool,uint32)"(
    _requester: string,
    _authorized: boolean,
    _delay: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setValidator(
    _newValidator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setValidator(address)"(
    _newValidator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  submit(
    _roundId: BigNumberish,
    _submission: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "submit(uint256,int256)"(
    _roundId: BigNumberish,
    _submission: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  timeout(overrides?: TransactionOverrides): Promise<number>;

  "timeout()"(overrides?: TransactionOverrides): Promise<number>;

  transferAdmin(
    _oracle: string,
    _newAdmin: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferAdmin(address,address)"(
    _oracle: string,
    _newAdmin: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateAvailableFunds(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "updateAvailableFunds()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateFutureRounds(
    _paymentAmount: BigNumberish,
    _minSubmissions: BigNumberish,
    _maxSubmissions: BigNumberish,
    _restartDelay: BigNumberish,
    _timeout: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "updateFutureRounds(uint128,uint32,uint32,uint32,uint32)"(
    _paymentAmount: BigNumberish,
    _minSubmissions: BigNumberish,
    _maxSubmissions: BigNumberish,
    _restartDelay: BigNumberish,
    _timeout: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  validator(overrides?: TransactionOverrides): Promise<string>;

  "validator()"(overrides?: TransactionOverrides): Promise<string>;

  version(overrides?: TransactionOverrides): Promise<BigNumber>;

  "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  withdrawFunds(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "withdrawFunds(address,uint256)"(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawPayment(
    _oracle: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "withdrawPayment(address,address,uint256)"(
    _oracle: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawablePayment(
    _oracle: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "withdrawablePayment(address)"(
    _oracle: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  filters: {
    AnswerUpdated(
      current: BigNumberish | null,
      roundId: BigNumberish | null,
      updatedAt: null
    ): EventFilter;

    AvailableFundsUpdated(amount: BigNumberish | null): EventFilter;

    NewRound(
      roundId: BigNumberish | null,
      startedBy: string | null,
      startedAt: null
    ): EventFilter;

    OracleAdminUpdateRequested(
      oracle: string | null,
      admin: null,
      newAdmin: null
    ): EventFilter;

    OracleAdminUpdated(
      oracle: string | null,
      newAdmin: string | null
    ): EventFilter;

    OraclePermissionsUpdated(
      oracle: string | null,
      whitelisted: boolean | null
    ): EventFilter;

    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransferred(from: string | null, to: string | null): EventFilter;

    RequesterPermissionsSet(
      requester: string | null,
      authorized: null,
      delay: null
    ): EventFilter;

    RoundDetailsUpdated(
      paymentAmount: BigNumberish | null,
      minSubmissionCount: BigNumberish | null,
      maxSubmissionCount: BigNumberish | null,
      restartDelay: null,
      timeout: null
    ): EventFilter;

    SubmissionReceived(
      submission: BigNumberish | null,
      round: BigNumberish | null,
      oracle: string | null
    ): EventFilter;

    ValidatorUpdated(
      previous: string | null,
      current: string | null
    ): EventFilter;
  };

  estimate: {
    acceptAdmin(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "acceptAdmin(address)"(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    acceptOwnership(overrides?: TransactionOverrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    allocatedFunds(overrides?: TransactionOverrides): Promise<BigNumber>;

    "allocatedFunds()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    availableFunds(overrides?: TransactionOverrides): Promise<BigNumber>;

    "availableFunds()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    changeOracles(
      _removed: string[],
      _added: string[],
      _addedAdmins: string[],
      _minSubmissions: BigNumberish,
      _maxSubmissions: BigNumberish,
      _restartDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "changeOracles(address[],address[],address[],uint32,uint32,uint32)"(
      _removed: string[],
      _added: string[],
      _addedAdmins: string[],
      _minSubmissions: BigNumberish,
      _maxSubmissions: BigNumberish,
      _restartDelay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: TransactionOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    description(overrides?: TransactionOverrides): Promise<BigNumber>;

    "description()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getAdmin(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getAdmin(address)"(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getAnswer(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getAnswer(uint256)"(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getOracles(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getOracles()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getRoundData(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getRoundData(uint80)"(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getTimestamp(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTimestamp(uint256)"(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    latestAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestRound(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestRound()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestRoundData()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestTimestamp(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestTimestamp()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    linkToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    "linkToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    maxSubmissionCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "maxSubmissionCount()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    maxSubmissionValue(overrides?: TransactionOverrides): Promise<BigNumber>;

    "maxSubmissionValue()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    minSubmissionCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "minSubmissionCount()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    minSubmissionValue(overrides?: TransactionOverrides): Promise<BigNumber>;

    "minSubmissionValue()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    onTokenTransfer(
      arg0: string,
      arg1: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "onTokenTransfer(address,uint256,bytes)"(
      arg0: string,
      arg1: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    oracleCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "oracleCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    oracleRoundState(
      _oracle: string,
      _queriedRoundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "oracleRoundState(address,uint32)"(
      _oracle: string,
      _queriedRoundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    paymentAmount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "paymentAmount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    requestNewRound(overrides?: TransactionOverrides): Promise<BigNumber>;

    "requestNewRound()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    restartDelay(overrides?: TransactionOverrides): Promise<BigNumber>;

    "restartDelay()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    setRequesterPermissions(
      _requester: string,
      _authorized: boolean,
      _delay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setRequesterPermissions(address,bool,uint32)"(
      _requester: string,
      _authorized: boolean,
      _delay: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setValidator(
      _newValidator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setValidator(address)"(
      _newValidator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    submit(
      _roundId: BigNumberish,
      _submission: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "submit(uint256,int256)"(
      _roundId: BigNumberish,
      _submission: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    timeout(overrides?: TransactionOverrides): Promise<BigNumber>;

    "timeout()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transferAdmin(
      _oracle: string,
      _newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferAdmin(address,address)"(
      _oracle: string,
      _newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    updateAvailableFunds(overrides?: TransactionOverrides): Promise<BigNumber>;

    "updateAvailableFunds()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    updateFutureRounds(
      _paymentAmount: BigNumberish,
      _minSubmissions: BigNumberish,
      _maxSubmissions: BigNumberish,
      _restartDelay: BigNumberish,
      _timeout: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "updateFutureRounds(uint128,uint32,uint32,uint32,uint32)"(
      _paymentAmount: BigNumberish,
      _minSubmissions: BigNumberish,
      _maxSubmissions: BigNumberish,
      _restartDelay: BigNumberish,
      _timeout: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    validator(overrides?: TransactionOverrides): Promise<BigNumber>;

    "validator()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    version(overrides?: TransactionOverrides): Promise<BigNumber>;

    "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdrawFunds(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdrawPayment(
      _oracle: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdrawPayment(address,address,uint256)"(
      _oracle: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdrawablePayment(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdrawablePayment(address)"(
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
