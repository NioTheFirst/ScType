/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface SimpleReadAccessControllerInterface extends Interface {
  functions: {
    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    addAccess: TypedFunctionDescription<{ encode([_user]: [string]): string }>;

    checkEnabled: TypedFunctionDescription<{ encode([]: []): string }>;

    disableAccessCheck: TypedFunctionDescription<{ encode([]: []): string }>;

    enableAccessCheck: TypedFunctionDescription<{ encode([]: []): string }>;

    hasAccess: TypedFunctionDescription<{
      encode([_user, _calldata]: [string, Arrayish]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    removeAccess: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_to]: [string]): string;
    }>;
  };

  events: {
    AddedAccess: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    CheckAccessDisabled: TypedEventDescription<{
      encodeTopics([]: []): string[];
    }>;

    CheckAccessEnabled: TypedEventDescription<{
      encodeTopics([]: []): string[];
    }>;

    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    RemovedAccess: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;
  };
}

export class SimpleReadAccessController extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): SimpleReadAccessController;
  attach(addressOrName: string): SimpleReadAccessController;
  deployed(): Promise<SimpleReadAccessController>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): SimpleReadAccessController;
  once(
    event: EventFilter | string,
    listener: Listener
  ): SimpleReadAccessController;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): SimpleReadAccessController;
  removeAllListeners(
    eventName: EventFilter | string
  ): SimpleReadAccessController;
  removeListener(
    eventName: any,
    listener: Listener
  ): SimpleReadAccessController;

  interface: SimpleReadAccessControllerInterface;

  functions: {
    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addAccess(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addAccess(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    checkEnabled(overrides?: TransactionOverrides): Promise<boolean>;

    "checkEnabled()"(overrides?: TransactionOverrides): Promise<boolean>;

    disableAccessCheck(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "disableAccessCheck()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    enableAccessCheck(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "enableAccessCheck()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    hasAccess(
      _user: string,
      _calldata: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "hasAccess(address,bytes)"(
      _user: string,
      _calldata: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    removeAccess(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "removeAccess(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addAccess(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addAccess(address)"(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  checkEnabled(overrides?: TransactionOverrides): Promise<boolean>;

  "checkEnabled()"(overrides?: TransactionOverrides): Promise<boolean>;

  disableAccessCheck(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "disableAccessCheck()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  enableAccessCheck(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "enableAccessCheck()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  hasAccess(
    _user: string,
    _calldata: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "hasAccess(address,bytes)"(
    _user: string,
    _calldata: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  removeAccess(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "removeAccess(address)"(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AddedAccess(user: null): EventFilter;

    CheckAccessDisabled(): EventFilter;

    CheckAccessEnabled(): EventFilter;

    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransferred(from: string | null, to: string | null): EventFilter;

    RemovedAccess(user: null): EventFilter;
  };

  estimate: {
    acceptOwnership(overrides?: TransactionOverrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    addAccess(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addAccess(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    checkEnabled(overrides?: TransactionOverrides): Promise<BigNumber>;

    "checkEnabled()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    disableAccessCheck(overrides?: TransactionOverrides): Promise<BigNumber>;

    "disableAccessCheck()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    enableAccessCheck(overrides?: TransactionOverrides): Promise<BigNumber>;

    "enableAccessCheck()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    hasAccess(
      _user: string,
      _calldata: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "hasAccess(address,bytes)"(
      _user: string,
      _calldata: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    removeAccess(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "removeAccess(address)"(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
