/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface AuthorizedReceiverInterface extends Interface {
  functions: {
    getAuthorizedSenders: TypedFunctionDescription<{ encode([]: []): string }>;

    isAuthorizedSender: TypedFunctionDescription<{
      encode([sender]: [string]): string;
    }>;

    setAuthorizedSenders: TypedFunctionDescription<{
      encode([senders]: [string[]]): string;
    }>;
  };

  events: {
    AuthorizedSendersChanged: TypedEventDescription<{
      encodeTopics([senders, changedBy]: [null, null]): string[];
    }>;
  };
}

export class AuthorizedReceiver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): AuthorizedReceiver;
  attach(addressOrName: string): AuthorizedReceiver;
  deployed(): Promise<AuthorizedReceiver>;

  on(event: EventFilter | string, listener: Listener): AuthorizedReceiver;
  once(event: EventFilter | string, listener: Listener): AuthorizedReceiver;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): AuthorizedReceiver;
  removeAllListeners(eventName: EventFilter | string): AuthorizedReceiver;
  removeListener(eventName: any, listener: Listener): AuthorizedReceiver;

  interface: AuthorizedReceiverInterface;

  functions: {
    getAuthorizedSenders(overrides?: TransactionOverrides): Promise<string[]>;

    "getAuthorizedSenders()"(
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    isAuthorizedSender(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isAuthorizedSender(address)"(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    setAuthorizedSenders(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAuthorizedSenders(address[])"(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getAuthorizedSenders(overrides?: TransactionOverrides): Promise<string[]>;

  "getAuthorizedSenders()"(overrides?: TransactionOverrides): Promise<string[]>;

  isAuthorizedSender(
    sender: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "isAuthorizedSender(address)"(
    sender: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  setAuthorizedSenders(
    senders: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAuthorizedSenders(address[])"(
    senders: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AuthorizedSendersChanged(senders: null, changedBy: null): EventFilter;
  };

  estimate: {
    getAuthorizedSenders(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getAuthorizedSenders()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isAuthorizedSender(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isAuthorizedSender(address)"(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setAuthorizedSenders(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAuthorizedSenders(address[])"(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
