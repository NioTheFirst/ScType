/// <reference types="node" />
/// <reference types="bn.js" />
import * as t from "io-ts";
export declare function decode<T>(value: unknown, codec: t.Type<T>): T;
export declare const nullable: <T>(codec: t.Type<T, T, unknown>) => t.Type<T | null, T | null, unknown>;
export declare type RpcTransaction = t.TypeOf<typeof rpcTransaction>;
export declare const rpcTransaction: t.TypeC<{
    blockHash: t.Type<Buffer | null, Buffer | null, unknown>;
    blockNumber: t.Type<import("bn.js") | null, import("bn.js") | null, unknown>;
    from: t.Type<Buffer, Buffer, unknown>;
    gas: t.Type<import("bn.js"), import("bn.js"), unknown>;
    gasPrice: t.Type<import("bn.js"), import("bn.js"), unknown>;
    hash: t.Type<Buffer, Buffer, unknown>;
    input: t.Type<Buffer, Buffer, unknown>;
    nonce: t.Type<import("bn.js"), import("bn.js"), unknown>;
    to: t.Type<Buffer | null, Buffer | null, unknown>;
    transactionIndex: t.Type<import("bn.js") | null, import("bn.js") | null, unknown>;
    value: t.Type<import("bn.js"), import("bn.js"), unknown>;
    v: t.Type<import("bn.js"), import("bn.js"), unknown>;
    r: t.Type<import("bn.js"), import("bn.js"), unknown>;
    s: t.Type<import("bn.js"), import("bn.js"), unknown>;
}>;
export declare type RpcBlock = t.TypeOf<typeof rpcBlock>;
export declare const rpcBlock: t.TypeC<{
    transactions: t.ArrayC<t.Type<Buffer, Buffer, unknown>>;
    number: t.Type<import("bn.js") | null, import("bn.js") | null, unknown>;
    hash: t.Type<Buffer | null, Buffer | null, unknown>;
    parentHash: t.Type<Buffer, Buffer, unknown>;
    nonce: t.Type<Buffer, Buffer, unknown>;
    sha3Uncles: t.Type<Buffer, Buffer, unknown>;
    logsBloom: t.Type<Buffer, Buffer, unknown>;
    transactionsRoot: t.Type<Buffer, Buffer, unknown>;
    stateRoot: t.Type<Buffer, Buffer, unknown>;
    receiptsRoot: t.Type<Buffer, Buffer, unknown>;
    miner: t.Type<Buffer, Buffer, unknown>;
    difficulty: t.Type<import("bn.js"), import("bn.js"), unknown>;
    totalDifficulty: t.Type<import("bn.js"), import("bn.js"), unknown>;
    extraData: t.Type<Buffer, Buffer, unknown>;
    size: t.Type<import("bn.js"), import("bn.js"), unknown>;
    gasLimit: t.Type<import("bn.js"), import("bn.js"), unknown>;
    gasUsed: t.Type<import("bn.js"), import("bn.js"), unknown>;
    timestamp: t.Type<import("bn.js"), import("bn.js"), unknown>;
    uncles: t.ArrayC<t.Type<Buffer, Buffer, unknown>>;
    mixHash: t.Type<Buffer, Buffer, unknown>;
}>;
export declare type RpcBlockWithTransactions = t.TypeOf<typeof rpcBlockWithTransactions>;
export declare const rpcBlockWithTransactions: t.TypeC<{
    transactions: t.ArrayC<t.TypeC<{
        blockHash: t.Type<Buffer | null, Buffer | null, unknown>;
        blockNumber: t.Type<import("bn.js") | null, import("bn.js") | null, unknown>;
        from: t.Type<Buffer, Buffer, unknown>;
        gas: t.Type<import("bn.js"), import("bn.js"), unknown>;
        gasPrice: t.Type<import("bn.js"), import("bn.js"), unknown>;
        hash: t.Type<Buffer, Buffer, unknown>;
        input: t.Type<Buffer, Buffer, unknown>;
        nonce: t.Type<import("bn.js"), import("bn.js"), unknown>;
        to: t.Type<Buffer | null, Buffer | null, unknown>;
        transactionIndex: t.Type<import("bn.js") | null, import("bn.js") | null, unknown>;
        value: t.Type<import("bn.js"), import("bn.js"), unknown>;
        v: t.Type<import("bn.js"), import("bn.js"), unknown>;
        r: t.Type<import("bn.js"), import("bn.js"), unknown>;
        s: t.Type<import("bn.js"), import("bn.js"), unknown>;
    }>>;
    number: t.Type<import("bn.js") | null, import("bn.js") | null, unknown>;
    hash: t.Type<Buffer | null, Buffer | null, unknown>;
    parentHash: t.Type<Buffer, Buffer, unknown>;
    nonce: t.Type<Buffer, Buffer, unknown>;
    sha3Uncles: t.Type<Buffer, Buffer, unknown>;
    logsBloom: t.Type<Buffer, Buffer, unknown>;
    transactionsRoot: t.Type<Buffer, Buffer, unknown>;
    stateRoot: t.Type<Buffer, Buffer, unknown>;
    receiptsRoot: t.Type<Buffer, Buffer, unknown>;
    miner: t.Type<Buffer, Buffer, unknown>;
    difficulty: t.Type<import("bn.js"), import("bn.js"), unknown>;
    totalDifficulty: t.Type<import("bn.js"), import("bn.js"), unknown>;
    extraData: t.Type<Buffer, Buffer, unknown>;
    size: t.Type<import("bn.js"), import("bn.js"), unknown>;
    gasLimit: t.Type<import("bn.js"), import("bn.js"), unknown>;
    gasUsed: t.Type<import("bn.js"), import("bn.js"), unknown>;
    timestamp: t.Type<import("bn.js"), import("bn.js"), unknown>;
    uncles: t.ArrayC<t.Type<Buffer, Buffer, unknown>>;
    mixHash: t.Type<Buffer, Buffer, unknown>;
}>;
export declare type RpcLog = t.TypeOf<typeof rpcLog>;
export declare const rpcLog: t.TypeC<{
    transactionIndex: t.Type<import("bn.js") | null, import("bn.js") | null, unknown>;
    transactionHash: t.Type<Buffer | null, Buffer | null, unknown>;
    blockHash: t.Type<Buffer | null, Buffer | null, unknown>;
    blockNumber: t.Type<import("bn.js") | null, import("bn.js") | null, unknown>;
    address: t.Type<Buffer, Buffer, unknown>;
    data: t.Type<Buffer, Buffer, unknown>;
    topics: t.ArrayC<t.Type<Buffer, Buffer, unknown>>;
}>;
export declare type RpcTransactionReceipt = t.TypeOf<typeof rpcTransactionReceipt>;
export declare const rpcTransactionReceipt: t.TypeC<{
    transactionHash: t.Type<Buffer, Buffer, unknown>;
    transactionIndex: t.Type<import("bn.js"), import("bn.js"), unknown>;
    blockHash: t.Type<Buffer, Buffer, unknown>;
    blockNumber: t.Type<import("bn.js"), import("bn.js"), unknown>;
    from: t.Type<Buffer, Buffer, unknown>;
    to: t.Type<Buffer | null, Buffer | null, unknown>;
    cumulativeGasUsed: t.Type<import("bn.js"), import("bn.js"), unknown>;
    gasUsed: t.Type<import("bn.js"), import("bn.js"), unknown>;
    contractAddress: t.Type<Buffer | null, Buffer | null, unknown>;
    logs: t.ArrayC<t.TypeC<{
        transactionIndex: t.Type<import("bn.js") | null, import("bn.js") | null, unknown>;
        transactionHash: t.Type<Buffer | null, Buffer | null, unknown>;
        blockHash: t.Type<Buffer | null, Buffer | null, unknown>;
        blockNumber: t.Type<import("bn.js") | null, import("bn.js") | null, unknown>;
        address: t.Type<Buffer, Buffer, unknown>;
        data: t.Type<Buffer, Buffer, unknown>;
        topics: t.ArrayC<t.Type<Buffer, Buffer, unknown>>;
    }>>;
    logsBloom: t.Type<Buffer, Buffer, unknown>;
    status: t.Type<import("bn.js"), import("bn.js"), unknown>;
}>;
//# sourceMappingURL=types.d.ts.map