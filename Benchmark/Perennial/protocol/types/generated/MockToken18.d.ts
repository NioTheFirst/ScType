/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockToken18Interface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "decimals(address)": FunctionFragment;
    "etherToken()": FunctionFragment;
    "isEther(address)": FunctionFragment;
    "name(address)": FunctionFragment;
    "pull(address,address,uint256)": FunctionFragment;
    "pullTo(address,address,address,uint256)": FunctionFragment;
    "push(address,address,uint256)": FunctionFragment;
    "symbol(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values: [string]): string;
  encodeFunctionData(
    functionFragment: "etherToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isEther", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pull",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pullTo",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "push",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values: [string]): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "etherToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEther", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pullTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "push", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;

  events: {};
}

export class MockToken18 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockToken18Interface;

  functions: {
    "balanceOf(address)"(
      self: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,address)"(
      self: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(self: string, overrides?: CallOverrides): Promise<[number]>;

    etherToken(overrides?: CallOverrides): Promise<[string]>;

    isEther(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    name(self: string, overrides?: CallOverrides): Promise<[string]>;

    pull(
      self: string,
      benefactor: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pullTo(
      self: string,
      benefactor: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "push(address,address,uint256)"(
      self: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "push(address,address)"(
      self: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(self: string, overrides?: CallOverrides): Promise<[string]>;
  };

  "balanceOf(address)"(
    self: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,address)"(
    self: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(self: string, overrides?: CallOverrides): Promise<number>;

  etherToken(overrides?: CallOverrides): Promise<string>;

  isEther(token: string, overrides?: CallOverrides): Promise<boolean>;

  name(self: string, overrides?: CallOverrides): Promise<string>;

  pull(
    self: string,
    benefactor: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pullTo(
    self: string,
    benefactor: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "push(address,address,uint256)"(
    self: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "push(address,address)"(
    self: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(self: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    "balanceOf(address)"(
      self: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      self: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(self: string, overrides?: CallOverrides): Promise<number>;

    etherToken(overrides?: CallOverrides): Promise<string>;

    isEther(token: string, overrides?: CallOverrides): Promise<boolean>;

    name(self: string, overrides?: CallOverrides): Promise<string>;

    pull(
      self: string,
      benefactor: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pullTo(
      self: string,
      benefactor: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "push(address,address,uint256)"(
      self: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "push(address,address)"(
      self: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(self: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    "balanceOf(address)"(
      self: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      self: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(self: string, overrides?: CallOverrides): Promise<BigNumber>;

    etherToken(overrides?: CallOverrides): Promise<BigNumber>;

    isEther(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(self: string, overrides?: CallOverrides): Promise<BigNumber>;

    pull(
      self: string,
      benefactor: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pullTo(
      self: string,
      benefactor: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "push(address,address,uint256)"(
      self: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "push(address,address)"(
      self: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(self: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    "balanceOf(address)"(
      self: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,address)"(
      self: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(
      self: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    etherToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEther(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(
      self: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pull(
      self: string,
      benefactor: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pullTo(
      self: string,
      benefactor: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "push(address,address,uint256)"(
      self: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "push(address,address)"(
      self: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(
      self: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
