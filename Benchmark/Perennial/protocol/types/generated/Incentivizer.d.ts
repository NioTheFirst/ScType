/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IncentivizerInterface extends ethers.utils.Interface {
  functions: {
    "available(uint256)": FunctionFragment;
    "claim(address)": FunctionFragment;
    "claimFee(address[])": FunctionFragment;
    "close(uint256)": FunctionFragment;
    "closed(uint256)": FunctionFragment;
    "create((address,(uint256,uint256),uint256,uint256,uint256,address))": FunctionFragment;
    "end(uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "fee()": FunctionFragment;
    "fees(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "latestVersion(address,uint256)": FunctionFragment;
    "owner(uint256)": FunctionFragment;
    "programInfos(uint256)": FunctionFragment;
    "programsForAt(address,uint256)": FunctionFragment;
    "programsForLength(address)": FunctionFragment;
    "programsPerProduct()": FunctionFragment;
    "settled(address,uint256)": FunctionFragment;
    "sync()": FunctionFragment;
    "syncAccount(address)": FunctionFragment;
    "treasury(uint256)": FunctionFragment;
    "unclaimed(address,uint256)": FunctionFragment;
    "updateFee(uint256)": FunctionFragment;
    "updateProgramsPerProduct(uint256)": FunctionFragment;
    "versionComplete(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "available",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(functionFragment: "claimFee", values: [string[]]): string;
  encodeFunctionData(functionFragment: "close", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "closed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      {
        product: string;
        amount: { maker: BigNumberish; taker: BigNumberish };
        start: BigNumberish;
        duration: BigNumberish;
        grace: BigNumberish;
        token: string;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "end", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "fees", values: [string]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "latestVersion",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "programInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "programsForAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "programsForLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "programsPerProduct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settled",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(functionFragment: "syncAccount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "treasury",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProgramsPerProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "versionComplete",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "programInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "programsForAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "programsForLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "programsPerProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "syncAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unclaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProgramsPerProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionComplete",
    data: BytesLike
  ): Result;

  events: {
    "Claim(address,uint256,uint256)": EventFragment;
    "FeeClaim(address,uint256)": EventFragment;
    "FeeUpdated(uint256)": EventFragment;
    "ProgramClosed(uint256,uint256)": EventFragment;
    "ProgramCompleted(uint256,uint256)": EventFragment;
    "ProgramCreated(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ProgramsPerProductUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProgramClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProgramCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProgramCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProgramsPerProductUpdated"): EventFragment;
}

export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    programId: BigNumber;
    amount: BigNumber;
  }
>;

export type FeeClaimEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export type FeeUpdatedEvent = TypedEvent<[BigNumber] & { newFee: BigNumber }>;

export type ProgramClosedEvent = TypedEvent<
  [BigNumber, BigNumber] & { programId: BigNumber; amount: BigNumber }
>;

export type ProgramCompletedEvent = TypedEvent<
  [BigNumber, BigNumber] & { programId: BigNumber; versionComplete: BigNumber }
>;

export type ProgramCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    programId: BigNumber;
    product: string;
    token: string;
    amountMaker: BigNumber;
    amountTaker: BigNumber;
    start: BigNumber;
    duration: BigNumber;
    grace: BigNumber;
    fee: BigNumber;
  }
>;

export type ProgramsPerProductUpdatedEvent = TypedEvent<
  [BigNumber] & { newProgramsPerProduct: BigNumber }
>;

export class Incentivizer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IncentivizerInterface;

  functions: {
    available(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claim(address)"(
      product: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim(uint256)"(
      programId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFee(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    close(
      programId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closed(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    create(
      info: {
        product: string;
        amount: { maker: BigNumberish; taker: BigNumberish };
        start: BigNumberish;
        duration: BigNumberish;
        grace: BigNumberish;
        token: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    end(
      programId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string] & { result: string }>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    fees(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    latestVersion(
      account: string,
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    programInfos(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber },
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          product: string;
          amount: [BigNumber, BigNumber] & {
            maker: BigNumber;
            taker: BigNumber;
          };
          start: BigNumber;
          duration: BigNumber;
          grace: BigNumber;
          token: string;
        }
      ]
    >;

    programsForAt(
      product: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    programsForLength(
      product: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    programsPerProduct(overrides?: CallOverrides): Promise<[BigNumber]>;

    settled(
      account: string,
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    syncAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    unclaimed(
      account: string,
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProgramsPerProduct(
      newProgramsPerProduct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    versionComplete(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  available(
    programId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claim(address)"(
    product: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim(uint256)"(
    programId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFee(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  close(
    programId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closed(programId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  create(
    info: {
      product: string;
      amount: { maker: BigNumberish; taker: BigNumberish };
      start: BigNumberish;
      duration: BigNumberish;
      grace: BigNumberish;
      token: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  end(
    programId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  fees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    factory_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  latestVersion(
    account: string,
    programId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(programId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  programInfos(
    programId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber },
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      product: string;
      amount: [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber };
      start: BigNumber;
      duration: BigNumber;
      grace: BigNumber;
      token: string;
    }
  >;

  programsForAt(
    product: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  programsForLength(
    product: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  programsPerProduct(overrides?: CallOverrides): Promise<BigNumber>;

  settled(
    account: string,
    programId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sync(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  syncAccount(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(programId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  unclaimed(
    account: string,
    programId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProgramsPerProduct(
    newProgramsPerProduct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  versionComplete(
    programId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    available(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claim(address)"(product: string, overrides?: CallOverrides): Promise<void>;

    "claim(uint256)"(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFee(tokens: string[], overrides?: CallOverrides): Promise<void>;

    close(programId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    closed(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    create(
      info: {
        product: string;
        amount: { maker: BigNumberish; taker: BigNumberish };
        start: BigNumberish;
        duration: BigNumberish;
        grace: BigNumberish;
        token: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    end(programId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    fees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(factory_: string, overrides?: CallOverrides): Promise<void>;

    latestVersion(
      account: string,
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(programId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    programInfos(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber },
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        product: string;
        amount: [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber };
        start: BigNumber;
        duration: BigNumber;
        grace: BigNumber;
        token: string;
      }
    >;

    programsForAt(
      product: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    programsForLength(
      product: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    programsPerProduct(overrides?: CallOverrides): Promise<BigNumber>;

    settled(
      account: string,
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sync(overrides?: CallOverrides): Promise<void>;

    syncAccount(account: string, overrides?: CallOverrides): Promise<void>;

    treasury(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    unclaimed(
      account: string,
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateFee(newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateProgramsPerProduct(
      newProgramsPerProduct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    versionComplete(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Claim(address,uint256,uint256)"(
      account?: string | null,
      programId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; programId: BigNumber; amount: BigNumber }
    >;

    Claim(
      account?: string | null,
      programId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; programId: BigNumber; amount: BigNumber }
    >;

    "FeeClaim(address,uint256)"(
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    FeeClaim(
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    "FeeUpdated(uint256)"(
      newFee?: null
    ): TypedEventFilter<[BigNumber], { newFee: BigNumber }>;

    FeeUpdated(
      newFee?: null
    ): TypedEventFilter<[BigNumber], { newFee: BigNumber }>;

    "ProgramClosed(uint256,uint256)"(
      programId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { programId: BigNumber; amount: BigNumber }
    >;

    ProgramClosed(
      programId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { programId: BigNumber; amount: BigNumber }
    >;

    "ProgramCompleted(uint256,uint256)"(
      programId?: BigNumberish | null,
      versionComplete?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { programId: BigNumber; versionComplete: BigNumber }
    >;

    ProgramCompleted(
      programId?: BigNumberish | null,
      versionComplete?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { programId: BigNumber; versionComplete: BigNumber }
    >;

    "ProgramCreated(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      programId?: BigNumberish | null,
      product?: null,
      token?: null,
      amountMaker?: null,
      amountTaker?: null,
      start?: null,
      duration?: null,
      grace?: null,
      fee?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        programId: BigNumber;
        product: string;
        token: string;
        amountMaker: BigNumber;
        amountTaker: BigNumber;
        start: BigNumber;
        duration: BigNumber;
        grace: BigNumber;
        fee: BigNumber;
      }
    >;

    ProgramCreated(
      programId?: BigNumberish | null,
      product?: null,
      token?: null,
      amountMaker?: null,
      amountTaker?: null,
      start?: null,
      duration?: null,
      grace?: null,
      fee?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        programId: BigNumber;
        product: string;
        token: string;
        amountMaker: BigNumber;
        amountTaker: BigNumber;
        start: BigNumber;
        duration: BigNumber;
        grace: BigNumber;
        fee: BigNumber;
      }
    >;

    "ProgramsPerProductUpdated(uint256)"(
      newProgramsPerProduct?: null
    ): TypedEventFilter<[BigNumber], { newProgramsPerProduct: BigNumber }>;

    ProgramsPerProductUpdated(
      newProgramsPerProduct?: null
    ): TypedEventFilter<[BigNumber], { newProgramsPerProduct: BigNumber }>;
  };

  estimateGas: {
    available(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claim(address)"(
      product: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim(uint256)"(
      programId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFee(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    close(
      programId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closed(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      info: {
        product: string;
        amount: { maker: BigNumberish; taker: BigNumberish };
        start: BigNumberish;
        duration: BigNumberish;
        grace: BigNumberish;
        token: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    end(
      programId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    fees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    latestVersion(
      account: string,
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    programInfos(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    programsForAt(
      product: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    programsForLength(
      product: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    programsPerProduct(overrides?: CallOverrides): Promise<BigNumber>;

    settled(
      account: string,
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    syncAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unclaimed(
      account: string,
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProgramsPerProduct(
      newProgramsPerProduct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    versionComplete(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    available(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claim(address)"(
      product: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim(uint256)"(
      programId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFee(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    close(
      programId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closed(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      info: {
        product: string;
        amount: { maker: BigNumberish; taker: BigNumberish };
        start: BigNumberish;
        duration: BigNumberish;
        grace: BigNumberish;
        token: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    end(
      programId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    latestVersion(
      account: string,
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    programInfos(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    programsForAt(
      product: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    programsForLength(
      product: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    programsPerProduct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settled(
      account: string,
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    syncAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unclaimed(
      account: string,
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProgramsPerProduct(
      newProgramsPerProduct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    versionComplete(
      programId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
