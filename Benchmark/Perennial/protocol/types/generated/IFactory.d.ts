/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IFactoryInterface extends ethers.utils.Interface {
  functions: {
    "allowed(uint256)": FunctionFragment;
    "collateral()": FunctionFragment;
    "controllerFor(address)": FunctionFragment;
    "controllers(uint256)": FunctionFragment;
    "createController(address)": FunctionFragment;
    "createProduct(uint256,address)": FunctionFragment;
    "fee()": FunctionFragment;
    "incentivizer()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "isPaused()": FunctionFragment;
    "isProduct(address)": FunctionFragment;
    "minCollateral()": FunctionFragment;
    "minFundingFee()": FunctionFragment;
    "owner(address)": FunctionFragment;
    "pauser()": FunctionFragment;
    "productBase()": FunctionFragment;
    "treasury(address)": FunctionFragment;
    "updateAllowed(uint256,bool)": FunctionFragment;
    "updateCollateral(address)": FunctionFragment;
    "updateController(uint256,(address,address))": FunctionFragment;
    "updateFee(uint256)": FunctionFragment;
    "updateIncentivizer(address)": FunctionFragment;
    "updateIsPaused(bool)": FunctionFragment;
    "updateMinCollateral(uint256)": FunctionFragment;
    "updateMinFundingFee(uint256)": FunctionFragment;
    "updatePauser(address)": FunctionFragment;
    "updateProductBase(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createProduct",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "incentivizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(functionFragment: "isProduct", values: [string]): string;
  encodeFunctionData(
    functionFragment: "minCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minFundingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values: [string]): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "productBase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateAllowed",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateController",
    values: [BigNumberish, { owner: string; treasury: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIncentivizer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIsPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinFundingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProductBase",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "allowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllerFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incentivizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateIncentivizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProductBase",
    data: BytesLike
  ): Result;

  events: {
    "AllowedUpdated(uint256,bool)": EventFragment;
    "CollateralUpdated(address)": EventFragment;
    "ControllerCreated(uint256,address,address)": EventFragment;
    "ControllerUpdated(uint256,address,address)": EventFragment;
    "FeeUpdated(uint256)": EventFragment;
    "IncentivizerUpdated(address)": EventFragment;
    "IsPausedUpdated(bool)": EventFragment;
    "MinCollateralUpdated(uint256)": EventFragment;
    "MinFundingFeeUpdated(uint256)": EventFragment;
    "PauserUpdated(address)": EventFragment;
    "ProductBaseUpdated(address)": EventFragment;
    "ProductCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentivizerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IsPausedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinCollateralUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinFundingFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductBaseUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductCreated"): EventFragment;
}

export type AllowedUpdatedEvent = TypedEvent<
  [BigNumber, boolean] & { controllerId: BigNumber; allowed: boolean }
>;

export type CollateralUpdatedEvent = TypedEvent<
  [string] & { newCollateral: string }
>;

export type ControllerCreatedEvent = TypedEvent<
  [BigNumber, string, string] & {
    controllerId: BigNumber;
    owner: string;
    treasury: string;
  }
>;

export type ControllerUpdatedEvent = TypedEvent<
  [BigNumber, string, string] & {
    controllerId: BigNumber;
    newOwner: string;
    newTreasury: string;
  }
>;

export type FeeUpdatedEvent = TypedEvent<[BigNumber] & { newFee: BigNumber }>;

export type IncentivizerUpdatedEvent = TypedEvent<
  [string] & { newIncentivizer: string }
>;

export type IsPausedUpdatedEvent = TypedEvent<
  [boolean] & { isPaused: boolean }
>;

export type MinCollateralUpdatedEvent = TypedEvent<
  [BigNumber] & { newMinCollateral: BigNumber }
>;

export type MinFundingFeeUpdatedEvent = TypedEvent<
  [BigNumber] & { newMinFundingFee: BigNumber }
>;

export type PauserUpdatedEvent = TypedEvent<[string] & { pauser: string }>;

export type ProductBaseUpdatedEvent = TypedEvent<
  [string] & { newProductBase: string }
>;

export type ProductCreatedEvent = TypedEvent<
  [string, string] & { product: string; provider: string }
>;

export class IFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IFactoryInterface;

  functions: {
    allowed(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    controllerFor(
      product: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    controllers(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, string] & { owner: string; treasury: string }]>;

    createController(
      controllerTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createProduct(
      controllerId: BigNumberish,
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    incentivizer(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      collateral_: string,
      incentivizer_: string,
      productBase_: string,
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isProduct(product: string, overrides?: CallOverrides): Promise<[boolean]>;

    minCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    minFundingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "owner(address)"(
      product: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    "owner(uint256)"(
      controllerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pauser(overrides?: CallOverrides): Promise<[string]>;

    productBase(overrides?: CallOverrides): Promise<[string]>;

    "treasury(address)"(
      product: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "treasury(uint256)"(
      controllerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "treasury()"(overrides?: CallOverrides): Promise<[string]>;

    updateAllowed(
      controllerId: BigNumberish,
      newAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCollateral(
      newCollateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateController(
      controllerId: BigNumberish,
      newController: { owner: string; treasury: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateIncentivizer(
      newIncentivizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateIsPaused(
      newIsPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinCollateral(
      newMinCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinFundingFee(
      newMinFundingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProductBase(
      newProductBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowed(
    collateralId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  collateral(overrides?: CallOverrides): Promise<string>;

  controllerFor(product: string, overrides?: CallOverrides): Promise<BigNumber>;

  controllers(
    collateralId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { owner: string; treasury: string }>;

  createController(
    controllerTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createProduct(
    controllerId: BigNumberish,
    provider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  incentivizer(overrides?: CallOverrides): Promise<string>;

  initialize(
    collateral_: string,
    incentivizer_: string,
    productBase_: string,
    treasury_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  isProduct(product: string, overrides?: CallOverrides): Promise<boolean>;

  minCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  minFundingFee(overrides?: CallOverrides): Promise<BigNumber>;

  "owner(address)"(product: string, overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  "owner(uint256)"(
    controllerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pauser(overrides?: CallOverrides): Promise<string>;

  productBase(overrides?: CallOverrides): Promise<string>;

  "treasury(address)"(
    product: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "treasury(uint256)"(
    controllerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  updateAllowed(
    controllerId: BigNumberish,
    newAllowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCollateral(
    newCollateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateController(
    controllerId: BigNumberish,
    newController: { owner: string; treasury: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateIncentivizer(
    newIncentivizer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateIsPaused(
    newIsPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinCollateral(
    newMinCollateral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinFundingFee(
    newMinFundingFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePauser(
    newPauser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProductBase(
    newProductBase: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowed(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    collateral(overrides?: CallOverrides): Promise<string>;

    controllerFor(
      product: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controllers(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { owner: string; treasury: string }>;

    createController(
      controllerTreasury: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createProduct(
      controllerId: BigNumberish,
      provider: string,
      overrides?: CallOverrides
    ): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    incentivizer(overrides?: CallOverrides): Promise<string>;

    initialize(
      collateral_: string,
      incentivizer_: string,
      productBase_: string,
      treasury_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    isProduct(product: string, overrides?: CallOverrides): Promise<boolean>;

    minCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    minFundingFee(overrides?: CallOverrides): Promise<BigNumber>;

    "owner(address)"(
      product: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    "owner(uint256)"(
      controllerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pauser(overrides?: CallOverrides): Promise<string>;

    productBase(overrides?: CallOverrides): Promise<string>;

    "treasury(address)"(
      product: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "treasury(uint256)"(
      controllerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;

    updateAllowed(
      controllerId: BigNumberish,
      newAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCollateral(
      newCollateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateController(
      controllerId: BigNumberish,
      newController: { owner: string; treasury: string },
      overrides?: CallOverrides
    ): Promise<void>;

    updateFee(newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateIncentivizer(
      newIncentivizer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIsPaused(
      newIsPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinCollateral(
      newMinCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinFundingFee(
      newMinFundingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePauser(newPauser: string, overrides?: CallOverrides): Promise<void>;

    updateProductBase(
      newProductBase: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AllowedUpdated(uint256,bool)"(
      controllerId?: BigNumberish | null,
      allowed?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { controllerId: BigNumber; allowed: boolean }
    >;

    AllowedUpdated(
      controllerId?: BigNumberish | null,
      allowed?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { controllerId: BigNumber; allowed: boolean }
    >;

    "CollateralUpdated(address)"(
      newCollateral?: null
    ): TypedEventFilter<[string], { newCollateral: string }>;

    CollateralUpdated(
      newCollateral?: null
    ): TypedEventFilter<[string], { newCollateral: string }>;

    "ControllerCreated(uint256,address,address)"(
      controllerId?: BigNumberish | null,
      owner?: null,
      treasury?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { controllerId: BigNumber; owner: string; treasury: string }
    >;

    ControllerCreated(
      controllerId?: BigNumberish | null,
      owner?: null,
      treasury?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { controllerId: BigNumber; owner: string; treasury: string }
    >;

    "ControllerUpdated(uint256,address,address)"(
      controllerId?: BigNumberish | null,
      newOwner?: null,
      newTreasury?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { controllerId: BigNumber; newOwner: string; newTreasury: string }
    >;

    ControllerUpdated(
      controllerId?: BigNumberish | null,
      newOwner?: null,
      newTreasury?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { controllerId: BigNumber; newOwner: string; newTreasury: string }
    >;

    "FeeUpdated(uint256)"(
      newFee?: null
    ): TypedEventFilter<[BigNumber], { newFee: BigNumber }>;

    FeeUpdated(
      newFee?: null
    ): TypedEventFilter<[BigNumber], { newFee: BigNumber }>;

    "IncentivizerUpdated(address)"(
      newIncentivizer?: null
    ): TypedEventFilter<[string], { newIncentivizer: string }>;

    IncentivizerUpdated(
      newIncentivizer?: null
    ): TypedEventFilter<[string], { newIncentivizer: string }>;

    "IsPausedUpdated(bool)"(
      isPaused?: null
    ): TypedEventFilter<[boolean], { isPaused: boolean }>;

    IsPausedUpdated(
      isPaused?: null
    ): TypedEventFilter<[boolean], { isPaused: boolean }>;

    "MinCollateralUpdated(uint256)"(
      newMinCollateral?: null
    ): TypedEventFilter<[BigNumber], { newMinCollateral: BigNumber }>;

    MinCollateralUpdated(
      newMinCollateral?: null
    ): TypedEventFilter<[BigNumber], { newMinCollateral: BigNumber }>;

    "MinFundingFeeUpdated(uint256)"(
      newMinFundingFee?: null
    ): TypedEventFilter<[BigNumber], { newMinFundingFee: BigNumber }>;

    MinFundingFeeUpdated(
      newMinFundingFee?: null
    ): TypedEventFilter<[BigNumber], { newMinFundingFee: BigNumber }>;

    "PauserUpdated(address)"(
      pauser?: null
    ): TypedEventFilter<[string], { pauser: string }>;

    PauserUpdated(
      pauser?: null
    ): TypedEventFilter<[string], { pauser: string }>;

    "ProductBaseUpdated(address)"(
      newProductBase?: null
    ): TypedEventFilter<[string], { newProductBase: string }>;

    ProductBaseUpdated(
      newProductBase?: null
    ): TypedEventFilter<[string], { newProductBase: string }>;

    "ProductCreated(address,address)"(
      product?: string | null,
      provider?: null
    ): TypedEventFilter<
      [string, string],
      { product: string; provider: string }
    >;

    ProductCreated(
      product?: string | null,
      provider?: null
    ): TypedEventFilter<
      [string, string],
      { product: string; provider: string }
    >;
  };

  estimateGas: {
    allowed(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    controllerFor(
      product: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controllers(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createController(
      controllerTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createProduct(
      controllerId: BigNumberish,
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    incentivizer(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      collateral_: string,
      incentivizer_: string,
      productBase_: string,
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isProduct(product: string, overrides?: CallOverrides): Promise<BigNumber>;

    minCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    minFundingFee(overrides?: CallOverrides): Promise<BigNumber>;

    "owner(address)"(
      product: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    "owner(uint256)"(
      controllerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauser(overrides?: CallOverrides): Promise<BigNumber>;

    productBase(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury(address)"(
      product: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "treasury(uint256)"(
      controllerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateAllowed(
      controllerId: BigNumberish,
      newAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCollateral(
      newCollateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateController(
      controllerId: BigNumberish,
      newController: { owner: string; treasury: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateIncentivizer(
      newIncentivizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateIsPaused(
      newIsPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinCollateral(
      newMinCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinFundingFee(
      newMinFundingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProductBase(
      newProductBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowed(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllerFor(
      product: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controllers(
      collateralId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createController(
      controllerTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createProduct(
      controllerId: BigNumberish,
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incentivizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      collateral_: string,
      incentivizer_: string,
      productBase_: string,
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isProduct(
      product: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minFundingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner(address)"(
      product: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner(uint256)"(
      controllerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    productBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury(address)"(
      product: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "treasury(uint256)"(
      controllerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAllowed(
      controllerId: BigNumberish,
      newAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCollateral(
      newCollateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateController(
      controllerId: BigNumberish,
      newController: { owner: string; treasury: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateIncentivizer(
      newIncentivizer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateIsPaused(
      newIsPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinCollateral(
      newMinCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinFundingFee(
      newMinFundingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProductBase(
      newProductBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
