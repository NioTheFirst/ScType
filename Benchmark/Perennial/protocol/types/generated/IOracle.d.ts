/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IOracleInterface extends ethers.utils.Interface {
  functions: {
    "currentVersion()": FunctionFragment;
    "priceAtVersion(uint256)": FunctionFragment;
    "sync()": FunctionFragment;
    "timestampAtVersion(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "currentVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceAtVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timestampAtVersion",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceAtVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timestampAtVersion",
    data: BytesLike
  ): Result;

  events: {
    "Version(uint256,uint256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Version"): EventFragment;
}

export type VersionEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    version: BigNumber;
    timestamp: BigNumber;
    price: BigNumber;
  }
>;

export class IOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IOracleInterface;

  functions: {
    currentVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceAtVersion(
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timestampAtVersion(
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  currentVersion(overrides?: CallOverrides): Promise<BigNumber>;

  priceAtVersion(
    version: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sync(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timestampAtVersion(
    version: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    currentVersion(overrides?: CallOverrides): Promise<BigNumber>;

    priceAtVersion(
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sync(overrides?: CallOverrides): Promise<void>;

    timestampAtVersion(
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Version(uint256,uint256,int256)"(
      version?: null,
      timestamp?: null,
      price?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { version: BigNumber; timestamp: BigNumber; price: BigNumber }
    >;

    Version(
      version?: null,
      timestamp?: null,
      price?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { version: BigNumber; timestamp: BigNumber; price: BigNumber }
    >;
  };

  estimateGas: {
    currentVersion(overrides?: CallOverrides): Promise<BigNumber>;

    priceAtVersion(
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timestampAtVersion(
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceAtVersion(
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timestampAtVersion(
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
