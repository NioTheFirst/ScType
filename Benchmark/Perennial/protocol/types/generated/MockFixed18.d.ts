/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockFixed18Interface extends ethers.utils.Interface {
  functions: {
    "abs(int256)": FunctionFragment;
    "add(int256,int256)": FunctionFragment;
    "compare(int256,int256)": FunctionFragment;
    "div(int256,int256)": FunctionFragment;
    "eq(int256,int256)": FunctionFragment;
    "from(uint256)": FunctionFragment;
    "gt(int256,int256)": FunctionFragment;
    "gte(int256,int256)": FunctionFragment;
    "isZero(int256)": FunctionFragment;
    "lt(int256,int256)": FunctionFragment;
    "lte(int256,int256)": FunctionFragment;
    "max(int256,int256)": FunctionFragment;
    "min(int256,int256)": FunctionFragment;
    "mul(int256,int256)": FunctionFragment;
    "negOne()": FunctionFragment;
    "one()": FunctionFragment;
    "ratio(int256,int256)": FunctionFragment;
    "sign(int256)": FunctionFragment;
    "sub(int256,int256)": FunctionFragment;
    "truncate(int256)": FunctionFragment;
    "zero()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "abs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compare",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "div",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eq",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "from", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "gt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gte",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isZero",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lte",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "max",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "min",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "negOne", values?: undefined): string;
  encodeFunctionData(functionFragment: "one", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ratio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sign", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "sub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "truncate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "zero", values?: undefined): string;

  decodeFunctionResult(functionFragment: "abs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "compare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "div", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eq", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "from", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gte", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isZero", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lte", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "max", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "min", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "negOne", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "one", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ratio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sign", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "truncate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zero", data: BytesLike): Result;

  events: {};
}

export class MockFixed18 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockFixed18Interface;

  functions: {
    abs(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compare(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    div(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    eq(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "from(uint256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "from(int256,uint256)"(
      s: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "from(int256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    gte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isZero(a: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    lt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    max(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    negOne(overrides?: CallOverrides): Promise<[BigNumber]>;

    one(overrides?: CallOverrides): Promise<[BigNumber]>;

    ratio(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sign(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    truncate(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    zero(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  abs(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  add(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compare(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  div(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  eq(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "from(uint256)"(
    a: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "from(int256,uint256)"(
    s: BigNumberish,
    m: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "from(int256)"(
    a: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gt(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  gte(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isZero(a: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  lt(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lte(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  max(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  min(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mul(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  negOne(overrides?: CallOverrides): Promise<BigNumber>;

  one(overrides?: CallOverrides): Promise<BigNumber>;

  ratio(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sign(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  sub(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  truncate(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  zero(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    abs(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compare(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    div(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eq(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "from(uint256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "from(int256,uint256)"(
      s: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "from(int256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    gte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isZero(a: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    lt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    max(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    negOne(overrides?: CallOverrides): Promise<BigNumber>;

    one(overrides?: CallOverrides): Promise<BigNumber>;

    ratio(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sign(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    truncate(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    zero(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    abs(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compare(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    div(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eq(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "from(uint256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "from(int256,uint256)"(
      s: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "from(int256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isZero(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    max(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    negOne(overrides?: CallOverrides): Promise<BigNumber>;

    one(overrides?: CallOverrides): Promise<BigNumber>;

    ratio(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sign(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    truncate(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    zero(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    abs(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compare(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    div(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eq(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "from(uint256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "from(int256,uint256)"(
      s: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "from(int256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isZero(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lt(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lte(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    max(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    negOne(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    one(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ratio(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sign(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    truncate(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zero(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
