/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Squeeth, SqueethInterface } from "../Squeeth";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IOracle",
        name: "oracle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Fixed18OverflowError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "Fixed18",
        name: "price",
        type: "int256",
      },
    ],
    name: "Version",
    type: "event",
  },
  {
    inputs: [],
    name: "currentVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fundingFee",
    outputs: [
      {
        internalType: "UFixed18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "maintenance",
    outputs: [
      {
        internalType: "UFixed18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "makerFee",
    outputs: [
      {
        internalType: "UFixed18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "makerLimit",
    outputs: [
      {
        internalType: "UFixed18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "contract IOracle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Fixed18",
        name: "price",
        type: "int256",
      },
    ],
    name: "payoff",
    outputs: [
      {
        internalType: "Fixed18",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
    ],
    name: "priceAtVersion",
    outputs: [
      {
        internalType: "Fixed18",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "UFixed18",
            name: "maker",
            type: "uint256",
          },
          {
            internalType: "UFixed18",
            name: "taker",
            type: "uint256",
          },
        ],
        internalType: "struct Position",
        name: "position",
        type: "tuple",
      },
    ],
    name: "rate",
    outputs: [
      {
        internalType: "Fixed18",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "sync",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "takerFee",
    outputs: [
      {
        internalType: "UFixed18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
    ],
    name: "timestampAtVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "";

export class Squeeth__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Squeeth> {
    return super.deploy(oracle, overrides || {}) as Promise<Squeeth>;
  }
  getDeployTransaction(
    oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(oracle, overrides || {});
  }
  attach(address: string): Squeeth {
    return super.attach(address) as Squeeth;
  }
  connect(signer: Signer): Squeeth__factory {
    return super.connect(signer) as Squeeth__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SqueethInterface {
    return new utils.Interface(_abi) as SqueethInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Squeeth {
    return new Contract(address, _abi, signerOrProvider) as Squeeth;
  }
}
