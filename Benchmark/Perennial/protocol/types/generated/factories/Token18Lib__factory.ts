/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Token18Lib, Token18LibInterface } from "../Token18Lib";

const _abi = [
  {
    inputs: [],
    name: "Token18PullEtherError",
    type: "error",
  },
  {
    inputs: [],
    name: "ETHER",
    outputs: [
      {
        internalType: "Token18",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61012c610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806342cb1fbc146038575b600080fd5b603e6052565b6040516049919060dd565b60405180910390f35b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060a960a560a184606a565b608a565b606a565b9050919050565b600060b9826094565b9050919050565b600060c98260b0565b9050919050565b60d78160c0565b82525050565b600060208201905060f0600083018460d0565b9291505056fea26469706673582212204ccc65fb2e07474b1886081a6989c1c5b44d88f8e1ede775f9671666c952069d64736f6c634300080a0033";

export class Token18Lib__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Token18Lib> {
    return super.deploy(overrides || {}) as Promise<Token18Lib>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Token18Lib {
    return super.attach(address) as Token18Lib;
  }
  connect(signer: Signer): Token18Lib__factory {
    return super.connect(signer) as Token18Lib__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Token18LibInterface {
    return new utils.Interface(_abi) as Token18LibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Token18Lib {
    return new Contract(address, _abi, signerOrProvider) as Token18Lib;
  }
}
