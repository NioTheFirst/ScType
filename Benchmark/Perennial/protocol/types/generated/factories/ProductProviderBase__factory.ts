/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  ProductProviderBase,
  ProductProviderBaseInterface,
} from "../ProductProviderBase";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "Fixed18",
        name: "price",
        type: "int256",
      },
    ],
    name: "Version",
    type: "event",
  },
  {
    inputs: [],
    name: "currentVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fundingFee",
    outputs: [
      {
        internalType: "UFixed18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maintenance",
    outputs: [
      {
        internalType: "UFixed18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "makerFee",
    outputs: [
      {
        internalType: "UFixed18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "makerLimit",
    outputs: [
      {
        internalType: "UFixed18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "contract IOracle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Fixed18",
        name: "price",
        type: "int256",
      },
    ],
    name: "payoff",
    outputs: [
      {
        internalType: "Fixed18",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
    ],
    name: "priceAtVersion",
    outputs: [
      {
        internalType: "Fixed18",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "UFixed18",
            name: "maker",
            type: "uint256",
          },
          {
            internalType: "UFixed18",
            name: "taker",
            type: "uint256",
          },
        ],
        internalType: "struct Position",
        name: "position",
        type: "tuple",
      },
    ],
    name: "rate",
    outputs: [
      {
        internalType: "Fixed18",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sync",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "takerFee",
    outputs: [
      {
        internalType: "UFixed18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
    ],
    name: "timestampAtVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class ProductProviderBase__factory {
  static readonly abi = _abi;
  static createInterface(): ProductProviderBaseInterface {
    return new utils.Interface(_abi) as ProductProviderBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProductProviderBase {
    return new Contract(address, _abi, signerOrProvider) as ProductProviderBase;
  }
}
