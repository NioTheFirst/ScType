/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockToken18, MockToken18Interface } from "../MockToken18";

const _abi = [
  {
    inputs: [],
    name: "Token18PullEtherError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "Token18",
        name: "self",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "UFixed18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token18",
        name: "self",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "UFixed18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token18",
        name: "self",
        type: "address",
      },
    ],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "etherToken",
    outputs: [
      {
        internalType: "Token18",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token18",
        name: "token",
        type: "address",
      },
    ],
    name: "isEther",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token18",
        name: "self",
        type: "address",
      },
    ],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token18",
        name: "self",
        type: "address",
      },
      {
        internalType: "address",
        name: "benefactor",
        type: "address",
      },
      {
        internalType: "UFixed18",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "pull",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token18",
        name: "self",
        type: "address",
      },
      {
        internalType: "address",
        name: "benefactor",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "UFixed18",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "pullTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token18",
        name: "self",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "UFixed18",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "push",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token18",
        name: "self",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "push",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Token18",
        name: "self",
        type: "address",
      },
    ],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611a8c806100206000396000f3fe6080604052600436106100c05760003560e01c80637372c2b511610074578063b8066bcb1161004e578063b8066bcb14610264578063d449a8321461028f578063f7888aec146102cc576100c7565b80637372c2b5146101d5578063a86e3576146101fe578063b716ba671461023b576100c7565b80634b93c875116100a55780634b93c8751461013257806368409f721461016f57806370a0823114610198576100c7565b806301984892146100cc57806326e8eda214610109576100c7565b366100c757005b600080fd5b3480156100d857600080fd5b506100f360048036038101906100ee9190610e3e565b610309565b6040516101009190610f04565b60405180910390f35b34801561011557600080fd5b50610130600480360381019061012b9190610f88565b61031b565b005b34801561013e57600080fd5b5061015960048036038101906101549190610e3e565b61032b565b6040516101669190610ff6565b60405180910390f35b34801561017b57600080fd5b5061019660048036038101906101919190611011565b61033d565b005b3480156101a457600080fd5b506101bf60048036038101906101ba9190610e3e565b61034f565b6040516101cc91906110b3565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190610f88565b610361565b005b34801561020a57600080fd5b5061022560048036038101906102209190610e3e565b610371565b6040516102329190610f04565b60405180910390f35b34801561024757600080fd5b50610262600480360381019061025d91906110ce565b610383565b005b34801561027057600080fd5b50610279610391565b6040516102869190611163565b60405180910390f35b34801561029b57600080fd5b506102b660048036038101906102b19190610e3e565b6103ad565b6040516102c3919061119a565b60405180910390f35b3480156102d857600080fd5b506102f360048036038101906102ee91906110ce565b6103bf565b60405161030091906110b3565b60405180910390f35b6060610314826103d3565b9050919050565b610326838383610499565b505050565b6000610336826104f8565b9050919050565b61034984848484610544565b50505050565b600061035a826105c0565b9050919050565b61036c8383836105d3565b505050565b606061037c8261064e565b9050919050565b61038d8282610714565b5050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee905090565b60006103b88261072c565b9050919050565b60006103cb83836107b9565b905092915050565b60606103de826104f8565b61045b578173ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561042d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061045691906112db565b610492565b6040518060400160405280600581526020017f45746865720000000000000000000000000000000000000000000000000000008152505b9050919050565b6104a2836104f8565b6104df576104da826104b48584610876565b8573ffffffffffffffffffffffffffffffffffffffff166108c09092919063ffffffff16565b6104f3565b6104f2826104ed8584610876565b610946565b5b505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b61054d846104f8565b15610584576040517f9bbdc36b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105ba83836105938785610876565b8773ffffffffffffffffffffffffffffffffffffffff16610a3a909392919063ffffffff16565b50505050565b60006105cc82306107b9565b9050919050565b6105dc836104f8565b15610613576040517f9bbdc36b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61064982306106228685610876565b8673ffffffffffffffffffffffffffffffffffffffff16610a3a909392919063ffffffff16565b505050565b6060610659826104f8565b6106d6578173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156106a8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106d191906112db565b61070d565b6040518060400160405280600381526020017f45544800000000000000000000000000000000000000000000000000000000008152505b9050919050565b610728828261072385306107b9565b610499565b5050565b6000610737826104f8565b6107af578173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa9190611350565b6107b2565b60125b9050919050565b6000806107c5846104f8565b610848578373ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401610802919061138c565b602060405180830381865afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084391906113d3565b610861565b8273ffffffffffffffffffffffffffffffffffffffff16315b905061086d8482610ac3565b91505092915050565b6000806108a26108858561072c565b60ff16600a6108949190611562565b670de0b6b3a7640000610b0d565b90506108b78184610b3690919063ffffffff16565b91505092915050565b6109418363a9059cbb60e01b84846040516024016108df9291906115bc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610b5f565b505050565b80471015610989576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098090611631565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516109af90611682565b60006040518083038185875af1925050503d80600081146109ec576040519150601f19603f3d011682016040523d82523d6000602084013e6109f1565b606091505b5050905080610a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2c90611709565b60405180910390fd5b505050565b610abd846323b872dd60e01b858585604051602401610a5b93929190611729565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610b5f565b50505050565b600080610aef670de0b6b3a7640000610adb8661072c565b60ff16600a610aea9190611562565b610b0d565b9050610b048184610b3690919063ffffffff16565b91505092915050565b600081670de0b6b3a764000084610b249190611760565b610b2e91906117e9565b905092915050565b6000670de0b6b3a76400008284610b4d9190611760565b610b5791906117e9565b905092915050565b6000610bc1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610c269092919063ffffffff16565b9050600081511115610c215780806020019051810190610be19190611846565b610c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c17906118e5565b60405180910390fd5b5b505050565b6060610c358484600085610c3e565b90509392505050565b606082471015610c83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7a90611977565b60405180910390fd5b610c8c85610d52565b610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc2906119e3565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610cf49190611a3f565b60006040518083038185875af1925050503d8060008114610d31576040519150601f19603f3d011682016040523d82523d6000602084013e610d36565b606091505b5091509150610d46828286610d65565b92505050949350505050565b600080823b905060008111915050919050565b60608315610d7557829050610dc5565b600083511115610d885782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbc9190610f04565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e0b82610de0565b9050919050565b610e1b81610e00565b8114610e2657600080fd5b50565b600081359050610e3881610e12565b92915050565b600060208284031215610e5457610e53610dd6565b5b6000610e6284828501610e29565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ea5578082015181840152602081019050610e8a565b83811115610eb4576000848401525b50505050565b6000601f19601f8301169050919050565b6000610ed682610e6b565b610ee08185610e76565b9350610ef0818560208601610e87565b610ef981610eba565b840191505092915050565b60006020820190508181036000830152610f1e8184610ecb565b905092915050565b610f2f81610e00565b8114610f3a57600080fd5b50565b600081359050610f4c81610f26565b92915050565b6000819050919050565b610f6581610f52565b8114610f7057600080fd5b50565b600081359050610f8281610f5c565b92915050565b600080600060608486031215610fa157610fa0610dd6565b5b6000610faf86828701610e29565b9350506020610fc086828701610f3d565b9250506040610fd186828701610f73565b9150509250925092565b60008115159050919050565b610ff081610fdb565b82525050565b600060208201905061100b6000830184610fe7565b92915050565b6000806000806080858703121561102b5761102a610dd6565b5b600061103987828801610e29565b945050602061104a87828801610f3d565b935050604061105b87828801610f3d565b925050606061106c87828801610f73565b91505092959194509250565b6000819050919050565b600061109d61109861109384610f52565b611078565b610f52565b9050919050565b6110ad81611082565b82525050565b60006020820190506110c860008301846110a4565b92915050565b600080604083850312156110e5576110e4610dd6565b5b60006110f385828601610e29565b925050602061110485828601610f3d565b9150509250929050565b600061112961112461111f84610de0565b611078565b610de0565b9050919050565b600061113b8261110e565b9050919050565b600061114d82611130565b9050919050565b61115d81611142565b82525050565b60006020820190506111786000830184611154565b92915050565b600060ff82169050919050565b6111948161117e565b82525050565b60006020820190506111af600083018461118b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6111f782610eba565b810181811067ffffffffffffffff82111715611216576112156111bf565b5b80604052505050565b6000611229610dcc565b905061123582826111ee565b919050565b600067ffffffffffffffff821115611255576112546111bf565b5b61125e82610eba565b9050602081019050919050565b600061127e6112798461123a565b61121f565b90508281526020810184848401111561129a576112996111ba565b5b6112a5848285610e87565b509392505050565b600082601f8301126112c2576112c16111b5565b5b81516112d284826020860161126b565b91505092915050565b6000602082840312156112f1576112f0610dd6565b5b600082015167ffffffffffffffff81111561130f5761130e610ddb565b5b61131b848285016112ad565b91505092915050565b61132d8161117e565b811461133857600080fd5b50565b60008151905061134a81611324565b92915050565b60006020828403121561136657611365610dd6565b5b60006113748482850161133b565b91505092915050565b61138681610e00565b82525050565b60006020820190506113a1600083018461137d565b92915050565b6113b081610f52565b81146113bb57600080fd5b50565b6000815190506113cd816113a7565b92915050565b6000602082840312156113e9576113e8610dd6565b5b60006113f7848285016113be565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156114865780860481111561146257611461611400565b5b60018516156114715780820291505b808102905061147f8561142f565b9450611446565b94509492505050565b60008261149f576001905061155b565b816114ad576000905061155b565b81600181146114c357600281146114cd576114fc565b600191505061155b565b60ff8411156114df576114de611400565b5b8360020a9150848211156114f6576114f5611400565b5b5061155b565b5060208310610133831016604e8410600b84101617156115315782820a90508381111561152c5761152b611400565b5b61155b565b61153e848484600161143c565b9250905081840481111561155557611554611400565b5b81810290505b9392505050565b600061156d82610f52565b915061157883610f52565b92506115a57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461148f565b905092915050565b6115b681610f52565b82525050565b60006040820190506115d1600083018561137d565b6115de60208301846115ad565b9392505050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b600061161b601d83610e76565b9150611626826115e5565b602082019050919050565b6000602082019050818103600083015261164a8161160e565b9050919050565b600081905092915050565b50565b600061166c600083611651565b91506116778261165c565b600082019050919050565b600061168d8261165f565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b60006116f3603a83610e76565b91506116fe82611697565b604082019050919050565b60006020820190508181036000830152611722816116e6565b9050919050565b600060608201905061173e600083018661137d565b61174b602083018561137d565b61175860408301846115ad565b949350505050565b600061176b82610f52565b915061177683610f52565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156117af576117ae611400565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006117f482610f52565b91506117ff83610f52565b92508261180f5761180e6117ba565b5b828204905092915050565b61182381610fdb565b811461182e57600080fd5b50565b6000815190506118408161181a565b92915050565b60006020828403121561185c5761185b610dd6565b5b600061186a84828501611831565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006118cf602a83610e76565b91506118da82611873565b604082019050919050565b600060208201905081810360008301526118fe816118c2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611961602683610e76565b915061196c82611905565b604082019050919050565b6000602082019050818103600083015261199081611954565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006119cd601d83610e76565b91506119d882611997565b602082019050919050565b600060208201905081810360008301526119fc816119c0565b9050919050565b600081519050919050565b6000611a1982611a03565b611a238185611651565b9350611a33818560208601610e87565b80840191505092915050565b6000611a4b8284611a0e565b91508190509291505056fea26469706673582212202028b985ce5df17db8b8b986f4600ea54926358dda683df002c0dab8a3bdce2164736f6c634300080a0033";

export class MockToken18__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockToken18> {
    return super.deploy(overrides || {}) as Promise<MockToken18>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockToken18 {
    return super.attach(address) as MockToken18;
  }
  connect(signer: Signer): MockToken18__factory {
    return super.connect(signer) as MockToken18__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockToken18Interface {
    return new utils.Interface(_abi) as MockToken18Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockToken18 {
    return new Contract(address, _abi, signerOrProvider) as MockToken18;
  }
}
