/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IProductInterface extends ethers.utils.Interface {
  functions: {
    "closeAll(address)": FunctionFragment;
    "closeMake(uint256)": FunctionFragment;
    "closeTake(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isClosed(address)": FunctionFragment;
    "isLiquidating(address)": FunctionFragment;
    "latestVersion(address)": FunctionFragment;
    "maintenance(address)": FunctionFragment;
    "maintenanceNext(address)": FunctionFragment;
    "openMake(uint256)": FunctionFragment;
    "openTake(uint256)": FunctionFragment;
    "position(address)": FunctionFragment;
    "positionAtVersion(uint256)": FunctionFragment;
    "pre(address)": FunctionFragment;
    "provider()": FunctionFragment;
    "settle()": FunctionFragment;
    "settleAccount(address)": FunctionFragment;
    "shareAtVersion(uint256)": FunctionFragment;
    "valueAtVersion(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "closeAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "closeMake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "isClosed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isLiquidating",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestVersion",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "maintenance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maintenanceNext",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "openMake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openTake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "position", values: [string]): string;
  encodeFunctionData(
    functionFragment: "positionAtVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pre", values: [string]): string;
  encodeFunctionData(functionFragment: "provider", values?: undefined): string;
  encodeFunctionData(functionFragment: "settle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settleAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shareAtVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "valueAtVersion",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "closeAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeMake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeTake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClosed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintenance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintenanceNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openMake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openTake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "position", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionAtVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pre", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "provider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareAtVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueAtVersion",
    data: BytesLike
  ): Result;

  events: {
    "AccountSettle(address,uint256,uint256)": EventFragment;
    "MakeClosed(address,uint256)": EventFragment;
    "MakeOpened(address,uint256)": EventFragment;
    "Settle(uint256,uint256)": EventFragment;
    "TakeClosed(address,uint256)": EventFragment;
    "TakeOpened(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountSettle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakeClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakeOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeOpened"): EventFragment;
}

export type AccountSettleEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    preVersion: BigNumber;
    toVersion: BigNumber;
  }
>;

export type MakeClosedEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type MakeOpenedEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type SettleEvent = TypedEvent<
  [BigNumber, BigNumber] & { preVersion: BigNumber; toVersion: BigNumber }
>;

export type TakeClosedEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type TakeOpenedEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export class IProduct extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IProductInterface;

  functions: {
    closeAll(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeMake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeTake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      provider_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isClosed(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isLiquidating(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "latestVersion(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "latestVersion()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maintenance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maintenanceNext(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openMake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openTake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    position(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }]
    >;

    positionAtVersion(
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }]
    >;

    "pre(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber },
          [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }
        ] & {
          oracleVersion: BigNumber;
          openPosition: [BigNumber, BigNumber] & {
            maker: BigNumber;
            taker: BigNumber;
          };
          closePosition: [BigNumber, BigNumber] & {
            maker: BigNumber;
            taker: BigNumber;
          };
        }
      ]
    >;

    "pre()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber },
          [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }
        ] & {
          oracleVersion: BigNumber;
          openPosition: [BigNumber, BigNumber] & {
            maker: BigNumber;
            taker: BigNumber;
          };
          closePosition: [BigNumber, BigNumber] & {
            maker: BigNumber;
            taker: BigNumber;
          };
        }
      ]
    >;

    provider(overrides?: CallOverrides): Promise<[string]>;

    settle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shareAtVersion(
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }]
    >;

    valueAtVersion(
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }]
    >;
  };

  closeAll(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeMake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeTake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    provider_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isClosed(account: string, overrides?: CallOverrides): Promise<boolean>;

  isLiquidating(account: string, overrides?: CallOverrides): Promise<boolean>;

  "latestVersion(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "latestVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

  maintenance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  maintenanceNext(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openMake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openTake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  position(
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }>;

  positionAtVersion(
    oracleVersion: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }>;

  "pre(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber },
      [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }
    ] & {
      oracleVersion: BigNumber;
      openPosition: [BigNumber, BigNumber] & {
        maker: BigNumber;
        taker: BigNumber;
      };
      closePosition: [BigNumber, BigNumber] & {
        maker: BigNumber;
        taker: BigNumber;
      };
    }
  >;

  "pre()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber },
      [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }
    ] & {
      oracleVersion: BigNumber;
      openPosition: [BigNumber, BigNumber] & {
        maker: BigNumber;
        taker: BigNumber;
      };
      closePosition: [BigNumber, BigNumber] & {
        maker: BigNumber;
        taker: BigNumber;
      };
    }
  >;

  settle(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleAccount(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shareAtVersion(
    oracleVersion: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }>;

  valueAtVersion(
    oracleVersion: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }>;

  callStatic: {
    closeAll(account: string, overrides?: CallOverrides): Promise<void>;

    closeMake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    closeTake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    initialize(provider_: string, overrides?: CallOverrides): Promise<void>;

    isClosed(account: string, overrides?: CallOverrides): Promise<boolean>;

    isLiquidating(account: string, overrides?: CallOverrides): Promise<boolean>;

    "latestVersion(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    maintenance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    maintenanceNext(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openMake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    openTake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    position(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }>;

    positionAtVersion(
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }>;

    "pre(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber },
        [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }
      ] & {
        oracleVersion: BigNumber;
        openPosition: [BigNumber, BigNumber] & {
          maker: BigNumber;
          taker: BigNumber;
        };
        closePosition: [BigNumber, BigNumber] & {
          maker: BigNumber;
          taker: BigNumber;
        };
      }
    >;

    "pre()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber },
        [BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }
      ] & {
        oracleVersion: BigNumber;
        openPosition: [BigNumber, BigNumber] & {
          maker: BigNumber;
          taker: BigNumber;
        };
        closePosition: [BigNumber, BigNumber] & {
          maker: BigNumber;
          taker: BigNumber;
        };
      }
    >;

    provider(overrides?: CallOverrides): Promise<string>;

    settle(overrides?: CallOverrides): Promise<void>;

    settleAccount(account: string, overrides?: CallOverrides): Promise<void>;

    shareAtVersion(
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }>;

    valueAtVersion(
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { maker: BigNumber; taker: BigNumber }>;
  };

  filters: {
    "AccountSettle(address,uint256,uint256)"(
      account?: string | null,
      preVersion?: null,
      toVersion?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; preVersion: BigNumber; toVersion: BigNumber }
    >;

    AccountSettle(
      account?: string | null,
      preVersion?: null,
      toVersion?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; preVersion: BigNumber; toVersion: BigNumber }
    >;

    "MakeClosed(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    MakeClosed(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "MakeOpened(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    MakeOpened(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "Settle(uint256,uint256)"(
      preVersion?: null,
      toVersion?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { preVersion: BigNumber; toVersion: BigNumber }
    >;

    Settle(
      preVersion?: null,
      toVersion?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { preVersion: BigNumber; toVersion: BigNumber }
    >;

    "TakeClosed(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    TakeClosed(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "TakeOpened(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    TakeOpened(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    closeAll(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeMake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeTake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      provider_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isClosed(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isLiquidating(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestVersion(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    maintenance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    maintenanceNext(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openMake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openTake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    position(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    positionAtVersion(
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pre(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pre()"(overrides?: CallOverrides): Promise<BigNumber>;

    provider(overrides?: CallOverrides): Promise<BigNumber>;

    settle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shareAtVersion(
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueAtVersion(
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closeAll(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeMake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeTake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      provider_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isClosed(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLiquidating(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestVersion(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maintenance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maintenanceNext(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openMake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openTake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    position(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionAtVersion(
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pre(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pre()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shareAtVersion(
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueAtVersion(
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
