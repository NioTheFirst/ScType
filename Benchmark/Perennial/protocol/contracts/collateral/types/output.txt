OptimisticLedgerLib
Fixed18Lib
UFixed18Lib
contract name: OptimisticLedgerLib
WARNING!!!!
OptimisticLedgerLib_types.txt
Finance file: OptimisticLedgerLib_ftypes.txt
"OptimisticLedgerLib_types.txt" opened successfully.
[*c], OptimisticLedgerLib

[sef], Fixed18Lib, from

[sef], Fixed18Lib, sign

[sef], Fixed18Lib, abs, 1, {t, [1], [-1], 0}

{t, [1], [-1], 0}
['t', '[1]', '[-1]', '0']
[t], global, BASE



[t], settleAccount, self

[t*], settleAccount, self, shortfall, 1, -1, 0, f: 50

[t], settleAccount, account

[t], settleAccount, amount

Param: [*c]
Param:  OptimisticLedgerLib

Param: [sef]
Param:  Fixed18Lib
Param:  from

Param: [sef]
Param:  Fixed18Lib
Param:  sign

Param: [sef]
Param:  Fixed18Lib
Param:  abs
Param:  1
Param:  {t
Param:  [1]
Param:  [-1]
Param:  0}

Param: [t]
Param:  global
Param:  BASE

Param: 

Param: [t]
Param:  settleAccount
Param:  self

Param: [t*]
Param:  settleAccount
Param:  self
Param:  shortfall
Param:  1
Param:  -1
Param:  0
Param:  f: 50

Isolated Param: 50
F num: 50
Param: [t]
Param:  settleAccount
Param:  account

Param: [t]
Param:  settleAccount
Param:  amount

[*] OptimisticLedgerLib run
Checking... creditAccount Visibility: internal
[x] Not visible 
Checking... debitAccount Visibility: internal
[x] Not visible 
Checking... settleAccount Visibility: external
[o] Marked
Checking... debit Visibility: internal
[x] Not visible 
Checking... resolve Visibility: internal
[x] Not visible 
State_var: BASE
Finding type for BASE...
int256
contract name: Fixed18Lib
WARNING!!!!
Fixed18Lib_types.txt
Finance File not Found
Type File not found.
[x] Fixed18Lib not run
contract name: UFixed18Lib
WARNING!!!!
UFixed18Lib_types.txt
Finance File not Found
Type File not found.
[x] UFixed18Lib not run
Seen contract: {} Contract name out: OptimisticLedgerLib
[*] OptimisticLedgerLib run
Reading Function: creditAccount
Function creditAccount not marked
Mark Iterations TRUE, proceeding anyway
Function name: creditAccount
Function Visibility (test): internal
State_var: BASE
Finding type for BASE...
int256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int256
int256
Final Type: int256

Name: BASE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: debitAccount
Function debitAccount not marked
Mark Iterations TRUE, proceeding anyway
Function name: debitAccount
Function Visibility (test): internal
State_var: BASE
Finding type for BASE...
int256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int256
int256
Final Type: int256

Name: BASE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: settleAccount
Function name: settleAccount
Function Visibility (test): external
self
Finding type for self...
OptimisticLedger
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: OptimisticLedger
OptimisticLedger
Final Type: OptimisticLedger
settleAccount
self
balances
settleAccount
self
total
settleAccount
self
shortfall
Check copy_toekn_tuple
([1], [-1], [0], 'f: 50', 50)
----
Type: UFixed18
UFixed18
Final Type: UFixed18
Type: UFixed18
UFixed18
Final Type: UFixed18
FIELDS:
self Fields:
shortfall
^^^

Name: self Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: shortfall
Finance Type: undef
[*]Type fetched successfully
account
Finding type for account...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: account Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amount
Finding type for amount...
Fixed18
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: Fixed18
Fixed18
Final Type: Fixed18

Name: amount Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: [<slither.core.variables.structure_variable.StructureVariable object at 0x7f2027f2a3d0>]
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: [<slither.core.variables.structure_variable.StructureVariable object at 0x7f2027f2a3d0>]
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_17(mapping(address => UFixed18)) -> self_1 (-> []).balances
has variable
clearing ir...?
REF_18(UFixed18) -> REF_17[account_1]
has variable
clearing ir...?
TMP_4(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.from(UFixed18), arguments:['REF_18'] 
has variable
[i] TMP_4 cleared
clearing ir...?
TMP_5(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.add(Fixed18,Fixed18), arguments:['TMP_4', 'amount_1'] 
has variable
[i] TMP_5 cleared
clearing ir...?
newBalance_1(Fixed18) := TMP_5(Fixed18)
has variable
[i] newBalance cleared
typecheckig node...
REF_17(mapping(address => UFixed18)) -> self_1 (-> []).balances
Function name: settleAccount
MEMBER
self
balances
settleAccount
self Fields:
shortfall
^^^
[i]Type for REF_17

Name: self.balances Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: self.balances Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balances Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_18(UFixed18) -> REF_17[account_1]
Function name: settleAccount
INDEX

Name: self.balances Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: settleAccount
REF_17
[i]Type for REF_18

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_18(UFixed18) -> REF_17[account_1]
XXXXX
TMP_4(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.from(UFixed18), arguments:['REF_18'] 
Function name: settleAccount
Library Call: from
hlc contract name: Fixed18Lib func_name: from
wfc len: 0
COPIED
[i]Type for TMP_4

Name: TMP_4 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_5(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.add(Fixed18,Fixed18), arguments:['TMP_4', 'amount_1'] 
Function name: settleAccount
Library Call: add

Name: TMP_5 Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amount Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_5 Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_5

Name: TMP_5 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
newBalance_1(Fixed18) := TMP_5(Fixed18)
Function name: settleAccount
asgn

Name: TMP_5 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newBalance Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_6(int256) = 1 (c)+ 1
has variable
[i] TMP_6 cleared
clearing ir...?
a_1(int256) := TMP_6(int256)
has variable
[i] a cleared
typecheckig node...
TMP_6(int256) = 1 (c)+ 1
Function name: settleAccount
val: 1
val: 1

Name: TMP_6 Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_6 Function: settleAccount
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_6

Name: TMP_6 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
a_1(int256) := TMP_6(int256)
Function name: settleAccount
asgn

Name: TMP_6 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for a

Name: a Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_7(int256) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.sign(Fixed18), arguments:['newBalance_1'] 
has variable
[i] TMP_7 cleared
clearing ir...?
TMP_8(uint256) = 0 (c)- 1
has variable
[i] TMP_8 cleared
clearing ir...?
TMP_9(bool) = TMP_7 == TMP_8
has variable
[i] TMP_9 cleared
clearing ir...?
CONDITION TMP_9
typecheckig node...
TMP_7(int256) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.sign(Fixed18), arguments:['newBalance_1'] 
Function name: settleAccount
Library Call: sign
hlc contract name: Fixed18Lib func_name: sign
wfc len: 0
COPIED
[i]Type for TMP_7

Name: TMP_7 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_8(uint256) = 0 (c)- 1
Function name: settleAccount
val: 0
val: 1
val: 0
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_8 Function: settleAccount
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_8

Name: TMP_8 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_9(bool) = TMP_7 == TMP_8
Function name: settleAccount
[i]Type for TMP_9

Name: TMP_9 Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_9
Condition...
Conidtion: 
TMP_9
TMP_9
clearning node...
clearing ir...?
shortfall_2(UFixed18) := ϕ(['shortfall_1', 'shortfall_0'])
has variable
[i] shortfall cleared
clearing ir...?
newBalance_3(Fixed18) := ϕ(['newBalance_2', 'newBalance_1'])
has variable
[i] newBalance cleared
typecheckig node...
shortfall_2(UFixed18) := ϕ(['shortfall_1', 'shortfall_0'])
Function name: settleAccount
Phi
[i]Type for shortfall

Name: shortfall Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
newBalance_3(Fixed18) := ϕ(['newBalance_2', 'newBalance_1'])
Function name: settleAccount
Phi
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_25(mapping(address => UFixed18)) -> self_1 (-> []).balances
has variable
clearing ir...?
REF_26(UFixed18) -> REF_25[account_1]
has variable
clearing ir...?
TMP_12(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_3'] 
has variable
[i] TMP_12 cleared
clearing ir...?
self_2 (-> [])(OptimisticLedger) := ϕ(['self_1 (-> [])'])
has variable
[i] self cleared
clearing ir...?
REF_26 (->self_2 (-> [])) := TMP_12(UFixed18)
has variable
typecheckig node...
REF_25(mapping(address => UFixed18)) -> self_1 (-> []).balances
Function name: settleAccount
MEMBER
self
balances
settleAccount
self Fields:
balances
shortfall
^^^

Name: balances Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_25

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balances Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_26(UFixed18) -> REF_25[account_1]
Function name: settleAccount
INDEX

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: settleAccount
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_26

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_12(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_3'] 
Function name: settleAccount
Library Call: abs
hlc contract name: Fixed18Lib func_name: abs
('t', [1], [-1], 0, None, -1)
newBalance
wfc len: 1
Check copy_toekn_tuple
([-1], [-1, -1], 0, None, -1)
----
Type: UFixed18
UFixed18
Final Type: UFixed18
COPIED
[i]Type for TMP_12

Name: TMP_12 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
self_2 (-> [])(OptimisticLedger) := ϕ(['self_1 (-> [])'])
Function name: settleAccount
Phi
[i]Type for self

Name: self Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: balances, shortfall
Finance Type: undef
done.
REF_26 (->self_2 (-> [])) := TMP_12(UFixed18)
Function name: settleAccount
asgn

Name: TMP_12 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_26 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_26

Name: REF_26 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_21(UFixed18) -> self_1 (-> []).shortfall
has variable
clearing ir...?
TMP_10(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_1'] 
has variable
[i] TMP_10 cleared
clearing ir...?
TMP_11(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_21', 'TMP_10'] 
has variable
[i] TMP_11 cleared
clearing ir...?
shortfall_1(UFixed18) := TMP_11(UFixed18)
has variable
[i] shortfall cleared
typecheckig node...
REF_21(UFixed18) -> self_1 (-> []).shortfall
Function name: settleAccount
MEMBER
self
shortfall
settleAccount
self Fields:
balances
shortfall
^^^

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
[i]Type for REF_21

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
TMP_10(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_1'] 
Function name: settleAccount
Library Call: abs
hlc contract name: Fixed18Lib func_name: abs
('t', [1], [-1], 0, None, -1)
newBalance
wfc len: 1
Check copy_toekn_tuple
([-1], [-1, -1], 0, None, -1)
----
Type: UFixed18
UFixed18
Final Type: UFixed18
COPIED
[i]Type for TMP_10

Name: TMP_10 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_11(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_21', 'TMP_10'] 
Function name: settleAccount
Library Call: add

Name: TMP_11 Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: 50, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 50
Final dest type: 50

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: TMP_11 Function: settleAccount
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: debt
[i]Type for TMP_11

Name: TMP_11 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
shortfall_1(UFixed18) := TMP_11(UFixed18)
Function name: settleAccount
asgn

Name: TMP_11 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (50, -1)
Func: assign
Dest type: 50, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 50
Final dest type: 50
[i]Type for shortfall

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
clearning node...
clearing ir...?
REF_28(UFixed18) -> self_2 (-> []).shortfall
has variable
clearing ir...?
REF_29(UFixed18) -> self_2 (-> []).shortfall
has variable
clearing ir...?
TMP_13(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_29', 'shortfall_2'] 
has variable
[i] TMP_13 cleared
clearing ir...?
self_3 (-> [])(OptimisticLedger) := ϕ(['self_2 (-> [])'])
has variable
[i] self cleared
clearing ir...?
REF_28 (->self_3 (-> [])) := TMP_13(UFixed18)
has variable
typecheckig node...
REF_28(UFixed18) -> self_2 (-> []).shortfall
Function name: settleAccount
MEMBER
self
shortfall
settleAccount
self Fields:
balances
shortfall
^^^

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
[i]Type for REF_28

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_29(UFixed18) -> self_2 (-> []).shortfall
Function name: settleAccount
MEMBER
self
shortfall
settleAccount
self Fields:
balances
shortfall
^^^

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
[i]Type for REF_29

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
TMP_13(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_29', 'shortfall_2'] 
Function name: settleAccount
Library Call: add

Name: TMP_13 Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Finance type key: (50, 50)
Error with TMP_13 in function settleAccount
Error with: TMP_13 in function settleAccount
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f2029f591c0>]

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: TMP_13 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_13

Name: TMP_13 Function: settleAccount
Num: 1
Den: -1
Norm: u
LF: f: 50
Fields: 
Finance Type: undef
done.
self_3 (-> [])(OptimisticLedger) := ϕ(['self_2 (-> [])'])
Function name: settleAccount
Phi
[i]Type for self

Name: self Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: balances, shortfall
Finance Type: undef
done.
REF_28 (->self_3 (-> [])) := TMP_13(UFixed18)
Function name: settleAccount
asgn

Name: TMP_13 Function: settleAccount
Num: 1
Den: -1
Norm: u
LF: f: 50
Fields: 
Finance Type: undef

Name: REF_28 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_28

Name: REF_28 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: undef

Name: REF_28 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
clearning node...
clearing ir...?
REF_24(Fixed18) -> Fixed18Lib.ZERO
has variable
clearing ir...?
newBalance_2(Fixed18) := REF_24(Fixed18)
has variable
[i] newBalance cleared
typecheckig node...
REF_24(Fixed18) -> Fixed18Lib.ZERO
Function name: settleAccount
MEMBER
Fixed18Lib
Fixed18Lib
ZERO
global
Fixed18Lib Fields:
^^^
[i]Type for REF_24

Name: Fixed18Lib.ZERO Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Fixed18Lib.ZERO Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: ZERO Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
newBalance_2(Fixed18) := REF_24(Fixed18)
Function name: settleAccount
asgn

Name: Fixed18Lib.ZERO Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newBalance Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
newBalance_2(Fixed18) := REF_24(Fixed18)
XXXXX
WORKLIST iteration 0 for function call "settleAccount":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
REF_17(mapping(address => UFixed18)) -> self_1 (-> []).balances
Function name: settleAccount
MEMBER
self
balances
settleAccount
self Fields:
balances
shortfall
^^^

Name: balances Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balances Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_18(UFixed18) -> REF_17[account_1]
Function name: settleAccount
INDEX

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: settleAccount
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_18

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_4(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.from(UFixed18), arguments:['REF_18'] 
Function name: settleAccount
Library Call: from
hlc contract name: Fixed18Lib func_name: from
wfc len: 0
COPIED
[i]Type for TMP_4

Name: TMP_4 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_5(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.add(Fixed18,Fixed18), arguments:['TMP_4', 'amount_1'] 
Function name: settleAccount
Library Call: add

Name: TMP_5 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amount Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_5 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_5

Name: TMP_5 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
newBalance_1(Fixed18) := TMP_5(Fixed18)
Function name: settleAccount
asgn

Name: TMP_5 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_6(int256) = 1 (c)+ 1
Function name: settleAccount
val: 1
val: 1

Name: TMP_6 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_6 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_6

Name: TMP_6 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
a_1(int256) := TMP_6(int256)
Function name: settleAccount
asgn

Name: TMP_6 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for a

Name: a Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_7(int256) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.sign(Fixed18), arguments:['newBalance_1'] 
Function name: settleAccount
Library Call: sign
hlc contract name: Fixed18Lib func_name: sign
wfc len: 0
COPIED
[i]Type for TMP_7

Name: TMP_7 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_8(uint256) = 0 (c)- 1
Function name: settleAccount
val: 0
val: 1
val: 0
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_8 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_8

Name: TMP_8 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_9(bool) = TMP_7 == TMP_8
Function name: settleAccount
[i]Type for TMP_9

Name: TMP_9 Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_9
Condition...
Conidtion: 
TMP_9
TMP_9
typecheckig node...
shortfall_2(UFixed18) := ϕ(['shortfall_1', 'shortfall_0'])
Function name: settleAccount
Phi
[i]Type for shortfall

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
newBalance_3(Fixed18) := ϕ(['newBalance_2', 'newBalance_1'])
Function name: settleAccount
Phi
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_25(mapping(address => UFixed18)) -> self_1 (-> []).balances
Function name: settleAccount
MEMBER
self
balances
settleAccount
self Fields:
balances
shortfall
^^^

Name: balances Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_25

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balances Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_26(UFixed18) -> REF_25[account_1]
Function name: settleAccount
INDEX

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: settleAccount
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_26

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_12(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_3'] 
Function name: settleAccount
Library Call: abs
hlc contract name: Fixed18Lib func_name: abs
('t', [1], [-1], 0, None, -1)
newBalance
wfc len: 1
Check copy_toekn_tuple
([-1], [-1, -1], 0, None, -1)
----
Type: UFixed18
UFixed18
Final Type: UFixed18
COPIED
[i]Type for TMP_12

Name: TMP_12 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
self_2 (-> [])(OptimisticLedger) := ϕ(['self_1 (-> [])'])
Function name: settleAccount
Phi
[i]Type for self

Name: self Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: balances, shortfall
Finance Type: undef
done.
REF_26 (->self_2 (-> [])) := TMP_12(UFixed18)
Function name: settleAccount
asgn

Name: TMP_12 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_26 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_26

Name: REF_26 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_21(UFixed18) -> self_1 (-> []).shortfall
Function name: settleAccount
MEMBER
self
shortfall
settleAccount
self Fields:
balances
shortfall
^^^

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
[i]Type for REF_21

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
TMP_10(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_1'] 
Function name: settleAccount
Library Call: abs
hlc contract name: Fixed18Lib func_name: abs
('t', [1], [-1], 0, None, -1)
newBalance
wfc len: 1
Check copy_toekn_tuple
([-1], [-1, -1], 0, None, -1)
----
Type: UFixed18
UFixed18
Final Type: UFixed18
COPIED
[i]Type for TMP_10

Name: TMP_10 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_11(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_21', 'TMP_10'] 
Function name: settleAccount
Library Call: add

Name: TMP_11 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: 50, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 50
Final dest type: 50

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: TMP_11 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
[i]Type for TMP_11

Name: TMP_11 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
shortfall_1(UFixed18) := TMP_11(UFixed18)
Function name: settleAccount
asgn

Name: TMP_11 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
Finance type key: (50, -1)
Func: assign
Dest type: 50, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 50
Final dest type: 50
[i]Type for shortfall

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
typecheckig node...
REF_28(UFixed18) -> self_2 (-> []).shortfall
Function name: settleAccount
MEMBER
[W] Initializing defined variable to constant
self
shortfall
settleAccount
self Fields:
balances
shortfall
^^^

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
[i]Type for REF_28

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
REF_29(UFixed18) -> self_2 (-> []).shortfall
Function name: settleAccount
MEMBER
self
shortfall
settleAccount
self Fields:
balances
shortfall
^^^

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
[i]Type for REF_29

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
TMP_13(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_29', 'shortfall_2'] 
Function name: settleAccount
Library Call: add

Name: TMP_13 Function: settleAccount
Num: 1
Den: -1
Norm: u
LF: f: 50
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Finance type key: (50, 50)
[W] Initializing defined variable to constant

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: TMP_13 Function: settleAccount
Num: 
Den: 
Norm: u
LF: f: 50
Fields: 
Finance Type: undef
[i]Type for TMP_13

Name: TMP_13 Function: settleAccount
Num: 1
Den: -1
Norm: u
LF: f: 50
Fields: 
Finance Type: undef
done.
self_3 (-> [])(OptimisticLedger) := ϕ(['self_2 (-> [])'])
Function name: settleAccount
Phi
[i]Type for self

Name: self Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: balances, shortfall
Finance Type: undef
done.
REF_28 (->self_3 (-> [])) := TMP_13(UFixed18)
Function name: settleAccount
asgn

Name: TMP_13 Function: settleAccount
Num: 1
Den: -1
Norm: u
LF: f: 50
Fields: 
Finance Type: undef

Name: REF_28 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_28

Name: REF_28 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: undef

Name: REF_28 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
typecheckig node...
REF_24(Fixed18) -> Fixed18Lib.ZERO
Function name: settleAccount
MEMBER
Fixed18Lib
Fixed18Lib
ZERO
global
Fixed18Lib Fields:
ZERO
^^^

Name: ZERO Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_24

Name: Fixed18Lib.ZERO Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Fixed18Lib.ZERO Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: ZERO Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
newBalance_2(Fixed18) := REF_24(Fixed18)
Function name: settleAccount
asgn

Name: Fixed18Lib.ZERO Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newBalance Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "settleAccount":
 New undefined nodes- 0
 Old undefined nodes- 2
typecheckig node...
typecheckig node...
REF_17(mapping(address => UFixed18)) -> self_1 (-> []).balances
Function name: settleAccount
MEMBER
self
balances
settleAccount
self Fields:
balances
shortfall
^^^

Name: balances Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_17

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balances Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_18(UFixed18) -> REF_17[account_1]
Function name: settleAccount
INDEX

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: settleAccount
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_18

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_4(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.from(UFixed18), arguments:['REF_18'] 
Function name: settleAccount
Library Call: from
hlc contract name: Fixed18Lib func_name: from
wfc len: 0
COPIED
[i]Type for TMP_4

Name: TMP_4 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_5(Fixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.add(Fixed18,Fixed18), arguments:['TMP_4', 'amount_1'] 
Function name: settleAccount
Library Call: add

Name: TMP_5 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amount Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_5 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_5

Name: TMP_5 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
newBalance_1(Fixed18) := TMP_5(Fixed18)
Function name: settleAccount
asgn

Name: TMP_5 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_6(int256) = 1 (c)+ 1
Function name: settleAccount
val: 1
val: 1

Name: TMP_6 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_6 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_6

Name: TMP_6 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
a_1(int256) := TMP_6(int256)
Function name: settleAccount
asgn

Name: TMP_6 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: a Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for a

Name: a Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_7(int256) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.sign(Fixed18), arguments:['newBalance_1'] 
Function name: settleAccount
Library Call: sign
hlc contract name: Fixed18Lib func_name: sign
wfc len: 0
COPIED
[i]Type for TMP_7

Name: TMP_7 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_8(uint256) = 0 (c)- 1
Function name: settleAccount
val: 0
val: 1
val: 0
val: 1
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_8 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_8

Name: TMP_8 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_9(bool) = TMP_7 == TMP_8
Function name: settleAccount
[i]Type for TMP_9

Name: TMP_9 Function: settleAccount
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_9
Condition...
Conidtion: 
TMP_9
TMP_9
typecheckig node...
shortfall_2(UFixed18) := ϕ(['shortfall_1', 'shortfall_0'])
Function name: settleAccount
Phi
[i]Type for shortfall

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
newBalance_3(Fixed18) := ϕ(['newBalance_2', 'newBalance_1'])
Function name: settleAccount
Phi
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_25(mapping(address => UFixed18)) -> self_1 (-> []).balances
Function name: settleAccount
MEMBER
self
balances
settleAccount
self Fields:
balances
shortfall
^^^

Name: balances Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_25

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balances Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_26(UFixed18) -> REF_25[account_1]
Function name: settleAccount
INDEX

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: settleAccount
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_26

Name: self.balances Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_12(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_3'] 
Function name: settleAccount
Library Call: abs
hlc contract name: Fixed18Lib func_name: abs
('t', [1], [-1], 0, None, -1)
newBalance
wfc len: 1
Check copy_toekn_tuple
([-1], [-1, -1], 0, None, -1)
----
Type: UFixed18
UFixed18
Final Type: UFixed18
COPIED
[i]Type for TMP_12

Name: TMP_12 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
self_2 (-> [])(OptimisticLedger) := ϕ(['self_1 (-> [])'])
Function name: settleAccount
Phi
[i]Type for self

Name: self Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: balances, shortfall
Finance Type: undef
done.
REF_26 (->self_2 (-> [])) := TMP_12(UFixed18)
Function name: settleAccount
asgn

Name: TMP_12 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_26 Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_26

Name: REF_26 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_21(UFixed18) -> self_1 (-> []).shortfall
Function name: settleAccount
MEMBER
self
shortfall
settleAccount
self Fields:
balances
shortfall
^^^

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
[i]Type for REF_21

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
TMP_10(UFixed18) = LIBRARY_CALL, dest:Fixed18Lib, function:Fixed18Lib.abs(Fixed18), arguments:['newBalance_1'] 
Function name: settleAccount
Library Call: abs
hlc contract name: Fixed18Lib func_name: abs
('t', [1], [-1], 0, None, -1)
newBalance
wfc len: 1
Check copy_toekn_tuple
([-1], [-1, -1], 0, None, -1)
----
Type: UFixed18
UFixed18
Final Type: UFixed18
COPIED
[i]Type for TMP_10

Name: TMP_10 Function: settleAccount
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_11(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_21', 'TMP_10'] 
Function name: settleAccount
Library Call: add

Name: TMP_11 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
initlize checks
;;;
lnorm: 0 rnorm: 0
Dest type: 50, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 50
Final dest type: 50

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: TMP_11 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
[i]Type for TMP_11

Name: TMP_11 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
shortfall_1(UFixed18) := TMP_11(UFixed18)
Function name: settleAccount
asgn

Name: TMP_11 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
Finance type key: (50, -1)
Func: assign
Dest type: 50, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 50
Final dest type: 50
[i]Type for shortfall

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
typecheckig node...
REF_28(UFixed18) -> self_2 (-> []).shortfall
Function name: settleAccount
MEMBER
self
shortfall
settleAccount
self Fields:
balances
shortfall
^^^

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
[i]Type for REF_28

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
REF_29(UFixed18) -> self_2 (-> []).shortfall
Function name: settleAccount
MEMBER
self
shortfall
settleAccount
self Fields:
balances
shortfall
^^^

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
[i]Type for REF_29

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
TMP_13(UFixed18) = LIBRARY_CALL, dest:UFixed18Lib, function:UFixed18Lib.add(UFixed18,UFixed18), arguments:['REF_29', 'shortfall_2'] 
Function name: settleAccount
Library Call: add

Name: TMP_13 Function: settleAccount
Num: 1
Den: -1
Norm: u
LF: f: 50
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Finance type key: (50, 50)
[W] Initializing defined variable to constant

Name: self.shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: TMP_13 Function: settleAccount
Num: 
Den: 
Norm: u
LF: f: 50
Fields: 
Finance Type: undef
[i]Type for TMP_13

Name: TMP_13 Function: settleAccount
Num: 1
Den: -1
Norm: u
LF: f: 50
Fields: 
Finance Type: undef
done.
self_3 (-> [])(OptimisticLedger) := ϕ(['self_2 (-> [])'])
Function name: settleAccount
Phi
[i]Type for self

Name: self Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: balances, shortfall
Finance Type: undef
done.
REF_28 (->self_3 (-> [])) := TMP_13(UFixed18)
Function name: settleAccount
asgn

Name: TMP_13 Function: settleAccount
Num: 1
Den: -1
Norm: u
LF: f: 50
Fields: 
Finance Type: undef

Name: REF_28 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_28

Name: REF_28 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: undef

Name: REF_28 Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt

Name: shortfall Function: settleAccount
Num: 1
Den: -1
Norm: 0
LF: f: 50
Fields: 
Finance Type: debt
done.
typecheckig node...
REF_24(Fixed18) -> Fixed18Lib.ZERO
Function name: settleAccount
MEMBER
Fixed18Lib
Fixed18Lib
ZERO
global
Fixed18Lib Fields:
ZERO
^^^

Name: ZERO Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_24

Name: Fixed18Lib.ZERO Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Fixed18Lib.ZERO Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: ZERO Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
newBalance_2(Fixed18) := REF_24(Fixed18)
Function name: settleAccount
asgn

Name: Fixed18Lib.ZERO Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newBalance

Name: newBalance Function: settleAccount
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 2 for function call "settleAccount":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: settleAccount

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: BASE
Finding type for BASE...
int256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int256
int256
Final Type: int256

Name: BASE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: debit
Function debit not marked
Mark Iterations TRUE, proceeding anyway
Function name: debit
Function Visibility (test): internal
State_var: BASE
Finding type for BASE...
int256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int256
int256
Final Type: int256

Name: BASE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: resolve
Function resolve not marked
Mark Iterations TRUE, proceeding anyway
Function name: resolve
Function Visibility (test): internal
State_var: BASE
Finding type for BASE...
int256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int256
int256
Final Type: int256

Name: BASE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Errors: [<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f2029f591c0>]
Seen contract: {'OptimisticLedgerLib': True} Contract name out: Fixed18Lib
[x] Fixed18Lib not run
Seen contract: {'OptimisticLedgerLib': True, 'Fixed18Lib': True} Contract name out: UFixed18Lib
[x] UFixed18Lib not run
Function count: 1
