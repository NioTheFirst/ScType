{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_destination",
          "type": "address"
        },
        {
          "internalType": "contract IStrategy",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "contract IReserve",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IReserve",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IStrategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "DestinationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Flushed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "ManagerTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipOffered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IReserve",
          "name": "reserve",
          "type": "address"
        }
      ],
      "name": "ReserveSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IStrategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategySet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flush",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserve",
      "outputs": [
        {
          "internalType": "contract IReserve",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_destination",
          "type": "address"
        }
      ],
      "name": "setDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IReserve",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "setReserve",
      "outputs": [
        {
          "internalType": "contract IReserve",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStrategy",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x74a3663ed52a200bf201944ecc4012746e0621783682dc5f9db3ef33130c98af",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "928377",
    "logsBloom": "0x
    "blockHash": "0x4676e27c895a7aa8d3d81730bfc1690a328b3986d3818228c9aa224f9dbe90af",
    "transactionHash": "0x74a3663ed52a200bf201944ecc4012746e0621783682dc5f9db3ef33130c98af",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x74a3663ed52a200bf201944ecc4012746e0621783682dc5f9db3ef33130c98af",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4676e27c895a7aa8d3d81730bfc1690a328b3986d3818228c9aa224f9dbe90af"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x74a3663ed52a200bf201944ecc4012746e0621783682dc5f9db3ef33130c98af",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xc95935a66d15e0da5e412aca0ad27ae891d20b2fb91cf3994b6a3bf2b8178082"
        ],
        "data": "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
        "logIndex": 1,
        "blockHash": "0x4676e27c895a7aa8d3d81730bfc1690a328b3986d3818228c9aa224f9dbe90af"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "928377",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "solcInputHash": "57569183cacee3f9c9739f9b85d7746f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"contract IReserve\",\"name\":\"_reserve\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IReserve\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"DestinationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Flushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IReserve\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"ReserveSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flush\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"contract IReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"setDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReserve\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"setReserve\",\"outputs\":[{\"internalType\":\"contract IReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"PoolTogether Inc Team\",\"events\":{\"Deployed(address,address,address)\":{\"params\":{\"reserve\":\"IReserve\",\"strategy\":\"IStrategy \"}}},\"kind\":\"dev\",\"methods\":{\"claimOwnership()\":{\"details\":\"This function is only callable by the `_pendingOwner`.\"},\"constructor\":{\"params\":{\"_destination\":\"address\",\"_owner\":\"address\",\"_reserve\":\"IReserve \",\"_strategy\":\"IStrategy\"}},\"flush()\":{\"details\":\"Captures interest, checkpoint data and transfers tokens to final destination.\"},\"manager()\":{\"returns\":{\"_0\":\"Current `_manager` address.\"}},\"pendingOwner()\":{\"returns\":{\"_0\":\"Current `_pendingOwner` address.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setManager(address)\":{\"details\":\"Throws if called by any account other than the owner.\",\"params\":{\"_newManager\":\"New _manager address.\"},\"returns\":{\"_0\":\"Boolean to indicate if the operation was successful or not.\"}},\"transferOwnership(address)\":{\"params\":{\"_newOwner\":\"Address to transfer ownership to.\"}}},\"title\":\"PoolTogether V4 PrizeFlush\",\"version\":1},\"userdoc\":{\"events\":{\"Deployed(address,address,address)\":{\"notice\":\"Emit when contract deployed.\"}},\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Allows the `_pendingOwner` address to finalize the transfer.\"},\"constructor\":{\"notice\":\"Set owner, reserve and strategy when deployed.\"},\"flush()\":{\"notice\":\"Migrate interest from PrizePool to DrawPrizes in single transaction.\"},\"getDestination()\":{\"notice\":\"Read global destination variable.\"},\"getReserve()\":{\"notice\":\"Read global reserve variable.\"},\"getStrategy()\":{\"notice\":\"Read global strategy variable.\"},\"manager()\":{\"notice\":\"Gets current `_manager`.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"notice\":\"Gets current `_pendingOwner`.\"},\"renounceOwnership()\":{\"notice\":\"Renounce ownership of the contract.\"},\"setDestination(address)\":{\"notice\":\"Set global destination variable.\"},\"setManager(address)\":{\"notice\":\"Set or change of manager.\"},\"setReserve(address)\":{\"notice\":\"Set global reserve variable.\"},\"setStrategy(address)\":{\"notice\":\"Set global strategy variable.\"},\"transferOwnership(address)\":{\"notice\":\"Allows current owner to set the `_pendingOwner` address.\"}},\"notice\":\"The PrizeFlush is a helper library to facilate interest distribution. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrizeFlush.sol\":\"PrizeFlush\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Abstract manageable contract that can be inherited by other contracts\\n * @notice Contract module based on Ownable which provides a basic access control mechanism, where\\n * there is an owner and a manager that can be granted exclusive access to specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyManager`, which can be applied to your functions to restrict their use to\\n * the manager.\\n */\\nabstract contract Manageable is Ownable {\\n    address private _manager;\\n\\n    /**\\n     * @dev Emitted when `_manager` has been changed.\\n     * @param previousManager previous `_manager` address.\\n     * @param newManager new `_manager` address.\\n     */\\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Gets current `_manager`.\\n     * @return Current `_manager` address.\\n     */\\n    function manager() public view virtual returns (address) {\\n        return _manager;\\n    }\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @dev Throws if called by any account other than the owner.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function setManager(address _newManager) external onlyOwner returns (bool) {\\n        return _setManager(_newManager);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Set or change of manager.\\n     * @param _newManager New _manager address.\\n     * @return Boolean to indicate if the operation was successful or not.\\n     */\\n    function _setManager(address _newManager) private returns (bool) {\\n        address _previousManager = _manager;\\n\\n        require(_newManager != _previousManager, \\\"Manageable/existing-manager-address\\\");\\n\\n        _manager = _newManager;\\n\\n        emit ManagerTransferred(_previousManager, _newManager);\\n        return true;\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        require(manager() == msg.sender, \\\"Manageable/caller-not-manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager or the owner.\\n     */\\n    modifier onlyManagerOrOwner() {\\n        require(manager() == msg.sender || owner() == msg.sender, \\\"Manageable/caller-not-manager-or-owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdd8ac008df192c6aa4df83e7037ab090970fda38e1f9fd712bc0ab5e0485fc04\",\"license\":\"GPL-3.0\"},\"@pooltogether/owner-manager-contracts/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Abstract ownable contract that can be inherited by other contracts\\n * @notice Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner is the deployer of the contract.\\n *\\n * The owner account is set through a two steps process.\\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\\n *\\n * The manager account needs to be set using {setManager}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @dev Emitted when `_pendingOwner` has been changed.\\n     * @param pendingOwner new `_pendingOwner` address.\\n     */\\n    event OwnershipOffered(address indexed pendingOwner);\\n\\n    /**\\n     * @dev Emitted when `_owner` has been changed.\\n     * @param previousOwner previous `_owner` address.\\n     * @param newOwner new `_owner` address.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Initializes the contract setting `_initialOwner` as the initial owner.\\n     * @param _initialOwner Initial owner of the contract.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Gets current `_pendingOwner`.\\n     * @return Current `_pendingOwner` address.\\n     */\\n    function pendingOwner() external view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Renounce ownership of the contract.\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n    * @notice Allows current owner to set the `_pendingOwner` address.\\n    * @param _newOwner Address to transfer ownership to.\\n    */\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable/pendingOwner-not-zero-address\\\");\\n\\n        _pendingOwner = _newOwner;\\n\\n        emit OwnershipOffered(_newOwner);\\n    }\\n\\n    /**\\n    * @notice Allows the `_pendingOwner` address to finalize the transfer.\\n    * @dev This function is only callable by the `_pendingOwner`.\\n    */\\n    function claimOwnership() external onlyPendingOwner {\\n        _setOwner(_pendingOwner);\\n        _pendingOwner = address(0);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Internal function to set the `_owner` of the contract.\\n     * @param _newOwner New `_owner` address.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address _oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable/caller-not-owner\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the `pendingOwner`.\\n    */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == _pendingOwner, \\\"Ownable/caller-not-pendingOwner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfd0fd374812c8af45f2633cc7cc4811ccb7bad0a3902a43aded35939eb4a00d1\",\"license\":\"GPL-3.0\"},\"@pooltogether/v4-core/contracts/interfaces/IControlledToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Controlled ERC20 Token\\n/// @notice ERC20 Tokens with a controller for minting & burning\\ninterface IControlledToken is IERC20 {\\n\\n  /// @dev Emitted when an instance is initialized\\n  event Deployed(\\n    string name,\\n    string symbol,\\n    uint8 decimals,\\n    address controller\\n  );\\n\\n  /// @notice Interface to the contract responsible for controlling mint/burn\\n  function controller() external view returns (address);\\n\\n  /// @notice Allows the controller to mint tokens for a user account\\n  /// @dev May be overridden to provide more granular control over minting\\n  /// @param user Address of the receiver of the minted tokens\\n  /// @param amount Amount of tokens to mint\\n  function controllerMint(address user, uint256 amount) external;\\n\\n  /// @notice Allows the controller to burn tokens from a user account\\n  /// @dev May be overridden to provide more granular control over burning\\n  /// @param user Address of the holder account to burn tokens from\\n  /// @param amount Amount of tokens to burn\\n  function controllerBurn(address user, uint256 amount) external;\\n\\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n  /// @dev May be overridden to provide more granular control over operator-burning\\n  /// @param operator Address of the operator performing the burn action via the controller contract\\n  /// @param user Address of the holder account to burn tokens from\\n  /// @param amount Amount of tokens to burn\\n  function controllerBurnFrom(address operator, address user, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x4f2aaad7815cbffd1ba3064685ec9ecb6c9ddf14344ddb25394e1ea2f8787bea\",\"license\":\"GPL-3.0\"},\"contracts/PrizeFlush.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\nimport \\\"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IPrizeFlush.sol\\\";\\n\\n/**\\n  * @title  PoolTogether V4 PrizeFlush\\n  * @author PoolTogether Inc Team\\n  * @notice The PrizeFlush is a helper library to facilate interest distribution. \\n*/\\ncontract PrizeFlush is IPrizeFlush, Manageable {\\n\\n  /// @notice Static destination for captured interest\\n  address   internal destination;\\n  \\n  /// @notice IReserve address \\n  IReserve  internal reserve;\\n  \\n  /// @notice IStrategy address \\n  IStrategy internal strategy;\\n\\n  /* ============ Events ============ */\\n\\n  /**\\n    * @notice Emit when contract deployed.\\n    * @param reserve IReserve\\n    * @param strategy IStrategy\\n    * \\n   */\\n  event Deployed(address destination, IReserve reserve, IStrategy strategy);\\n\\n  /* ============ Constructor ============ */    \\n\\n  /**\\n    * @notice Set owner, reserve and strategy when deployed.\\n    * @param _owner       address\\n    * @param _destination address\\n    * @param _strategy    IStrategy\\n    * @param _reserve     IReserve\\n    * \\n   */\\n  constructor(address _owner, address _destination, IStrategy _strategy, IReserve _reserve) Ownable(_owner) {\\n    destination  = _destination;\\n    strategy     = _strategy;\\n    reserve      = _reserve;\\n\\n    // Emit Deploy State \\n    emit Deployed(_destination, _reserve, _strategy);\\n  }\\n\\n  /* ============ External Functions ============ */\\n\\n  /// @inheritdoc IPrizeFlush\\n  function getDestination() external view override returns (address) {\\n    return destination;\\n  }\\n  \\n  /// @inheritdoc IPrizeFlush\\n  function getReserve() external view override returns (IReserve) {\\n    return reserve;\\n  }\\n\\n  /// @inheritdoc IPrizeFlush\\n  function getStrategy() external view override returns (IStrategy) {\\n    return strategy;\\n  }\\n\\n  /// @inheritdoc IPrizeFlush\\n  function setDestination(address _destination) external onlyOwner override returns (address) {\\n    require(_destination != address(0), \\\"Flush/destination-not-zero-address\\\");\\n    destination = _destination;\\n    emit DestinationSet(_destination);\\n    return _destination;\\n  }\\n  \\n  /// @inheritdoc IPrizeFlush\\n  function setReserve(IReserve _reserve) external override onlyOwner returns (IReserve) {\\n    require(address(_reserve) != address(0), \\\"Flush/reserve-not-zero-address\\\");\\n    reserve = _reserve;\\n    emit ReserveSet(_reserve);\\n    return reserve;\\n  }\\n\\n  /// @inheritdoc IPrizeFlush\\n  function setStrategy(IStrategy _strategy) external override onlyOwner returns (IStrategy) {\\n    require(address(_strategy) != address(0), \\\"Flush/strategy-not-zero-address\\\");\\n    strategy = _strategy;\\n    emit StrategySet(_strategy);\\n    return _strategy;\\n  }\\n  \\n  /// @inheritdoc IPrizeFlush\\n  function flush() external override onlyManagerOrOwner returns (bool) {\\n    strategy.distribute();\\n\\n    // After captured interest transferred to Strategy.PrizeSplits[]: [Reserve, Other]\\n    // transfer the Reserve balance directly to the DrawPrizes (destination) address.\\n    IReserve _reserve = reserve;\\n    IERC20 _token     = _reserve.getToken();\\n    uint256 _amount   = _token.balanceOf(address(_reserve));\\n\\n    if(_amount > 0) {\\n      // Create checkpoint and transfers new total balance to DrawPrizes\\n      _reserve.withdrawTo(destination, _token.balanceOf(address(_reserve)));\\n\\n      emit Flushed(destination, _amount);\\n    }\\n  }\\n\\n}\",\"keccak256\":\"0x2f3b5aa5bdf832c01e87b5c8a77fe5eae35bc3dc59714945a6fec72e73a8dc2e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPrizeFlush.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\nimport \\\"./IReserve.sol\\\";\\nimport \\\"./IStrategy.sol\\\";\\n\\ninterface IPrizeFlush {\\n  // Events\\n  event Flushed(address indexed recipient, uint256 amount);\\n  event DestinationSet(address destination);\\n  event StrategySet(IStrategy strategy);\\n  event ReserveSet(IReserve reserve);\\n\\n  /// @notice Read global destination variable.\\n  function getDestination() external view returns (address);\\n  \\n  /// @notice Read global reserve variable.\\n  function getReserve() external view returns (IReserve);\\n  \\n  /// @notice Read global strategy variable.\\n  function getStrategy() external view returns (IStrategy);\\n\\n  /// @notice Set global destination variable.\\n  function setDestination(address _destination) external returns (address);\\n  \\n  /// @notice Set global reserve variable.\\n  function setReserve(IReserve _reserve) external returns (IReserve);\\n  \\n  /// @notice Set global strategy variable.\\n  function setStrategy(IStrategy _strategy) external returns (IStrategy);\\n  \\n  /**\\n    * @notice Migrate interest from PrizePool to DrawPrizes in single transaction.\\n    * @dev    Captures interest, checkpoint data and transfers tokens to final destination.\\n   */\\n  function flush() external returns (bool);\\n}\\n\",\"keccak256\":\"0x73e0523c5dc6352163dcd3f4312dc1cbc221023052c21e09fcd05544665ce96c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IReserve {\\n  event Checkpoint(uint256 reserveAccumulated, uint256 withdrawAccumulated);\\n  event Withdrawn(address indexed recipient, uint256 amount);\\n\\n  /**\\n    * @notice Create observation checkpoint in ring bufferr.\\n    * @dev    Calculates total desposited tokens since last checkpoint and creates new accumulator checkpoint.\\n  */\\n  function checkpoint() external;\\n  \\n  /**\\n    * @notice Read global token value.\\n    * @return IERC20\\n  */\\n  function getToken() external view returns (IERC20);\\n\\n  /**\\n    * @notice Calculate token accumulation beween timestamp range.\\n    * @dev    Search the ring buffer for two checkpoint observations and diffs accumulator amount. \\n    * @param startTimestamp Account address \\n    * @param endTimestamp   Transfer amount\\n    */\\n  function getReserveAccumulatedBetween(uint32 startTimestamp, uint32 endTimestamp) external returns (uint224);\\n\\n  /**\\n    * @notice Transfer Reserve token balance to recipient address.\\n    * @dev    Creates checkpoint before token transfer. Increments withdrawAccumulator with amount.\\n    * @param recipient Account address \\n    * @param amount    Transfer amount\\n  */\\n  function withdrawTo(address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x59a837116c9b2d8fa7f72e090a0228577e572c0ac64dd4319e8ee7da8d2af447\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\nimport \\\"@pooltogether/v4-core/contracts/interfaces/IControlledToken.sol\\\";\\n\\ninterface IStrategy {\\n\\n  /**\\n    * @notice Emit when a strategy captures award amount from PrizePool.\\n    * @param totalPrizeCaptured  Total prize captured from the PrizePool\\n  */\\n  event Distributed(\\n    uint256 totalPrizeCaptured\\n  );\\n\\n  /**\\n    * @notice Emit when an individual prize split is awarded.\\n    * @param user          User address being awarded\\n    * @param prizeAwarded  Awarded prize amount\\n    * @param token         Token address\\n  */\\n  event PrizeSplitAwarded(\\n    address indexed user,\\n    uint256 prizeAwarded,\\n    IControlledToken indexed token\\n  );\\n  \\n  /**\\n    * @notice Capture the award balance and distribute to prize splits.\\n    * @dev    Permissionless function to initialize distribution of interst\\n    * @return Prize captured from PrizePool\\n  */\\n  function distribute() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x8843091a432608c5f549f728538e0636df159f4f3bb68bfa3b56c77075db1055\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636b9f96ea1161008c5780639cecc80a116100665780639cecc80a146101ad578063d0ebdbe7146101c0578063e30c3978146101d3578063f2fde38b146101e457600080fd5b80636b9f96ea1461017c578063715018a6146101945780638da5cb5b1461019c57600080fd5b806333a100ca116100c857806333a100ca1461013d578063481c6a75146101505780634e71e0c81461016157806359bf5d391461016b57600080fd5b806307da0603146100ef5780630a0a05e61461011957806316ad95421461012c575b600080fd5b6005546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100fc610127366004610d6d565b6101f7565b6003546001600160a01b03166100fc565b6100fc61014b366004610d6d565b610346565b6002546001600160a01b03166100fc565b610169610462565b005b6004546001600160a01b03166100fc565b6101846104f0565b6040519015158152602001610110565b6101696108c9565b6000546001600160a01b03166100fc565b6100fc6101bb366004610d6d565b61093e565b6101846101ce366004610d6d565b610a6e565b6001546001600160a01b03166100fc565b6101696101f2366004610d6d565b610ae8565b60003361020c6000546001600160a01b031690565b6001600160a01b0316146102675760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e6572000000000000000060448201526064015b60405180910390fd5b6001600160a01b0382166102e35760405162461bcd60e51b815260206004820152602260248201527f466c7573682f64657374696e6174696f6e2d6e6f742d7a65726f2d616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161025e565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527f02b0c42ff9b0e5574a8fb272d0d3912de57184ca7a14f102643fb371a89bc213906020015b60405180910390a15090565b60003361035b6000546001600160a01b031690565b6001600160a01b0316146103b15760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e65720000000000000000604482015260640161025e565b6001600160a01b0382166104075760405162461bcd60e51b815260206004820152601f60248201527f466c7573682f73747261746567792d6e6f742d7a65726f2d6164647265737300604482015260640161025e565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527fe70d79dad95c835bdd87e9cf4665651c9e5abb3b756e4fd2bf45f29c95c3aa409060200161033a565b6001546001600160a01b031633146104bc5760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c652f63616c6c65722d6e6f742d70656e64696e674f776e657200604482015260640161025e565b6001546104d1906001600160a01b0316610c24565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000336105056002546001600160a01b031690565b6001600160a01b031614806105335750336105286000546001600160a01b031690565b6001600160a01b0316145b6105a55760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201527f2d6f776e65720000000000000000000000000000000000000000000000000000606482015260840161025e565b600560009054906101000a90046001600160a01b03166001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d9190610dae565b5060048054604080517f21df0da700000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169260009284926321df0da79281810192602092909190829003018186803b15801561069057600080fd5b505afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190610d91565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529192506000918316906370a082319060240160206040518083038186803b15801561072857600080fd5b505afa15801561073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107609190610dae565b905080156108c3576003546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483018190529263205c287892908216918616906370a082319060240160206040518083038186803b1580156107d257600080fd5b505afa1580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a9190610dae565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561086857600080fd5b505af115801561087c573d6000803e3d6000fd5b50506003546040518481526001600160a01b0390911692507f43a46ac5237b9605f9ffdc5ca9e3ada3bea496bd00815441705ff59446129fb1915060200160405180910390a25b50505090565b336108dc6000546001600160a01b031690565b6001600160a01b0316146109325760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e65720000000000000000604482015260640161025e565b61093c6000610c24565b565b6000336109536000546001600160a01b031690565b6001600160a01b0316146109a95760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e65720000000000000000604482015260640161025e565b6001600160a01b0382166109ff5760405162461bcd60e51b815260206004820152601e60248201527f466c7573682f726573657276652d6e6f742d7a65726f2d616464726573730000604482015260640161025e565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040519081527ffbebf27e430f83725e26527d071ece14a3542fb0ab947b63747e1739708378b59060200160405180910390a150506004546001600160a01b031690565b600033610a836000546001600160a01b031690565b6001600160a01b031614610ad95760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e65720000000000000000604482015260640161025e565b610ae282610c81565b92915050565b33610afb6000546001600160a01b031690565b6001600160a01b031614610b515760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e65720000000000000000604482015260640161025e565b6001600160a01b038116610bcd5760405162461bcd60e51b815260206004820152602560248201527f4f776e61626c652f70656e64696e674f776e65722d6e6f742d7a65726f2d616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161025e565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f239a2ddded15777fa246aed5f7e1a9bc69a39d4eb4a397034d1d85766cca7d4c90600090a250565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002546000906001600160a01b03908116908316811415610d0a5760405162461bcd60e51b815260206004820152602360248201527f4d616e61676561626c652f6578697374696e672d6d616e616765722d6164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161025e565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385811691821790925560405190918316907f9cb45c728de594dab506a1f1a8554e24c8eeaf983618d5ec5dd7bc6f3c49feee90600090a350600192915050565b600060208284031215610d7f57600080fd5b8135610d8a81610dc7565b9392505050565b600060208284031215610da357600080fd5b8151610d8a81610dc7565b600060208284031215610dc057600080fd5b5051919050565b6001600160a01b0381168114610ddc57600080fd5b5056fea2646970667358221220c9d8fcd397391bca90ecb5c450245e7d5c21c873c722d0bc2f23a15e44cf524264736f6c63430008060033",
  "devdoc": {
    "author": "PoolTogether Inc Team",
    "events": {
      "Deployed(address,address,address)": {
        "params": {
          "reserve": "IReserve",
          "strategy": "IStrategy "
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claimOwnership()": {
        "details": "This function is only callable by the `_pendingOwner`."
      },
      "constructor": {
        "params": {
          "_destination": "address",
          "_owner": "address",
          "_reserve": "IReserve ",
          "_strategy": "IStrategy"
        }
      },
      "flush()": {
        "details": "Captures interest, checkpoint data and transfers tokens to final destination."
      },
      "manager()": {
        "returns": {
          "_0": "Current `_manager` address."
        }
      },
      "pendingOwner()": {
        "returns": {
          "_0": "Current `_pendingOwner` address."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setManager(address)": {
        "details": "Throws if called by any account other than the owner.",
        "params": {
          "_newManager": "New _manager address."
        },
        "returns": {
          "_0": "Boolean to indicate if the operation was successful or not."
        }
      },
      "transferOwnership(address)": {
        "params": {
          "_newOwner": "Address to transfer ownership to."
        }
      }
    },
    "title": "PoolTogether V4 PrizeFlush",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deployed(address,address,address)": {
        "notice": "Emit when contract deployed."
      }
    },
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Allows the `_pendingOwner` address to finalize the transfer."
      },
      "constructor": {
        "notice": "Set owner, reserve and strategy when deployed."
      },
      "flush()": {
        "notice": "Migrate interest from PrizePool to DrawPrizes in single transaction."
      },
      "getDestination()": {
        "notice": "Read global destination variable."
      },
      "getReserve()": {
        "notice": "Read global reserve variable."
      },
      "getStrategy()": {
        "notice": "Read global strategy variable."
      },
      "manager()": {
        "notice": "Gets current `_manager`."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "notice": "Gets current `_pendingOwner`."
      },
      "renounceOwnership()": {
        "notice": "Renounce ownership of the contract."
      },
      "setDestination(address)": {
        "notice": "Set global destination variable."
      },
      "setManager(address)": {
        "notice": "Set or change of manager."
      },
      "setReserve(address)": {
        "notice": "Set global reserve variable."
      },
      "setStrategy(address)": {
        "notice": "Set global strategy variable."
      },
      "transferOwnership(address)": {
        "notice": "Allows current owner to set the `_pendingOwner` address."
      }
    },
    "notice": "The PrizeFlush is a helper library to facilate interest distribution. ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 780,
        "contract": "contracts/PrizeFlush.sol:PrizeFlush",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 782,
        "contract": "contracts/PrizeFlush.sol:PrizeFlush",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 678,
        "contract": "contracts/PrizeFlush.sol:PrizeFlush",
        "label": "_manager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 993,
        "contract": "contracts/PrizeFlush.sol:PrizeFlush",
        "label": "destination",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 997,
        "contract": "contracts/PrizeFlush.sol:PrizeFlush",
        "label": "reserve",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IReserve)1374"
      },
      {
        "astId": 1001,
        "contract": "contracts/PrizeFlush.sol:PrizeFlush",
        "label": "strategy",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IStrategy)1399"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IReserve)1374": {
        "encoding": "inplace",
        "label": "contract IReserve",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)1399": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      }
    }
  }
}