CompositeMultiOracle
IOracle
CastBytes32Bytes6
AccessControl
contract name: CompositeMultiOracle
WARNING!!!!
CompositeMultiOracle_types.txt
Finance File not Found
"CompositeMultiOracle_types.txt" opened successfully.
[*c], CompositeMultiOracle

[sef], CastBytes32Bytes6, b6, 1, {t, [1], [-1], 1, 1}

{t, [1], [-1], 1, 1}
['t', '[1]', '[-1]', '1', '1']
[sef], SOURCE, peek, 2, {t, [1], [2], 3}, {c, [-1], [-1], 0}

{t, [1], [2], 3}
['t', '[1]', '[2]', '3']
{c, [-1], [-1], 0}
['c', '[-1]', '[-1]', '0']
[sef], SOURCE, get, 2, {c, -1, -1, 0}, {c, -1, -1, 0}

{c, -1, -1, 0}
['c', '-1', '-1', '0']
{c, -1, -1, 0}
['c', '-1', '-1', '0']
[sef], source, decimals

[tref], paths

[tref], sources

[t*], global, sources, source, -1, -1, 0, SOURCE

[t*], global, sources, decimals

[tref], _roles

[t], global, LOCK

[t], global, ROOT

[t], peek, base, 1, -1, 0, BASE

[t], peek, quote, 2, -1, 0, QUOTE

[t], peek, amount, 2, -1, 0

[t], setSources, bases, 1, -1, 0

[t], setSources, quotes, 2, -1, 0

[t], setSources, sources_

[t], setPaths, bases, 1, -1, 0

[t], setPaths, quotes, 2, -1, 0

[t], setPaths, paths_

[t], get, base, 1, -1, 0

[t], get, quote, 2, -1, 0

[t], get, amount, 2, -1, 0



[*] CompositeMultiOracle run
Checking... setSource Visibility: external
[x] No Binary
Checking... setSources Visibility: external
[o] Marked
Checking... setPath Visibility: external
[x] No Binary
Checking... setPaths Visibility: external
[o] Marked
Checking... peek Visibility: external
[o] Marked
Checking... get Visibility: external
[o] Marked
Checking... _peek Visibility: private
[x] Not visible 
Checking... _get Visibility: private
[x] Not visible 
Checking... _setSource Visibility: internal
[x] Not visible 
Checking... _setPath Visibility: internal
[x] Not visible 
Checking... slitherConstructorConstantVariables Visibility: internal
[x] Not visible 
State_var: sources
Finding type for sources...
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
State_var: _roles
Finding type for _roles...
mapping(bytes4 => AccessControl.RoleData)
State_var: LOCK
Finding type for LOCK...
bytes4
State_var: ROOT
Finding type for ROOT...
bytes4
State_var: paths
Finding type for paths...
mapping(bytes6 => mapping(bytes6 => bytes6[]))
contract name: IOracle
WARNING!!!!
IOracle_types.txt
Finance File not Found
Type File not found.
[x] IOracle not run
contract name: CastBytes32Bytes6
WARNING!!!!
CastBytes32Bytes6_types.txt
Finance File not Found
Type File not found.
[x] CastBytes32Bytes6 not run
contract name: AccessControl
WARNING!!!!
AccessControl_types.txt
Finance File not Found
Type File not found.
[x] AccessControl not run
Seen contract: {} Contract name out: CompositeMultiOracle
[*] CompositeMultiOracle run
Reading Function: setSource
Function setSource not marked
Mark Iterations TRUE, proceeding anyway
Function name: setSource
Function Visibility (test): external
base
Finding type for base...
bytes6
quote
Finding type for quote...
bytes6
source
Finding type for source...
address
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: source
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
MODIFIER_CALL, AccessControl.auth()()
typecheckig node...
MODIFIER_CALL, AccessControl.auth()()
Internal call...
auth
Function: auth
ic
done.
clearning node...
clearing ir...?
INTERNAL_CALL, CompositeMultiOracle._setSource(bytes6,bytes6,address)(base_1,quote_1,source_1)
typecheckig node...
INTERNAL_CALL, CompositeMultiOracle._setSource(bytes6,bytes6,address)(base_1,quote_1,source_1)
Internal call...
_setSource
base
quote
source
Function: _setSource
ic
done.
WORKLIST iteration 0 for function call "setSource":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: sources
Finding type for sources...
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => CompositeMultiOracle.Source)
CompositeMultiOracle.Source
Final Type: CompositeMultiOracle.Source
global
sources
source
Check copy_toekn_tuple
([-1], [-1], [0], 'SOURCE')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
sources
decimals
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: uint8
uint8
Final Type: uint8
Type: uint8
uint8
Final Type: uint8
FIELDS:
sources Fields:
source
decimals
^^^

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
[*]Type fetched successfully
State_var: _roles
Finding type for _roles...
mapping(bytes4 => AccessControl.RoleData)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes4 => AccessControl.RoleData)
mapping(bytes4 => AccessControl.RoleData)
AccessControl.RoleData
Final Type: AccessControl.RoleData
global
_roles
members
global
_roles
adminRole
FIELDS:
_roles Fields:
^^^

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: LOCK
Finding type for LOCK...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: LOCK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROOT
Finding type for ROOT...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: ROOT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: paths
Finding type for paths...
mapping(bytes6 => mapping(bytes6 => bytes6[]))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => bytes6[])
bytes6[]
bytes6
Final Type: bytes6

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: setSources
Function name: setSources
Function Visibility (test): external
bases
Finding type for bases...
bytes6[]
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: bytes6[]
bytes6[]
bytes6
Final Type: bytes6

Name: bases Function: setSources
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
quotes
Finding type for quotes...
bytes6[]
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: bytes6[]
bytes6[]
bytes6
Final Type: bytes6

Name: quotes Function: setSources
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
sources_
Finding type for sources_...
address[]
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address[]
address[]
address
Final Type: address

Name: sources_ Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
MODIFIER_CALL, AccessControl.auth()()
typecheckig node...
MODIFIER_CALL, AccessControl.auth()()
Internal call...
auth
Function: auth
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: auth
Function Visibility: internal
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_97(bool) = INTERNAL_CALL, AccessControl._hasRole(bytes4,address)(msg.sig,msg.sender)
has variable
[i] TMP_97 cleared
clearing ir...?
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,Access denied)
typecheckig node...
TMP_97(bool) = INTERNAL_CALL, AccessControl._hasRole(bytes4,address)(msg.sig,msg.sender)
Function name: auth
Internal call...
_hasRole
msg.sig
msg.sender
Function: _hasRole
ic
msg.sig
msg.sender
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _hasRole
Function Visibility: internal
clearning node...
clearing ir...?
role_1(bytes4) := ϕ(['role_1', 'role_1', 'role_1', 'msg.sig', 'TMP_9', 'TMP_99', 'TMP_19'])
has variable
[i] role cleared
clearing ir...?
account_1(address) := ϕ(['account_1', 'account_1', 'msg.sender', 'account_1'])
has variable
[i] account cleared
clearing ir...?
_roles_1(mapping(bytes4 => AccessControl.RoleData)) := ϕ(['_roles_8', '_roles_0', '_roles_1', '_roles_2', '_roles_10', '_roles_11', '_roles_4', '_roles_7', '_roles_5'])
has variable
typecheckig node...
role_1(bytes4) := ϕ(['role_1', 'role_1', 'role_1', 'msg.sig', 'TMP_9', 'TMP_99', 'TMP_19'])
Function name: _hasRole
Phi
[i]Type for role

Name: role Function: _hasRole
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
account_1(address) := ϕ(['account_1', 'account_1', 'msg.sender', 'account_1'])
Function name: _hasRole
Phi
[i]Type for account

Name: account Function: _hasRole
Num: -1
Den: -1
Norm: u
LF: account
Fields: 
Finance Type: undef
done.
_roles_1(mapping(bytes4 => AccessControl.RoleData)) := ϕ(['_roles_8', '_roles_0', '_roles_1', '_roles_2', '_roles_10', '_roles_11', '_roles_4', '_roles_7', '_roles_5'])
Function name: _hasRole
Phi
[i]Type for _roles

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_6(AccessControl.RoleData) -> _roles_1[role_1]
has variable
clearing ir...?
REF_7(mapping(address => bool)) -> REF_6.members
has variable
clearing ir...?
REF_8(bool) -> REF_7[account_1]
has variable
clearing ir...?
RETURN REF_8
typecheckig node...
REF_6(AccessControl.RoleData) -> _roles_1[role_1]
Function name: _hasRole
INDEX

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_6

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_7(mapping(address => bool)) -> REF_6.members
Function name: _hasRole
MEMBER
_roles
members
global
_roles Fields:
^^^
[i]Type for REF_7

Name: _roles.members Function: _hasRole
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _roles.members Function: _hasRole
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: members Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_8(bool) -> REF_7[account_1]
Function name: _hasRole
INDEX

Name: _roles.members Function: _hasRole
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _hasRole
REFERENCE IS BOOL TYPE
[i]Type for REF_8

Name: _roles.members Function: _hasRole
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
RETURN REF_8
RETURN

Name: _roles.members Function: _hasRole
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_hasRole":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _hasRole

Name: _roles.members Function: _hasRole
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_97

Name: TMP_97 Function: auth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,Access denied)
[i]Type for TMP_98

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "auth":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: auth
done.
clearning node...
clearing ir...?
REF_19 -> LENGTH bases_1
clearing ir...?
REF_20 -> LENGTH quotes_1
clearing ir...?
TMP_37(bool) = REF_19 == REF_20
has variable
[i] TMP_37 cleared
clearing ir...?
REF_21 -> LENGTH bases_1
clearing ir...?
REF_22 -> LENGTH sources__1
clearing ir...?
TMP_38(bool) = REF_21 == REF_22
has variable
[i] TMP_38 cleared
clearing ir...?
TMP_39(bool) = TMP_37 && TMP_38
has variable
[i] TMP_39 cleared
clearing ir...?
TMP_40(None) = SOLIDITY_CALL require(bool,string)(TMP_39,Mismatched inputs)
typecheckig node...
REF_19 -> LENGTH bases_1
[i]Type for REF_19

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_20 -> LENGTH quotes_1
[i]Type for REF_20

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_37(bool) = REF_19 == REF_20
Function name: setSources
[i]Type for TMP_37

Name: TMP_37 Function: setSources
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_21 -> LENGTH bases_1
[i]Type for REF_21

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_22 -> LENGTH sources__1
[i]Type for REF_22

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_38(bool) = REF_21 == REF_22
Function name: setSources
[i]Type for TMP_38

Name: TMP_38 Function: setSources
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_39(bool) = TMP_37 && TMP_38
Function name: setSources
[i]Type for TMP_39

Name: TMP_39 Function: setSources
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_40(None) = SOLIDITY_CALL require(bool,string)(TMP_39,Mismatched inputs)
[i]Type for TMP_40

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
i_1(uint256) := 0(uint256)
has variable
[i] i cleared
typecheckig node...
i_1(uint256) := 0(uint256)
Function name: setSources
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: setSources
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for i

Name: i Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
i_2(uint256) := ϕ(['i_3', 'i_1'])
has variable
[i] i cleared
clearing ir...?
REF_23 -> LENGTH bases_1
clearing ir...?
TMP_41(bool) = i_2 < REF_23
has variable
[i] TMP_41 cleared
clearing ir...?
CONDITION TMP_41
typecheckig node...
i_2(uint256) := ϕ(['i_3', 'i_1'])
Function name: setSources
Phi
[i]Type for i

Name: i Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_23 -> LENGTH bases_1
[i]Type for REF_23

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_41(bool) = i_2 < REF_23
Function name: setSources
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: i Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_41 Function: setSources
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_41

Name: TMP_41 Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_41(bool) = i_2 < REF_23
XXXXX
CONDITION TMP_41
Condition...
Conidtion: 
TMP_41
TMP_41
clearning node...
clearing ir...?
REF_24(bytes6) -> bases_1[i_2]
has variable
clearing ir...?
REF_25(bytes6) -> quotes_1[i_2]
has variable
clearing ir...?
REF_26(address) -> sources__1[i_2]
has variable
clearing ir...?
INTERNAL_CALL, CompositeMultiOracle._setSource(bytes6,bytes6,address)(REF_24,REF_25,REF_26)
typecheckig node...
REF_24(bytes6) -> bases_1[i_2]
Function name: setSources
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
bases
[i]Type for REF_24

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_24(bytes6) -> bases_1[i_2]
XXXXX
REF_25(bytes6) -> quotes_1[i_2]
Function name: setSources
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
quotes
[i]Type for REF_25

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_25(bytes6) -> quotes_1[i_2]
XXXXX
REF_26(address) -> sources__1[i_2]
Function name: setSources
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
sources_
[i]Type for REF_26

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_26(address) -> sources__1[i_2]
XXXXX
INTERNAL_CALL, CompositeMultiOracle._setSource(bytes6,bytes6,address)(REF_24,REF_25,REF_26)
Internal call...
_setSource
REF_24
REF_25
REF_26
Function: _setSource
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _setSource
Function Visibility: internal
clearning node...
clearing ir...?
base_1(bytes6) := ϕ(['base_1', 'REF_24'])
has variable
[i] base cleared
clearing ir...?
quote_1(bytes6) := ϕ(['quote_1', 'REF_25'])
has variable
[i] quote cleared
clearing ir...?
source_1(address) := ϕ(['REF_26', 'source_1'])
has variable
[i] source cleared
typecheckig node...
base_1(bytes6) := ϕ(['base_1', 'REF_24'])
Function name: _setSource
Phi
[i]Type for base

Name: base Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['quote_1', 'REF_25'])
Function name: _setSource
Phi
[i]Type for quote

Name: quote Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
source_1(address) := ϕ(['REF_26', 'source_1'])
Function name: _setSource
Phi
[i]Type for source

Name: source Function: _setSource
Num: -1
Den: -1
Norm: u
LF: source
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_85 = CONVERT source_1 to IOracle
has variable
[i] TMP_85 cleared
clearing ir...?
TMP_86(uint8) = HIGH_LEVEL_CALL, dest:TMP_85(IOracle), function:decimals, arguments:[]  
has variable
[i] TMP_86 cleared
clearing ir...?
decimals__1(uint8) := TMP_86(uint8)
has variable
[i] decimals_ cleared
typecheckig node...
TMP_85 = CONVERT source_1 to IOracle
Function name: _setSource

Name: source Function: _setSource
Num: -1
Den: -1
Norm: u
LF: source
Fields: 
Finance Type: undef

Name: TMP_85 Function: _setSource
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_85

Name: TMP_85 Function: _setSource
Num: -1
Den: -1
Norm: u
LF: source
Fields: 
Finance Type: undef
done.
TMP_86(uint8) = HIGH_LEVEL_CALL, dest:TMP_85(IOracle), function:decimals, arguments:[]  
Function name: _setSource
High Call: decimals
func name:decimals
other func name:decimals
TMP_86
hlc contract name: source func_name: decimals
wfc len: 0
COPIED
[i]Type for TMP_86

Name: TMP_86 Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
decimals__1(uint8) := TMP_86(uint8)
Function name: _setSource
asgn

Name: TMP_86 Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals_ Function: _setSource
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for decimals_

Name: decimals_ Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_87(bool) = decimals__1 <= 18
has variable
[i] TMP_87 cleared
clearing ir...?
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,Unsupported decimals)
typecheckig node...
TMP_87(bool) = decimals__1 <= 18
Function name: _setSource
testing lt...
val: 18
val: 18
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_87

Name: TMP_87 Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,Unsupported decimals)
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_64(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
has variable
clearing ir...?
REF_65(CompositeMultiOracle.Source) -> REF_64[quote_1]
has variable
clearing ir...?
TMP_89 = new Source(source_1,decimals__1)
clearing ir...?
sources_3(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2'])
has variable
clearing ir...?
REF_65 (->sources_3) := TMP_89(CompositeMultiOracle.Source)
has variable
typecheckig node...
REF_64(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
Function name: _setSource
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
sources
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => CompositeMultiOracle.Source)
mapping(bytes6 => CompositeMultiOracle.Source)
CompositeMultiOracle.Source
Final Type: CompositeMultiOracle.Source
None
None
source
None
None
decimals
FIELDS:
None Fields:
^^^
[i]Type for REF_64

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_65(CompositeMultiOracle.Source) -> REF_64[quote_1]
Function name: _setSource
INDEX

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_65

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_89 = new Source(source_1,decimals__1)
[i]Type for TMP_89

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_3(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2'])
Function name: _setSource
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_65 (->sources_3) := TMP_89(CompositeMultiOracle.Source)
Function name: _setSource
asgn

Name: TMP_89 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_65 Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_65

Name: REF_65 Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_65 (->sources_3) := TMP_89(CompositeMultiOracle.Source)
XXXXX
clearning node...
clearing ir...?
Emit SourceSet(base_1,quote_1,source_1)
typecheckig node...
Emit SourceSet(base_1,quote_1,source_1)
WORKLIST iteration 0 for function call "_setSource":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
base_1(bytes6) := ϕ(['base_1', 'REF_24'])
Function name: _setSource
Phi
[i]Type for base

Name: base Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['quote_1', 'REF_25'])
Function name: _setSource
Phi
[i]Type for quote

Name: quote Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
source_1(address) := ϕ(['REF_26', 'source_1'])
Function name: _setSource
Phi
[i]Type for source

Name: source Function: _setSource
Num: -1
Den: -1
Norm: u
LF: source
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_85 = CONVERT source_1 to IOracle
Function name: _setSource

Name: source Function: _setSource
Num: -1
Den: -1
Norm: u
LF: source
Fields: 
Finance Type: undef

Name: TMP_85 Function: _setSource
Num: -1
Den: -1
Norm: u
LF: source
Fields: 
Finance Type: undef
[i]Type for TMP_85

Name: TMP_85 Function: _setSource
Num: -1
Den: -1
Norm: u
LF: source
Fields: 
Finance Type: undef
done.
TMP_86(uint8) = HIGH_LEVEL_CALL, dest:TMP_85(IOracle), function:decimals, arguments:[]  
Function name: _setSource
High Call: decimals
func name:decimals
other func name:decimals
TMP_86
hlc contract name: source func_name: decimals
wfc len: 0
COPIED
[i]Type for TMP_86

Name: TMP_86 Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
decimals__1(uint8) := TMP_86(uint8)
Function name: _setSource
asgn

Name: TMP_86 Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals_ Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for decimals_

Name: decimals_ Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_87(bool) = decimals__1 <= 18
Function name: _setSource
testing lt...
val: 18
val: 18
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_87

Name: TMP_87 Function: _setSource
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,Unsupported decimals)
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_64(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
Function name: _setSource
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
sources
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => CompositeMultiOracle.Source)
mapping(bytes6 => CompositeMultiOracle.Source)
CompositeMultiOracle.Source
Final Type: CompositeMultiOracle.Source
None
None
source
None
None
decimals
FIELDS:
None Fields:
^^^
[i]Type for REF_64

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_65(CompositeMultiOracle.Source) -> REF_64[quote_1]
Function name: _setSource
INDEX

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_65

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_89 = new Source(source_1,decimals__1)
[i]Type for TMP_89

Name: TMP_89 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_3(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2'])
Function name: _setSource
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_65 (->sources_3) := TMP_89(CompositeMultiOracle.Source)
Function name: _setSource
asgn

Name: TMP_89 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_65 Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_65

Name: REF_65 Function: _setSource
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_65 (->sources_3) := TMP_89(CompositeMultiOracle.Source)
XXXXX
typecheckig node...
Emit SourceSet(base_1,quote_1,source_1)
WORKLIST iteration 1 for function call "_setSource":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: _setSource
done.
This IR caused addback:
INTERNAL_CALL, CompositeMultiOracle._setSource(bytes6,bytes6,address)(REF_24,REF_25,REF_26)
XXXXX
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_43(uint256) := i_2(uint256)
has variable
[i] TMP_43 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
has variable
[i] i cleared
typecheckig node...
TMP_43(uint256) := i_2(uint256)
Function name: setSources
asgn

Name: i Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_43 Function: setSources
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_43

Name: TMP_43 Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
i_3(uint256) = i_2 (c)+ 1
Function name: setSources
val: 1

Name: i Function: setSources
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: setSources
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: setSources
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "setSources":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
MODIFIER_CALL, AccessControl.auth()()
Internal call...
auth
Function: auth
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
typecheckig node...
REF_19 -> LENGTH bases_1
[i]Type for REF_19

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_20 -> LENGTH quotes_1
[i]Type for REF_20

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_37(bool) = REF_19 == REF_20
Function name: setSources
[i]Type for TMP_37

Name: TMP_37 Function: setSources
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_21 -> LENGTH bases_1
[i]Type for REF_21

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_22 -> LENGTH sources__1
[i]Type for REF_22

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_38(bool) = REF_21 == REF_22
Function name: setSources
[i]Type for TMP_38

Name: TMP_38 Function: setSources
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_39(bool) = TMP_37 && TMP_38
Function name: setSources
[i]Type for TMP_39

Name: TMP_39 Function: setSources
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_40(None) = SOLIDITY_CALL require(bool,string)(TMP_39,Mismatched inputs)
[i]Type for TMP_40

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
i_1(uint256) := 0(uint256)
Function name: setSources
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for i

Name: i Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
i_2(uint256) := ϕ(['i_3', 'i_1'])
Function name: setSources
Phi
[i]Type for i

Name: i Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_23 -> LENGTH bases_1
[i]Type for REF_23

Name: REF_23 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_41(bool) = i_2 < REF_23
Function name: setSources
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: i Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_41 Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_41

Name: TMP_41 Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_41(bool) = i_2 < REF_23
XXXXX
CONDITION TMP_41
Condition...
Conidtion: 
TMP_41
TMP_41
typecheckig node...
REF_24(bytes6) -> bases_1[i_2]
Function name: setSources
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
bases
[i]Type for REF_24

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_24(bytes6) -> bases_1[i_2]
XXXXX
REF_25(bytes6) -> quotes_1[i_2]
Function name: setSources
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
quotes
[i]Type for REF_25

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_25(bytes6) -> quotes_1[i_2]
XXXXX
REF_26(address) -> sources__1[i_2]
Function name: setSources
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
sources_
[i]Type for REF_26

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_26(address) -> sources__1[i_2]
XXXXX
INTERNAL_CALL, CompositeMultiOracle._setSource(bytes6,bytes6,address)(REF_24,REF_25,REF_26)
Internal call...
_setSource
REF_24
REF_25
REF_26
Function: _setSource
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
0
done.
typecheckig node...
typecheckig node...
TMP_43(uint256) := i_2(uint256)
Function name: setSources
asgn

Name: i Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_43 Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_43

Name: TMP_43 Function: setSources
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
i_3(uint256) = i_2 (c)+ 1
Function name: setSources
val: 1

Name: i Function: setSources
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: setSources
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: setSources
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "setSources":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: setSources
State_var: sources
Finding type for sources...
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => CompositeMultiOracle.Source)
CompositeMultiOracle.Source
Final Type: CompositeMultiOracle.Source
global
sources
source
Check copy_toekn_tuple
([-1], [-1], [0], 'SOURCE')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
sources
decimals
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: uint8
uint8
Final Type: uint8
Type: uint8
uint8
Final Type: uint8
FIELDS:
sources Fields:
source
decimals
^^^

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
[*]Type fetched successfully
State_var: _roles
Finding type for _roles...
mapping(bytes4 => AccessControl.RoleData)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes4 => AccessControl.RoleData)
mapping(bytes4 => AccessControl.RoleData)
AccessControl.RoleData
Final Type: AccessControl.RoleData
global
_roles
members
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
global
_roles
adminRole
FIELDS:
_roles Fields:
members
^^^

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: members
Finance Type: undef
[*]Type fetched successfully
State_var: LOCK
Finding type for LOCK...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: LOCK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROOT
Finding type for ROOT...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: ROOT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: paths
Finding type for paths...
mapping(bytes6 => mapping(bytes6 => bytes6[]))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => bytes6[])
bytes6[]
bytes6
Final Type: bytes6

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: setPath
Function setPath not marked
Mark Iterations TRUE, proceeding anyway
Function name: setPath
Function Visibility (test): external
base
Finding type for base...
bytes6
quote
Finding type for quote...
bytes6
path
Finding type for path...
bytes6[]
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
MODIFIER_CALL, AccessControl.auth()()
typecheckig node...
MODIFIER_CALL, AccessControl.auth()()
Internal call...
auth
Function: auth
ic
done.
clearning node...
clearing ir...?
INTERNAL_CALL, CompositeMultiOracle._setPath(bytes6,bytes6,bytes6[])(base_1,quote_1,path_1)
typecheckig node...
INTERNAL_CALL, CompositeMultiOracle._setPath(bytes6,bytes6,bytes6[])(base_1,quote_1,path_1)
Internal call...
_setPath
base
quote
path
Function: _setPath
ic
done.
WORKLIST iteration 0 for function call "setPath":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: sources
Finding type for sources...
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => CompositeMultiOracle.Source)
CompositeMultiOracle.Source
Final Type: CompositeMultiOracle.Source
global
sources
source
Check copy_toekn_tuple
([-1], [-1], [0], 'SOURCE')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
sources
decimals
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: uint8
uint8
Final Type: uint8
Type: uint8
uint8
Final Type: uint8
FIELDS:
sources Fields:
source
decimals
^^^

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
[*]Type fetched successfully
State_var: _roles
Finding type for _roles...
mapping(bytes4 => AccessControl.RoleData)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes4 => AccessControl.RoleData)
mapping(bytes4 => AccessControl.RoleData)
AccessControl.RoleData
Final Type: AccessControl.RoleData
global
_roles
members
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
global
_roles
adminRole
FIELDS:
_roles Fields:
members
^^^

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: members
Finance Type: undef
[*]Type fetched successfully
State_var: LOCK
Finding type for LOCK...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: LOCK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROOT
Finding type for ROOT...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: ROOT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: paths
Finding type for paths...
mapping(bytes6 => mapping(bytes6 => bytes6[]))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => bytes6[])
bytes6[]
bytes6
Final Type: bytes6

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: setPaths
Function name: setPaths
Function Visibility (test): external
bases
Finding type for bases...
bytes6[]
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: bytes6[]
bytes6[]
bytes6
Final Type: bytes6

Name: bases Function: setPaths
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
quotes
Finding type for quotes...
bytes6[]
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: bytes6[]
bytes6[]
bytes6
Final Type: bytes6

Name: quotes Function: setPaths
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
paths_
Finding type for paths_...
bytes6[][]
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes6[][]
bytes6[][]
bytes6[]
bytes6
Final Type: bytes6

Name: paths_ Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
MODIFIER_CALL, AccessControl.auth()()
typecheckig node...
MODIFIER_CALL, AccessControl.auth()()
Internal call...
auth
Function: auth
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
REF_27 -> LENGTH bases_1
clearing ir...?
REF_28 -> LENGTH quotes_1
clearing ir...?
TMP_47(bool) = REF_27 == REF_28
has variable
[i] TMP_47 cleared
clearing ir...?
REF_29 -> LENGTH bases_1
clearing ir...?
REF_30 -> LENGTH paths__1
clearing ir...?
TMP_48(bool) = REF_29 == REF_30
has variable
[i] TMP_48 cleared
clearing ir...?
TMP_49(bool) = TMP_47 && TMP_48
has variable
[i] TMP_49 cleared
clearing ir...?
TMP_50(None) = SOLIDITY_CALL require(bool,string)(TMP_49,Mismatched inputs)
typecheckig node...
REF_27 -> LENGTH bases_1
[i]Type for REF_27

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_28 -> LENGTH quotes_1
[i]Type for REF_28

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_47(bool) = REF_27 == REF_28
Function name: setPaths
[i]Type for TMP_47

Name: TMP_47 Function: setPaths
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_29 -> LENGTH bases_1
[i]Type for REF_29

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_30 -> LENGTH paths__1
[i]Type for REF_30

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_48(bool) = REF_29 == REF_30
Function name: setPaths
[i]Type for TMP_48

Name: TMP_48 Function: setPaths
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_49(bool) = TMP_47 && TMP_48
Function name: setPaths
[i]Type for TMP_49

Name: TMP_49 Function: setPaths
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_50(None) = SOLIDITY_CALL require(bool,string)(TMP_49,Mismatched inputs)
[i]Type for TMP_50

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
i_1(uint256) := 0(uint256)
has variable
[i] i cleared
typecheckig node...
i_1(uint256) := 0(uint256)
Function name: setPaths
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: setPaths
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for i

Name: i Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
i_2(uint256) := ϕ(['i_1', 'i_3'])
has variable
[i] i cleared
clearing ir...?
REF_31 -> LENGTH bases_1
clearing ir...?
TMP_51(bool) = i_2 < REF_31
has variable
[i] TMP_51 cleared
clearing ir...?
CONDITION TMP_51
typecheckig node...
i_2(uint256) := ϕ(['i_1', 'i_3'])
Function name: setPaths
Phi
[i]Type for i

Name: i Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_31 -> LENGTH bases_1
[i]Type for REF_31

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_51(bool) = i_2 < REF_31
Function name: setPaths
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: i Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_51 Function: setPaths
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_51

Name: TMP_51 Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_51(bool) = i_2 < REF_31
XXXXX
CONDITION TMP_51
Condition...
Conidtion: 
TMP_51
TMP_51
clearning node...
clearing ir...?
REF_32(bytes6) -> bases_1[i_2]
has variable
clearing ir...?
REF_33(bytes6) -> quotes_1[i_2]
has variable
clearing ir...?
REF_34(bytes6[]) -> paths__1[i_2]
has variable
clearing ir...?
INTERNAL_CALL, CompositeMultiOracle._setPath(bytes6,bytes6,bytes6[])(REF_32,REF_33,REF_34)
typecheckig node...
REF_32(bytes6) -> bases_1[i_2]
Function name: setPaths
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
bases
[i]Type for REF_32

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_32(bytes6) -> bases_1[i_2]
XXXXX
REF_33(bytes6) -> quotes_1[i_2]
Function name: setPaths
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
quotes
[i]Type for REF_33

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_33(bytes6) -> quotes_1[i_2]
XXXXX
REF_34(bytes6[]) -> paths__1[i_2]
Function name: setPaths
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
paths_
[i]Type for REF_34

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_34(bytes6[]) -> paths__1[i_2]
XXXXX
INTERNAL_CALL, CompositeMultiOracle._setPath(bytes6,bytes6,bytes6[])(REF_32,REF_33,REF_34)
Internal call...
_setPath
REF_32
REF_33
REF_34
Function: _setPath
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _setPath
Function Visibility: internal
clearning node...
clearing ir...?
base_1(bytes6) := ϕ(['REF_32', 'base_1'])
has variable
[i] base cleared
clearing ir...?
quote_1(bytes6) := ϕ(['quote_1', 'REF_33'])
has variable
[i] quote cleared
clearing ir...?
path_1(bytes6[]) := ϕ(['path_1', 'REF_34'])
has variable
[i] path cleared
clearing ir...?
sources_4(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
has variable
typecheckig node...
base_1(bytes6) := ϕ(['REF_32', 'base_1'])
Function name: _setPath
Phi
[i]Type for base

Name: base Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['quote_1', 'REF_33'])
Function name: _setPath
Phi
[i]Type for quote

Name: quote Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1(bytes6[]) := ϕ(['path_1', 'REF_34'])
Function name: _setPath
Phi
[i]Type for path

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_4(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _setPath
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
base__1(bytes6) := base_1(bytes6)
has variable
[i] base_ cleared
typecheckig node...
base__1(bytes6) := base_1(bytes6)
Function name: _setPath
asgn

Name: base Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: base_ Function: _setPath
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for base_

Name: base_ Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
p_1(uint256) := 0(uint256)
has variable
[i] p cleared
typecheckig node...
p_1(uint256) := 0(uint256)
Function name: _setPath
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: p Function: _setPath
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for p

Name: p Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
base__2(bytes6) := ϕ(['base__3', 'base__1'])
has variable
[i] base_ cleared
clearing ir...?
p_2(uint256) := ϕ(['p_3', 'p_1'])
has variable
[i] p cleared
clearing ir...?
REF_66 -> LENGTH path_1
clearing ir...?
TMP_91(bool) = p_2 < REF_66
has variable
[i] TMP_91 cleared
clearing ir...?
CONDITION TMP_91
typecheckig node...
base__2(bytes6) := ϕ(['base__3', 'base__1'])
Function name: _setPath
Phi
[i]Type for base_

Name: base_ Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
p_2(uint256) := ϕ(['p_3', 'p_1'])
Function name: _setPath
Phi
[i]Type for p

Name: p Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_66 -> LENGTH path_1
[i]Type for REF_66

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_91(bool) = p_2 < REF_66
Function name: _setPath
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: p Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_91 Function: _setPath
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_91

Name: TMP_91 Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_91(bool) = p_2 < REF_66
XXXXX
CONDITION TMP_91
Condition...
Conidtion: 
TMP_91
TMP_91
clearning node...
clearing ir...?
REF_67(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_4[base__2]
has variable
clearing ir...?
REF_68(bytes6) -> path_1[p_2]
has variable
clearing ir...?
REF_69(CompositeMultiOracle.Source) -> REF_67[REF_68]
has variable
clearing ir...?
REF_70(address) -> REF_69.source
has variable
clearing ir...?
TMP_92 = CONVERT 0 to address
has variable
[i] TMP_92 cleared
clearing ir...?
TMP_93(bool) = REF_70 != TMP_92
has variable
[i] TMP_93 cleared
clearing ir...?
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,Source not found)
typecheckig node...
REF_67(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_4[base__2]
Function name: _setPath
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_67

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_68(bytes6) -> path_1[p_2]
Function name: _setPath
INDEX

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _setPath
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_68

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_69(CompositeMultiOracle.Source) -> REF_67[REF_68]
Function name: _setPath
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_69

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_70(address) -> REF_69.source
Function name: _setPath
MEMBER
sources
source
global
sources Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_70

Name: sources.source Function: _setPath
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: sources.source Function: _setPath
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_92 = CONVERT 0 to address
Function name: _setPath
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_92 Function: _setPath
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_92

Name: TMP_92 Function: _setPath
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_93(bool) = REF_70 != TMP_92
Function name: _setPath
[i]Type for TMP_93

Name: TMP_93 Function: _setPath
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,Source not found)
[i]Type for TMP_94

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_71(bytes6) -> path_1[p_2]
has variable
clearing ir...?
base__3(bytes6) := REF_71(bytes6)
has variable
[i] base_ cleared
typecheckig node...
REF_71(bytes6) -> path_1[p_2]
Function name: _setPath
INDEX

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _setPath
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_71

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
base__3(bytes6) := REF_71(bytes6)
Function name: _setPath
asgn

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: base_ Function: _setPath
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for base_

Name: base_ Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_95(uint256) := p_2(uint256)
has variable
[i] TMP_95 cleared
clearing ir...?
p_3(uint256) = p_2 (c)+ 1
has variable
[i] p cleared
typecheckig node...
TMP_95(uint256) := p_2(uint256)
Function name: _setPath
asgn

Name: p Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_95 Function: _setPath
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_95

Name: TMP_95 Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
p_3(uint256) = p_2 (c)+ 1
Function name: _setPath
val: 1

Name: p Function: _setPath
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: p Function: _setPath
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for p

Name: p Function: _setPath
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_72(mapping(bytes6 => bytes6[])) -> paths_2[base_1]
has variable
clearing ir...?
REF_73(bytes6[]) -> REF_72[quote_1]
has variable
clearing ir...?
paths_3(mapping(bytes6 => mapping(bytes6 => bytes6[]))) := ϕ(['paths_2'])
has variable
clearing ir...?
REF_73 (->paths_3) := path_1(bytes6[])
has variable
typecheckig node...
REF_72(mapping(bytes6 => bytes6[])) -> paths_2[base_1]
Function name: _setPath
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
paths
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => bytes6[])
mapping(bytes6 => bytes6[])
bytes6[]
bytes6
Final Type: bytes6
[i]Type for REF_72

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_73(bytes6[]) -> REF_72[quote_1]
Function name: _setPath
INDEX

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_73

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
paths_3(mapping(bytes6 => mapping(bytes6 => bytes6[]))) := ϕ(['paths_2'])
Function name: _setPath
Phi
[i]Type for paths

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_73 (->paths_3) := path_1(bytes6[])
Function name: _setPath
asgn

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_73 Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_73

Name: REF_73 Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
Emit PathSet(base_1,quote_1,path_1)
typecheckig node...
Emit PathSet(base_1,quote_1,path_1)
WORKLIST iteration 0 for function call "_setPath":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
base_1(bytes6) := ϕ(['REF_32', 'base_1'])
Function name: _setPath
Phi
[i]Type for base

Name: base Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['quote_1', 'REF_33'])
Function name: _setPath
Phi
[i]Type for quote

Name: quote Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1(bytes6[]) := ϕ(['path_1', 'REF_34'])
Function name: _setPath
Phi
[i]Type for path

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_4(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _setPath
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
base__1(bytes6) := base_1(bytes6)
Function name: _setPath
asgn

Name: base Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: base_ Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for base_

Name: base_ Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
p_1(uint256) := 0(uint256)
Function name: _setPath
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: p Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for p

Name: p Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
base__2(bytes6) := ϕ(['base__3', 'base__1'])
Function name: _setPath
Phi
[i]Type for base_

Name: base_ Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
p_2(uint256) := ϕ(['p_3', 'p_1'])
Function name: _setPath
Phi
[i]Type for p

Name: p Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_66 -> LENGTH path_1
[i]Type for REF_66

Name: REF_66 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_91(bool) = p_2 < REF_66
Function name: _setPath
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: p Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_91 Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_91

Name: TMP_91 Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_91(bool) = p_2 < REF_66
XXXXX
CONDITION TMP_91
Condition...
Conidtion: 
TMP_91
TMP_91
typecheckig node...
REF_67(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_4[base__2]
Function name: _setPath
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_67

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_68(bytes6) -> path_1[p_2]
Function name: _setPath
INDEX

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _setPath
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_68

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_69(CompositeMultiOracle.Source) -> REF_67[REF_68]
Function name: _setPath
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_69

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_70(address) -> REF_69.source
Function name: _setPath
MEMBER
sources
source
global
sources Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_70

Name: sources.source Function: _setPath
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: sources.source Function: _setPath
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_92 = CONVERT 0 to address
Function name: _setPath
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_92 Function: _setPath
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_92

Name: TMP_92 Function: _setPath
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_93(bool) = REF_70 != TMP_92
Function name: _setPath
[i]Type for TMP_93

Name: TMP_93 Function: _setPath
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,Source not found)
[i]Type for TMP_94

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_71(bytes6) -> path_1[p_2]
Function name: _setPath
INDEX

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _setPath
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_71

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
base__3(bytes6) := REF_71(bytes6)
Function name: _setPath
asgn

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: base_ Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for base_

Name: base_ Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_95(uint256) := p_2(uint256)
Function name: _setPath
asgn

Name: p Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_95 Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_95

Name: TMP_95 Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
p_3(uint256) = p_2 (c)+ 1
Function name: _setPath
val: 1

Name: p Function: _setPath
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: p Function: _setPath
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for p

Name: p Function: _setPath
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
REF_72(mapping(bytes6 => bytes6[])) -> paths_2[base_1]
Function name: _setPath
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
paths
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => bytes6[])
mapping(bytes6 => bytes6[])
bytes6[]
bytes6
Final Type: bytes6
[i]Type for REF_72

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_73(bytes6[]) -> REF_72[quote_1]
Function name: _setPath
INDEX

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_73

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
paths_3(mapping(bytes6 => mapping(bytes6 => bytes6[]))) := ϕ(['paths_2'])
Function name: _setPath
Phi
[i]Type for paths

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_73 (->paths_3) := path_1(bytes6[])
Function name: _setPath
asgn

Name: path Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_73 Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_73

Name: REF_73 Function: _setPath
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
Emit PathSet(base_1,quote_1,path_1)
WORKLIST iteration 1 for function call "_setPath":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: _setPath
done.
This IR caused addback:
INTERNAL_CALL, CompositeMultiOracle._setPath(bytes6,bytes6,bytes6[])(REF_32,REF_33,REF_34)
XXXXX
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_53(uint256) := i_2(uint256)
has variable
[i] TMP_53 cleared
clearing ir...?
i_3(uint256) = i_2 (c)+ 1
has variable
[i] i cleared
typecheckig node...
TMP_53(uint256) := i_2(uint256)
Function name: setPaths
asgn

Name: i Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_53 Function: setPaths
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_53

Name: TMP_53 Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
i_3(uint256) = i_2 (c)+ 1
Function name: setPaths
val: 1

Name: i Function: setPaths
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: setPaths
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: setPaths
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "setPaths":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
typecheckig node...
MODIFIER_CALL, AccessControl.auth()()
Internal call...
auth
Function: auth
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
typecheckig node...
REF_27 -> LENGTH bases_1
[i]Type for REF_27

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_28 -> LENGTH quotes_1
[i]Type for REF_28

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_47(bool) = REF_27 == REF_28
Function name: setPaths
[i]Type for TMP_47

Name: TMP_47 Function: setPaths
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_29 -> LENGTH bases_1
[i]Type for REF_29

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_30 -> LENGTH paths__1
[i]Type for REF_30

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_48(bool) = REF_29 == REF_30
Function name: setPaths
[i]Type for TMP_48

Name: TMP_48 Function: setPaths
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_49(bool) = TMP_47 && TMP_48
Function name: setPaths
[i]Type for TMP_49

Name: TMP_49 Function: setPaths
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_50(None) = SOLIDITY_CALL require(bool,string)(TMP_49,Mismatched inputs)
[i]Type for TMP_50

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
i_1(uint256) := 0(uint256)
Function name: setPaths
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for i

Name: i Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
i_2(uint256) := ϕ(['i_1', 'i_3'])
Function name: setPaths
Phi
[i]Type for i

Name: i Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_31 -> LENGTH bases_1
[i]Type for REF_31

Name: REF_31 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_51(bool) = i_2 < REF_31
Function name: setPaths
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: i Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_51 Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_51

Name: TMP_51 Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_51(bool) = i_2 < REF_31
XXXXX
CONDITION TMP_51
Condition...
Conidtion: 
TMP_51
TMP_51
typecheckig node...
REF_32(bytes6) -> bases_1[i_2]
Function name: setPaths
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
bases
[i]Type for REF_32

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_32(bytes6) -> bases_1[i_2]
XXXXX
REF_33(bytes6) -> quotes_1[i_2]
Function name: setPaths
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
quotes
[i]Type for REF_33

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_33(bytes6) -> quotes_1[i_2]
XXXXX
REF_34(bytes6[]) -> paths__1[i_2]
Function name: setPaths
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
paths_
[i]Type for REF_34

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_34(bytes6[]) -> paths__1[i_2]
XXXXX
INTERNAL_CALL, CompositeMultiOracle._setPath(bytes6,bytes6,bytes6[])(REF_32,REF_33,REF_34)
Internal call...
_setPath
REF_32
REF_33
REF_34
Function: _setPath
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
0
done.
typecheckig node...
typecheckig node...
TMP_53(uint256) := i_2(uint256)
Function name: setPaths
asgn

Name: i Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_53 Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_53

Name: TMP_53 Function: setPaths
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
i_3(uint256) = i_2 (c)+ 1
Function name: setPaths
val: 1

Name: i Function: setPaths
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: i Function: setPaths
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for i

Name: i Function: setPaths
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "setPaths":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: setPaths
State_var: sources
Finding type for sources...
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => CompositeMultiOracle.Source)
CompositeMultiOracle.Source
Final Type: CompositeMultiOracle.Source
global
sources
source
Check copy_toekn_tuple
([-1], [-1], [0], 'SOURCE')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
sources
decimals
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: uint8
uint8
Final Type: uint8
Type: uint8
uint8
Final Type: uint8
FIELDS:
sources Fields:
source
decimals
^^^

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
[*]Type fetched successfully
State_var: _roles
Finding type for _roles...
mapping(bytes4 => AccessControl.RoleData)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes4 => AccessControl.RoleData)
mapping(bytes4 => AccessControl.RoleData)
AccessControl.RoleData
Final Type: AccessControl.RoleData
global
_roles
members
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
global
_roles
adminRole
FIELDS:
_roles Fields:
members
^^^

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: members
Finance Type: undef
[*]Type fetched successfully
State_var: LOCK
Finding type for LOCK...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: LOCK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROOT
Finding type for ROOT...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: ROOT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: paths
Finding type for paths...
mapping(bytes6 => mapping(bytes6 => bytes6[]))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => bytes6[])
bytes6[]
bytes6
Final Type: bytes6

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: peek
Function name: peek
Function Visibility (test): external
base
Finding type for base...
bytes32
Check copy_toekn_tuple
(1, -1, 0, 'BASE')
----
Type: bytes32
bytes32
Final Type: bytes32

Name: base Function: peek
Num: 1
Den: -1
Norm: 0
LF: BASE
Fields: 
Finance Type: undef
[*]Type fetched successfully
quote
Finding type for quote...
bytes32
Check copy_toekn_tuple
(2, -1, 0, 'QUOTE')
----
Type: bytes32
bytes32
Final Type: bytes32

Name: quote Function: peek
Num: 2
Den: -1
Norm: 0
LF: QUOTE
Fields: 
Finance Type: undef
[*]Type fetched successfully
amount
Finding type for amount...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amount Function: peek
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: BASE
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: QUOTE
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: BASE
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: QUOTE
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
paths_1(mapping(bytes6 => mapping(bytes6 => bytes6[]))) := ϕ(['paths_0', 'paths_2', 'paths_1', 'paths_3'])
has variable
typecheckig node...
paths_1(mapping(bytes6 => mapping(bytes6 => bytes6[]))) := ϕ(['paths_0', 'paths_2', 'paths_1', 'paths_3'])
Function name: peek
Phi
[i]Type for paths

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
price_1(uint256) := 1000000000000000000(uint256)
has variable
[i] price cleared
typecheckig node...
price_1(uint256) := 1000000000000000000(uint256)
Function name: peek
asgn
val: 1000000000000000000
18

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: price Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1000000000000000000
18
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for price

Name: price Function: peek
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_55(bytes6) = LIBRARY_CALL, dest:CastBytes32Bytes6, function:CastBytes32Bytes6.b6(bytes32), arguments:['base_1'] 
has variable
[i] TMP_55 cleared
clearing ir...?
base__1(bytes6) := TMP_55(bytes6)
has variable
[i] base_ cleared
typecheckig node...
TMP_55(bytes6) = LIBRARY_CALL, dest:CastBytes32Bytes6, function:CastBytes32Bytes6.b6(bytes32), arguments:['base_1'] 
Function name: peek
Library Call: b6
hlc contract name: CastBytes32Bytes6 func_name: b6
('t', [1], [-1], 1, '1')
base
wfc len: 1
Check copy_toekn_tuple
([1], [-1, -1], 0, '1', -1)
----
Type: bytes6
bytes6
Final Type: bytes6
COPIED
[i]Type for TMP_55

Name: TMP_55 Function: peek
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
base__1(bytes6) := TMP_55(bytes6)
Function name: peek
asgn

Name: TMP_55 Function: peek
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef

Name: base_ Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for base_

Name: base_ Function: peek
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_56(bytes6) = LIBRARY_CALL, dest:CastBytes32Bytes6, function:CastBytes32Bytes6.b6(bytes32), arguments:['quote_1'] 
has variable
[i] TMP_56 cleared
clearing ir...?
quote__1(bytes6) := TMP_56(bytes6)
has variable
[i] quote_ cleared
typecheckig node...
TMP_56(bytes6) = LIBRARY_CALL, dest:CastBytes32Bytes6, function:CastBytes32Bytes6.b6(bytes32), arguments:['quote_1'] 
Function name: peek
Library Call: b6
hlc contract name: CastBytes32Bytes6 func_name: b6
('t', [1], [-1], 1, '1')
quote
wfc len: 1
Check copy_toekn_tuple
([2], [-1, -1], 0, '1', -1)
----
Type: bytes6
bytes6
Final Type: bytes6
COPIED
[i]Type for TMP_56

Name: TMP_56 Function: peek
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
quote__1(bytes6) := TMP_56(bytes6)
Function name: peek
asgn

Name: TMP_56 Function: peek
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef

Name: quote_ Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for quote_

Name: quote_ Function: peek
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_37(mapping(bytes6 => bytes6[])) -> paths_1[base__1]
has variable
clearing ir...?
REF_38(bytes6[]) -> REF_37[quote__1]
has variable
clearing ir...?
path_1(bytes6[]) := REF_38(bytes6[])
has variable
[i] path cleared
typecheckig node...
REF_37(mapping(bytes6 => bytes6[])) -> paths_1[base__1]
Function name: peek
INDEX

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_37

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_38(bytes6[]) -> REF_37[quote__1]
Function name: peek
INDEX

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_38

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1(bytes6[]) := REF_38(bytes6[])
Function name: peek
asgn

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: path Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for path

Name: path Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
p_1(uint256) := 0(uint256)
has variable
[i] p cleared
typecheckig node...
p_1(uint256) := 0(uint256)
Function name: peek
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: p Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for p

Name: p Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
updateTime_1(uint256) := ϕ(['updateTime_0', 'updateTime_3'])
has variable
[i] updateTime cleared
clearing ir...?
price_2(uint256) := ϕ(['price_1', 'price_4'])
has variable
[i] price cleared
clearing ir...?
base__2(bytes6) := ϕ(['base__3', 'base__1'])
has variable
[i] base_ cleared
clearing ir...?
p_2(uint256) := ϕ(['p_1', 'p_3'])
has variable
[i] p cleared
clearing ir...?
REF_39 -> LENGTH path_1
clearing ir...?
TMP_57(bool) = p_2 < REF_39
has variable
[i] TMP_57 cleared
clearing ir...?
CONDITION TMP_57
typecheckig node...
updateTime_1(uint256) := ϕ(['updateTime_0', 'updateTime_3'])
Function name: peek
Phi
[i]Type for updateTime

Name: updateTime Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price_2(uint256) := ϕ(['price_1', 'price_4'])
Function name: peek
Phi
[i]Type for price

Name: price Function: peek
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
base__2(bytes6) := ϕ(['base__3', 'base__1'])
Function name: peek
Phi
[i]Type for base_

Name: base_ Function: peek
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
p_2(uint256) := ϕ(['p_1', 'p_3'])
Function name: peek
Phi
[i]Type for p

Name: p Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_39 -> LENGTH path_1
[i]Type for REF_39

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_57(bool) = p_2 < REF_39
Function name: peek
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: p Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_57 Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_57(bool) = p_2 < REF_39
XXXXX
CONDITION TMP_57
Condition...
Conidtion: 
TMP_57
TMP_57
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_40(bytes6) -> path_1[p_2]
has variable
clearing ir...?
TUPLE_0(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._peek(bytes6,bytes6,uint256,uint256)(base__2,REF_40,price_2,updateTime_1)
has variable
clearing ir...?
price_4(uint256)= UNPACK TUPLE_0 index: 0 
has variable
[i] price cleared
clearing ir...?
updateTime_3(uint256)= UNPACK TUPLE_0 index: 1 
has variable
[i] updateTime cleared
typecheckig node...
REF_40(bytes6) -> path_1[p_2]
Function name: peek
INDEX

Name: path Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: peek
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_40

Name: path Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_0(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._peek(bytes6,bytes6,uint256,uint256)(base__2,REF_40,price_2,updateTime_1)
Function name: peek
Internal call...
_peek
base_
REF_40
price
updateTime
Function: _peek
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[1], [-1], 0, '1', [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 18, None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _peek
Function Visibility: private
clearning node...
clearing ir...?
base_1(bytes6) := ϕ(['base__2'])
has variable
[i] base cleared
clearing ir...?
quote_1(bytes6) := ϕ(['quote__1', 'REF_40'])
has variable
[i] quote cleared
clearing ir...?
priceIn_1(uint256) := ϕ(['price_2'])
has variable
[i] priceIn cleared
clearing ir...?
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
has variable
[i] updateTimeIn cleared
clearing ir...?
sources_1(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
has variable
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _peek
Phi
[i]Type for base

Name: base Function: _peek
Num: 1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['quote__1', 'REF_40'])
Function name: _peek
Phi
[i]Type for quote

Name: quote Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _peek
Phi
[i]Type for priceIn

Name: priceIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _peek
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_1(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _peek
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_49(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_1[base_1]
has variable
clearing ir...?
REF_50(CompositeMultiOracle.Source) -> REF_49[quote_1]
has variable
clearing ir...?
source_1(CompositeMultiOracle.Source) := REF_50(CompositeMultiOracle.Source)
has variable
[i] source cleared
typecheckig node...
REF_49(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_1[base_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_49

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_50(CompositeMultiOracle.Source) -> REF_49[quote_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_50

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_50(CompositeMultiOracle.Source)
Function name: _peek
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_51(address) -> source_1.source
has variable
clearing ir...?
TMP_67 = CONVERT 0 to address
has variable
[i] TMP_67 cleared
clearing ir...?
TMP_68(bool) = REF_51 != TMP_67
has variable
[i] TMP_68 cleared
clearing ir...?
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Source not found)
typecheckig node...
REF_51(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_67 = CONVERT 0 to address
Function name: _peek
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_67 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_67

Name: TMP_67 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_68(bool) = REF_51 != TMP_67
Function name: _peek
[i]Type for TMP_68

Name: TMP_68 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Source not found)
[i]Type for TMP_69

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_52(address) -> source_1.source
has variable
clearing ir...?
TMP_70 = CONVERT REF_52 to IOracle
has variable
[i] TMP_70 cleared
clearing ir...?
REF_54(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_71(uint256) = 10 (c)** REF_54
has variable
[i] TMP_71 cleared
clearing ir...?
TUPLE_4(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_70(IOracle), function:peek, arguments:['base_1', 'quote_1', 'TMP_71']  
has variable
clearing ir...?
priceOut_1(uint256)= UNPACK TUPLE_4 index: 0 
has variable
[i] priceOut cleared
clearing ir...?
updateTimeOut_1(uint256)= UNPACK TUPLE_4 index: 1 
has variable
[i] updateTimeOut cleared
typecheckig node...
REF_52(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_70 = CONVERT REF_52 to IOracle
Function name: _peek

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_70 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_70

Name: TMP_70 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_54(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_54

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_71(uint256) = 10 (c)** REF_54
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_71 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_71

Name: TMP_71 Function: _peek
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_4(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_70(IOracle), function:peek, arguments:['base_1', 'quote_1', 'TMP_71']  
Function name: _peek
High Call: peek
func name:peek
other func name:peek
TUPLE_4
hlc contract name: SOURCE func_name: peek
('t', [1], [2], 3, None)
base
quote
TMP_71
('c', [-1], [-1], 0, None)
base
quote
TMP_71
wfc len: 2
COPIED
[i]Type for TUPLE_4

Name: TUPLE_4 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_4 index: 0 
Function name: _peek
Reading tuple TUPLE_4 index 0
Check copy_toekn_tuple
([1, -1], [-1, -1], '*', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_4 index: 1 
Function name: _peek
Reading tuple TUPLE_4 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_72(uint256) = priceIn_1 (c)* priceOut_1
has variable
[i] TMP_72 cleared
clearing ir...?
REF_55(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_73(uint256) = 10 (c)** REF_55
has variable
[i] TMP_73 cleared
clearing ir...?
TMP_74(uint256) = TMP_72 (c)/ TMP_73
has variable
[i] TMP_74 cleared
clearing ir...?
priceOut_2(uint256) := TMP_74(uint256)
has variable
[i] priceOut cleared
typecheckig node...
TMP_72(uint256) = priceIn_1 (c)* priceOut_1
Function name: _peek
testing mul...
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_72

Name: TMP_72 Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
REF_55(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_55

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73(uint256) = 10 (c)** REF_55
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_73 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_73

Name: TMP_73 Function: _peek
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_74(uint256) = TMP_72 (c)/ TMP_73
Function name: _peek
Error with TMP_74 in function _peek
Error with: TMP_74 in function _peek
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fde4febdc10>]
lnorm: * rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_74 Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_74 Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_2(uint256) := TMP_74(uint256)
Function name: _peek
asgn

Name: TMP_74 Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
has variable
[i] TMP_75 cleared
clearing ir...?
CONDITION TMP_75
typecheckig node...
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _peek
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_75 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_75

Name: TMP_75 Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
XXXXX
CONDITION TMP_75
Condition...
Conidtion: 
TMP_75
TMP_75
clearning node...
clearing ir...?
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _peek
asgn

Name: updateTimeIn Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
XXXXX
clearning node...
clearing ir...?
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _peek
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _peek
asgn

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_peek":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _peek
Phi
[i]Type for base

Name: base Function: _peek
Num: 1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['quote__1', 'REF_40'])
Function name: _peek
Phi
[i]Type for quote

Name: quote Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _peek
Phi
[i]Type for priceIn

Name: priceIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _peek
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_1(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _peek
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_49(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_1[base_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_49

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_50(CompositeMultiOracle.Source) -> REF_49[quote_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_50

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_50(CompositeMultiOracle.Source)
Function name: _peek
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_51(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_67 = CONVERT 0 to address
Function name: _peek
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_67 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_67

Name: TMP_67 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_68(bool) = REF_51 != TMP_67
Function name: _peek
[i]Type for TMP_68

Name: TMP_68 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Source not found)
[i]Type for TMP_69

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_52(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_70 = CONVERT REF_52 to IOracle
Function name: _peek

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_70 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_70

Name: TMP_70 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_54(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_54

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_71(uint256) = 10 (c)** REF_54
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_71 Function: _peek
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:*
-1
val: 10
1
[i]Type for TMP_71

Name: TMP_71 Function: _peek
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_4(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_70(IOracle), function:peek, arguments:['base_1', 'quote_1', 'TMP_71']  
Function name: _peek
High Call: peek
func name:peek
other func name:peek
TUPLE_4
hlc contract name: SOURCE func_name: peek
('t', [1], [2], 3, None)
base
quote
TMP_71
('c', [-1], [-1], 0, None)
base
quote
TMP_71
wfc len: 2
COPIED
[i]Type for TUPLE_4

Name: TUPLE_4 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_4 index: 0 
Function name: _peek
Reading tuple TUPLE_4 index 0
Check copy_toekn_tuple
([1, -1], [-1, -1], '*', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_4 index: 1 
Function name: _peek
Reading tuple TUPLE_4 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_72(uint256) = priceIn_1 (c)* priceOut_1
Function name: _peek
testing mul...
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_72

Name: TMP_72 Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
REF_55(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_55

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73(uint256) = 10 (c)** REF_55
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_73 Function: _peek
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:*
-1
val: 10
1
[i]Type for TMP_73

Name: TMP_73 Function: _peek
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_74(uint256) = TMP_72 (c)/ TMP_73
Function name: _peek
[W] Initializing defined variable to constant
lnorm: * rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_2(uint256) := TMP_74(uint256)
Function name: _peek
asgn

Name: TMP_74 Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _peek
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_75 Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_75

Name: TMP_75 Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
XXXXX
CONDITION TMP_75
Condition...
Conidtion: 
TMP_75
TMP_75
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _peek
asgn

Name: updateTimeIn Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
XXXXX
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _peek
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _peek
asgn

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "_peek":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: _peek

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TUPLE_0

Name: TUPLE_0 Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TUPLE_0(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._peek(bytes6,bytes6,uint256,uint256)(base__2,REF_40,price_2,updateTime_1)
XXXXX
price_4(uint256)= UNPACK TUPLE_0 index: 0 
Function name: peek
Reading tuple TUPLE_0 index 0
Check copy_toekn_tuple
([1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price

Name: price Function: peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTime_3(uint256)= UNPACK TUPLE_0 index: 1 
Function name: peek
Reading tuple TUPLE_0 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTime

Name: updateTime Function: peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_41(bytes6) -> path_1[p_2]
has variable
clearing ir...?
base__3(bytes6) := REF_41(bytes6)
has variable
[i] base_ cleared
typecheckig node...
REF_41(bytes6) -> path_1[p_2]
Function name: peek
INDEX

Name: path Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: peek
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_41

Name: path Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
base__3(bytes6) := REF_41(bytes6)
Function name: peek
asgn

Name: path Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: base_ Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for base_

Name: base_ Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_58(uint256) := p_2(uint256)
has variable
[i] TMP_58 cleared
clearing ir...?
p_3(uint256) = p_2 (c)+ 1
has variable
[i] p cleared
typecheckig node...
TMP_58(uint256) := p_2(uint256)
Function name: peek
asgn

Name: p Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_58 Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_58

Name: TMP_58 Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
p_3(uint256) = p_2 (c)+ 1
Function name: peek
val: 1

Name: p Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: p Function: peek
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for p

Name: p Function: peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TUPLE_1(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._peek(bytes6,bytes6,uint256,uint256)(base__2,quote__1,price_2,updateTime_1)
has variable
clearing ir...?
price_3(uint256)= UNPACK TUPLE_1 index: 0 
has variable
[i] price cleared
clearing ir...?
updateTime_2(uint256)= UNPACK TUPLE_1 index: 1 
has variable
[i] updateTime cleared
typecheckig node...
TUPLE_1(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._peek(bytes6,bytes6,uint256,uint256)(base__2,quote__1,price_2,updateTime_1)
Function name: peek
Internal call...
_peek
base_
quote_
price
updateTime
Function: _peek
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, '1', [], -1]
-100
Parameter length: 1
[[1], [-1], 0, '1', [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 18, None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _peek
Function Visibility: private
clearning node...
clearing ir...?
base_1(bytes6) := ϕ(['base__2'])
has variable
[i] base cleared
clearing ir...?
quote_1(bytes6) := ϕ(['quote__1', 'REF_40'])
has variable
[i] quote cleared
clearing ir...?
priceIn_1(uint256) := ϕ(['price_2'])
has variable
[i] priceIn cleared
clearing ir...?
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
has variable
[i] updateTimeIn cleared
clearing ir...?
sources_1(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
has variable
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _peek
Phi
[i]Type for base

Name: base Function: _peek
Num: -1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['quote__1', 'REF_40'])
Function name: _peek
Phi
[i]Type for quote

Name: quote Function: _peek
Num: 2
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _peek
Phi
[i]Type for priceIn

Name: priceIn Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _peek
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_1(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _peek
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_49(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_1[base_1]
has variable
clearing ir...?
REF_50(CompositeMultiOracle.Source) -> REF_49[quote_1]
has variable
clearing ir...?
source_1(CompositeMultiOracle.Source) := REF_50(CompositeMultiOracle.Source)
has variable
[i] source cleared
typecheckig node...
REF_49(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_1[base_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_49

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_50(CompositeMultiOracle.Source) -> REF_49[quote_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_50

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_50(CompositeMultiOracle.Source)
Function name: _peek
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_51(address) -> source_1.source
has variable
clearing ir...?
TMP_67 = CONVERT 0 to address
has variable
[i] TMP_67 cleared
clearing ir...?
TMP_68(bool) = REF_51 != TMP_67
has variable
[i] TMP_68 cleared
clearing ir...?
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Source not found)
typecheckig node...
REF_51(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_67 = CONVERT 0 to address
Function name: _peek
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_67 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_67

Name: TMP_67 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_68(bool) = REF_51 != TMP_67
Function name: _peek
[i]Type for TMP_68

Name: TMP_68 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Source not found)
[i]Type for TMP_69

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_52(address) -> source_1.source
has variable
clearing ir...?
TMP_70 = CONVERT REF_52 to IOracle
has variable
[i] TMP_70 cleared
clearing ir...?
REF_54(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_71(uint256) = 10 (c)** REF_54
has variable
[i] TMP_71 cleared
clearing ir...?
TUPLE_4(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_70(IOracle), function:peek, arguments:['base_1', 'quote_1', 'TMP_71']  
has variable
clearing ir...?
priceOut_1(uint256)= UNPACK TUPLE_4 index: 0 
has variable
[i] priceOut cleared
clearing ir...?
updateTimeOut_1(uint256)= UNPACK TUPLE_4 index: 1 
has variable
[i] updateTimeOut cleared
typecheckig node...
REF_52(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_70 = CONVERT REF_52 to IOracle
Function name: _peek

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_70 Function: _peek
Num: 
Den: 
Norm: u
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_70

Name: TMP_70 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_54(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_54

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_71(uint256) = 10 (c)** REF_54
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_71 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_71

Name: TMP_71 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_4(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_70(IOracle), function:peek, arguments:['base_1', 'quote_1', 'TMP_71']  
Function name: _peek
High Call: peek
func name:peek
other func name:peek
TUPLE_4
hlc contract name: SOURCE func_name: peek
('t', [1], [2], 3, None)
base
quote
TMP_71
('c', [-1], [-1], 0, None)
base
quote
TMP_71
wfc len: 2
COPIED
[i]Type for TUPLE_4

Name: TUPLE_4 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_4 index: 0 
Function name: _peek
Reading tuple TUPLE_4 index 0
Check copy_toekn_tuple
([-1, -1], [-1, 2], '*', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _peek
Num: -1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_4 index: 1 
Function name: _peek
Reading tuple TUPLE_4 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_72(uint256) = priceIn_1 (c)* priceOut_1
has variable
[i] TMP_72 cleared
clearing ir...?
REF_55(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_73(uint256) = 10 (c)** REF_55
has variable
[i] TMP_73 cleared
clearing ir...?
TMP_74(uint256) = TMP_72 (c)/ TMP_73
has variable
[i] TMP_74 cleared
clearing ir...?
priceOut_2(uint256) := TMP_74(uint256)
has variable
[i] priceOut cleared
typecheckig node...
TMP_72(uint256) = priceIn_1 (c)* priceOut_1
Function name: _peek
testing mul...
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_10 Function: None
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_72

Name: TMP_72 Function: _peek
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
REF_55(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_55

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73(uint256) = 10 (c)** REF_55
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_73 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_73

Name: TMP_73 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_74(uint256) = TMP_72 (c)/ TMP_73
Function name: _peek
lnorm: * rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_74(uint256) = TMP_72 (c)/ TMP_73
XXXXX
priceOut_2(uint256) := TMP_74(uint256)
Function name: _peek
asgn

Name: TMP_74 Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
has variable
[i] TMP_75 cleared
clearing ir...?
CONDITION TMP_75
typecheckig node...
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _peek
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_75

Name: TMP_75 Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_75
Condition...
Conidtion: 
TMP_75
TMP_75
clearning node...
clearing ir...?
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _peek
asgn

Name: updateTimeIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _peek
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _peek
asgn

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_peek":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _peek
Phi
[i]Type for base

Name: base Function: _peek
Num: -1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['quote__1', 'REF_40'])
Function name: _peek
Phi
[i]Type for quote

Name: quote Function: _peek
Num: 2
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _peek
Phi
[i]Type for priceIn

Name: priceIn Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _peek
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_1(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _peek
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_49(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_1[base_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_49

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_50(CompositeMultiOracle.Source) -> REF_49[quote_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_50

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_50(CompositeMultiOracle.Source)
Function name: _peek
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_51(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_67 = CONVERT 0 to address
Function name: _peek
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_67 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_67

Name: TMP_67 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_68(bool) = REF_51 != TMP_67
Function name: _peek
[i]Type for TMP_68

Name: TMP_68 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Source not found)
[i]Type for TMP_69

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_52(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_70 = CONVERT REF_52 to IOracle
Function name: _peek

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_70 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_70

Name: TMP_70 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_54(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_54

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_71(uint256) = 10 (c)** REF_54
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_71 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_71

Name: TMP_71 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_4(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_70(IOracle), function:peek, arguments:['base_1', 'quote_1', 'TMP_71']  
Function name: _peek
High Call: peek
func name:peek
other func name:peek
TUPLE_4
hlc contract name: SOURCE func_name: peek
('t', [1], [2], 3, None)
base
quote
TMP_71
('c', [-1], [-1], 0, None)
base
quote
TMP_71
wfc len: 2
COPIED
[i]Type for TUPLE_4

Name: TUPLE_4 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_4 index: 0 
Function name: _peek
Reading tuple TUPLE_4 index 0
Check copy_toekn_tuple
([-1, -1], [-1, 2], '*', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _peek
Num: -1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_4 index: 1 
Function name: _peek
Reading tuple TUPLE_4 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_72(uint256) = priceIn_1 (c)* priceOut_1
Function name: _peek
testing mul...
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_11 Function: None
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_72

Name: TMP_72 Function: _peek
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
REF_55(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_55

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73(uint256) = 10 (c)** REF_55
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_73 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_73

Name: TMP_73 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_74(uint256) = TMP_72 (c)/ TMP_73
Function name: _peek
[W] Initializing defined variable to constant
lnorm: * rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_74(uint256) = TMP_72 (c)/ TMP_73
XXXXX
priceOut_2(uint256) := TMP_74(uint256)
Function name: _peek
asgn

Name: TMP_74 Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _peek
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_75

Name: TMP_75 Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_75
Condition...
Conidtion: 
TMP_75
TMP_75
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _peek
asgn

Name: updateTimeIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _peek
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _peek
asgn

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "_peek":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: _peek

Name: priceOut Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TUPLE_1

Name: TUPLE_1 Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TUPLE_1(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._peek(bytes6,bytes6,uint256,uint256)(base__2,quote__1,price_2,updateTime_1)
XXXXX
price_3(uint256)= UNPACK TUPLE_1 index: 0 
Function name: peek
Reading tuple TUPLE_1 index 0
Check copy_toekn_tuple
([1], [2], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price

Name: price Function: peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTime_2(uint256)= UNPACK TUPLE_1 index: 1 
Function name: peek
Reading tuple TUPLE_1 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTime

Name: updateTime Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_59(uint256) = price_3 (c)* amount_1
has variable
[i] TMP_59 cleared
clearing ir...?
TMP_60(uint256) = TMP_59 (c)/ 1000000000000000000
has variable
[i] TMP_60 cleared
clearing ir...?
value_1(uint256) := TMP_60(uint256)
has variable
[i] value cleared
typecheckig node...
TMP_59(uint256) = price_3 (c)* amount_1
Function name: peek
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_13 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_59 Function: peek
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: peek
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_60(uint256) = TMP_59 (c)/ 1000000000000000000
Function name: peek
val: 1000000000000000000
18
val: 1000000000000000000
18
lnorm: 0 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_60 Function: peek
Num: 
Den: 
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: TMP_59 Function: peek
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_60 Function: peek
Num: 
Den: 
Norm: -18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: peek
Num: 1
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef
done.
value_1(uint256) := TMP_60(uint256)
Function name: peek
asgn

Name: TMP_60 Function: peek
Num: 1
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: value Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for value

Name: value Function: peek
Num: 1
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "peek":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
paths_1(mapping(bytes6 => mapping(bytes6 => bytes6[]))) := ϕ(['paths_0', 'paths_2', 'paths_1', 'paths_3'])
Function name: peek
Phi
[i]Type for paths

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
price_1(uint256) := 1000000000000000000(uint256)
Function name: peek
asgn
val: 1000000000000000000
18

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: price Function: peek
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
val: 1000000000000000000
18
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for price

Name: price Function: peek
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_55(bytes6) = LIBRARY_CALL, dest:CastBytes32Bytes6, function:CastBytes32Bytes6.b6(bytes32), arguments:['base_1'] 
Function name: peek
Library Call: b6
hlc contract name: CastBytes32Bytes6 func_name: b6
('t', [1], [-1], 1, '1')
base
wfc len: 1
Check copy_toekn_tuple
([1], [-1, -1], 0, '1', -1)
----
Type: bytes6
bytes6
Final Type: bytes6
COPIED
[i]Type for TMP_55

Name: TMP_55 Function: peek
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
base__1(bytes6) := TMP_55(bytes6)
Function name: peek
asgn

Name: TMP_55 Function: peek
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef

Name: base_ Function: peek
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for base_

Name: base_ Function: peek
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_56(bytes6) = LIBRARY_CALL, dest:CastBytes32Bytes6, function:CastBytes32Bytes6.b6(bytes32), arguments:['quote_1'] 
Function name: peek
Library Call: b6
hlc contract name: CastBytes32Bytes6 func_name: b6
('t', [1], [-1], 1, '1')
quote
wfc len: 1
Check copy_toekn_tuple
([2], [-1, -1], 0, '1', -1)
----
Type: bytes6
bytes6
Final Type: bytes6
COPIED
[i]Type for TMP_56

Name: TMP_56 Function: peek
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
quote__1(bytes6) := TMP_56(bytes6)
Function name: peek
asgn

Name: TMP_56 Function: peek
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef

Name: quote_ Function: peek
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for quote_

Name: quote_ Function: peek
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_37(mapping(bytes6 => bytes6[])) -> paths_1[base__1]
Function name: peek
INDEX

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_37

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_38(bytes6[]) -> REF_37[quote__1]
Function name: peek
INDEX

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_38

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1(bytes6[]) := REF_38(bytes6[])
Function name: peek
asgn

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: path Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for path

Name: path Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
p_1(uint256) := 0(uint256)
Function name: peek
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: p Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for p

Name: p Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
updateTime_1(uint256) := ϕ(['updateTime_0', 'updateTime_3'])
Function name: peek
Phi
[i]Type for updateTime

Name: updateTime Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price_2(uint256) := ϕ(['price_1', 'price_4'])
Function name: peek
Phi
[i]Type for price

Name: price Function: peek
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
base__2(bytes6) := ϕ(['base__3', 'base__1'])
Function name: peek
Phi
[i]Type for base_

Name: base_ Function: peek
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
p_2(uint256) := ϕ(['p_1', 'p_3'])
Function name: peek
Phi
[i]Type for p

Name: p Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_39 -> LENGTH path_1
[i]Type for REF_39

Name: REF_39 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_57(bool) = p_2 < REF_39
Function name: peek
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: p Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_57 Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_57(bool) = p_2 < REF_39
XXXXX
CONDITION TMP_57
Condition...
Conidtion: 
TMP_57
TMP_57
typecheckig node...
typecheckig node...
REF_40(bytes6) -> path_1[p_2]
Function name: peek
INDEX

Name: path Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: peek
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_40

Name: path Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_0(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._peek(bytes6,bytes6,uint256,uint256)(base__2,REF_40,price_2,updateTime_1)
Function name: peek
Internal call...
_peek
base_
REF_40
price
updateTime
Function: _peek
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, '1', [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 18, None, [], -1]
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[1], [-1], 0, '1', [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 18, None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _peek
Function Visibility: private
clearning node...
clearing ir...?
base_1(bytes6) := ϕ(['base__2'])
has variable
[i] base cleared
clearing ir...?
quote_1(bytes6) := ϕ(['quote__1', 'REF_40'])
has variable
[i] quote cleared
clearing ir...?
priceIn_1(uint256) := ϕ(['price_2'])
has variable
[i] priceIn cleared
clearing ir...?
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
has variable
[i] updateTimeIn cleared
clearing ir...?
sources_1(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
has variable
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _peek
Phi
[i]Type for base

Name: base Function: _peek
Num: 1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['quote__1', 'REF_40'])
Function name: _peek
Phi
[i]Type for quote

Name: quote Function: _peek
Num: -1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _peek
Phi
[i]Type for priceIn

Name: priceIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _peek
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_1(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _peek
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_49(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_1[base_1]
has variable
clearing ir...?
REF_50(CompositeMultiOracle.Source) -> REF_49[quote_1]
has variable
clearing ir...?
source_1(CompositeMultiOracle.Source) := REF_50(CompositeMultiOracle.Source)
has variable
[i] source cleared
typecheckig node...
REF_49(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_1[base_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_49

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_50(CompositeMultiOracle.Source) -> REF_49[quote_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_50

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_50(CompositeMultiOracle.Source)
Function name: _peek
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_51(address) -> source_1.source
has variable
clearing ir...?
TMP_67 = CONVERT 0 to address
has variable
[i] TMP_67 cleared
clearing ir...?
TMP_68(bool) = REF_51 != TMP_67
has variable
[i] TMP_68 cleared
clearing ir...?
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Source not found)
typecheckig node...
REF_51(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_67 = CONVERT 0 to address
Function name: _peek
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_67 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_67

Name: TMP_67 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_68(bool) = REF_51 != TMP_67
Function name: _peek
[i]Type for TMP_68

Name: TMP_68 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Source not found)
[i]Type for TMP_69

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_52(address) -> source_1.source
has variable
clearing ir...?
TMP_70 = CONVERT REF_52 to IOracle
has variable
[i] TMP_70 cleared
clearing ir...?
REF_54(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_71(uint256) = 10 (c)** REF_54
has variable
[i] TMP_71 cleared
clearing ir...?
TUPLE_4(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_70(IOracle), function:peek, arguments:['base_1', 'quote_1', 'TMP_71']  
has variable
clearing ir...?
priceOut_1(uint256)= UNPACK TUPLE_4 index: 0 
has variable
[i] priceOut cleared
clearing ir...?
updateTimeOut_1(uint256)= UNPACK TUPLE_4 index: 1 
has variable
[i] updateTimeOut cleared
typecheckig node...
REF_52(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_70 = CONVERT REF_52 to IOracle
Function name: _peek

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_70 Function: _peek
Num: 
Den: 
Norm: u
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_70

Name: TMP_70 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_54(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_54

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_71(uint256) = 10 (c)** REF_54
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_71 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_71

Name: TMP_71 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_4(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_70(IOracle), function:peek, arguments:['base_1', 'quote_1', 'TMP_71']  
Function name: _peek
High Call: peek
func name:peek
other func name:peek
TUPLE_4
hlc contract name: SOURCE func_name: peek
('t', [1], [2], 3, None)
base
quote
TMP_71
('c', [-1], [-1], 0, None)
base
quote
TMP_71
wfc len: 2
COPIED
[i]Type for TUPLE_4

Name: TUPLE_4 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_4 index: 0 
Function name: _peek
Reading tuple TUPLE_4 index 0
Check copy_toekn_tuple
([1, -1], [-1, -1], '*', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_4 index: 1 
Function name: _peek
Reading tuple TUPLE_4 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_72(uint256) = priceIn_1 (c)* priceOut_1
has variable
[i] TMP_72 cleared
clearing ir...?
REF_55(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_73(uint256) = 10 (c)** REF_55
has variable
[i] TMP_73 cleared
clearing ir...?
TMP_74(uint256) = TMP_72 (c)/ TMP_73
has variable
[i] TMP_74 cleared
clearing ir...?
priceOut_2(uint256) := TMP_74(uint256)
has variable
[i] priceOut cleared
typecheckig node...
TMP_72(uint256) = priceIn_1 (c)* priceOut_1
Function name: _peek
testing mul...
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_72

Name: TMP_72 Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
REF_55(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_55

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73(uint256) = 10 (c)** REF_55
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_73 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_73

Name: TMP_73 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_74(uint256) = TMP_72 (c)/ TMP_73
Function name: _peek
lnorm: * rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_74(uint256) = TMP_72 (c)/ TMP_73
XXXXX
priceOut_2(uint256) := TMP_74(uint256)
Function name: _peek
asgn

Name: TMP_74 Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
has variable
[i] TMP_75 cleared
clearing ir...?
CONDITION TMP_75
typecheckig node...
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _peek
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_75

Name: TMP_75 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_75
Condition...
Conidtion: 
TMP_75
TMP_75
clearning node...
clearing ir...?
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _peek
asgn

Name: updateTimeIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _peek
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _peek
asgn

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_peek":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _peek
Phi
[i]Type for base

Name: base Function: _peek
Num: 1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['quote__1', 'REF_40'])
Function name: _peek
Phi
[i]Type for quote

Name: quote Function: _peek
Num: -1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _peek
Phi
[i]Type for priceIn

Name: priceIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _peek
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_1(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _peek
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_49(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_1[base_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_49

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_50(CompositeMultiOracle.Source) -> REF_49[quote_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_50

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_50(CompositeMultiOracle.Source)
Function name: _peek
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_51(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_67 = CONVERT 0 to address
Function name: _peek
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_67 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_67

Name: TMP_67 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_68(bool) = REF_51 != TMP_67
Function name: _peek
[i]Type for TMP_68

Name: TMP_68 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Source not found)
[i]Type for TMP_69

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_52(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_70 = CONVERT REF_52 to IOracle
Function name: _peek

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_70 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_70

Name: TMP_70 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_54(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_54

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_71(uint256) = 10 (c)** REF_54
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_71 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_71

Name: TMP_71 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_4(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_70(IOracle), function:peek, arguments:['base_1', 'quote_1', 'TMP_71']  
Function name: _peek
High Call: peek
func name:peek
other func name:peek
TUPLE_4
hlc contract name: SOURCE func_name: peek
('t', [1], [2], 3, None)
base
quote
TMP_71
('c', [-1], [-1], 0, None)
base
quote
TMP_71
wfc len: 2
COPIED
[i]Type for TUPLE_4

Name: TUPLE_4 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_4 index: 0 
Function name: _peek
Reading tuple TUPLE_4 index 0
Check copy_toekn_tuple
([1, -1], [-1, -1], '*', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_4 index: 1 
Function name: _peek
Reading tuple TUPLE_4 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_72(uint256) = priceIn_1 (c)* priceOut_1
Function name: _peek
testing mul...
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_72

Name: TMP_72 Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
REF_55(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_55

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73(uint256) = 10 (c)** REF_55
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_73 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_73

Name: TMP_73 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_74(uint256) = TMP_72 (c)/ TMP_73
Function name: _peek
[W] Initializing defined variable to constant
lnorm: * rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_74(uint256) = TMP_72 (c)/ TMP_73
XXXXX
priceOut_2(uint256) := TMP_74(uint256)
Function name: _peek
asgn

Name: TMP_74 Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _peek
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_75

Name: TMP_75 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_75
Condition...
Conidtion: 
TMP_75
TMP_75
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _peek
asgn

Name: updateTimeIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _peek
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _peek
asgn

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "_peek":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: _peek

Name: priceOut Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TUPLE_0

Name: TUPLE_0 Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TUPLE_0(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._peek(bytes6,bytes6,uint256,uint256)(base__2,REF_40,price_2,updateTime_1)
XXXXX
price_4(uint256)= UNPACK TUPLE_0 index: 0 
Function name: peek
Reading tuple TUPLE_0 index 0
Check copy_toekn_tuple
([1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price

Name: price Function: peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTime_3(uint256)= UNPACK TUPLE_0 index: 1 
Function name: peek
Reading tuple TUPLE_0 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTime

Name: updateTime Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_41(bytes6) -> path_1[p_2]
Function name: peek
INDEX

Name: path Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: peek
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_41

Name: path Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
base__3(bytes6) := REF_41(bytes6)
Function name: peek
asgn

Name: path Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: base_ Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for base_

Name: base_ Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_58(uint256) := p_2(uint256)
Function name: peek
asgn

Name: p Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_58 Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_58

Name: TMP_58 Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
p_3(uint256) = p_2 (c)+ 1
Function name: peek
val: 1

Name: p Function: peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: p Function: peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for p

Name: p Function: peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TUPLE_1(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._peek(bytes6,bytes6,uint256,uint256)(base__2,quote__1,price_2,updateTime_1)
Function name: peek
Internal call...
_peek
base_
quote_
price
updateTime
Function: _peek
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, '1', [], -1]
-100
Parameter length: 1
[[1], [-1], 0, '1', [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 18, None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _peek
Function Visibility: private
clearning node...
clearing ir...?
base_1(bytes6) := ϕ(['base__2'])
has variable
[i] base cleared
clearing ir...?
quote_1(bytes6) := ϕ(['quote__1', 'REF_40'])
has variable
[i] quote cleared
clearing ir...?
priceIn_1(uint256) := ϕ(['price_2'])
has variable
[i] priceIn cleared
clearing ir...?
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
has variable
[i] updateTimeIn cleared
clearing ir...?
sources_1(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
has variable
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _peek
Phi
[i]Type for base

Name: base Function: _peek
Num: -1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['quote__1', 'REF_40'])
Function name: _peek
Phi
[i]Type for quote

Name: quote Function: _peek
Num: 2
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _peek
Phi
[i]Type for priceIn

Name: priceIn Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _peek
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_1(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _peek
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_49(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_1[base_1]
has variable
clearing ir...?
REF_50(CompositeMultiOracle.Source) -> REF_49[quote_1]
has variable
clearing ir...?
source_1(CompositeMultiOracle.Source) := REF_50(CompositeMultiOracle.Source)
has variable
[i] source cleared
typecheckig node...
REF_49(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_1[base_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_49

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_50(CompositeMultiOracle.Source) -> REF_49[quote_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_50

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_50(CompositeMultiOracle.Source)
Function name: _peek
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_51(address) -> source_1.source
has variable
clearing ir...?
TMP_67 = CONVERT 0 to address
has variable
[i] TMP_67 cleared
clearing ir...?
TMP_68(bool) = REF_51 != TMP_67
has variable
[i] TMP_68 cleared
clearing ir...?
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Source not found)
typecheckig node...
REF_51(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_67 = CONVERT 0 to address
Function name: _peek
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_67 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_67

Name: TMP_67 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_68(bool) = REF_51 != TMP_67
Function name: _peek
[i]Type for TMP_68

Name: TMP_68 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Source not found)
[i]Type for TMP_69

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_52(address) -> source_1.source
has variable
clearing ir...?
TMP_70 = CONVERT REF_52 to IOracle
has variable
[i] TMP_70 cleared
clearing ir...?
REF_54(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_71(uint256) = 10 (c)** REF_54
has variable
[i] TMP_71 cleared
clearing ir...?
TUPLE_4(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_70(IOracle), function:peek, arguments:['base_1', 'quote_1', 'TMP_71']  
has variable
clearing ir...?
priceOut_1(uint256)= UNPACK TUPLE_4 index: 0 
has variable
[i] priceOut cleared
clearing ir...?
updateTimeOut_1(uint256)= UNPACK TUPLE_4 index: 1 
has variable
[i] updateTimeOut cleared
typecheckig node...
REF_52(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_70 = CONVERT REF_52 to IOracle
Function name: _peek

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_70 Function: _peek
Num: 
Den: 
Norm: u
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_70

Name: TMP_70 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_54(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_54

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_71(uint256) = 10 (c)** REF_54
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_71 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_71

Name: TMP_71 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_4(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_70(IOracle), function:peek, arguments:['base_1', 'quote_1', 'TMP_71']  
Function name: _peek
High Call: peek
func name:peek
other func name:peek
TUPLE_4
hlc contract name: SOURCE func_name: peek
('t', [1], [2], 3, None)
base
quote
TMP_71
('c', [-1], [-1], 0, None)
base
quote
TMP_71
wfc len: 2
COPIED
[i]Type for TUPLE_4

Name: TUPLE_4 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_4 index: 0 
Function name: _peek
Reading tuple TUPLE_4 index 0
Check copy_toekn_tuple
([-1, -1], [-1, 2], '*', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _peek
Num: -1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_4 index: 1 
Function name: _peek
Reading tuple TUPLE_4 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_72(uint256) = priceIn_1 (c)* priceOut_1
has variable
[i] TMP_72 cleared
clearing ir...?
REF_55(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_73(uint256) = 10 (c)** REF_55
has variable
[i] TMP_73 cleared
clearing ir...?
TMP_74(uint256) = TMP_72 (c)/ TMP_73
has variable
[i] TMP_74 cleared
clearing ir...?
priceOut_2(uint256) := TMP_74(uint256)
has variable
[i] priceOut cleared
typecheckig node...
TMP_72(uint256) = priceIn_1 (c)* priceOut_1
Function name: _peek
testing mul...
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_15 Function: None
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_72

Name: TMP_72 Function: _peek
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
REF_55(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_55

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73(uint256) = 10 (c)** REF_55
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_73 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_73

Name: TMP_73 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_74(uint256) = TMP_72 (c)/ TMP_73
Function name: _peek
lnorm: * rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_74(uint256) = TMP_72 (c)/ TMP_73
XXXXX
priceOut_2(uint256) := TMP_74(uint256)
Function name: _peek
asgn

Name: TMP_74 Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
has variable
[i] TMP_75 cleared
clearing ir...?
CONDITION TMP_75
typecheckig node...
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _peek
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_75

Name: TMP_75 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_75
Condition...
Conidtion: 
TMP_75
TMP_75
clearning node...
clearing ir...?
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _peek
asgn

Name: updateTimeIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _peek
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _peek
asgn

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_peek":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _peek
Phi
[i]Type for base

Name: base Function: _peek
Num: -1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['quote__1', 'REF_40'])
Function name: _peek
Phi
[i]Type for quote

Name: quote Function: _peek
Num: 2
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _peek
Phi
[i]Type for priceIn

Name: priceIn Function: _peek
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _peek
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_1(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _peek
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_49(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_1[base_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_49

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_50(CompositeMultiOracle.Source) -> REF_49[quote_1]
Function name: _peek
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_50

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_50(CompositeMultiOracle.Source)
Function name: _peek
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_51(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_67 = CONVERT 0 to address
Function name: _peek
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_67 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_67

Name: TMP_67 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_68(bool) = REF_51 != TMP_67
Function name: _peek
[i]Type for TMP_68

Name: TMP_68 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Source not found)
[i]Type for TMP_69

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_52(address) -> source_1.source
Function name: _peek
MEMBER
source
source
_peek
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_70 = CONVERT REF_52 to IOracle
Function name: _peek

Name: source.source Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_70 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_70

Name: TMP_70 Function: _peek
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_54(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_54

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_71(uint256) = 10 (c)** REF_54
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_71 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_71

Name: TMP_71 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_4(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_70(IOracle), function:peek, arguments:['base_1', 'quote_1', 'TMP_71']  
Function name: _peek
High Call: peek
func name:peek
other func name:peek
TUPLE_4
hlc contract name: SOURCE func_name: peek
('t', [1], [2], 3, None)
base
quote
TMP_71
('c', [-1], [-1], 0, None)
base
quote
TMP_71
wfc len: 2
COPIED
[i]Type for TUPLE_4

Name: TUPLE_4 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_4 index: 0 
Function name: _peek
Reading tuple TUPLE_4 index 0
Check copy_toekn_tuple
([-1, -1], [-1, 2], '*', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _peek
Num: -1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_4 index: 1 
Function name: _peek
Reading tuple TUPLE_4 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_72(uint256) = priceIn_1 (c)* priceOut_1
Function name: _peek
testing mul...
lnorm: u rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_16 Function: None
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_72

Name: TMP_72 Function: _peek
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
REF_55(uint8) -> source_1.decimals
Function name: _peek
MEMBER
source
decimals
_peek
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_55

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_73(uint256) = 10 (c)** REF_55
Function name: _peek
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_73 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_73

Name: TMP_73 Function: _peek
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_74(uint256) = TMP_72 (c)/ TMP_73
Function name: _peek
[W] Initializing defined variable to constant
lnorm: * rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_72 Function: _peek
Num: 1
Den: 2
Norm: *
LF: None
Fields: 
Finance Type: undef

Name: TMP_74 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_74(uint256) = TMP_72 (c)/ TMP_73
XXXXX
priceOut_2(uint256) := TMP_74(uint256)
Function name: _peek
asgn

Name: TMP_74 Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_75(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _peek
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_75

Name: TMP_75 Function: _peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_75
Condition...
Conidtion: 
TMP_75
TMP_75
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _peek
asgn

Name: updateTimeIn Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _peek
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _peek
asgn

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "_peek":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: _peek

Name: priceOut Function: _peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: updateTimeOut Function: _peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TUPLE_1

Name: TUPLE_1 Function: peek
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TUPLE_1(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._peek(bytes6,bytes6,uint256,uint256)(base__2,quote__1,price_2,updateTime_1)
XXXXX
price_3(uint256)= UNPACK TUPLE_1 index: 0 
Function name: peek
Reading tuple TUPLE_1 index 0
Check copy_toekn_tuple
([1], [2], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price

Name: price Function: peek
Num: 1
Den: 2
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTime_2(uint256)= UNPACK TUPLE_1 index: 1 
Function name: peek
Reading tuple TUPLE_1 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTime

Name: updateTime Function: peek
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_59(uint256) = price_3 (c)* amount_1
Function name: peek
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: PIC_18 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_59 Function: peek
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: peek
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_60(uint256) = TMP_59 (c)/ 1000000000000000000
Function name: peek
val: 1000000000000000000
18
val: 1000000000000000000
18
lnorm: 0 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_60 Function: peek
Num: 1
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: TMP_59 Function: peek
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_60 Function: peek
Num: 1
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: peek
Num: 1
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef
done.
value_1(uint256) := TMP_60(uint256)
Function name: peek
asgn

Name: TMP_60 Function: peek
Num: 1
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: value Function: peek
Num: 1
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for value

Name: value Function: peek
Num: 1
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "peek":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: peek

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: sources
Finding type for sources...
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => CompositeMultiOracle.Source)
CompositeMultiOracle.Source
Final Type: CompositeMultiOracle.Source
global
sources
source
Check copy_toekn_tuple
([-1], [-1], [0], 'SOURCE')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
sources
decimals
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: uint8
uint8
Final Type: uint8
Type: uint8
uint8
Final Type: uint8
FIELDS:
sources Fields:
source
decimals
^^^

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
[*]Type fetched successfully
State_var: _roles
Finding type for _roles...
mapping(bytes4 => AccessControl.RoleData)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes4 => AccessControl.RoleData)
mapping(bytes4 => AccessControl.RoleData)
AccessControl.RoleData
Final Type: AccessControl.RoleData
global
_roles
members
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
global
_roles
adminRole
FIELDS:
_roles Fields:
members
^^^

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: members
Finance Type: undef
[*]Type fetched successfully
State_var: LOCK
Finding type for LOCK...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: LOCK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROOT
Finding type for ROOT...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: ROOT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: paths
Finding type for paths...
mapping(bytes6 => mapping(bytes6 => bytes6[]))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => bytes6[])
bytes6[]
bytes6
Final Type: bytes6

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: get
Function name: get
Function Visibility (test): external
base
Finding type for base...
bytes32
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: base Function: get
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
quote
Finding type for quote...
bytes32
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: quote Function: get
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amount
Finding type for amount...
uint256
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amount Function: get
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
paths_2(mapping(bytes6 => mapping(bytes6 => bytes6[]))) := ϕ(['paths_0', 'paths_2', 'paths_1', 'paths_3'])
has variable
typecheckig node...
paths_2(mapping(bytes6 => mapping(bytes6 => bytes6[]))) := ϕ(['paths_0', 'paths_2', 'paths_1', 'paths_3'])
Function name: get
Phi
[i]Type for paths

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
price_1(uint256) := 1000000000000000000(uint256)
has variable
[i] price cleared
typecheckig node...
price_1(uint256) := 1000000000000000000(uint256)
Function name: get
asgn
val: 1000000000000000000
18

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: price Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1000000000000000000
18
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for price

Name: price Function: get
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_61(bytes6) = LIBRARY_CALL, dest:CastBytes32Bytes6, function:CastBytes32Bytes6.b6(bytes32), arguments:['base_1'] 
has variable
[i] TMP_61 cleared
clearing ir...?
base__1(bytes6) := TMP_61(bytes6)
has variable
[i] base_ cleared
typecheckig node...
TMP_61(bytes6) = LIBRARY_CALL, dest:CastBytes32Bytes6, function:CastBytes32Bytes6.b6(bytes32), arguments:['base_1'] 
Function name: get
Library Call: b6
hlc contract name: CastBytes32Bytes6 func_name: b6
('t', [1], [-1], 1, '1')
base
wfc len: 1
Check copy_toekn_tuple
([1], [-1, -1], 0, '1', -1)
----
Type: bytes6
bytes6
Final Type: bytes6
COPIED
[i]Type for TMP_61

Name: TMP_61 Function: get
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
base__1(bytes6) := TMP_61(bytes6)
Function name: get
asgn

Name: TMP_61 Function: get
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef

Name: base_ Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for base_

Name: base_ Function: get
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_62(bytes6) = LIBRARY_CALL, dest:CastBytes32Bytes6, function:CastBytes32Bytes6.b6(bytes32), arguments:['quote_1'] 
has variable
[i] TMP_62 cleared
clearing ir...?
quote__1(bytes6) := TMP_62(bytes6)
has variable
[i] quote_ cleared
typecheckig node...
TMP_62(bytes6) = LIBRARY_CALL, dest:CastBytes32Bytes6, function:CastBytes32Bytes6.b6(bytes32), arguments:['quote_1'] 
Function name: get
Library Call: b6
hlc contract name: CastBytes32Bytes6 func_name: b6
('t', [1], [-1], 1, '1')
quote
wfc len: 1
Check copy_toekn_tuple
([2], [-1, -1], 0, '1', -1)
----
Type: bytes6
bytes6
Final Type: bytes6
COPIED
[i]Type for TMP_62

Name: TMP_62 Function: get
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
quote__1(bytes6) := TMP_62(bytes6)
Function name: get
asgn

Name: TMP_62 Function: get
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef

Name: quote_ Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for quote_

Name: quote_ Function: get
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_44(mapping(bytes6 => bytes6[])) -> paths_2[base__1]
has variable
clearing ir...?
REF_45(bytes6[]) -> REF_44[quote__1]
has variable
clearing ir...?
path_1(bytes6[]) := REF_45(bytes6[])
has variable
[i] path cleared
typecheckig node...
REF_44(mapping(bytes6 => bytes6[])) -> paths_2[base__1]
Function name: get
INDEX

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_44

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_45(bytes6[]) -> REF_44[quote__1]
Function name: get
INDEX

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_45

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1(bytes6[]) := REF_45(bytes6[])
Function name: get
asgn

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: path Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for path

Name: path Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
p_1(uint256) := 0(uint256)
has variable
[i] p cleared
typecheckig node...
p_1(uint256) := 0(uint256)
Function name: get
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: p Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for p

Name: p Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
updateTime_1(uint256) := ϕ(['updateTime_3', 'updateTime_0'])
has variable
[i] updateTime cleared
clearing ir...?
price_2(uint256) := ϕ(['price_1', 'price_4'])
has variable
[i] price cleared
clearing ir...?
base__2(bytes6) := ϕ(['base__1', 'base__3'])
has variable
[i] base_ cleared
clearing ir...?
p_2(uint256) := ϕ(['p_1', 'p_3'])
has variable
[i] p cleared
clearing ir...?
REF_46 -> LENGTH path_1
clearing ir...?
TMP_63(bool) = p_2 < REF_46
has variable
[i] TMP_63 cleared
clearing ir...?
CONDITION TMP_63
typecheckig node...
updateTime_1(uint256) := ϕ(['updateTime_3', 'updateTime_0'])
Function name: get
Phi
[i]Type for updateTime

Name: updateTime Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price_2(uint256) := ϕ(['price_1', 'price_4'])
Function name: get
Phi
[i]Type for price

Name: price Function: get
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
base__2(bytes6) := ϕ(['base__1', 'base__3'])
Function name: get
Phi
[i]Type for base_

Name: base_ Function: get
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
p_2(uint256) := ϕ(['p_1', 'p_3'])
Function name: get
Phi
[i]Type for p

Name: p Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_46 -> LENGTH path_1
[i]Type for REF_46

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_63(bool) = p_2 < REF_46
Function name: get
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: p Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_63 Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_63

Name: TMP_63 Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_63(bool) = p_2 < REF_46
XXXXX
CONDITION TMP_63
Condition...
Conidtion: 
TMP_63
TMP_63
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_47(bytes6) -> path_1[p_2]
has variable
clearing ir...?
TUPLE_2(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._get(bytes6,bytes6,uint256,uint256)(base__2,REF_47,price_2,updateTime_1)
has variable
clearing ir...?
price_4(uint256)= UNPACK TUPLE_2 index: 0 
has variable
[i] price cleared
clearing ir...?
updateTime_3(uint256)= UNPACK TUPLE_2 index: 1 
has variable
[i] updateTime cleared
typecheckig node...
REF_47(bytes6) -> path_1[p_2]
Function name: get
INDEX

Name: path Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: get
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_47

Name: path Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_2(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._get(bytes6,bytes6,uint256,uint256)(base__2,REF_47,price_2,updateTime_1)
Function name: get
Internal call...
_get
base_
REF_47
price
updateTime
Function: _get
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[1], [-1], 0, '1', [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 18, None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _get
Function Visibility: private
clearning node...
clearing ir...?
base_1(bytes6) := ϕ(['base__2'])
has variable
[i] base cleared
clearing ir...?
quote_1(bytes6) := ϕ(['REF_47', 'quote__1'])
has variable
[i] quote cleared
clearing ir...?
priceIn_1(uint256) := ϕ(['price_2'])
has variable
[i] priceIn cleared
clearing ir...?
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
has variable
[i] updateTimeIn cleared
clearing ir...?
sources_2(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
has variable
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _get
Phi
[i]Type for base

Name: base Function: _get
Num: 1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['REF_47', 'quote__1'])
Function name: _get
Phi
[i]Type for quote

Name: quote Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _get
Phi
[i]Type for priceIn

Name: priceIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _get
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_2(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _get
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_56(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
has variable
clearing ir...?
REF_57(CompositeMultiOracle.Source) -> REF_56[quote_1]
has variable
clearing ir...?
source_1(CompositeMultiOracle.Source) := REF_57(CompositeMultiOracle.Source)
has variable
[i] source cleared
typecheckig node...
REF_56(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_56

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_57(CompositeMultiOracle.Source) -> REF_56[quote_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_57

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_57(CompositeMultiOracle.Source)
Function name: _get
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_58(address) -> source_1.source
has variable
clearing ir...?
TMP_76 = CONVERT 0 to address
has variable
[i] TMP_76 cleared
clearing ir...?
TMP_77(bool) = REF_58 != TMP_76
has variable
[i] TMP_77 cleared
clearing ir...?
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,Source not found)
typecheckig node...
REF_58(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_58

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_76 = CONVERT 0 to address
Function name: _get
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_76 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_76

Name: TMP_76 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_77(bool) = REF_58 != TMP_76
Function name: _get
[i]Type for TMP_77

Name: TMP_77 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,Source not found)
[i]Type for TMP_78

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_59(address) -> source_1.source
has variable
clearing ir...?
TMP_79 = CONVERT REF_59 to IOracle
has variable
[i] TMP_79 cleared
clearing ir...?
REF_61(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_80(uint256) = 10 (c)** REF_61
has variable
[i] TMP_80 cleared
clearing ir...?
TUPLE_5(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_79(IOracle), function:get, arguments:['base_1', 'quote_1', 'TMP_80']  
has variable
clearing ir...?
priceOut_1(uint256)= UNPACK TUPLE_5 index: 0 
has variable
[i] priceOut cleared
clearing ir...?
updateTimeOut_1(uint256)= UNPACK TUPLE_5 index: 1 
has variable
[i] updateTimeOut cleared
typecheckig node...
REF_59(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_59

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_79 = CONVERT REF_59 to IOracle
Function name: _get

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_79 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_79

Name: TMP_79 Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_61(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_61

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_80(uint256) = 10 (c)** REF_61
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_80 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_80

Name: TMP_80 Function: _get
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_5(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_79(IOracle), function:get, arguments:['base_1', 'quote_1', 'TMP_80']  
Function name: _get
High Call: get
func name:get
other func name:get
TUPLE_5
hlc contract name: SOURCE func_name: get
('c', [-1], [-1], 0, None)
base
quote
TMP_80
('c', [-1], [-1], 0, None)
base
quote
TMP_80
wfc len: 2
COPIED
[i]Type for TUPLE_5

Name: TUPLE_5 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: _get
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: _get
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_81(uint256) = priceIn_1 (c)* priceOut_1
has variable
[i] TMP_81 cleared
clearing ir...?
REF_62(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_82(uint256) = 10 (c)** REF_62
has variable
[i] TMP_82 cleared
clearing ir...?
TMP_83(uint256) = TMP_81 (c)/ TMP_82
has variable
[i] TMP_83 cleared
clearing ir...?
priceOut_2(uint256) := TMP_83(uint256)
has variable
[i] priceOut cleared
typecheckig node...
TMP_81(uint256) = priceIn_1 (c)* priceOut_1
Function name: _get
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_81

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_62(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_62

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_82(uint256) = 10 (c)** REF_62
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_82 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_82

Name: TMP_82 Function: _get
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_83(uint256) = TMP_81 (c)/ TMP_82
Function name: _get
Error with TMP_83 in function _get
Error with: TMP_83 in function _get
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fde4febdc10>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fde4fedf580>]
lnorm: 0 rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_83

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_2(uint256) := TMP_83(uint256)
Function name: _get
asgn

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
has variable
[i] TMP_84 cleared
clearing ir...?
CONDITION TMP_84
typecheckig node...
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _get
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_84 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_84

Name: TMP_84 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
XXXXX
CONDITION TMP_84
Condition...
Conidtion: 
TMP_84
TMP_84
clearning node...
clearing ir...?
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _get
asgn

Name: updateTimeIn Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
XXXXX
clearning node...
clearing ir...?
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _get
asgn

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _get
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_get":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _get
Phi
[i]Type for base

Name: base Function: _get
Num: 1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['REF_47', 'quote__1'])
Function name: _get
Phi
[i]Type for quote

Name: quote Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _get
Phi
[i]Type for priceIn

Name: priceIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _get
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_2(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _get
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_56(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_56

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_57(CompositeMultiOracle.Source) -> REF_56[quote_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_57

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_57(CompositeMultiOracle.Source)
Function name: _get
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_58(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_58

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_76 = CONVERT 0 to address
Function name: _get
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_76 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_76

Name: TMP_76 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_77(bool) = REF_58 != TMP_76
Function name: _get
[i]Type for TMP_77

Name: TMP_77 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,Source not found)
[i]Type for TMP_78

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_59(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_59

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_79 = CONVERT REF_59 to IOracle
Function name: _get

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_79 Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_79

Name: TMP_79 Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_61(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_61

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_80(uint256) = 10 (c)** REF_61
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_80 Function: _get
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:*
-1
val: 10
1
[i]Type for TMP_80

Name: TMP_80 Function: _get
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_5(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_79(IOracle), function:get, arguments:['base_1', 'quote_1', 'TMP_80']  
Function name: _get
High Call: get
func name:get
other func name:get
TUPLE_5
hlc contract name: SOURCE func_name: get
('c', [-1], [-1], 0, None)
base
quote
TMP_80
('c', [-1], [-1], 0, None)
base
quote
TMP_80
wfc len: 2
COPIED
[i]Type for TUPLE_5

Name: TUPLE_5 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: _get
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: _get
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_81(uint256) = priceIn_1 (c)* priceOut_1
Function name: _get
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_81

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_62(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_62

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_82(uint256) = 10 (c)** REF_62
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_82 Function: _get
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:*
-1
val: 10
1
[i]Type for TMP_82

Name: TMP_82 Function: _get
Num: -1
Den: -1
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_83(uint256) = TMP_81 (c)/ TMP_82
Function name: _get
lnorm: 0 rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_83

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_2(uint256) := TMP_83(uint256)
Function name: _get
asgn

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _get
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_84 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_84

Name: TMP_84 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
XXXXX
CONDITION TMP_84
Condition...
Conidtion: 
TMP_84
TMP_84
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _get
asgn

Name: updateTimeIn Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
XXXXX
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _get
asgn

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _get
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "_get":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: _get

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TUPLE_2

Name: TUPLE_2 Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TUPLE_2(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._get(bytes6,bytes6,uint256,uint256)(base__2,REF_47,price_2,updateTime_1)
XXXXX
price_4(uint256)= UNPACK TUPLE_2 index: 0 
Function name: get
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price

Name: price Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTime_3(uint256)= UNPACK TUPLE_2 index: 1 
Function name: get
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTime

Name: updateTime Function: get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_48(bytes6) -> path_1[p_2]
has variable
clearing ir...?
base__3(bytes6) := REF_48(bytes6)
has variable
[i] base_ cleared
typecheckig node...
REF_48(bytes6) -> path_1[p_2]
Function name: get
INDEX

Name: path Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: get
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_48

Name: path Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
base__3(bytes6) := REF_48(bytes6)
Function name: get
asgn

Name: path Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: base_ Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for base_

Name: base_ Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_64(uint256) := p_2(uint256)
has variable
[i] TMP_64 cleared
clearing ir...?
p_3(uint256) = p_2 (c)+ 1
has variable
[i] p cleared
typecheckig node...
TMP_64(uint256) := p_2(uint256)
Function name: get
asgn

Name: p Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_64 Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_64

Name: TMP_64 Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
p_3(uint256) = p_2 (c)+ 1
Function name: get
val: 1

Name: p Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: p Function: get
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for p

Name: p Function: get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TUPLE_3(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._get(bytes6,bytes6,uint256,uint256)(base__2,quote__1,price_2,updateTime_1)
has variable
clearing ir...?
price_3(uint256)= UNPACK TUPLE_3 index: 0 
has variable
[i] price cleared
clearing ir...?
updateTime_2(uint256)= UNPACK TUPLE_3 index: 1 
has variable
[i] updateTime cleared
typecheckig node...
TUPLE_3(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._get(bytes6,bytes6,uint256,uint256)(base__2,quote__1,price_2,updateTime_1)
Function name: get
Internal call...
_get
base_
quote_
price
updateTime
Function: _get
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, '1', [], -1]
-100
Parameter length: 1
[[1], [-1], 0, '1', [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 18, None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _get
Function Visibility: private
clearning node...
clearing ir...?
base_1(bytes6) := ϕ(['base__2'])
has variable
[i] base cleared
clearing ir...?
quote_1(bytes6) := ϕ(['REF_47', 'quote__1'])
has variable
[i] quote cleared
clearing ir...?
priceIn_1(uint256) := ϕ(['price_2'])
has variable
[i] priceIn cleared
clearing ir...?
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
has variable
[i] updateTimeIn cleared
clearing ir...?
sources_2(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
has variable
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _get
Phi
[i]Type for base

Name: base Function: _get
Num: -1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['REF_47', 'quote__1'])
Function name: _get
Phi
[i]Type for quote

Name: quote Function: _get
Num: 2
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _get
Phi
[i]Type for priceIn

Name: priceIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _get
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_2(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _get
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_56(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
has variable
clearing ir...?
REF_57(CompositeMultiOracle.Source) -> REF_56[quote_1]
has variable
clearing ir...?
source_1(CompositeMultiOracle.Source) := REF_57(CompositeMultiOracle.Source)
has variable
[i] source cleared
typecheckig node...
REF_56(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_56

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_57(CompositeMultiOracle.Source) -> REF_56[quote_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_57

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_57(CompositeMultiOracle.Source)
Function name: _get
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_58(address) -> source_1.source
has variable
clearing ir...?
TMP_76 = CONVERT 0 to address
has variable
[i] TMP_76 cleared
clearing ir...?
TMP_77(bool) = REF_58 != TMP_76
has variable
[i] TMP_77 cleared
clearing ir...?
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,Source not found)
typecheckig node...
REF_58(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_58

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_76 = CONVERT 0 to address
Function name: _get
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_76 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_76

Name: TMP_76 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_77(bool) = REF_58 != TMP_76
Function name: _get
[i]Type for TMP_77

Name: TMP_77 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,Source not found)
[i]Type for TMP_78

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_59(address) -> source_1.source
has variable
clearing ir...?
TMP_79 = CONVERT REF_59 to IOracle
has variable
[i] TMP_79 cleared
clearing ir...?
REF_61(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_80(uint256) = 10 (c)** REF_61
has variable
[i] TMP_80 cleared
clearing ir...?
TUPLE_5(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_79(IOracle), function:get, arguments:['base_1', 'quote_1', 'TMP_80']  
has variable
clearing ir...?
priceOut_1(uint256)= UNPACK TUPLE_5 index: 0 
has variable
[i] priceOut cleared
clearing ir...?
updateTimeOut_1(uint256)= UNPACK TUPLE_5 index: 1 
has variable
[i] updateTimeOut cleared
typecheckig node...
REF_59(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_59

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_79 = CONVERT REF_59 to IOracle
Function name: _get

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_79 Function: _get
Num: 
Den: 
Norm: u
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_79

Name: TMP_79 Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_61(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_61

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_80(uint256) = 10 (c)** REF_61
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_80 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_80

Name: TMP_80 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_5(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_79(IOracle), function:get, arguments:['base_1', 'quote_1', 'TMP_80']  
Function name: _get
High Call: get
func name:get
other func name:get
TUPLE_5
hlc contract name: SOURCE func_name: get
('c', [-1], [-1], 0, None)
base
quote
TMP_80
('c', [-1], [-1], 0, None)
base
quote
TMP_80
wfc len: 2
COPIED
[i]Type for TUPLE_5

Name: TUPLE_5 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: _get
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: _get
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_81(uint256) = priceIn_1 (c)* priceOut_1
has variable
[i] TMP_81 cleared
clearing ir...?
REF_62(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_82(uint256) = 10 (c)** REF_62
has variable
[i] TMP_82 cleared
clearing ir...?
TMP_83(uint256) = TMP_81 (c)/ TMP_82
has variable
[i] TMP_83 cleared
clearing ir...?
priceOut_2(uint256) := TMP_83(uint256)
has variable
[i] priceOut cleared
typecheckig node...
TMP_81(uint256) = priceIn_1 (c)* priceOut_1
Function name: _get
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_81

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_62(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_62

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_82(uint256) = 10 (c)** REF_62
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_82 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_82

Name: TMP_82 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_83(uint256) = TMP_81 (c)/ TMP_82
Function name: _get
lnorm: 0 rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_83 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_83 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_83

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_83(uint256) = TMP_81 (c)/ TMP_82
XXXXX
priceOut_2(uint256) := TMP_83(uint256)
Function name: _get
asgn

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
has variable
[i] TMP_84 cleared
clearing ir...?
CONDITION TMP_84
typecheckig node...
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _get
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_84

Name: TMP_84 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_84
Condition...
Conidtion: 
TMP_84
TMP_84
clearning node...
clearing ir...?
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _get
asgn

Name: updateTimeIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _get
asgn

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _get
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_get":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _get
Phi
[i]Type for base

Name: base Function: _get
Num: -1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['REF_47', 'quote__1'])
Function name: _get
Phi
[i]Type for quote

Name: quote Function: _get
Num: 2
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _get
Phi
[i]Type for priceIn

Name: priceIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _get
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_2(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _get
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_56(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_56

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_57(CompositeMultiOracle.Source) -> REF_56[quote_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_57

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_57(CompositeMultiOracle.Source)
Function name: _get
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_58(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_58

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_76 = CONVERT 0 to address
Function name: _get
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_76 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_76

Name: TMP_76 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_77(bool) = REF_58 != TMP_76
Function name: _get
[i]Type for TMP_77

Name: TMP_77 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,Source not found)
[i]Type for TMP_78

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_59(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_59

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_79 = CONVERT REF_59 to IOracle
Function name: _get

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_79 Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_79

Name: TMP_79 Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_61(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_61

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_80(uint256) = 10 (c)** REF_61
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_80 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_80

Name: TMP_80 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_5(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_79(IOracle), function:get, arguments:['base_1', 'quote_1', 'TMP_80']  
Function name: _get
High Call: get
func name:get
other func name:get
TUPLE_5
hlc contract name: SOURCE func_name: get
('c', [-1], [-1], 0, None)
base
quote
TMP_80
('c', [-1], [-1], 0, None)
base
quote
TMP_80
wfc len: 2
COPIED
[i]Type for TUPLE_5

Name: TUPLE_5 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: _get
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: _get
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_81(uint256) = priceIn_1 (c)* priceOut_1
Function name: _get
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_81

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_62(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_62

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_82(uint256) = 10 (c)** REF_62
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_82 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_82

Name: TMP_82 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_83(uint256) = TMP_81 (c)/ TMP_82
Function name: _get
lnorm: 0 rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_83

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_83(uint256) = TMP_81 (c)/ TMP_82
XXXXX
priceOut_2(uint256) := TMP_83(uint256)
Function name: _get
asgn

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _get
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_84

Name: TMP_84 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_84
Condition...
Conidtion: 
TMP_84
TMP_84
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _get
asgn

Name: updateTimeIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _get
asgn

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _get
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "_get":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: _get

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TUPLE_3

Name: TUPLE_3 Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TUPLE_3(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._get(bytes6,bytes6,uint256,uint256)(base__2,quote__1,price_2,updateTime_1)
XXXXX
price_3(uint256)= UNPACK TUPLE_3 index: 0 
Function name: get
Reading tuple TUPLE_3 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price

Name: price Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTime_2(uint256)= UNPACK TUPLE_3 index: 1 
Function name: get
Reading tuple TUPLE_3 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTime

Name: updateTime Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_65(uint256) = price_3 (c)* amount_1
has variable
[i] TMP_65 cleared
clearing ir...?
TMP_66(uint256) = TMP_65 (c)/ 1000000000000000000
has variable
[i] TMP_66 cleared
clearing ir...?
value_1(uint256) := TMP_66(uint256)
has variable
[i] value cleared
typecheckig node...
TMP_65(uint256) = price_3 (c)* amount_1
Function name: get
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amount Function: get
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_65 Function: get
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_65

Name: TMP_65 Function: get
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_66(uint256) = TMP_65 (c)/ 1000000000000000000
Function name: get
val: 1000000000000000000
18
val: 1000000000000000000
18
lnorm: 0 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_66 Function: get
Num: 
Den: 
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: TMP_65 Function: get
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_66 Function: get
Num: 
Den: 
Norm: -18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_66

Name: TMP_66 Function: get
Num: 2
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef
done.
value_1(uint256) := TMP_66(uint256)
Function name: get
asgn

Name: TMP_66 Function: get
Num: 2
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: value Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for value

Name: value Function: get
Num: 2
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN value_1,updateTime_2
typecheckig node...
RETURN value_1,updateTime_2
RETURN

Name: value Function: get
Num: 2
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: updateTime Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "get":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
paths_2(mapping(bytes6 => mapping(bytes6 => bytes6[]))) := ϕ(['paths_0', 'paths_2', 'paths_1', 'paths_3'])
Function name: get
Phi
[i]Type for paths

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
price_1(uint256) := 1000000000000000000(uint256)
Function name: get
asgn
val: 1000000000000000000
18

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: price Function: get
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
val: 1000000000000000000
18
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for price

Name: price Function: get
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_61(bytes6) = LIBRARY_CALL, dest:CastBytes32Bytes6, function:CastBytes32Bytes6.b6(bytes32), arguments:['base_1'] 
Function name: get
Library Call: b6
hlc contract name: CastBytes32Bytes6 func_name: b6
('t', [1], [-1], 1, '1')
base
wfc len: 1
Check copy_toekn_tuple
([1], [-1, -1], 0, '1', -1)
----
Type: bytes6
bytes6
Final Type: bytes6
COPIED
[i]Type for TMP_61

Name: TMP_61 Function: get
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
base__1(bytes6) := TMP_61(bytes6)
Function name: get
asgn

Name: TMP_61 Function: get
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef

Name: base_ Function: get
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for base_

Name: base_ Function: get
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_62(bytes6) = LIBRARY_CALL, dest:CastBytes32Bytes6, function:CastBytes32Bytes6.b6(bytes32), arguments:['quote_1'] 
Function name: get
Library Call: b6
hlc contract name: CastBytes32Bytes6 func_name: b6
('t', [1], [-1], 1, '1')
quote
wfc len: 1
Check copy_toekn_tuple
([2], [-1, -1], 0, '1', -1)
----
Type: bytes6
bytes6
Final Type: bytes6
COPIED
[i]Type for TMP_62

Name: TMP_62 Function: get
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
quote__1(bytes6) := TMP_62(bytes6)
Function name: get
asgn

Name: TMP_62 Function: get
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef

Name: quote_ Function: get
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for quote_

Name: quote_ Function: get
Num: 2
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_44(mapping(bytes6 => bytes6[])) -> paths_2[base__1]
Function name: get
INDEX

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_44

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_45(bytes6[]) -> REF_44[quote__1]
Function name: get
INDEX

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_45

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1(bytes6[]) := REF_45(bytes6[])
Function name: get
asgn

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: path Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for path

Name: path Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
p_1(uint256) := 0(uint256)
Function name: get
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: p Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for p

Name: p Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
updateTime_1(uint256) := ϕ(['updateTime_3', 'updateTime_0'])
Function name: get
Phi
[i]Type for updateTime

Name: updateTime Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price_2(uint256) := ϕ(['price_1', 'price_4'])
Function name: get
Phi
[i]Type for price

Name: price Function: get
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
base__2(bytes6) := ϕ(['base__1', 'base__3'])
Function name: get
Phi
[i]Type for base_

Name: base_ Function: get
Num: 1
Den: -1
Norm: 0
LF: 1
Fields: 
Finance Type: undef
done.
p_2(uint256) := ϕ(['p_1', 'p_3'])
Function name: get
Phi
[i]Type for p

Name: p Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_46 -> LENGTH path_1
[i]Type for REF_46

Name: REF_46 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_63(bool) = p_2 < REF_46
Function name: get
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: p Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_63 Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_63

Name: TMP_63 Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_63(bool) = p_2 < REF_46
XXXXX
CONDITION TMP_63
Condition...
Conidtion: 
TMP_63
TMP_63
typecheckig node...
typecheckig node...
REF_47(bytes6) -> path_1[p_2]
Function name: get
INDEX

Name: path Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: get
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_47

Name: path Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_2(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._get(bytes6,bytes6,uint256,uint256)(base__2,REF_47,price_2,updateTime_1)
Function name: get
Internal call...
_get
base_
REF_47
price
updateTime
Function: _get
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, '1', [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 18, None, [], -1]
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[1], [-1], 0, '1', [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 18, None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _get
Function Visibility: private
clearning node...
clearing ir...?
base_1(bytes6) := ϕ(['base__2'])
has variable
[i] base cleared
clearing ir...?
quote_1(bytes6) := ϕ(['REF_47', 'quote__1'])
has variable
[i] quote cleared
clearing ir...?
priceIn_1(uint256) := ϕ(['price_2'])
has variable
[i] priceIn cleared
clearing ir...?
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
has variable
[i] updateTimeIn cleared
clearing ir...?
sources_2(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
has variable
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _get
Phi
[i]Type for base

Name: base Function: _get
Num: 1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['REF_47', 'quote__1'])
Function name: _get
Phi
[i]Type for quote

Name: quote Function: _get
Num: -1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _get
Phi
[i]Type for priceIn

Name: priceIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _get
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_2(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _get
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_56(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
has variable
clearing ir...?
REF_57(CompositeMultiOracle.Source) -> REF_56[quote_1]
has variable
clearing ir...?
source_1(CompositeMultiOracle.Source) := REF_57(CompositeMultiOracle.Source)
has variable
[i] source cleared
typecheckig node...
REF_56(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_56

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_57(CompositeMultiOracle.Source) -> REF_56[quote_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_57

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_57(CompositeMultiOracle.Source)
Function name: _get
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_58(address) -> source_1.source
has variable
clearing ir...?
TMP_76 = CONVERT 0 to address
has variable
[i] TMP_76 cleared
clearing ir...?
TMP_77(bool) = REF_58 != TMP_76
has variable
[i] TMP_77 cleared
clearing ir...?
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,Source not found)
typecheckig node...
REF_58(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_58

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_76 = CONVERT 0 to address
Function name: _get
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_76 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_76

Name: TMP_76 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_77(bool) = REF_58 != TMP_76
Function name: _get
[i]Type for TMP_77

Name: TMP_77 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,Source not found)
[i]Type for TMP_78

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_59(address) -> source_1.source
has variable
clearing ir...?
TMP_79 = CONVERT REF_59 to IOracle
has variable
[i] TMP_79 cleared
clearing ir...?
REF_61(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_80(uint256) = 10 (c)** REF_61
has variable
[i] TMP_80 cleared
clearing ir...?
TUPLE_5(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_79(IOracle), function:get, arguments:['base_1', 'quote_1', 'TMP_80']  
has variable
clearing ir...?
priceOut_1(uint256)= UNPACK TUPLE_5 index: 0 
has variable
[i] priceOut cleared
clearing ir...?
updateTimeOut_1(uint256)= UNPACK TUPLE_5 index: 1 
has variable
[i] updateTimeOut cleared
typecheckig node...
REF_59(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_59

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_79 = CONVERT REF_59 to IOracle
Function name: _get

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_79 Function: _get
Num: 
Den: 
Norm: u
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_79

Name: TMP_79 Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_61(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_61

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_80(uint256) = 10 (c)** REF_61
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_80 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_80

Name: TMP_80 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_5(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_79(IOracle), function:get, arguments:['base_1', 'quote_1', 'TMP_80']  
Function name: _get
High Call: get
func name:get
other func name:get
TUPLE_5
hlc contract name: SOURCE func_name: get
('c', [-1], [-1], 0, None)
base
quote
TMP_80
('c', [-1], [-1], 0, None)
base
quote
TMP_80
wfc len: 2
COPIED
[i]Type for TUPLE_5

Name: TUPLE_5 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: _get
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: _get
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_81(uint256) = priceIn_1 (c)* priceOut_1
has variable
[i] TMP_81 cleared
clearing ir...?
REF_62(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_82(uint256) = 10 (c)** REF_62
has variable
[i] TMP_82 cleared
clearing ir...?
TMP_83(uint256) = TMP_81 (c)/ TMP_82
has variable
[i] TMP_83 cleared
clearing ir...?
priceOut_2(uint256) := TMP_83(uint256)
has variable
[i] priceOut cleared
typecheckig node...
TMP_81(uint256) = priceIn_1 (c)* priceOut_1
Function name: _get
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_81

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_62(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_62

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_82(uint256) = 10 (c)** REF_62
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_82 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_82

Name: TMP_82 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_83(uint256) = TMP_81 (c)/ TMP_82
Function name: _get
lnorm: 0 rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_83 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_83 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_83

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_83(uint256) = TMP_81 (c)/ TMP_82
XXXXX
priceOut_2(uint256) := TMP_83(uint256)
Function name: _get
asgn

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
has variable
[i] TMP_84 cleared
clearing ir...?
CONDITION TMP_84
typecheckig node...
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _get
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_84

Name: TMP_84 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_84
Condition...
Conidtion: 
TMP_84
TMP_84
clearning node...
clearing ir...?
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _get
asgn

Name: updateTimeIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _get
asgn

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _get
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_get":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _get
Phi
[i]Type for base

Name: base Function: _get
Num: 1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['REF_47', 'quote__1'])
Function name: _get
Phi
[i]Type for quote

Name: quote Function: _get
Num: -1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _get
Phi
[i]Type for priceIn

Name: priceIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _get
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_2(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _get
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_56(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_56

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_57(CompositeMultiOracle.Source) -> REF_56[quote_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_57

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_57(CompositeMultiOracle.Source)
Function name: _get
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_58(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_58

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_76 = CONVERT 0 to address
Function name: _get
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_76 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_76

Name: TMP_76 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_77(bool) = REF_58 != TMP_76
Function name: _get
[i]Type for TMP_77

Name: TMP_77 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,Source not found)
[i]Type for TMP_78

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_59(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_59

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_79 = CONVERT REF_59 to IOracle
Function name: _get

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_79 Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_79

Name: TMP_79 Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_61(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_61

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_80(uint256) = 10 (c)** REF_61
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_80 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_80

Name: TMP_80 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_5(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_79(IOracle), function:get, arguments:['base_1', 'quote_1', 'TMP_80']  
Function name: _get
High Call: get
func name:get
other func name:get
TUPLE_5
hlc contract name: SOURCE func_name: get
('c', [-1], [-1], 0, None)
base
quote
TMP_80
('c', [-1], [-1], 0, None)
base
quote
TMP_80
wfc len: 2
COPIED
[i]Type for TUPLE_5

Name: TUPLE_5 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: _get
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: _get
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_81(uint256) = priceIn_1 (c)* priceOut_1
Function name: _get
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_81

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_62(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_62

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_82(uint256) = 10 (c)** REF_62
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_82 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_82

Name: TMP_82 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_83(uint256) = TMP_81 (c)/ TMP_82
Function name: _get
lnorm: 0 rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_83

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_83(uint256) = TMP_81 (c)/ TMP_82
XXXXX
priceOut_2(uint256) := TMP_83(uint256)
Function name: _get
asgn

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _get
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_84

Name: TMP_84 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_84
Condition...
Conidtion: 
TMP_84
TMP_84
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _get
asgn

Name: updateTimeIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _get
asgn

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _get
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "_get":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: _get

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TUPLE_2

Name: TUPLE_2 Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TUPLE_2(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._get(bytes6,bytes6,uint256,uint256)(base__2,REF_47,price_2,updateTime_1)
XXXXX
price_4(uint256)= UNPACK TUPLE_2 index: 0 
Function name: get
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price

Name: price Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTime_3(uint256)= UNPACK TUPLE_2 index: 1 
Function name: get
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTime

Name: updateTime Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_48(bytes6) -> path_1[p_2]
Function name: get
INDEX

Name: path Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: get
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_48

Name: path Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
base__3(bytes6) := REF_48(bytes6)
Function name: get
asgn

Name: path Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: base_ Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for base_

Name: base_ Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_64(uint256) := p_2(uint256)
Function name: get
asgn

Name: p Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_64 Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_64

Name: TMP_64 Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
p_3(uint256) = p_2 (c)+ 1
Function name: get
val: 1

Name: p Function: get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: p Function: get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for p

Name: p Function: get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TUPLE_3(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._get(bytes6,bytes6,uint256,uint256)(base__2,quote__1,price_2,updateTime_1)
Function name: get
Internal call...
_get
base_
quote_
price
updateTime
Function: _get
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [2]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: 1
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[1], [-1], 0, '1', [], -1]
-100
Parameter length: 1
[[1], [-1], 0, '1', [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 18, None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _get
Function Visibility: private
clearning node...
clearing ir...?
base_1(bytes6) := ϕ(['base__2'])
has variable
[i] base cleared
clearing ir...?
quote_1(bytes6) := ϕ(['REF_47', 'quote__1'])
has variable
[i] quote cleared
clearing ir...?
priceIn_1(uint256) := ϕ(['price_2'])
has variable
[i] priceIn cleared
clearing ir...?
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
has variable
[i] updateTimeIn cleared
clearing ir...?
sources_2(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
has variable
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _get
Phi
[i]Type for base

Name: base Function: _get
Num: -1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['REF_47', 'quote__1'])
Function name: _get
Phi
[i]Type for quote

Name: quote Function: _get
Num: 2
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _get
Phi
[i]Type for priceIn

Name: priceIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _get
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_2(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _get
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_56(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
has variable
clearing ir...?
REF_57(CompositeMultiOracle.Source) -> REF_56[quote_1]
has variable
clearing ir...?
source_1(CompositeMultiOracle.Source) := REF_57(CompositeMultiOracle.Source)
has variable
[i] source cleared
typecheckig node...
REF_56(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_56

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_57(CompositeMultiOracle.Source) -> REF_56[quote_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_57

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_57(CompositeMultiOracle.Source)
Function name: _get
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_58(address) -> source_1.source
has variable
clearing ir...?
TMP_76 = CONVERT 0 to address
has variable
[i] TMP_76 cleared
clearing ir...?
TMP_77(bool) = REF_58 != TMP_76
has variable
[i] TMP_77 cleared
clearing ir...?
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,Source not found)
typecheckig node...
REF_58(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_58

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_76 = CONVERT 0 to address
Function name: _get
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_76 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_76

Name: TMP_76 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_77(bool) = REF_58 != TMP_76
Function name: _get
[i]Type for TMP_77

Name: TMP_77 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,Source not found)
[i]Type for TMP_78

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_59(address) -> source_1.source
has variable
clearing ir...?
TMP_79 = CONVERT REF_59 to IOracle
has variable
[i] TMP_79 cleared
clearing ir...?
REF_61(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_80(uint256) = 10 (c)** REF_61
has variable
[i] TMP_80 cleared
clearing ir...?
TUPLE_5(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_79(IOracle), function:get, arguments:['base_1', 'quote_1', 'TMP_80']  
has variable
clearing ir...?
priceOut_1(uint256)= UNPACK TUPLE_5 index: 0 
has variable
[i] priceOut cleared
clearing ir...?
updateTimeOut_1(uint256)= UNPACK TUPLE_5 index: 1 
has variable
[i] updateTimeOut cleared
typecheckig node...
REF_59(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_59

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_79 = CONVERT REF_59 to IOracle
Function name: _get

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_79 Function: _get
Num: 
Den: 
Norm: u
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_79

Name: TMP_79 Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_61(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_61

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_80(uint256) = 10 (c)** REF_61
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_80 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_80

Name: TMP_80 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_5(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_79(IOracle), function:get, arguments:['base_1', 'quote_1', 'TMP_80']  
Function name: _get
High Call: get
func name:get
other func name:get
TUPLE_5
hlc contract name: SOURCE func_name: get
('c', [-1], [-1], 0, None)
base
quote
TMP_80
('c', [-1], [-1], 0, None)
base
quote
TMP_80
wfc len: 2
COPIED
[i]Type for TUPLE_5

Name: TUPLE_5 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: _get
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: _get
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_81(uint256) = priceIn_1 (c)* priceOut_1
has variable
[i] TMP_81 cleared
clearing ir...?
REF_62(uint8) -> source_1.decimals
has variable
clearing ir...?
TMP_82(uint256) = 10 (c)** REF_62
has variable
[i] TMP_82 cleared
clearing ir...?
TMP_83(uint256) = TMP_81 (c)/ TMP_82
has variable
[i] TMP_83 cleared
clearing ir...?
priceOut_2(uint256) := TMP_83(uint256)
has variable
[i] priceOut cleared
typecheckig node...
TMP_81(uint256) = priceIn_1 (c)* priceOut_1
Function name: _get
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_81

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_62(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_62

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_82(uint256) = 10 (c)** REF_62
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_82 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_82

Name: TMP_82 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_83(uint256) = TMP_81 (c)/ TMP_82
Function name: _get
lnorm: 0 rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_83 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_83 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_83

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_83(uint256) = TMP_81 (c)/ TMP_82
XXXXX
priceOut_2(uint256) := TMP_83(uint256)
Function name: _get
asgn

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
has variable
[i] TMP_84 cleared
clearing ir...?
CONDITION TMP_84
typecheckig node...
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _get
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_84

Name: TMP_84 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_84
Condition...
Conidtion: 
TMP_84
TMP_84
clearning node...
clearing ir...?
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _get
asgn

Name: updateTimeIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _get
asgn

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
has variable
[i] updateTimeOut cleared
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _get
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_get":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
base_1(bytes6) := ϕ(['base__2'])
Function name: _get
Phi
[i]Type for base

Name: base Function: _get
Num: -1
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
quote_1(bytes6) := ϕ(['REF_47', 'quote__1'])
Function name: _get
Phi
[i]Type for quote

Name: quote Function: _get
Num: 2
Den: -1
Norm: u
LF: 1
Fields: 
Finance Type: undef
done.
priceIn_1(uint256) := ϕ(['price_2'])
Function name: _get
Phi
[i]Type for priceIn

Name: priceIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTimeIn_1(uint256) := ϕ(['updateTime_1'])
Function name: _get
Phi
[i]Type for updateTimeIn

Name: updateTimeIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
sources_2(mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))) := ϕ(['sources_2', 'sources_3', 'sources_0', 'sources_1', 'sources_4'])
Function name: _get
Phi
[i]Type for sources

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_56(mapping(bytes6 => CompositeMultiOracle.Source)) -> sources_2[base_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_56

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
REF_57(CompositeMultiOracle.Source) -> REF_56[quote_1]
Function name: _get
INDEX

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_57

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
source_1(CompositeMultiOracle.Source) := REF_57(CompositeMultiOracle.Source)
Function name: _get
asgn

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef

Name: source Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for source

Name: source Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
done.
typecheckig node...
REF_58(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_58

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_76 = CONVERT 0 to address
Function name: _get
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_76 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_76

Name: TMP_76 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_77(bool) = REF_58 != TMP_76
Function name: _get
[i]Type for TMP_77

Name: TMP_77 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,Source not found)
[i]Type for TMP_78

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_59(address) -> source_1.source
Function name: _get
MEMBER
source
source
_get
source Fields:
source
decimals
^^^

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for REF_59

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: source Function: global
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
TMP_79 = CONVERT REF_59 to IOracle
Function name: _get

Name: source.source Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef

Name: TMP_79 Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
[i]Type for TMP_79

Name: TMP_79 Function: _get
Num: -1
Den: -1
Norm: 0
LF: SOURCE
Fields: 
Finance Type: undef
done.
REF_61(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_61

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_80(uint256) = 10 (c)** REF_61
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_80 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_80

Name: TMP_80 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_5(uint256,uint256) = HIGH_LEVEL_CALL, dest:TMP_79(IOracle), function:get, arguments:['base_1', 'quote_1', 'TMP_80']  
Function name: _get
High Call: get
func name:get
other func name:get
TUPLE_5
hlc contract name: SOURCE func_name: get
('c', [-1], [-1], 0, None)
base
quote
TMP_80
('c', [-1], [-1], 0, None)
base
quote
TMP_80
wfc len: 2
COPIED
[i]Type for TUPLE_5

Name: TUPLE_5 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
priceOut_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: _get
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
updateTimeOut_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: _get
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_81(uint256) = priceIn_1 (c)* priceOut_1
Function name: _get
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_81

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_62(uint8) -> source_1.decimals
Function name: _get
MEMBER
source
decimals
_get
source Fields:
source
decimals
^^^

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_62

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_82(uint256) = 10 (c)** REF_62
Function name: _get
val: 10
1

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: source.decimals Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_82 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
-1
val: 10
1
[i]Type for TMP_82

Name: TMP_82 Function: _get
Num: 
Den: 
Norm: *
LF: None
Fields: 
Finance Type: undef
done.
TMP_83(uint256) = TMP_81 (c)/ TMP_82
Function name: _get
lnorm: 0 rnorm: *
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_81 Function: _get
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_83

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_83(uint256) = TMP_81 (c)/ TMP_82
XXXXX
priceOut_2(uint256) := TMP_83(uint256)
Function name: _get
asgn

Name: TMP_83 Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for priceOut

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_84(bool) = updateTimeOut_1 < updateTimeIn_1
Function name: _get
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_84

Name: TMP_84 Function: _get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_84
Condition...
Conidtion: 
TMP_84
TMP_84
typecheckig node...
updateTimeOut_3(uint256) := updateTimeIn_1(uint256)
Function name: _get
asgn

Name: updateTimeIn Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_2(uint256) := updateTimeOut_1(uint256)
Function name: _get
asgn

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
updateTimeOut_4(uint256) := ϕ(['updateTimeOut_2', 'updateTimeOut_3'])
Function name: _get
Phi
[i]Type for updateTimeOut

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN priceOut_2,updateTimeOut_4
typecheckig node...
RETURN priceOut_2,updateTimeOut_4
RETURN

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "_get":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: _get

Name: priceOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: updateTimeOut Function: _get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TUPLE_3

Name: TUPLE_3 Function: get
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TUPLE_3(uint256,uint256) = INTERNAL_CALL, CompositeMultiOracle._get(bytes6,bytes6,uint256,uint256)(base__2,quote__1,price_2,updateTime_1)
XXXXX
price_3(uint256)= UNPACK TUPLE_3 index: 0 
Function name: get
Reading tuple TUPLE_3 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for price

Name: price Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
updateTime_2(uint256)= UNPACK TUPLE_3 index: 1 
Function name: get
Reading tuple TUPLE_3 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for updateTime

Name: updateTime Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_65(uint256) = price_3 (c)* amount_1
Function name: get
testing mul...
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: amount Function: get
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_65 Function: get
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_65

Name: TMP_65 Function: get
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_66(uint256) = TMP_65 (c)/ 1000000000000000000
Function name: get
val: 1000000000000000000
18
val: 1000000000000000000
18
lnorm: 0 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_66 Function: get
Num: 2
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: TMP_65 Function: get
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_66 Function: get
Num: 2
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_66

Name: TMP_66 Function: get
Num: 2
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef
done.
value_1(uint256) := TMP_66(uint256)
Function name: get
asgn

Name: TMP_66 Function: get
Num: 2
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: value Function: get
Num: 2
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for value

Name: value Function: get
Num: 2
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
RETURN value_1,updateTime_2
RETURN

Name: value Function: get
Num: 2
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef

Name: updateTime Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "get":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: get

Name: value Function: get
Num: 2
Den: -1
Norm: -18
LF: None
Fields: 
Finance Type: undef
___

Name: updateTime Function: get
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: sources
Finding type for sources...
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => CompositeMultiOracle.Source)
CompositeMultiOracle.Source
Final Type: CompositeMultiOracle.Source
global
sources
source
Check copy_toekn_tuple
([-1], [-1], [0], 'SOURCE')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
sources
decimals
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: uint8
uint8
Final Type: uint8
Type: uint8
uint8
Final Type: uint8
FIELDS:
sources Fields:
source
decimals
^^^

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
[*]Type fetched successfully
State_var: _roles
Finding type for _roles...
mapping(bytes4 => AccessControl.RoleData)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes4 => AccessControl.RoleData)
mapping(bytes4 => AccessControl.RoleData)
AccessControl.RoleData
Final Type: AccessControl.RoleData
global
_roles
members
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
global
_roles
adminRole
FIELDS:
_roles Fields:
members
^^^

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: members
Finance Type: undef
[*]Type fetched successfully
State_var: LOCK
Finding type for LOCK...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: LOCK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROOT
Finding type for ROOT...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: ROOT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: paths
Finding type for paths...
mapping(bytes6 => mapping(bytes6 => bytes6[]))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => bytes6[])
bytes6[]
bytes6
Final Type: bytes6

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _peek
Function _peek not marked
Mark Iterations TRUE, proceeding anyway
Function name: _peek
Function Visibility (test): private
State_var: sources
Finding type for sources...
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => CompositeMultiOracle.Source)
CompositeMultiOracle.Source
Final Type: CompositeMultiOracle.Source
global
sources
source
Check copy_toekn_tuple
([-1], [-1], [0], 'SOURCE')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
sources
decimals
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: uint8
uint8
Final Type: uint8
Type: uint8
uint8
Final Type: uint8
FIELDS:
sources Fields:
source
decimals
^^^

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
[*]Type fetched successfully
State_var: _roles
Finding type for _roles...
mapping(bytes4 => AccessControl.RoleData)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes4 => AccessControl.RoleData)
mapping(bytes4 => AccessControl.RoleData)
AccessControl.RoleData
Final Type: AccessControl.RoleData
global
_roles
members
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
global
_roles
adminRole
FIELDS:
_roles Fields:
members
^^^

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: members
Finance Type: undef
[*]Type fetched successfully
State_var: LOCK
Finding type for LOCK...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: LOCK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROOT
Finding type for ROOT...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: ROOT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: paths
Finding type for paths...
mapping(bytes6 => mapping(bytes6 => bytes6[]))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => bytes6[])
bytes6[]
bytes6
Final Type: bytes6

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _get
Function _get not marked
Mark Iterations TRUE, proceeding anyway
Function name: _get
Function Visibility (test): private
State_var: sources
Finding type for sources...
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => CompositeMultiOracle.Source)
CompositeMultiOracle.Source
Final Type: CompositeMultiOracle.Source
global
sources
source
Check copy_toekn_tuple
([-1], [-1], [0], 'SOURCE')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
sources
decimals
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: uint8
uint8
Final Type: uint8
Type: uint8
uint8
Final Type: uint8
FIELDS:
sources Fields:
source
decimals
^^^

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
[*]Type fetched successfully
State_var: _roles
Finding type for _roles...
mapping(bytes4 => AccessControl.RoleData)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes4 => AccessControl.RoleData)
mapping(bytes4 => AccessControl.RoleData)
AccessControl.RoleData
Final Type: AccessControl.RoleData
global
_roles
members
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
global
_roles
adminRole
FIELDS:
_roles Fields:
members
^^^

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: members
Finance Type: undef
[*]Type fetched successfully
State_var: LOCK
Finding type for LOCK...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: LOCK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROOT
Finding type for ROOT...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: ROOT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: paths
Finding type for paths...
mapping(bytes6 => mapping(bytes6 => bytes6[]))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => bytes6[])
bytes6[]
bytes6
Final Type: bytes6

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _setSource
Function _setSource not marked
Mark Iterations TRUE, proceeding anyway
Function name: _setSource
Function Visibility (test): internal
State_var: sources
Finding type for sources...
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => CompositeMultiOracle.Source)
CompositeMultiOracle.Source
Final Type: CompositeMultiOracle.Source
global
sources
source
Check copy_toekn_tuple
([-1], [-1], [0], 'SOURCE')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
sources
decimals
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: uint8
uint8
Final Type: uint8
Type: uint8
uint8
Final Type: uint8
FIELDS:
sources Fields:
source
decimals
^^^

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
[*]Type fetched successfully
State_var: _roles
Finding type for _roles...
mapping(bytes4 => AccessControl.RoleData)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes4 => AccessControl.RoleData)
mapping(bytes4 => AccessControl.RoleData)
AccessControl.RoleData
Final Type: AccessControl.RoleData
global
_roles
members
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
global
_roles
adminRole
FIELDS:
_roles Fields:
members
^^^

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: members
Finance Type: undef
[*]Type fetched successfully
State_var: LOCK
Finding type for LOCK...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: LOCK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROOT
Finding type for ROOT...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: ROOT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: paths
Finding type for paths...
mapping(bytes6 => mapping(bytes6 => bytes6[]))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => bytes6[])
bytes6[]
bytes6
Final Type: bytes6

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _setPath
Function _setPath not marked
Mark Iterations TRUE, proceeding anyway
Function name: _setPath
Function Visibility (test): internal
State_var: sources
Finding type for sources...
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => CompositeMultiOracle.Source)
CompositeMultiOracle.Source
Final Type: CompositeMultiOracle.Source
global
sources
source
Check copy_toekn_tuple
([-1], [-1], [0], 'SOURCE')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
sources
decimals
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: uint8
uint8
Final Type: uint8
Type: uint8
uint8
Final Type: uint8
FIELDS:
sources Fields:
source
decimals
^^^

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
[*]Type fetched successfully
State_var: _roles
Finding type for _roles...
mapping(bytes4 => AccessControl.RoleData)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes4 => AccessControl.RoleData)
mapping(bytes4 => AccessControl.RoleData)
AccessControl.RoleData
Final Type: AccessControl.RoleData
global
_roles
members
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
global
_roles
adminRole
FIELDS:
_roles Fields:
members
^^^

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: members
Finance Type: undef
[*]Type fetched successfully
State_var: LOCK
Finding type for LOCK...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: LOCK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROOT
Finding type for ROOT...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: ROOT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: paths
Finding type for paths...
mapping(bytes6 => mapping(bytes6 => bytes6[]))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => bytes6[])
bytes6[]
bytes6
Final Type: bytes6

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
Mark Iterations TRUE, proceeding anyway
Function name: slitherConstructorConstantVariables
Function Visibility (test): internal
State_var: sources
Finding type for sources...
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => mapping(bytes6 => CompositeMultiOracle.Source))
mapping(bytes6 => CompositeMultiOracle.Source)
CompositeMultiOracle.Source
Final Type: CompositeMultiOracle.Source
global
sources
source
Check copy_toekn_tuple
([-1], [-1], [0], 'SOURCE')
----
Type: address
address
Final Type: address
Type: address
address
Final Type: address
global
sources
decimals
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: uint8
uint8
Final Type: uint8
Type: uint8
uint8
Final Type: uint8
FIELDS:
sources Fields:
source
decimals
^^^

Name: sources Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: source, decimals
Finance Type: undef
[*]Type fetched successfully
State_var: _roles
Finding type for _roles...
mapping(bytes4 => AccessControl.RoleData)
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes4 => AccessControl.RoleData)
mapping(bytes4 => AccessControl.RoleData)
AccessControl.RoleData
Final Type: AccessControl.RoleData
global
_roles
members
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
Type: mapping(address => bool)
mapping(address => bool)
bool
Final Type: bool
global
_roles
adminRole
FIELDS:
_roles Fields:
members
^^^

Name: _roles Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: members
Finance Type: undef
[*]Type fetched successfully
State_var: LOCK
Finding type for LOCK...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: LOCK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ROOT
Finding type for ROOT...
bytes4
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: bytes4
bytes4
Final Type: bytes4

Name: ROOT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: paths
Finding type for paths...
mapping(bytes6 => mapping(bytes6 => bytes6[]))
Check copy_toekn_tuple
([-1], [-1], ['u'], None)
----
Type: mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => mapping(bytes6 => bytes6[]))
mapping(bytes6 => bytes6[])
bytes6[]
bytes6
Final Type: bytes6

Name: paths Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Errors: [<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fde4febdc10>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fde4fedf580>]
Seen contract: {'CompositeMultiOracle': True} Contract name out: IOracle
[x] IOracle not run
Seen contract: {'CompositeMultiOracle': True, 'IOracle': True} Contract name out: CastBytes32Bytes6
[x] CastBytes32Bytes6 not run
Seen contract: {'CompositeMultiOracle': True, 'IOracle': True, 'CastBytes32Bytes6': True} Contract name out: AccessControl
[x] AccessControl not run
Function count: 18
