Vault
VaultToken
ExtendedIERC20
IController
IConverter
IManager
IVault
SafeMath
ERC20
IERC20
SafeERC20
Address
Context
ERC677Token
ERC677
ERC677Receiver
LinkERC20
contract name: Vault
WARNING!!!!
Vault_types.txt
"Vault_types.txt" opened successfully.
[*c], Vault



[sef], MANAGER, vaults, 1, {t, [1], [-1], 0}

{t, [1], [-1], 0}
['t', '[1]', '[-1]', '0']
[sef], MANAGER, controllers, 1, {c, [-1], [-1], 0, CONTROLLER}

{c, [-1], [-1], 0, CONTROLLER}
['c', '[-1]', '[-1]', '0', 'CONTROLLER']
[sef], CONTROLLER, balanceOf, 1, {c, [1], [-1], 0}

{c, [1], [-1], 0}
['c', '[1]', '[-1]', '0']
[sef], MANAGER, withdrawalProtectionFee, 1, {c [-1], [-1], 0}

{c [-1], [-1], 0}
['c [-1]', '[-1]', '0']
[sef], OUTPUTTOKEN, balanceOf, 1, {c, [1], [-1], 0}

{c, [1], [-1], 0}
['c', '[1]', '[-1]', '0']
[sef], CONTROLLER, strategies

[sef], MANAGER, getTokens, 1, {c, -1, -1, 0, TOKEN}

{c, -1, -1, 0, TOKEN}
['c', '-1', '-1', '0', 'TOKEN']
[sef], TOKEN, balanceOf, 1, {c, 1, -1, 0}

{c, 1, -1, 0}
['c', '1', '-1', '0']
[sef], TOKEN, decimals, 1, {c, -1, -1, 0}

{c, -1, -1, 0}
['c', '-1', '-1', '0']


[t], global, manager, -1, -1, 0, MANAGER

[t], global, _name, -1, -1, 0

[t], global, _balances, 1, -1, 0

[t], global, _decimals, -1, -1, 18

[t], global, _allowances, -1, -1, 0

[t], global, MAX, -1, -1, 4

[t], global, _totalSupply, 1, -1, 0

[t], global, _symbol, -1, -1, 0

[t], global, totalDepositCap, 2, -1, 0

[t], global, min, -1, -1, 0



[xf], setMin

[xf], deposit

[xf], depositMultiple

[xf], available

[xf], balanceOfThis

[xf], getPricePerFullShare

[xf], withdrawFee



[t], withdraw, _shares, -1, -1, 0

[t], withdraw, _output, -1, -1, 0, OUTPUTTOKEN

[*] Vault run
Checking... constructor
[x] No Binary
Checking... setGauge
[x] No Binary
Checking... setMin
[o] Marked
Checking... setTotalDepositCap
[x] No Binary
Checking... swap
[x] No Binary
Checking... earn
[x] No Binary
Checking... deposit
[o] Marked
Checking... depositMultiple
[o] Marked
Checking... withdraw
[o] Marked
Checking... withdrawAll
[x] No Binary
Checking... available
[o] Marked
Checking... balance
[o] Marked
Checking... balanceOfThis
[o] Marked
Checking... getPricePerFullShare
[o] Marked
Checking... getTokens
[x] No Binary
Checking... withdrawFee
[o] Marked
Checking... _normalizeDecimals
[x] Not visible 
Checking... slitherConstructorConstantVariables
[x] Not visible 
State_var: MAX
Finding type for MAX...
Num:
-1
Den:
-1
Norm:
4
[*]Type fetched successfully
State_var: min
Finding type for min...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: _allowances
Finding type for _allowances...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: manager
Finding type for manager...
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
[*]Type fetched successfully
State_var: _name
Finding type for _name...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: _balances
State_var: _decimals
Finding type for _decimals...
Num:
-1
Den:
-1
Norm:
18
[*]Type fetched successfully
State_var: manager
State_var: manager
State_var: manager
State_var: manager
State_var: _allowances
State_var: _allowances
State_var: MAX
State_var: manager
State_var: _balances
State_var: _totalSupply
Finding type for _totalSupply...
Num:
1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: manager
State_var: MAX
State_var: manager
State_var: MAX
State_var: manager
State_var: _allowances
State_var: manager
State_var: manager
State_var: _totalSupply
State_var: _symbol
Finding type for _symbol...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: totalDepositCap
Finding type for totalDepositCap...
Num:
2
Den:
-1
Norm:
0
[*]Type fetched successfully
State_var: _balances
State_var: _totalSupply
State_var: manager
State_var: manager
State_var: manager
State_var: manager
contract name: VaultToken
WARNING!!!!
VaultToken_types.txt
Type File not found.
[x] VaultToken not run
contract name: ExtendedIERC20
WARNING!!!!
ExtendedIERC20_types.txt
Type File not found.
[x] ExtendedIERC20 not run
contract name: IController
WARNING!!!!
IController_types.txt
Type File not found.
[x] IController not run
contract name: IConverter
WARNING!!!!
IConverter_types.txt
Type File not found.
[x] IConverter not run
contract name: IManager
WARNING!!!!
IManager_types.txt
Type File not found.
[x] IManager not run
contract name: IVault
WARNING!!!!
IVault_types.txt
Type File not found.
[x] IVault not run
contract name: SafeMath
WARNING!!!!
SafeMath_types.txt
Type File not found.
[x] SafeMath not run
contract name: ERC20
WARNING!!!!
ERC20_types.txt
Type File not found.
[x] ERC20 not run
contract name: IERC20
WARNING!!!!
IERC20_types.txt
Type File not found.
[x] IERC20 not run
contract name: SafeERC20
WARNING!!!!
SafeERC20_types.txt
Type File not found.
[x] SafeERC20 not run
contract name: Address
WARNING!!!!
Address_types.txt
Type File not found.
[x] Address not run
contract name: Context
WARNING!!!!
Context_types.txt
Type File not found.
[x] Context not run
contract name: ERC677Token
WARNING!!!!
ERC677Token_types.txt
Type File not found.
[x] ERC677Token not run
contract name: ERC677
WARNING!!!!
ERC677_types.txt
Type File not found.
[x] ERC677 not run
contract name: ERC677Receiver
WARNING!!!!
ERC677Receiver_types.txt
Type File not found.
[x] ERC677Receiver not run
contract name: LinkERC20
WARNING!!!!
LinkERC20_types.txt
Type File not found.
[x] LinkERC20 not run
[*] Vault run
Reading Function: constructor
Function constructor not marked
Reading Function: setGauge
Function setGauge not marked
Reading Function: setMin
wooo
Reading Function: setTotalDepositCap
Function setTotalDepositCap not marked
Reading Function: swap
Function swap not marked
Reading Function: earn
Function earn not marked
Reading Function: deposit
wooo
Reading Function: depositMultiple
wooo
Reading Function: withdraw
Function name: withdraw
Function Visibility (test): public
_shares
Finding type for _shares...
Num:
-1
Den:
-1
Norm:
0
[*]Type fetched successfully
_output
Finding type for _output...
Num:
-1
Den:
-1
Norm:
0
Linked function: OUTPUTTOKEN
[*]Type fetched successfully
-100
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [-1]
    den: [-1]
clearning node...
clearing ir...?
_shares_1(uint256) := ϕ(['TMP_170'])
clearing ir...?
_output_1(address) := ϕ(['_output_1'])
clearing ir...?
MAX_4(uint256) := ϕ(['MAX_9', 'MAX_0', 'MAX_11', 'MAX_3', 'MAX_13'])
clearing ir...?
manager_13(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_0', 'manager_26', 'manager_12', 'manager_33'])
typecheckig node...
_shares_1(uint256) := ϕ(['TMP_170'])
Function name: withdraw
Phi
[i]Type for _shares
Num:
-1
Den:
-1
Norm:
0
done.
_output_1(address) := ϕ(['_output_1'])
Function name: withdraw
Phi
[i]Type for _output
Num:
-1
Den:
-1
Norm:
0
Linked function: OUTPUTTOKEN
done.
MAX_4(uint256) := ϕ(['MAX_9', 'MAX_0', 'MAX_11', 'MAX_3', 'MAX_13'])
Function name: withdraw
Phi
[i]Type for MAX
Num:
-1
Den:
-1
Norm:
4
done.
manager_13(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_0', 'manager_26', 'manager_12', 'manager_33'])
Function name: withdraw
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
clearning node...
clearing ir...?
MODIFIER_CALL, Vault.checkToken(address)(_output_1)
clearing ir...?
manager_14(IManager) := ϕ(['manager_33'])
typecheckig node...
MODIFIER_CALL, Vault.checkToken(address)(_output_1)
Internal call...
checkToken
_output
Function: checkToken
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
-100
added
xyz
Function name: checkToken
Function Visibility: internal
clearning node...
clearing ir...?
_token_1(address) := ϕ(['_output_1', '_token_1', '_token_1'])
clearing ir...?
manager_31(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_0', 'manager_26', 'manager_12', 'manager_33'])
typecheckig node...
_token_1(address) := ϕ(['_output_1', '_token_1', '_token_1'])
Function name: checkToken
Phi
[i]Type for _token
Num:
-1
Den:
-1
Norm:
-100
Linked function: OUTPUTTOKEN
done.
manager_31(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_0', 'manager_26', 'manager_12', 'manager_33'])
Function name: checkToken
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
clearning node...
clearing ir...?
TMP_214(bool) = HIGH_LEVEL_CALL, dest:manager_31(IManager), function:allowedTokens, arguments:['_token_1']  
has variable
[i] TMP_214 cleared
clearing ir...?
manager_32(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_31', 'manager_24', 'manager_26', 'manager_12', 'manager_33'])
clearing ir...?
TMP_215(address) = HIGH_LEVEL_CALL, dest:manager_32(IManager), function:vaults, arguments:['_token_1']  
has variable
[i] TMP_215 cleared
clearing ir...?
manager_33(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_26', 'manager_12', 'manager_32', 'manager_33'])
clearing ir...?
TMP_216 = CONVERT this to address
clearing ir...?
TMP_217(bool) = TMP_215 == TMP_216
has variable
[i] TMP_217 cleared
clearing ir...?
TMP_218(bool) = TMP_214 && TMP_217
has variable
[i] TMP_218 cleared
clearing ir...?
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,!_token)
typecheckig node...
TMP_214(bool) = HIGH_LEVEL_CALL, dest:manager_31(IManager), function:allowedTokens, arguments:['_token_1']  
Function name: checkToken
High Call: allowedTokens
func name:allowedTokens
other func name:allowedTokens
TMP_214
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
[i]Type for TMP_214
Num:
-1
Den:
-1
Norm:
-100
done.
manager_32(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_31', 'manager_24', 'manager_26', 'manager_12', 'manager_33'])
Function name: checkToken
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
TMP_215(address) = HIGH_LEVEL_CALL, dest:manager_32(IManager), function:vaults, arguments:['_token_1']  
Function name: checkToken
High Call: vaults
func name:vaults
other func name:vaults
TMP_215
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
hlc contract name: MANAGER func_name: vaults
('t', [1], [-1], 0, None)
_token
wfc len: 1
Check copy_toekn_tuple
([-1], [-1, -1], 0, None)
Num:
Den:
Norm:
-100
----
Num:
-1
Den:
-1
Norm:
0
COPIED
[i]Type for TMP_215
Num:
-1
Den:
-1
Norm:
0
done.
manager_33(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_26', 'manager_12', 'manager_32', 'manager_33'])
Function name: checkToken
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
TMP_216 = CONVERT this to address
Function name: checkToken
[i]Type for TMP_216
Num:
-1
Den:
-1
Norm:
0
Linked function: Vault
done.
TMP_217(bool) = TMP_215 == TMP_216
Function name: checkToken
[i]Type for TMP_217
Num:
Den:
Norm:
-100
done.
TMP_218(bool) = TMP_214 && TMP_217
Function name: checkToken
[i]Type for TMP_218
Num:
Den:
Norm:
-100
done.
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,!_token)
Function name: checkToken
[i]Type for TMP_219
Num:
Den:
Norm:
-100
done.
clearning node...
typecheckig node...
IC Saving return values for: checkToken
done.
manager_14(IManager) := ϕ(['manager_33'])
Function name: withdraw
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
clearning node...
clearing ir...?
TMP_140(uint256) = INTERNAL_CALL, Vault.balance()()
clearing ir...?
manager_15(IManager) := ϕ(['manager_24'])
clearing ir...?
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_140', '_shares_1'] 
has variable
[i] TMP_141 cleared
clearing ir...?
TMP_142(uint256) = INTERNAL_CALL, ERC20.totalSupply()()
clearing ir...?
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_141', 'TMP_142'] 
has variable
[i] TMP_143 cleared
clearing ir...?
_amount_1(uint256) := TMP_143(uint256)
has variable
[i] _amount cleared
typecheckig node...
TMP_140(uint256) = INTERNAL_CALL, Vault.balance()()
Internal call...
balance
Function: balance
ic
Internal cal param_cache
-100
added
xyz
Function name: balance
Function Visibility: public
clearning node...
clearing ir...?
manager_21(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_0', 'manager_26', 'manager_12', 'manager_33'])
typecheckig node...
manager_21(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_0', 'manager_26', 'manager_12', 'manager_33'])
Function name: balance
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
typecheckig node...
TMP_177(uint256) = INTERNAL_CALL, Vault.balanceOfThis()()
Internal call...
balanceOfThis
Function: balanceOfThis
ic
Internal cal param_cache
-100
added
xyz
Function name: balanceOfThis
Function Visibility: public
clearning node...
clearing ir...?
manager_25(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_0', 'manager_26', 'manager_12', 'manager_33'])
typecheckig node...
manager_25(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_0', 'manager_26', 'manager_12', 'manager_33'])
Function name: balanceOfThis
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
clearning node...
clearing ir...?
TMP_183 = CONVERT this to address
clearing ir...?
TMP_184(address[]) = HIGH_LEVEL_CALL, dest:manager_25(IManager), function:getTokens, arguments:['TMP_183']  
has variable
[i] TMP_184 cleared
clearing ir...?
manager_26(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_25', 'manager_24', 'manager_26', 'manager_12', 'manager_33'])
clearing ir...?
_tokens_1(address[]) := TMP_184(address[])
has variable
[i] _tokens cleared
typecheckig node...
TMP_183 = CONVERT this to address
Function name: balanceOfThis
[i]Type for TMP_183
Num:
-1
Den:
-1
Norm:
0
Linked function: Vault
done.
TMP_184(address[]) = HIGH_LEVEL_CALL, dest:manager_25(IManager), function:getTokens, arguments:['TMP_183']  
Function name: balanceOfThis
High Call: getTokens
func name:getTokens
other func name:getTokens
TMP_184
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
hlc contract name: MANAGER func_name: getTokens
('c', [-1], [-1], 0, 'TOKEN')
TMP_183
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'TOKEN')
Num:
Den:
Norm:
-100
----
Num:
-1
Den:
-1
Norm:
0
Linked function: TOKEN
COPIED
[i]Type for TMP_184
Num:
-1
Den:
-1
Norm:
0
Linked function: TOKEN
done.
manager_26(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_25', 'manager_24', 'manager_26', 'manager_12', 'manager_33'])
Function name: balanceOfThis
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
_tokens_1(address[]) := TMP_184(address[])
Function name: balanceOfThis
asgn
Num:
Den:
Norm:
-100
0
-100
[i]Type for _tokens
Num:
-1
Den:
-1
Norm:
0
Linked function: TOKEN
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
_balance_1(uint256) := ϕ(['_balance_0', '_balance_2'])
clearing ir...?
i_1(uint8) := ϕ(['i_2', 'i_0'])
clearing ir...?
REF_73 -> LENGTH _tokens_1
clearing ir...?
TMP_185(bool) = i_1 < REF_73
has variable
[i] TMP_185 cleared
clearing ir...?
CONDITION TMP_185
typecheckig node...
_balance_1(uint256) := ϕ(['_balance_0', '_balance_2'])
Function name: balanceOfThis
Phi
[i]Type for _balance
Num:
Den:
Norm:
-100
done.
i_1(uint8) := ϕ(['i_2', 'i_0'])
Function name: balanceOfThis
Phi
[i]Type for i
Num:
Den:
Norm:
-100
done.
REF_73 -> LENGTH _tokens_1
Function name: balanceOfThis
[i]Type for REF_73
Num:
Den:
Norm:
-100
done.
TMP_185(bool) = i_1 < REF_73
Function name: balanceOfThis
testing lt...
-100
0
Num:
Den:
Norm:
0
[i]Type for TMP_185
Num:
Den:
Norm:
0
done.
This IR caused addback:
TMP_185(bool) = i_1 < REF_73
XXXXX
CONDITION TMP_185
Condition...
Conidtion: 
TMP_185
TMP_185
[x]node added back
clearning node...
clearing ir...?
REF_74(address) -> _tokens_1[i_1]
clearing ir...?
_token_1(address) := REF_74(address)
has variable
[i] _token cleared
typecheckig node...
REF_74(address) -> _tokens_1[i_1]
Function name: balanceOfThis
INDEX
Num:
-1
Den:
-1
Norm:
0
Linked function: TOKEN
REFERENCE LEFT VALUE PROPAGATION
_token_1(address) := REF_74(address)
Function name: balanceOfThis
asgn
Num:
Den:
Norm:
-100
0
-100
[i]Type for _token
Num:
-1
Den:
-1
Norm:
0
Linked function: TOKEN
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_186 = CONVERT _token_1 to IERC20
clearing ir...?
TMP_187 = CONVERT this to address
clearing ir...?
TMP_188(uint256) = HIGH_LEVEL_CALL, dest:TMP_186(IERC20), function:balanceOf, arguments:['TMP_187']  
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189(uint256) = INTERNAL_CALL, Vault._normalizeDecimals(address,uint256)(_token_1,TMP_188)
clearing ir...?
TMP_190(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_balance_1', 'TMP_189'] 
has variable
[i] TMP_190 cleared
clearing ir...?
_balance_2(uint256) := TMP_190(uint256)
has variable
[i] _balance cleared
typecheckig node...
TMP_186 = CONVERT _token_1 to IERC20
Function name: balanceOfThis
Num:
Den:
Norm:
-100
-100
[i]Type for TMP_186
Num:
-1
Den:
-1
Norm:
0
Linked function: TOKEN
done.
TMP_187 = CONVERT this to address
Function name: balanceOfThis
[i]Type for TMP_187
Num:
-1
Den:
-1
Norm:
0
Linked function: Vault
done.
TMP_188(uint256) = HIGH_LEVEL_CALL, dest:TMP_186(IERC20), function:balanceOf, arguments:['TMP_187']  
Function name: balanceOfThis
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_188
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: TOKEN
hlc contract name: TOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_187
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
Num:
Den:
Norm:
-100
----
Num:
1
Den:
-1
Norm:
0
COPIED
[i]Type for TMP_188
Num:
1
Den:
-1
Norm:
0
done.
TMP_189(uint256) = INTERNAL_CALL, Vault._normalizeDecimals(address,uint256)(_token_1,TMP_188)
Internal call...
_normalizeDecimals
_token
TMP_188
Function: _normalizeDecimals
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
Param: 1
    num: [1]
    den: [-1]
-100
added
xyz
Function name: _normalizeDecimals
Function Visibility: internal
clearning node...
clearing ir...?
_token_1(address) := ϕ(['_token_1', '_token_1'])
clearing ir...?
_amount_1(uint256) := ϕ(['TMP_188', '_amount_2'])
typecheckig node...
_token_1(address) := ϕ(['_token_1', '_token_1'])
Function name: _normalizeDecimals
Phi
[i]Type for _token
Num:
-1
Den:
-1
Norm:
-100
Linked function: TOKEN
done.
_amount_1(uint256) := ϕ(['TMP_188', '_amount_2'])
Function name: _normalizeDecimals
Phi
[i]Type for _amount
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_204 = CONVERT _token_1 to ExtendedIERC20
clearing ir...?
TMP_205(uint8) = HIGH_LEVEL_CALL, dest:TMP_204(ExtendedIERC20), function:decimals, arguments:[]  
has variable
[i] TMP_205 cleared
clearing ir...?
TMP_206 = CONVERT TMP_205 to uint256
clearing ir...?
_decimals_1(uint256) := TMP_206(uint256)
has variable
[i] _decimals cleared
typecheckig node...
TMP_204 = CONVERT _token_1 to ExtendedIERC20
Function name: _normalizeDecimals
Num:
Den:
Norm:
-100
-100
[i]Type for TMP_204
Num:
-1
Den:
-1
Norm:
0
Linked function: TOKEN
done.
TMP_205(uint8) = HIGH_LEVEL_CALL, dest:TMP_204(ExtendedIERC20), function:decimals, arguments:[]  
Function name: _normalizeDecimals
High Call: decimals
func name:decimals
other func name:decimals
TMP_205
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: TOKEN
hlc contract name: TOKEN func_name: decimals
('c', [-1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None)
Num:
Den:
Norm:
-100
----
Num:
-1
Den:
-1
Norm:
0
COPIED
[i]Type for TMP_205
Num:
-1
Den:
-1
Norm:
0
done.
TMP_206 = CONVERT TMP_205 to uint256
Function name: _normalizeDecimals
Num:
Den:
Norm:
-100
-100
[i]Type for TMP_206
Num:
-1
Den:
-1
Norm:
0
done.
_decimals_1(uint256) := TMP_206(uint256)
Function name: _normalizeDecimals
asgn
Num:
Den:
Norm:
-100
0
-100
[i]Type for _decimals
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_207(bool) = _decimals_1 < 18
has variable
[i] TMP_207 cleared
clearing ir...?
CONDITION TMP_207
typecheckig node...
TMP_207(bool) = _decimals_1 < 18
Function name: _normalizeDecimals
testing lt...
Constatn varible: 18
-100
Constatn varible: 18
val: 18
0
[i]Type for TMP_207
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_207
Condition...
Conidtion: 
TMP_207
TMP_207
clearning node...
clearing ir...?
_amount_3(uint256) := ϕ(['_amount_1', '_amount_2'])
typecheckig node...
_amount_3(uint256) := ϕ(['_amount_1', '_amount_2'])
Function name: _normalizeDecimals
Phi
[i]Type for _amount
Num:
1
Den:
-1
Norm:
-100
done.
clearning node...
clearing ir...?
TMP_208(uint256) = 18 - _decimals_1
has variable
[i] TMP_208 cleared
clearing ir...?
TMP_209(uint256) = 10 ** TMP_208
has variable
[i] TMP_209 cleared
clearing ir...?
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount_1', 'TMP_209'] 
has variable
[i] TMP_210 cleared
clearing ir...?
_amount_2(uint256) := TMP_210(uint256)
has variable
[i] _amount cleared
typecheckig node...
TMP_208(uint256) = 18 - _decimals_1
Function name: _normalizeDecimals
Constatn varible: 18
Constatn varible: 18
val: 18
-100
0
Num:
-1
Den:
-1
Norm:
-100
Num:
-1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
[i]Type for TMP_208
Num:
-1
Den:
-1
Norm:
0
done.
TMP_209(uint256) = 10 ** TMP_208
Function name: _normalizeDecimals
Constatn varible: 10
Num:
-1
Den:
-1
Norm:
-100
Num:
-1
Den:
-1
Norm:
0
Num:
Den:
Norm:
-100
x:0
-1
-100
[i]Type for TMP_209
Num:
-1
Den:
-1
Norm:
-102
done.
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount_1', 'TMP_209'] 
Function name: _normalizeDecimals
High Call: mul
func name:mul
other func name:mul
testing mul...
-100
Num:
Den:
Norm:
-102
[i]Type for TMP_210
Num:
1
Den:
-1
Norm:
-102
done.
_amount_2(uint256) := TMP_210(uint256)
Function name: _normalizeDecimals
asgn
Num:
Den:
Norm:
-100
-102
-100
[i]Type for _amount
Num:
1
Den:
-1
Norm:
-102
done.
typecheckig node...
RETURN _amount_3
RETURN
Num:
1
Den:
-1
Norm:
-102
IC Saving return values for: _normalizeDecimals
_amount
Num:
1
Den:
-1
Norm:
-102
Num:
Den:
Norm:
-100
Num:
1
Den:
-1
Norm:
-100
-100
___
[i]Type for TMP_189
Num:
1
Den:
-1
Norm:
-102
done.
TMP_190(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_balance_1', 'TMP_189'] 
Function name: balanceOfThis
High Call: add
func name:add
other func name:add
Num:
Den:
Norm:
-100
initlize checks
-100
;;;
0
Error with: TMP_190 in function balanceOfThis
Num:
Den:
Norm:
-100
Num:
1
Den:
-1
Norm:
-102
[i]Type for TMP_190
Num:
1
Den:
-1
Norm:
-102
done.
This IR caused addback:
TMP_190(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_balance_1', 'TMP_189'] 
XXXXX
_balance_2(uint256) := TMP_190(uint256)
Function name: balanceOfThis
asgn
Num:
Den:
Norm:
-100
-102
-100
[i]Type for _balance
Num:
1
Den:
-1
Norm:
-102
done.
[x]node added back
clearning node...
clearing ir...?
TMP_191(uint8) := i_1(uint8)
has variable
[i] TMP_191 cleared
clearing ir...?
i_2(uint8) = i_1 + 1
has variable
[i] i cleared
typecheckig node...
TMP_191(uint8) := i_1(uint8)
Function name: balanceOfThis
asgn
Num:
Den:
Norm:
-100
0
-100
[i]Type for TMP_191
Num:
Den:
Norm:
0
done.
This IR caused addback:
TMP_191(uint8) := i_1(uint8)
XXXXX
i_2(uint8) = i_1 + 1
Function name: balanceOfThis
Constatn varible: 1
Num:
Den:
Norm:
-100
initlize checks
-100
;;;
Constatn varible: 1
val: 1
0
Num:
Den:
Norm:
-100
Num:
-1
Den:
-1
Norm:
-100
[i]Type for i
Num:
-1
Den:
-1
Norm:
0
done.
This IR caused addback:
i_2(uint8) = i_1 + 1
XXXXX
[x]node added back
typecheckig node...
RETURN _balance_1
RETURN
Num:
1
Den:
-1
Norm:
-102
IC Saving return values for: balanceOfThis
_balance
Num:
1
Den:
-1
Norm:
-102
Num:
Den:
Norm:
-100
Num:
1
Den:
-1
Norm:
-100
-100
___
[i]Type for TMP_177
Num:
1
Den:
-1
Norm:
-102
done.
This IR caused addback:
TMP_177(uint256) = INTERNAL_CALL, Vault.balanceOfThis()()
XXXXX
manager_22(IManager) := ϕ(['manager_26'])
Function name: balance
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
TMP_178 = CONVERT this to address
Function name: balance
[i]Type for TMP_178
Num:
-1
Den:
-1
Norm:
0
Linked function: Vault
done.
TMP_179(address) = HIGH_LEVEL_CALL, dest:manager_22(IManager), function:controllers, arguments:['TMP_178']  
Function name: balance
High Call: controllers
func name:controllers
other func name:controllers
TMP_179
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
hlc contract name: MANAGER func_name: controllers
('c', [-1], [-1], 0, 'CONTROLLER')
TMP_178
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'CONTROLLER')
Num:
Den:
Norm:
-100
----
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
COPIED
[i]Type for TMP_179
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
done.
manager_23(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_26', 'manager_12', 'manager_22', 'manager_33'])
Function name: balance
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
TMP_180 = CONVERT TMP_179 to IController
Function name: balance
Num:
Den:
Norm:
-100
-100
[i]Type for TMP_180
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
done.
TMP_181(uint256) = HIGH_LEVEL_CALL, dest:TMP_180(IController), function:balanceOf, arguments:[]  
Function name: balance
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_181
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
hlc contract name: CONTROLLER func_name: balanceOf
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
Num:
Den:
Norm:
-100
----
Num:
1
Den:
-1
Norm:
0
COPIED
[i]Type for TMP_181
Num:
1
Den:
-1
Norm:
0
done.
manager_24(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_23', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_26', 'manager_12', 'manager_33'])
Function name: balance
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
TMP_182(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_177', 'TMP_181'] 
Function name: balance
High Call: add
func name:add
other func name:add
Num:
Den:
Norm:
-100
initlize checks
-100
;;;
-102
Error with: TMP_182 in function balance
Num:
1
Den:
-1
Norm:
-102
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_182
Num:
1
Den:
-1
Norm:
-102
done.
RETURN TMP_182
RETURN
Num:
1
Den:
-1
Norm:
-102
IC Saving return values for: balance
TMP_182
Num:
1
Den:
-1
Norm:
-102
Num:
Den:
Norm:
-100
Num:
1
Den:
-1
Norm:
-100
-100
___
[i]Type for TMP_140
Num:
1
Den:
-1
Norm:
-102
done.
manager_15(IManager) := ϕ(['manager_24'])
Function name: withdraw
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_140', '_shares_1'] 
Function name: withdraw
High Call: mul
func name:mul
other func name:mul
testing mul...
-100
Num:
Den:
Norm:
-102
[i]Type for TMP_141
Num:
1
Den:
-1
Norm:
-102
done.
TMP_142(uint256) = INTERNAL_CALL, ERC20.totalSupply()()
Internal call...
totalSupply
Function: totalSupply
ic
Internal cal param_cache
-100
added
xyz
Function name: totalSupply
Function Visibility: public
clearning node...
clearing ir...?
_totalSupply_1(uint256) := ϕ(['_totalSupply_7', '_totalSupply_0', '_totalSupply_4'])
typecheckig node...
_totalSupply_1(uint256) := ϕ(['_totalSupply_7', '_totalSupply_0', '_totalSupply_4'])
Function name: totalSupply
Phi
[i]Type for _totalSupply
Num:
1
Den:
-1
Norm:
0
done.
typecheckig node...
RETURN _totalSupply_1
RETURN
Num:
1
Den:
-1
Norm:
0
IC Saving return values for: totalSupply
_totalSupply
Num:
1
Den:
-1
Norm:
0
Num:
Den:
Norm:
-100
Num:
1
Den:
-1
Norm:
-100
-100
___
[i]Type for TMP_142
Num:
1
Den:
-1
Norm:
0
done.
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_141', 'TMP_142'] 
Function name: withdraw
High Call: div
func name:div
other func name:div
-100
Num:
Den:
Norm:
-102
[i]Type for TMP_143
Num:
-1
Den:
-1
Norm:
-102
done.
_amount_1(uint256) := TMP_143(uint256)
Function name: withdraw
asgn
Num:
Den:
Norm:
-100
-102
-100
[i]Type for _amount
Num:
-1
Den:
-1
Norm:
-102
done.
clearning node...
clearing ir...?
INTERNAL_CALL, ERC20._burn(address,uint256)(msg.sender,_shares_1)
typecheckig node...
INTERNAL_CALL, ERC20._burn(address,uint256)(msg.sender,_shares_1)
Internal call...
_burn
msg.sender
_shares
Function: _burn
ic
not variable
done.
This IR caused addback:
INTERNAL_CALL, ERC20._burn(address,uint256)(msg.sender,_shares_1)
XXXXX
clearning node...
clearing ir...?
TMP_145(uint256) = HIGH_LEVEL_CALL, dest:manager_17(IManager), function:withdrawalProtectionFee, arguments:[]  
has variable
[i] TMP_145 cleared
clearing ir...?
MAX_9(uint256) := ϕ(['MAX_9', 'MAX_11', 'MAX_3', 'MAX_13', 'MAX_8'])
clearing ir...?
manager_18(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_17', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_26', 'manager_12', 'manager_33'])
clearing ir...?
_withdrawalProtectionFee_1(uint256) := TMP_145(uint256)
has variable
[i] _withdrawalProtectionFee cleared
typecheckig node...
TMP_145(uint256) = HIGH_LEVEL_CALL, dest:manager_17(IManager), function:withdrawalProtectionFee, arguments:[]  
Function name: withdraw
High Call: withdrawalProtectionFee
func name:withdrawalProtectionFee
other func name:withdrawalProtectionFee
TMP_145
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
hlc contract name: MANAGER func_name: withdrawalProtectionFee
('c', [-1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None)
Num:
Den:
Norm:
-100
----
Num:
-1
Den:
-1
Norm:
0
COPIED
[i]Type for TMP_145
Num:
-1
Den:
-1
Norm:
0
done.
MAX_9(uint256) := ϕ(['MAX_9', 'MAX_11', 'MAX_3', 'MAX_13', 'MAX_8'])
Function name: withdraw
Phi
[i]Type for MAX
Num:
-1
Den:
-1
Norm:
4
done.
manager_18(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_17', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_26', 'manager_12', 'manager_33'])
Function name: withdraw
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
_withdrawalProtectionFee_1(uint256) := TMP_145(uint256)
Function name: withdraw
asgn
Num:
Den:
Norm:
-100
0
-100
[i]Type for _withdrawalProtectionFee
Num:
-1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_146(bool) = _withdrawalProtectionFee_1 > 0
has variable
[i] TMP_146 cleared
clearing ir...?
CONDITION TMP_146
typecheckig node...
TMP_146(bool) = _withdrawalProtectionFee_1 > 0
Function name: withdraw
testing gt...
Constatn varible: 0
-100
Constatn varible: 0
val: 0
0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_146
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_146
Condition...
Conidtion: 
TMP_146
TMP_146
clearning node...
clearing ir...?
_amount_3(uint256) := ϕ(['_amount_1', '_amount_2'])
typecheckig node...
_amount_3(uint256) := ϕ(['_amount_1', '_amount_2'])
Function name: withdraw
Phi
[i]Type for _amount
Num:
-1
Den:
-1
Norm:
-102
done.
clearning node...
clearing ir...?
TMP_147(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount_1', '_withdrawalProtectionFee_1'] 
has variable
[i] TMP_147 cleared
clearing ir...?
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_147', 'MAX_9'] 
has variable
[i] TMP_148 cleared
clearing ir...?
_withdrawalProtection_1(uint256) := TMP_148(uint256)
has variable
[i] _withdrawalProtection cleared
typecheckig node...
TMP_147(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount_1', '_withdrawalProtectionFee_1'] 
Function name: withdraw
High Call: mul
func name:mul
other func name:mul
testing mul...
-100
Num:
Den:
Norm:
-102
[i]Type for TMP_147
Num:
-1
Den:
-1
Norm:
-102
done.
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_147', 'MAX_9'] 
Function name: withdraw
High Call: div
func name:div
other func name:div
-100
Num:
Den:
Norm:
-106
[i]Type for TMP_148
Num:
-1
Den:
-1
Norm:
-106
done.
_withdrawalProtection_1(uint256) := TMP_148(uint256)
Function name: withdraw
asgn
Num:
Den:
Norm:
-100
-106
-100
[i]Type for _withdrawalProtection
Num:
-1
Den:
-1
Norm:
-106
done.
clearning node...
clearing ir...?
TMP_150 = CONVERT _output_1 to IERC20
clearing ir...?
TMP_151 = CONVERT this to address
clearing ir...?
TMP_152(uint256) = HIGH_LEVEL_CALL, dest:TMP_150(IERC20), function:balanceOf, arguments:['TMP_151']  
has variable
[i] TMP_152 cleared
clearing ir...?
manager_19(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_18', 'manager_26', 'manager_12', 'manager_33'])
clearing ir...?
_balance_1(uint256) := TMP_152(uint256)
has variable
[i] _balance cleared
typecheckig node...
TMP_150 = CONVERT _output_1 to IERC20
Function name: withdraw
Num:
Den:
Norm:
-100
-100
[i]Type for TMP_150
Num:
-1
Den:
-1
Norm:
0
Linked function: OUTPUTTOKEN
done.
TMP_151 = CONVERT this to address
Function name: withdraw
[i]Type for TMP_151
Num:
-1
Den:
-1
Norm:
0
Linked function: Vault
done.
TMP_152(uint256) = HIGH_LEVEL_CALL, dest:TMP_150(IERC20), function:balanceOf, arguments:['TMP_151']  
Function name: withdraw
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_152
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: OUTPUTTOKEN
hlc contract name: OUTPUTTOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_151
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
Num:
Den:
Norm:
-100
----
Num:
1
Den:
-1
Norm:
0
COPIED
[i]Type for TMP_152
Num:
1
Den:
-1
Norm:
0
done.
manager_19(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_18', 'manager_26', 'manager_12', 'manager_33'])
Function name: withdraw
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
_balance_1(uint256) := TMP_152(uint256)
Function name: withdraw
asgn
Num:
Den:
Norm:
-100
0
-100
[i]Type for _balance
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_amount_1', '_withdrawalProtection_1'] 
has variable
[i] TMP_149 cleared
clearing ir...?
_amount_2(uint256) := TMP_149(uint256)
has variable
[i] _amount cleared
typecheckig node...
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_amount_1', '_withdrawalProtection_1'] 
Function name: withdraw
High Call: sub
func name:sub
other func name:sub
-100
-102
Error with: TMP_149 in function withdraw
Num:
-1
Den:
-1
Norm:
-102
Num:
-1
Den:
-1
Norm:
-106
Num:
-1
Den:
-1
Norm:
-102
[i]Type for TMP_149
Num:
-1
Den:
-1
Norm:
-102
done.
_amount_2(uint256) := TMP_149(uint256)
Function name: withdraw
asgn
Num:
Den:
Norm:
-100
-102
-100
[i]Type for _amount
Num:
-1
Den:
-1
Norm:
-102
done.
clearning node...
clearing ir...?
TMP_153(bool) = _balance_1 < _amount_3
has variable
[i] TMP_153 cleared
clearing ir...?
CONDITION TMP_153
typecheckig node...
TMP_153(bool) = _balance_1 < _amount_3
Function name: withdraw
testing lt...
-100
0
Error with: TMP_153 in function withdraw
[i]Type for TMP_153
Num:
-1
Den:
-1
Norm:
-102
done.
CONDITION TMP_153
Condition...
Conidtion: 
TMP_153
TMP_153
clearning node...
clearing ir...?
TMP_154 = CONVERT this to address
clearing ir...?
TMP_155(address) = HIGH_LEVEL_CALL, dest:manager_19(IManager), function:controllers, arguments:['TMP_154']  
has variable
[i] TMP_155 cleared
clearing ir...?
manager_20(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_26', 'manager_12', 'manager_33'])
clearing ir...?
TMP_156 = CONVERT TMP_155 to IController
clearing ir...?
_controller_1(IController) := TMP_156(IController)
has variable
[i] _controller cleared
typecheckig node...
TMP_154 = CONVERT this to address
Function name: withdraw
[i]Type for TMP_154
Num:
-1
Den:
-1
Norm:
0
Linked function: Vault
done.
TMP_155(address) = HIGH_LEVEL_CALL, dest:manager_19(IManager), function:controllers, arguments:['TMP_154']  
Function name: withdraw
High Call: controllers
func name:controllers
other func name:controllers
TMP_155
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
hlc contract name: MANAGER func_name: controllers
('c', [-1], [-1], 0, 'CONTROLLER')
TMP_154
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'CONTROLLER')
Num:
Den:
Norm:
-100
----
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
COPIED
[i]Type for TMP_155
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
done.
manager_20(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_26', 'manager_12', 'manager_33'])
Function name: withdraw
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
TMP_156 = CONVERT TMP_155 to IController
Function name: withdraw
Num:
Den:
Norm:
-100
-100
[i]Type for TMP_156
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
done.
_controller_1(IController) := TMP_156(IController)
Function name: withdraw
asgn
Num:
Den:
Norm:
-100
0
-100
[i]Type for _controller
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_amount_3', '_balance_1'] 
has variable
[i] TMP_157 cleared
clearing ir...?
_toWithdraw_1(uint256) := TMP_157(uint256)
has variable
[i] _toWithdraw cleared
typecheckig node...
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_amount_3', '_balance_1'] 
Function name: withdraw
High Call: sub
func name:sub
other func name:sub
-100
-102
Error with: TMP_157 in function withdraw
Num:
-1
Den:
-1
Norm:
-102
Num:
1
Den:
-1
Norm:
0
Num:
-1
Den:
-1
Norm:
-102
Error with: TMP_157 in function withdraw
[i]Type for TMP_157
Num:
-1
Den:
-1
Norm:
-102
done.
_toWithdraw_1(uint256) := TMP_157(uint256)
Function name: withdraw
asgn
Num:
Den:
Norm:
-100
-102
-100
[i]Type for _toWithdraw
Num:
-1
Den:
-1
Norm:
-102
done.
clearning node...
clearing ir...?
TMP_166 = CONVERT _output_1 to IERC20
clearing ir...?
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['TMP_166', 'msg.sender', '_amount_5'] 
typecheckig node...
TMP_166 = CONVERT _output_1 to IERC20
Function name: withdraw
Num:
Den:
Norm:
-100
-100
[i]Type for TMP_166
Num:
-1
Den:
-1
Norm:
0
Linked function: OUTPUTTOKEN
done.
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['TMP_166', 'msg.sender', '_amount_5'] 
High Call: safeTransfer
func name:safeTransfer
other func name:safeTransfer
done.
clearning node...
clearing ir...?
TMP_158(uint256) = HIGH_LEVEL_CALL, dest:_controller_1(IController), function:strategies, arguments:[]  
has variable
[i] TMP_158 cleared
clearing ir...?
TMP_159(bool) = TMP_158 > 0
has variable
[i] TMP_159 cleared
clearing ir...?
CONDITION TMP_159
typecheckig node...
TMP_158(uint256) = HIGH_LEVEL_CALL, dest:_controller_1(IController), function:strategies, arguments:[]  
Function name: withdraw
High Call: strategies
func name:strategies
other func name:strategies
TMP_158
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
hlc contract name: CONTROLLER func_name: strategies
wfc len: 0
COPIED
[i]Type for TMP_158
Num:
-1
Den:
-1
Norm:
-100
done.
TMP_159(bool) = TMP_158 > 0
Function name: withdraw
testing gt...
Constatn varible: 0
-100
Constatn varible: 0
val: 0
0
Num:
-1
Den:
-1
Norm:
-100
True
[i]Type for TMP_159
Num:
-1
Den:
-1
Norm:
0
done.
CONDITION TMP_159
Condition...
Conidtion: 
TMP_159
TMP_159
clearning node...
clearing ir...?
Emit Withdraw(msg.sender,_amount_5)
typecheckig node...
Emit Withdraw(msg.sender,_amount_5)
clearning node...
typecheckig node...
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:_controller_1(IController), function:withdraw, arguments:['_output_1', '_toWithdraw_1']  
typecheckig node...
HIGH_LEVEL_CALL, dest:_controller_1(IController), function:withdraw, arguments:['_output_1', '_toWithdraw_1']  
High Call: withdraw
func name:withdraw
other func name:withdraw
done.
clearning node...
clearing ir...?
TMP_161 = CONVERT _output_1 to IERC20
clearing ir...?
TMP_162 = CONVERT this to address
clearing ir...?
TMP_163(uint256) = HIGH_LEVEL_CALL, dest:TMP_161(IERC20), function:balanceOf, arguments:['TMP_162']  
has variable
[i] TMP_163 cleared
clearing ir...?
_after_1(uint256) := TMP_163(uint256)
has variable
[i] _after cleared
typecheckig node...
TMP_161 = CONVERT _output_1 to IERC20
Function name: withdraw
Num:
Den:
Norm:
-100
-100
[i]Type for TMP_161
Num:
-1
Den:
-1
Norm:
0
Linked function: OUTPUTTOKEN
done.
TMP_162 = CONVERT this to address
Function name: withdraw
[i]Type for TMP_162
Num:
-1
Den:
-1
Norm:
0
Linked function: Vault
done.
TMP_163(uint256) = HIGH_LEVEL_CALL, dest:TMP_161(IERC20), function:balanceOf, arguments:['TMP_162']  
Function name: withdraw
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_163
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: OUTPUTTOKEN
hlc contract name: OUTPUTTOKEN func_name: balanceOf
('c', [1], [-1], 0, None)
TMP_162
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
Num:
Den:
Norm:
-100
----
Num:
1
Den:
-1
Norm:
0
COPIED
[i]Type for TMP_163
Num:
1
Den:
-1
Norm:
0
done.
_after_1(uint256) := TMP_163(uint256)
Function name: withdraw
asgn
Num:
Den:
Norm:
-100
0
-100
[i]Type for _after
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_after_1', '_balance_1'] 
has variable
[i] TMP_164 cleared
clearing ir...?
_diff_1(uint256) := TMP_164(uint256)
has variable
[i] _diff cleared
typecheckig node...
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_after_1', '_balance_1'] 
Function name: withdraw
High Call: sub
func name:sub
other func name:sub
-100
0
Num:
1
Den:
-1
Norm:
0
Num:
1
Den:
-1
Norm:
0
Num:
Den:
Norm:
0
[i]Type for TMP_164
Num:
1
Den:
-1
Norm:
0
done.
_diff_1(uint256) := TMP_164(uint256)
Function name: withdraw
asgn
Num:
Den:
Norm:
-100
0
-100
[i]Type for _diff
Num:
1
Den:
-1
Norm:
0
done.
clearning node...
clearing ir...?
TMP_165(bool) = _diff_1 < _toWithdraw_1
has variable
[i] TMP_165 cleared
clearing ir...?
CONDITION TMP_165
typecheckig node...
TMP_165(bool) = _diff_1 < _toWithdraw_1
Function name: withdraw
testing lt...
-100
0
Error with: TMP_165 in function withdraw
[i]Type for TMP_165
Num:
-1
Den:
-1
Norm:
-102
done.
CONDITION TMP_165
Condition...
Conidtion: 
TMP_165
TMP_165
clearning node...
clearing ir...?
_amount_5(uint256) := ϕ(['_amount_4', '_amount_1'])
typecheckig node...
_amount_5(uint256) := ϕ(['_amount_4', '_amount_1'])
Function name: withdraw
Phi
[i]Type for _amount
Num:
-1
Den:
-1
Norm:
-102
done.
clearning node...
clearing ir...?
_amount_4(uint256) := _after_1(uint256)
has variable
[i] _amount cleared
typecheckig node...
_amount_4(uint256) := _after_1(uint256)
Function name: withdraw
asgn
Num:
Den:
Norm:
-100
0
-100
[i]Type for _amount
Num:
1
Den:
-1
Norm:
0
done.
Saving return value for withdraw
Reading Function: withdrawAll
Function withdrawAll not marked
Reading Function: available
wooo
Reading Function: balance
Function name: balance
Function Visibility (test): public
0
clearning node...
clearing ir...?
manager_21(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_0', 'manager_26', 'manager_12', 'manager_33'])
typecheckig node...
manager_21(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_0', 'manager_26', 'manager_12', 'manager_33'])
Function name: balance
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
clearning node...
clearing ir...?
TMP_177(uint256) = INTERNAL_CALL, Vault.balanceOfThis()()
clearing ir...?
manager_22(IManager) := ϕ(['manager_26'])
clearing ir...?
TMP_178 = CONVERT this to address
clearing ir...?
TMP_179(address) = HIGH_LEVEL_CALL, dest:manager_22(IManager), function:controllers, arguments:['TMP_178']  
has variable
[i] TMP_179 cleared
clearing ir...?
manager_23(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_26', 'manager_12', 'manager_22', 'manager_33'])
clearing ir...?
TMP_180 = CONVERT TMP_179 to IController
clearing ir...?
TMP_181(uint256) = HIGH_LEVEL_CALL, dest:TMP_180(IController), function:balanceOf, arguments:[]  
has variable
[i] TMP_181 cleared
clearing ir...?
manager_24(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_23', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_26', 'manager_12', 'manager_33'])
clearing ir...?
TMP_182(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_177', 'TMP_181'] 
has variable
[i] TMP_182 cleared
clearing ir...?
RETURN TMP_182
typecheckig node...
TMP_177(uint256) = INTERNAL_CALL, Vault.balanceOfThis()()
Internal call...
balanceOfThis
Function: balanceOfThis
ic
Internal cal param_cache
0
[i]Type for TMP_177
Num:
1
Den:
-1
Norm:
-102
done.
manager_22(IManager) := ϕ(['manager_26'])
Function name: balance
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
TMP_178 = CONVERT this to address
Function name: balance
[i]Type for TMP_178
Num:
-1
Den:
-1
Norm:
0
Linked function: Vault
done.
TMP_179(address) = HIGH_LEVEL_CALL, dest:manager_22(IManager), function:controllers, arguments:['TMP_178']  
Function name: balance
High Call: controllers
func name:controllers
other func name:controllers
TMP_179
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
hlc contract name: MANAGER func_name: controllers
('c', [-1], [-1], 0, 'CONTROLLER')
TMP_178
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'CONTROLLER')
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
----
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
COPIED
[i]Type for TMP_179
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
done.
manager_23(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_26', 'manager_12', 'manager_22', 'manager_33'])
Function name: balance
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
TMP_180 = CONVERT TMP_179 to IController
Function name: balance
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
0
[i]Type for TMP_180
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
done.
TMP_181(uint256) = HIGH_LEVEL_CALL, dest:TMP_180(IController), function:balanceOf, arguments:[]  
Function name: balance
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_181
WIP
Num:
-1
Den:
-1
Norm:
0
Linked function: CONTROLLER
hlc contract name: CONTROLLER func_name: balanceOf
('c', [1], [-1], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None)
Num:
1
Den:
-1
Norm:
0
----
Num:
1
Den:
-1
Norm:
0
COPIED
[i]Type for TMP_181
Num:
1
Den:
-1
Norm:
0
done.
manager_24(IManager) := ϕ(['manager_19', 'manager_30', 'manager_35', 'manager_23', 'manager_6', 'manager_39', 'manager_1', 'manager_37', 'manager_28', 'manager_24', 'manager_26', 'manager_12', 'manager_33'])
Function name: balance
Phi
[i]Type for manager
Num:
-1
Den:
-1
Norm:
0
Linked function: MANAGER
done.
TMP_182(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_177', 'TMP_181'] 
Function name: balance
High Call: add
func name:add
other func name:add
Num:
Den:
Norm:
-100
initlize checks
-100
;;;
-102
Error with: TMP_182 in function balance
Num:
1
Den:
-1
Norm:
-102
Num:
1
Den:
-1
Norm:
0
[i]Type for TMP_182
Num:
1
Den:
-1
Norm:
-102
done.
RETURN TMP_182
RETURN
Num:
1
Den:
-1
Norm:
-102
Saving return value for balance
_balance
&&
TMP_182
&&
TMP_182
&&
Reading Function: balanceOfThis
wooo
Reading Function: getPricePerFullShare
wooo
Reading Function: getTokens
Function getTokens not marked
Reading Function: withdrawFee
wooo
Reading Function: _normalizeDecimals
Function _normalizeDecimals not marked
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
[x] VaultToken not run
[x] ExtendedIERC20 not run
[x] IController not run
[x] IConverter not run
[x] IManager not run
[x] IVault not run
[x] SafeMath not run
[x] ERC20 not run
[x] IERC20 not run
[x] SafeERC20 not run
[x] Address not run
[x] Context not run
[x] ERC677Token not run
[x] ERC677 not run
[x] ERC677Receiver not run
[x] LinkERC20 not run
