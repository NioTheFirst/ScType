ConcentratedLiquidityPool
IBentoBoxMinimal
IMasterDeployer
IPool
IPositionManager
ITridentCallee
ITridentRouter
RebaseLibrary
DyDxMath
FullMath
SwapLib
TickMath
Ticks
UnsafeMath
contract name: ConcentratedLiquidityPool
WARNING!!!!
ConcentratedLiquidityPool_types.txt
Finance file: ConcentratedLiquidityPool_ftypes.txt
"ConcentratedLiquidityPool_types.txt" opened successfully.
[*c], ConcentratedLiquidityPool

constructor

mint

burnSingle

collect

swap

rangeFeeGrowth

rangeSecondsInside

[sef], BENTO, withdraw, 1, {c, -1, -1, 0}

{c, -1, -1, 0}
['c', '-1', '-1', '0']
[sef], BENTO, transfer, 1, {c, -1, -1, 0}

{c, -1, -1, 0}
['c', '-1', '-1', '0']
[sef], BENTO, balanceOf, 1, {c, -1, -1, 0}

{c, -1, -1, 0}
['c', '-1', '-1', '0']
[sef], TickMath, getSqrtRatioAtTick, 1, {c, -1, -1, 0}

{c, -1, -1, 0}
['c', '-1', '-1', '0']
[sef], DyDxMath, getDy, 1, {c, -1, -1, 0}

{c, -1, -1, 0}
['c', '-1', '-1', '0']
[sef], DyDxMath, getDx, 1, {c, -1, -1, 0}

{c, -1, -1, 0}
['c', '-1', '-1', '0']
[sef], DyDxMath, getLiquidityForAmounts

[sef], Ticks, remove

[sef], DEPLOYER, bento, 1, {c, -1, -1, 0, BENTO}

{c, -1, -1, 0, BENTO}
['c', '-1', '-1', '0', 'BENTO']
[sef], DEPLOYER, barFeeTo

[sef], DEPLOYER, barFee

[sef], Ticks, getMaxLiquidity

[sef], Ticks, insert

[sef], Ticks, cross, 2, {c, -1, -1, 0}, {c, -1, -1, 0}

{c, -1, -1, 0}
['c', '-1', '-1', '0']
{c, -1, -1, 0}
['c', '-1', '-1', '0']
[sef], FullMath, mulDiv, 1, {t, [1, 2], [3], 0}

{t, [1, 2], [3], 0}
['t', '[1, 2]', '[3]', '0']
[sef], MANAGER, positionMintCallback

[sef], FullMath, mulDivRoundingUp, 1, {t, [1,2], [3], 0}

{t, [1,2], [3], 0}
['t', '[1,2]', '[3]', '0']
[sef], UnsafeMath, divRoundingUp, 1, {t, [1], [2], 0}

{t, [1], [2], 0}
['t', '[1]', '[2]', '0']
[sef], SwapLib, handleFees, 4, {c, -1, -1, 0}, {c, -1, -1, 0}, {c, -1, -1, 0}, {c, -1, -1, 0}

{c, -1, -1, 0}
['c', '-1', '-1', '0']
{c, -1, -1, 0}
['c', '-1', '-1', '0']
{c, -1, -1, 0}
['c', '-1', '-1', '0']
{c, -1, -1, 0}
['c', '-1', '-1', '0']
[t], global, MAX_TICK_LIQUIDITY

[t], global, barFeeTo

[t], global, bento, -1, -1, 0, BENTO

[t], global, masterDeployer, -1, -1, 0, DEPLOYER

[t], global, swapFee

[t], global, tickSpacing

[t], global, token0

[t], global, token1

[t], global, unlocked

[t], global, barFee

[t], global, feeGrowthGlobal0

[t], global, feeGrowthGlobal1

[t], global, lastObservation

[t], global, liquidity

[t], global, nearestTick

[t], global, price

[t], global, secondsPerLiquidity

[t], global, ticks

[t], global, reserve0

[t], global, reserve1

[t], global, token0ProtocolFee

[t], global, token1ProtocolFee

[t], global, MAX_FEE

[t], global, positions

[t*], global, positions, feeGrowthInside0Last

[t*], global, positions, feeGrowthInside1Last

[t], global, MAX_TICK

[t], constructor, _masterDeployer, -1, -1, 0, DEPLOYER

[t], constructor, _token0

[t], constructor, _token1

[t], constructor, _swapFee

[t], constructor, _price

[t], constructor, _tickSpacing



[t], burn, lower

[t], burn, upper

[t], burn, amount

[t], burn, recipient

[t], burn, unwrapBento

[t], collect, lower

[t], collect, upper

[t], collect, recipient

[t], swap, inAmount

[t], swap, recipient

[t], rangeFeeGrowth, lowerTick

[t], rangeFeeGrowth, upperTick

[t], rangeSecondsInside, lowerTick

[t], rangeSecondsInside, upperTick

[t*], mint, mintParams, positionOwner, -1, -1, 0, MANAGER

Param: [*c]
Param:  ConcentratedLiquidityPool

Param: [xf]
Param:  constructor

Param: [xf]
Param:  mint

Param: [xf]
Param:  burnSingle

Param: [xf]
Param:  collect

Param: [xf]
Param:  swap

Param: [xf]
Param:  rangeFeeGrowth

Param: [xf]
Param:  rangeSecondsInside

Param: [sef]
Param:  TickMath
Param:  getSqrtRatioAtTick
Param:  1
Param:  {c
Param:  -1
Param:  -1
Param:  0
Param:  f: 0}

Isolated Param: 0
F num: 0
Param: [sef]
Param:  DyDxMath
Param:  getDy
Param:  1
Param:  {c
Param:  -1
Param:  -1
Param:  0
Param:  f: 0}

Isolated Param: 0
F num: 0
Param: [sef]
Param:  DyDxMath
Param:  getDx
Param:  1
Param:  {c
Param:  -1
Param:  -1
Param:  0
Param:  f: 0}

Isolated Param: 0
F num: 0
Param: [sef]
Param:  Ticks
Param:  remove

Param: [sef]
Param:  FullMath
Param:  mulDiv
Param:  1
Param:  {t
Param:  [1
Param:  2]
Param:  [3]
Param:  0
Param:  f:11}

Isolated Param: 11
F num: 11
Param: [t]
Param:  global
Param:  MAX_TICK_LIQUIDITY

Param: [t]
Param:  global
Param:  barFeeTo

Param: [t]
Param:  global
Param:  bento

Param: [t]
Param:  global
Param:  masterDeployer

Param: [t]
Param:  global
Param:  swapFee

Param: [t]
Param:  global
Param:  tickSpacing

Param: [t]
Param:  global
Param:  token0

Param: [t]
Param:  global
Param:  token1

Param: [t]
Param:  global
Param:  unlocked

Param: [t]
Param:  global
Param:  barFee

Param: [t]
Param:  global
Param:  feeGrowthGlobal0
Param:  f:10

Isolated Param: 10
F num: 10
Param: [t]
Param:  global
Param:  feeGrowthGlobal1
Param:  f:10

Isolated Param: 10
F num: 10
Param: [t]
Param:  global
Param:  lastObservation

Param: [t]
Param:  global
Param:  liquidity

Param: [t]
Param:  global
Param:  nearestTick

Param: [t]
Param:  global
Param:  price

Param: [t]
Param:  global
Param:  secondsPerLiquidity

Param: [t]
Param:  global
Param:  ticks

Param: [t]
Param:  global
Param:  reserve0
Param:  f: 30

Isolated Param: 30
F num: 30
Param: [t]
Param:  global
Param:  reserve1
Param:  f:30

Isolated Param: 30
F num: 30
Param: [t]
Param:  global
Param:  token0ProtocolFee

Param: [t]
Param:  global
Param:  token1ProtocolFee

Param: [t]
Param:  global
Param:  MAX_FEE

Param: [t]
Param:  global
Param:  positions

Param: [t*]
Param:  global
Param:  positions
Param:  feeGrowthInside0Last
Param:  f:10

Isolated Param: 10
F num: 10
Param: [t*]
Param:  global
Param:  positions
Param:  feeGrowthInside1Last
Param:  f:10

Isolated Param: 10
F num: 10
Param: [t]
Param:  global
Param:  MAX_TICK

Param: 

Param: [t]
Param:  burn
Param:  lower

Param: [t]
Param:  burn
Param:  upper

Param: [t]
Param:  burn
Param:  amount
Param:  f: 0

Isolated Param: 0
F num: 0
Param: [t]
Param:  burn
Param:  recipient

Param: [t]
Param:  burn
Param:  unwrapBento

[*] ConcentratedLiquidityPool run
Checking... constructor Visibility: public
[o] Marked
Checking... mint Visibility: public
[o] Marked
Checking... burn Visibility: public
[o] Marked
Checking... burnSingle Visibility: public
[x] No Binary
Checking... collect Visibility: public
[o] Marked
Checking... swap Visibility: public
[o] Marked
Checking... flashSwap Visibility: public
[x] No Binary
Checking... updateBarFee Visibility: public
[x] No Binary
Checking... collectProtocolFee Visibility: public
[o] Marked
Checking... _ensureTickSpacing Visibility: internal
[x] Not visible 
Checking... _getAmountsForLiquidity Visibility: internal
[x] Not visible 
Checking... _updateReserves Visibility: internal
[x] Not visible 
Checking... _updateFees Visibility: internal
[x] Not visible 
Checking... _updatePosition Visibility: internal
[x] Not visible 
Checking... _balance Visibility: internal
[x] Not visible 
Checking... _transfer Visibility: internal
[x] Not visible 
Checking... _transferBothTokens Visibility: internal
[x] Not visible 
Checking... rangeFeeGrowth Visibility: public
[o] Marked
Checking... rangeSecondsInside Visibility: public
[o] Marked
Checking... getAssets Visibility: public
[x] No Binary
Checking... getAmountOut Visibility: public
[x] No Binary
Checking... getImmutables Visibility: public
[x] No Binary
Checking... getPriceAndNearestTicks Visibility: public
[x] No Binary
Checking... getTokenProtocolFees Visibility: public
[x] No Binary
Checking... getReserves Visibility: public
[x] No Binary
Checking... getLiquidityAndLastObservation Visibility: public
[x] No Binary
Checking... slitherConstructorConstantVariables Visibility: internal
[x] Not visible 
State_var: unlocked
Finding type for unlocked...
uint256
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
State_var: barFeeTo
Finding type for barFeeTo...
address
State_var: bento
Finding type for bento...
IBentoBoxMinimal
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
State_var: swapFee
Finding type for swapFee...
uint24
State_var: tickSpacing
Finding type for tickSpacing...
uint24
State_var: token0
Finding type for token0...
address
State_var: token1
Finding type for token1...
address
State_var: barFee
Finding type for barFee...
uint256
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
State_var: lastObservation
Finding type for lastObservation...
uint32
State_var: liquidity
Finding type for liquidity...
uint128
State_var: nearestTick
Finding type for nearestTick...
int24
State_var: price
Finding type for price...
uint160
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
State_var: reserve0
Finding type for reserve0...
uint128
State_var: reserve1
Finding type for reserve1...
uint128
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
contract name: IBentoBoxMinimal
WARNING!!!!
IBentoBoxMinimal_types.txt
Finance File not Found
Type File not found.
[x] IBentoBoxMinimal not run
contract name: IMasterDeployer
WARNING!!!!
IMasterDeployer_types.txt
Finance File not Found
Type File not found.
[x] IMasterDeployer not run
contract name: IPool
WARNING!!!!
IPool_types.txt
Finance File not Found
Type File not found.
[x] IPool not run
contract name: IPositionManager
WARNING!!!!
IPositionManager_types.txt
Finance File not Found
Type File not found.
[x] IPositionManager not run
contract name: ITridentCallee
WARNING!!!!
ITridentCallee_types.txt
Finance File not Found
Type File not found.
[x] ITridentCallee not run
contract name: ITridentRouter
WARNING!!!!
ITridentRouter_types.txt
Finance File not Found
Type File not found.
[x] ITridentRouter not run
contract name: RebaseLibrary
WARNING!!!!
RebaseLibrary_types.txt
Finance File not Found
Type File not found.
[x] RebaseLibrary not run
contract name: DyDxMath
WARNING!!!!
DyDxMath_types.txt
Finance File not Found
Type File not found.
[x] DyDxMath not run
contract name: FullMath
WARNING!!!!
FullMath_types.txt
Finance File not Found
Type File not found.
[x] FullMath not run
contract name: SwapLib
WARNING!!!!
SwapLib_types.txt
Finance File not Found
Type File not found.
[x] SwapLib not run
contract name: TickMath
WARNING!!!!
TickMath_types.txt
Finance File not Found
Type File not found.
[x] TickMath not run
contract name: Ticks
WARNING!!!!
Ticks_types.txt
Finance File not Found
Type File not found.
[x] Ticks not run
contract name: UnsafeMath
WARNING!!!!
UnsafeMath_types.txt
Finance File not Found
Type File not found.
[x] UnsafeMath not run
Seen contract: {} Contract name out: ConcentratedLiquidityPool
[*] ConcentratedLiquidityPool run
Reading Function: constructor
Function name: constructor
Function Visibility (test): public
_deployData
Finding type for _deployData...
bytes
SKIP bytes
_masterDeployer
Finding type for _masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER')
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: _masterDeployer Function: constructor
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: DEPLOYER
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: DEPLOYER
    fields: []
    fintype: -1
clearning node...
clearing ir...?
MAX_FEE_1(uint24) := ϕ(['MAX_FEE_0'])
has variable
typecheckig node...
MAX_FEE_1(uint24) := ϕ(['MAX_FEE_0'])
Function name: constructor
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_0(address,address,uint24,uint160,uint24) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint24,uint160,uint24))
clearing ir...?
_token0_1(address)= UNPACK TUPLE_0 index: 0 
has variable
[i] _token0 cleared
clearing ir...?
_token1_1(address)= UNPACK TUPLE_0 index: 1 
has variable
[i] _token1 cleared
clearing ir...?
_swapFee_1(uint24)= UNPACK TUPLE_0 index: 2 
has variable
[i] _swapFee cleared
clearing ir...?
_price_1(uint160)= UNPACK TUPLE_0 index: 3 
has variable
[i] _price cleared
clearing ir...?
_tickSpacing_1(uint24)= UNPACK TUPLE_0 index: 4 
has variable
[i] _tickSpacing cleared
typecheckig node...
TUPLE_0(address,address,uint24,uint160,uint24) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint24,uint160,uint24))
[i]Type for TUPLE_0

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_token0_1(address)= UNPACK TUPLE_0 index: 0 
Function name: constructor
Reading tuple TUPLE_0 index 0
Finding type for _token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _token0 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for _token0

Name: _token0 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_token1_1(address)= UNPACK TUPLE_0 index: 1 
Function name: constructor
Reading tuple TUPLE_0 index 1
Finding type for _token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _token1 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for _token1

Name: _token1 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_swapFee_1(uint24)= UNPACK TUPLE_0 index: 2 
Function name: constructor
Reading tuple TUPLE_0 index 2
Finding type for _swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint24
uint24
Final Type: uint24

Name: _swapFee Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for _swapFee

Name: _swapFee Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_price_1(uint160)= UNPACK TUPLE_0 index: 3 
Function name: constructor
Reading tuple TUPLE_0 index 3
Finding type for _price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint160
uint160
Final Type: uint160

Name: _price Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for _price

Name: _price Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_tickSpacing_1(uint24)= UNPACK TUPLE_0 index: 4 
Function name: constructor
Reading tuple TUPLE_0 index 4
Finding type for _tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint24
uint24
Final Type: uint24

Name: _tickSpacing Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for _tickSpacing

Name: _tickSpacing Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_0 = CONVERT 0 to address
has variable
[i] TMP_0 cleared
clearing ir...?
TMP_1(bool) = _token0_1 != TMP_0
has variable
[i] TMP_1 cleared
clearing ir...?
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,ZERO_ADDRESS)
typecheckig node...
TMP_0 = CONVERT 0 to address
Function name: constructor
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_0 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_0

Name: TMP_0 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_1(bool) = _token0_1 != TMP_0
Function name: constructor
[i]Type for TMP_1

Name: TMP_1 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,ZERO_ADDRESS)
[i]Type for TMP_2

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_3 = CONVERT this to address
has variable
[i] TMP_3 cleared
clearing ir...?
TMP_4(bool) = _token0_1 != TMP_3
has variable
[i] TMP_4 cleared
clearing ir...?
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,INVALID_TOKEN0)
typecheckig node...
TMP_3 = CONVERT this to address
Function name: constructor
[i]Type for TMP_3

Name: TMP_3 Function: constructor
Num: -1
Den: -1
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TMP_4(bool) = _token0_1 != TMP_3
Function name: constructor
[i]Type for TMP_4

Name: TMP_4 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,INVALID_TOKEN0)
[i]Type for TMP_5

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_6 = CONVERT this to address
has variable
[i] TMP_6 cleared
clearing ir...?
TMP_7(bool) = _token1_1 != TMP_6
has variable
[i] TMP_7 cleared
clearing ir...?
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,INVALID_TOKEN1)
typecheckig node...
TMP_6 = CONVERT this to address
Function name: constructor
[i]Type for TMP_6

Name: TMP_6 Function: constructor
Num: -1
Den: -1
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TMP_7(bool) = _token1_1 != TMP_6
Function name: constructor
[i]Type for TMP_7

Name: TMP_7 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,INVALID_TOKEN1)
[i]Type for TMP_8

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_9(bool) = _swapFee_1 <= MAX_FEE_1
has variable
[i] TMP_9 cleared
clearing ir...?
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,INVALID_SWAP_FEE)
typecheckig node...
TMP_9(bool) = _swapFee_1 <= MAX_FEE_1
Function name: constructor
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_9

Name: TMP_9 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,INVALID_SWAP_FEE)
[i]Type for TMP_10

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
token0_1(address) := _token0_1(address)
has variable
typecheckig node...
token0_1(address) := _token0_1(address)
Function name: constructor
asgn

Name: _token0 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token0 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for token0

Name: token0 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
token1_1(address) := _token1_1(address)
has variable
typecheckig node...
token1_1(address) := _token1_1(address)
Function name: constructor
asgn

Name: _token1 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token1 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for token1

Name: token1 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
swapFee_1(uint24) := _swapFee_1(uint24)
has variable
typecheckig node...
swapFee_1(uint24) := _swapFee_1(uint24)
Function name: constructor
asgn

Name: _swapFee Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: swapFee Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for swapFee

Name: swapFee Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
price_1(uint160) := _price_1(uint160)
has variable
typecheckig node...
price_1(uint160) := _price_1(uint160)
Function name: constructor
asgn

Name: _price Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for price

Name: price Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
tickSpacing_1(uint24) := _tickSpacing_1(uint24)
has variable
typecheckig node...
tickSpacing_1(uint24) := _tickSpacing_1(uint24)
Function name: constructor
asgn

Name: _tickSpacing Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: tickSpacing Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tickSpacing

Name: tickSpacing Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_11(uint128) = LIBRARY_CALL, dest:Ticks, function:Ticks.getMaxLiquidity(uint24), arguments:['_tickSpacing_1'] 
has variable
[i] TMP_11 cleared
clearing ir...?
MAX_TICK_LIQUIDITY_1(uint128) := TMP_11(uint128)
has variable
typecheckig node...
TMP_11(uint128) = LIBRARY_CALL, dest:Ticks, function:Ticks.getMaxLiquidity(uint24), arguments:['_tickSpacing_1'] 
Function name: constructor
Library Call: getMaxLiquidity
hlc contract name: Ticks func_name: getMaxLiquidity
wfc len: 0
COPIED
[i]Type for TMP_11

Name: TMP_11 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
MAX_TICK_LIQUIDITY_1(uint128) := TMP_11(uint128)
Function name: constructor
asgn

Name: TMP_11 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MAX_TICK_LIQUIDITY Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_2(int24) -> TickMath.MIN_TICK
has variable
clearing ir...?
REF_3(Ticks.Tick) -> ticks_0[REF_2]
has variable
clearing ir...?
REF_5(int24) -> TickMath.MIN_TICK
has variable
clearing ir...?
REF_6(int24) -> TickMath.MAX_TICK
has variable
clearing ir...?
TMP_12 = CONVERT 0 to uint128
has variable
[i] TMP_12 cleared
clearing ir...?
TMP_13 = new Tick(REF_5,REF_6,TMP_12,0,0,0)
clearing ir...?
ticks_1(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0'])
has variable
clearing ir...?
REF_3 (->ticks_1) := TMP_13(Ticks.Tick)
has variable
typecheckig node...
REF_2(int24) -> TickMath.MIN_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MIN_TICK
global
TickMath Fields:
^^^
[i]Type for REF_2

Name: TickMath.MIN_TICK Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MIN_TICK Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_3(Ticks.Tick) -> ticks_0[REF_2]
Function name: constructor
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
ticks
[i]Type for REF_3

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_3(Ticks.Tick) -> ticks_0[REF_2]
XXXXX
REF_5(int24) -> TickMath.MIN_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MIN_TICK
global
TickMath Fields:
MIN_TICK
^^^

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_5

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_6(int24) -> TickMath.MAX_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MAX_TICK
global
TickMath Fields:
MIN_TICK
^^^
[i]Type for REF_6

Name: TickMath.MAX_TICK Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MAX_TICK Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MAX_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_12 = CONVERT 0 to uint128
Function name: constructor
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_12 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_12

Name: TMP_12 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_13 = new Tick(REF_5,REF_6,TMP_12,0,0,0)
[i]Type for TMP_13

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_1(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0'])
Function name: constructor
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_3 (->ticks_1) := TMP_13(Ticks.Tick)
Function name: constructor
asgn

Name: TMP_13 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_3 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_3

Name: REF_3 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_3 (->ticks_1) := TMP_13(Ticks.Tick)
XXXXX
clearning node...
clearing ir...?
REF_7(int24) -> TickMath.MAX_TICK
has variable
clearing ir...?
REF_8(Ticks.Tick) -> ticks_1[REF_7]
has variable
clearing ir...?
REF_10(int24) -> TickMath.MIN_TICK
has variable
clearing ir...?
REF_11(int24) -> TickMath.MAX_TICK
has variable
clearing ir...?
TMP_14 = CONVERT 0 to uint128
has variable
[i] TMP_14 cleared
clearing ir...?
TMP_15 = new Tick(REF_10,REF_11,TMP_14,0,0,0)
clearing ir...?
ticks_2(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_1'])
has variable
clearing ir...?
REF_8 (->ticks_2) := TMP_15(Ticks.Tick)
has variable
typecheckig node...
REF_7(int24) -> TickMath.MAX_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MAX_TICK
global
TickMath Fields:
MIN_TICK
MAX_TICK
^^^

Name: MAX_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_7

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MAX_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_8(Ticks.Tick) -> ticks_1[REF_7]
Function name: constructor
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_8

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_10(int24) -> TickMath.MIN_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MIN_TICK
global
TickMath Fields:
MIN_TICK
MAX_TICK
^^^

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_10

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_11(int24) -> TickMath.MAX_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MAX_TICK
global
TickMath Fields:
MIN_TICK
MAX_TICK
^^^

Name: MAX_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_11

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MAX_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_14 = CONVERT 0 to uint128
Function name: constructor
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_14 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_14

Name: TMP_14 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_15 = new Tick(REF_10,REF_11,TMP_14,0,0,0)
[i]Type for TMP_15

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_2(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_1'])
Function name: constructor
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_8 (->ticks_2) := TMP_15(Ticks.Tick)
Function name: constructor
asgn

Name: TMP_15 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_8 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_8

Name: REF_8 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_8 (->ticks_2) := TMP_15(Ticks.Tick)
XXXXX
clearning node...
clearing ir...?
REF_12(int24) -> TickMath.MIN_TICK
has variable
clearing ir...?
nearestTick_1(int24) := REF_12(int24)
has variable
typecheckig node...
REF_12(int24) -> TickMath.MIN_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MIN_TICK
global
TickMath Fields:
MIN_TICK
MAX_TICK
^^^

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_12

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_1(int24) := REF_12(int24)
Function name: constructor
asgn

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nearestTick Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nearestTick

Name: nearestTick Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_16(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:bento, arguments:[]  
has variable
[i] TMP_16 cleared
clearing ir...?
TMP_17 = CONVERT TMP_16 to IBentoBoxMinimal
has variable
[i] TMP_17 cleared
clearing ir...?
bento_1(IBentoBoxMinimal) := TMP_17(IBentoBoxMinimal)
has variable
typecheckig node...
TMP_16(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:bento, arguments:[]  
Function name: constructor
High Call: bento
func name:bento
other func name:bento
TMP_16
hlc contract name: DEPLOYER func_name: bento
('c', [-1], [-1], 0, 'BENTO')
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BENTO', -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_16

Name: TMP_16 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
TMP_17 = CONVERT TMP_16 to IBentoBoxMinimal
Function name: constructor

Name: TMP_16 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef

Name: TMP_17 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_17

Name: TMP_17 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
bento_1(IBentoBoxMinimal) := TMP_17(IBentoBoxMinimal)
Function name: constructor
asgn

Name: TMP_17 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef

Name: bento Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for bento

Name: bento Function: constructor
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_18(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFeeTo, arguments:[]  
has variable
[i] TMP_18 cleared
clearing ir...?
barFeeTo_1(address) := TMP_18(address)
has variable
typecheckig node...
TMP_18(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFeeTo, arguments:[]  
Function name: constructor
High Call: barFeeTo
func name:barFeeTo
other func name:barFeeTo
TMP_18
hlc contract name: DEPLOYER func_name: barFeeTo
wfc len: 0
COPIED
[i]Type for TMP_18

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
barFeeTo_1(address) := TMP_18(address)
Function name: constructor
asgn

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: barFeeTo Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for barFeeTo

Name: barFeeTo Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFee, arguments:[]  
has variable
[i] TMP_19 cleared
clearing ir...?
barFee_1(uint256) := TMP_19(uint256)
has variable
typecheckig node...
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFee, arguments:[]  
Function name: constructor
High Call: barFee
func name:barFee
other func name:barFee
TMP_19
hlc contract name: DEPLOYER func_name: barFee
wfc len: 0
COPIED
[i]Type for TMP_19

Name: TMP_19 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
barFee_1(uint256) := TMP_19(uint256)
Function name: constructor
asgn

Name: TMP_19 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: barFee Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for barFee

Name: barFee Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
masterDeployer_1(IMasterDeployer) := _masterDeployer_1(IMasterDeployer)
has variable
typecheckig node...
masterDeployer_1(IMasterDeployer) := _masterDeployer_1(IMasterDeployer)
Function name: constructor
asgn

Name: _masterDeployer Function: constructor
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef

Name: masterDeployer Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for masterDeployer

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
unlocked_1(uint256) := 1(uint256)
has variable
typecheckig node...
unlocked_1(uint256) := 1(uint256)
Function name: constructor
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: unlocked Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for unlocked

Name: unlocked Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "constructor":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
MAX_FEE_1(uint24) := ϕ(['MAX_FEE_0'])
Function name: constructor
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
TUPLE_0(address,address,uint24,uint160,uint24) = SOLIDITY_CALL abi.decode()(_deployData_1(address,address,uint24,uint160,uint24))
[i]Type for TUPLE_0

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_token0_1(address)= UNPACK TUPLE_0 index: 0 
Function name: constructor
Reading tuple TUPLE_0 index 0
Finding type for _token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _token0 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for _token0

Name: _token0 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_token1_1(address)= UNPACK TUPLE_0 index: 1 
Function name: constructor
Reading tuple TUPLE_0 index 1
Finding type for _token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: _token1 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for _token1

Name: _token1 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_swapFee_1(uint24)= UNPACK TUPLE_0 index: 2 
Function name: constructor
Reading tuple TUPLE_0 index 2
Finding type for _swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint24
uint24
Final Type: uint24

Name: _swapFee Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for _swapFee

Name: _swapFee Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_price_1(uint160)= UNPACK TUPLE_0 index: 3 
Function name: constructor
Reading tuple TUPLE_0 index 3
Finding type for _price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint160
uint160
Final Type: uint160

Name: _price Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for _price

Name: _price Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_tickSpacing_1(uint24)= UNPACK TUPLE_0 index: 4 
Function name: constructor
Reading tuple TUPLE_0 index 4
Finding type for _tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint24
uint24
Final Type: uint24

Name: _tickSpacing Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for _tickSpacing

Name: _tickSpacing Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_0 = CONVERT 0 to address
Function name: constructor
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_0 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_0

Name: TMP_0 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_1(bool) = _token0_1 != TMP_0
Function name: constructor
[i]Type for TMP_1

Name: TMP_1 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_2(None) = SOLIDITY_CALL require(bool,string)(TMP_1,ZERO_ADDRESS)
[i]Type for TMP_2

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_3 = CONVERT this to address
Function name: constructor
[i]Type for TMP_3

Name: TMP_3 Function: constructor
Num: -1
Den: -1
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TMP_4(bool) = _token0_1 != TMP_3
Function name: constructor
[i]Type for TMP_4

Name: TMP_4 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,INVALID_TOKEN0)
[i]Type for TMP_5

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_6 = CONVERT this to address
Function name: constructor
[i]Type for TMP_6

Name: TMP_6 Function: constructor
Num: -1
Den: -1
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TMP_7(bool) = _token1_1 != TMP_6
Function name: constructor
[i]Type for TMP_7

Name: TMP_7 Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,INVALID_TOKEN1)
[i]Type for TMP_8

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_9(bool) = _swapFee_1 <= MAX_FEE_1
Function name: constructor
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_9

Name: TMP_9 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_10(None) = SOLIDITY_CALL require(bool,string)(TMP_9,INVALID_SWAP_FEE)
[i]Type for TMP_10

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
token0_1(address) := _token0_1(address)
Function name: constructor
asgn

Name: _token0 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token0 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for token0

Name: token0 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
token1_1(address) := _token1_1(address)
Function name: constructor
asgn

Name: _token1 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token1 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for token1

Name: token1 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
swapFee_1(uint24) := _swapFee_1(uint24)
Function name: constructor
asgn

Name: _swapFee Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: swapFee Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for swapFee

Name: swapFee Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
price_1(uint160) := _price_1(uint160)
Function name: constructor
asgn

Name: _price Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for price

Name: price Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
tickSpacing_1(uint24) := _tickSpacing_1(uint24)
Function name: constructor
asgn

Name: _tickSpacing Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: tickSpacing Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tickSpacing

Name: tickSpacing Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_11(uint128) = LIBRARY_CALL, dest:Ticks, function:Ticks.getMaxLiquidity(uint24), arguments:['_tickSpacing_1'] 
Function name: constructor
Library Call: getMaxLiquidity
hlc contract name: Ticks func_name: getMaxLiquidity
wfc len: 0
COPIED
[i]Type for TMP_11

Name: TMP_11 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
MAX_TICK_LIQUIDITY_1(uint128) := TMP_11(uint128)
Function name: constructor
asgn

Name: TMP_11 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MAX_TICK_LIQUIDITY Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_2(int24) -> TickMath.MIN_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MIN_TICK
global
TickMath Fields:
MIN_TICK
MAX_TICK
^^^

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_2

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_3(Ticks.Tick) -> ticks_0[REF_2]
Function name: constructor
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
ticks
[i]Type for REF_3

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_3(Ticks.Tick) -> ticks_0[REF_2]
XXXXX
REF_5(int24) -> TickMath.MIN_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MIN_TICK
global
TickMath Fields:
MIN_TICK
MAX_TICK
^^^

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_5

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_6(int24) -> TickMath.MAX_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MAX_TICK
global
TickMath Fields:
MIN_TICK
MAX_TICK
^^^

Name: MAX_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_6

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MAX_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_12 = CONVERT 0 to uint128
Function name: constructor
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_12 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_12

Name: TMP_12 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_13 = new Tick(REF_5,REF_6,TMP_12,0,0,0)
[i]Type for TMP_13

Name: TMP_13 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_1(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_0'])
Function name: constructor
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_3 (->ticks_1) := TMP_13(Ticks.Tick)
Function name: constructor
asgn

Name: TMP_13 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_3 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_3

Name: REF_3 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_3 (->ticks_1) := TMP_13(Ticks.Tick)
XXXXX
typecheckig node...
REF_7(int24) -> TickMath.MAX_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MAX_TICK
global
TickMath Fields:
MIN_TICK
MAX_TICK
^^^

Name: MAX_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_7

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MAX_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_8(Ticks.Tick) -> ticks_1[REF_7]
Function name: constructor
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_8

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_10(int24) -> TickMath.MIN_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MIN_TICK
global
TickMath Fields:
MIN_TICK
MAX_TICK
^^^

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_10

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_11(int24) -> TickMath.MAX_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MAX_TICK
global
TickMath Fields:
MIN_TICK
MAX_TICK
^^^

Name: MAX_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_11

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MAX_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MAX_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_14 = CONVERT 0 to uint128
Function name: constructor
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_14 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_14

Name: TMP_14 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_15 = new Tick(REF_10,REF_11,TMP_14,0,0,0)
[i]Type for TMP_15

Name: TMP_15 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_2(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_1'])
Function name: constructor
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_8 (->ticks_2) := TMP_15(Ticks.Tick)
Function name: constructor
asgn

Name: TMP_15 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_8 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_8

Name: REF_8 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_8 (->ticks_2) := TMP_15(Ticks.Tick)
XXXXX
typecheckig node...
REF_12(int24) -> TickMath.MIN_TICK
Function name: constructor
MEMBER
TickMath
TickMath
MIN_TICK
global
TickMath Fields:
MIN_TICK
MAX_TICK
^^^

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_12

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MIN_TICK Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_1(int24) := REF_12(int24)
Function name: constructor
asgn

Name: TickMath.MIN_TICK Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nearestTick Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nearestTick

Name: nearestTick Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_16(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:bento, arguments:[]  
Function name: constructor
High Call: bento
func name:bento
other func name:bento
TMP_16
hlc contract name: DEPLOYER func_name: bento
('c', [-1], [-1], 0, 'BENTO')
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'BENTO', -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_16

Name: TMP_16 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
TMP_17 = CONVERT TMP_16 to IBentoBoxMinimal
Function name: constructor

Name: TMP_16 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef

Name: TMP_17 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[i]Type for TMP_17

Name: TMP_17 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
bento_1(IBentoBoxMinimal) := TMP_17(IBentoBoxMinimal)
Function name: constructor
asgn

Name: TMP_17 Function: constructor
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef

Name: bento Function: constructor
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for bento

Name: bento Function: constructor
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_18(address) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFeeTo, arguments:[]  
Function name: constructor
High Call: barFeeTo
func name:barFeeTo
other func name:barFeeTo
TMP_18
hlc contract name: DEPLOYER func_name: barFeeTo
wfc len: 0
COPIED
[i]Type for TMP_18

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
barFeeTo_1(address) := TMP_18(address)
Function name: constructor
asgn

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: barFeeTo Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for barFeeTo

Name: barFeeTo Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_19(uint256) = HIGH_LEVEL_CALL, dest:_masterDeployer_1(IMasterDeployer), function:barFee, arguments:[]  
Function name: constructor
High Call: barFee
func name:barFee
other func name:barFee
TMP_19
hlc contract name: DEPLOYER func_name: barFee
wfc len: 0
COPIED
[i]Type for TMP_19

Name: TMP_19 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
barFee_1(uint256) := TMP_19(uint256)
Function name: constructor
asgn

Name: TMP_19 Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: barFee Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for barFee

Name: barFee Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
masterDeployer_1(IMasterDeployer) := _masterDeployer_1(IMasterDeployer)
Function name: constructor
asgn

Name: _masterDeployer Function: constructor
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for masterDeployer

Name: masterDeployer Function: constructor
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
done.
typecheckig node...
unlocked_1(uint256) := 1(uint256)
Function name: constructor
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: unlocked Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for unlocked

Name: unlocked Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "constructor":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: constructor
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: mint
Function name: mint
Function Visibility (test): public
data
Finding type for data...
bytes
SKIP bytes
-100
Add new
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
MAX_TICK_LIQUIDITY_2(uint128) := ϕ(['MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_0'])
has variable
clearing ir...?
token0_2(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_2(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
has variable
clearing ir...?
liquidity_1(uint128) := ϕ(['liquidity_4', 'liquidity_3', 'liquidity_5', 'liquidity_0', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9'])
has variable
clearing ir...?
secondsPerLiquidity_1(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
has variable
clearing ir...?
feeGrowthGlobal0_1(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
has variable
clearing ir...?
feeGrowthGlobal1_1(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
has variable
clearing ir...?
reserve0_1(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
has variable
clearing ir...?
reserve1_1(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
has variable
clearing ir...?
price_2(uint160) := ϕ(['price_0', 'price_8', 'price_3', 'price_1', 'price_5'])
has variable
clearing ir...?
nearestTick_2(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
has variable
clearing ir...?
ticks_3(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
has variable
typecheckig node...
MAX_TICK_LIQUIDITY_2(uint128) := ϕ(['MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_0'])
Function name: mint
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0_2(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: mint
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_2(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: mint
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidity_1(uint128) := ϕ(['liquidity_4', 'liquidity_3', 'liquidity_5', 'liquidity_0', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9'])
Function name: mint
Phi
[i]Type for liquidity

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsPerLiquidity_1(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Function name: mint
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal0_1(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
Function name: mint
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
feeGrowthGlobal1_1(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
Function name: mint
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
reserve0_1(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: mint
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve1_1(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: mint
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
price_2(uint160) := ϕ(['price_0', 'price_8', 'price_3', 'price_1', 'price_5'])
Function name: mint
Phi
[i]Type for price

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_2(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: mint
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_3(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: mint
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
typecheckig node...
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Internal call...
lock
Function: lock
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: lock
Function Visibility: internal
clearning node...
clearing ir...?
unlocked_2(uint256) := ϕ(['unlocked_0', 'unlocked_1', 'unlocked_4'])
has variable
typecheckig node...
unlocked_2(uint256) := ϕ(['unlocked_0', 'unlocked_1', 'unlocked_4'])
Function name: lock
Phi
[i]Type for unlocked

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_243(bool) = unlocked_2 == 1
has variable
[i] TMP_243 cleared
clearing ir...?
TMP_244(None) = SOLIDITY_CALL require(bool,string)(TMP_243,LOCKED)
typecheckig node...
TMP_243(bool) = unlocked_2 == 1
Function name: lock
[i]Type for TMP_243

Name: TMP_243 Function: lock
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_244(None) = SOLIDITY_CALL require(bool,string)(TMP_243,LOCKED)
[i]Type for TMP_244

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
unlocked_3(uint256) := 2(uint256)
has variable
typecheckig node...
unlocked_3(uint256) := 2(uint256)
Function name: lock
asgn
val: 2

Name: 2 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: unlocked Function: lock
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 2
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
unlocked_4(uint256) := 1(uint256)
has variable
typecheckig node...
unlocked_4(uint256) := 1(uint256)
Function name: lock
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: unlocked Function: lock
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for unlocked

Name: unlocked Function: lock
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "lock":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: lock
done.
clearning node...
clearing ir...?
TMP_20(ConcentratedLiquidityPool.MintParams) = SOLIDITY_CALL abi.decode()(data_1,MintParams)
clearing ir...?
mintParams_1(ConcentratedLiquidityPool.MintParams) := TMP_20(ConcentratedLiquidityPool.MintParams)
has variable
[i] mintParams cleared
typecheckig node...
TMP_20(ConcentratedLiquidityPool.MintParams) = SOLIDITY_CALL abi.decode()(data_1,MintParams)
[i]Type for TMP_20

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
mintParams_1(ConcentratedLiquidityPool.MintParams) := TMP_20(ConcentratedLiquidityPool.MintParams)
Function name: mint
asgn

Name: TMP_20 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for mintParams

Name: mintParams Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
mintParams_1(ConcentratedLiquidityPool.MintParams) := TMP_20(ConcentratedLiquidityPool.MintParams)
XXXXX
clearning node...
clearing ir...?
REF_18(int24) -> mintParams_1.lower
has variable
clearing ir...?
TMP_21(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_18'] 
has variable
[i] TMP_21 cleared
clearing ir...?
TMP_22 = CONVERT TMP_21 to uint256
has variable
[i] TMP_22 cleared
clearing ir...?
priceLower_1(uint256) := TMP_22(uint256)
has variable
[i] priceLower cleared
typecheckig node...
REF_18(int24) -> mintParams_1.lower
Function name: mint
MEMBER
mintParams
lower
mint
mintParams Fields:
^^^
[i]Type for REF_18

Name: mintParams.lower Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lower Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_21(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_18'] 
Function name: mint
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
REF_18
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_21

Name: TMP_21 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_22 = CONVERT TMP_21 to uint256
Function name: mint

Name: TMP_21 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_22 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_22

Name: TMP_22 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
priceLower_1(uint256) := TMP_22(uint256)
Function name: mint
asgn

Name: TMP_22 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: priceLower Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for priceLower

Name: priceLower Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
REF_20(int24) -> mintParams_1.upper
has variable
clearing ir...?
TMP_23(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_20'] 
has variable
[i] TMP_23 cleared
clearing ir...?
TMP_24 = CONVERT TMP_23 to uint256
has variable
[i] TMP_24 cleared
clearing ir...?
priceUpper_1(uint256) := TMP_24(uint256)
has variable
[i] priceUpper cleared
typecheckig node...
REF_20(int24) -> mintParams_1.upper
Function name: mint
MEMBER
mintParams
upper
mint
mintParams Fields:
lower
^^^
[i]Type for REF_20

Name: mintParams.upper Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upper Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_23(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_20'] 
Function name: mint
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
REF_20
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_23

Name: TMP_23 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_24 = CONVERT TMP_23 to uint256
Function name: mint

Name: TMP_23 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_24 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_24

Name: TMP_24 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
priceUpper_1(uint256) := TMP_24(uint256)
Function name: mint
asgn

Name: TMP_24 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: priceUpper Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for priceUpper

Name: priceUpper Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_25 = CONVERT price_3 to uint256
has variable
[i] TMP_25 cleared
clearing ir...?
currentPrice_1(uint256) := TMP_25(uint256)
has variable
[i] currentPrice cleared
typecheckig node...
TMP_25 = CONVERT price_3 to uint256
Function name: mint

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_25 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_25

Name: TMP_25 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
currentPrice_1(uint256) := TMP_25(uint256)
Function name: mint
asgn

Name: TMP_25 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for currentPrice

Name: currentPrice Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_22(uint256) -> mintParams_1.amount1Desired
has variable
clearing ir...?
REF_23(uint256) -> mintParams_1.amount0Desired
has variable
clearing ir...?
TMP_26(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getLiquidityForAmounts(uint256,uint256,uint256,uint256,uint256), arguments:['priceLower_1', 'priceUpper_1', 'currentPrice_1', 'REF_22', 'REF_23'] 
has variable
[i] TMP_26 cleared
clearing ir...?
_liquidity_1(uint256) := TMP_26(uint256)
has variable
[i] _liquidity cleared
typecheckig node...
REF_22(uint256) -> mintParams_1.amount1Desired
Function name: mint
MEMBER
mintParams
amount1Desired
mint
mintParams Fields:
lower
upper
^^^
[i]Type for REF_22

Name: mintParams.amount1Desired Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.amount1Desired Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amount1Desired Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_23(uint256) -> mintParams_1.amount0Desired
Function name: mint
MEMBER
mintParams
amount0Desired
mint
mintParams Fields:
lower
upper
amount1Desired
^^^
[i]Type for REF_23

Name: mintParams.amount0Desired Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.amount0Desired Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amount0Desired Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_26(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getLiquidityForAmounts(uint256,uint256,uint256,uint256,uint256), arguments:['priceLower_1', 'priceUpper_1', 'currentPrice_1', 'REF_22', 'REF_23'] 
Function name: mint
Library Call: getLiquidityForAmounts
hlc contract name: DyDxMath func_name: getLiquidityForAmounts
wfc len: 0
COPIED
[i]Type for TMP_26

Name: TMP_26 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_liquidity_1(uint256) := TMP_26(uint256)
Function name: mint
asgn

Name: TMP_26 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _liquidity Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_27(bool) = _liquidity_1 <= MAX_TICK_LIQUIDITY_3
has variable
[i] TMP_27 cleared
clearing ir...?
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,LIQUIDITY_OVERFLOW)
typecheckig node...
TMP_27(bool) = _liquidity_1 <= MAX_TICK_LIQUIDITY_3
Function name: mint
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_27

Name: TMP_27 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,LIQUIDITY_OVERFLOW)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_24(address) -> mintParams_1.positionOwner
has variable
clearing ir...?
REF_25(int24) -> mintParams_1.lower
has variable
clearing ir...?
REF_26(int24) -> mintParams_1.upper
has variable
clearing ir...?
TMP_29 = CONVERT _liquidity_1 to uint128
has variable
[i] TMP_29 cleared
clearing ir...?
TMP_30 = CONVERT TMP_29 to int128
has variable
[i] TMP_30 cleared
clearing ir...?
TUPLE_1(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(REF_24,REF_25,REF_26,TMP_30)
has variable
clearing ir...?
amount0fees_1(uint256)= UNPACK TUPLE_1 index: 0 
has variable
[i] amount0fees cleared
clearing ir...?
amount1fees_1(uint256)= UNPACK TUPLE_1 index: 1 
has variable
[i] amount1fees cleared
typecheckig node...
REF_24(address) -> mintParams_1.positionOwner
Function name: mint
MEMBER
mintParams
positionOwner
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
^^^
Check copy_toekn_tuple
([-1], [-1], [0], 'MANAGER')
----
Type: address
address
Final Type: address
Check copy_toekn_tuple
([-1], [-1], [0], 'MANAGER')
----
Type: None
None
Final Type: None
[i]Type for REF_24

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
done.
REF_25(int24) -> mintParams_1.lower
Function name: mint
MEMBER
mintParams
lower
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
^^^

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_25

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_26(int24) -> mintParams_1.upper
Function name: mint
MEMBER
mintParams
upper
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
^^^

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_26

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_29 = CONVERT _liquidity_1 to uint128
Function name: mint

Name: _liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_29 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_29

Name: TMP_29 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_30 = CONVERT TMP_29 to int128
Function name: mint

Name: TMP_29 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_30 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_1(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(REF_24,REF_25,REF_26,TMP_30)
Function name: mint
Internal call...
_updatePosition
REF_24
REF_25
REF_26
TMP_30
Function: _updatePosition
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _updatePosition
Function Visibility: internal
clearning node...
clearing ir...?
owner_1(address) := ϕ(['REF_24', 'msg.sender'])
has variable
[i] owner cleared
clearing ir...?
lower_1(int24) := ϕ(['REF_25', 'lower_1', 'lower_1'])
has variable
[i] lower cleared
clearing ir...?
upper_1(int24) := ϕ(['upper_1', 'upper_1', 'REF_26'])
has variable
[i] upper cleared
clearing ir...?
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
has variable
[i] amount cleared
clearing ir...?
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_0'])
has variable
clearing ir...?
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_4'])
has variable
typecheckig node...
owner_1(address) := ϕ(['REF_24', 'msg.sender'])
Function name: _updatePosition
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: MANAGER
Fields: 
Finance Type: undef
done.
lower_1(int24) := ϕ(['REF_25', 'lower_1', 'lower_1'])
Function name: _updatePosition
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1(int24) := ϕ(['upper_1', 'upper_1', 'REF_26'])
Function name: _updatePosition
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Function name: _updatePosition
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_0'])
Function name: _updatePosition
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_4'])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
has variable
clearing ir...?
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
has variable
clearing ir...?
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
has variable
clearing ir...?
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
has variable
[i] position cleared
typecheckig node...
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
Function name: _updatePosition
INDEX

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_144

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
Function name: _updatePosition
INDEX

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_145

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
Function name: _updatePosition
INDEX

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_146

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
Function name: _updatePosition
asgn

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef

Name: position Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
has variable
clearing ir...?
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
has variable
[i] growth0current cleared
clearing ir...?
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
has variable
[i] growth1current cleared
typecheckig node...
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
Function name: _updatePosition
Internal call...
rangeFeeGrowth
lower
upper
Function: rangeFeeGrowth
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: rangeFeeGrowth
Function Visibility: public
clearning node...
clearing ir...?
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
has variable
[i] lowerTick cleared
clearing ir...?
upperTick_1(int24) := ϕ(['REF_45', 'upper_1'])
has variable
[i] upperTick cleared
clearing ir...?
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
has variable
clearing ir...?
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
has variable
clearing ir...?
nearestTick_18(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
has variable
clearing ir...?
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
has variable
typecheckig node...
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upperTick_1(int24) := ϕ(['REF_45', 'upper_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
nearestTick_18(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: rangeFeeGrowth
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
currentTick_1(int24) := nearestTick_18(int24)
has variable
[i] currentTick cleared
typecheckig node...
currentTick_1(int24) := nearestTick_18(int24)
Function name: rangeFeeGrowth
asgn

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
has variable
clearing ir...?
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
has variable
[i] lower cleared
typecheckig node...
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
Function name: rangeFeeGrowth
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_165

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
Function name: rangeFeeGrowth
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
has variable
clearing ir...?
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
has variable
[i] upper cleared
typecheckig node...
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
Function name: rangeFeeGrowth
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_166

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
Function name: rangeFeeGrowth
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
has variable
[i] _feeGrowthGlobal0 cleared
typecheckig node...
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
Function name: rangeFeeGrowth
asgn

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (10, -1)
Func: assign
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 10
Final dest type: 10
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
clearning node...
clearing ir...?
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
has variable
[i] _feeGrowthGlobal1 cleared
typecheckig node...
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
Function name: rangeFeeGrowth
asgn

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (10, -1)
Func: assign
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 10
Final dest type: 10
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_224(bool) = lowerTick_1 <= currentTick_1
has variable
[i] TMP_224 cleared
clearing ir...?
CONDITION TMP_224
typecheckig node...
TMP_224(bool) = lowerTick_1 <= currentTick_1
Function name: rangeFeeGrowth
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_224
Condition...
Conidtion: 
TMP_224
TMP_224
clearning node...
clearing ir...?
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
has variable
clearing ir...?
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
has variable
[i] TMP_225 cleared
clearing ir...?
feeGrowthBelow0_2(uint256) := TMP_225(uint256)
has variable
[i] feeGrowthBelow0 cleared
typecheckig node...
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside0
rangeFeeGrowth
lower Fields:
^^^
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: TMP_225 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
This IR caused addback:
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
XXXXX
feeGrowthBelow0_2(uint256) := TMP_225(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
has variable
clearing ir...?
feeGrowthBelow0_1(uint256) := REF_167(uint256)
has variable
[i] feeGrowthBelow0 cleared
typecheckig node...
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside0
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthBelow0_1(uint256) := REF_167(uint256)
Function name: rangeFeeGrowth
asgn

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
has variable
clearing ir...?
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
has variable
[i] TMP_226 cleared
clearing ir...?
feeGrowthBelow1_2(uint256) := TMP_226(uint256)
has variable
[i] feeGrowthBelow1 cleared
typecheckig node...
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside1
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
^^^
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: TMP_226 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
This IR caused addback:
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
XXXXX
feeGrowthBelow1_2(uint256) := TMP_226(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
has variable
clearing ir...?
feeGrowthBelow1_1(uint256) := REF_168(uint256)
has variable
[i] feeGrowthBelow1 cleared
typecheckig node...
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside1
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthBelow1_1(uint256) := REF_168(uint256)
Function name: rangeFeeGrowth
asgn

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
has variable
[i] feeGrowthBelow0 cleared
clearing ir...?
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_1', 'feeGrowthBelow1_2'])
has variable
[i] feeGrowthBelow1 cleared
typecheckig node...
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_1', 'feeGrowthBelow1_2'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_227(bool) = currentTick_1 < upperTick_1
has variable
[i] TMP_227 cleared
clearing ir...?
CONDITION TMP_227
typecheckig node...
TMP_227(bool) = currentTick_1 < upperTick_1
Function name: rangeFeeGrowth
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_227
Condition...
Conidtion: 
TMP_227
TMP_227
clearning node...
clearing ir...?
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
has variable
clearing ir...?
feeGrowthAbove0_1(uint256) := REF_171(uint256)
has variable
[i] feeGrowthAbove0 cleared
typecheckig node...
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside0
rangeFeeGrowth
upper Fields:
^^^
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthAbove0_1(uint256) := REF_171(uint256)
Function name: rangeFeeGrowth
asgn

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
feeGrowthAbove0_1(uint256) := REF_171(uint256)
XXXXX
clearning node...
clearing ir...?
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
has variable
clearing ir...?
feeGrowthAbove1_1(uint256) := REF_172(uint256)
has variable
[i] feeGrowthAbove1 cleared
typecheckig node...
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside1
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
^^^
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthAbove1_1(uint256) := REF_172(uint256)
Function name: rangeFeeGrowth
asgn

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
feeGrowthAbove1_1(uint256) := REF_172(uint256)
XXXXX
clearning node...
clearing ir...?
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
has variable
clearing ir...?
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
has variable
[i] TMP_228 cleared
clearing ir...?
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
has variable
[i] feeGrowthAbove0 cleared
typecheckig node...
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside0
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_228 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
has variable
clearing ir...?
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
has variable
[i] TMP_229 cleared
clearing ir...?
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
has variable
[i] feeGrowthAbove1 cleared
typecheckig node...
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside1
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_229 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
has variable
[i] feeGrowthAbove0 cleared
clearing ir...?
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
has variable
[i] feeGrowthAbove1 cleared
typecheckig node...
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
has variable
[i] TMP_230 cleared
clearing ir...?
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
has variable
[i] TMP_231 cleared
clearing ir...?
feeGrowthInside0_1(uint256) := TMP_231(uint256)
has variable
[i] feeGrowthInside0 cleared
typecheckig node...
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_230 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 110, Left type: 110
Final dest type: 110

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: TMP_231 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthInside0_1(uint256) := TMP_231(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
has variable
[i] TMP_232 cleared
clearing ir...?
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
has variable
[i] TMP_233 cleared
clearing ir...?
feeGrowthInside1_1(uint256) := TMP_233(uint256)
has variable
[i] feeGrowthInside1 cleared
typecheckig node...
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_232 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 110, Left type: 110
Final dest type: 110

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: TMP_233 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthInside1_1(uint256) := TMP_233(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
RETURN feeGrowthInside0_1,feeGrowthInside1_1
typecheckig node...
RETURN feeGrowthInside0_1,feeGrowthInside1_1
RETURN

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
WORKLIST iteration 0 for function call "rangeFeeGrowth":
 New undefined nodes- 4
 Old undefined nodes- 0
typecheckig node...
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upperTick_1(int24) := ϕ(['REF_45', 'upper_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
nearestTick_18(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: rangeFeeGrowth
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
currentTick_1(int24) := nearestTick_18(int24)
Function name: rangeFeeGrowth
asgn

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
Function name: rangeFeeGrowth
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_165

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
Function name: rangeFeeGrowth
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
done.
typecheckig node...
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
Function name: rangeFeeGrowth
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_166

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
Function name: rangeFeeGrowth
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
done.
typecheckig node...
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
Function name: rangeFeeGrowth
asgn

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 10
Final dest type: 10
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
typecheckig node...
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
Function name: rangeFeeGrowth
asgn

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 10
Final dest type: 10
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
TMP_224(bool) = lowerTick_1 <= currentTick_1
Function name: rangeFeeGrowth
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_224
Condition...
Conidtion: 
TMP_224
TMP_224
typecheckig node...
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside0
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthBelow0_2(uint256) := TMP_225(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
typecheckig node...
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside0
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthBelow0_1(uint256) := REF_167(uint256)
Function name: rangeFeeGrowth
asgn

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside1
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthBelow1_2(uint256) := TMP_226(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
typecheckig node...
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside1
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthBelow1_1(uint256) := REF_168(uint256)
Function name: rangeFeeGrowth
asgn

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_1', 'feeGrowthBelow1_2'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_227(bool) = currentTick_1 < upperTick_1
Function name: rangeFeeGrowth
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_227
Condition...
Conidtion: 
TMP_227
TMP_227
typecheckig node...
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside0
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthAbove0_1(uint256) := REF_171(uint256)
Function name: rangeFeeGrowth
asgn

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside1
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthAbove1_1(uint256) := REF_172(uint256)
Function name: rangeFeeGrowth
asgn

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside0
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
typecheckig node...
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside1
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
typecheckig node...
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
typecheckig node...
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 110, Left type: 110
Final dest type: 110

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthInside0_1(uint256) := TMP_231(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
typecheckig node...
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 110, Left type: 110
Final dest type: 110

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthInside1_1(uint256) := TMP_233(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
RETURN feeGrowthInside0_1,feeGrowthInside1_1
typecheckig node...
RETURN feeGrowthInside0_1,feeGrowthInside1_1
RETURN

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
WORKLIST iteration 1 for function call "rangeFeeGrowth":
 New undefined nodes- 0
 Old undefined nodes- 4
typecheckig node...
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upperTick_1(int24) := ϕ(['REF_45', 'upper_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
nearestTick_18(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: rangeFeeGrowth
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
currentTick_1(int24) := nearestTick_18(int24)
Function name: rangeFeeGrowth
asgn

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
Function name: rangeFeeGrowth
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_165

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
Function name: rangeFeeGrowth
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
done.
typecheckig node...
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
Function name: rangeFeeGrowth
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_166

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
Function name: rangeFeeGrowth
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
done.
typecheckig node...
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
Function name: rangeFeeGrowth
asgn

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 10
Final dest type: 10
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
typecheckig node...
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
Function name: rangeFeeGrowth
asgn

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 10
Final dest type: 10
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
TMP_224(bool) = lowerTick_1 <= currentTick_1
Function name: rangeFeeGrowth
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_224
Condition...
Conidtion: 
TMP_224
TMP_224
typecheckig node...
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside0
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthBelow0_2(uint256) := TMP_225(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
typecheckig node...
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside0
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthBelow0_1(uint256) := REF_167(uint256)
Function name: rangeFeeGrowth
asgn

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside1
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthBelow1_2(uint256) := TMP_226(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
typecheckig node...
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside1
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthBelow1_1(uint256) := REF_168(uint256)
Function name: rangeFeeGrowth
asgn

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_1', 'feeGrowthBelow1_2'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_227(bool) = currentTick_1 < upperTick_1
Function name: rangeFeeGrowth
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_227
Condition...
Conidtion: 
TMP_227
TMP_227
typecheckig node...
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside0
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthAbove0_1(uint256) := REF_171(uint256)
Function name: rangeFeeGrowth
asgn

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside1
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthAbove1_1(uint256) := REF_172(uint256)
Function name: rangeFeeGrowth
asgn

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside0
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
typecheckig node...
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside1
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
typecheckig node...
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
typecheckig node...
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 110, Left type: 110
Final dest type: 110

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthInside0_1(uint256) := TMP_231(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
typecheckig node...
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 110, Left type: 110
Final dest type: 110

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthInside1_1(uint256) := TMP_233(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
RETURN feeGrowthInside0_1,feeGrowthInside1_1
typecheckig node...
RETURN feeGrowthInside0_1,feeGrowthInside1_1
RETURN

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
WORKLIST iteration 2 for function call "rangeFeeGrowth":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: rangeFeeGrowth

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
___

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
___
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
Function name: _updatePosition
Reading tuple TUPLE_12 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, 110)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
Function name: _updatePosition
Reading tuple TUPLE_12 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, 110)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
has variable
clearing ir...?
TMP_202(uint256) = growth0current_1 (c)- REF_148
has variable
[i] TMP_202 cleared
clearing ir...?
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
has variable
[i] TMP_203 cleared
clearing ir...?
amount0fees_1(uint256) := TMP_203(uint256)
has variable
[i] amount0fees cleared
typecheckig node...
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside0Last
_updatePosition
position Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
TMP_202(uint256) = growth0current_1 (c)- REF_148
Function name: _updatePosition
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 10, Left type: 110
Final dest type: 110

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: TMP_202 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Function name: _updatePosition
Library Call: mulDiv
hlc contract name: FullMath func_name: mulDiv
('t', [1, 2], [3], 0, None, 11)
TMP_202
REF_149
340282366920938463463374607431768211456
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
amount0fees_1(uint256) := TMP_203(uint256)
Function name: _updatePosition
asgn

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
clearning node...
clearing ir...?
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
has variable
clearing ir...?
TMP_204(uint256) = growth1current_1 (c)- REF_151
has variable
[i] TMP_204 cleared
clearing ir...?
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
has variable
[i] TMP_205 cleared
clearing ir...?
amount1fees_1(uint256) := TMP_205(uint256)
has variable
[i] amount1fees cleared
typecheckig node...
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside1Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
TMP_204(uint256) = growth1current_1 (c)- REF_151
Function name: _updatePosition
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 10, Left type: 110
Final dest type: 110

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: TMP_204 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Function name: _updatePosition
Library Call: mulDiv
hlc contract name: FullMath func_name: mulDiv
('t', [1, 2], [3], 0, None, 11)
TMP_204
REF_152
340282366920938463463374607431768211456
wfc len: 1
Check copy_toekn_tuple
([-1, -1], [-1, -1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
amount1fees_1(uint256) := TMP_205(uint256)
Function name: _updatePosition
asgn

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
clearning node...
clearing ir...?
TMP_206(bool) = amount_1 < 0
has variable
[i] TMP_206 cleared
clearing ir...?
CONDITION TMP_206
typecheckig node...
TMP_206(bool) = amount_1 < 0
Function name: _updatePosition
testing lt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_206
Condition...
Conidtion: 
TMP_206
TMP_206
clearning node...
clearing ir...?
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_2 (-> ['positions'])"])
has variable
[i] position cleared
typecheckig node...
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_2 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_209(bool) = amount_1 > 0
has variable
[i] TMP_209 cleared
clearing ir...?
CONDITION TMP_209
typecheckig node...
TMP_209(bool) = amount_1 > 0
Function name: _updatePosition
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_209
Condition...
Conidtion: 
TMP_209
TMP_209
clearning node...
clearing ir...?
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_210 = CONVERT amount_1 to uint128
has variable
[i] TMP_210 cleared
clearing ir...?
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210
has variable
clearing ir...?
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
has variable
typecheckig node...
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint128
uint128
Final Type: uint128
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_210 = CONVERT amount_1 to uint128
Function name: _updatePosition

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_210 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210
Function name: _updatePosition

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_207(int128) = 0 (c)- amount_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208 = CONVERT TMP_207 to uint128
has variable
[i] TMP_208 cleared
clearing ir...?
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
has variable
clearing ir...?
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
has variable
typecheckig node...
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_207(int128) = 0 (c)- amount_1
Function name: _updatePosition
val: 0
val: 0
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_207 Function: _updatePosition
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_208 = CONVERT TMP_207 to uint128
Function name: _updatePosition

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_208 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
Function name: _updatePosition
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_4 (-> ['positions'])"])
has variable
[i] position cleared
typecheckig node...
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_4 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
typecheckig node...
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
Function name: _updatePosition
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
has variable
clearing ir...?
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
has variable
clearing ir...?
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
has variable
typecheckig node...
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside0Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside0Last Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
Function name: _updatePosition
asgn

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
has variable
clearing ir...?
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
has variable
clearing ir...?
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
has variable
typecheckig node...
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside1Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside1Last Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
Function name: _updatePosition
asgn

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amount0fees_1,amount1fees_1
typecheckig node...
RETURN amount0fees_1,amount1fees_1
RETURN

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
WORKLIST iteration 0 for function call "_updatePosition":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _updatePosition

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
___

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
___
[i]Type for TUPLE_1

Name: TUPLE_1 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount0fees_1(uint256)= UNPACK TUPLE_1 index: 0 
Function name: mint
Reading tuple TUPLE_1 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount0fees

Name: amount0fees Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
amount1fees_1(uint256)= UNPACK TUPLE_1 index: 1 
Function name: mint
Reading tuple TUPLE_1 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount1fees

Name: amount1fees Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
clearning node...
clearing ir...?
TMP_31(bool) = amount0fees_1 > 0
has variable
[i] TMP_31 cleared
clearing ir...?
CONDITION TMP_31
typecheckig node...
TMP_31(bool) = amount0fees_1 > 0
Function name: mint
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_31

Name: TMP_31 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
done.
CONDITION TMP_31
Condition...
Conidtion: 
TMP_31
TMP_31
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_27(address) -> mintParams_1.positionOwner
has variable
clearing ir...?
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_4,amount0fees_1,REF_27,False)
typecheckig node...
REF_27(address) -> mintParams_1.positionOwner
Function name: mint
MEMBER
mintParams
positionOwner
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
^^^

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
[i]Type for REF_27

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_4,amount0fees_1,REF_27,False)
Internal call...
_transfer
token0
amount0fees
REF_27
False
Function: _transfer
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, None, [], 11]
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: _transfer
Function Visibility: internal
clearning node...
clearing ir...?
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
has variable
[i] token cleared
clearing ir...?
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
has variable
[i] shares cleared
clearing ir...?
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
has variable
[i] to cleared
clearing ir...?
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
has variable
[i] unwrapBento cleared
clearing ir...?
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
Function name: _transfer
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
Function name: _transfer
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
done.
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
Function name: _transfer
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Norm: u
LF: MANAGER
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Function name: _transfer
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION unwrapBento_1
typecheckig node...
CONDITION unwrapBento_1
Condition...
Conidtion: 
unwrapBento_1
unwrapBento_1
clearning node...
clearing ir...?
TMP_216 = CONVERT this to address
has variable
[i] TMP_216 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
clearing ir...?
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_216 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: -1
Den: -1
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_215 = CONVERT this to address
has variable
[i] TMP_215 cleared
clearing ir...?
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
has variable
clearing ir...?
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_215 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: -1
Den: -1
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
Function name: _transfer
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_13
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token
TMP_215
to
0
shares
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_transfer":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _transfer
done.
clearning node...
clearing ir...?
TMP_34(bool) = amount1fees_1 > 0
has variable
[i] TMP_34 cleared
clearing ir...?
CONDITION TMP_34
typecheckig node...
TMP_34(bool) = amount1fees_1 > 0
Function name: mint
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_34

Name: TMP_34 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
done.
CONDITION TMP_34
Condition...
Conidtion: 
TMP_34
TMP_34
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_28(address) -> mintParams_1.positionOwner
has variable
clearing ir...?
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_5,amount1fees_1,REF_28,False)
typecheckig node...
REF_28(address) -> mintParams_1.positionOwner
Function name: mint
MEMBER
mintParams
positionOwner
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
^^^

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
[i]Type for REF_28

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_5,amount1fees_1,REF_28,False)
Internal call...
_transfer
token1
amount1fees
REF_28
False
Function: _transfer
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], 11]
cur_param: [[-1], [-1], 0, 'MANAGER', [], -1]
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, None, [], 11]
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 0, None, [], -1]
0
done.
clearning node...
clearing ir...?
TMP_37(bool) = priceLower_1 < currentPrice_1
has variable
[i] TMP_37 cleared
clearing ir...?
TMP_38(bool) = currentPrice_1 < priceUpper_1
has variable
[i] TMP_38 cleared
clearing ir...?
TMP_39(bool) = TMP_37 && TMP_38
has variable
[i] TMP_39 cleared
clearing ir...?
CONDITION TMP_39
typecheckig node...
TMP_37(bool) = priceLower_1 < currentPrice_1
Function name: mint
testing lt...
lnorm: 0 rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for TMP_37

Name: TMP_37 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_38(bool) = currentPrice_1 < priceUpper_1
Function name: mint
testing lt...
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0
[i]Type for TMP_38

Name: TMP_38 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_39(bool) = TMP_37 && TMP_38
Function name: mint
[i]Type for TMP_39

Name: TMP_39 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_39
Condition...
Conidtion: 
TMP_39
TMP_39
clearning node...
clearing ir...?
TMP_33 = CONVERT amount0fees_1 to uint128
has variable
[i] TMP_33 cleared
clearing ir...?
reserve0_5(uint128) = reserve0_4 (c)- TMP_33
has variable
typecheckig node...
TMP_33 = CONVERT amount0fees_1 to uint128
Function name: mint

Name: amount0fees Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_33 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_33

Name: TMP_33 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
reserve0_5(uint128) = reserve0_4 (c)- TMP_33
Function name: mint
lnorm: u rnorm: 0
Finance type key: (30, 11)
Error with reserve0 in function mint
Error with: reserve0 in function mint
[<slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0dcf310>]

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_33 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_33 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: reserve0 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_40 = CONVERT _liquidity_1 to uint128
has variable
[i] TMP_40 cleared
clearing ir...?
liquidity_6(uint128) = liquidity_5 (c)+ TMP_40
has variable
typecheckig node...
TMP_40 = CONVERT _liquidity_1 to uint128
Function name: mint

Name: _liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_40 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_40

Name: TMP_40 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidity_6(uint128) = liquidity_5 (c)+ TMP_40
Function name: mint

Name: liquidity Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_40 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_36 = CONVERT amount1fees_1 to uint128
has variable
[i] TMP_36 cleared
clearing ir...?
reserve1_6(uint128) = reserve1_5 (c)- TMP_36
has variable
typecheckig node...
TMP_36 = CONVERT amount1fees_1 to uint128
Function name: mint

Name: amount1fees Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_36 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_36

Name: TMP_36 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
reserve1_6(uint128) = reserve1_5 (c)- TMP_36
Function name: mint
lnorm: u rnorm: 0
Finance type key: (30, 11)
Error with reserve1 in function mint
Error with: reserve1 in function mint
[<slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0dcf310>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d59550>]

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_36 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_36 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: reserve1 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_29(int24) -> mintParams_1.lower
has variable
clearing ir...?
REF_30(int24) -> mintParams_1.upper
has variable
clearing ir...?
INTERNAL_CALL, ConcentratedLiquidityPool._ensureTickSpacing(int24,int24)(REF_29,REF_30)
typecheckig node...
REF_29(int24) -> mintParams_1.lower
Function name: mint
MEMBER
mintParams
lower
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
^^^

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_29

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_30(int24) -> mintParams_1.upper
Function name: mint
MEMBER
mintParams
upper
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
^^^

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_30

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, ConcentratedLiquidityPool._ensureTickSpacing(int24,int24)(REF_29,REF_30)
Internal call...
_ensureTickSpacing
REF_29
REF_30
Function: _ensureTickSpacing
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _ensureTickSpacing
Function Visibility: internal
clearning node...
clearing ir...?
lower_1(int24) := ϕ(['REF_29'])
has variable
[i] lower cleared
clearing ir...?
upper_1(int24) := ϕ(['REF_30'])
has variable
[i] upper cleared
clearing ir...?
tickSpacing_2(uint24) := ϕ(['tickSpacing_1', 'tickSpacing_0'])
has variable
typecheckig node...
lower_1(int24) := ϕ(['REF_29'])
Function name: _ensureTickSpacing
Phi
[i]Type for lower

Name: lower Function: _ensureTickSpacing
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1(int24) := ϕ(['REF_30'])
Function name: _ensureTickSpacing
Phi
[i]Type for upper

Name: upper Function: _ensureTickSpacing
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tickSpacing_2(uint24) := ϕ(['tickSpacing_1', 'tickSpacing_0'])
Function name: _ensureTickSpacing
Phi
[i]Type for tickSpacing

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_162 = CONVERT tickSpacing_2 to int24
has variable
[i] TMP_162 cleared
clearing ir...?
TMP_163(int24) = lower_1 (c)% TMP_162
has variable
[i] TMP_163 cleared
clearing ir...?
TMP_164(bool) = TMP_163 == 0
has variable
[i] TMP_164 cleared
clearing ir...?
TMP_165(None) = SOLIDITY_CALL require(bool,string)(TMP_164,INVALID_TICK)
typecheckig node...
TMP_162 = CONVERT tickSpacing_2 to int24
Function name: _ensureTickSpacing

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_162 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: _ensureTickSpacing
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_163(int24) = lower_1 (c)% TMP_162
Function name: _ensureTickSpacing
[i]Type for TMP_163

Name: TMP_163 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_164(bool) = TMP_163 == 0
Function name: _ensureTickSpacing
[i]Type for TMP_164

Name: TMP_164 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_165(None) = SOLIDITY_CALL require(bool,string)(TMP_164,INVALID_TICK)
[i]Type for TMP_165

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_166 = CONVERT tickSpacing_2 to int24
has variable
[i] TMP_166 cleared
clearing ir...?
TMP_167(int24) = lower_1 (c)/ TMP_166
has variable
[i] TMP_167 cleared
clearing ir...?
TMP_168(int24) = TMP_167 (c)% 2
has variable
[i] TMP_168 cleared
clearing ir...?
TMP_169(bool) = TMP_168 == 0
has variable
[i] TMP_169 cleared
clearing ir...?
TMP_170(None) = SOLIDITY_CALL require(bool,string)(TMP_169,LOWER_EVEN)
typecheckig node...
TMP_166 = CONVERT tickSpacing_2 to int24
Function name: _ensureTickSpacing

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_166 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_166

Name: TMP_166 Function: _ensureTickSpacing
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_167(int24) = lower_1 (c)/ TMP_166
Function name: _ensureTickSpacing
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_167 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_167

Name: TMP_167 Function: _ensureTickSpacing
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_168(int24) = TMP_167 (c)% 2
Function name: _ensureTickSpacing
[i]Type for TMP_168

Name: TMP_168 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_169(bool) = TMP_168 == 0
Function name: _ensureTickSpacing
[i]Type for TMP_169

Name: TMP_169 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_170(None) = SOLIDITY_CALL require(bool,string)(TMP_169,LOWER_EVEN)
[i]Type for TMP_170

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_171 = CONVERT tickSpacing_2 to int24
has variable
[i] TMP_171 cleared
clearing ir...?
TMP_172(int24) = upper_1 (c)% TMP_171
has variable
[i] TMP_172 cleared
clearing ir...?
TMP_173(bool) = TMP_172 == 0
has variable
[i] TMP_173 cleared
clearing ir...?
TMP_174(None) = SOLIDITY_CALL require(bool,string)(TMP_173,INVALID_TICK)
typecheckig node...
TMP_171 = CONVERT tickSpacing_2 to int24
Function name: _ensureTickSpacing

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_171 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_171

Name: TMP_171 Function: _ensureTickSpacing
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_172(int24) = upper_1 (c)% TMP_171
Function name: _ensureTickSpacing
[i]Type for TMP_172

Name: TMP_172 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_173(bool) = TMP_172 == 0
Function name: _ensureTickSpacing
[i]Type for TMP_173

Name: TMP_173 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_174(None) = SOLIDITY_CALL require(bool,string)(TMP_173,INVALID_TICK)
[i]Type for TMP_174

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_175 = CONVERT tickSpacing_2 to int24
has variable
[i] TMP_175 cleared
clearing ir...?
TMP_176(int24) = upper_1 (c)/ TMP_175
has variable
[i] TMP_176 cleared
clearing ir...?
TMP_177(int24) = TMP_176 (c)% 2
has variable
[i] TMP_177 cleared
clearing ir...?
TMP_178(bool) = TMP_177 != 0
has variable
[i] TMP_178 cleared
clearing ir...?
TMP_179(None) = SOLIDITY_CALL require(bool,string)(TMP_178,UPPER_ODD)
typecheckig node...
TMP_175 = CONVERT tickSpacing_2 to int24
Function name: _ensureTickSpacing

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_175 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_175

Name: TMP_175 Function: _ensureTickSpacing
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_176(int24) = upper_1 (c)/ TMP_175
Function name: _ensureTickSpacing
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_176 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_176

Name: TMP_176 Function: _ensureTickSpacing
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_177(int24) = TMP_176 (c)% 2
Function name: _ensureTickSpacing
[i]Type for TMP_177

Name: TMP_177 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_178(bool) = TMP_177 != 0
Function name: _ensureTickSpacing
[i]Type for TMP_178

Name: TMP_178 Function: _ensureTickSpacing
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_179(None) = SOLIDITY_CALL require(bool,string)(TMP_178,UPPER_ODD)
[i]Type for TMP_179

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_ensureTickSpacing":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _ensureTickSpacing
done.
clearning node...
clearing ir...?
REF_32(int24) -> mintParams_1.lowerOld
has variable
clearing ir...?
REF_33(int24) -> mintParams_1.lower
has variable
clearing ir...?
REF_34(int24) -> mintParams_1.upperOld
has variable
clearing ir...?
REF_35(int24) -> mintParams_1.upper
has variable
clearing ir...?
TMP_42 = CONVERT _liquidity_1 to uint128
has variable
[i] TMP_42 cleared
clearing ir...?
TMP_43 = CONVERT currentPrice_1 to uint160
has variable
[i] TMP_43 cleared
clearing ir...?
TMP_44(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.insert(mapping(int24 => Ticks.Tick),uint256,uint256,uint160,int24,int24,int24,int24,uint128,int24,uint160), arguments:['ticks_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal1_6', 'secondsPerLiquidity_6', 'REF_32', 'REF_33', 'REF_34', 'REF_35', 'TMP_42', 'nearestTick_7', 'TMP_43'] 
has variable
[i] TMP_44 cleared
clearing ir...?
nearestTick_8(int24) := TMP_44(int24)
has variable
typecheckig node...
REF_32(int24) -> mintParams_1.lowerOld
Function name: mint
MEMBER
mintParams
lowerOld
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
^^^
[i]Type for REF_32

Name: mintParams.lowerOld Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lowerOld Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lowerOld Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_33(int24) -> mintParams_1.lower
Function name: mint
MEMBER
mintParams
lower
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
^^^

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_33

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_34(int24) -> mintParams_1.upperOld
Function name: mint
MEMBER
mintParams
upperOld
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
^^^
[i]Type for REF_34

Name: mintParams.upperOld Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upperOld Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upperOld Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_35(int24) -> mintParams_1.upper
Function name: mint
MEMBER
mintParams
upper
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
^^^

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_35

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_42 = CONVERT _liquidity_1 to uint128
Function name: mint

Name: _liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_42 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_42

Name: TMP_42 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_43 = CONVERT currentPrice_1 to uint160
Function name: mint

Name: currentPrice Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_43 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_43

Name: TMP_43 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_44(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.insert(mapping(int24 => Ticks.Tick),uint256,uint256,uint160,int24,int24,int24,int24,uint128,int24,uint160), arguments:['ticks_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal1_6', 'secondsPerLiquidity_6', 'REF_32', 'REF_33', 'REF_34', 'REF_35', 'TMP_42', 'nearestTick_7', 'TMP_43'] 
Function name: mint
Library Call: insert
hlc contract name: Ticks func_name: insert
wfc len: 0
COPIED
[i]Type for TMP_44

Name: TMP_44 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_8(int24) := TMP_44(int24)
Function name: mint
asgn

Name: TMP_44 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nearestTick Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nearestTick

Name: nearestTick Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_2(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(priceLower_1,priceUpper_1,currentPrice_1,_liquidity_1)
has variable
clearing ir...?
amount0Actual_1(uint128)= UNPACK TUPLE_2 index: 0 
has variable
[i] amount0Actual cleared
clearing ir...?
amount1Actual_1(uint128)= UNPACK TUPLE_2 index: 1 
has variable
[i] amount1Actual cleared
typecheckig node...
TUPLE_2(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(priceLower_1,priceUpper_1,currentPrice_1,_liquidity_1)
Function name: mint
Internal call...
_getAmountsForLiquidity
priceLower
priceUpper
currentPrice
_liquidity
Function: _getAmountsForLiquidity
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 0, None, [], 0]
[[-1], [-1], 0, None, [], 0]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _getAmountsForLiquidity
Function Visibility: internal
clearning node...
clearing ir...?
priceLower_1(uint256) := ϕ(['TMP_74', 'priceLower_1'])
has variable
[i] priceLower cleared
clearing ir...?
priceUpper_1(uint256) := ϕ(['priceUpper_1', 'TMP_75'])
has variable
[i] priceUpper cleared
clearing ir...?
currentPrice_1(uint256) := ϕ(['currentPrice_1', 'TMP_76'])
has variable
[i] currentPrice cleared
clearing ir...?
liquidityAmount_1(uint256) := ϕ(['TMP_77', '_liquidity_1'])
has variable
[i] liquidityAmount cleared
typecheckig node...
priceLower_1(uint256) := ϕ(['TMP_74', 'priceLower_1'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
priceUpper_1(uint256) := ϕ(['priceUpper_1', 'TMP_75'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
currentPrice_1(uint256) := ϕ(['currentPrice_1', 'TMP_76'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidityAmount_1(uint256) := ϕ(['TMP_77', '_liquidity_1'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_180(bool) = priceUpper_1 <= currentPrice_1
has variable
[i] TMP_180 cleared
clearing ir...?
CONDITION TMP_180
typecheckig node...
TMP_180(bool) = priceUpper_1 <= currentPrice_1
Function name: _getAmountsForLiquidity
testing lt...
lnorm: u rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for TMP_180

Name: TMP_180 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_180
Condition...
Conidtion: 
TMP_180
TMP_180
clearning node...
clearing ir...?
TMP_183(bool) = currentPrice_1 <= priceLower_1
has variable
[i] TMP_183 cleared
clearing ir...?
CONDITION TMP_183
typecheckig node...
TMP_183(bool) = currentPrice_1 <= priceLower_1
Function name: _getAmountsForLiquidity
testing lt...
lnorm: u rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0
[i]Type for TMP_183

Name: TMP_183 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_183
Condition...
Conidtion: 
TMP_183
TMP_183
clearning node...
clearing ir...?
TMP_181(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
has variable
[i] TMP_181 cleared
clearing ir...?
TMP_182 = CONVERT TMP_181 to uint128
has variable
[i] TMP_182 cleared
clearing ir...?
token1amount_3(uint128) := TMP_182(uint128)
has variable
[i] token1amount cleared
typecheckig node...
TMP_181(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Function name: _getAmountsForLiquidity
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
liquidityAmount
priceLower
priceUpper
True
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_182 = CONVERT TMP_181 to uint128
Function name: _getAmountsForLiquidity

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_182 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_182

Name: TMP_182 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token1amount_3(uint128) := TMP_182(uint128)
Function name: _getAmountsForLiquidity
asgn

Name: TMP_182 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_186(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'currentPrice_1', 'priceUpper_1', 'True'] 
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187 = CONVERT TMP_186 to uint128
has variable
[i] TMP_187 cleared
clearing ir...?
token0amount_2(uint128) := TMP_187(uint128)
has variable
[i] token0amount cleared
typecheckig node...
TMP_186(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'currentPrice_1', 'priceUpper_1', 'True'] 
Function name: _getAmountsForLiquidity
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
liquidityAmount
currentPrice
priceUpper
True
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_187 = CONVERT TMP_186 to uint128
Function name: _getAmountsForLiquidity

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_187 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_187

Name: TMP_187 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token0amount_2(uint128) := TMP_187(uint128)
Function name: _getAmountsForLiquidity
asgn

Name: TMP_187 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
token1amount_4(uint128) := ϕ(['token1amount_3', 'token1amount_0'])
has variable
[i] token1amount cleared
typecheckig node...
token1amount_4(uint128) := ϕ(['token1amount_3', 'token1amount_0'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_184(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
has variable
[i] TMP_184 cleared
clearing ir...?
TMP_185 = CONVERT TMP_184 to uint128
has variable
[i] TMP_185 cleared
clearing ir...?
token0amount_1(uint128) := TMP_185(uint128)
has variable
[i] token0amount cleared
typecheckig node...
TMP_184(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Function name: _getAmountsForLiquidity
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
liquidityAmount
priceLower
priceUpper
True
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_185 = CONVERT TMP_184 to uint128
Function name: _getAmountsForLiquidity

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_185 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_185

Name: TMP_185 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token0amount_1(uint128) := TMP_185(uint128)
Function name: _getAmountsForLiquidity
asgn

Name: TMP_185 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_188(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'currentPrice_1', 'True'] 
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189 = CONVERT TMP_188 to uint128
has variable
[i] TMP_189 cleared
clearing ir...?
token1amount_1(uint128) := TMP_189(uint128)
has variable
[i] token1amount cleared
typecheckig node...
TMP_188(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'currentPrice_1', 'True'] 
Function name: _getAmountsForLiquidity
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
liquidityAmount
priceLower
currentPrice
True
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_189 = CONVERT TMP_188 to uint128
Function name: _getAmountsForLiquidity

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_189 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_189

Name: TMP_189 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token1amount_1(uint128) := TMP_189(uint128)
Function name: _getAmountsForLiquidity
asgn

Name: TMP_189 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
token0amount_3(uint128) := ϕ(['token0amount_1', 'token0amount_2'])
has variable
[i] token0amount cleared
clearing ir...?
token1amount_2(uint128) := ϕ(['token1amount_0', 'token1amount_1'])
has variable
[i] token1amount cleared
typecheckig node...
token0amount_3(uint128) := ϕ(['token0amount_1', 'token0amount_2'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token1amount_2(uint128) := ϕ(['token1amount_0', 'token1amount_1'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
RETURN token0amount_0,token1amount_4
typecheckig node...
RETURN token0amount_0,token1amount_4
RETURN

Name: token0amount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
WORKLIST iteration 0 for function call "_getAmountsForLiquidity":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _getAmountsForLiquidity

Name: token0amount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
___

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
___
[i]Type for TUPLE_2

Name: TUPLE_2 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount0Actual_1(uint128)= UNPACK TUPLE_2 index: 0 
Function name: mint
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint128
uint128
Final Type: uint128
[i]Type for amount0Actual

Name: amount0Actual Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
amount1Actual_1(uint128)= UNPACK TUPLE_2 index: 1 
Function name: mint
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint128
uint128
Final Type: uint128
[i]Type for amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_46 = new ITridentRouter.TokenInput[](2)
clearing ir...?
callbackData_1(ITridentRouter.TokenInput[]) := TMP_46(ITridentRouter.TokenInput)
has variable
[i] callbackData cleared
typecheckig node...
TMP_46 = new ITridentRouter.TokenInput[](2)
[i]Type for TMP_46

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
callbackData_1(ITridentRouter.TokenInput[]) := TMP_46(ITridentRouter.TokenInput)
Function name: mint
asgn

Name: TMP_46 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: callbackData Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for callbackData

Name: callbackData Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
callbackData_1(ITridentRouter.TokenInput[]) := TMP_46(ITridentRouter.TokenInput)
XXXXX
clearning node...
clearing ir...?
REF_36(ITridentRouter.TokenInput) -> callbackData_1[0]
has variable
clearing ir...?
REF_38(bool) -> mintParams_1.token0native
has variable
clearing ir...?
TMP_47 = new TokenInput(token0_8,REF_38,amount0Actual_1)
clearing ir...?
callbackData_2(ITridentRouter.TokenInput[]) := ϕ(['callbackData_1'])
has variable
[i] callbackData cleared
clearing ir...?
REF_36 (->callbackData_2) := TMP_47(ITridentRouter.TokenInput)
has variable
typecheckig node...
REF_36(ITridentRouter.TokenInput) -> callbackData_1[0]
Function name: mint
INDEX

Name: callbackData Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: mint
callbackData
[i]Type for REF_36

Name: callbackData Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_36(ITridentRouter.TokenInput) -> callbackData_1[0]
XXXXX
REF_38(bool) -> mintParams_1.token0native
Function name: mint
MEMBER
mintParams
token0native
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
^^^
[i]Type for REF_38

Name: mintParams.token0native Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.token0native Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token0native Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_47 = new TokenInput(token0_8,REF_38,amount0Actual_1)
[i]Type for TMP_47

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
callbackData_2(ITridentRouter.TokenInput[]) := ϕ(['callbackData_1'])
Function name: mint
Phi
[i]Type for callbackData

Name: callbackData Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_36 (->callbackData_2) := TMP_47(ITridentRouter.TokenInput)
Function name: mint
asgn

Name: TMP_47 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_36 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_36

Name: REF_36 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_36 (->callbackData_2) := TMP_47(ITridentRouter.TokenInput)
XXXXX
clearning node...
clearing ir...?
REF_39(ITridentRouter.TokenInput) -> callbackData_2[1]
has variable
clearing ir...?
REF_41(bool) -> mintParams_1.token1native
has variable
clearing ir...?
TMP_48 = new TokenInput(token1_8,REF_41,amount1Actual_1)
clearing ir...?
callbackData_3(ITridentRouter.TokenInput[]) := ϕ(['callbackData_2'])
has variable
[i] callbackData cleared
clearing ir...?
REF_39 (->callbackData_3) := TMP_48(ITridentRouter.TokenInput)
has variable
typecheckig node...
REF_39(ITridentRouter.TokenInput) -> callbackData_2[1]
Function name: mint
INDEX

Name: callbackData Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: mint
callbackData
[i]Type for REF_39

Name: callbackData Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_39(ITridentRouter.TokenInput) -> callbackData_2[1]
XXXXX
REF_41(bool) -> mintParams_1.token1native
Function name: mint
MEMBER
mintParams
token1native
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
^^^
[i]Type for REF_41

Name: mintParams.token1native Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.token1native Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token1native Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_48 = new TokenInput(token1_8,REF_41,amount1Actual_1)
[i]Type for TMP_48

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
callbackData_3(ITridentRouter.TokenInput[]) := ϕ(['callbackData_2'])
Function name: mint
Phi
[i]Type for callbackData

Name: callbackData Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_39 (->callbackData_3) := TMP_48(ITridentRouter.TokenInput)
Function name: mint
asgn

Name: TMP_48 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_39 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_39

Name: REF_39 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_39 (->callbackData_3) := TMP_48(ITridentRouter.TokenInput)
XXXXX
clearning node...
clearing ir...?
TMP_49 = CONVERT msg.sender to ITridentCallee
has variable
[i] TMP_49 cleared
clearing ir...?
TMP_50(bytes) = SOLIDITY_CALL abi.encode()(callbackData_3)
clearing ir...?
HIGH_LEVEL_CALL, dest:TMP_49(ITridentCallee), function:tridentMintCallback, arguments:['TMP_50']  
clearing ir...?
token0_9(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_28', 'token0_8', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_9(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_8', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
has variable
clearing ir...?
reserve0_9(uint128) := ϕ(['reserve0_8', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
has variable
clearing ir...?
reserve1_9(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_8', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
has variable
typecheckig node...
TMP_49 = CONVERT msg.sender to ITridentCallee
Function name: mint
[i]Type for TMP_49

Name: TMP_49 Function: mint
Num: -1
Den: -1
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TMP_50(bytes) = SOLIDITY_CALL abi.encode()(callbackData_3)
[i]Type for TMP_50

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:TMP_49(ITridentCallee), function:tridentMintCallback, arguments:['TMP_50']  
High Call: tridentMintCallback
func name:tridentMintCallback
other func name:tridentMintCallback
done.
token0_9(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_28', 'token0_8', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: mint
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_9(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_8', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: mint
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_9(uint128) := ϕ(['reserve0_8', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: mint
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve1_9(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_8', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: mint
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_52(bool) = amount0Actual_1 != 0
has variable
[i] TMP_52 cleared
clearing ir...?
CONDITION TMP_52
typecheckig node...
TMP_52(bool) = amount0Actual_1 != 0
Function name: mint
[i]Type for TMP_52

Name: TMP_52 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_52
Condition...
Conidtion: 
TMP_52
TMP_52
clearning node...
clearing ir...?
TMP_53(uint128) = amount0Actual_1 (c)+ reserve0_9
has variable
[i] TMP_53 cleared
clearing ir...?
TMP_54(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_9)
has variable
[i] TMP_54 cleared
clearing ir...?
TMP_55(bool) = TMP_53 <= TMP_54
has variable
[i] TMP_55 cleared
clearing ir...?
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,TOKEN0_MISSING)
typecheckig node...
TMP_53(uint128) = amount0Actual_1 (c)+ reserve0_9
Function name: mint

Name: TMP_53 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_53 Function: mint
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_53

Name: TMP_53 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_54(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_9)
Function name: mint
Internal call...
_balance
token0
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _balance
Function Visibility: internal
clearning node...
clearing ir...?
token_1(address) := ϕ(['token1_10', 'token0_9', 'token1_26', 'token0_24'])
has variable
[i] token cleared
clearing ir...?
bento_2(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
token_1(address) := ϕ(['token1_10', 'token0_9', 'token1_26', 'token0_24'])
Function name: _balance
Phi
[i]Type for token

Name: token Function: _balance
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
bento_2(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: _balance
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_213 = CONVERT this to address
has variable
[i] TMP_213 cleared
clearing ir...?
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
has variable
[i] TMP_214 cleared
clearing ir...?
bento_3(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_2', 'bento_9'])
has variable
clearing ir...?
balance_1(uint256) := TMP_214(uint256)
has variable
[i] balance cleared
typecheckig node...
TMP_213 = CONVERT this to address
Function name: _balance
[i]Type for TMP_213

Name: TMP_213 Function: _balance
Num: -1
Den: -1
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TMP_214(uint256) = HIGH_LEVEL_CALL, dest:bento_2(IBentoBoxMinimal), function:balanceOf, arguments:['token_1', 'TMP_213']  
Function name: _balance
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_214
hlc contract name: BENTO func_name: balanceOf
('c', [-1], [-1], 0, None)
token
TMP_213
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_214

Name: TMP_214 Function: _balance
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_3(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_2', 'bento_9'])
Function name: _balance
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
balance_1(uint256) := TMP_214(uint256)
Function name: _balance
asgn

Name: TMP_214 Function: _balance
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: balance Function: _balance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance

Name: balance Function: _balance
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_balance":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _balance

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_54

Name: TMP_54 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_55(bool) = TMP_53 <= TMP_54
Function name: mint
testing lt...
lnorm: 0 rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0

Name: TMP_53 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_55 Function: mint
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_55

Name: TMP_55 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
This IR caused addback:
TMP_55(bool) = TMP_53 <= TMP_54
XXXXX
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,TOKEN0_MISSING)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
reserve0_11(uint128) = reserve0_10 (c)+ amount0Actual_1
has variable
typecheckig node...
reserve0_11(uint128) = reserve0_10 (c)+ amount0Actual_1
Function name: mint

Name: reserve0 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0

Name: amount0Actual Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: reserve0 Function: mint
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_57(bool) = amount1Actual_1 != 0
has variable
[i] TMP_57 cleared
clearing ir...?
CONDITION TMP_57
typecheckig node...
TMP_57(bool) = amount1Actual_1 != 0
Function name: mint
[i]Type for TMP_57

Name: TMP_57 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_57
Condition...
Conidtion: 
TMP_57
TMP_57
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_58(uint128) = amount1Actual_1 (c)+ reserve1_10
has variable
[i] TMP_58 cleared
clearing ir...?
TMP_59(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_10)
has variable
[i] TMP_59 cleared
clearing ir...?
TMP_60(bool) = TMP_58 <= TMP_59
has variable
[i] TMP_60 cleared
clearing ir...?
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,TOKEN1_MISSING)
typecheckig node...
TMP_58(uint128) = amount1Actual_1 (c)+ reserve1_10
Function name: mint

Name: TMP_58 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_58 Function: mint
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_58

Name: TMP_58 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_59(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_10)
Function name: mint
Internal call...
_balance
token1
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_59 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_60(bool) = TMP_58 <= TMP_59
Function name: mint
testing lt...
lnorm: 0 rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0

Name: TMP_58 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_60 Function: mint
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_60

Name: TMP_60 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
This IR caused addback:
TMP_60(bool) = TMP_58 <= TMP_59
XXXXX
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,TOKEN1_MISSING)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
reserve1_12(uint128) = reserve1_11 (c)+ amount1Actual_1
has variable
typecheckig node...
reserve1_12(uint128) = reserve1_11 (c)+ amount1Actual_1
Function name: mint

Name: reserve1 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0

Name: amount1Actual Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: reserve1 Function: mint
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_44(int24) -> mintParams_1.lower
has variable
clearing ir...?
REF_45(int24) -> mintParams_1.upper
has variable
clearing ir...?
TUPLE_3(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(REF_44,REF_45)
has variable
clearing ir...?
feeGrowth0_1(uint256)= UNPACK TUPLE_3 index: 0 
has variable
[i] feeGrowth0 cleared
clearing ir...?
feeGrowth1_1(uint256)= UNPACK TUPLE_3 index: 1 
has variable
[i] feeGrowth1 cleared
typecheckig node...
REF_44(int24) -> mintParams_1.lower
Function name: mint
MEMBER
mintParams
lower
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
^^^

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_44

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_45(int24) -> mintParams_1.upper
Function name: mint
MEMBER
mintParams
upper
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
^^^

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_45

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_3(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(REF_44,REF_45)
Function name: mint
Internal call...
rangeFeeGrowth
REF_44
REF_45
Function: rangeFeeGrowth
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
0
[i]Type for TUPLE_3

Name: TUPLE_3 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowth0_1(uint256)= UNPACK TUPLE_3 index: 0 
Function name: mint
Reading tuple TUPLE_3 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, 110)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for feeGrowth0

Name: feeGrowth0 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowth1_1(uint256)= UNPACK TUPLE_3 index: 1 
Function name: mint
Reading tuple TUPLE_3 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, 110)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for feeGrowth1

Name: feeGrowth1 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
REF_46(address) -> mintParams_1.positionRecipient
has variable
clearing ir...?
TMP_62 = CONVERT 0 to address
has variable
[i] TMP_62 cleared
clearing ir...?
TMP_63(bool) = REF_46 != TMP_62
has variable
[i] TMP_63 cleared
clearing ir...?
CONDITION TMP_63
typecheckig node...
REF_46(address) -> mintParams_1.positionRecipient
Function name: mint
MEMBER
mintParams
positionRecipient
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
^^^
[i]Type for REF_46

Name: mintParams.positionRecipient Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.positionRecipient Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: positionRecipient Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_62 = CONVERT 0 to address
Function name: mint
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_62 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_62

Name: TMP_62 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_63(bool) = REF_46 != TMP_62
Function name: mint
[i]Type for TMP_63

Name: TMP_63 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_63
Condition...
Conidtion: 
TMP_63
TMP_63
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_47(address) -> mintParams_1.positionOwner
has variable
clearing ir...?
TMP_64 = CONVERT REF_47 to IPositionManager
has variable
[i] TMP_64 cleared
clearing ir...?
REF_49(address) -> mintParams_1.positionRecipient
has variable
clearing ir...?
REF_50(int24) -> mintParams_1.lower
has variable
clearing ir...?
REF_51(int24) -> mintParams_1.upper
has variable
clearing ir...?
TMP_65 = CONVERT _liquidity_1 to uint128
has variable
[i] TMP_65 cleared
clearing ir...?
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:TMP_64(IPositionManager), function:positionMintCallback, arguments:['REF_49', 'REF_50', 'REF_51', 'TMP_65', 'feeGrowth0_1', 'feeGrowth1_1']  
has variable
[i] TMP_66 cleared
typecheckig node...
REF_47(address) -> mintParams_1.positionOwner
Function name: mint
MEMBER
mintParams
positionOwner
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
[i]Type for REF_47

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
done.
TMP_64 = CONVERT REF_47 to IPositionManager
Function name: mint

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: TMP_64 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_64

Name: TMP_64 Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
done.
REF_49(address) -> mintParams_1.positionRecipient
Function name: mint
MEMBER
mintParams
positionRecipient
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: positionRecipient Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_49

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: positionRecipient Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_50(int24) -> mintParams_1.lower
Function name: mint
MEMBER
mintParams
lower
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_50

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_51(int24) -> mintParams_1.upper
Function name: mint
MEMBER
mintParams
upper
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_65 = CONVERT _liquidity_1 to uint128
Function name: mint

Name: _liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_65 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_65

Name: TMP_65 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:TMP_64(IPositionManager), function:positionMintCallback, arguments:['REF_49', 'REF_50', 'REF_51', 'TMP_65', 'feeGrowth0_1', 'feeGrowth1_1']  
Function name: mint
High Call: positionMintCallback
func name:positionMintCallback
other func name:positionMintCallback
TMP_66
hlc contract name: MANAGER func_name: positionMintCallback
wfc len: 0
COPIED
[i]Type for TMP_66

Name: TMP_66 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_52(address) -> mintParams_1.positionOwner
has variable
clearing ir...?
REF_53(address) -> mintParams_1.positionRecipient
has variable
clearing ir...?
Emit Mint(REF_52,amount0Actual_1,amount1Actual_1,REF_53)
typecheckig node...
REF_52(address) -> mintParams_1.positionOwner
Function name: mint
MEMBER
mintParams
positionOwner
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
done.
REF_53(address) -> mintParams_1.positionRecipient
Function name: mint
MEMBER
mintParams
positionRecipient
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: positionRecipient Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_53

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: positionRecipient Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
Emit Mint(REF_52,amount0Actual_1,amount1Actual_1,REF_53)
WORKLIST iteration 0 for function call "mint":
 New undefined nodes- 6
 Old undefined nodes- 0
typecheckig node...
MAX_TICK_LIQUIDITY_2(uint128) := ϕ(['MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_0'])
Function name: mint
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0_2(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: mint
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_2(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: mint
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidity_1(uint128) := ϕ(['liquidity_4', 'liquidity_3', 'liquidity_5', 'liquidity_0', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9'])
Function name: mint
Phi
[i]Type for liquidity

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsPerLiquidity_1(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Function name: mint
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal0_1(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
Function name: mint
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
feeGrowthGlobal1_1(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
Function name: mint
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
reserve0_1(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: mint
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
reserve1_1(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: mint
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
price_2(uint160) := ϕ(['price_0', 'price_8', 'price_3', 'price_1', 'price_5'])
Function name: mint
Phi
[i]Type for price

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_2(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: mint
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_3(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: mint
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Internal call...
lock
Function: lock
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
typecheckig node...
TMP_20(ConcentratedLiquidityPool.MintParams) = SOLIDITY_CALL abi.decode()(data_1,MintParams)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
mintParams_1(ConcentratedLiquidityPool.MintParams) := TMP_20(ConcentratedLiquidityPool.MintParams)
Function name: mint
asgn

Name: TMP_20 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for mintParams

Name: mintParams Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: lower, upper, amount1Desired, amount0Desired, positionOwner, lowerOld, upperOld, token0native, token1native, positionRecipient
Finance Type: undef
done.
This IR caused addback:
mintParams_1(ConcentratedLiquidityPool.MintParams) := TMP_20(ConcentratedLiquidityPool.MintParams)
XXXXX
typecheckig node...
REF_18(int24) -> mintParams_1.lower
Function name: mint
MEMBER
mintParams
lower
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_18

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_21(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_18'] 
Function name: mint
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
REF_18
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_21

Name: TMP_21 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_22 = CONVERT TMP_21 to uint256
Function name: mint

Name: TMP_21 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_22 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_22

Name: TMP_22 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
priceLower_1(uint256) := TMP_22(uint256)
Function name: mint
asgn

Name: TMP_22 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: priceLower Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for priceLower

Name: priceLower Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
REF_20(int24) -> mintParams_1.upper
Function name: mint
MEMBER
mintParams
upper
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_20

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_23(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_20'] 
Function name: mint
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
REF_20
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_23

Name: TMP_23 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_24 = CONVERT TMP_23 to uint256
Function name: mint

Name: TMP_23 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_24 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_24

Name: TMP_24 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
priceUpper_1(uint256) := TMP_24(uint256)
Function name: mint
asgn

Name: TMP_24 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: priceUpper Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for priceUpper

Name: priceUpper Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
TMP_25 = CONVERT price_3 to uint256
Function name: mint

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_25 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_25

Name: TMP_25 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
currentPrice_1(uint256) := TMP_25(uint256)
Function name: mint
asgn

Name: TMP_25 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for currentPrice

Name: currentPrice Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_22(uint256) -> mintParams_1.amount1Desired
Function name: mint
MEMBER
mintParams
amount1Desired
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: amount1Desired Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_22

Name: mintParams.amount1Desired Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.amount1Desired Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amount1Desired Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_23(uint256) -> mintParams_1.amount0Desired
Function name: mint
MEMBER
mintParams
amount0Desired
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: amount0Desired Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_23

Name: mintParams.amount0Desired Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.amount0Desired Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amount0Desired Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_26(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getLiquidityForAmounts(uint256,uint256,uint256,uint256,uint256), arguments:['priceLower_1', 'priceUpper_1', 'currentPrice_1', 'REF_22', 'REF_23'] 
Function name: mint
Library Call: getLiquidityForAmounts
hlc contract name: DyDxMath func_name: getLiquidityForAmounts
wfc len: 0
COPIED
[i]Type for TMP_26

Name: TMP_26 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_liquidity_1(uint256) := TMP_26(uint256)
Function name: mint
asgn

Name: TMP_26 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _liquidity

Name: _liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_27(bool) = _liquidity_1 <= MAX_TICK_LIQUIDITY_3
Function name: mint
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_27

Name: TMP_27 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_28(None) = SOLIDITY_CALL require(bool,string)(TMP_27,LIQUIDITY_OVERFLOW)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
typecheckig node...
REF_24(address) -> mintParams_1.positionOwner
Function name: mint
MEMBER
mintParams
positionOwner
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
[i]Type for REF_24

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
done.
REF_25(int24) -> mintParams_1.lower
Function name: mint
MEMBER
mintParams
lower
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_25

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_26(int24) -> mintParams_1.upper
Function name: mint
MEMBER
mintParams
upper
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_26

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_29 = CONVERT _liquidity_1 to uint128
Function name: mint

Name: _liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_29 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_29

Name: TMP_29 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_30 = CONVERT TMP_29 to int128
Function name: mint

Name: TMP_29 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_30 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_30

Name: TMP_30 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_1(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(REF_24,REF_25,REF_26,TMP_30)
Function name: mint
Internal call...
_updatePosition
REF_24
REF_25
REF_26
TMP_30
Function: _updatePosition
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, 'MANAGER', [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
0
[i]Type for TUPLE_1

Name: TUPLE_1 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount0fees_1(uint256)= UNPACK TUPLE_1 index: 0 
Function name: mint
Reading tuple TUPLE_1 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount0fees

Name: amount0fees Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
amount1fees_1(uint256)= UNPACK TUPLE_1 index: 1 
Function name: mint
Reading tuple TUPLE_1 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount1fees

Name: amount1fees Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
typecheckig node...
TMP_31(bool) = amount0fees_1 > 0
Function name: mint
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_31

Name: TMP_31 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
done.
CONDITION TMP_31
Condition...
Conidtion: 
TMP_31
TMP_31
typecheckig node...
typecheckig node...
REF_27(address) -> mintParams_1.positionOwner
Function name: mint
MEMBER
mintParams
positionOwner
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
[i]Type for REF_27

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_4,amount0fees_1,REF_27,False)
Internal call...
_transfer
token0
amount0fees
REF_27
False
Function: _transfer
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], 11]
cur_param: [[-1], [-1], 0, 'MANAGER', [], -1]
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, None, [], 11]
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 0, None, [], -1]
0
done.
typecheckig node...
TMP_34(bool) = amount1fees_1 > 0
Function name: mint
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_34

Name: TMP_34 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
done.
CONDITION TMP_34
Condition...
Conidtion: 
TMP_34
TMP_34
typecheckig node...
typecheckig node...
REF_28(address) -> mintParams_1.positionOwner
Function name: mint
MEMBER
mintParams
positionOwner
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
[i]Type for REF_28

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_5,amount1fees_1,REF_28,False)
Internal call...
_transfer
token1
amount1fees
REF_28
False
Function: _transfer
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], 11]
cur_param: [[-1], [-1], 0, 'MANAGER', [], -1]
cur_param: [[-1], [-1], 0, None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, None, [], 11]
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 0, None, [], -1]
0
done.
typecheckig node...
TMP_37(bool) = priceLower_1 < currentPrice_1
Function name: mint
testing lt...
lnorm: 0 rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for TMP_37

Name: TMP_37 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_38(bool) = currentPrice_1 < priceUpper_1
Function name: mint
testing lt...
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0
[i]Type for TMP_38

Name: TMP_38 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_39(bool) = TMP_37 && TMP_38
Function name: mint
[i]Type for TMP_39

Name: TMP_39 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_39
Condition...
Conidtion: 
TMP_39
TMP_39
typecheckig node...
TMP_33 = CONVERT amount0fees_1 to uint128
Function name: mint

Name: amount0fees Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_33 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
[i]Type for TMP_33

Name: TMP_33 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
reserve0_5(uint128) = reserve0_4 (c)- TMP_33
Function name: mint
lnorm: 0 rnorm: 0
Finance type key: (0, 11)
Func: sub
Dest type: 1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 11, Left type: 0
Final dest type: 1

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_33 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_33 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: reserve0 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance
[i]Type for reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance
done.
typecheckig node...
TMP_40 = CONVERT _liquidity_1 to uint128
Function name: mint

Name: _liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_40 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_40

Name: TMP_40 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidity_6(uint128) = liquidity_5 (c)+ TMP_40
Function name: mint

Name: liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_40 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_36 = CONVERT amount1fees_1 to uint128
Function name: mint

Name: amount1fees Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_36 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
[i]Type for TMP_36

Name: TMP_36 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
reserve1_6(uint128) = reserve1_5 (c)- TMP_36
Function name: mint
lnorm: 0 rnorm: 0
Finance type key: (0, 11)
Func: sub
Dest type: 1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 11, Left type: 0
Final dest type: 1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_36 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_36 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: reserve1 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance
[i]Type for reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance
done.
typecheckig node...
typecheckig node...
REF_29(int24) -> mintParams_1.lower
Function name: mint
MEMBER
mintParams
lower
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_29

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_30(int24) -> mintParams_1.upper
Function name: mint
MEMBER
mintParams
upper
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_30

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, ConcentratedLiquidityPool._ensureTickSpacing(int24,int24)(REF_29,REF_30)
Internal call...
_ensureTickSpacing
REF_29
REF_30
Function: _ensureTickSpacing
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
0
done.
typecheckig node...
REF_32(int24) -> mintParams_1.lowerOld
Function name: mint
MEMBER
mintParams
lowerOld
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: lowerOld Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_32

Name: mintParams.lowerOld Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lowerOld Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lowerOld Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_33(int24) -> mintParams_1.lower
Function name: mint
MEMBER
mintParams
lower
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_33

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_34(int24) -> mintParams_1.upperOld
Function name: mint
MEMBER
mintParams
upperOld
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: upperOld Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_34

Name: mintParams.upperOld Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upperOld Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upperOld Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_35(int24) -> mintParams_1.upper
Function name: mint
MEMBER
mintParams
upper
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_35

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_42 = CONVERT _liquidity_1 to uint128
Function name: mint

Name: _liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_42 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_42

Name: TMP_42 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_43 = CONVERT currentPrice_1 to uint160
Function name: mint

Name: currentPrice Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_43 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_43

Name: TMP_43 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_44(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.insert(mapping(int24 => Ticks.Tick),uint256,uint256,uint160,int24,int24,int24,int24,uint128,int24,uint160), arguments:['ticks_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal1_6', 'secondsPerLiquidity_6', 'REF_32', 'REF_33', 'REF_34', 'REF_35', 'TMP_42', 'nearestTick_7', 'TMP_43'] 
Function name: mint
Library Call: insert
hlc contract name: Ticks func_name: insert
wfc len: 0
COPIED
[i]Type for TMP_44

Name: TMP_44 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_8(int24) := TMP_44(int24)
Function name: mint
asgn

Name: TMP_44 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nearestTick Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nearestTick

Name: nearestTick Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
typecheckig node...
TUPLE_2(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(priceLower_1,priceUpper_1,currentPrice_1,_liquidity_1)
Function name: mint
Internal call...
_getAmountsForLiquidity
priceLower
priceUpper
currentPrice
_liquidity
Function: _getAmountsForLiquidity
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], 0]
cur_param: [[-1], [-1], 0, None, [], 0]
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 0, None, [], 0]
[[-1], [-1], 0, None, [], 0]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
0
[i]Type for TUPLE_2

Name: TUPLE_2 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount0Actual_1(uint128)= UNPACK TUPLE_2 index: 0 
Function name: mint
Reading tuple TUPLE_2 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint128
uint128
Final Type: uint128
[i]Type for amount0Actual

Name: amount0Actual Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
amount1Actual_1(uint128)= UNPACK TUPLE_2 index: 1 
Function name: mint
Reading tuple TUPLE_2 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint128
uint128
Final Type: uint128
[i]Type for amount1Actual

Name: amount1Actual Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
TMP_46 = new ITridentRouter.TokenInput[](2)
[i]Type for TMP_46

Name: TMP_46 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
callbackData_1(ITridentRouter.TokenInput[]) := TMP_46(ITridentRouter.TokenInput)
Function name: mint
asgn

Name: TMP_46 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: callbackData Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for callbackData

Name: callbackData Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
callbackData_1(ITridentRouter.TokenInput[]) := TMP_46(ITridentRouter.TokenInput)
XXXXX
typecheckig node...
REF_36(ITridentRouter.TokenInput) -> callbackData_1[0]
Function name: mint
INDEX

Name: callbackData Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: mint
callbackData
[i]Type for REF_36

Name: callbackData Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_36(ITridentRouter.TokenInput) -> callbackData_1[0]
XXXXX
REF_38(bool) -> mintParams_1.token0native
Function name: mint
MEMBER
mintParams
token0native
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: token0native Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_38

Name: mintParams.token0native Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.token0native Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token0native Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_47 = new TokenInput(token0_8,REF_38,amount0Actual_1)
[i]Type for TMP_47

Name: TMP_47 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
callbackData_2(ITridentRouter.TokenInput[]) := ϕ(['callbackData_1'])
Function name: mint
Phi
[i]Type for callbackData

Name: callbackData Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_36 (->callbackData_2) := TMP_47(ITridentRouter.TokenInput)
Function name: mint
asgn

Name: TMP_47 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_36 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_36

Name: REF_36 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_36 (->callbackData_2) := TMP_47(ITridentRouter.TokenInput)
XXXXX
typecheckig node...
REF_39(ITridentRouter.TokenInput) -> callbackData_2[1]
Function name: mint
INDEX

Name: callbackData Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: mint
callbackData
[i]Type for REF_39

Name: callbackData Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_39(ITridentRouter.TokenInput) -> callbackData_2[1]
XXXXX
REF_41(bool) -> mintParams_1.token1native
Function name: mint
MEMBER
mintParams
token1native
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: token1native Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_41

Name: mintParams.token1native Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.token1native Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token1native Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_48 = new TokenInput(token1_8,REF_41,amount1Actual_1)
[i]Type for TMP_48

Name: TMP_48 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
callbackData_3(ITridentRouter.TokenInput[]) := ϕ(['callbackData_2'])
Function name: mint
Phi
[i]Type for callbackData

Name: callbackData Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_39 (->callbackData_3) := TMP_48(ITridentRouter.TokenInput)
Function name: mint
asgn

Name: TMP_48 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_39 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_39

Name: REF_39 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_39 (->callbackData_3) := TMP_48(ITridentRouter.TokenInput)
XXXXX
typecheckig node...
TMP_49 = CONVERT msg.sender to ITridentCallee
Function name: mint
[i]Type for TMP_49

Name: TMP_49 Function: mint
Num: -1
Den: -1
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TMP_50(bytes) = SOLIDITY_CALL abi.encode()(callbackData_3)
[i]Type for TMP_50

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:TMP_49(ITridentCallee), function:tridentMintCallback, arguments:['TMP_50']  
High Call: tridentMintCallback
func name:tridentMintCallback
other func name:tridentMintCallback
done.
token0_9(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_28', 'token0_8', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: mint
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_9(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_8', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: mint
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_9(uint128) := ϕ(['reserve0_8', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: mint
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance
done.
reserve1_9(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_8', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: mint
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance
done.
typecheckig node...
TMP_52(bool) = amount0Actual_1 != 0
Function name: mint
[i]Type for TMP_52

Name: TMP_52 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_52
Condition...
Conidtion: 
TMP_52
TMP_52
typecheckig node...
TMP_53(uint128) = amount0Actual_1 (c)+ reserve0_9
Function name: mint

Name: TMP_53 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
initlize checks
;;;
lnorm: 0 rnorm: 0
Finance type key: (0, 1)
Error with TMP_53 in function mint
Error with: TMP_53 in function mint
[<slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0dcf310>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d59550>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d81550>]

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance

Name: TMP_53 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_53

Name: TMP_53 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_54(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_9)
Function name: mint
Internal call...
_balance
token0
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_54 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_54

Name: TMP_54 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_55(bool) = TMP_53 <= TMP_54
Function name: mint
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_53 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_55 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_55

Name: TMP_55 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_55(bool) = TMP_53 <= TMP_54
XXXXX
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,TOKEN0_MISSING)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
reserve0_11(uint128) = reserve0_10 (c)+ amount0Actual_1
Function name: mint

Name: reserve0 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
initlize checks
;;;
lnorm: 0 rnorm: 0
Finance type key: (1, 0)
Error with reserve0 in function mint
Error with: reserve0 in function mint
[<slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0dcf310>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d59550>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d81550>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d81fa0>]

Name: amount0Actual Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: reserve0 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for reserve0

Name: reserve0 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
TMP_57(bool) = amount1Actual_1 != 0
Function name: mint
[i]Type for TMP_57

Name: TMP_57 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_57
Condition...
Conidtion: 
TMP_57
TMP_57
typecheckig node...
typecheckig node...
typecheckig node...
TMP_58(uint128) = amount1Actual_1 (c)+ reserve1_10
Function name: mint

Name: TMP_58 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
initlize checks
;;;
lnorm: 0 rnorm: 0
Finance type key: (0, 1)
Error with TMP_58 in function mint
Error with: TMP_58 in function mint
[<slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0dcf310>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d59550>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d81550>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d81fa0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d8a3d0>]

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance

Name: TMP_58 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_58

Name: TMP_58 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_59(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_10)
Function name: mint
Internal call...
_balance
token1
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_59 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_60(bool) = TMP_58 <= TMP_59
Function name: mint
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_58 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_60 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_60

Name: TMP_60 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_60(bool) = TMP_58 <= TMP_59
XXXXX
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,TOKEN1_MISSING)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
reserve1_12(uint128) = reserve1_11 (c)+ amount1Actual_1
Function name: mint

Name: reserve1 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
initlize checks
;;;
lnorm: 0 rnorm: 0
Finance type key: (1, 0)
Error with reserve1 in function mint
Error with: reserve1 in function mint
[<slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0dcf310>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d59550>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d81550>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d81fa0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d8a3d0>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d8abe0>]

Name: amount1Actual Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: reserve1 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for reserve1

Name: reserve1 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
REF_44(int24) -> mintParams_1.lower
Function name: mint
MEMBER
mintParams
lower
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_44

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_45(int24) -> mintParams_1.upper
Function name: mint
MEMBER
mintParams
upper
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_45

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_3(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(REF_44,REF_45)
Function name: mint
Internal call...
rangeFeeGrowth
REF_44
REF_45
Function: rangeFeeGrowth
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
0
[i]Type for TUPLE_3

Name: TUPLE_3 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowth0_1(uint256)= UNPACK TUPLE_3 index: 0 
Function name: mint
Reading tuple TUPLE_3 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, 110)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for feeGrowth0

Name: feeGrowth0 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowth1_1(uint256)= UNPACK TUPLE_3 index: 1 
Function name: mint
Reading tuple TUPLE_3 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, 110)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for feeGrowth1

Name: feeGrowth1 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
typecheckig node...
REF_46(address) -> mintParams_1.positionRecipient
Function name: mint
MEMBER
mintParams
positionRecipient
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: positionRecipient Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_46

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: positionRecipient Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_62 = CONVERT 0 to address
Function name: mint
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_62 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_62

Name: TMP_62 Function: mint
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_63(bool) = REF_46 != TMP_62
Function name: mint
[i]Type for TMP_63

Name: TMP_63 Function: mint
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_63
Condition...
Conidtion: 
TMP_63
TMP_63
typecheckig node...
typecheckig node...
REF_47(address) -> mintParams_1.positionOwner
Function name: mint
MEMBER
mintParams
positionOwner
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
[i]Type for REF_47

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
done.
TMP_64 = CONVERT REF_47 to IPositionManager
Function name: mint

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: TMP_64 Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
[i]Type for TMP_64

Name: TMP_64 Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
done.
REF_49(address) -> mintParams_1.positionRecipient
Function name: mint
MEMBER
mintParams
positionRecipient
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: positionRecipient Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_49

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: positionRecipient Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_50(int24) -> mintParams_1.lower
Function name: mint
MEMBER
mintParams
lower
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_50

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.lower Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_51(int24) -> mintParams_1.upper
Function name: mint
MEMBER
mintParams
upper
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_51

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.upper Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_65 = CONVERT _liquidity_1 to uint128
Function name: mint

Name: _liquidity Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_65 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_65

Name: TMP_65 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:TMP_64(IPositionManager), function:positionMintCallback, arguments:['REF_49', 'REF_50', 'REF_51', 'TMP_65', 'feeGrowth0_1', 'feeGrowth1_1']  
Function name: mint
High Call: positionMintCallback
func name:positionMintCallback
other func name:positionMintCallback
TMP_66
hlc contract name: MANAGER func_name: positionMintCallback
wfc len: 0
COPIED
[i]Type for TMP_66

Name: TMP_66 Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_52(address) -> mintParams_1.positionOwner
Function name: mint
MEMBER
mintParams
positionOwner
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
[i]Type for REF_52

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: mintParams.positionOwner Function: mint
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef

Name: positionOwner Function: None
Num: -1
Den: -1
Norm: 0
LF: MANAGER
Fields: 
Finance Type: undef
done.
REF_53(address) -> mintParams_1.positionRecipient
Function name: mint
MEMBER
mintParams
positionRecipient
mint
mintParams Fields:
lower
upper
amount1Desired
amount0Desired
positionOwner
lowerOld
upperOld
token0native
token1native
positionRecipient
^^^

Name: positionRecipient Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_53

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: mintParams.positionRecipient Function: mint
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: positionRecipient Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
Emit Mint(REF_52,amount0Actual_1,amount1Actual_1,REF_53)
WORKLIST iteration 1 for function call "mint":
 New undefined nodes- 6
 Old undefined nodes- 6
Saving return values for: mint

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: burn
Function name: burn
Function Visibility (test): public
data
Finding type for data...
bytes
SKIP bytes
-100
Add new
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
token0_11(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_12(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
has variable
clearing ir...?
liquidity_7(uint128) := ϕ(['liquidity_4', 'liquidity_3', 'liquidity_5', 'liquidity_0', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9'])
has variable
clearing ir...?
reserve0_12(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
has variable
clearing ir...?
reserve1_13(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
has variable
clearing ir...?
price_4(uint160) := ϕ(['price_0', 'price_8', 'price_3', 'price_1', 'price_5'])
has variable
clearing ir...?
nearestTick_9(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
has variable
clearing ir...?
ticks_9(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
has variable
typecheckig node...
token0_11(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: burn
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_12(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: burn
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidity_7(uint128) := ϕ(['liquidity_4', 'liquidity_3', 'liquidity_5', 'liquidity_0', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9'])
Function name: burn
Phi
[i]Type for liquidity

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_12(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: burn
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve1_13(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: burn
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
price_4(uint160) := ϕ(['price_0', 'price_8', 'price_3', 'price_1', 'price_5'])
Function name: burn
Phi
[i]Type for price

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_9(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: burn
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_9(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: burn
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
typecheckig node...
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Internal call...
lock
Function: lock
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_4(int24,int24,uint128,address,bool) = SOLIDITY_CALL abi.decode()(data_1(int24,int24,uint128,address,bool))
clearing ir...?
lower_1(int24)= UNPACK TUPLE_4 index: 0 
has variable
[i] lower cleared
clearing ir...?
upper_1(int24)= UNPACK TUPLE_4 index: 1 
has variable
[i] upper cleared
clearing ir...?
amount_1(uint128)= UNPACK TUPLE_4 index: 2 
has variable
[i] amount cleared
clearing ir...?
recipient_1(address)= UNPACK TUPLE_4 index: 3 
has variable
[i] recipient cleared
clearing ir...?
unwrapBento_1(bool)= UNPACK TUPLE_4 index: 4 
has variable
[i] unwrapBento cleared
typecheckig node...
TUPLE_4(int24,int24,uint128,address,bool) = SOLIDITY_CALL abi.decode()(data_1(int24,int24,uint128,address,bool))
[i]Type for TUPLE_4

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lower_1(int24)= UNPACK TUPLE_4 index: 0 
Function name: burn
Reading tuple TUPLE_4 index 0
Finding type for lower...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: lower Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for lower

Name: lower Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1(int24)= UNPACK TUPLE_4 index: 1 
Function name: burn
Reading tuple TUPLE_4 index 1
Finding type for upper...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: upper Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for upper

Name: upper Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint128)= UNPACK TUPLE_4 index: 2 
Function name: burn
Reading tuple TUPLE_4 index 2
Finding type for amount...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 0)
----
Type: uint128
uint128
Final Type: uint128

Name: amount Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[*]Type fetched successfully
[i]Type for amount

Name: amount Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
recipient_1(address)= UNPACK TUPLE_4 index: 3 
Function name: burn
Reading tuple TUPLE_4 index 3
Finding type for recipient...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: recipient Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for recipient

Name: recipient Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool)= UNPACK TUPLE_4 index: 4 
Function name: burn
Reading tuple TUPLE_4 index 4
Finding type for unwrapBento...
bool
SKIP bool
[i]Type for unwrapBento

Name: unwrapBento Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_69(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['lower_1'] 
has variable
[i] TMP_69 cleared
clearing ir...?
priceLower_1(uint160) := TMP_69(uint160)
has variable
[i] priceLower cleared
typecheckig node...
TMP_69(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['lower_1'] 
Function name: burn
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
lower
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_69

Name: TMP_69 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
priceLower_1(uint160) := TMP_69(uint160)
Function name: burn
asgn

Name: TMP_69 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: priceLower Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for priceLower

Name: priceLower Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_70(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['upper_1'] 
has variable
[i] TMP_70 cleared
clearing ir...?
priceUpper_1(uint160) := TMP_70(uint160)
has variable
[i] priceUpper cleared
typecheckig node...
TMP_70(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['upper_1'] 
Function name: burn
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
upper
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_70

Name: TMP_70 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
priceUpper_1(uint160) := TMP_70(uint160)
Function name: burn
asgn

Name: TMP_70 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: priceUpper Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for priceUpper

Name: priceUpper Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
currentPrice_1(uint160) := price_5(uint160)
has variable
[i] currentPrice cleared
typecheckig node...
currentPrice_1(uint160) := price_5(uint160)
Function name: burn
asgn

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for currentPrice

Name: currentPrice Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_71(bool) = priceLower_1 < currentPrice_1
has variable
[i] TMP_71 cleared
clearing ir...?
TMP_72(bool) = currentPrice_1 < priceUpper_1
has variable
[i] TMP_72 cleared
clearing ir...?
TMP_73(bool) = TMP_71 && TMP_72
has variable
[i] TMP_73 cleared
clearing ir...?
CONDITION TMP_73
typecheckig node...
TMP_71(bool) = priceLower_1 < currentPrice_1
Function name: burn
testing lt...
lnorm: 0 rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for TMP_71

Name: TMP_71 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_72(bool) = currentPrice_1 < priceUpper_1
Function name: burn
testing lt...
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0
[i]Type for TMP_72

Name: TMP_72 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_73(bool) = TMP_71 && TMP_72
Function name: burn
[i]Type for TMP_73

Name: TMP_73 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_73
Condition...
Conidtion: 
TMP_73
TMP_73
clearning node...
clearing ir...?
liquidity_9(uint128) = liquidity_8 (c)- amount_1
has variable
typecheckig node...
liquidity_9(uint128) = liquidity_8 (c)- amount_1
Function name: burn
lnorm: u rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amount Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: amount Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: liquidity Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_74 = CONVERT priceLower_1 to uint256
has variable
[i] TMP_74 cleared
clearing ir...?
TMP_75 = CONVERT priceUpper_1 to uint256
has variable
[i] TMP_75 cleared
clearing ir...?
TMP_76 = CONVERT currentPrice_1 to uint256
has variable
[i] TMP_76 cleared
clearing ir...?
TMP_77 = CONVERT amount_1 to uint256
has variable
[i] TMP_77 cleared
clearing ir...?
TUPLE_5(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(TMP_74,TMP_75,TMP_76,TMP_77)
has variable
clearing ir...?
amount0_1(uint256)= UNPACK TUPLE_5 index: 0 
has variable
[i] amount0 cleared
clearing ir...?
amount1_1(uint256)= UNPACK TUPLE_5 index: 1 
has variable
[i] amount1 cleared
typecheckig node...
TMP_74 = CONVERT priceLower_1 to uint256
Function name: burn

Name: priceLower Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_74 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_74

Name: TMP_74 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_75 = CONVERT priceUpper_1 to uint256
Function name: burn

Name: priceUpper Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_75 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_75

Name: TMP_75 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_76 = CONVERT currentPrice_1 to uint256
Function name: burn

Name: currentPrice Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_76 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_76

Name: TMP_76 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_77 = CONVERT amount_1 to uint256
Function name: burn

Name: amount Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_77 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_77

Name: TMP_77 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TUPLE_5(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(TMP_74,TMP_75,TMP_76,TMP_77)
Function name: burn
Internal call...
_getAmountsForLiquidity
TMP_74
TMP_75
TMP_76
TMP_77
Function: _getAmountsForLiquidity
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], 0]
cur_param: [[-1], [-1], 0, None, [], 0]
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 0, None, [], 0]
[[-1], [-1], 0, None, [], 0]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _getAmountsForLiquidity
Function Visibility: internal
clearning node...
clearing ir...?
priceLower_1(uint256) := ϕ(['TMP_74', 'priceLower_1'])
has variable
[i] priceLower cleared
clearing ir...?
priceUpper_1(uint256) := ϕ(['priceUpper_1', 'TMP_75'])
has variable
[i] priceUpper cleared
clearing ir...?
currentPrice_1(uint256) := ϕ(['currentPrice_1', 'TMP_76'])
has variable
[i] currentPrice cleared
clearing ir...?
liquidityAmount_1(uint256) := ϕ(['TMP_77', '_liquidity_1'])
has variable
[i] liquidityAmount cleared
typecheckig node...
priceLower_1(uint256) := ϕ(['TMP_74', 'priceLower_1'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
priceUpper_1(uint256) := ϕ(['priceUpper_1', 'TMP_75'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
currentPrice_1(uint256) := ϕ(['currentPrice_1', 'TMP_76'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidityAmount_1(uint256) := ϕ(['TMP_77', '_liquidity_1'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_180(bool) = priceUpper_1 <= currentPrice_1
has variable
[i] TMP_180 cleared
clearing ir...?
CONDITION TMP_180
typecheckig node...
TMP_180(bool) = priceUpper_1 <= currentPrice_1
Function name: _getAmountsForLiquidity
testing lt...
lnorm: u rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for TMP_180

Name: TMP_180 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_180
Condition...
Conidtion: 
TMP_180
TMP_180
clearning node...
clearing ir...?
TMP_183(bool) = currentPrice_1 <= priceLower_1
has variable
[i] TMP_183 cleared
clearing ir...?
CONDITION TMP_183
typecheckig node...
TMP_183(bool) = currentPrice_1 <= priceLower_1
Function name: _getAmountsForLiquidity
testing lt...
lnorm: u rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0
[i]Type for TMP_183

Name: TMP_183 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_183
Condition...
Conidtion: 
TMP_183
TMP_183
clearning node...
clearing ir...?
TMP_181(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
has variable
[i] TMP_181 cleared
clearing ir...?
TMP_182 = CONVERT TMP_181 to uint128
has variable
[i] TMP_182 cleared
clearing ir...?
token1amount_3(uint128) := TMP_182(uint128)
has variable
[i] token1amount cleared
typecheckig node...
TMP_181(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Function name: _getAmountsForLiquidity
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
liquidityAmount
priceLower
priceUpper
True
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_182 = CONVERT TMP_181 to uint128
Function name: _getAmountsForLiquidity

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_182 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_182

Name: TMP_182 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token1amount_3(uint128) := TMP_182(uint128)
Function name: _getAmountsForLiquidity
asgn

Name: TMP_182 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_186(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'currentPrice_1', 'priceUpper_1', 'True'] 
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187 = CONVERT TMP_186 to uint128
has variable
[i] TMP_187 cleared
clearing ir...?
token0amount_2(uint128) := TMP_187(uint128)
has variable
[i] token0amount cleared
typecheckig node...
TMP_186(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'currentPrice_1', 'priceUpper_1', 'True'] 
Function name: _getAmountsForLiquidity
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
liquidityAmount
currentPrice
priceUpper
True
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_187 = CONVERT TMP_186 to uint128
Function name: _getAmountsForLiquidity

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_187 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_187

Name: TMP_187 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token0amount_2(uint128) := TMP_187(uint128)
Function name: _getAmountsForLiquidity
asgn

Name: TMP_187 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
token1amount_4(uint128) := ϕ(['token1amount_3', 'token1amount_0'])
has variable
[i] token1amount cleared
typecheckig node...
token1amount_4(uint128) := ϕ(['token1amount_3', 'token1amount_0'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_184(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
has variable
[i] TMP_184 cleared
clearing ir...?
TMP_185 = CONVERT TMP_184 to uint128
has variable
[i] TMP_185 cleared
clearing ir...?
token0amount_1(uint128) := TMP_185(uint128)
has variable
[i] token0amount cleared
typecheckig node...
TMP_184(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Function name: _getAmountsForLiquidity
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
liquidityAmount
priceLower
priceUpper
True
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_185 = CONVERT TMP_184 to uint128
Function name: _getAmountsForLiquidity

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_185 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_185

Name: TMP_185 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token0amount_1(uint128) := TMP_185(uint128)
Function name: _getAmountsForLiquidity
asgn

Name: TMP_185 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_188(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'currentPrice_1', 'True'] 
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189 = CONVERT TMP_188 to uint128
has variable
[i] TMP_189 cleared
clearing ir...?
token1amount_1(uint128) := TMP_189(uint128)
has variable
[i] token1amount cleared
typecheckig node...
TMP_188(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'currentPrice_1', 'True'] 
Function name: _getAmountsForLiquidity
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
liquidityAmount
priceLower
currentPrice
True
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_189 = CONVERT TMP_188 to uint128
Function name: _getAmountsForLiquidity

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_189 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_189

Name: TMP_189 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token1amount_1(uint128) := TMP_189(uint128)
Function name: _getAmountsForLiquidity
asgn

Name: TMP_189 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
token0amount_3(uint128) := ϕ(['token0amount_1', 'token0amount_2'])
has variable
[i] token0amount cleared
clearing ir...?
token1amount_2(uint128) := ϕ(['token1amount_0', 'token1amount_1'])
has variable
[i] token1amount cleared
typecheckig node...
token0amount_3(uint128) := ϕ(['token0amount_1', 'token0amount_2'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token1amount_2(uint128) := ϕ(['token1amount_0', 'token1amount_1'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
RETURN token0amount_0,token1amount_4
typecheckig node...
RETURN token0amount_0,token1amount_4
RETURN

Name: token0amount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
WORKLIST iteration 0 for function call "_getAmountsForLiquidity":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _getAmountsForLiquidity

Name: token0amount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
___

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
___
[i]Type for TUPLE_5

Name: TUPLE_5 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount0_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: burn
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
amount1_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: burn
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_78 = CONVERT amount_1 to int128
has variable
[i] TMP_78 cleared
clearing ir...?
TMP_79(int128) = 0 (c)- TMP_78
has variable
[i] TMP_79 cleared
clearing ir...?
TUPLE_6(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(msg.sender,lower_1,upper_1,TMP_79)
has variable
clearing ir...?
amount0fees_1(uint256)= UNPACK TUPLE_6 index: 0 
has variable
[i] amount0fees cleared
clearing ir...?
amount1fees_1(uint256)= UNPACK TUPLE_6 index: 1 
has variable
[i] amount1fees cleared
typecheckig node...
TMP_78 = CONVERT amount_1 to int128
Function name: burn

Name: amount Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_78 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_78

Name: TMP_78 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_79(int128) = 0 (c)- TMP_78
Function name: burn
val: 0
val: 0
lnorm: 0 rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_78 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_78 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_79 Function: burn
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_79

Name: TMP_79 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TUPLE_6(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(msg.sender,lower_1,upper_1,TMP_79)
Function name: burn
Internal call...
_updatePosition
msg.sender
lower
upper
TMP_79
Function: _updatePosition
ic
msg.sender
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, 'MANAGER', [], -1]
-100
Parameter length: 1
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _updatePosition
Function Visibility: internal
clearning node...
clearing ir...?
owner_1(address) := ϕ(['REF_24', 'msg.sender'])
has variable
[i] owner cleared
clearing ir...?
lower_1(int24) := ϕ(['REF_25', 'lower_1', 'lower_1'])
has variable
[i] lower cleared
clearing ir...?
upper_1(int24) := ϕ(['upper_1', 'upper_1', 'REF_26'])
has variable
[i] upper cleared
clearing ir...?
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
has variable
[i] amount cleared
clearing ir...?
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_0'])
has variable
clearing ir...?
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_4'])
has variable
typecheckig node...
owner_1(address) := ϕ(['REF_24', 'msg.sender'])
Function name: _updatePosition
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: MANAGER
Fields: 
Finance Type: undef
done.
lower_1(int24) := ϕ(['REF_25', 'lower_1', 'lower_1'])
Function name: _updatePosition
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1(int24) := ϕ(['upper_1', 'upper_1', 'REF_26'])
Function name: _updatePosition
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Function name: _updatePosition
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_0'])
Function name: _updatePosition
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_4'])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
has variable
clearing ir...?
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
has variable
clearing ir...?
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
has variable
clearing ir...?
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
has variable
[i] position cleared
typecheckig node...
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
Function name: _updatePosition
INDEX

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_144

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
Function name: _updatePosition
INDEX

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_145

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
Function name: _updatePosition
INDEX

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_146

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
Function name: _updatePosition
asgn

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef

Name: position Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
has variable
clearing ir...?
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
has variable
[i] growth0current cleared
clearing ir...?
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
has variable
[i] growth1current cleared
typecheckig node...
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
Function name: _updatePosition
Internal call...
rangeFeeGrowth
lower
upper
Function: rangeFeeGrowth
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
0
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
Function name: _updatePosition
Reading tuple TUPLE_12 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, 110)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
Function name: _updatePosition
Reading tuple TUPLE_12 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, 110)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
has variable
clearing ir...?
TMP_202(uint256) = growth0current_1 (c)- REF_148
has variable
[i] TMP_202 cleared
clearing ir...?
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
has variable
[i] TMP_203 cleared
clearing ir...?
amount0fees_1(uint256) := TMP_203(uint256)
has variable
[i] amount0fees cleared
typecheckig node...
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside0Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
TMP_202(uint256) = growth0current_1 (c)- REF_148
Function name: _updatePosition
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 10, Left type: 110
Final dest type: 110

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: TMP_202 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Function name: _updatePosition
Library Call: mulDiv
hlc contract name: FullMath func_name: mulDiv
('t', [1, 2], [3], 0, None, 11)
TMP_202
REF_149
340282366920938463463374607431768211456
wfc len: 1
Check copy_toekn_tuple
([-1, -1], [-1, -1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
amount0fees_1(uint256) := TMP_203(uint256)
Function name: _updatePosition
asgn

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
clearning node...
clearing ir...?
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
has variable
clearing ir...?
TMP_204(uint256) = growth1current_1 (c)- REF_151
has variable
[i] TMP_204 cleared
clearing ir...?
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
has variable
[i] TMP_205 cleared
clearing ir...?
amount1fees_1(uint256) := TMP_205(uint256)
has variable
[i] amount1fees cleared
typecheckig node...
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside1Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
TMP_204(uint256) = growth1current_1 (c)- REF_151
Function name: _updatePosition
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 10, Left type: 110
Final dest type: 110

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: TMP_204 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Function name: _updatePosition
Library Call: mulDiv
hlc contract name: FullMath func_name: mulDiv
('t', [1, 2], [3], 0, None, 11)
TMP_204
REF_152
340282366920938463463374607431768211456
wfc len: 1
Check copy_toekn_tuple
([-1, -1], [-1, -1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
amount1fees_1(uint256) := TMP_205(uint256)
Function name: _updatePosition
asgn

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
clearning node...
clearing ir...?
TMP_206(bool) = amount_1 < 0
has variable
[i] TMP_206 cleared
clearing ir...?
CONDITION TMP_206
typecheckig node...
TMP_206(bool) = amount_1 < 0
Function name: _updatePosition
testing lt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_206
Condition...
Conidtion: 
TMP_206
TMP_206
clearning node...
clearing ir...?
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_2 (-> ['positions'])"])
has variable
[i] position cleared
typecheckig node...
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_2 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_209(bool) = amount_1 > 0
has variable
[i] TMP_209 cleared
clearing ir...?
CONDITION TMP_209
typecheckig node...
TMP_209(bool) = amount_1 > 0
Function name: _updatePosition
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_209
Condition...
Conidtion: 
TMP_209
TMP_209
clearning node...
clearing ir...?
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_210 = CONVERT amount_1 to uint128
has variable
[i] TMP_210 cleared
clearing ir...?
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210
has variable
clearing ir...?
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
has variable
typecheckig node...
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_210 = CONVERT amount_1 to uint128
Function name: _updatePosition

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_210 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210
Function name: _updatePosition

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: 0
Final dest type: 0

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_207(int128) = 0 (c)- amount_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208 = CONVERT TMP_207 to uint128
has variable
[i] TMP_208 cleared
clearing ir...?
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
has variable
clearing ir...?
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
has variable
typecheckig node...
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_207(int128) = 0 (c)- amount_1
Function name: _updatePosition
val: 0
val: 0
lnorm: 0 rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_207 Function: _updatePosition
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_208 = CONVERT TMP_207 to uint128
Function name: _updatePosition

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
Function name: _updatePosition
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: 0
Final dest type: 0

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_4 (-> ['positions'])"])
has variable
[i] position cleared
typecheckig node...
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_4 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
typecheckig node...
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
Function name: _updatePosition
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
has variable
clearing ir...?
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
has variable
clearing ir...?
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
has variable
typecheckig node...
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside0Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
Function name: _updatePosition
asgn

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
has variable
clearing ir...?
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
has variable
clearing ir...?
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
has variable
typecheckig node...
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside1Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
Function name: _updatePosition
asgn

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amount0fees_1,amount1fees_1
typecheckig node...
RETURN amount0fees_1,amount1fees_1
RETURN

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
WORKLIST iteration 0 for function call "_updatePosition":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _updatePosition

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
___

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
___
[i]Type for TUPLE_6

Name: TUPLE_6 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount0fees_1(uint256)= UNPACK TUPLE_6 index: 0 
Function name: burn
Reading tuple TUPLE_6 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount0fees

Name: amount0fees Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
amount1fees_1(uint256)= UNPACK TUPLE_6 index: 1 
Function name: burn
Reading tuple TUPLE_6 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount1fees

Name: amount1fees Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
clearning node...
clearing ir...?
amount0_2(uint256) = amount0_1 + amount0fees_1
has variable
[i] amount0 cleared
typecheckig node...
amount0_2(uint256) = amount0_1 + amount0fees_1
Function name: burn

Name: amount0 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Finance type key: (0, 11)
Error with amount0 in function burn
Error with: amount0 in function burn
[<slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0dcf310>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d59550>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d81550>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d81fa0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d8a3d0>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d8abe0>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7fadf0d44a00>]

Name: amount0fees Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount0 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
amount1_2(uint256) = amount1_1 + amount1fees_1
has variable
[i] amount1 cleared
typecheckig node...
amount1_2(uint256) = amount1_1 + amount1fees_1
Function name: burn

Name: amount1 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Finance type key: (0, 11)
Error with amount1 in function burn
Error with: amount1 in function burn
[<slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0dcf310>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d59550>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d81550>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d81fa0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d8a3d0>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d8abe0>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7fadf0d44a00>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7fadf0d44b50>]

Name: amount1fees Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount1 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_81 = new IPool.TokenAmount[](2)
clearing ir...?
withdrawnAmounts_1(IPool.TokenAmount[]) := TMP_81(IPool.TokenAmount)
has variable
[i] withdrawnAmounts cleared
typecheckig node...
TMP_81 = new IPool.TokenAmount[](2)
[i]Type for TMP_81

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
withdrawnAmounts_1(IPool.TokenAmount[]) := TMP_81(IPool.TokenAmount)
Function name: burn
asgn

Name: TMP_81 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
withdrawnAmounts_1(IPool.TokenAmount[]) := TMP_81(IPool.TokenAmount)
XXXXX
clearning node...
clearing ir...?
REF_57(IPool.TokenAmount) -> withdrawnAmounts_1[0]
has variable
clearing ir...?
TMP_82 = new TokenAmount(token0_14,amount0_2)
clearing ir...?
withdrawnAmounts_2(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_1'])
has variable
[i] withdrawnAmounts cleared
clearing ir...?
REF_57 (->withdrawnAmounts_2) := TMP_82(IPool.TokenAmount)
has variable
typecheckig node...
REF_57(IPool.TokenAmount) -> withdrawnAmounts_1[0]
Function name: burn
INDEX

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: burn
withdrawnAmounts
[i]Type for REF_57

Name: withdrawnAmounts Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_57(IPool.TokenAmount) -> withdrawnAmounts_1[0]
XXXXX
TMP_82 = new TokenAmount(token0_14,amount0_2)
[i]Type for TMP_82

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
withdrawnAmounts_2(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_1'])
Function name: burn
Phi
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_57 (->withdrawnAmounts_2) := TMP_82(IPool.TokenAmount)
Function name: burn
asgn

Name: TMP_82 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_57 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_57

Name: REF_57 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_57 (->withdrawnAmounts_2) := TMP_82(IPool.TokenAmount)
XXXXX
clearning node...
clearing ir...?
REF_58(IPool.TokenAmount) -> withdrawnAmounts_2[1]
has variable
clearing ir...?
TMP_83 = new TokenAmount(token1_15,amount1_2)
clearing ir...?
withdrawnAmounts_3(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_2'])
has variable
[i] withdrawnAmounts cleared
clearing ir...?
REF_58 (->withdrawnAmounts_3) := TMP_83(IPool.TokenAmount)
has variable
typecheckig node...
REF_58(IPool.TokenAmount) -> withdrawnAmounts_2[1]
Function name: burn
INDEX

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: burn
withdrawnAmounts
[i]Type for REF_58

Name: withdrawnAmounts Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_58(IPool.TokenAmount) -> withdrawnAmounts_2[1]
XXXXX
TMP_83 = new TokenAmount(token1_15,amount1_2)
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
withdrawnAmounts_3(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_2'])
Function name: burn
Phi
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_58 (->withdrawnAmounts_3) := TMP_83(IPool.TokenAmount)
Function name: burn
asgn

Name: TMP_83 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_58 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_58

Name: REF_58 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_58 (->withdrawnAmounts_3) := TMP_83(IPool.TokenAmount)
XXXXX
clearning node...
clearing ir...?
TMP_84 = CONVERT amount0fees_1 to uint128
has variable
[i] TMP_84 cleared
clearing ir...?
reserve0_16(uint128) = reserve0_15 - TMP_84
has variable
typecheckig node...
TMP_84 = CONVERT amount0fees_1 to uint128
Function name: burn

Name: amount0fees Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_84 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_84

Name: TMP_84 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
reserve0_16(uint128) = reserve0_15 - TMP_84
Function name: burn
lnorm: u rnorm: 0
Finance type key: (30, 11)
Error with reserve0 in function burn
Error with: reserve0 in function burn
[<slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0dcf310>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d59550>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d81550>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d81fa0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d8a3d0>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d8abe0>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7fadf0d44a00>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7fadf0d44b50>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d4e7f0>]

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_84 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_84 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: reserve0 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for reserve0

Name: reserve0 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_85 = CONVERT amount1fees_1 to uint128
has variable
[i] TMP_85 cleared
clearing ir...?
reserve1_17(uint128) = reserve1_16 - TMP_85
has variable
typecheckig node...
TMP_85 = CONVERT amount1fees_1 to uint128
Function name: burn

Name: amount1fees Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_85 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_85

Name: TMP_85 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
reserve1_17(uint128) = reserve1_16 - TMP_85
Function name: burn
lnorm: u rnorm: 0
Finance type key: (30, 11)
Error with reserve1 in function burn
Error with: reserve1 in function burn
[<slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0dcf310>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d59550>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d81550>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d81fa0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d8a3d0>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d8abe0>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7fadf0d44a00>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7fadf0d44b50>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d4e7f0>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d4ea60>]

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_85 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_85 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: reserve1 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for reserve1

Name: reserve1 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, ConcentratedLiquidityPool._transferBothTokens(address,uint256,uint256,bool)(recipient_1,amount0_2,amount1_2,unwrapBento_1)
typecheckig node...
INTERNAL_CALL, ConcentratedLiquidityPool._transferBothTokens(address,uint256,uint256,bool)(recipient_1,amount0_2,amount1_2,unwrapBento_1)
Internal call...
_transferBothTokens
recipient
amount0
amount1
unwrapBento
Function: _transferBothTokens
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _transferBothTokens
Function Visibility: internal
clearning node...
clearing ir...?
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
has variable
[i] to cleared
clearing ir...?
shares0_1(uint256) := ϕ(['amount0_2', 'amount0fees_1'])
has variable
[i] shares0 cleared
clearing ir...?
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
has variable
[i] shares1 cleared
clearing ir...?
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
has variable
[i] unwrapBento cleared
clearing ir...?
bento_7(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token0_26(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_28(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
Function name: _transferBothTokens
Phi
[i]Type for to

Name: to Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: to
Fields: 
Finance Type: undef
done.
shares0_1(uint256) := ϕ(['amount0_2', 'amount0fees_1'])
Function name: _transferBothTokens
Phi
[i]Type for shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
Function name: _transferBothTokens
Phi
[i]Type for shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
Function name: _transferBothTokens
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
bento_7(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token0_26(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _transferBothTokens
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_28(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION unwrapBento_1
typecheckig node...
CONDITION unwrapBento_1
Condition...
Conidtion: 
unwrapBento_1
unwrapBento_1
clearning node...
clearing ir...?
TMP_218 = CONVERT this to address
has variable
[i] TMP_218 cleared
clearing ir...?
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
has variable
clearing ir...?
bento_10(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token0_28(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_31(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
TMP_218 = CONVERT this to address
Function name: _transferBothTokens
[i]Type for TMP_218

Name: TMP_218 Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
Function name: _transferBothTokens
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_14
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token0
TMP_218
to
0
shares0
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_14

Name: TUPLE_14 Function: _transferBothTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_10(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token0_28(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _transferBothTokens
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_31(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_219 = CONVERT this to address
has variable
[i] TMP_219 cleared
clearing ir...?
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
has variable
clearing ir...?
bento_11(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_10', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token1_32(address) := ϕ(['token1_11', 'token1_1', 'token1_31', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
TMP_219 = CONVERT this to address
Function name: _transferBothTokens
[i]Type for TMP_219

Name: TMP_219 Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
Function name: _transferBothTokens
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_15
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token1
TMP_219
to
0
shares1
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_15

Name: TUPLE_15 Function: _transferBothTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_11(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_10', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token1_32(address) := ϕ(['token1_11', 'token1_1', 'token1_31', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_220 = CONVERT this to address
has variable
[i] TMP_220 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
clearing ir...?
bento_8(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_7', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token0_27(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_26', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_29(address) := ϕ(['token1_11', 'token1_1', 'token1_28', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
TMP_220 = CONVERT this to address
Function name: _transferBothTokens
[i]Type for TMP_220

Name: TMP_220 Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_8(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_7', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token0_27(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_26', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _transferBothTokens
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_29(address) := ϕ(['token1_11', 'token1_1', 'token1_28', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_222 = CONVERT this to address
has variable
[i] TMP_222 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
clearing ir...?
bento_9(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_8', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token1_30(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_29', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
TMP_222 = CONVERT this to address
Function name: _transferBothTokens
[i]Type for TMP_222

Name: TMP_222 Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_9(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_8', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token1_30(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_29', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_transferBothTokens":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _transferBothTokens
done.
clearning node...
clearing ir...?
TMP_87(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.remove(mapping(int24 => Ticks.Tick),int24,int24,uint128,int24), arguments:['ticks_13', 'lower_1', 'upper_1', 'amount_1', 'nearestTick_13'] 
has variable
[i] TMP_87 cleared
clearing ir...?
nearestTick_14(int24) := TMP_87(int24)
has variable
typecheckig node...
TMP_87(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.remove(mapping(int24 => Ticks.Tick),int24,int24,uint128,int24), arguments:['ticks_13', 'lower_1', 'upper_1', 'amount_1', 'nearestTick_13'] 
Function name: burn
Library Call: remove
hlc contract name: Ticks func_name: remove
wfc len: 0
COPIED
[i]Type for TMP_87

Name: TMP_87 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_14(int24) := TMP_87(int24)
Function name: burn
asgn

Name: TMP_87 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nearestTick Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nearestTick

Name: nearestTick Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
Emit Burn(msg.sender,amount0_2,amount1_2,recipient_1)
typecheckig node...
Emit Burn(msg.sender,amount0_2,amount1_2,recipient_1)
WORKLIST iteration 0 for function call "burn":
 New undefined nodes- 3
 Old undefined nodes- 0
typecheckig node...
token0_11(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: burn
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_12(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: burn
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidity_7(uint128) := ϕ(['liquidity_4', 'liquidity_3', 'liquidity_5', 'liquidity_0', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9'])
Function name: burn
Phi
[i]Type for liquidity

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
reserve0_12(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: burn
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve1_13(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: burn
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price_4(uint160) := ϕ(['price_0', 'price_8', 'price_3', 'price_1', 'price_5'])
Function name: burn
Phi
[i]Type for price

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_9(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: burn
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_9(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: burn
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Internal call...
lock
Function: lock
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
TUPLE_4(int24,int24,uint128,address,bool) = SOLIDITY_CALL abi.decode()(data_1(int24,int24,uint128,address,bool))
[i]Type for TUPLE_4

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lower_1(int24)= UNPACK TUPLE_4 index: 0 
Function name: burn
Reading tuple TUPLE_4 index 0
Finding type for lower...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: lower Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for lower

Name: lower Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1(int24)= UNPACK TUPLE_4 index: 1 
Function name: burn
Reading tuple TUPLE_4 index 1
Finding type for upper...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: upper Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for upper

Name: upper Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(uint128)= UNPACK TUPLE_4 index: 2 
Function name: burn
Reading tuple TUPLE_4 index 2
Finding type for amount...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 0)
----
Type: uint128
uint128
Final Type: uint128

Name: amount Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[*]Type fetched successfully
[i]Type for amount

Name: amount Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
recipient_1(address)= UNPACK TUPLE_4 index: 3 
Function name: burn
Reading tuple TUPLE_4 index 3
Finding type for recipient...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: recipient Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for recipient

Name: recipient Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool)= UNPACK TUPLE_4 index: 4 
Function name: burn
Reading tuple TUPLE_4 index 4
Finding type for unwrapBento...
bool
SKIP bool
[i]Type for unwrapBento

Name: unwrapBento Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_69(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['lower_1'] 
Function name: burn
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
lower
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_69

Name: TMP_69 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
priceLower_1(uint160) := TMP_69(uint160)
Function name: burn
asgn

Name: TMP_69 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: priceLower Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for priceLower

Name: priceLower Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
TMP_70(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['upper_1'] 
Function name: burn
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
upper
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_70

Name: TMP_70 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
priceUpper_1(uint160) := TMP_70(uint160)
Function name: burn
asgn

Name: TMP_70 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: priceUpper Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for priceUpper

Name: priceUpper Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
currentPrice_1(uint160) := price_5(uint160)
Function name: burn
asgn

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for currentPrice

Name: currentPrice Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_71(bool) = priceLower_1 < currentPrice_1
Function name: burn
testing lt...
lnorm: 0 rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for TMP_71

Name: TMP_71 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_72(bool) = currentPrice_1 < priceUpper_1
Function name: burn
testing lt...
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0
[i]Type for TMP_72

Name: TMP_72 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_73(bool) = TMP_71 && TMP_72
Function name: burn
[i]Type for TMP_73

Name: TMP_73 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_73
Condition...
Conidtion: 
TMP_73
TMP_73
typecheckig node...
liquidity_9(uint128) = liquidity_8 (c)- amount_1
Function name: burn
lnorm: u rnorm: u
Finance type key: (0, 0)
Func: sub
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: 0
Final dest type: 0

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: amount Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: amount Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: liquidity Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for liquidity

Name: liquidity Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
TMP_74 = CONVERT priceLower_1 to uint256
Function name: burn

Name: priceLower Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_74 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_74

Name: TMP_74 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_75 = CONVERT priceUpper_1 to uint256
Function name: burn

Name: priceUpper Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_75 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_75

Name: TMP_75 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_76 = CONVERT currentPrice_1 to uint256
Function name: burn

Name: currentPrice Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_76 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_76

Name: TMP_76 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_77 = CONVERT amount_1 to uint256
Function name: burn

Name: amount Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_77 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_77

Name: TMP_77 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TUPLE_5(uint128,uint128) = INTERNAL_CALL, ConcentratedLiquidityPool._getAmountsForLiquidity(uint256,uint256,uint256,uint256)(TMP_74,TMP_75,TMP_76,TMP_77)
Function name: burn
Internal call...
_getAmountsForLiquidity
TMP_74
TMP_75
TMP_76
TMP_77
Function: _getAmountsForLiquidity
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, None, [], 0]
cur_param: [[-1], [-1], 0, None, [], 0]
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 0, None, [], 0]
[[-1], [-1], 0, None, [], 0]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _getAmountsForLiquidity
Function Visibility: internal
clearning node...
clearing ir...?
priceLower_1(uint256) := ϕ(['TMP_74', 'priceLower_1'])
has variable
[i] priceLower cleared
clearing ir...?
priceUpper_1(uint256) := ϕ(['priceUpper_1', 'TMP_75'])
has variable
[i] priceUpper cleared
clearing ir...?
currentPrice_1(uint256) := ϕ(['currentPrice_1', 'TMP_76'])
has variable
[i] currentPrice cleared
clearing ir...?
liquidityAmount_1(uint256) := ϕ(['TMP_77', '_liquidity_1'])
has variable
[i] liquidityAmount cleared
typecheckig node...
priceLower_1(uint256) := ϕ(['TMP_74', 'priceLower_1'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for priceLower

Name: priceLower Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
priceUpper_1(uint256) := ϕ(['priceUpper_1', 'TMP_75'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for priceUpper

Name: priceUpper Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
currentPrice_1(uint256) := ϕ(['currentPrice_1', 'TMP_76'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for currentPrice

Name: currentPrice Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidityAmount_1(uint256) := ϕ(['TMP_77', '_liquidity_1'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for liquidityAmount

Name: liquidityAmount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_180(bool) = priceUpper_1 <= currentPrice_1
has variable
[i] TMP_180 cleared
clearing ir...?
CONDITION TMP_180
typecheckig node...
TMP_180(bool) = priceUpper_1 <= currentPrice_1
Function name: _getAmountsForLiquidity
testing lt...
lnorm: u rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for TMP_180

Name: TMP_180 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_180
Condition...
Conidtion: 
TMP_180
TMP_180
clearning node...
clearing ir...?
TMP_183(bool) = currentPrice_1 <= priceLower_1
has variable
[i] TMP_183 cleared
clearing ir...?
CONDITION TMP_183
typecheckig node...
TMP_183(bool) = currentPrice_1 <= priceLower_1
Function name: _getAmountsForLiquidity
testing lt...
lnorm: u rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0
[i]Type for TMP_183

Name: TMP_183 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_183
Condition...
Conidtion: 
TMP_183
TMP_183
clearning node...
clearing ir...?
TMP_181(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
has variable
[i] TMP_181 cleared
clearing ir...?
TMP_182 = CONVERT TMP_181 to uint128
has variable
[i] TMP_182 cleared
clearing ir...?
token1amount_3(uint128) := TMP_182(uint128)
has variable
[i] token1amount cleared
typecheckig node...
TMP_181(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Function name: _getAmountsForLiquidity
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
liquidityAmount
priceLower
priceUpper
True
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_181

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_182 = CONVERT TMP_181 to uint128
Function name: _getAmountsForLiquidity

Name: TMP_181 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_182 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_182

Name: TMP_182 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token1amount_3(uint128) := TMP_182(uint128)
Function name: _getAmountsForLiquidity
asgn

Name: TMP_182 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_186(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'currentPrice_1', 'priceUpper_1', 'True'] 
has variable
[i] TMP_186 cleared
clearing ir...?
TMP_187 = CONVERT TMP_186 to uint128
has variable
[i] TMP_187 cleared
clearing ir...?
token0amount_2(uint128) := TMP_187(uint128)
has variable
[i] token0amount cleared
typecheckig node...
TMP_186(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'currentPrice_1', 'priceUpper_1', 'True'] 
Function name: _getAmountsForLiquidity
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
liquidityAmount
currentPrice
priceUpper
True
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_186

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_187 = CONVERT TMP_186 to uint128
Function name: _getAmountsForLiquidity

Name: TMP_186 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_187 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_187

Name: TMP_187 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token0amount_2(uint128) := TMP_187(uint128)
Function name: _getAmountsForLiquidity
asgn

Name: TMP_187 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
token1amount_4(uint128) := ϕ(['token1amount_3', 'token1amount_0'])
has variable
[i] token1amount cleared
typecheckig node...
token1amount_4(uint128) := ϕ(['token1amount_3', 'token1amount_0'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_184(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
has variable
[i] TMP_184 cleared
clearing ir...?
TMP_185 = CONVERT TMP_184 to uint128
has variable
[i] TMP_185 cleared
clearing ir...?
token0amount_1(uint128) := TMP_185(uint128)
has variable
[i] token0amount cleared
typecheckig node...
TMP_184(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'priceUpper_1', 'True'] 
Function name: _getAmountsForLiquidity
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
liquidityAmount
priceLower
priceUpper
True
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_184

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_185 = CONVERT TMP_184 to uint128
Function name: _getAmountsForLiquidity

Name: TMP_184 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_185 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_185

Name: TMP_185 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token0amount_1(uint128) := TMP_185(uint128)
Function name: _getAmountsForLiquidity
asgn

Name: TMP_185 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token0amount Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_188(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'currentPrice_1', 'True'] 
has variable
[i] TMP_188 cleared
clearing ir...?
TMP_189 = CONVERT TMP_188 to uint128
has variable
[i] TMP_189 cleared
clearing ir...?
token1amount_1(uint128) := TMP_189(uint128)
has variable
[i] token1amount cleared
typecheckig node...
TMP_188(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['liquidityAmount_1', 'priceLower_1', 'currentPrice_1', 'True'] 
Function name: _getAmountsForLiquidity
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
liquidityAmount
priceLower
currentPrice
True
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_188

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_189 = CONVERT TMP_188 to uint128
Function name: _getAmountsForLiquidity

Name: TMP_188 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_189 Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_189

Name: TMP_189 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token1amount_1(uint128) := TMP_189(uint128)
Function name: _getAmountsForLiquidity
asgn

Name: TMP_189 Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token1amount Function: _getAmountsForLiquidity
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
token0amount_3(uint128) := ϕ(['token0amount_1', 'token0amount_2'])
has variable
[i] token0amount cleared
clearing ir...?
token1amount_2(uint128) := ϕ(['token1amount_0', 'token1amount_1'])
has variable
[i] token1amount cleared
typecheckig node...
token0amount_3(uint128) := ϕ(['token0amount_1', 'token0amount_2'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for token0amount

Name: token0amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
token1amount_2(uint128) := ϕ(['token1amount_0', 'token1amount_1'])
Function name: _getAmountsForLiquidity
Phi
[i]Type for token1amount

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
RETURN token0amount_0,token1amount_4
typecheckig node...
RETURN token0amount_0,token1amount_4
RETURN

Name: token0amount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
WORKLIST iteration 0 for function call "_getAmountsForLiquidity":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _getAmountsForLiquidity

Name: token0amount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
___

Name: token1amount Function: _getAmountsForLiquidity
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
___
[i]Type for TUPLE_5

Name: TUPLE_5 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount0_1(uint256)= UNPACK TUPLE_5 index: 0 
Function name: burn
Reading tuple TUPLE_5 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
amount1_1(uint256)= UNPACK TUPLE_5 index: 1 
Function name: burn
Reading tuple TUPLE_5 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
typecheckig node...
typecheckig node...
TMP_78 = CONVERT amount_1 to int128
Function name: burn

Name: amount Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_78 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_78

Name: TMP_78 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_79(int128) = 0 (c)- TMP_78
Function name: burn
val: 0
val: 0
lnorm: 0 rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_78 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_78 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_79 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_79

Name: TMP_79 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TUPLE_6(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(msg.sender,lower_1,upper_1,TMP_79)
Function name: burn
Internal call...
_updatePosition
msg.sender
lower
upper
TMP_79
Function: _updatePosition
ic
msg.sender
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, 'MANAGER', [], -1]
-100
Parameter length: 1
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _updatePosition
Function Visibility: internal
clearning node...
clearing ir...?
owner_1(address) := ϕ(['REF_24', 'msg.sender'])
has variable
[i] owner cleared
clearing ir...?
lower_1(int24) := ϕ(['REF_25', 'lower_1', 'lower_1'])
has variable
[i] lower cleared
clearing ir...?
upper_1(int24) := ϕ(['upper_1', 'upper_1', 'REF_26'])
has variable
[i] upper cleared
clearing ir...?
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
has variable
[i] amount cleared
clearing ir...?
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_0'])
has variable
clearing ir...?
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_4'])
has variable
typecheckig node...
owner_1(address) := ϕ(['REF_24', 'msg.sender'])
Function name: _updatePosition
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: MANAGER
Fields: 
Finance Type: undef
done.
lower_1(int24) := ϕ(['REF_25', 'lower_1', 'lower_1'])
Function name: _updatePosition
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1(int24) := ϕ(['upper_1', 'upper_1', 'REF_26'])
Function name: _updatePosition
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Function name: _updatePosition
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_0'])
Function name: _updatePosition
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_4'])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
has variable
clearing ir...?
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
has variable
clearing ir...?
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
has variable
clearing ir...?
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
has variable
[i] position cleared
typecheckig node...
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
Function name: _updatePosition
INDEX

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_144

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
Function name: _updatePosition
INDEX

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_145

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
Function name: _updatePosition
INDEX

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_146

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
Function name: _updatePosition
asgn

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef

Name: position Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
has variable
clearing ir...?
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
has variable
[i] growth0current cleared
clearing ir...?
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
has variable
[i] growth1current cleared
typecheckig node...
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
Function name: _updatePosition
Internal call...
rangeFeeGrowth
lower
upper
Function: rangeFeeGrowth
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
0
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
Function name: _updatePosition
Reading tuple TUPLE_12 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, 110)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
Function name: _updatePosition
Reading tuple TUPLE_12 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, 110)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
has variable
clearing ir...?
TMP_202(uint256) = growth0current_1 (c)- REF_148
has variable
[i] TMP_202 cleared
clearing ir...?
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
has variable
[i] TMP_203 cleared
clearing ir...?
amount0fees_1(uint256) := TMP_203(uint256)
has variable
[i] amount0fees cleared
typecheckig node...
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside0Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
TMP_202(uint256) = growth0current_1 (c)- REF_148
Function name: _updatePosition
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 10, Left type: 110
Final dest type: 110

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: TMP_202 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Function name: _updatePosition
Library Call: mulDiv
hlc contract name: FullMath func_name: mulDiv
('t', [1, 2], [3], 0, None, 11)
TMP_202
REF_149
340282366920938463463374607431768211456
wfc len: 1
Check copy_toekn_tuple
([-1, -1], [-1, -1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
amount0fees_1(uint256) := TMP_203(uint256)
Function name: _updatePosition
asgn

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
clearning node...
clearing ir...?
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
has variable
clearing ir...?
TMP_204(uint256) = growth1current_1 (c)- REF_151
has variable
[i] TMP_204 cleared
clearing ir...?
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
has variable
[i] TMP_205 cleared
clearing ir...?
amount1fees_1(uint256) := TMP_205(uint256)
has variable
[i] amount1fees cleared
typecheckig node...
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside1Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
TMP_204(uint256) = growth1current_1 (c)- REF_151
Function name: _updatePosition
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 10, Left type: 110
Final dest type: 110

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: TMP_204 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Function name: _updatePosition
Library Call: mulDiv
hlc contract name: FullMath func_name: mulDiv
('t', [1, 2], [3], 0, None, 11)
TMP_204
REF_152
340282366920938463463374607431768211456
wfc len: 1
Check copy_toekn_tuple
([-1, -1], [-1, -1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
amount1fees_1(uint256) := TMP_205(uint256)
Function name: _updatePosition
asgn

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
clearning node...
clearing ir...?
TMP_206(bool) = amount_1 < 0
has variable
[i] TMP_206 cleared
clearing ir...?
CONDITION TMP_206
typecheckig node...
TMP_206(bool) = amount_1 < 0
Function name: _updatePosition
testing lt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_206
Condition...
Conidtion: 
TMP_206
TMP_206
clearning node...
clearing ir...?
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_2 (-> ['positions'])"])
has variable
[i] position cleared
typecheckig node...
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_2 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_209(bool) = amount_1 > 0
has variable
[i] TMP_209 cleared
clearing ir...?
CONDITION TMP_209
typecheckig node...
TMP_209(bool) = amount_1 > 0
Function name: _updatePosition
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_209
Condition...
Conidtion: 
TMP_209
TMP_209
clearning node...
clearing ir...?
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_210 = CONVERT amount_1 to uint128
has variable
[i] TMP_210 cleared
clearing ir...?
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210
has variable
clearing ir...?
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
has variable
typecheckig node...
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_210 = CONVERT amount_1 to uint128
Function name: _updatePosition

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_210 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210
Function name: _updatePosition

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: 0
Final dest type: 0

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_207(int128) = 0 (c)- amount_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208 = CONVERT TMP_207 to uint128
has variable
[i] TMP_208 cleared
clearing ir...?
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
has variable
clearing ir...?
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
has variable
typecheckig node...
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_207(int128) = 0 (c)- amount_1
Function name: _updatePosition
val: 0
val: 0
lnorm: 0 rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_207 Function: _updatePosition
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_208 = CONVERT TMP_207 to uint128
Function name: _updatePosition

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
Function name: _updatePosition
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: 0
Final dest type: 0

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_4 (-> ['positions'])"])
has variable
[i] position cleared
typecheckig node...
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_4 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
typecheckig node...
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
Function name: _updatePosition
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
has variable
clearing ir...?
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
has variable
clearing ir...?
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
has variable
typecheckig node...
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside0Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
Function name: _updatePosition
asgn

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
has variable
clearing ir...?
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
has variable
clearing ir...?
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
has variable
typecheckig node...
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside1Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
Function name: _updatePosition
asgn

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amount0fees_1,amount1fees_1
typecheckig node...
RETURN amount0fees_1,amount1fees_1
RETURN

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
WORKLIST iteration 0 for function call "_updatePosition":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _updatePosition

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
___

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
___
[i]Type for TUPLE_6

Name: TUPLE_6 Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount0fees_1(uint256)= UNPACK TUPLE_6 index: 0 
Function name: burn
Reading tuple TUPLE_6 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount0fees

Name: amount0fees Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
amount1fees_1(uint256)= UNPACK TUPLE_6 index: 1 
Function name: burn
Reading tuple TUPLE_6 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount1fees

Name: amount1fees Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
typecheckig node...
amount0_2(uint256) = amount0_1 + amount0fees_1
Function name: burn

Name: amount0 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Finance type key: (0, 11)

Name: amount0fees Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount0 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for amount0

Name: amount0 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
amount1_2(uint256) = amount1_1 + amount1fees_1
Function name: burn

Name: amount1 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Finance type key: (0, 11)

Name: amount1fees Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount1 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for amount1

Name: amount1 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_81 = new IPool.TokenAmount[](2)
[i]Type for TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
withdrawnAmounts_1(IPool.TokenAmount[]) := TMP_81(IPool.TokenAmount)
Function name: burn
asgn

Name: TMP_81 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
withdrawnAmounts_1(IPool.TokenAmount[]) := TMP_81(IPool.TokenAmount)
XXXXX
typecheckig node...
REF_57(IPool.TokenAmount) -> withdrawnAmounts_1[0]
Function name: burn
INDEX

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: burn
withdrawnAmounts
[i]Type for REF_57

Name: withdrawnAmounts Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_57(IPool.TokenAmount) -> withdrawnAmounts_1[0]
XXXXX
TMP_82 = new TokenAmount(token0_14,amount0_2)
[i]Type for TMP_82

Name: TMP_82 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
withdrawnAmounts_2(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_1'])
Function name: burn
Phi
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_57 (->withdrawnAmounts_2) := TMP_82(IPool.TokenAmount)
Function name: burn
asgn

Name: TMP_82 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_57 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_57

Name: REF_57 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_57 (->withdrawnAmounts_2) := TMP_82(IPool.TokenAmount)
XXXXX
typecheckig node...
REF_58(IPool.TokenAmount) -> withdrawnAmounts_2[1]
Function name: burn
INDEX

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: burn
withdrawnAmounts
[i]Type for REF_58

Name: withdrawnAmounts Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_58(IPool.TokenAmount) -> withdrawnAmounts_2[1]
XXXXX
TMP_83 = new TokenAmount(token1_15,amount1_2)
[i]Type for TMP_83

Name: TMP_83 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
withdrawnAmounts_3(IPool.TokenAmount[]) := ϕ(['withdrawnAmounts_2'])
Function name: burn
Phi
[i]Type for withdrawnAmounts

Name: withdrawnAmounts Function: burn
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_58 (->withdrawnAmounts_3) := TMP_83(IPool.TokenAmount)
Function name: burn
asgn

Name: TMP_83 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_58 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_58

Name: REF_58 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_58 (->withdrawnAmounts_3) := TMP_83(IPool.TokenAmount)
XXXXX
typecheckig node...
TMP_84 = CONVERT amount0fees_1 to uint128
Function name: burn

Name: amount0fees Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_84 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
[i]Type for TMP_84

Name: TMP_84 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
reserve0_16(uint128) = reserve0_15 - TMP_84
Function name: burn
lnorm: u rnorm: 0
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 11, Left type: -1
Final dest type: 11

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_84 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_84 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: reserve0 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
[i]Type for reserve0

Name: reserve0 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
typecheckig node...
TMP_85 = CONVERT amount1fees_1 to uint128
Function name: burn

Name: amount1fees Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_85 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
[i]Type for TMP_85

Name: TMP_85 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
reserve1_17(uint128) = reserve1_16 - TMP_85
Function name: burn
lnorm: u rnorm: 0
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 11, Left type: -1
Final dest type: 11

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_85 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_85 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: reserve1 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
[i]Type for reserve1

Name: reserve1 Function: burn
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
typecheckig node...
INTERNAL_CALL, ConcentratedLiquidityPool._transferBothTokens(address,uint256,uint256,bool)(recipient_1,amount0_2,amount1_2,unwrapBento_1)
Internal call...
_transferBothTokens
recipient
amount0
amount1
unwrapBento
Function: _transferBothTokens
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _transferBothTokens
Function Visibility: internal
clearning node...
clearing ir...?
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
has variable
[i] to cleared
clearing ir...?
shares0_1(uint256) := ϕ(['amount0_2', 'amount0fees_1'])
has variable
[i] shares0 cleared
clearing ir...?
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
has variable
[i] shares1 cleared
clearing ir...?
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
has variable
[i] unwrapBento cleared
clearing ir...?
bento_7(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token0_26(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_28(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
Function name: _transferBothTokens
Phi
[i]Type for to

Name: to Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: to
Fields: 
Finance Type: undef
done.
shares0_1(uint256) := ϕ(['amount0_2', 'amount0fees_1'])
Function name: _transferBothTokens
Phi
[i]Type for shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
Function name: _transferBothTokens
Phi
[i]Type for shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
Function name: _transferBothTokens
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
bento_7(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token0_26(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _transferBothTokens
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_28(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION unwrapBento_1
typecheckig node...
CONDITION unwrapBento_1
Condition...
Conidtion: 
unwrapBento_1
unwrapBento_1
clearning node...
clearing ir...?
TMP_218 = CONVERT this to address
has variable
[i] TMP_218 cleared
clearing ir...?
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
has variable
clearing ir...?
bento_10(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token0_28(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_31(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
TMP_218 = CONVERT this to address
Function name: _transferBothTokens
[i]Type for TMP_218

Name: TMP_218 Function: _transferBothTokens
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
Function name: _transferBothTokens
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_14
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token0
TMP_218
to
0
shares0
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_14

Name: TUPLE_14 Function: _transferBothTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_10(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token0_28(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _transferBothTokens
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_31(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_219 = CONVERT this to address
has variable
[i] TMP_219 cleared
clearing ir...?
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
has variable
clearing ir...?
bento_11(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_10', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token1_32(address) := ϕ(['token1_11', 'token1_1', 'token1_31', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
TMP_219 = CONVERT this to address
Function name: _transferBothTokens
[i]Type for TMP_219

Name: TMP_219 Function: _transferBothTokens
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
Function name: _transferBothTokens
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_15
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token1
TMP_219
to
0
shares1
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_15

Name: TUPLE_15 Function: _transferBothTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_11(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_10', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token1_32(address) := ϕ(['token1_11', 'token1_1', 'token1_31', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_220 = CONVERT this to address
has variable
[i] TMP_220 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
clearing ir...?
bento_8(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_7', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token0_27(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_26', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_29(address) := ϕ(['token1_11', 'token1_1', 'token1_28', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
TMP_220 = CONVERT this to address
Function name: _transferBothTokens
[i]Type for TMP_220

Name: TMP_220 Function: _transferBothTokens
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_8(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_7', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token0_27(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_26', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _transferBothTokens
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_29(address) := ϕ(['token1_11', 'token1_1', 'token1_28', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_222 = CONVERT this to address
has variable
[i] TMP_222 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
clearing ir...?
bento_9(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_8', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token1_30(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_29', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
TMP_222 = CONVERT this to address
Function name: _transferBothTokens
[i]Type for TMP_222

Name: TMP_222 Function: _transferBothTokens
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_9(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_8', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token1_30(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_29', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_transferBothTokens":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _transferBothTokens
done.
typecheckig node...
TMP_87(int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.remove(mapping(int24 => Ticks.Tick),int24,int24,uint128,int24), arguments:['ticks_13', 'lower_1', 'upper_1', 'amount_1', 'nearestTick_13'] 
Function name: burn
Library Call: remove
hlc contract name: Ticks func_name: remove
wfc len: 0
COPIED
[i]Type for TMP_87

Name: TMP_87 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_14(int24) := TMP_87(int24)
Function name: burn
asgn

Name: TMP_87 Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nearestTick Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nearestTick

Name: nearestTick Function: burn
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
Emit Burn(msg.sender,amount0_2,amount1_2,recipient_1)
WORKLIST iteration 1 for function call "burn":
 New undefined nodes- 3
 Old undefined nodes- 3
Saving return values for: burn

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: burnSingle
Function burnSingle not marked
Mark Iterations TRUE, proceeding anyway
Function name: burnSingle
Function Visibility (test): public

Finding type for ...
bytes
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_90(None) = SOLIDITY_CALL revert()()
typecheckig node...
TMP_90(None) = SOLIDITY_CALL revert()()
[i]Type for TMP_90

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "burnSingle":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: collect
Function name: collect
Function Visibility (test): public
lower
Finding type for lower...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: int24
int24
Final Type: int24

Name: lower Function: collect
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
upper
Finding type for upper...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: int24
int24
Final Type: int24

Name: upper Function: collect
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
recipient
Finding type for recipient...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: recipient Function: collect
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
unwrapBento
Finding type for unwrapBento...
bool
SKIP bool
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
reserve0_17(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
has variable
clearing ir...?
reserve1_18(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
has variable
typecheckig node...
reserve0_17(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: collect
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve1_18(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: collect
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
typecheckig node...
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Internal call...
lock
Function: lock
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
TUPLE_7(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(msg.sender,lower_1,upper_1,0)
has variable
clearing ir...?
amount0fees_1(uint256)= UNPACK TUPLE_7 index: 0 
has variable
[i] amount0fees cleared
clearing ir...?
amount1fees_1(uint256)= UNPACK TUPLE_7 index: 1 
has variable
[i] amount1fees cleared
typecheckig node...
TUPLE_7(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._updatePosition(address,int24,int24,int128)(msg.sender,lower_1,upper_1,0)
Function name: collect
Internal call...
_updatePosition
msg.sender
lower
upper
0
Function: _updatePosition
ic
msg.sender
val: 0
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 0, 'MANAGER', [], -1]
-100
Parameter length: 1
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _updatePosition
Function Visibility: internal
clearning node...
clearing ir...?
owner_1(address) := ϕ(['REF_24', 'msg.sender'])
has variable
[i] owner cleared
clearing ir...?
lower_1(int24) := ϕ(['REF_25', 'lower_1', 'lower_1'])
has variable
[i] lower cleared
clearing ir...?
upper_1(int24) := ϕ(['upper_1', 'upper_1', 'REF_26'])
has variable
[i] upper cleared
clearing ir...?
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
has variable
[i] amount cleared
clearing ir...?
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_0'])
has variable
clearing ir...?
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_4'])
has variable
typecheckig node...
owner_1(address) := ϕ(['REF_24', 'msg.sender'])
Function name: _updatePosition
Phi
[i]Type for owner

Name: owner Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: MANAGER
Fields: 
Finance Type: undef
done.
lower_1(int24) := ϕ(['REF_25', 'lower_1', 'lower_1'])
Function name: _updatePosition
Phi
[i]Type for lower

Name: lower Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1(int24) := ϕ(['upper_1', 'upper_1', 'REF_26'])
Function name: _updatePosition
Phi
[i]Type for upper

Name: upper Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount_1(int128) := ϕ(['TMP_79', 'TMP_30'])
Function name: _updatePosition
Phi
[i]Type for amount

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
MAX_TICK_LIQUIDITY_4(uint128) := ϕ(['MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_0'])
Function name: _updatePosition
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
positions_1(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(['positions_0', 'positions_4'])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
has variable
clearing ir...?
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
has variable
clearing ir...?
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
has variable
clearing ir...?
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
has variable
[i] position cleared
typecheckig node...
REF_144(mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))) -> positions_1[owner_1]
Function name: _updatePosition
INDEX

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_144

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_145(mapping(int24 => ConcentratedLiquidityPool.Position)) -> REF_144[lower_1]
Function name: _updatePosition
INDEX

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_145

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_146(ConcentratedLiquidityPool.Position) -> REF_145[upper_1]
Function name: _updatePosition
INDEX

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_146

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
position_1 (-> ['positions'])(ConcentratedLiquidityPool.Position) := REF_146(ConcentratedLiquidityPool.Position)
Function name: _updatePosition
asgn

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef

Name: position Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
has variable
clearing ir...?
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
has variable
[i] growth0current cleared
clearing ir...?
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
has variable
[i] growth1current cleared
typecheckig node...
TUPLE_12(uint256,uint256) = INTERNAL_CALL, ConcentratedLiquidityPool.rangeFeeGrowth(int24,int24)(lower_1,upper_1)
Function name: _updatePosition
Internal call...
rangeFeeGrowth
lower
upper
Function: rangeFeeGrowth
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
0
[i]Type for TUPLE_12

Name: TUPLE_12 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
growth0current_1(uint256)= UNPACK TUPLE_12 index: 0 
Function name: _updatePosition
Reading tuple TUPLE_12 index 0
Check copy_toekn_tuple
([-1], [-1], 'u', None, 110)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for growth0current

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
growth1current_1(uint256)= UNPACK TUPLE_12 index: 1 
Function name: _updatePosition
Reading tuple TUPLE_12 index 1
Check copy_toekn_tuple
([-1], [-1], 'u', None, 110)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for growth1current

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
has variable
clearing ir...?
TMP_202(uint256) = growth0current_1 (c)- REF_148
has variable
[i] TMP_202 cleared
clearing ir...?
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
has variable
[i] TMP_203 cleared
clearing ir...?
amount0fees_1(uint256) := TMP_203(uint256)
has variable
[i] amount0fees cleared
typecheckig node...
REF_148(uint256) -> position_1 (-> ['positions']).feeGrowthInside0Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside0Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_148

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
TMP_202(uint256) = growth0current_1 (c)- REF_148
Function name: _updatePosition
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 10, Left type: 110
Final dest type: 110

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: TMP_202 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_202

Name: TMP_202 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
REF_149(uint128) -> position_1 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_149

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_203(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_202', 'REF_149', '340282366920938463463374607431768211456'] 
Function name: _updatePosition
Library Call: mulDiv
hlc contract name: FullMath func_name: mulDiv
('t', [1, 2], [3], 0, None, 11)
TMP_202
REF_149
340282366920938463463374607431768211456
wfc len: 1
Check copy_toekn_tuple
([-1, -1], [-1, -1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_203

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
amount0fees_1(uint256) := TMP_203(uint256)
Function name: _updatePosition
asgn

Name: TMP_203 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount0fees Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for amount0fees

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
clearning node...
clearing ir...?
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
has variable
clearing ir...?
TMP_204(uint256) = growth1current_1 (c)- REF_151
has variable
[i] TMP_204 cleared
clearing ir...?
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
has variable
[i] TMP_205 cleared
clearing ir...?
amount1fees_1(uint256) := TMP_205(uint256)
has variable
[i] amount1fees cleared
typecheckig node...
REF_151(uint256) -> position_1 (-> ['positions']).feeGrowthInside1Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside1Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_151

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
TMP_204(uint256) = growth1current_1 (c)- REF_151
Function name: _updatePosition
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 10, Left type: 110
Final dest type: 110

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: TMP_204 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_204

Name: TMP_204 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
REF_152(uint128) -> position_1 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_152

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_205(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['TMP_204', 'REF_152', '340282366920938463463374607431768211456'] 
Function name: _updatePosition
Library Call: mulDiv
hlc contract name: FullMath func_name: mulDiv
('t', [1, 2], [3], 0, None, 11)
TMP_204
REF_152
340282366920938463463374607431768211456
wfc len: 1
Check copy_toekn_tuple
([-1, -1], [-1, -1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_205

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
amount1fees_1(uint256) := TMP_205(uint256)
Function name: _updatePosition
asgn

Name: TMP_205 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount1fees Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for amount1fees

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
clearning node...
clearing ir...?
TMP_206(bool) = amount_1 < 0
has variable
[i] TMP_206 cleared
clearing ir...?
CONDITION TMP_206
typecheckig node...
TMP_206(bool) = amount_1 < 0
Function name: _updatePosition
testing lt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_206

Name: TMP_206 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_206
Condition...
Conidtion: 
TMP_206
TMP_206
clearning node...
clearing ir...?
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_2 (-> ['positions'])"])
has variable
[i] position cleared
typecheckig node...
position_3 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_2 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_209(bool) = amount_1 > 0
has variable
[i] TMP_209 cleared
clearing ir...?
CONDITION TMP_209
typecheckig node...
TMP_209(bool) = amount_1 > 0
Function name: _updatePosition
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_209

Name: TMP_209 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_209
Condition...
Conidtion: 
TMP_209
TMP_209
clearning node...
clearing ir...?
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_210 = CONVERT amount_1 to uint128
has variable
[i] TMP_210 cleared
clearing ir...?
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210
has variable
clearing ir...?
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
has variable
typecheckig node...
REF_154(uint128) -> position_3 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_154

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_210 = CONVERT amount_1 to uint128
Function name: _updatePosition

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_210 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_210

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
position_4 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_3 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_154(-> position_4 (-> ['positions'])) = REF_154 (c)+ TMP_210
Function name: _updatePosition

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_210 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_154

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_154 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
positions_5(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_4 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_207(int128) = 0 (c)- amount_1
has variable
[i] TMP_207 cleared
clearing ir...?
TMP_208 = CONVERT TMP_207 to uint128
has variable
[i] TMP_208 cleared
clearing ir...?
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
has variable
clearing ir...?
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
has variable
typecheckig node...
REF_153(uint128) -> position_1 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_153

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_207(int128) = 0 (c)- amount_1
Function name: _updatePosition
val: 0
val: 0
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amount Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_207 Function: _updatePosition
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_207

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_208 = CONVERT TMP_207 to uint128
Function name: _updatePosition

Name: TMP_207 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_208 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_208

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
position_2 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_153(-> position_2 (-> ['positions'])) = REF_153 (c)- TMP_208
Function name: _updatePosition
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_208 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_153

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_153 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
positions_2(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_2 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_4 (-> ['positions'])"])
has variable
[i] position cleared
typecheckig node...
position_5 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_1 (-> ['positions'])", "position_4 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
has variable
clearing ir...?
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
has variable
[i] TMP_211 cleared
clearing ir...?
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
typecheckig node...
REF_155(uint128) -> position_5 (-> ['positions']).liquidity
Function name: _updatePosition
MEMBER
position
liquidity
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_155

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: position.liquidity Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_211(bool) = REF_155 < MAX_TICK_LIQUIDITY_5
Function name: _updatePosition
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_211

Name: TMP_211 Function: _updatePosition
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,MAX_TICK_LIQUIDITY)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
has variable
clearing ir...?
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
has variable
clearing ir...?
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
has variable
typecheckig node...
REF_156(uint256) -> position_5 (-> ['positions']).feeGrowthInside0Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside0Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_156

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside0Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
position_6 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_5 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_156 (->position_6 (-> ['positions'])) := growth0current_1(uint256)
Function name: _updatePosition
asgn

Name: growth0current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for REF_156

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_156 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside0Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
positions_3(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_6 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
has variable
clearing ir...?
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
has variable
[i] position cleared
clearing ir...?
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
has variable
clearing ir...?
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
has variable
typecheckig node...
REF_157(uint256) -> position_6 (-> ['positions']).feeGrowthInside1Last
Function name: _updatePosition
MEMBER
position
feeGrowthInside1Last
_updatePosition
position Fields:
liquidity
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[i]Type for REF_157

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: position.feeGrowthInside1Last Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
position_7 (-> ['positions'])(ConcentratedLiquidityPool.Position) := ϕ(["position_6 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for position

Name: position Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: liquidity, feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
REF_157 (->position_7 (-> ['positions'])) := growth1current_1(uint256)
Function name: _updatePosition
asgn

Name: growth1current Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for REF_157

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: REF_157 Function: _updatePosition
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthInside1Last Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
positions_4(mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))) := ϕ(["position_7 (-> ['positions'])"])
Function name: _updatePosition
Phi
[i]Type for positions

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN amount0fees_1,amount1fees_1
typecheckig node...
RETURN amount0fees_1,amount1fees_1
RETURN

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
WORKLIST iteration 0 for function call "_updatePosition":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _updatePosition

Name: amount0fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
___

Name: amount1fees Function: _updatePosition
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
___
[i]Type for TUPLE_7

Name: TUPLE_7 Function: collect
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amount0fees_1(uint256)= UNPACK TUPLE_7 index: 0 
Function name: collect
Reading tuple TUPLE_7 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount0fees

Name: amount0fees Function: collect
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
amount1fees_1(uint256)= UNPACK TUPLE_7 index: 1 
Function name: collect
Reading tuple TUPLE_7 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amount1fees

Name: amount1fees Function: collect
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
clearning node...
clearing ir...?
INTERNAL_CALL, ConcentratedLiquidityPool._transferBothTokens(address,uint256,uint256,bool)(recipient_1,amount0fees_1,amount1fees_1,unwrapBento_1)
typecheckig node...
INTERNAL_CALL, ConcentratedLiquidityPool._transferBothTokens(address,uint256,uint256,bool)(recipient_1,amount0fees_1,amount1fees_1,unwrapBento_1)
Internal call...
_transferBothTokens
recipient
amount0fees
amount1fees
unwrapBento
Function: _transferBothTokens
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _transferBothTokens
Function Visibility: internal
clearning node...
clearing ir...?
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
has variable
[i] to cleared
clearing ir...?
shares0_1(uint256) := ϕ(['amount0_2', 'amount0fees_1'])
has variable
[i] shares0 cleared
clearing ir...?
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
has variable
[i] shares1 cleared
clearing ir...?
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
has variable
[i] unwrapBento cleared
clearing ir...?
bento_7(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token0_26(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_28(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
to_1(address) := ϕ(['recipient_1', 'recipient_1'])
Function name: _transferBothTokens
Phi
[i]Type for to

Name: to Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: to
Fields: 
Finance Type: undef
done.
shares0_1(uint256) := ϕ(['amount0_2', 'amount0fees_1'])
Function name: _transferBothTokens
Phi
[i]Type for shares0

Name: shares0 Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
done.
shares1_1(uint256) := ϕ(['amount1_2', 'amount1fees_1'])
Function name: _transferBothTokens
Phi
[i]Type for shares1

Name: shares1 Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
done.
unwrapBento_1(bool) := ϕ(['unwrapBento_1', 'unwrapBento_1'])
Function name: _transferBothTokens
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transferBothTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
bento_7(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token0_26(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _transferBothTokens
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_28(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION unwrapBento_1
typecheckig node...
CONDITION unwrapBento_1
Condition...
Conidtion: 
unwrapBento_1
unwrapBento_1
clearning node...
clearing ir...?
TMP_218 = CONVERT this to address
has variable
[i] TMP_218 cleared
clearing ir...?
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
has variable
clearing ir...?
bento_10(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token0_28(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_31(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
TMP_218 = CONVERT this to address
Function name: _transferBothTokens
[i]Type for TMP_218

Name: TMP_218 Function: _transferBothTokens
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_14(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:withdraw, arguments:['token0_26', 'TMP_218', 'to_1', '0', 'shares0_1']  
Function name: _transferBothTokens
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_14
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token0
TMP_218
to
0
shares0
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_14

Name: TUPLE_14 Function: _transferBothTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_10(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token0_28(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _transferBothTokens
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_31(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_219 = CONVERT this to address
has variable
[i] TMP_219 cleared
clearing ir...?
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
has variable
clearing ir...?
bento_11(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_10', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token1_32(address) := ϕ(['token1_11', 'token1_1', 'token1_31', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
TMP_219 = CONVERT this to address
Function name: _transferBothTokens
[i]Type for TMP_219

Name: TMP_219 Function: _transferBothTokens
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_15(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_10(IBentoBoxMinimal), function:withdraw, arguments:['token1_31', 'TMP_219', 'to_1', '0', 'shares1_1']  
Function name: _transferBothTokens
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_15
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token1
TMP_219
to
0
shares1
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_15

Name: TUPLE_15 Function: _transferBothTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_11(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_10', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token1_32(address) := ϕ(['token1_11', 'token1_1', 'token1_31', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_220 = CONVERT this to address
has variable
[i] TMP_220 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
clearing ir...?
bento_8(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_7', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token0_27(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_26', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_29(address) := ϕ(['token1_11', 'token1_1', 'token1_28', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
TMP_220 = CONVERT this to address
Function name: _transferBothTokens
[i]Type for TMP_220

Name: TMP_220 Function: _transferBothTokens
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_7(IBentoBoxMinimal), function:transfer, arguments:['token0_26', 'TMP_220', 'to_1', 'shares0_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_8(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_7', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token0_27(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_20', 'token0_22', 'token0_26', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _transferBothTokens
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_29(address) := ϕ(['token1_11', 'token1_1', 'token1_28', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_222 = CONVERT this to address
has variable
[i] TMP_222 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
clearing ir...?
bento_9(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_8', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
token1_30(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_29', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
TMP_222 = CONVERT this to address
Function name: _transferBothTokens
[i]Type for TMP_222

Name: TMP_222 Function: _transferBothTokens
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_8(IBentoBoxMinimal), function:transfer, arguments:['token1_29', 'TMP_222', 'to_1', 'shares1_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_9(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_8', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transferBothTokens
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
token1_30(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_29', 'token1_32', 'token1_15', 'token1_21', 'token1_25'])
Function name: _transferBothTokens
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_transferBothTokens":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _transferBothTokens
done.
clearning node...
clearing ir...?
TMP_92 = CONVERT amount0fees_1 to uint128
has variable
[i] TMP_92 cleared
clearing ir...?
reserve0_21(uint128) = reserve0_20 (c)- TMP_92
has variable
typecheckig node...
TMP_92 = CONVERT amount0fees_1 to uint128
Function name: collect

Name: amount0fees Function: collect
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_92 Function: collect
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_92

Name: TMP_92 Function: collect
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
reserve0_21(uint128) = reserve0_20 (c)- TMP_92
Function name: collect
lnorm: u rnorm: 0
Finance type key: (30, 11)
Error with reserve0 in function collect
Error with: reserve0 in function collect
[<slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0dcf310>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d59550>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d81550>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d81fa0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d8a3d0>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d8abe0>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7fadf0d44a00>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7fadf0d44b50>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d4e7f0>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d4ea60>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0cdad60>]

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_92 Function: collect
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_92 Function: collect
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: reserve0 Function: collect
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for reserve0

Name: reserve0 Function: collect
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_93 = CONVERT amount1fees_1 to uint128
has variable
[i] TMP_93 cleared
clearing ir...?
reserve1_22(uint128) = reserve1_21 (c)- TMP_93
has variable
typecheckig node...
TMP_93 = CONVERT amount1fees_1 to uint128
Function name: collect

Name: amount1fees Function: collect
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_93 Function: collect
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_93

Name: TMP_93 Function: collect
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
reserve1_22(uint128) = reserve1_21 (c)- TMP_93
Function name: collect
lnorm: u rnorm: 0
Finance type key: (30, 11)
Error with reserve1 in function collect
Error with: reserve1 in function collect
[<slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0dcf310>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d59550>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d81550>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d81fa0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d8a3d0>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d8abe0>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7fadf0d44a00>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7fadf0d44b50>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d4e7f0>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d4ea60>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0cdad60>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0cdafd0>]

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_93 Function: collect
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_93 Function: collect
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: reserve1 Function: collect
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for reserve1

Name: reserve1 Function: collect
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
Emit Collect(msg.sender,amount0fees_1,amount1fees_1)
typecheckig node...
Emit Collect(msg.sender,amount0fees_1,amount1fees_1)
WORKLIST iteration 0 for function call "collect":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: collect

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: swap
Function name: swap
Function Visibility (test): public
data
Finding type for data...
bytes
SKIP bytes
-100
Add new
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
swapFee_2(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
has variable
clearing ir...?
token0_15(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_16(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
has variable
clearing ir...?
liquidity_10(uint128) := ϕ(['liquidity_4', 'liquidity_3', 'liquidity_5', 'liquidity_0', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9'])
has variable
clearing ir...?
secondsPerLiquidity_7(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
has variable
clearing ir...?
lastObservation_1(uint32) := ϕ(['lastObservation_0', 'lastObservation_3', 'lastObservation_2'])
has variable
clearing ir...?
feeGrowthGlobal0_7(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
has variable
clearing ir...?
feeGrowthGlobal1_7(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
has variable
clearing ir...?
barFee_2(uint256) := ϕ(['barFee_1', 'barFee_3', 'barFee_4', 'barFee_0'])
has variable
clearing ir...?
price_6(uint160) := ϕ(['price_0', 'price_8', 'price_3', 'price_1', 'price_5'])
has variable
clearing ir...?
nearestTick_15(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
has variable
clearing ir...?
ticks_14(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
has variable
typecheckig node...
swapFee_2(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
Function name: swap
Phi
[i]Type for swapFee

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0_15(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: swap
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_16(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: swap
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidity_10(uint128) := ϕ(['liquidity_4', 'liquidity_3', 'liquidity_5', 'liquidity_0', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9'])
Function name: swap
Phi
[i]Type for liquidity

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsPerLiquidity_7(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Function name: swap
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lastObservation_1(uint32) := ϕ(['lastObservation_0', 'lastObservation_3', 'lastObservation_2'])
Function name: swap
Phi
[i]Type for lastObservation

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal0_7(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
Function name: swap
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
feeGrowthGlobal1_7(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
Function name: swap
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
barFee_2(uint256) := ϕ(['barFee_1', 'barFee_3', 'barFee_4', 'barFee_0'])
Function name: swap
Phi
[i]Type for barFee

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price_6(uint160) := ϕ(['price_0', 'price_8', 'price_3', 'price_1', 'price_5'])
Function name: swap
Phi
[i]Type for price

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_15(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: swap
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_14(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: swap
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
typecheckig node...
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Internal call...
lock
Function: lock
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_8(bool,uint256,address,bool) = SOLIDITY_CALL abi.decode()(data_1(bool,uint256,address,bool))
clearing ir...?
zeroForOne_1(bool)= UNPACK TUPLE_8 index: 0 
has variable
[i] zeroForOne cleared
clearing ir...?
inAmount_1(uint256)= UNPACK TUPLE_8 index: 1 
has variable
[i] inAmount cleared
clearing ir...?
recipient_1(address)= UNPACK TUPLE_8 index: 2 
has variable
[i] recipient cleared
clearing ir...?
unwrapBento_1(bool)= UNPACK TUPLE_8 index: 3 
has variable
[i] unwrapBento cleared
typecheckig node...
TUPLE_8(bool,uint256,address,bool) = SOLIDITY_CALL abi.decode()(data_1(bool,uint256,address,bool))
[i]Type for TUPLE_8

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
zeroForOne_1(bool)= UNPACK TUPLE_8 index: 0 
Function name: swap
Reading tuple TUPLE_8 index 0
Finding type for zeroForOne...
bool
SKIP bool
[i]Type for zeroForOne

Name: zeroForOne Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
inAmount_1(uint256)= UNPACK TUPLE_8 index: 1 
Function name: swap
Reading tuple TUPLE_8 index 1
Finding type for inAmount...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: inAmount Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for inAmount

Name: inAmount Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
recipient_1(address)= UNPACK TUPLE_8 index: 2 
Function name: swap
Reading tuple TUPLE_8 index 2
Finding type for recipient...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: recipient Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for recipient

Name: recipient Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool)= UNPACK TUPLE_8 index: 3 
Function name: swap
Reading tuple TUPLE_8 index 3
Finding type for unwrapBento...
bool
SKIP bool
[i]Type for unwrapBento

Name: unwrapBento Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION zeroForOne_1
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
clearning node...
clearing ir...?
TMP_149 = CONVERT price_7 to uint256
has variable
[i] TMP_149 cleared
clearing ir...?
TMP_150 = CONVERT liquidity_11 to uint256
has variable
[i] TMP_150 cleared
clearing ir...?
REF_133(Ticks.Tick) -> ticks_15[nearestTick_16]
has variable
clearing ir...?
REF_134(int24) -> REF_133.nextTick
has variable
clearing ir...?
TMP_151 = new SwapCache(0,0,0,feeGrowthGlobal0_8,TMP_149,TMP_150,inAmount_1,REF_134)
clearing ir...?
cache_1(ConcentratedLiquidityPool.SwapCache) := TMP_151(ConcentratedLiquidityPool.SwapCache)
has variable
[i] cache cleared
typecheckig node...
TMP_149 = CONVERT price_7 to uint256
Function name: swap

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_149 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_149

Name: TMP_149 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_150 = CONVERT liquidity_11 to uint256
Function name: swap

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_150 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_133(Ticks.Tick) -> ticks_15[nearestTick_16]
Function name: swap
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
ticks
[i]Type for REF_133

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_133(Ticks.Tick) -> ticks_15[nearestTick_16]
XXXXX
REF_134(int24) -> REF_133.nextTick
Function name: swap
MEMBER
REF_133
nextTick
swap
REF_133 Fields:
^^^
[i]Type for REF_134

Name: REF_133.nextTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_133.nextTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTick Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151 = new SwapCache(0,0,0,feeGrowthGlobal0_8,TMP_149,TMP_150,inAmount_1,REF_134)
[i]Type for TMP_151

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_1(ConcentratedLiquidityPool.SwapCache) := TMP_151(ConcentratedLiquidityPool.SwapCache)
Function name: swap
asgn

Name: TMP_151 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
cache_1(ConcentratedLiquidityPool.SwapCache) := TMP_151(ConcentratedLiquidityPool.SwapCache)
XXXXX
clearning node...
clearing ir...?
TMP_146 = CONVERT price_7 to uint256
has variable
[i] TMP_146 cleared
clearing ir...?
TMP_147 = CONVERT liquidity_11 to uint256
has variable
[i] TMP_147 cleared
clearing ir...?
TMP_148 = new SwapCache(0,0,0,feeGrowthGlobal1_8,TMP_146,TMP_147,inAmount_1,nearestTick_16)
clearing ir...?
cache_2(ConcentratedLiquidityPool.SwapCache) := TMP_148(ConcentratedLiquidityPool.SwapCache)
has variable
[i] cache cleared
typecheckig node...
TMP_146 = CONVERT price_7 to uint256
Function name: swap

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_146 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_147 = CONVERT liquidity_11 to uint256
Function name: swap

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_147 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_147

Name: TMP_147 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_148 = new SwapCache(0,0,0,feeGrowthGlobal1_8,TMP_146,TMP_147,inAmount_1,nearestTick_16)
[i]Type for TMP_148

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_2(ConcentratedLiquidityPool.SwapCache) := TMP_148(ConcentratedLiquidityPool.SwapCache)
Function name: swap
asgn

Name: TMP_148 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
cache_2(ConcentratedLiquidityPool.SwapCache) := TMP_148(ConcentratedLiquidityPool.SwapCache)
XXXXX
clearning node...
clearing ir...?
cache_3(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_1', 'cache_2'])
has variable
[i] cache cleared
typecheckig node...
cache_3(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_1', 'cache_2'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
timestamp_1(uint256) := block.timestamp(uint256)
has variable
[i] timestamp cleared
typecheckig node...
timestamp_1(uint256) := block.timestamp(uint256)
Function name: swap
asgn
block.timestamp

Name: timestamp Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
not variable
[i]Type for timestamp

Name: timestamp Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
timestamp_1(uint256) := block.timestamp(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_96 = CONVERT lastObservation_2 to uint256
has variable
[i] TMP_96 cleared
clearing ir...?
TMP_97(uint256) = timestamp_1 (c)- TMP_96
has variable
[i] TMP_97 cleared
clearing ir...?
diff_1(uint256) := TMP_97(uint256)
has variable
[i] diff cleared
typecheckig node...
TMP_96 = CONVERT lastObservation_2 to uint256
Function name: swap

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_96 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_96

Name: TMP_96 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_97(uint256) = timestamp_1 (c)- TMP_96
Function name: swap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: timestamp Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_96 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_96 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_97 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_97

Name: TMP_97 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_97(uint256) = timestamp_1 (c)- TMP_96
XXXXX
diff_1(uint256) := TMP_97(uint256)
Function name: swap
asgn

Name: TMP_97 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: diff Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for diff

Name: diff Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_98(bool) = diff_1 > 0
has variable
[i] TMP_98 cleared
clearing ir...?
TMP_99(bool) = liquidity_11 > 0
has variable
[i] TMP_99 cleared
clearing ir...?
TMP_100(bool) = TMP_98 && TMP_99
has variable
[i] TMP_100 cleared
clearing ir...?
CONDITION TMP_100
typecheckig node...
TMP_98(bool) = diff_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_98

Name: TMP_98 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_99(bool) = liquidity_11 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_99

Name: TMP_99 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_100(bool) = TMP_98 && TMP_99
Function name: swap
[i]Type for TMP_100

Name: TMP_100 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_100
Condition...
Conidtion: 
TMP_100
TMP_100
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_101 = CONVERT timestamp_1 to uint32
has variable
[i] TMP_101 cleared
clearing ir...?
lastObservation_3(uint32) := TMP_101(uint32)
has variable
typecheckig node...
TMP_101 = CONVERT timestamp_1 to uint32
Function name: swap

Name: timestamp Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_101 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_101

Name: TMP_101 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_101 = CONVERT timestamp_1 to uint32
XXXXX
lastObservation_3(uint32) := TMP_101(uint32)
Function name: swap
asgn

Name: TMP_101 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lastObservation Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for lastObservation

Name: lastObservation Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
lastObservation_3(uint32) := TMP_101(uint32)
XXXXX
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_102(uint256) = diff_1 << 128
has variable
[i] TMP_102 cleared
clearing ir...?
TMP_103(uint256) = TMP_102 (c)/ liquidity_11
has variable
[i] TMP_103 cleared
clearing ir...?
TMP_104 = CONVERT TMP_103 to uint160
has variable
[i] TMP_104 cleared
clearing ir...?
secondsPerLiquidity_9(uint160) = secondsPerLiquidity_8 (c)+ TMP_104
has variable
typecheckig node...
TMP_102(uint256) = diff_1 << 128
Function name: swap
[i]Type for TMP_102

Name: TMP_102 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_103(uint256) = TMP_102 (c)/ liquidity_11
Function name: swap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_103 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_103

Name: TMP_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_103(uint256) = TMP_102 (c)/ liquidity_11
XXXXX
TMP_104 = CONVERT TMP_103 to uint160
Function name: swap

Name: TMP_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_104 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_104

Name: TMP_104 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsPerLiquidity_9(uint160) = secondsPerLiquidity_8 (c)+ TMP_104
Function name: swap

Name: secondsPerLiquidity Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_104 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidity Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
amountOut_1(uint256) := ϕ(['amountOut_0', 'amountOut_2'])
has variable
[i] amountOut cleared
clearing ir...?
cache_4(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_0', 'cache_14'])
has variable
[i] cache cleared
clearing ir...?
REF_61(uint256) -> cache_4.input
has variable
clearing ir...?
TMP_105(bool) = REF_61 != 0
has variable
[i] TMP_105 cleared
clearing ir...?
CONDITION TMP_105
typecheckig node...
amountOut_1(uint256) := ϕ(['amountOut_0', 'amountOut_2'])
Function name: swap
Phi
[i]Type for amountOut

Name: amountOut Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_4(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_0', 'cache_14'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_61(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
^^^
[i]Type for REF_61

Name: cache.input Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_105(bool) = REF_61 != 0
Function name: swap
[i]Type for TMP_105

Name: TMP_105 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_105
Condition...
Conidtion: 
TMP_105
TMP_105
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_129(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
TMP_134 = CONVERT REF_129 to uint160
has variable
[i] TMP_134 cleared
clearing ir...?
price_8(uint160) := TMP_134(uint160)
has variable
typecheckig node...
REF_129(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
^^^
[i]Type for REF_129

Name: cache.currentPrice Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_134 = CONVERT REF_129 to uint160
Function name: swap

Name: cache.currentPrice Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_134 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_134

Name: TMP_134 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_134 = CONVERT REF_129 to uint160
XXXXX
price_8(uint160) := TMP_134(uint160)
Function name: swap
asgn

Name: TMP_134 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for price

Name: price Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
price_8(uint160) := TMP_134(uint160)
XXXXX
clearning node...
clearing ir...?
REF_63(int24) -> cache_4.nextTickToCross
has variable
clearing ir...?
TMP_106(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_63'] 
has variable
[i] TMP_106 cleared
clearing ir...?
TMP_107 = CONVERT TMP_106 to uint256
has variable
[i] TMP_107 cleared
clearing ir...?
nextTickPrice_1(uint256) := TMP_107(uint256)
has variable
[i] nextTickPrice cleared
typecheckig node...
REF_63(int24) -> cache_4.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
input
currentPrice
^^^
[i]Type for REF_63

Name: cache.nextTickToCross Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_106(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_63'] 
Function name: swap
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
REF_63
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_106

Name: TMP_106 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_107 = CONVERT TMP_106 to uint256
Function name: swap

Name: TMP_106 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_107 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_107

Name: TMP_107 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
nextTickPrice_1(uint256) := TMP_107(uint256)
Function name: swap
asgn

Name: TMP_107 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: nextTickPrice Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
CONDITION zeroForOne_1
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
clearning node...
clearing ir...?
output_1(uint256) := 0(uint256)
has variable
[i] output cleared
typecheckig node...
output_1(uint256) := 0(uint256)
Function name: swap
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: output Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_135(int24) -> cache_4.nextTickToCross
has variable
clearing ir...?
newNearestTick_2(int24) := REF_135(int24)
has variable
[i] newNearestTick cleared
typecheckig node...
REF_135(int24) -> cache_4.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
input
currentPrice
nextTickToCross
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_135

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
newNearestTick_2(int24) := REF_135(int24)
Function name: swap
asgn

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newNearestTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
cross_1(bool) := False(bool)
has variable
[i] cross cleared
typecheckig node...
cross_1(bool) := False(bool)
Function name: swap
asgn
val: False

Name: False Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: cross Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: False
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_136(int24) -> cache_4.nextTickToCross
has variable
clearing ir...?
REF_137(Ticks.Tick) -> ticks_15[REF_136]
has variable
clearing ir...?
REF_138(int24) -> REF_137.previousTick
has variable
clearing ir...?
newNearestTick_1(int24) := REF_138(int24)
has variable
[i] newNearestTick cleared
typecheckig node...
REF_136(int24) -> cache_4.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
input
currentPrice
nextTickToCross
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_136

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_137(Ticks.Tick) -> ticks_15[REF_136]
Function name: swap
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: nextTick
Finance Type: undef
Name: None
ticks
[i]Type for REF_137

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_137(Ticks.Tick) -> ticks_15[REF_136]
XXXXX
REF_138(int24) -> REF_137.previousTick
Function name: swap
MEMBER
REF_137
previousTick
swap
REF_137 Fields:
^^^
[i]Type for REF_138

Name: REF_137.previousTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_137.previousTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: previousTick Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
newNearestTick_1(int24) := REF_138(int24)
Function name: swap
asgn

Name: REF_137.previousTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newNearestTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
newNearestTick_1(int24) := REF_138(int24)
XXXXX
clearning node...
clearing ir...?
newNearestTick_3(int24) := ϕ(['newNearestTick_1', 'newNearestTick_2'])
has variable
[i] newNearestTick cleared
typecheckig node...
newNearestTick_3(int24) := ϕ(['newNearestTick_1', 'newNearestTick_2'])
Function name: swap
Phi
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_135(bool) = nearestTick_16 != newNearestTick_3
has variable
[i] TMP_135 cleared
clearing ir...?
CONDITION TMP_135
typecheckig node...
TMP_135(bool) = nearestTick_16 != newNearestTick_3
Function name: swap
[i]Type for TMP_135

Name: TMP_135 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_135
Condition...
Conidtion: 
TMP_135
TMP_135
clearning node...
clearing ir...?
CONDITION zeroForOne_1
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
clearning node...
clearing ir...?
REF_65(uint256) -> cache_4.currentLiquidity
has variable
clearing ir...?
REF_66(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
TMP_108(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_65', 'nextTickPrice_1', 'REF_66', 'False'] 
has variable
[i] TMP_108 cleared
clearing ir...?
maxDx_1(uint256) := TMP_108(uint256)
has variable
[i] maxDx cleared
typecheckig node...
REF_65(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
^^^
[i]Type for REF_65

Name: cache.currentLiquidity Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_66(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_66

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_108(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_65', 'nextTickPrice_1', 'REF_66', 'False'] 
Function name: swap
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
REF_65
nextTickPrice
REF_66
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_108

Name: TMP_108 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
maxDx_1(uint256) := TMP_108(uint256)
Function name: swap
asgn

Name: TMP_108 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDx Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for maxDx

Name: maxDx Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_88(uint256) -> cache_4.currentLiquidity
has variable
clearing ir...?
REF_89(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
TMP_125(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_88', 'REF_89', 'nextTickPrice_1', 'False'] 
has variable
[i] TMP_125 cleared
clearing ir...?
maxDy_1(uint256) := TMP_125(uint256)
has variable
[i] maxDy cleared
typecheckig node...
REF_88(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_88

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_89(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_89

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_125(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_88', 'REF_89', 'nextTickPrice_1', 'False'] 
Function name: swap
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
REF_88
REF_89
nextTickPrice
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_125

Name: TMP_125 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
maxDy_1(uint256) := TMP_125(uint256)
Function name: swap
asgn

Name: TMP_125 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDy Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for maxDy

Name: maxDy Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
nearestTick_17(int24) := newNearestTick_3(int24)
has variable
typecheckig node...
nearestTick_17(int24) := newNearestTick_3(int24)
Function name: swap
asgn

Name: newNearestTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nearestTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nearestTick

Name: nearestTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
nearestTick_17(int24) := newNearestTick_3(int24)
XXXXX
clearning node...
clearing ir...?
REF_67(uint256) -> cache_4.input
has variable
clearing ir...?
TMP_109(bool) = REF_67 <= maxDx_1
has variable
[i] TMP_109 cleared
clearing ir...?
CONDITION TMP_109
typecheckig node...
REF_67(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_67

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_109(bool) = REF_67 <= maxDx_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0
[i]Type for TMP_109

Name: TMP_109 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_109
Condition...
Conidtion: 
TMP_109
TMP_109
clearning node...
clearing ir...?
REF_90(uint256) -> cache_4.input
has variable
clearing ir...?
TMP_126(bool) = REF_90 <= maxDy_1
has variable
[i] TMP_126 cleared
clearing ir...?
CONDITION TMP_126
typecheckig node...
REF_90(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_90

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_126(bool) = REF_90 <= maxDy_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0
[i]Type for TMP_126

Name: TMP_126 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_126
Condition...
Conidtion: 
TMP_126
TMP_126
clearning node...
clearing ir...?
REF_91(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
REF_93(uint256) -> cache_4.input
has variable
clearing ir...?
REF_94(uint256) -> cache_4.currentLiquidity
has variable
clearing ir...?
TMP_127(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['REF_93', '79228162514264337593543950336', 'REF_94'] 
has variable
[i] TMP_127 cleared
clearing ir...?
TMP_128(uint256) = REF_91 (c)+ TMP_127
has variable
[i] TMP_128 cleared
clearing ir...?
newPrice_scope_0_1(uint256) := TMP_128(uint256)
has variable
[i] newPrice_scope_0 cleared
typecheckig node...
REF_91(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_91

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_93(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_93

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_94(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_94

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_127(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['REF_93', '79228162514264337593543950336', 'REF_94'] 
Function name: swap
Library Call: mulDiv
hlc contract name: FullMath func_name: mulDiv
('t', [1, 2], [3], 0, None, 11)
REF_93
79228162514264337593543950336
REF_94
wfc len: 1
Check copy_toekn_tuple
([-1, -1], [-1, -1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_127

Name: TMP_127 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
TMP_128(uint256) = REF_91 (c)+ TMP_127
Function name: swap

Name: TMP_128 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: 0
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 11, Left type: -1
Final dest type: 11

Name: TMP_127 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_128 Function: swap
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
[i]Type for TMP_128

Name: TMP_128 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
newPrice_scope_0_1(uint256) := TMP_128(uint256)
Function name: swap
asgn

Name: TMP_128 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: newPrice_scope_0 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for newPrice_scope_0

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
clearning node...
clearing ir...?
REF_130(uint256) -> cache_4.currentLiquidity
has variable
clearing ir...?
TMP_136 = CONVERT REF_130 to uint128
has variable
[i] TMP_136 cleared
clearing ir...?
liquidity_12(uint128) := TMP_136(uint128)
has variable
typecheckig node...
REF_130(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_130

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_136 = CONVERT REF_130 to uint128
Function name: swap

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_136 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_136

Name: TMP_136 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidity_12(uint128) := TMP_136(uint128)
Function name: swap
asgn

Name: TMP_136 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for liquidity

Name: liquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_101(uint256) -> cache_4.currentLiquidity
has variable
clearing ir...?
REF_102(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
TMP_130(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_101', 'REF_102', 'nextTickPrice_1', 'False'] 
has variable
[i] TMP_130 cleared
clearing ir...?
output_6(uint256) := TMP_130(uint256)
has variable
[i] output cleared
typecheckig node...
REF_101(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_101

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_102(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_102

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_130(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_101', 'REF_102', 'nextTickPrice_1', 'False'] 
Function name: swap
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
REF_101
REF_102
nextTickPrice
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_130

Name: TMP_130 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
output_6(uint256) := TMP_130(uint256)
Function name: swap
asgn

Name: TMP_130 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: output Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_137 = CONVERT inAmount_1 to uint128
has variable
[i] TMP_137 cleared
clearing ir...?
INTERNAL_CALL, ConcentratedLiquidityPool._updateReserves(bool,uint128,uint256)(zeroForOne_1,TMP_137,amountOut_1)
clearing ir...?
token0_17(address) := ϕ(['token0_25'])
has variable
clearing ir...?
token1_18(address) := ϕ(['token1_27'])
has variable
typecheckig node...
TMP_137 = CONVERT inAmount_1 to uint128
Function name: swap

Name: inAmount Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_137 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_137

Name: TMP_137 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, ConcentratedLiquidityPool._updateReserves(bool,uint128,uint256)(zeroForOne_1,TMP_137,amountOut_1)
Internal call...
_updateReserves
zeroForOne
TMP_137
amountOut
Function: _updateReserves
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _updateReserves
Function Visibility: internal
clearning node...
clearing ir...?
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
has variable
[i] zeroForOne cleared
clearing ir...?
inAmount_1(uint128) := ϕ(['TMP_137'])
has variable
[i] inAmount cleared
clearing ir...?
amountOut_1(uint256) := ϕ(['amountOut_1'])
has variable
[i] amountOut cleared
clearing ir...?
token0_24(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_26(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
has variable
clearing ir...?
reserve0_25(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
has variable
clearing ir...?
reserve1_27(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
has variable
typecheckig node...
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Function name: _updateReserves
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
inAmount_1(uint128) := ϕ(['TMP_137'])
Function name: _updateReserves
Phi
[i]Type for inAmount

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := ϕ(['amountOut_1'])
Function name: _updateReserves
Phi
[i]Type for amountOut

Name: amountOut Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0_24(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _updateReserves
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_26(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: _updateReserves
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_25(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: _updateReserves
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve1_27(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: _updateReserves
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
CONDITION zeroForOne_1
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
clearning node...
clearing ir...?
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
has variable
[i] TMP_190 cleared
clearing ir...?
balance0_1(uint256) := TMP_190(uint256)
has variable
[i] balance0 cleared
typecheckig node...
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
Function name: _updateReserves
Internal call...
_balance
token0
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_190

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance0_1(uint256) := TMP_190(uint256)
Function name: _updateReserves
asgn

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance0

Name: balance0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
balance0_1(uint256) := TMP_190(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_191(uint128) = reserve0_28 (c)+ inAmount_1
has variable
[i] TMP_191 cleared
clearing ir...?
newBalance_1(uint128) := TMP_191(uint128)
has variable
[i] newBalance cleared
typecheckig node...
TMP_191(uint128) = reserve0_28 (c)+ inAmount_1
Function name: _updateReserves

Name: TMP_191 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_191 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_191

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
newBalance_1(uint128) := TMP_191(uint128)
Function name: _updateReserves
asgn

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: newBalance Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
has variable
[i] TMP_196 cleared
clearing ir...?
balance1_1(uint256) := TMP_196(uint256)
has variable
[i] balance1 cleared
typecheckig node...
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
Function name: _updateReserves
Internal call...
_balance
token1
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_196

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance1_1(uint256) := TMP_196(uint256)
Function name: _updateReserves
asgn

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
balance1_1(uint256) := TMP_196(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_192 = CONVERT newBalance_1 to uint256
has variable
[i] TMP_192 cleared
clearing ir...?
TMP_193(bool) = TMP_192 <= balance0_1
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
typecheckig node...
TMP_192 = CONVERT newBalance_1 to uint256
Function name: _updateReserves

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_192 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_192

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
TMP_193(bool) = TMP_192 <= balance0_1
Function name: _updateReserves
testing lt...
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_193 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_193

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
TMP_193(bool) = TMP_192 <= balance0_1
XXXXX
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
reserve0_29(uint128) := newBalance_1(uint128)
has variable
typecheckig node...
reserve0_29(uint128) := newBalance_1(uint128)
Function name: _updateReserves
asgn

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
TMP_197(uint128) = reserve1_28 (c)+ inAmount_1
has variable
[i] TMP_197 cleared
clearing ir...?
newBalance_scope_0_1(uint128) := TMP_197(uint128)
has variable
[i] newBalance_scope_0 cleared
typecheckig node...
TMP_197(uint128) = reserve1_28 (c)+ inAmount_1
Function name: _updateReserves

Name: TMP_197 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_197 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_197

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
newBalance_scope_0_1(uint128) := TMP_197(uint128)
Function name: _updateReserves
asgn

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: newBalance_scope_0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199(bool) = TMP_198 <= balance1_1
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
typecheckig node...
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
Function name: _updateReserves

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_198 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_198

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
TMP_199(bool) = TMP_198 <= balance1_1
Function name: _updateReserves
testing lt...
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_199 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_199

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
TMP_199(bool) = TMP_198 <= balance1_1
XXXXX
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT amountOut_1 to uint128
has variable
[i] TMP_195 cleared
clearing ir...?
reserve1_31(uint128) = reserve1_30 (c)- TMP_195
has variable
typecheckig node...
TMP_195 = CONVERT amountOut_1 to uint128
Function name: _updateReserves

Name: amountOut Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_195

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_195 = CONVERT amountOut_1 to uint128
XXXXX
reserve1_31(uint128) = reserve1_30 (c)- TMP_195
Function name: _updateReserves
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
reserve1_31(uint128) = reserve1_30 (c)- TMP_195
XXXXX
clearning node...
clearing ir...?
reserve1_29(uint128) := newBalance_scope_0_1(uint128)
has variable
typecheckig node...
reserve1_29(uint128) := newBalance_scope_0_1(uint128)
Function name: _updateReserves
asgn

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
reserve1_32(uint128) := ϕ(['reserve1_29', 'reserve1_31'])
has variable
clearing ir...?
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
has variable
typecheckig node...
reserve1_32(uint128) := ϕ(['reserve1_29', 'reserve1_31'])
Function name: _updateReserves
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
Function name: _updateReserves
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
TMP_201 = CONVERT amountOut_1 to uint128
has variable
[i] TMP_201 cleared
clearing ir...?
reserve0_27(uint128) = reserve0_26 (c)- TMP_201
has variable
typecheckig node...
TMP_201 = CONVERT amountOut_1 to uint128
Function name: _updateReserves

Name: amountOut Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_201

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_201 = CONVERT amountOut_1 to uint128
XXXXX
reserve0_27(uint128) = reserve0_26 (c)- TMP_201
Function name: _updateReserves
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
reserve0_27(uint128) = reserve0_26 (c)- TMP_201
XXXXX
WORKLIST iteration 0 for function call "_updateReserves":
 New undefined nodes- 6
 Old undefined nodes- 0
typecheckig node...
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Function name: _updateReserves
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
inAmount_1(uint128) := ϕ(['TMP_137'])
Function name: _updateReserves
Phi
[i]Type for inAmount

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := ϕ(['amountOut_1'])
Function name: _updateReserves
Phi
[i]Type for amountOut

Name: amountOut Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0_24(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _updateReserves
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_26(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: _updateReserves
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_25(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: _updateReserves
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve1_27(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: _updateReserves
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
typecheckig node...
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
Function name: _updateReserves
Internal call...
_balance
token0
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_190

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance0_1(uint256) := TMP_190(uint256)
Function name: _updateReserves
asgn

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance0

Name: balance0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
balance0_1(uint256) := TMP_190(uint256)
XXXXX
typecheckig node...
TMP_191(uint128) = reserve0_28 (c)+ inAmount_1
Function name: _updateReserves

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_191

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
newBalance_1(uint128) := TMP_191(uint128)
Function name: _updateReserves
asgn

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
Function name: _updateReserves
Internal call...
_balance
token1
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_196

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance1_1(uint256) := TMP_196(uint256)
Function name: _updateReserves
asgn

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
balance1_1(uint256) := TMP_196(uint256)
XXXXX
typecheckig node...
TMP_192 = CONVERT newBalance_1 to uint256
Function name: _updateReserves

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_192

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
TMP_193(bool) = TMP_192 <= balance0_1
Function name: _updateReserves
testing lt...
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_193

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
TMP_193(bool) = TMP_192 <= balance0_1
XXXXX
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
reserve0_29(uint128) := newBalance_1(uint128)
Function name: _updateReserves
asgn

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
TMP_197(uint128) = reserve1_28 (c)+ inAmount_1
Function name: _updateReserves

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_197

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
newBalance_scope_0_1(uint128) := TMP_197(uint128)
Function name: _updateReserves
asgn

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
Function name: _updateReserves

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_198

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
TMP_199(bool) = TMP_198 <= balance1_1
Function name: _updateReserves
testing lt...
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_199

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
TMP_199(bool) = TMP_198 <= balance1_1
XXXXX
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_195 = CONVERT amountOut_1 to uint128
Function name: _updateReserves

Name: amountOut Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_195

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_195 = CONVERT amountOut_1 to uint128
XXXXX
reserve1_31(uint128) = reserve1_30 (c)- TMP_195
Function name: _updateReserves
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
reserve1_31(uint128) = reserve1_30 (c)- TMP_195
XXXXX
typecheckig node...
reserve1_29(uint128) := newBalance_scope_0_1(uint128)
Function name: _updateReserves
asgn

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
reserve1_32(uint128) := ϕ(['reserve1_29', 'reserve1_31'])
Function name: _updateReserves
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
Function name: _updateReserves
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
TMP_201 = CONVERT amountOut_1 to uint128
Function name: _updateReserves

Name: amountOut Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_201

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_201 = CONVERT amountOut_1 to uint128
XXXXX
reserve0_27(uint128) = reserve0_26 (c)- TMP_201
Function name: _updateReserves
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
reserve0_27(uint128) = reserve0_26 (c)- TMP_201
XXXXX
WORKLIST iteration 1 for function call "_updateReserves":
 New undefined nodes- 6
 Old undefined nodes- 6
Saving return values for: _updateReserves
done.
This IR caused addback:
INTERNAL_CALL, ConcentratedLiquidityPool._updateReserves(bool,uint128,uint256)(zeroForOne_1,TMP_137,amountOut_1)
XXXXX
token0_17(address) := ϕ(['token0_25'])
Function name: swap
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_18(address) := ϕ(['token1_27'])
Function name: swap
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_103(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
cache_12(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
has variable
[i] cache cleared
clearing ir...?
REF_103 (->cache_12) := nextTickPrice_1(uint256)
has variable
typecheckig node...
REF_103(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_103

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_12(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice
Finance Type: undef
done.
REF_103 (->cache_12) := nextTickPrice_1(uint256)
Function name: swap
asgn

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for REF_103

Name: REF_103 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_68(uint256) -> cache_4.currentLiquidity
has variable
clearing ir...?
TMP_110(uint256) = REF_68 << 96
has variable
[i] TMP_110 cleared
clearing ir...?
liquidityPadded_1(uint256) := TMP_110(uint256)
has variable
[i] liquidityPadded cleared
typecheckig node...
REF_68(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_68

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_110(uint256) = REF_68 << 96
Function name: swap
[i]Type for TMP_110

Name: TMP_110 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidityPadded_1(uint256) := TMP_110(uint256)
Function name: swap
asgn

Name: TMP_110 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidityPadded Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for liquidityPadded

Name: liquidityPadded Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
liquidityPadded_1(uint256) := TMP_110(uint256)
XXXXX
clearning node...
clearing ir...?
REF_96(uint256) -> cache_4.currentLiquidity
has variable
clearing ir...?
REF_97(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
TMP_129(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_96', 'REF_97', 'newPrice_scope_0_1', 'False'] 
has variable
[i] TMP_129 cleared
clearing ir...?
output_5(uint256) := TMP_129(uint256)
has variable
[i] output cleared
typecheckig node...
REF_96(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_96

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_97(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_97

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_129(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_96', 'REF_97', 'newPrice_scope_0_1', 'False'] 
Function name: swap
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
REF_96
REF_97
newPrice_scope_0
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_129

Name: TMP_129 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
output_5(uint256) := TMP_129(uint256)
Function name: swap
asgn

Name: TMP_129 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: output Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
REF_83(uint256) -> cache_4.currentLiquidity
has variable
clearing ir...?
REF_84(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
TMP_124(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_83', 'nextTickPrice_1', 'REF_84', 'False'] 
has variable
[i] TMP_124 cleared
clearing ir...?
output_2(uint256) := TMP_124(uint256)
has variable
[i] output cleared
typecheckig node...
REF_83(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_83

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_84(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_84

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_124(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_83', 'nextTickPrice_1', 'REF_84', 'False'] 
Function name: swap
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
REF_83
nextTickPrice
REF_84
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_124

Name: TMP_124 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
output_2(uint256) := TMP_124(uint256)
Function name: swap
asgn

Name: TMP_124 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: output Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
cross_4(bool) := True(bool)
has variable
[i] cross cleared
typecheckig node...
cross_4(bool) := True(bool)
Function name: swap
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: cross Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_85(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
cache_5(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
has variable
[i] cache cleared
clearing ir...?
REF_85 (->cache_5) := nextTickPrice_1(uint256)
has variable
typecheckig node...
REF_85(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_85

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_5(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice
Finance Type: undef
done.
REF_85 (->cache_5) := nextTickPrice_1(uint256)
Function name: swap
asgn

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_85 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for REF_85

Name: REF_85 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_85 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_98(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
cache_10(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
has variable
[i] cache cleared
clearing ir...?
REF_98 (->cache_10) := newPrice_scope_0_1(uint256)
has variable
typecheckig node...
REF_98(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_98

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_10(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice
Finance Type: undef
done.
REF_98 (->cache_10) := newPrice_scope_0_1(uint256)
Function name: swap
asgn

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: REF_98 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for REF_98

Name: REF_98 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: REF_98 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_131(uint256) -> cache_4.feeGrowthGlobal
has variable
clearing ir...?
REF_132(uint256) -> cache_4.protocolFee
has variable
clearing ir...?
TMP_139 = CONVERT REF_132 to uint128
has variable
[i] TMP_139 cleared
clearing ir...?
INTERNAL_CALL, ConcentratedLiquidityPool._updateFees(bool,uint256,uint128)(zeroForOne_1,REF_131,TMP_139)
typecheckig node...
REF_131(uint256) -> cache_4.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
^^^
[i]Type for REF_131

Name: cache.feeGrowthGlobal Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_132(uint256) -> cache_4.protocolFee
Function name: swap
MEMBER
cache
protocolFee
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
^^^
[i]Type for REF_132

Name: cache.protocolFee Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.protocolFee Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_139 = CONVERT REF_132 to uint128
Function name: swap

Name: cache.protocolFee Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_139 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_139

Name: TMP_139 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_139 = CONVERT REF_132 to uint128
XXXXX
INTERNAL_CALL, ConcentratedLiquidityPool._updateFees(bool,uint256,uint128)(zeroForOne_1,REF_131,TMP_139)
Internal call...
_updateFees
zeroForOne
REF_131
TMP_139
Function: _updateFees
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[], [], 'u', None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _updateFees
Function Visibility: internal
clearning node...
clearing ir...?
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
has variable
[i] zeroForOne cleared
clearing ir...?
feeGrowthGlobal_1(uint256) := ϕ(['REF_131'])
has variable
[i] feeGrowthGlobal cleared
clearing ir...?
protocolFee_1(uint128) := ϕ(['TMP_139'])
has variable
[i] protocolFee cleared
clearing ir...?
token0ProtocolFee_4(uint128) := ϕ(['token0ProtocolFee_3', 'token0ProtocolFee_5', 'token0ProtocolFee_0', 'token0ProtocolFee_2'])
has variable
clearing ir...?
token1ProtocolFee_5(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_2', 'token1ProtocolFee_0', 'token1ProtocolFee_6'])
has variable
typecheckig node...
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Function name: _updateFees
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal_1(uint256) := ϕ(['REF_131'])
Function name: _updateFees
Phi
[i]Type for feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
protocolFee_1(uint128) := ϕ(['TMP_139'])
Function name: _updateFees
Phi
[i]Type for protocolFee

Name: protocolFee Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0ProtocolFee_4(uint128) := ϕ(['token0ProtocolFee_3', 'token0ProtocolFee_5', 'token0ProtocolFee_0', 'token0ProtocolFee_2'])
Function name: _updateFees
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1ProtocolFee_5(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_2', 'token1ProtocolFee_0', 'token1ProtocolFee_6'])
Function name: _updateFees
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION zeroForOne_1
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
clearning node...
clearing ir...?
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
has variable
typecheckig node...
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
Function name: _updateFees
asgn

Name: feeGrowthGlobal Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal1 Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
XXXXX
clearning node...
clearing ir...?
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
has variable
typecheckig node...
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
Function name: _updateFees
asgn

Name: feeGrowthGlobal Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal0 Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
XXXXX
clearning node...
clearing ir...?
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1
has variable
typecheckig node...
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1
Function name: _updateFees

Name: token1ProtocolFee Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token1ProtocolFee Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1
XXXXX
clearning node...
clearing ir...?
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1
has variable
typecheckig node...
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1
Function name: _updateFees

Name: token0ProtocolFee Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token0ProtocolFee Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1
XXXXX
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_updateFees":
 New undefined nodes- 4
 Old undefined nodes- 0
typecheckig node...
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Function name: _updateFees
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal_1(uint256) := ϕ(['REF_131'])
Function name: _updateFees
Phi
[i]Type for feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
protocolFee_1(uint128) := ϕ(['TMP_139'])
Function name: _updateFees
Phi
[i]Type for protocolFee

Name: protocolFee Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0ProtocolFee_4(uint128) := ϕ(['token0ProtocolFee_3', 'token0ProtocolFee_5', 'token0ProtocolFee_0', 'token0ProtocolFee_2'])
Function name: _updateFees
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1ProtocolFee_5(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_2', 'token1ProtocolFee_0', 'token1ProtocolFee_6'])
Function name: _updateFees
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
typecheckig node...
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
Function name: _updateFees
asgn

Name: feeGrowthGlobal Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal1 Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
XXXXX
typecheckig node...
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
Function name: _updateFees
asgn

Name: feeGrowthGlobal Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal0 Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
XXXXX
typecheckig node...
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1
Function name: _updateFees

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1
XXXXX
typecheckig node...
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1
Function name: _updateFees

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1
XXXXX
typecheckig node...
WORKLIST iteration 1 for function call "_updateFees":
 New undefined nodes- 4
 Old undefined nodes- 4
Saving return values for: _updateFees
done.
This IR caused addback:
INTERNAL_CALL, ConcentratedLiquidityPool._updateFees(bool,uint256,uint128)(zeroForOne_1,REF_131,TMP_139)
XXXXX
clearning node...
clearing ir...?
REF_104(uint256) -> cache_12.input
has variable
clearing ir...?
cache_13(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_12'])
has variable
[i] cache cleared
clearing ir...?
REF_104(-> cache_13) = REF_104 (c)- maxDy_1
has variable
typecheckig node...
REF_104(uint256) -> cache_12.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
currentPrice
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint256
uint256
Final Type: uint256
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_104

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_13(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_12'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input
Finance Type: undef
done.
REF_104(-> cache_13) = REF_104 (c)- maxDy_1
Function name: swap
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: 0
Final dest type: 0

Name: REF_104 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDy Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDy Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_104 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for REF_104

Name: REF_104 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_104 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_70(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
REF_71(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
REF_72(uint256) -> cache_4.input
has variable
clearing ir...?
TMP_111(uint256) = REF_71 (c)* REF_72
has variable
[i] TMP_111 cleared
clearing ir...?
TMP_112(uint256) = liquidityPadded_1 (c)+ TMP_111
has variable
[i] TMP_112 cleared
clearing ir...?
TMP_113(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDivRoundingUp(uint256,uint256,uint256), arguments:['liquidityPadded_1', 'REF_70', 'TMP_112'] 
has variable
[i] TMP_113 cleared
clearing ir...?
TMP_114 = CONVERT TMP_113 to uint256
has variable
[i] TMP_114 cleared
clearing ir...?
newPrice_1(uint256) := TMP_114(uint256)
has variable
[i] newPrice cleared
typecheckig node...
REF_70(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_70

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_71(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_71

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_72(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_72

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_111(uint256) = REF_71 (c)* REF_72
Function name: swap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_111 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_111

Name: TMP_111 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_112(uint256) = liquidityPadded_1 (c)+ TMP_111
Function name: swap

Name: TMP_112 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_111 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_112 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_112

Name: TMP_112 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_112(uint256) = liquidityPadded_1 (c)+ TMP_111
XXXXX
TMP_113(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDivRoundingUp(uint256,uint256,uint256), arguments:['liquidityPadded_1', 'REF_70', 'TMP_112'] 
Function name: swap
Library Call: mulDivRoundingUp
hlc contract name: FullMath func_name: mulDivRoundingUp
('t', [1, 2], [3], 0, None)
liquidityPadded
REF_70
TMP_112
wfc len: 1
Check copy_toekn_tuple
([-1, -1], [-1, -1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_113

Name: TMP_113 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_114 = CONVERT TMP_113 to uint256
Function name: swap

Name: TMP_113 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_114 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_114

Name: TMP_114 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
newPrice_1(uint256) := TMP_114(uint256)
Function name: swap
asgn

Name: TMP_114 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: newPrice Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
cross_2(bool) := True(bool)
has variable
[i] cross cleared
typecheckig node...
cross_2(bool) := True(bool)
Function name: swap
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: cross Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_99(uint256) -> cache_10.input
has variable
clearing ir...?
cache_11(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_10'])
has variable
[i] cache cleared
clearing ir...?
REF_99 (->cache_11) := 0(uint256)
has variable
typecheckig node...
REF_99(uint256) -> cache_10.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
currentPrice
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint256
uint256
Final Type: uint256
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_99

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_11(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_10'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input
Finance Type: undef
done.
REF_99 (->cache_11) := 0(uint256)
Function name: swap
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_99 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_99

Name: REF_99 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_99 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION zeroForOne_1
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
clearning node...
clearing ir...?
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_18,amountOut_1,recipient_1,unwrapBento_1)
typecheckig node...
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_18,amountOut_1,recipient_1,unwrapBento_1)
Internal call...
_transfer
token0
amountOut
recipient
unwrapBento
Function: _transfer
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], 11]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, None, [], 11]
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: _transfer
Function Visibility: internal
clearning node...
clearing ir...?
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
has variable
[i] token cleared
clearing ir...?
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
has variable
[i] shares cleared
clearing ir...?
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
has variable
[i] to cleared
clearing ir...?
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
has variable
[i] unwrapBento cleared
clearing ir...?
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
Function name: _transfer
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
Function name: _transfer
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
done.
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
Function name: _transfer
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Norm: u
LF: MANAGER
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Function name: _transfer
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION unwrapBento_1
typecheckig node...
CONDITION unwrapBento_1
Condition...
Conidtion: 
unwrapBento_1
unwrapBento_1
clearning node...
clearing ir...?
TMP_216 = CONVERT this to address
has variable
[i] TMP_216 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
clearing ir...?
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_216 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_215 = CONVERT this to address
has variable
[i] TMP_215 cleared
clearing ir...?
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
has variable
clearing ir...?
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_215 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
Function name: _transfer
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_13
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token
TMP_215
to
0
shares
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_transfer":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _transfer
done.
clearning node...
clearing ir...?
REF_86(uint256) -> cache_5.input
has variable
clearing ir...?
cache_6(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_5'])
has variable
[i] cache cleared
clearing ir...?
REF_86(-> cache_6) = REF_86 (c)- maxDx_1
has variable
typecheckig node...
REF_86(uint256) -> cache_5.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
currentPrice
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint256
uint256
Final Type: uint256
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_86

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_6(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_5'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input
Finance Type: undef
done.
REF_86(-> cache_6) = REF_86 (c)- maxDx_1
Function name: swap
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: 0
Final dest type: 0

Name: REF_86 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDx Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDx Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_86 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for REF_86

Name: REF_86 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_86 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_115(bool) = nextTickPrice_1 <= newPrice_1
has variable
[i] TMP_115 cleared
clearing ir...?
REF_73(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
TMP_116(bool) = newPrice_1 < REF_73
has variable
[i] TMP_116 cleared
clearing ir...?
TMP_117(bool) = TMP_115 && TMP_116
has variable
[i] TMP_117 cleared
clearing ir...?
TMP_118 = ! TMP_117 
clearing ir...?
CONDITION TMP_118
typecheckig node...
TMP_115(bool) = nextTickPrice_1 <= newPrice_1
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for TMP_115

Name: TMP_115 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
REF_73(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_73

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_116(bool) = newPrice_1 < REF_73
Function name: swap
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_116

Name: TMP_116 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_117(bool) = TMP_115 && TMP_116
Function name: swap
[i]Type for TMP_117

Name: TMP_117 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_118 = ! TMP_117 
[i]Type for TMP_118

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_118
Condition...
Conidtion: 
TMP_118
TMP_118
clearning node...
clearing ir...?
Emit Swap(recipient_1,token1_20,token0_19,inAmount_1,amountOut_1)
typecheckig node...
Emit Swap(recipient_1,token1_20,token0_19,inAmount_1,amountOut_1)
clearning node...
clearing ir...?
cache_14(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_13', 'cache_11'])
has variable
[i] cache cleared
clearing ir...?
output_7(uint256) := ϕ(['output_6', 'output_5'])
has variable
[i] output cleared
clearing ir...?
cross_5(bool) := ϕ(['cross_1', 'cross_4'])
has variable
[i] cross cleared
typecheckig node...
cache_14(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_13', 'cache_11'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
output_7(uint256) := ϕ(['output_6', 'output_5'])
Function name: swap
Phi
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
cross_5(bool) := ϕ(['cross_1', 'cross_4'])
Function name: swap
Phi
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_19,amountOut_1,recipient_1,unwrapBento_1)
typecheckig node...
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_19,amountOut_1,recipient_1,unwrapBento_1)
Internal call...
_transfer
token1
amountOut
recipient
unwrapBento
Function: _transfer
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], 11]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, None, [], 11]
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: _transfer
Function Visibility: internal
clearning node...
clearing ir...?
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
has variable
[i] token cleared
clearing ir...?
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
has variable
[i] shares cleared
clearing ir...?
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
has variable
[i] to cleared
clearing ir...?
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
has variable
[i] unwrapBento cleared
clearing ir...?
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
Function name: _transfer
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
Function name: _transfer
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: transaction fee
done.
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
Function name: _transfer
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Norm: u
LF: MANAGER
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Function name: _transfer
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION unwrapBento_1
typecheckig node...
CONDITION unwrapBento_1
Condition...
Conidtion: 
unwrapBento_1
unwrapBento_1
clearning node...
clearing ir...?
TMP_216 = CONVERT this to address
has variable
[i] TMP_216 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
clearing ir...?
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_216 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_215 = CONVERT this to address
has variable
[i] TMP_215 cleared
clearing ir...?
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
has variable
clearing ir...?
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_215 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
Function name: _transfer
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_13
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token
TMP_215
to
0
shares
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_transfer":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _transfer
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_75(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
TMP_119(uint256) = liquidityPadded_1 (c)/ REF_75
has variable
[i] TMP_119 cleared
clearing ir...?
REF_76(uint256) -> cache_4.input
has variable
clearing ir...?
TMP_120(uint256) = TMP_119 (c)+ REF_76
has variable
[i] TMP_120 cleared
clearing ir...?
TMP_121(uint256) = LIBRARY_CALL, dest:UnsafeMath, function:UnsafeMath.divRoundingUp(uint256,uint256), arguments:['liquidityPadded_1', 'TMP_120'] 
has variable
[i] TMP_121 cleared
clearing ir...?
TMP_122 = CONVERT TMP_121 to uint160
has variable
[i] TMP_122 cleared
clearing ir...?
newPrice_2(uint256) := TMP_122(uint160)
has variable
[i] newPrice cleared
typecheckig node...
REF_75(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_75

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_119(uint256) = liquidityPadded_1 (c)/ REF_75
Function name: swap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_119 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_119

Name: TMP_119 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_119(uint256) = liquidityPadded_1 (c)/ REF_75
XXXXX
REF_76(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_76

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_120(uint256) = TMP_119 (c)+ REF_76
Function name: swap

Name: TMP_120 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_120 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_120

Name: TMP_120 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_121(uint256) = LIBRARY_CALL, dest:UnsafeMath, function:UnsafeMath.divRoundingUp(uint256,uint256), arguments:['liquidityPadded_1', 'TMP_120'] 
Function name: swap
Library Call: divRoundingUp
hlc contract name: UnsafeMath func_name: divRoundingUp
('t', [1], [2], 0, None)
liquidityPadded
TMP_120
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_121

Name: TMP_121 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_122 = CONVERT TMP_121 to uint160
Function name: swap

Name: TMP_121 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_122 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_122

Name: TMP_122 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
newPrice_2(uint256) := TMP_122(uint160)
Function name: swap
asgn

Name: TMP_122 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: newPrice Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
cache_9(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_6', 'cache_0', 'cache_8'])
has variable
[i] cache cleared
clearing ir...?
output_4(uint256) := ϕ(['output_2', 'output_1', 'output_3'])
has variable
[i] output cleared
clearing ir...?
cross_3(bool) := ϕ(['cross_1', 'cross_2'])
has variable
[i] cross cleared
typecheckig node...
cache_9(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_6', 'cache_0', 'cache_8'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
output_4(uint256) := ϕ(['output_2', 'output_1', 'output_3'])
Function name: swap
Phi
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
cross_3(bool) := ϕ(['cross_1', 'cross_2'])
Function name: swap
Phi
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
newPrice_3(uint256) := ϕ(['newPrice_2', 'newPrice_1'])
has variable
[i] newPrice cleared
typecheckig node...
newPrice_3(uint256) := ϕ(['newPrice_2', 'newPrice_1'])
Function name: swap
Phi
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
Emit Swap(recipient_1,token0_20,token1_21,inAmount_1,amountOut_1)
typecheckig node...
Emit Swap(recipient_1,token0_20,token1_21,inAmount_1,amountOut_1)
clearning node...
clearing ir...?
REF_78(uint256) -> cache_4.currentLiquidity
has variable
clearing ir...?
REF_79(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
TMP_123(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_78', 'newPrice_3', 'REF_79', 'False'] 
has variable
[i] TMP_123 cleared
clearing ir...?
output_3(uint256) := TMP_123(uint256)
has variable
[i] output cleared
typecheckig node...
REF_78(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_78

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_79(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_79

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_123(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_78', 'newPrice_3', 'REF_79', 'False'] 
Function name: swap
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
REF_78
newPrice
REF_79
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_123

Name: TMP_123 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
output_3(uint256) := TMP_123(uint256)
Function name: swap
asgn

Name: TMP_123 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: output Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
REF_105(uint256) -> cache_14.totalFeeAmount
has variable
clearing ir...?
REF_106(uint256) -> cache_14.protocolFee
has variable
clearing ir...?
REF_107(uint256) -> cache_14.feeGrowthGlobal
has variable
clearing ir...?
REF_109(uint256) -> cache_14.currentLiquidity
has variable
clearing ir...?
REF_110(uint256) -> cache_14.totalFeeAmount
has variable
clearing ir...?
REF_111(uint256) -> cache_14.protocolFee
has variable
clearing ir...?
REF_112(uint256) -> cache_14.feeGrowthGlobal
has variable
clearing ir...?
TUPLE_9(uint256,uint256,uint256,uint256) = LIBRARY_CALL, dest:SwapLib, function:SwapLib.handleFees(uint256,uint24,uint256,uint256,uint256,uint256,uint256,uint256), arguments:['output_7', 'swapFee_3', 'barFee_3', 'REF_109', 'REF_110', 'amountOut_1', 'REF_111', 'REF_112'] 
has variable
clearing ir...?
REF_105(uint256)= UNPACK TUPLE_9 index: 0 
has variable
clearing ir...?
amountOut_2(uint256)= UNPACK TUPLE_9 index: 1 
has variable
[i] amountOut cleared
clearing ir...?
REF_106(uint256)= UNPACK TUPLE_9 index: 2 
has variable
clearing ir...?
REF_107(uint256)= UNPACK TUPLE_9 index: 3 
has variable
typecheckig node...
REF_105(uint256) -> cache_14.totalFeeAmount
Function name: swap
MEMBER
cache
totalFeeAmount
swap
cache Fields:
^^^
[i]Type for REF_105

Name: cache.totalFeeAmount Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.totalFeeAmount Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_106(uint256) -> cache_14.protocolFee
Function name: swap
MEMBER
cache
protocolFee
swap
cache Fields:
totalFeeAmount
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint256
uint256
Final Type: uint256
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_106

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_107(uint256) -> cache_14.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
totalFeeAmount
protocolFee
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint256
uint256
Final Type: uint256
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_107

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_109(uint256) -> cache_14.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint256
uint256
Final Type: uint256
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_109

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_110(uint256) -> cache_14.totalFeeAmount
Function name: swap
MEMBER
cache
totalFeeAmount
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
^^^

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_110

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_111(uint256) -> cache_14.protocolFee
Function name: swap
MEMBER
cache
protocolFee
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
^^^

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_111

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_112(uint256) -> cache_14.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
^^^

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_112

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_9(uint256,uint256,uint256,uint256) = LIBRARY_CALL, dest:SwapLib, function:SwapLib.handleFees(uint256,uint24,uint256,uint256,uint256,uint256,uint256,uint256), arguments:['output_7', 'swapFee_3', 'barFee_3', 'REF_109', 'REF_110', 'amountOut_1', 'REF_111', 'REF_112'] 
Function name: swap
Library Call: handleFees
hlc contract name: SwapLib func_name: handleFees
('c', [-1], [-1], 0, None)
output
swapFee
barFee
REF_109
REF_110
amountOut
REF_111
REF_112
('c', [-1], [-1], 0, None)
output
swapFee
barFee
REF_109
REF_110
amountOut
REF_111
REF_112
('c', [-1], [-1], 0, None)
output
swapFee
barFee
REF_109
REF_110
amountOut
REF_111
REF_112
('c', [-1], [-1], 0, None)
output
swapFee
barFee
REF_109
REF_110
amountOut
REF_111
REF_112
wfc len: 4
COPIED
[i]Type for TUPLE_9

Name: TUPLE_9 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_105(uint256)= UNPACK TUPLE_9 index: 0 
Function name: swap
Reading tuple TUPLE_9 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_105

Name: REF_105 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_105 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_2(uint256)= UNPACK TUPLE_9 index: 1 
Function name: swap
Reading tuple TUPLE_9 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amountOut

Name: amountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_106(uint256)= UNPACK TUPLE_9 index: 2 
Function name: swap
Reading tuple TUPLE_9 index 2
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_106

Name: REF_106 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_106 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_107(uint256)= UNPACK TUPLE_9 index: 3 
Function name: swap
Reading tuple TUPLE_9 index 3
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_107

Name: REF_107 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_107 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_80(uint256) -> cache_4.currentPrice
has variable
clearing ir...?
cache_7(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
has variable
[i] cache cleared
clearing ir...?
REF_80 (->cache_7) := newPrice_3(uint256)
has variable
typecheckig node...
REF_80(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_80

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_7(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice
Finance Type: undef
done.
REF_80 (->cache_7) := newPrice_3(uint256)
Function name: swap
asgn

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_80 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_80

Name: REF_80 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_80 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_81(uint256) -> cache_7.input
has variable
clearing ir...?
cache_8(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_7'])
has variable
[i] cache cleared
clearing ir...?
REF_81 (->cache_8) := 0(uint256)
has variable
typecheckig node...
REF_81(uint256) -> cache_7.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
currentPrice
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint256
uint256
Final Type: uint256
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_81

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_8(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_7'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input
Finance Type: undef
done.
REF_81 (->cache_8) := 0(uint256)
Function name: swap
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_81 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_81

Name: REF_81 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_81 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION cross_5
typecheckig node...
CONDITION cross_5
Condition...
Conidtion: 
cross_5
cross_5
clearning node...
clearing ir...?
cache_17(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_14'])
has variable
[i] cache cleared
typecheckig node...
cache_17(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_14'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_113(uint256) -> cache_14.currentLiquidity
has variable
clearing ir...?
REF_114(int24) -> cache_14.nextTickToCross
has variable
clearing ir...?
REF_116(int24) -> cache_14.nextTickToCross
has variable
clearing ir...?
REF_117(uint256) -> cache_14.currentLiquidity
has variable
clearing ir...?
REF_118(uint256) -> cache_14.feeGrowthGlobal
has variable
clearing ir...?
TUPLE_10(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_116', 'secondsPerLiquidity_9', 'REF_117', 'REF_118', 'zeroForOne_1'] 
has variable
clearing ir...?
REF_113(uint256)= UNPACK TUPLE_10 index: 0 
has variable
clearing ir...?
REF_114(int24)= UNPACK TUPLE_10 index: 1 
has variable
typecheckig node...
REF_113(uint256) -> cache_14.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_113

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_114(int24) -> cache_14.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: int24
int24
Final Type: int24
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_114

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_116(int24) -> cache_14.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_116

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_117(uint256) -> cache_14.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_117

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_118(uint256) -> cache_14.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
^^^

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_118

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_10(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_116', 'secondsPerLiquidity_9', 'REF_117', 'REF_118', 'zeroForOne_1'] 
Function name: swap
Library Call: cross
hlc contract name: Ticks func_name: cross
('c', [-1], [-1], 0, None)
ticks
REF_116
secondsPerLiquidity
REF_117
REF_118
zeroForOne
('c', [-1], [-1], 0, None)
ticks
REF_116
secondsPerLiquidity
REF_117
REF_118
zeroForOne
wfc len: 2
COPIED
[i]Type for TUPLE_10

Name: TUPLE_10 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_113(uint256)= UNPACK TUPLE_10 index: 0 
Function name: swap
Reading tuple TUPLE_10 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_113

Name: REF_113 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_113 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_114(int24)= UNPACK TUPLE_10 index: 1 
Function name: swap
Reading tuple TUPLE_10 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: int24
int24
Final Type: int24
[i]Type for REF_114

Name: REF_114 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_114 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_119(uint256) -> cache_14.currentLiquidity
has variable
clearing ir...?
TMP_131(bool) = REF_119 == 0
has variable
[i] TMP_131 cleared
clearing ir...?
CONDITION TMP_131
typecheckig node...
REF_119(uint256) -> cache_14.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_119

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_131(bool) = REF_119 == 0
Function name: swap
[i]Type for TMP_131

Name: TMP_131 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_131
Condition...
Conidtion: 
TMP_131
TMP_131
clearning node...
clearing ir...?
cache_16(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_15', 'cache_14'])
has variable
[i] cache cleared
typecheckig node...
cache_16(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_15', 'cache_14'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_120(uint256) -> cache_14.currentPrice
has variable
clearing ir...?
REF_122(int24) -> cache_14.nextTickToCross
has variable
clearing ir...?
TMP_132(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_122'] 
has variable
[i] TMP_132 cleared
clearing ir...?
TMP_133 = CONVERT TMP_132 to uint256
has variable
[i] TMP_133 cleared
clearing ir...?
cache_15(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14'])
has variable
[i] cache cleared
clearing ir...?
REF_120 (->cache_15) := TMP_133(uint256)
has variable
typecheckig node...
REF_120(uint256) -> cache_14.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint256
uint256
Final Type: uint256
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_120

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_122(int24) -> cache_14.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_122

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_132(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_122'] 
Function name: swap
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
REF_122
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_132

Name: TMP_132 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_133 = CONVERT TMP_132 to uint256
Function name: swap

Name: TMP_132 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_133 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_133

Name: TMP_133 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
cache_15(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice
Finance Type: undef
done.
REF_120 (->cache_15) := TMP_133(uint256)
Function name: swap
asgn

Name: TMP_133 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_120 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for REF_120

Name: REF_120 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_120 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_123(uint256) -> cache_15.currentLiquidity
has variable
clearing ir...?
REF_124(int24) -> cache_15.nextTickToCross
has variable
clearing ir...?
REF_126(int24) -> cache_15.nextTickToCross
has variable
clearing ir...?
REF_127(uint256) -> cache_15.currentLiquidity
has variable
clearing ir...?
REF_128(uint256) -> cache_15.feeGrowthGlobal
has variable
clearing ir...?
TUPLE_11(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_126', 'secondsPerLiquidity_9', 'REF_127', 'REF_128', 'zeroForOne_1'] 
has variable
clearing ir...?
REF_123(uint256)= UNPACK TUPLE_11 index: 0 
has variable
clearing ir...?
REF_124(int24)= UNPACK TUPLE_11 index: 1 
has variable
typecheckig node...
REF_123(uint256) -> cache_15.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
currentPrice
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint256
uint256
Final Type: uint256
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_123

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_124(int24) -> cache_15.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
currentPrice
currentLiquidity
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: int24
int24
Final Type: int24
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_124

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_126(int24) -> cache_15.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
currentPrice
currentLiquidity
nextTickToCross
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_126

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_127(uint256) -> cache_15.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
currentPrice
currentLiquidity
nextTickToCross
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_127

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_128(uint256) -> cache_15.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
currentPrice
currentLiquidity
nextTickToCross
^^^
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: uint256
uint256
Final Type: uint256
Check copy_toekn_tuple
([-1], [-1], 'u', None)
----
Type: None
None
Final Type: None
[i]Type for REF_128

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_11(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_126', 'secondsPerLiquidity_9', 'REF_127', 'REF_128', 'zeroForOne_1'] 
Function name: swap
Library Call: cross
hlc contract name: Ticks func_name: cross
('c', [-1], [-1], 0, None)
ticks
REF_126
secondsPerLiquidity
REF_127
REF_128
zeroForOne
('c', [-1], [-1], 0, None)
ticks
REF_126
secondsPerLiquidity
REF_127
REF_128
zeroForOne
wfc len: 2
COPIED
[i]Type for TUPLE_11

Name: TUPLE_11 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_123(uint256)= UNPACK TUPLE_11 index: 0 
Function name: swap
Reading tuple TUPLE_11 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_123

Name: REF_123 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_123 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_124(int24)= UNPACK TUPLE_11 index: 1 
Function name: swap
Reading tuple TUPLE_11 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: int24
int24
Final Type: int24
[i]Type for REF_124

Name: REF_124 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_124 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "swap":
 New undefined nodes- 13
 Old undefined nodes- 0
typecheckig node...
swapFee_2(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
Function name: swap
Phi
[i]Type for swapFee

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0_15(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: swap
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_16(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: swap
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidity_10(uint128) := ϕ(['liquidity_4', 'liquidity_3', 'liquidity_5', 'liquidity_0', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9'])
Function name: swap
Phi
[i]Type for liquidity

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsPerLiquidity_7(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Function name: swap
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lastObservation_1(uint32) := ϕ(['lastObservation_0', 'lastObservation_3', 'lastObservation_2'])
Function name: swap
Phi
[i]Type for lastObservation

Name: lastObservation Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal0_7(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
Function name: swap
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
feeGrowthGlobal1_7(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
Function name: swap
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
barFee_2(uint256) := ϕ(['barFee_1', 'barFee_3', 'barFee_4', 'barFee_0'])
Function name: swap
Phi
[i]Type for barFee

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price_6(uint160) := ϕ(['price_0', 'price_8', 'price_3', 'price_1', 'price_5'])
Function name: swap
Phi
[i]Type for price

Name: price Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_15(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: swap
Phi
[i]Type for nearestTick

Name: nearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_14(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: swap
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Internal call...
lock
Function: lock
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
TUPLE_8(bool,uint256,address,bool) = SOLIDITY_CALL abi.decode()(data_1(bool,uint256,address,bool))
[i]Type for TUPLE_8

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
zeroForOne_1(bool)= UNPACK TUPLE_8 index: 0 
Function name: swap
Reading tuple TUPLE_8 index 0
Finding type for zeroForOne...
bool
SKIP bool
[i]Type for zeroForOne

Name: zeroForOne Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
inAmount_1(uint256)= UNPACK TUPLE_8 index: 1 
Function name: swap
Reading tuple TUPLE_8 index 1
Finding type for inAmount...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: inAmount Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for inAmount

Name: inAmount Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
recipient_1(address)= UNPACK TUPLE_8 index: 2 
Function name: swap
Reading tuple TUPLE_8 index 2
Finding type for recipient...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: recipient Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for recipient

Name: recipient Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool)= UNPACK TUPLE_8 index: 3 
Function name: swap
Reading tuple TUPLE_8 index 3
Finding type for unwrapBento...
bool
SKIP bool
[i]Type for unwrapBento

Name: unwrapBento Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
typecheckig node...
TMP_149 = CONVERT price_7 to uint256
Function name: swap

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_149 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_149

Name: TMP_149 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_150 = CONVERT liquidity_11 to uint256
Function name: swap

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_150 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_133(Ticks.Tick) -> ticks_15[nearestTick_16]
Function name: swap
INDEX

Name: None Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: nextTick, previousTick
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_133

Name: None Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: nextTick, previousTick
Finance Type: undef
done.
REF_134(int24) -> REF_133.nextTick
Function name: swap
MEMBER
REF_133
nextTick
swap
REF_133 Fields:
nextTick
previousTick
^^^

Name: nextTick Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_134

Name: REF_133.nextTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_133.nextTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTick Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151 = new SwapCache(0,0,0,feeGrowthGlobal0_8,TMP_149,TMP_150,inAmount_1,REF_134)
[i]Type for TMP_151

Name: TMP_151 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_1(ConcentratedLiquidityPool.SwapCache) := TMP_151(ConcentratedLiquidityPool.SwapCache)
Function name: swap
asgn

Name: TMP_151 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
cache_1(ConcentratedLiquidityPool.SwapCache) := TMP_151(ConcentratedLiquidityPool.SwapCache)
XXXXX
typecheckig node...
TMP_146 = CONVERT price_7 to uint256
Function name: swap

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_146 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_147 = CONVERT liquidity_11 to uint256
Function name: swap

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_147 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_147

Name: TMP_147 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_148 = new SwapCache(0,0,0,feeGrowthGlobal1_8,TMP_146,TMP_147,inAmount_1,nearestTick_16)
[i]Type for TMP_148

Name: TMP_148 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_2(ConcentratedLiquidityPool.SwapCache) := TMP_148(ConcentratedLiquidityPool.SwapCache)
Function name: swap
asgn

Name: TMP_148 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
cache_2(ConcentratedLiquidityPool.SwapCache) := TMP_148(ConcentratedLiquidityPool.SwapCache)
XXXXX
typecheckig node...
cache_3(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_1', 'cache_2'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
timestamp_1(uint256) := block.timestamp(uint256)
Function name: swap
asgn
block.timestamp

Name: timestamp Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
not variable
[i]Type for timestamp

Name: timestamp Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
timestamp_1(uint256) := block.timestamp(uint256)
XXXXX
typecheckig node...
TMP_96 = CONVERT lastObservation_2 to uint256
Function name: swap

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_96 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_96

Name: TMP_96 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_97(uint256) = timestamp_1 (c)- TMP_96
Function name: swap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: timestamp Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_96 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_96 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_97 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_97

Name: TMP_97 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_97(uint256) = timestamp_1 (c)- TMP_96
XXXXX
diff_1(uint256) := TMP_97(uint256)
Function name: swap
asgn

Name: TMP_97 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: diff Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for diff

Name: diff Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_98(bool) = diff_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_98

Name: TMP_98 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_99(bool) = liquidity_11 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_99

Name: TMP_99 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_100(bool) = TMP_98 && TMP_99
Function name: swap
[i]Type for TMP_100

Name: TMP_100 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_100
Condition...
Conidtion: 
TMP_100
TMP_100
typecheckig node...
typecheckig node...
TMP_101 = CONVERT timestamp_1 to uint32
Function name: swap

Name: timestamp Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_101 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_101

Name: TMP_101 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_101 = CONVERT timestamp_1 to uint32
XXXXX
lastObservation_3(uint32) := TMP_101(uint32)
Function name: swap
asgn

Name: TMP_101 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lastObservation Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for lastObservation

Name: lastObservation Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
lastObservation_3(uint32) := TMP_101(uint32)
XXXXX
typecheckig node...
typecheckig node...
TMP_102(uint256) = diff_1 << 128
Function name: swap
[i]Type for TMP_102

Name: TMP_102 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_103(uint256) = TMP_102 (c)/ liquidity_11
Function name: swap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_103

Name: TMP_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_103(uint256) = TMP_102 (c)/ liquidity_11
XXXXX
TMP_104 = CONVERT TMP_103 to uint160
Function name: swap

Name: TMP_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_104 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_104

Name: TMP_104 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsPerLiquidity_9(uint160) = secondsPerLiquidity_8 (c)+ TMP_104
Function name: swap

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_104 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
amountOut_1(uint256) := ϕ(['amountOut_0', 'amountOut_2'])
Function name: swap
Phi
[i]Type for amountOut

Name: amountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
cache_4(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_0', 'cache_14'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
done.
REF_61(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_61

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_105(bool) = REF_61 != 0
Function name: swap
[i]Type for TMP_105

Name: TMP_105 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_105
Condition...
Conidtion: 
TMP_105
TMP_105
typecheckig node...
typecheckig node...
REF_129(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_129

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_134 = CONVERT REF_129 to uint160
Function name: swap

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_134 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_134

Name: TMP_134 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price_8(uint160) := TMP_134(uint160)
Function name: swap
asgn

Name: TMP_134 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for price

Name: price Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_63(int24) -> cache_4.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_63

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_106(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_63'] 
Function name: swap
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
REF_63
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_106

Name: TMP_106 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_107 = CONVERT TMP_106 to uint256
Function name: swap

Name: TMP_106 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_107 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_107

Name: TMP_107 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
nextTickPrice_1(uint256) := TMP_107(uint256)
Function name: swap
asgn

Name: TMP_107 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
typecheckig node...
output_1(uint256) := 0(uint256)
Function name: swap
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: output Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_135(int24) -> cache_4.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_135

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
newNearestTick_2(int24) := REF_135(int24)
Function name: swap
asgn

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newNearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
cross_1(bool) := False(bool)
Function name: swap
asgn
val: False

Name: False Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: False
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_136(int24) -> cache_4.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_136

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_137(Ticks.Tick) -> ticks_15[REF_136]
Function name: swap
INDEX

Name: None Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: nextTick, previousTick
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_137

Name: None Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: nextTick, previousTick
Finance Type: undef
done.
REF_138(int24) -> REF_137.previousTick
Function name: swap
MEMBER
REF_137
previousTick
swap
REF_137 Fields:
nextTick
previousTick
^^^

Name: previousTick Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_138

Name: REF_137.previousTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_137.previousTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: previousTick Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
newNearestTick_1(int24) := REF_138(int24)
Function name: swap
asgn

Name: REF_137.previousTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newNearestTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
newNearestTick_3(int24) := ϕ(['newNearestTick_1', 'newNearestTick_2'])
Function name: swap
Phi
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_135(bool) = nearestTick_16 != newNearestTick_3
Function name: swap
[i]Type for TMP_135

Name: TMP_135 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_135
Condition...
Conidtion: 
TMP_135
TMP_135
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
typecheckig node...
REF_65(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_65

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_66(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_66

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_108(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_65', 'nextTickPrice_1', 'REF_66', 'False'] 
Function name: swap
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
REF_65
nextTickPrice
REF_66
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_108

Name: TMP_108 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
maxDx_1(uint256) := TMP_108(uint256)
Function name: swap
asgn

Name: TMP_108 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDx Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for maxDx

Name: maxDx Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
typecheckig node...
REF_88(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_88

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_89(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_89

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_125(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_88', 'REF_89', 'nextTickPrice_1', 'False'] 
Function name: swap
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
REF_88
REF_89
nextTickPrice
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_125

Name: TMP_125 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
maxDy_1(uint256) := TMP_125(uint256)
Function name: swap
asgn

Name: TMP_125 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDy Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for maxDy

Name: maxDy Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
nearestTick_17(int24) := newNearestTick_3(int24)
Function name: swap
asgn

Name: newNearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nearestTick Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nearestTick

Name: nearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_67(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_67

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_109(bool) = REF_67 <= maxDx_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0
[i]Type for TMP_109

Name: TMP_109 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_109
Condition...
Conidtion: 
TMP_109
TMP_109
typecheckig node...
REF_90(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_90

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_126(bool) = REF_90 <= maxDy_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0
[i]Type for TMP_126

Name: TMP_126 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_126
Condition...
Conidtion: 
TMP_126
TMP_126
typecheckig node...
REF_91(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_91

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_93(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_93

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_94(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_94

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_127(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['REF_93', '79228162514264337593543950336', 'REF_94'] 
Function name: swap
Library Call: mulDiv
hlc contract name: FullMath func_name: mulDiv
('t', [1, 2], [3], 0, None, 11)
REF_93
79228162514264337593543950336
REF_94
wfc len: 1
Check copy_toekn_tuple
([-1, -1], [-1, -1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_127

Name: TMP_127 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
TMP_128(uint256) = REF_91 (c)+ TMP_127
Function name: swap

Name: TMP_128 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
initlize checks
;;;
lnorm: u rnorm: 0
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 11, Left type: -1
Final dest type: 11

Name: TMP_127 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_128 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
[i]Type for TMP_128

Name: TMP_128 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
newPrice_scope_0_1(uint256) := TMP_128(uint256)
Function name: swap
asgn

Name: TMP_128 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for newPrice_scope_0

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
typecheckig node...
REF_130(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_130

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_136 = CONVERT REF_130 to uint128
Function name: swap

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_136 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_136

Name: TMP_136 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidity_12(uint128) := TMP_136(uint128)
Function name: swap
asgn

Name: TMP_136 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for liquidity

Name: liquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_101(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_101

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_102(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_102

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_130(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_101', 'REF_102', 'nextTickPrice_1', 'False'] 
Function name: swap
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
REF_101
REF_102
nextTickPrice
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_130

Name: TMP_130 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
output_6(uint256) := TMP_130(uint256)
Function name: swap
asgn

Name: TMP_130 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
TMP_137 = CONVERT inAmount_1 to uint128
Function name: swap

Name: inAmount Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_137 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_137

Name: TMP_137 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, ConcentratedLiquidityPool._updateReserves(bool,uint128,uint256)(zeroForOne_1,TMP_137,amountOut_1)
Internal call...
_updateReserves
zeroForOne
TMP_137
amountOut
Function: _updateReserves
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _updateReserves
Function Visibility: internal
clearning node...
clearing ir...?
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
has variable
[i] zeroForOne cleared
clearing ir...?
inAmount_1(uint128) := ϕ(['TMP_137'])
has variable
[i] inAmount cleared
clearing ir...?
amountOut_1(uint256) := ϕ(['amountOut_1'])
has variable
[i] amountOut cleared
clearing ir...?
token0_24(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_26(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
has variable
clearing ir...?
reserve0_25(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
has variable
clearing ir...?
reserve1_27(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
has variable
typecheckig node...
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Function name: _updateReserves
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
inAmount_1(uint128) := ϕ(['TMP_137'])
Function name: _updateReserves
Phi
[i]Type for inAmount

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := ϕ(['amountOut_1'])
Function name: _updateReserves
Phi
[i]Type for amountOut

Name: amountOut Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0_24(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _updateReserves
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_26(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: _updateReserves
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_25(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: _updateReserves
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve1_27(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: _updateReserves
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
CONDITION zeroForOne_1
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
clearning node...
clearing ir...?
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
has variable
[i] TMP_190 cleared
clearing ir...?
balance0_1(uint256) := TMP_190(uint256)
has variable
[i] balance0 cleared
typecheckig node...
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
Function name: _updateReserves
Internal call...
_balance
token0
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_190

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance0_1(uint256) := TMP_190(uint256)
Function name: _updateReserves
asgn

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance0

Name: balance0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
balance0_1(uint256) := TMP_190(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_191(uint128) = reserve0_28 (c)+ inAmount_1
has variable
[i] TMP_191 cleared
clearing ir...?
newBalance_1(uint128) := TMP_191(uint128)
has variable
[i] newBalance cleared
typecheckig node...
TMP_191(uint128) = reserve0_28 (c)+ inAmount_1
Function name: _updateReserves

Name: TMP_191 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_191 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_191

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
newBalance_1(uint128) := TMP_191(uint128)
Function name: _updateReserves
asgn

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: newBalance Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
has variable
[i] TMP_196 cleared
clearing ir...?
balance1_1(uint256) := TMP_196(uint256)
has variable
[i] balance1 cleared
typecheckig node...
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
Function name: _updateReserves
Internal call...
_balance
token1
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_196

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance1_1(uint256) := TMP_196(uint256)
Function name: _updateReserves
asgn

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
balance1_1(uint256) := TMP_196(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_192 = CONVERT newBalance_1 to uint256
has variable
[i] TMP_192 cleared
clearing ir...?
TMP_193(bool) = TMP_192 <= balance0_1
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
typecheckig node...
TMP_192 = CONVERT newBalance_1 to uint256
Function name: _updateReserves

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_192 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_192

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
TMP_193(bool) = TMP_192 <= balance0_1
Function name: _updateReserves
testing lt...
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_193 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_193

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
TMP_193(bool) = TMP_192 <= balance0_1
XXXXX
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
reserve0_29(uint128) := newBalance_1(uint128)
has variable
typecheckig node...
reserve0_29(uint128) := newBalance_1(uint128)
Function name: _updateReserves
asgn

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
TMP_197(uint128) = reserve1_28 (c)+ inAmount_1
has variable
[i] TMP_197 cleared
clearing ir...?
newBalance_scope_0_1(uint128) := TMP_197(uint128)
has variable
[i] newBalance_scope_0 cleared
typecheckig node...
TMP_197(uint128) = reserve1_28 (c)+ inAmount_1
Function name: _updateReserves

Name: TMP_197 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_197 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_197

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
newBalance_scope_0_1(uint128) := TMP_197(uint128)
Function name: _updateReserves
asgn

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: newBalance_scope_0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199(bool) = TMP_198 <= balance1_1
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
typecheckig node...
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
Function name: _updateReserves

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_198 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_198

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
TMP_199(bool) = TMP_198 <= balance1_1
Function name: _updateReserves
testing lt...
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_199 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_199

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
TMP_199(bool) = TMP_198 <= balance1_1
XXXXX
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT amountOut_1 to uint128
has variable
[i] TMP_195 cleared
clearing ir...?
reserve1_31(uint128) = reserve1_30 (c)- TMP_195
has variable
typecheckig node...
TMP_195 = CONVERT amountOut_1 to uint128
Function name: _updateReserves

Name: amountOut Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_195

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve1_31(uint128) = reserve1_30 (c)- TMP_195
Function name: _updateReserves
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
reserve1_29(uint128) := newBalance_scope_0_1(uint128)
has variable
typecheckig node...
reserve1_29(uint128) := newBalance_scope_0_1(uint128)
Function name: _updateReserves
asgn

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
reserve1_32(uint128) := ϕ(['reserve1_29', 'reserve1_31'])
has variable
clearing ir...?
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
has variable
typecheckig node...
reserve1_32(uint128) := ϕ(['reserve1_29', 'reserve1_31'])
Function name: _updateReserves
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
Function name: _updateReserves
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
TMP_201 = CONVERT amountOut_1 to uint128
has variable
[i] TMP_201 cleared
clearing ir...?
reserve0_27(uint128) = reserve0_26 (c)- TMP_201
has variable
typecheckig node...
TMP_201 = CONVERT amountOut_1 to uint128
Function name: _updateReserves

Name: amountOut Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_201

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_27(uint128) = reserve0_26 (c)- TMP_201
Function name: _updateReserves
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
WORKLIST iteration 0 for function call "_updateReserves":
 New undefined nodes- 4
 Old undefined nodes- 0
typecheckig node...
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Function name: _updateReserves
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
inAmount_1(uint128) := ϕ(['TMP_137'])
Function name: _updateReserves
Phi
[i]Type for inAmount

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := ϕ(['amountOut_1'])
Function name: _updateReserves
Phi
[i]Type for amountOut

Name: amountOut Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0_24(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _updateReserves
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_26(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: _updateReserves
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_25(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: _updateReserves
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve1_27(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: _updateReserves
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
typecheckig node...
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
Function name: _updateReserves
Internal call...
_balance
token0
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_190

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance0_1(uint256) := TMP_190(uint256)
Function name: _updateReserves
asgn

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance0

Name: balance0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
balance0_1(uint256) := TMP_190(uint256)
XXXXX
typecheckig node...
TMP_191(uint128) = reserve0_28 (c)+ inAmount_1
Function name: _updateReserves

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_191

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
newBalance_1(uint128) := TMP_191(uint128)
Function name: _updateReserves
asgn

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
Function name: _updateReserves
Internal call...
_balance
token1
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_196

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance1_1(uint256) := TMP_196(uint256)
Function name: _updateReserves
asgn

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
balance1_1(uint256) := TMP_196(uint256)
XXXXX
typecheckig node...
TMP_192 = CONVERT newBalance_1 to uint256
Function name: _updateReserves

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_192

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
TMP_193(bool) = TMP_192 <= balance0_1
Function name: _updateReserves
testing lt...
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_193

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
TMP_193(bool) = TMP_192 <= balance0_1
XXXXX
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
reserve0_29(uint128) := newBalance_1(uint128)
Function name: _updateReserves
asgn

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
TMP_197(uint128) = reserve1_28 (c)+ inAmount_1
Function name: _updateReserves

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_197

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
newBalance_scope_0_1(uint128) := TMP_197(uint128)
Function name: _updateReserves
asgn

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
Function name: _updateReserves

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_198

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
TMP_199(bool) = TMP_198 <= balance1_1
Function name: _updateReserves
testing lt...
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_199

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
TMP_199(bool) = TMP_198 <= balance1_1
XXXXX
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_195 = CONVERT amountOut_1 to uint128
Function name: _updateReserves

Name: amountOut Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_195

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve1_31(uint128) = reserve1_30 (c)- TMP_195
Function name: _updateReserves
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
reserve1_29(uint128) := newBalance_scope_0_1(uint128)
Function name: _updateReserves
asgn

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
reserve1_32(uint128) := ϕ(['reserve1_29', 'reserve1_31'])
Function name: _updateReserves
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
Function name: _updateReserves
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
TMP_201 = CONVERT amountOut_1 to uint128
Function name: _updateReserves

Name: amountOut Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_201

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_27(uint128) = reserve0_26 (c)- TMP_201
Function name: _updateReserves
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
WORKLIST iteration 1 for function call "_updateReserves":
 New undefined nodes- 4
 Old undefined nodes- 4
Saving return values for: _updateReserves
done.
This IR caused addback:
INTERNAL_CALL, ConcentratedLiquidityPool._updateReserves(bool,uint128,uint256)(zeroForOne_1,TMP_137,amountOut_1)
XXXXX
token0_17(address) := ϕ(['token0_25'])
Function name: swap
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_18(address) := ϕ(['token1_27'])
Function name: swap
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_103(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_103

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_12(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice, input
Finance Type: undef
done.
REF_103 (->cache_12) := nextTickPrice_1(uint256)
Function name: swap
asgn

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for REF_103

Name: REF_103 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_68(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_68

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_110(uint256) = REF_68 << 96
Function name: swap
[i]Type for TMP_110

Name: TMP_110 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidityPadded_1(uint256) := TMP_110(uint256)
Function name: swap
asgn

Name: TMP_110 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidityPadded Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for liquidityPadded

Name: liquidityPadded Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
liquidityPadded_1(uint256) := TMP_110(uint256)
XXXXX
typecheckig node...
REF_96(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_96

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_97(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_97

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_129(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_96', 'REF_97', 'newPrice_scope_0_1', 'False'] 
Function name: swap
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
REF_96
REF_97
newPrice_scope_0
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_129

Name: TMP_129 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
output_5(uint256) := TMP_129(uint256)
Function name: swap
asgn

Name: TMP_129 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
REF_83(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_83

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_84(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_84

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_124(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_83', 'nextTickPrice_1', 'REF_84', 'False'] 
Function name: swap
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
REF_83
nextTickPrice
REF_84
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_124

Name: TMP_124 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
output_2(uint256) := TMP_124(uint256)
Function name: swap
asgn

Name: TMP_124 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
cross_4(bool) := True(bool)
Function name: swap
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_85(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_85

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_5(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice, input
Finance Type: undef
done.
REF_85 (->cache_5) := nextTickPrice_1(uint256)
Function name: swap
asgn

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_85 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for REF_85

Name: REF_85 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_85 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_98(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_98

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_10(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice, input
Finance Type: undef
done.
REF_98 (->cache_10) := newPrice_scope_0_1(uint256)
Function name: swap
asgn

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: REF_98 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for REF_98

Name: REF_98 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: REF_98 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_131(uint256) -> cache_4.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_131

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_132(uint256) -> cache_4.protocolFee
Function name: swap
MEMBER
cache
protocolFee
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_132

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_139 = CONVERT REF_132 to uint128
Function name: swap

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_139 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_139

Name: TMP_139 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, ConcentratedLiquidityPool._updateFees(bool,uint256,uint128)(zeroForOne_1,REF_131,TMP_139)
Internal call...
_updateFees
zeroForOne
REF_131
TMP_139
Function: _updateFees
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[], [], 'u', None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _updateFees
Function Visibility: internal
clearning node...
clearing ir...?
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
has variable
[i] zeroForOne cleared
clearing ir...?
feeGrowthGlobal_1(uint256) := ϕ(['REF_131'])
has variable
[i] feeGrowthGlobal cleared
clearing ir...?
protocolFee_1(uint128) := ϕ(['TMP_139'])
has variable
[i] protocolFee cleared
clearing ir...?
token0ProtocolFee_4(uint128) := ϕ(['token0ProtocolFee_3', 'token0ProtocolFee_5', 'token0ProtocolFee_0', 'token0ProtocolFee_2'])
has variable
clearing ir...?
token1ProtocolFee_5(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_2', 'token1ProtocolFee_0', 'token1ProtocolFee_6'])
has variable
typecheckig node...
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Function name: _updateFees
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal_1(uint256) := ϕ(['REF_131'])
Function name: _updateFees
Phi
[i]Type for feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
protocolFee_1(uint128) := ϕ(['TMP_139'])
Function name: _updateFees
Phi
[i]Type for protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0ProtocolFee_4(uint128) := ϕ(['token0ProtocolFee_3', 'token0ProtocolFee_5', 'token0ProtocolFee_0', 'token0ProtocolFee_2'])
Function name: _updateFees
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1ProtocolFee_5(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_2', 'token1ProtocolFee_0', 'token1ProtocolFee_6'])
Function name: _updateFees
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION zeroForOne_1
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
clearning node...
clearing ir...?
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
has variable
typecheckig node...
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
Function name: _updateFees
asgn

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal1 Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
has variable
typecheckig node...
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
Function name: _updateFees
asgn

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal0 Function: _updateFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1
has variable
typecheckig node...
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1
Function name: _updateFees

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1
has variable
typecheckig node...
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1
Function name: _updateFees

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_updateFees":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _updateFees
done.
typecheckig node...
REF_104(uint256) -> cache_12.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
currentPrice
input
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_104

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_13(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_12'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input
Finance Type: undef
done.
REF_104(-> cache_13) = REF_104 (c)- maxDy_1
Function name: swap
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: 0
Final dest type: 0

Name: REF_104 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDy Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDy Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_104 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for REF_104

Name: REF_104 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_104 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_70(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_70

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_71(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_71

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_72(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_72

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_111(uint256) = REF_71 (c)* REF_72
Function name: swap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_111 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_111

Name: TMP_111 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_112(uint256) = liquidityPadded_1 (c)+ TMP_111
Function name: swap

Name: TMP_112 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_111 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_112 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_112

Name: TMP_112 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_112(uint256) = liquidityPadded_1 (c)+ TMP_111
XXXXX
TMP_113(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDivRoundingUp(uint256,uint256,uint256), arguments:['liquidityPadded_1', 'REF_70', 'TMP_112'] 
Function name: swap
Library Call: mulDivRoundingUp
hlc contract name: FullMath func_name: mulDivRoundingUp
('t', [1, 2], [3], 0, None)
liquidityPadded
REF_70
TMP_112
wfc len: 1
Check copy_toekn_tuple
([-1, -1], [-1, -1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_113

Name: TMP_113 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_114 = CONVERT TMP_113 to uint256
Function name: swap

Name: TMP_113 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_114 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_114

Name: TMP_114 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
newPrice_1(uint256) := TMP_114(uint256)
Function name: swap
asgn

Name: TMP_114 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
cross_2(bool) := True(bool)
Function name: swap
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_99(uint256) -> cache_10.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
currentPrice
input
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_99

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_11(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_10'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input
Finance Type: undef
done.
REF_99 (->cache_11) := 0(uint256)
Function name: swap
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_99 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_99

Name: REF_99 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_99 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
typecheckig node...
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_18,amountOut_1,recipient_1,unwrapBento_1)
Internal call...
_transfer
token0
amountOut
recipient
unwrapBento
Function: _transfer
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], 11]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, None, [], 11]
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: _transfer
Function Visibility: internal
clearning node...
clearing ir...?
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
has variable
[i] token cleared
clearing ir...?
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
has variable
[i] shares cleared
clearing ir...?
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
has variable
[i] to cleared
clearing ir...?
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
has variable
[i] unwrapBento cleared
clearing ir...?
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
Function name: _transfer
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
Function name: _transfer
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
Function name: _transfer
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Norm: u
LF: MANAGER
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Function name: _transfer
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION unwrapBento_1
typecheckig node...
CONDITION unwrapBento_1
Condition...
Conidtion: 
unwrapBento_1
unwrapBento_1
clearning node...
clearing ir...?
TMP_216 = CONVERT this to address
has variable
[i] TMP_216 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
clearing ir...?
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_216 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_215 = CONVERT this to address
has variable
[i] TMP_215 cleared
clearing ir...?
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
has variable
clearing ir...?
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_215 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
Function name: _transfer
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_13
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token
TMP_215
to
0
shares
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_transfer":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _transfer
done.
typecheckig node...
REF_86(uint256) -> cache_5.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
currentPrice
input
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_86

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_6(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_5'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input
Finance Type: undef
done.
REF_86(-> cache_6) = REF_86 (c)- maxDx_1
Function name: swap
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: 0
Final dest type: 0

Name: REF_86 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDx Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDx Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_86 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for REF_86

Name: REF_86 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_86 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_115(bool) = nextTickPrice_1 <= newPrice_1
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for TMP_115

Name: TMP_115 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
REF_73(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_73

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_116(bool) = newPrice_1 < REF_73
Function name: swap
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_116

Name: TMP_116 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_117(bool) = TMP_115 && TMP_116
Function name: swap
[i]Type for TMP_117

Name: TMP_117 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_118 = ! TMP_117 
[i]Type for TMP_118

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_118
Condition...
Conidtion: 
TMP_118
TMP_118
typecheckig node...
Emit Swap(recipient_1,token1_20,token0_19,inAmount_1,amountOut_1)
typecheckig node...
cache_14(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_13', 'cache_11'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: totalFeeAmount, protocolFee, feeGrowthGlobal, currentLiquidity, nextTickToCross, currentPrice
Finance Type: undef
done.
output_7(uint256) := ϕ(['output_6', 'output_5'])
Function name: swap
Phi
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
cross_5(bool) := ϕ(['cross_1', 'cross_4'])
Function name: swap
Phi
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_19,amountOut_1,recipient_1,unwrapBento_1)
Internal call...
_transfer
token1
amountOut
recipient
unwrapBento
Function: _transfer
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], 11]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, None, [], 11]
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: _transfer
Function Visibility: internal
clearning node...
clearing ir...?
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
has variable
[i] token cleared
clearing ir...?
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
has variable
[i] shares cleared
clearing ir...?
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
has variable
[i] to cleared
clearing ir...?
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
has variable
[i] unwrapBento cleared
clearing ir...?
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
Function name: _transfer
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
Function name: _transfer
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
Function name: _transfer
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Norm: u
LF: MANAGER
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Function name: _transfer
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION unwrapBento_1
typecheckig node...
CONDITION unwrapBento_1
Condition...
Conidtion: 
unwrapBento_1
unwrapBento_1
clearning node...
clearing ir...?
TMP_216 = CONVERT this to address
has variable
[i] TMP_216 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
clearing ir...?
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_216 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_215 = CONVERT this to address
has variable
[i] TMP_215 cleared
clearing ir...?
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
has variable
clearing ir...?
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_215 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
Function name: _transfer
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_13
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token
TMP_215
to
0
shares
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_transfer":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _transfer
done.
typecheckig node...
typecheckig node...
REF_75(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_75

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_119(uint256) = liquidityPadded_1 (c)/ REF_75
Function name: swap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_119 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_119

Name: TMP_119 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_119(uint256) = liquidityPadded_1 (c)/ REF_75
XXXXX
REF_76(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_76

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_120(uint256) = TMP_119 (c)+ REF_76
Function name: swap

Name: TMP_120 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_120 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_120

Name: TMP_120 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_121(uint256) = LIBRARY_CALL, dest:UnsafeMath, function:UnsafeMath.divRoundingUp(uint256,uint256), arguments:['liquidityPadded_1', 'TMP_120'] 
Function name: swap
Library Call: divRoundingUp
hlc contract name: UnsafeMath func_name: divRoundingUp
('t', [1], [2], 0, None)
liquidityPadded
TMP_120
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_121

Name: TMP_121 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_122 = CONVERT TMP_121 to uint160
Function name: swap

Name: TMP_121 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_122 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_122

Name: TMP_122 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
newPrice_2(uint256) := TMP_122(uint160)
Function name: swap
asgn

Name: TMP_122 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
cache_9(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_6', 'cache_0', 'cache_8'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
output_4(uint256) := ϕ(['output_2', 'output_1', 'output_3'])
Function name: swap
Phi
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
cross_3(bool) := ϕ(['cross_1', 'cross_2'])
Function name: swap
Phi
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
newPrice_3(uint256) := ϕ(['newPrice_2', 'newPrice_1'])
Function name: swap
Phi
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
Emit Swap(recipient_1,token0_20,token1_21,inAmount_1,amountOut_1)
typecheckig node...
REF_78(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_78

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_79(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_79

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_123(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_78', 'newPrice_3', 'REF_79', 'False'] 
Function name: swap
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
REF_78
newPrice
REF_79
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_123

Name: TMP_123 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
output_3(uint256) := TMP_123(uint256)
Function name: swap
asgn

Name: TMP_123 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
REF_105(uint256) -> cache_14.totalFeeAmount
Function name: swap
MEMBER
cache
totalFeeAmount
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_105

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_106(uint256) -> cache_14.protocolFee
Function name: swap
MEMBER
cache
protocolFee
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_106

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_107(uint256) -> cache_14.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_107

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_109(uint256) -> cache_14.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_109

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_110(uint256) -> cache_14.totalFeeAmount
Function name: swap
MEMBER
cache
totalFeeAmount
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_110

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_111(uint256) -> cache_14.protocolFee
Function name: swap
MEMBER
cache
protocolFee
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_111

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_112(uint256) -> cache_14.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_112

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_9(uint256,uint256,uint256,uint256) = LIBRARY_CALL, dest:SwapLib, function:SwapLib.handleFees(uint256,uint24,uint256,uint256,uint256,uint256,uint256,uint256), arguments:['output_7', 'swapFee_3', 'barFee_3', 'REF_109', 'REF_110', 'amountOut_1', 'REF_111', 'REF_112'] 
Function name: swap
Library Call: handleFees
hlc contract name: SwapLib func_name: handleFees
('c', [-1], [-1], 0, None)
output
swapFee
barFee
REF_109
REF_110
amountOut
REF_111
REF_112
('c', [-1], [-1], 0, None)
output
swapFee
barFee
REF_109
REF_110
amountOut
REF_111
REF_112
('c', [-1], [-1], 0, None)
output
swapFee
barFee
REF_109
REF_110
amountOut
REF_111
REF_112
('c', [-1], [-1], 0, None)
output
swapFee
barFee
REF_109
REF_110
amountOut
REF_111
REF_112
wfc len: 4
COPIED
[i]Type for TUPLE_9

Name: TUPLE_9 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_105(uint256)= UNPACK TUPLE_9 index: 0 
Function name: swap
Reading tuple TUPLE_9 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_105

Name: REF_105 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_105 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amountOut_2(uint256)= UNPACK TUPLE_9 index: 1 
Function name: swap
Reading tuple TUPLE_9 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amountOut

Name: amountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_106(uint256)= UNPACK TUPLE_9 index: 2 
Function name: swap
Reading tuple TUPLE_9 index 2
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_106

Name: REF_106 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_106 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_107(uint256)= UNPACK TUPLE_9 index: 3 
Function name: swap
Reading tuple TUPLE_9 index 3
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_107

Name: REF_107 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_107 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_80(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_80

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_7(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice, input
Finance Type: undef
done.
REF_80 (->cache_7) := newPrice_3(uint256)
Function name: swap
asgn

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_80 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_80

Name: REF_80 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_80 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_81(uint256) -> cache_7.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
currentPrice
input
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_81

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_8(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_7'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input
Finance Type: undef
done.
REF_81 (->cache_8) := 0(uint256)
Function name: swap
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_81 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_81

Name: REF_81 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_81 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
CONDITION cross_5
Condition...
Conidtion: 
cross_5
cross_5
typecheckig node...
cache_17(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_14'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_113(uint256) -> cache_14.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_113

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_114(int24) -> cache_14.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_114

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_116(int24) -> cache_14.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_116

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_117(uint256) -> cache_14.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_117

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_118(uint256) -> cache_14.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_118

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_10(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_116', 'secondsPerLiquidity_9', 'REF_117', 'REF_118', 'zeroForOne_1'] 
Function name: swap
Library Call: cross
hlc contract name: Ticks func_name: cross
('c', [-1], [-1], 0, None)
ticks
REF_116
secondsPerLiquidity
REF_117
REF_118
zeroForOne
('c', [-1], [-1], 0, None)
ticks
REF_116
secondsPerLiquidity
REF_117
REF_118
zeroForOne
wfc len: 2
COPIED
[i]Type for TUPLE_10

Name: TUPLE_10 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_113(uint256)= UNPACK TUPLE_10 index: 0 
Function name: swap
Reading tuple TUPLE_10 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_113

Name: REF_113 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_113 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_114(int24)= UNPACK TUPLE_10 index: 1 
Function name: swap
Reading tuple TUPLE_10 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: int24
int24
Final Type: int24
[i]Type for REF_114

Name: REF_114 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_114 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_119(uint256) -> cache_14.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_119

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_131(bool) = REF_119 == 0
Function name: swap
[i]Type for TMP_131

Name: TMP_131 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_131
Condition...
Conidtion: 
TMP_131
TMP_131
typecheckig node...
cache_16(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_15', 'cache_14'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_120(uint256) -> cache_14.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_120

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_122(int24) -> cache_14.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_122

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_132(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_122'] 
Function name: swap
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
REF_122
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_132

Name: TMP_132 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_133 = CONVERT TMP_132 to uint256
Function name: swap

Name: TMP_132 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_133 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_133

Name: TMP_133 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
cache_15(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice, currentLiquidity, nextTickToCross, feeGrowthGlobal
Finance Type: undef
done.
REF_120 (->cache_15) := TMP_133(uint256)
Function name: swap
asgn

Name: TMP_133 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_120 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for REF_120

Name: REF_120 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_120 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_123(uint256) -> cache_15.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
currentPrice
currentLiquidity
nextTickToCross
feeGrowthGlobal
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_123

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_124(int24) -> cache_15.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
currentPrice
currentLiquidity
nextTickToCross
feeGrowthGlobal
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_124

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_126(int24) -> cache_15.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
currentPrice
currentLiquidity
nextTickToCross
feeGrowthGlobal
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_126

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_127(uint256) -> cache_15.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
currentPrice
currentLiquidity
nextTickToCross
feeGrowthGlobal
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_127

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_128(uint256) -> cache_15.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
currentPrice
currentLiquidity
nextTickToCross
feeGrowthGlobal
^^^

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_128

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_11(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_126', 'secondsPerLiquidity_9', 'REF_127', 'REF_128', 'zeroForOne_1'] 
Function name: swap
Library Call: cross
hlc contract name: Ticks func_name: cross
('c', [-1], [-1], 0, None)
ticks
REF_126
secondsPerLiquidity
REF_127
REF_128
zeroForOne
('c', [-1], [-1], 0, None)
ticks
REF_126
secondsPerLiquidity
REF_127
REF_128
zeroForOne
wfc len: 2
COPIED
[i]Type for TUPLE_11

Name: TUPLE_11 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_123(uint256)= UNPACK TUPLE_11 index: 0 
Function name: swap
Reading tuple TUPLE_11 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_123

Name: REF_123 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_123 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_124(int24)= UNPACK TUPLE_11 index: 1 
Function name: swap
Reading tuple TUPLE_11 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: int24
int24
Final Type: int24
[i]Type for REF_124

Name: REF_124 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_124 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "swap":
 New undefined nodes- 9
 Old undefined nodes- 13
typecheckig node...
swapFee_2(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
Function name: swap
Phi
[i]Type for swapFee

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0_15(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: swap
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_16(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: swap
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidity_10(uint128) := ϕ(['liquidity_4', 'liquidity_3', 'liquidity_5', 'liquidity_0', 'liquidity_6', 'liquidity_11', 'liquidity_8', 'liquidity_12', 'liquidity_9'])
Function name: swap
Phi
[i]Type for liquidity

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsPerLiquidity_7(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Function name: swap
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lastObservation_1(uint32) := ϕ(['lastObservation_0', 'lastObservation_3', 'lastObservation_2'])
Function name: swap
Phi
[i]Type for lastObservation

Name: lastObservation Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal0_7(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
Function name: swap
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal1_7(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
Function name: swap
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
barFee_2(uint256) := ϕ(['barFee_1', 'barFee_3', 'barFee_4', 'barFee_0'])
Function name: swap
Phi
[i]Type for barFee

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price_6(uint160) := ϕ(['price_0', 'price_8', 'price_3', 'price_1', 'price_5'])
Function name: swap
Phi
[i]Type for price

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_15(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: swap
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_14(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: swap
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Internal call...
lock
Function: lock
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
typecheckig node...
TUPLE_8(bool,uint256,address,bool) = SOLIDITY_CALL abi.decode()(data_1(bool,uint256,address,bool))
[i]Type for TUPLE_8

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
zeroForOne_1(bool)= UNPACK TUPLE_8 index: 0 
Function name: swap
Reading tuple TUPLE_8 index 0
Finding type for zeroForOne...
bool
SKIP bool
[i]Type for zeroForOne

Name: zeroForOne Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
inAmount_1(uint256)= UNPACK TUPLE_8 index: 1 
Function name: swap
Reading tuple TUPLE_8 index 1
Finding type for inAmount...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: inAmount Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for inAmount

Name: inAmount Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
recipient_1(address)= UNPACK TUPLE_8 index: 2 
Function name: swap
Reading tuple TUPLE_8 index 2
Finding type for recipient...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: recipient Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
[i]Type for recipient

Name: recipient Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool)= UNPACK TUPLE_8 index: 3 
Function name: swap
Reading tuple TUPLE_8 index 3
Finding type for unwrapBento...
bool
SKIP bool
[i]Type for unwrapBento

Name: unwrapBento Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
typecheckig node...
TMP_149 = CONVERT price_7 to uint256
Function name: swap

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_149 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_149

Name: TMP_149 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_150 = CONVERT liquidity_11 to uint256
Function name: swap

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_150 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_150

Name: TMP_150 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_133(Ticks.Tick) -> ticks_15[nearestTick_16]
Function name: swap
INDEX

Name: None Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: nextTick, previousTick
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_133

Name: None Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: nextTick, previousTick
Finance Type: undef
done.
REF_134(int24) -> REF_133.nextTick
Function name: swap
MEMBER
REF_133
nextTick
swap
REF_133 Fields:
nextTick
previousTick
^^^

Name: nextTick Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_134

Name: REF_133.nextTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_133.nextTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTick Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151 = new SwapCache(0,0,0,feeGrowthGlobal0_8,TMP_149,TMP_150,inAmount_1,REF_134)
[i]Type for TMP_151

Name: TMP_151 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_1(ConcentratedLiquidityPool.SwapCache) := TMP_151(ConcentratedLiquidityPool.SwapCache)
Function name: swap
asgn

Name: TMP_151 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
cache_1(ConcentratedLiquidityPool.SwapCache) := TMP_151(ConcentratedLiquidityPool.SwapCache)
XXXXX
typecheckig node...
TMP_146 = CONVERT price_7 to uint256
Function name: swap

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_146 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_146

Name: TMP_146 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_147 = CONVERT liquidity_11 to uint256
Function name: swap

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_147 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_147

Name: TMP_147 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_148 = new SwapCache(0,0,0,feeGrowthGlobal1_8,TMP_146,TMP_147,inAmount_1,nearestTick_16)
[i]Type for TMP_148

Name: TMP_148 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_2(ConcentratedLiquidityPool.SwapCache) := TMP_148(ConcentratedLiquidityPool.SwapCache)
Function name: swap
asgn

Name: TMP_148 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
cache_2(ConcentratedLiquidityPool.SwapCache) := TMP_148(ConcentratedLiquidityPool.SwapCache)
XXXXX
typecheckig node...
cache_3(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_1', 'cache_2'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
timestamp_1(uint256) := block.timestamp(uint256)
Function name: swap
asgn
block.timestamp

Name: timestamp Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
not variable
[i]Type for timestamp

Name: timestamp Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
timestamp_1(uint256) := block.timestamp(uint256)
XXXXX
typecheckig node...
TMP_96 = CONVERT lastObservation_2 to uint256
Function name: swap

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_96 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_96

Name: TMP_96 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_97(uint256) = timestamp_1 (c)- TMP_96
Function name: swap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: timestamp Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_96 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_96 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_97 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_97

Name: TMP_97 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_97(uint256) = timestamp_1 (c)- TMP_96
XXXXX
diff_1(uint256) := TMP_97(uint256)
Function name: swap
asgn

Name: TMP_97 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: diff Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for diff

Name: diff Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_98(bool) = diff_1 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_98

Name: TMP_98 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_99(bool) = liquidity_11 > 0
Function name: swap
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_99

Name: TMP_99 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_100(bool) = TMP_98 && TMP_99
Function name: swap
[i]Type for TMP_100

Name: TMP_100 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_100
Condition...
Conidtion: 
TMP_100
TMP_100
typecheckig node...
typecheckig node...
TMP_101 = CONVERT timestamp_1 to uint32
Function name: swap

Name: timestamp Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_101 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_101

Name: TMP_101 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_101 = CONVERT timestamp_1 to uint32
XXXXX
lastObservation_3(uint32) := TMP_101(uint32)
Function name: swap
asgn

Name: TMP_101 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lastObservation Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for lastObservation

Name: lastObservation Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
lastObservation_3(uint32) := TMP_101(uint32)
XXXXX
typecheckig node...
typecheckig node...
TMP_102(uint256) = diff_1 << 128
Function name: swap
[i]Type for TMP_102

Name: TMP_102 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_103(uint256) = TMP_102 (c)/ liquidity_11
Function name: swap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_103

Name: TMP_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_103(uint256) = TMP_102 (c)/ liquidity_11
XXXXX
TMP_104 = CONVERT TMP_103 to uint160
Function name: swap

Name: TMP_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_104 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_104

Name: TMP_104 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsPerLiquidity_9(uint160) = secondsPerLiquidity_8 (c)+ TMP_104
Function name: swap

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_104 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
amountOut_1(uint256) := ϕ(['amountOut_0', 'amountOut_2'])
Function name: swap
Phi
[i]Type for amountOut

Name: amountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
cache_4(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_0', 'cache_14'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input, currentPrice, nextTickToCross, currentLiquidity, feeGrowthGlobal, protocolFee
Finance Type: undef
done.
REF_61(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_61

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_105(bool) = REF_61 != 0
Function name: swap
[i]Type for TMP_105

Name: TMP_105 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_105
Condition...
Conidtion: 
TMP_105
TMP_105
typecheckig node...
typecheckig node...
REF_129(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_129

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_134 = CONVERT REF_129 to uint160
Function name: swap

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_134 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_134

Name: TMP_134 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
price_8(uint160) := TMP_134(uint160)
Function name: swap
asgn

Name: TMP_134 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: price Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for price

Name: price Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_63(int24) -> cache_4.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_63

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_106(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_63'] 
Function name: swap
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
REF_63
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_106

Name: TMP_106 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_107 = CONVERT TMP_106 to uint256
Function name: swap

Name: TMP_106 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_107 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_107

Name: TMP_107 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
nextTickPrice_1(uint256) := TMP_107(uint256)
Function name: swap
asgn

Name: TMP_107 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for nextTickPrice

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
typecheckig node...
output_1(uint256) := 0(uint256)
Function name: swap
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: output Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_135(int24) -> cache_4.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_135

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
newNearestTick_2(int24) := REF_135(int24)
Function name: swap
asgn

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newNearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
cross_1(bool) := False(bool)
Function name: swap
asgn
val: False

Name: False Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: False
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_136(int24) -> cache_4.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_136

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_137(Ticks.Tick) -> ticks_15[REF_136]
Function name: swap
INDEX

Name: None Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: nextTick, previousTick
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_137

Name: None Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: nextTick, previousTick
Finance Type: undef
done.
REF_138(int24) -> REF_137.previousTick
Function name: swap
MEMBER
REF_137
previousTick
swap
REF_137 Fields:
nextTick
previousTick
^^^

Name: previousTick Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_138

Name: REF_137.previousTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_137.previousTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: previousTick Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
newNearestTick_1(int24) := REF_138(int24)
Function name: swap
asgn

Name: REF_137.previousTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: newNearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
newNearestTick_3(int24) := ϕ(['newNearestTick_1', 'newNearestTick_2'])
Function name: swap
Phi
[i]Type for newNearestTick

Name: newNearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_135(bool) = nearestTick_16 != newNearestTick_3
Function name: swap
[i]Type for TMP_135

Name: TMP_135 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_135
Condition...
Conidtion: 
TMP_135
TMP_135
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
typecheckig node...
REF_65(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_65

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_66(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_66

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_108(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_65', 'nextTickPrice_1', 'REF_66', 'False'] 
Function name: swap
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
REF_65
nextTickPrice
REF_66
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_108

Name: TMP_108 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
maxDx_1(uint256) := TMP_108(uint256)
Function name: swap
asgn

Name: TMP_108 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDx Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for maxDx

Name: maxDx Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
typecheckig node...
REF_88(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_88

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_89(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_89

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_125(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_88', 'REF_89', 'nextTickPrice_1', 'False'] 
Function name: swap
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
REF_88
REF_89
nextTickPrice
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_125

Name: TMP_125 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
maxDy_1(uint256) := TMP_125(uint256)
Function name: swap
asgn

Name: TMP_125 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDy Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for maxDy

Name: maxDy Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
nearestTick_17(int24) := newNearestTick_3(int24)
Function name: swap
asgn

Name: newNearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for nearestTick

Name: nearestTick Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_67(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_67

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_109(bool) = REF_67 <= maxDx_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0
[i]Type for TMP_109

Name: TMP_109 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_109
Condition...
Conidtion: 
TMP_109
TMP_109
typecheckig node...
REF_90(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_90

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_126(bool) = REF_90 <= maxDy_1
Function name: swap
testing lt...
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: -1
Final dest type: 0
[i]Type for TMP_126

Name: TMP_126 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_126
Condition...
Conidtion: 
TMP_126
TMP_126
typecheckig node...
REF_91(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_91

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_93(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_93

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_94(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_94

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_127(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDiv(uint256,uint256,uint256), arguments:['REF_93', '79228162514264337593543950336', 'REF_94'] 
Function name: swap
Library Call: mulDiv
hlc contract name: FullMath func_name: mulDiv
('t', [1, 2], [3], 0, None, 11)
REF_93
79228162514264337593543950336
REF_94
wfc len: 1
Check copy_toekn_tuple
([-1, -1], [-1, -1], 0, None, 11)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_127

Name: TMP_127 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
TMP_128(uint256) = REF_91 (c)+ TMP_127
Function name: swap

Name: TMP_128 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
initlize checks
;;;
lnorm: u rnorm: 0
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 11, Left type: -1
Final dest type: 11

Name: TMP_127 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: TMP_128 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
[i]Type for TMP_128

Name: TMP_128 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
newPrice_scope_0_1(uint256) := TMP_128(uint256)
Function name: swap
asgn

Name: TMP_128 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for newPrice_scope_0

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee
done.
typecheckig node...
REF_130(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_130

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_136 = CONVERT REF_130 to uint128
Function name: swap

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_136 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_136

Name: TMP_136 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidity_12(uint128) := TMP_136(uint128)
Function name: swap
asgn

Name: TMP_136 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for liquidity

Name: liquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_101(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_101

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_102(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_102

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_130(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_101', 'REF_102', 'nextTickPrice_1', 'False'] 
Function name: swap
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
REF_101
REF_102
nextTickPrice
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_130

Name: TMP_130 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
output_6(uint256) := TMP_130(uint256)
Function name: swap
asgn

Name: TMP_130 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
TMP_137 = CONVERT inAmount_1 to uint128
Function name: swap

Name: inAmount Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_137 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_137

Name: TMP_137 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, ConcentratedLiquidityPool._updateReserves(bool,uint128,uint256)(zeroForOne_1,TMP_137,amountOut_1)
Internal call...
_updateReserves
zeroForOne
TMP_137
amountOut
Function: _updateReserves
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _updateReserves
Function Visibility: internal
clearning node...
clearing ir...?
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
has variable
[i] zeroForOne cleared
clearing ir...?
inAmount_1(uint128) := ϕ(['TMP_137'])
has variable
[i] inAmount cleared
clearing ir...?
amountOut_1(uint256) := ϕ(['amountOut_1'])
has variable
[i] amountOut cleared
clearing ir...?
token0_24(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_26(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
has variable
clearing ir...?
reserve0_25(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
has variable
clearing ir...?
reserve1_27(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
has variable
typecheckig node...
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Function name: _updateReserves
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
inAmount_1(uint128) := ϕ(['TMP_137'])
Function name: _updateReserves
Phi
[i]Type for inAmount

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := ϕ(['amountOut_1'])
Function name: _updateReserves
Phi
[i]Type for amountOut

Name: amountOut Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0_24(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _updateReserves
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_26(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: _updateReserves
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_25(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: _updateReserves
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve1_27(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: _updateReserves
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
CONDITION zeroForOne_1
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
clearning node...
clearing ir...?
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
has variable
[i] TMP_190 cleared
clearing ir...?
balance0_1(uint256) := TMP_190(uint256)
has variable
[i] balance0 cleared
typecheckig node...
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
Function name: _updateReserves
Internal call...
_balance
token0
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_190

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance0_1(uint256) := TMP_190(uint256)
Function name: _updateReserves
asgn

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance0

Name: balance0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
balance0_1(uint256) := TMP_190(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_191(uint128) = reserve0_28 (c)+ inAmount_1
has variable
[i] TMP_191 cleared
clearing ir...?
newBalance_1(uint128) := TMP_191(uint128)
has variable
[i] newBalance cleared
typecheckig node...
TMP_191(uint128) = reserve0_28 (c)+ inAmount_1
Function name: _updateReserves

Name: TMP_191 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_191 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_191

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
newBalance_1(uint128) := TMP_191(uint128)
Function name: _updateReserves
asgn

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: newBalance Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
has variable
[i] TMP_196 cleared
clearing ir...?
balance1_1(uint256) := TMP_196(uint256)
has variable
[i] balance1 cleared
typecheckig node...
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
Function name: _updateReserves
Internal call...
_balance
token1
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_196

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance1_1(uint256) := TMP_196(uint256)
Function name: _updateReserves
asgn

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
balance1_1(uint256) := TMP_196(uint256)
XXXXX
clearning node...
clearing ir...?
TMP_192 = CONVERT newBalance_1 to uint256
has variable
[i] TMP_192 cleared
clearing ir...?
TMP_193(bool) = TMP_192 <= balance0_1
has variable
[i] TMP_193 cleared
clearing ir...?
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
typecheckig node...
TMP_192 = CONVERT newBalance_1 to uint256
Function name: _updateReserves

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_192 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_192

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
TMP_193(bool) = TMP_192 <= balance0_1
Function name: _updateReserves
testing lt...
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_193 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_193

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
TMP_193(bool) = TMP_192 <= balance0_1
XXXXX
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
reserve0_29(uint128) := newBalance_1(uint128)
has variable
typecheckig node...
reserve0_29(uint128) := newBalance_1(uint128)
Function name: _updateReserves
asgn

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
TMP_197(uint128) = reserve1_28 (c)+ inAmount_1
has variable
[i] TMP_197 cleared
clearing ir...?
newBalance_scope_0_1(uint128) := TMP_197(uint128)
has variable
[i] newBalance_scope_0 cleared
typecheckig node...
TMP_197(uint128) = reserve1_28 (c)+ inAmount_1
Function name: _updateReserves

Name: TMP_197 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_197 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_197

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
newBalance_scope_0_1(uint128) := TMP_197(uint128)
Function name: _updateReserves
asgn

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: newBalance_scope_0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
has variable
[i] TMP_198 cleared
clearing ir...?
TMP_199(bool) = TMP_198 <= balance1_1
has variable
[i] TMP_199 cleared
clearing ir...?
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
typecheckig node...
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
Function name: _updateReserves

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_198 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_198

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
TMP_199(bool) = TMP_198 <= balance1_1
Function name: _updateReserves
testing lt...
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_199 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_199

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
TMP_199(bool) = TMP_198 <= balance1_1
XXXXX
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_195 = CONVERT amountOut_1 to uint128
has variable
[i] TMP_195 cleared
clearing ir...?
reserve1_31(uint128) = reserve1_30 (c)- TMP_195
has variable
typecheckig node...
TMP_195 = CONVERT amountOut_1 to uint128
Function name: _updateReserves

Name: amountOut Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_195

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve1_31(uint128) = reserve1_30 (c)- TMP_195
Function name: _updateReserves
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
reserve1_29(uint128) := newBalance_scope_0_1(uint128)
has variable
typecheckig node...
reserve1_29(uint128) := newBalance_scope_0_1(uint128)
Function name: _updateReserves
asgn

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
reserve1_32(uint128) := ϕ(['reserve1_29', 'reserve1_31'])
has variable
clearing ir...?
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
has variable
typecheckig node...
reserve1_32(uint128) := ϕ(['reserve1_29', 'reserve1_31'])
Function name: _updateReserves
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
Function name: _updateReserves
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
TMP_201 = CONVERT amountOut_1 to uint128
has variable
[i] TMP_201 cleared
clearing ir...?
reserve0_27(uint128) = reserve0_26 (c)- TMP_201
has variable
typecheckig node...
TMP_201 = CONVERT amountOut_1 to uint128
Function name: _updateReserves

Name: amountOut Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_201

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_27(uint128) = reserve0_26 (c)- TMP_201
Function name: _updateReserves
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
WORKLIST iteration 0 for function call "_updateReserves":
 New undefined nodes- 4
 Old undefined nodes- 0
typecheckig node...
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Function name: _updateReserves
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
inAmount_1(uint128) := ϕ(['TMP_137'])
Function name: _updateReserves
Phi
[i]Type for inAmount

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
amountOut_1(uint256) := ϕ(['amountOut_1'])
Function name: _updateReserves
Phi
[i]Type for amountOut

Name: amountOut Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0_24(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: _updateReserves
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_26(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: _updateReserves
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_25(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: _updateReserves
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve1_27(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: _updateReserves
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
typecheckig node...
TMP_190(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token0_24)
Function name: _updateReserves
Internal call...
_balance
token0
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_190

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance0_1(uint256) := TMP_190(uint256)
Function name: _updateReserves
asgn

Name: TMP_190 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance0

Name: balance0 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
balance0_1(uint256) := TMP_190(uint256)
XXXXX
typecheckig node...
TMP_191(uint128) = reserve0_28 (c)+ inAmount_1
Function name: _updateReserves

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_191

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
newBalance_1(uint128) := TMP_191(uint128)
Function name: _updateReserves
asgn

Name: TMP_191 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for newBalance

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
TMP_196(uint256) = INTERNAL_CALL, ConcentratedLiquidityPool._balance(address)(token1_26)
Function name: _updateReserves
Internal call...
_balance
token1
Function: _balance
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
0

Name: PIC_10 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_196

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
balance1_1(uint256) := TMP_196(uint256)
Function name: _updateReserves
asgn

Name: TMP_196 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: balance1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for balance1

Name: balance1 Function: _updateReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
balance1_1(uint256) := TMP_196(uint256)
XXXXX
typecheckig node...
TMP_192 = CONVERT newBalance_1 to uint256
Function name: _updateReserves

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_192

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
TMP_193(bool) = TMP_192 <= balance0_1
Function name: _updateReserves
testing lt...
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: TMP_192 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_193

Name: TMP_193 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
TMP_193(bool) = TMP_192 <= balance0_1
XXXXX
TMP_194(None) = SOLIDITY_CALL require(bool,string)(TMP_193,TOKEN0_MISSING)
[i]Type for TMP_194

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
reserve0_29(uint128) := newBalance_1(uint128)
Function name: _updateReserves
asgn

Name: newBalance Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
TMP_197(uint128) = reserve1_28 (c)+ inAmount_1
Function name: _updateReserves

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
initlize checks
;;;
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: inAmount Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_197

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
newBalance_scope_0_1(uint128) := TMP_197(uint128)
Function name: _updateReserves
asgn

Name: TMP_197 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for newBalance_scope_0

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
TMP_198 = CONVERT newBalance_scope_0_1 to uint256
Function name: _updateReserves

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_198

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
TMP_199(bool) = TMP_198 <= balance1_1
Function name: _updateReserves
testing lt...
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: TMP_198 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for TMP_199

Name: TMP_199 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
This IR caused addback:
TMP_199(bool) = TMP_198 <= balance1_1
XXXXX
TMP_200(None) = SOLIDITY_CALL require(bool,string)(TMP_199,TOKEN1_MISSING)
[i]Type for TMP_200

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_195 = CONVERT amountOut_1 to uint128
Function name: _updateReserves

Name: amountOut Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_195

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve1_31(uint128) = reserve1_30 (c)- TMP_195
Function name: _updateReserves
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_195 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
reserve1_29(uint128) := newBalance_scope_0_1(uint128)
Function name: _updateReserves
asgn

Name: newBalance_scope_0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for reserve1

Name: reserve1 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
reserve1_32(uint128) := ϕ(['reserve1_29', 'reserve1_31'])
Function name: _updateReserves
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve0_30(uint128) := ϕ(['reserve0_27', 'reserve0_29'])
Function name: _updateReserves
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
typecheckig node...
TMP_201 = CONVERT amountOut_1 to uint128
Function name: _updateReserves

Name: amountOut Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_201

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_27(uint128) = reserve0_26 (c)- TMP_201
Function name: _updateReserves
lnorm: u rnorm: u
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_201 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve0

Name: reserve0 Function: _updateReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
WORKLIST iteration 1 for function call "_updateReserves":
 New undefined nodes- 4
 Old undefined nodes- 4
Saving return values for: _updateReserves
done.
This IR caused addback:
INTERNAL_CALL, ConcentratedLiquidityPool._updateReserves(bool,uint128,uint256)(zeroForOne_1,TMP_137,amountOut_1)
XXXXX
token0_17(address) := ϕ(['token0_25'])
Function name: swap
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_18(address) := ϕ(['token1_27'])
Function name: swap
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_103(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_103

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_12(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice, input
Finance Type: undef
done.
REF_103 (->cache_12) := nextTickPrice_1(uint256)
Function name: swap
asgn

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for REF_103

Name: REF_103 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_103 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_68(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_68

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_110(uint256) = REF_68 << 96
Function name: swap
[i]Type for TMP_110

Name: TMP_110 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
liquidityPadded_1(uint256) := TMP_110(uint256)
Function name: swap
asgn

Name: TMP_110 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: liquidityPadded Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for liquidityPadded

Name: liquidityPadded Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
liquidityPadded_1(uint256) := TMP_110(uint256)
XXXXX
typecheckig node...
REF_96(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_96

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_97(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_97

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_129(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDx(uint256,uint256,uint256,bool), arguments:['REF_96', 'REF_97', 'newPrice_scope_0_1', 'False'] 
Function name: swap
Library Call: getDx
hlc contract name: DyDxMath func_name: getDx
('c', [-1], [-1], 0, None, 0)
REF_96
REF_97
newPrice_scope_0
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_129

Name: TMP_129 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
output_5(uint256) := TMP_129(uint256)
Function name: swap
asgn

Name: TMP_129 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
REF_83(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_83

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_84(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_84

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_124(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_83', 'nextTickPrice_1', 'REF_84', 'False'] 
Function name: swap
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
REF_83
nextTickPrice
REF_84
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_124

Name: TMP_124 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
output_2(uint256) := TMP_124(uint256)
Function name: swap
asgn

Name: TMP_124 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
cross_4(bool) := True(bool)
Function name: swap
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_85(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_85

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_5(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice, input
Finance Type: undef
done.
REF_85 (->cache_5) := nextTickPrice_1(uint256)
Function name: swap
asgn

Name: nextTickPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_85 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for REF_85

Name: REF_85 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_85 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_98(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_98

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_10(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice, input
Finance Type: undef
done.
REF_98 (->cache_10) := newPrice_scope_0_1(uint256)
Function name: swap
asgn

Name: newPrice_scope_0 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: REF_98 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (11, -1)
Func: assign
Dest type: 11, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 11
Final dest type: 11
[i]Type for REF_98

Name: REF_98 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: transaction fee

Name: REF_98 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_131(uint256) -> cache_4.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_131

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_132(uint256) -> cache_4.protocolFee
Function name: swap
MEMBER
cache
protocolFee
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_132

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_139 = CONVERT REF_132 to uint128
Function name: swap

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_139 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_139

Name: TMP_139 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, ConcentratedLiquidityPool._updateFees(bool,uint256,uint128)(zeroForOne_1,REF_131,TMP_139)
Internal call...
_updateFees
zeroForOne
REF_131
TMP_139
Function: _updateFees
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[], [], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[], [], 'u', None, [], -1]
[[], [], 'u', None, [], -1]
added
xyz
Function name: _updateFees
Function Visibility: internal
clearning node...
clearing ir...?
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
has variable
[i] zeroForOne cleared
clearing ir...?
feeGrowthGlobal_1(uint256) := ϕ(['REF_131'])
has variable
[i] feeGrowthGlobal cleared
clearing ir...?
protocolFee_1(uint128) := ϕ(['TMP_139'])
has variable
[i] protocolFee cleared
clearing ir...?
token0ProtocolFee_4(uint128) := ϕ(['token0ProtocolFee_3', 'token0ProtocolFee_5', 'token0ProtocolFee_0', 'token0ProtocolFee_2'])
has variable
clearing ir...?
token1ProtocolFee_5(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_2', 'token1ProtocolFee_0', 'token1ProtocolFee_6'])
has variable
typecheckig node...
zeroForOne_1(bool) := ϕ(['zeroForOne_1'])
Function name: _updateFees
Phi
[i]Type for zeroForOne

Name: zeroForOne Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal_1(uint256) := ϕ(['REF_131'])
Function name: _updateFees
Phi
[i]Type for feeGrowthGlobal

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
protocolFee_1(uint128) := ϕ(['TMP_139'])
Function name: _updateFees
Phi
[i]Type for protocolFee

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0ProtocolFee_4(uint128) := ϕ(['token0ProtocolFee_3', 'token0ProtocolFee_5', 'token0ProtocolFee_0', 'token0ProtocolFee_2'])
Function name: _updateFees
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1ProtocolFee_5(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_2', 'token1ProtocolFee_0', 'token1ProtocolFee_6'])
Function name: _updateFees
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION zeroForOne_1
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
clearning node...
clearing ir...?
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
has variable
typecheckig node...
feeGrowthGlobal1_9(uint256) := feeGrowthGlobal_1(uint256)
Function name: _updateFees
asgn

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
has variable
typecheckig node...
feeGrowthGlobal0_9(uint256) := feeGrowthGlobal_1(uint256)
Function name: _updateFees
asgn

Name: feeGrowthGlobal Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1
has variable
typecheckig node...
token1ProtocolFee_6(uint128) = token1ProtocolFee_5 (c)+ protocolFee_1
Function name: _updateFees

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1
has variable
typecheckig node...
token0ProtocolFee_5(uint128) = token0ProtocolFee_4 (c)+ protocolFee_1
Function name: _updateFees

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: protocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: _updateFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_updateFees":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _updateFees
done.
typecheckig node...
REF_104(uint256) -> cache_12.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
currentPrice
input
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_104

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_13(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_12'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input
Finance Type: undef
done.
REF_104(-> cache_13) = REF_104 (c)- maxDy_1
Function name: swap
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: 0
Final dest type: 0

Name: REF_104 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDy Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDy Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_104 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for REF_104

Name: REF_104 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_104 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_70(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_70

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_71(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_71

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_72(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_72

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_111(uint256) = REF_71 (c)* REF_72
Function name: swap
testing mul...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_111 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_111

Name: TMP_111 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_112(uint256) = liquidityPadded_1 (c)+ TMP_111
Function name: swap

Name: TMP_112 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_111 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_112 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_112

Name: TMP_112 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_112(uint256) = liquidityPadded_1 (c)+ TMP_111
XXXXX
TMP_113(uint256) = LIBRARY_CALL, dest:FullMath, function:FullMath.mulDivRoundingUp(uint256,uint256,uint256), arguments:['liquidityPadded_1', 'REF_70', 'TMP_112'] 
Function name: swap
Library Call: mulDivRoundingUp
hlc contract name: FullMath func_name: mulDivRoundingUp
('t', [1, 2], [3], 0, None)
liquidityPadded
REF_70
TMP_112
wfc len: 1
Check copy_toekn_tuple
([-1, -1], [-1, -1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_113

Name: TMP_113 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_114 = CONVERT TMP_113 to uint256
Function name: swap

Name: TMP_113 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_114 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_114

Name: TMP_114 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
newPrice_1(uint256) := TMP_114(uint256)
Function name: swap
asgn

Name: TMP_114 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
cross_2(bool) := True(bool)
Function name: swap
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_99(uint256) -> cache_10.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
currentPrice
input
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_99

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_11(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_10'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input
Finance Type: undef
done.
REF_99 (->cache_11) := 0(uint256)
Function name: swap
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_99 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_99

Name: REF_99 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_99 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
CONDITION zeroForOne_1
Condition...
Conidtion: 
zeroForOne_1
zeroForOne_1
typecheckig node...
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_18,amountOut_1,recipient_1,unwrapBento_1)
Internal call...
_transfer
token0
amountOut
recipient
unwrapBento
Function: _transfer
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], 11]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, None, [], 11]
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: _transfer
Function Visibility: internal
clearning node...
clearing ir...?
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
has variable
[i] token cleared
clearing ir...?
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
has variable
[i] shares cleared
clearing ir...?
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
has variable
[i] to cleared
clearing ir...?
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
has variable
[i] unwrapBento cleared
clearing ir...?
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
Function name: _transfer
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
Function name: _transfer
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
Function name: _transfer
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Norm: u
LF: MANAGER
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Function name: _transfer
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION unwrapBento_1
typecheckig node...
CONDITION unwrapBento_1
Condition...
Conidtion: 
unwrapBento_1
unwrapBento_1
clearning node...
clearing ir...?
TMP_216 = CONVERT this to address
has variable
[i] TMP_216 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
clearing ir...?
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_216 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_215 = CONVERT this to address
has variable
[i] TMP_215 cleared
clearing ir...?
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
has variable
clearing ir...?
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_215 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
Function name: _transfer
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_13
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token
TMP_215
to
0
shares
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_transfer":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _transfer
done.
typecheckig node...
REF_86(uint256) -> cache_5.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
currentPrice
input
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_86

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_6(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_5'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input
Finance Type: undef
done.
REF_86(-> cache_6) = REF_86 (c)- maxDx_1
Function name: swap
lnorm: u rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: 0, Left type: 0
Final dest type: 0

Name: REF_86 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDx Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxDx Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_86 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for REF_86

Name: REF_86 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_86 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_115(bool) = nextTickPrice_1 <= newPrice_1
Function name: swap
testing lt...
lnorm: 0 rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for TMP_115

Name: TMP_115 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
REF_73(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_73

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_116(bool) = newPrice_1 < REF_73
Function name: swap
testing lt...
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_116

Name: TMP_116 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_117(bool) = TMP_115 && TMP_116
Function name: swap
[i]Type for TMP_117

Name: TMP_117 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_118 = ! TMP_117 
[i]Type for TMP_118

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_118
Condition...
Conidtion: 
TMP_118
TMP_118
typecheckig node...
Emit Swap(recipient_1,token1_20,token0_19,inAmount_1,amountOut_1)
typecheckig node...
cache_14(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_13', 'cache_11'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: totalFeeAmount, protocolFee, feeGrowthGlobal, currentLiquidity, nextTickToCross, currentPrice
Finance Type: undef
done.
output_7(uint256) := ϕ(['output_6', 'output_5'])
Function name: swap
Phi
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
cross_5(bool) := ϕ(['cross_1', 'cross_4'])
Function name: swap
Phi
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_19,amountOut_1,recipient_1,unwrapBento_1)
Internal call...
_transfer
token1
amountOut
recipient
unwrapBento
Function: _transfer
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], 11]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, None, [], 11]
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: _transfer
Function Visibility: internal
clearning node...
clearing ir...?
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
has variable
[i] token cleared
clearing ir...?
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
has variable
[i] shares cleared
clearing ir...?
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
has variable
[i] to cleared
clearing ir...?
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
has variable
[i] unwrapBento cleared
clearing ir...?
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
Function name: _transfer
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
Function name: _transfer
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
Function name: _transfer
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Norm: u
LF: MANAGER
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Function name: _transfer
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION unwrapBento_1
typecheckig node...
CONDITION unwrapBento_1
Condition...
Conidtion: 
unwrapBento_1
unwrapBento_1
clearning node...
clearing ir...?
TMP_216 = CONVERT this to address
has variable
[i] TMP_216 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
clearing ir...?
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_216 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_215 = CONVERT this to address
has variable
[i] TMP_215 cleared
clearing ir...?
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
has variable
clearing ir...?
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_215 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
Function name: _transfer
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_13
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token
TMP_215
to
0
shares
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_transfer":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _transfer
done.
typecheckig node...
typecheckig node...
REF_75(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_75

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_119(uint256) = liquidityPadded_1 (c)/ REF_75
Function name: swap
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_119 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_119

Name: TMP_119 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_119(uint256) = liquidityPadded_1 (c)/ REF_75
XXXXX
REF_76(uint256) -> cache_4.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_76

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_120(uint256) = TMP_119 (c)+ REF_76
Function name: swap

Name: TMP_120 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_120 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_120

Name: TMP_120 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_121(uint256) = LIBRARY_CALL, dest:UnsafeMath, function:UnsafeMath.divRoundingUp(uint256,uint256), arguments:['liquidityPadded_1', 'TMP_120'] 
Function name: swap
Library Call: divRoundingUp
hlc contract name: UnsafeMath func_name: divRoundingUp
('t', [1], [2], 0, None)
liquidityPadded
TMP_120
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_121

Name: TMP_121 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_122 = CONVERT TMP_121 to uint160
Function name: swap

Name: TMP_121 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_122 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_122

Name: TMP_122 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
newPrice_2(uint256) := TMP_122(uint160)
Function name: swap
asgn

Name: TMP_122 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
cache_9(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_6', 'cache_0', 'cache_8'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
output_4(uint256) := ϕ(['output_2', 'output_1', 'output_3'])
Function name: swap
Phi
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
cross_3(bool) := ϕ(['cross_1', 'cross_2'])
Function name: swap
Phi
[i]Type for cross

Name: cross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
newPrice_3(uint256) := ϕ(['newPrice_2', 'newPrice_1'])
Function name: swap
Phi
[i]Type for newPrice

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
Emit Swap(recipient_1,token0_20,token1_21,inAmount_1,amountOut_1)
typecheckig node...
REF_78(uint256) -> cache_4.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_78

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_79(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_79

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_123(uint256) = LIBRARY_CALL, dest:DyDxMath, function:DyDxMath.getDy(uint256,uint256,uint256,bool), arguments:['REF_78', 'newPrice_3', 'REF_79', 'False'] 
Function name: swap
Library Call: getDy
hlc contract name: DyDxMath func_name: getDy
('c', [-1], [-1], 0, None, 0)
REF_78
newPrice
REF_79
False
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_123

Name: TMP_123 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
output_3(uint256) := TMP_123(uint256)
Function name: swap
asgn

Name: TMP_123 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for output

Name: output Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
REF_105(uint256) -> cache_14.totalFeeAmount
Function name: swap
MEMBER
cache
totalFeeAmount
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_105

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_106(uint256) -> cache_14.protocolFee
Function name: swap
MEMBER
cache
protocolFee
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_106

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_107(uint256) -> cache_14.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_107

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_109(uint256) -> cache_14.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_109

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_110(uint256) -> cache_14.totalFeeAmount
Function name: swap
MEMBER
cache
totalFeeAmount
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_110

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: cache.totalFeeAmount Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_111(uint256) -> cache_14.protocolFee
Function name: swap
MEMBER
cache
protocolFee
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_111

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.protocolFee Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_112(uint256) -> cache_14.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_112

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_9(uint256,uint256,uint256,uint256) = LIBRARY_CALL, dest:SwapLib, function:SwapLib.handleFees(uint256,uint24,uint256,uint256,uint256,uint256,uint256,uint256), arguments:['output_7', 'swapFee_3', 'barFee_3', 'REF_109', 'REF_110', 'amountOut_1', 'REF_111', 'REF_112'] 
Function name: swap
Library Call: handleFees
hlc contract name: SwapLib func_name: handleFees
('c', [-1], [-1], 0, None)
output
swapFee
barFee
REF_109
REF_110
amountOut
REF_111
REF_112
('c', [-1], [-1], 0, None)
output
swapFee
barFee
REF_109
REF_110
amountOut
REF_111
REF_112
('c', [-1], [-1], 0, None)
output
swapFee
barFee
REF_109
REF_110
amountOut
REF_111
REF_112
('c', [-1], [-1], 0, None)
output
swapFee
barFee
REF_109
REF_110
amountOut
REF_111
REF_112
wfc len: 4
COPIED
[i]Type for TUPLE_9

Name: TUPLE_9 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_105(uint256)= UNPACK TUPLE_9 index: 0 
Function name: swap
Reading tuple TUPLE_9 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_105

Name: REF_105 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_105 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: totalFeeAmount Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amountOut_2(uint256)= UNPACK TUPLE_9 index: 1 
Function name: swap
Reading tuple TUPLE_9 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for amountOut

Name: amountOut Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_106(uint256)= UNPACK TUPLE_9 index: 2 
Function name: swap
Reading tuple TUPLE_9 index 2
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_106

Name: REF_106 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_106 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protocolFee Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_107(uint256)= UNPACK TUPLE_9 index: 3 
Function name: swap
Reading tuple TUPLE_9 index 3
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_107

Name: REF_107 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_107 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_80(uint256) -> cache_4.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
input
currentPrice
nextTickToCross
currentLiquidity
feeGrowthGlobal
protocolFee
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_80

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_7(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_4'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice, input
Finance Type: undef
done.
REF_80 (->cache_7) := newPrice_3(uint256)
Function name: swap
asgn

Name: newPrice Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_80 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_80

Name: REF_80 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_80 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_81(uint256) -> cache_7.input
Function name: swap
MEMBER
cache
input
swap
cache Fields:
currentPrice
input
^^^

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_81

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.input Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
cache_8(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_7'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: input
Finance Type: undef
done.
REF_81 (->cache_8) := 0(uint256)
Function name: swap
asgn
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_81 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_81

Name: REF_81 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_81 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: input Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
CONDITION cross_5
Condition...
Conidtion: 
cross_5
cross_5
typecheckig node...
cache_17(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14', 'cache_14'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_113(uint256) -> cache_14.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_113

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_114(int24) -> cache_14.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_114

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_116(int24) -> cache_14.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_116

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_117(uint256) -> cache_14.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_117

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_118(uint256) -> cache_14.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_118

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_10(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_116', 'secondsPerLiquidity_9', 'REF_117', 'REF_118', 'zeroForOne_1'] 
Function name: swap
Library Call: cross
hlc contract name: Ticks func_name: cross
('c', [-1], [-1], 0, None)
ticks
REF_116
secondsPerLiquidity
REF_117
REF_118
zeroForOne
('c', [-1], [-1], 0, None)
ticks
REF_116
secondsPerLiquidity
REF_117
REF_118
zeroForOne
wfc len: 2
COPIED
[i]Type for TUPLE_10

Name: TUPLE_10 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_113(uint256)= UNPACK TUPLE_10 index: 0 
Function name: swap
Reading tuple TUPLE_10 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_113

Name: REF_113 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_113 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_114(int24)= UNPACK TUPLE_10 index: 1 
Function name: swap
Reading tuple TUPLE_10 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: int24
int24
Final Type: int24
[i]Type for REF_114

Name: REF_114 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_114 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_119(uint256) -> cache_14.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_119

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_131(bool) = REF_119 == 0
Function name: swap
[i]Type for TMP_131

Name: TMP_131 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_131
Condition...
Conidtion: 
TMP_131
TMP_131
typecheckig node...
cache_16(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_15', 'cache_14'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_120(uint256) -> cache_14.currentPrice
Function name: swap
MEMBER
cache
currentPrice
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_120

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentPrice Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_122(int24) -> cache_14.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
totalFeeAmount
protocolFee
feeGrowthGlobal
currentLiquidity
nextTickToCross
currentPrice
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_122

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_132(uint160) = LIBRARY_CALL, dest:TickMath, function:TickMath.getSqrtRatioAtTick(int24), arguments:['REF_122'] 
Function name: swap
Library Call: getSqrtRatioAtTick
hlc contract name: TickMath func_name: getSqrtRatioAtTick
('c', [-1], [-1], 0, None, 0)
REF_122
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, 0)
----
Type: uint160
uint160
Final Type: uint160
COPIED
[i]Type for TMP_132

Name: TMP_132 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_133 = CONVERT TMP_132 to uint256
Function name: swap

Name: TMP_132 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_133 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_133

Name: TMP_133 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
cache_15(ConcentratedLiquidityPool.SwapCache) := ϕ(['cache_14'])
Function name: swap
Phi
[i]Type for cache

Name: cache Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: currentPrice, currentLiquidity, nextTickToCross, feeGrowthGlobal
Finance Type: undef
done.
REF_120 (->cache_15) := TMP_133(uint256)
Function name: swap
asgn

Name: TMP_133 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_120 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for REF_120

Name: REF_120 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: REF_120 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentPrice Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_123(uint256) -> cache_15.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
currentPrice
currentLiquidity
nextTickToCross
feeGrowthGlobal
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_123

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_124(int24) -> cache_15.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
currentPrice
currentLiquidity
nextTickToCross
feeGrowthGlobal
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_124

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_126(int24) -> cache_15.nextTickToCross
Function name: swap
MEMBER
cache
nextTickToCross
swap
cache Fields:
currentPrice
currentLiquidity
nextTickToCross
feeGrowthGlobal
^^^

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_126

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.nextTickToCross Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_127(uint256) -> cache_15.currentLiquidity
Function name: swap
MEMBER
cache
currentLiquidity
swap
cache Fields:
currentPrice
currentLiquidity
nextTickToCross
feeGrowthGlobal
^^^

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_127

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.currentLiquidity Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_128(uint256) -> cache_15.feeGrowthGlobal
Function name: swap
MEMBER
cache
feeGrowthGlobal
swap
cache Fields:
currentPrice
currentLiquidity
nextTickToCross
feeGrowthGlobal
^^^

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_128

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: cache.feeGrowthGlobal Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthGlobal Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TUPLE_11(uint256,int24) = LIBRARY_CALL, dest:Ticks, function:Ticks.cross(mapping(int24 => Ticks.Tick),int24,uint160,uint256,uint256,bool), arguments:['ticks_15', 'REF_126', 'secondsPerLiquidity_9', 'REF_127', 'REF_128', 'zeroForOne_1'] 
Function name: swap
Library Call: cross
hlc contract name: Ticks func_name: cross
('c', [-1], [-1], 0, None)
ticks
REF_126
secondsPerLiquidity
REF_127
REF_128
zeroForOne
('c', [-1], [-1], 0, None)
ticks
REF_126
secondsPerLiquidity
REF_127
REF_128
zeroForOne
wfc len: 2
COPIED
[i]Type for TUPLE_11

Name: TUPLE_11 Function: swap
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_123(uint256)= UNPACK TUPLE_11 index: 0 
Function name: swap
Reading tuple TUPLE_11 index 0
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for REF_123

Name: REF_123 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_123 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentLiquidity Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_124(int24)= UNPACK TUPLE_11 index: 1 
Function name: swap
Reading tuple TUPLE_11 index 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: int24
int24
Final Type: int24
[i]Type for REF_124

Name: REF_124 Function: swap
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_124 Function: swap
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: nextTickToCross Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 2 for function call "swap":
 New undefined nodes- 9
 Old undefined nodes- 9
Saving return values for: swap

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: flashSwap
Function flashSwap not marked
Mark Iterations TRUE, proceeding anyway
Function name: flashSwap
Function Visibility (test): public

Finding type for ...
bytes
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_152(None) = SOLIDITY_CALL revert()()
typecheckig node...
TMP_152(None) = SOLIDITY_CALL revert()()
[i]Type for TMP_152

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "flashSwap":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: updateBarFee
Function updateBarFee not marked
Mark Iterations TRUE, proceeding anyway
Function name: updateBarFee
Function Visibility (test): public
clearning node...
clearing ir...?
masterDeployer_2(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_1', 'masterDeployer_0'])
has variable
typecheckig node...
masterDeployer_2(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_1', 'masterDeployer_0'])
Function name: updateBarFee
Phi
[i]Type for masterDeployer

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_153 = CONVERT masterDeployer_2 to IMasterDeployer
has variable
[i] TMP_153 cleared
clearing ir...?
TMP_154(uint256) = HIGH_LEVEL_CALL, dest:TMP_153(IMasterDeployer), function:barFee, arguments:[]  
has variable
[i] TMP_154 cleared
clearing ir...?
masterDeployer_3(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_1', 'masterDeployer_2'])
has variable
clearing ir...?
barFee_4(uint256) := TMP_154(uint256)
has variable
typecheckig node...
TMP_153 = CONVERT masterDeployer_2 to IMasterDeployer
Function name: updateBarFee

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef

Name: TMP_153 Function: updateBarFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_153

Name: TMP_153 Function: updateBarFee
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
done.
TMP_154(uint256) = HIGH_LEVEL_CALL, dest:TMP_153(IMasterDeployer), function:barFee, arguments:[]  
Function name: updateBarFee
High Call: barFee
func name:barFee
other func name:barFee
TMP_154
[i]Type for TMP_154

Name: TMP_154 Function: updateBarFee
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
masterDeployer_3(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_1', 'masterDeployer_2'])
Function name: updateBarFee
Phi
[i]Type for masterDeployer

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
done.
barFee_4(uint256) := TMP_154(uint256)
Function name: updateBarFee
asgn

Name: TMP_154 Function: updateBarFee
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: barFee Function: updateBarFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for barFee

Name: barFee Function: updateBarFee
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "updateBarFee":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: collectProtocolFee
Function name: collectProtocolFee
Function Visibility (test): public
-100
Add new
clearning node...
clearing ir...?
barFeeTo_2(address) := ϕ(['barFeeTo_4', 'barFeeTo_5', 'barFeeTo_3', 'barFeeTo_1', 'barFeeTo_0'])
has variable
clearing ir...?
token0_21(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_22(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
has variable
clearing ir...?
token0ProtocolFee_1(uint128) := ϕ(['token0ProtocolFee_3', 'token0ProtocolFee_5', 'token0ProtocolFee_0', 'token0ProtocolFee_2'])
has variable
clearing ir...?
token1ProtocolFee_1(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_2', 'token1ProtocolFee_0', 'token1ProtocolFee_6'])
has variable
clearing ir...?
reserve0_22(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
has variable
clearing ir...?
reserve1_23(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
has variable
typecheckig node...
barFeeTo_2(address) := ϕ(['barFeeTo_4', 'barFeeTo_5', 'barFeeTo_3', 'barFeeTo_1', 'barFeeTo_0'])
Function name: collectProtocolFee
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0_21(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: collectProtocolFee
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_22(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: collectProtocolFee
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token0ProtocolFee_1(uint128) := ϕ(['token0ProtocolFee_3', 'token0ProtocolFee_5', 'token0ProtocolFee_0', 'token0ProtocolFee_2'])
Function name: collectProtocolFee
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1ProtocolFee_1(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_2', 'token1ProtocolFee_0', 'token1ProtocolFee_6'])
Function name: collectProtocolFee
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reserve0_22(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: collectProtocolFee
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve1_23(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: collectProtocolFee
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
typecheckig node...
MODIFIER_CALL, ConcentratedLiquidityPool.lock()()
Internal call...
lock
Function: lock
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
TMP_155(bool) = token0ProtocolFee_2 > 1
has variable
[i] TMP_155 cleared
clearing ir...?
CONDITION TMP_155
typecheckig node...
TMP_155(bool) = token0ProtocolFee_2 > 1
Function name: collectProtocolFee
testing gt...
val: 1
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_155

Name: TMP_155 Function: collectProtocolFee
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_155
Condition...
Conidtion: 
TMP_155
TMP_155
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_158(bool) = token1ProtocolFee_3 > 1
has variable
[i] TMP_158 cleared
clearing ir...?
CONDITION TMP_158
typecheckig node...
TMP_158(bool) = token1ProtocolFee_3 > 1
Function name: collectProtocolFee
testing gt...
val: 1
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_158

Name: TMP_158 Function: collectProtocolFee
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_158
Condition...
Conidtion: 
TMP_158
TMP_158
clearning node...
clearing ir...?
TMP_156(uint128) = token0ProtocolFee_2 (c)- 1
has variable
[i] TMP_156 cleared
clearing ir...?
amount0_1(uint128) := TMP_156(uint128)
has variable
[i] amount0 cleared
typecheckig node...
TMP_156(uint128) = token0ProtocolFee_2 (c)- 1
Function name: collectProtocolFee
val: 1
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_156 Function: collectProtocolFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_156

Name: TMP_156 Function: collectProtocolFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amount0_1(uint128) := TMP_156(uint128)
Function name: collectProtocolFee
asgn

Name: TMP_156 Function: collectProtocolFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amount0 Function: collectProtocolFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amount0

Name: amount0 Function: collectProtocolFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_159(uint128) = token1ProtocolFee_3 (c)- 1
has variable
[i] TMP_159 cleared
clearing ir...?
amount1_1(uint128) := TMP_159(uint128)
has variable
[i] amount1 cleared
typecheckig node...
TMP_159(uint128) = token1ProtocolFee_3 (c)- 1
Function name: collectProtocolFee
val: 1
val: 1
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_159 Function: collectProtocolFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_159

Name: TMP_159 Function: collectProtocolFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
amount1_1(uint128) := TMP_159(uint128)
Function name: collectProtocolFee
asgn

Name: TMP_159 Function: collectProtocolFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amount1 Function: collectProtocolFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amount1

Name: amount1 Function: collectProtocolFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
token0ProtocolFee_3(uint128) := 1(uint256)
has variable
typecheckig node...
token0ProtocolFee_3(uint128) := 1(uint256)
Function name: collectProtocolFee
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: token0ProtocolFee Function: collectProtocolFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
token1ProtocolFee_4(uint128) := 1(uint256)
has variable
typecheckig node...
token1ProtocolFee_4(uint128) := 1(uint256)
Function name: collectProtocolFee
asgn
val: 1

Name: 1 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: token1ProtocolFee Function: collectProtocolFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 1
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: collectProtocolFee
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
reserve0_24(uint128) = reserve0_23 (c)- amount0_1
has variable
typecheckig node...
reserve0_24(uint128) = reserve0_23 (c)- amount0_1
Function name: collectProtocolFee
lnorm: u rnorm: 0
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: amount0 Function: collectProtocolFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amount0 Function: collectProtocolFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserve0 Function: collectProtocolFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve0

Name: reserve0 Function: collectProtocolFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
reserve1_26(uint128) = reserve1_25 (c)- amount1_1
has variable
typecheckig node...
reserve1_26(uint128) = reserve1_25 (c)- amount1_1
Function name: collectProtocolFee
lnorm: u rnorm: 0
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: amount1 Function: collectProtocolFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amount1 Function: collectProtocolFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: reserve1 Function: collectProtocolFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: reserve
[i]Type for reserve1

Name: reserve1 Function: collectProtocolFee
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_22,amount0_1,barFeeTo_3,False)
typecheckig node...
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token0_22,amount0_1,barFeeTo_3,False)
Internal call...
_transfer
token0
amount0
barFeeTo
False
Function: _transfer
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], 11]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, None, [], 11]
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: _transfer
Function Visibility: internal
clearning node...
clearing ir...?
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
has variable
[i] token cleared
clearing ir...?
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
has variable
[i] shares cleared
clearing ir...?
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
has variable
[i] to cleared
clearing ir...?
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
has variable
[i] unwrapBento cleared
clearing ir...?
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
Function name: _transfer
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
Function name: _transfer
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
Function name: _transfer
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Norm: u
LF: MANAGER
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Function name: _transfer
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION unwrapBento_1
typecheckig node...
CONDITION unwrapBento_1
Condition...
Conidtion: 
unwrapBento_1
unwrapBento_1
clearning node...
clearing ir...?
TMP_216 = CONVERT this to address
has variable
[i] TMP_216 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
clearing ir...?
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_216 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_215 = CONVERT this to address
has variable
[i] TMP_215 cleared
clearing ir...?
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
has variable
clearing ir...?
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_215 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
Function name: _transfer
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_13
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token
TMP_215
to
0
shares
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_transfer":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _transfer
done.
clearning node...
clearing ir...?
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_24,amount1_1,barFeeTo_4,False)
typecheckig node...
INTERNAL_CALL, ConcentratedLiquidityPool._transfer(address,uint256,address,bool)(token1_24,amount1_1,barFeeTo_4,False)
Internal call...
_transfer
token1
amount1
barFeeTo
False
Function: _transfer
ic
val: False
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 11
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: MANAGER
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 0, None, [], 11]
-100
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, None, [], 11]
[[-1], [-1], 0, 'MANAGER', [], -1]
[[-1], [-1], 0, None, [], -1]
added
xyz
Function name: _transfer
Function Visibility: internal
clearning node...
clearing ir...?
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
has variable
[i] token cleared
clearing ir...?
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
has variable
[i] shares cleared
clearing ir...?
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
has variable
[i] to cleared
clearing ir...?
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
has variable
[i] unwrapBento cleared
clearing ir...?
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
token_1(address) := ϕ(['token0_4', 'token0_18', 'token1_24', 'token1_5', 'token0_22', 'token1_19'])
Function name: _transfer
Phi
[i]Type for token

Name: token Function: _transfer
Num: -1
Den: -1
Norm: u
LF: token
Fields: 
Finance Type: undef
done.
shares_1(uint256) := ϕ(['amountOut_1', 'amount0_1', 'amount1_1', 'amount1fees_1', 'amount0fees_1'])
Function name: _transfer
Phi
[i]Type for shares

Name: shares Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['barFeeTo_4', 'REF_27', 'barFeeTo_3', 'REF_28', 'recipient_1'])
Function name: _transfer
Phi
[i]Type for to

Name: to Function: _transfer
Num: -1
Den: -1
Norm: u
LF: MANAGER
Fields: 
Finance Type: undef
done.
unwrapBento_1(bool) := ϕ(['unwrapBento_1'])
Function name: _transfer
Phi
[i]Type for unwrapBento

Name: unwrapBento Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
bento_4(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION unwrapBento_1
typecheckig node...
CONDITION unwrapBento_1
Condition...
Conidtion: 
unwrapBento_1
unwrapBento_1
clearning node...
clearing ir...?
TMP_216 = CONVERT this to address
has variable
[i] TMP_216 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
clearing ir...?
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_216 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_216

Name: TMP_216 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:transfer, arguments:['token_1', 'TMP_216', 'to_1', 'shares_1']  
High Call: transfer
func name:transfer
other func name:transfer
done.
bento_5(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_4', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_215 = CONVERT this to address
has variable
[i] TMP_215 cleared
clearing ir...?
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
has variable
clearing ir...?
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
has variable
typecheckig node...
TMP_215 = CONVERT this to address
Function name: _transfer
[i]Type for TMP_215

Name: TMP_215 Function: _transfer
Num: 
Den: 
Norm: u
LF: ConcentratedLiquidityPool
Fields: 
Finance Type: undef
done.
TUPLE_13(uint256,uint256) = HIGH_LEVEL_CALL, dest:bento_4(IBentoBoxMinimal), function:withdraw, arguments:['token_1', 'TMP_215', 'to_1', '0', 'shares_1']  
Function name: _transfer
High Call: withdraw
func name:withdraw
other func name:withdraw
TUPLE_13
hlc contract name: BENTO func_name: withdraw
('c', [-1], [-1], 0, None)
token
TMP_215
to
0
shares
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
[<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
Final Type: [<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6460>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fadf14c6610>]
COPIED
[i]Type for TUPLE_13

Name: TUPLE_13 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
bento_6(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_3', 'bento_1', 'bento_9'])
Function name: _transfer
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_transfer":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _transfer
done.
WORKLIST iteration 0 for function call "collectProtocolFee":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: collectProtocolFee

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _ensureTickSpacing
Function _ensureTickSpacing not marked
Mark Iterations TRUE, proceeding anyway
Function name: _ensureTickSpacing
Function Visibility (test): internal
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _getAmountsForLiquidity
Function _getAmountsForLiquidity not marked
Mark Iterations TRUE, proceeding anyway
Function name: _getAmountsForLiquidity
Function Visibility (test): internal
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _updateReserves
Function _updateReserves not marked
Mark Iterations TRUE, proceeding anyway
Function name: _updateReserves
Function Visibility (test): internal
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _updateFees
Function _updateFees not marked
Mark Iterations TRUE, proceeding anyway
Function name: _updateFees
Function Visibility (test): internal
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _updatePosition
Function _updatePosition not marked
Mark Iterations TRUE, proceeding anyway
Function name: _updatePosition
Function Visibility (test): internal
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _balance
Function _balance not marked
Mark Iterations TRUE, proceeding anyway
Function name: _balance
Function Visibility (test): internal
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _transfer
Function _transfer not marked
Mark Iterations TRUE, proceeding anyway
Function name: _transfer
Function Visibility (test): internal
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _transferBothTokens
Function _transferBothTokens not marked
Mark Iterations TRUE, proceeding anyway
Function name: _transferBothTokens
Function Visibility (test): internal
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: rangeFeeGrowth
Function name: rangeFeeGrowth
Function Visibility (test): public
lowerTick
Finding type for lowerTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: int24
int24
Final Type: int24

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
upperTick
Finding type for upperTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: int24
int24
Final Type: int24

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', None, [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
Its the same:
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
has variable
[i] lowerTick cleared
clearing ir...?
upperTick_1(int24) := ϕ(['REF_45', 'upper_1'])
has variable
[i] upperTick cleared
clearing ir...?
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
has variable
clearing ir...?
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
has variable
clearing ir...?
nearestTick_18(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
has variable
clearing ir...?
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
has variable
typecheckig node...
lowerTick_1(int24) := ϕ(['REF_44', 'lower_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for lowerTick

Name: lowerTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upperTick_1(int24) := ϕ(['REF_45', 'upper_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for upperTick

Name: upperTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthGlobal0_10(uint256) := ϕ(['feeGrowthGlobal0_8', 'feeGrowthGlobal0_6', 'feeGrowthGlobal0_9', 'feeGrowthGlobal0_0'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthGlobal0

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
feeGrowthGlobal1_10(uint256) := ϕ(['feeGrowthGlobal1_9', 'feeGrowthGlobal1_8', 'feeGrowthGlobal1_6', 'feeGrowthGlobal1_0'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthGlobal1

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
nearestTick_18(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_16(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: rangeFeeGrowth
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
currentTick_1(int24) := nearestTick_18(int24)
has variable
[i] currentTick cleared
typecheckig node...
currentTick_1(int24) := nearestTick_18(int24)
Function name: rangeFeeGrowth
asgn

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentTick Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for currentTick

Name: currentTick Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
has variable
clearing ir...?
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
has variable
[i] lower cleared
typecheckig node...
REF_165(Ticks.Tick) -> ticks_16[lowerTick_1]
Function name: rangeFeeGrowth
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_165

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_165(Ticks.Tick)
Function name: rangeFeeGrowth
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for lower

Name: lower Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
has variable
clearing ir...?
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
has variable
[i] upper cleared
typecheckig node...
REF_166(Ticks.Tick) -> ticks_16[upperTick_1]
Function name: rangeFeeGrowth
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_166

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_166(Ticks.Tick)
Function name: rangeFeeGrowth
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for upper

Name: upper Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthOutside0, feeGrowthOutside1
Finance Type: undef
done.
clearning node...
clearing ir...?
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
has variable
[i] _feeGrowthGlobal0 cleared
typecheckig node...
_feeGrowthGlobal0_1(uint256) := feeGrowthGlobal0_10(uint256)
Function name: rangeFeeGrowth
asgn

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 10
Final dest type: 10
[i]Type for _feeGrowthGlobal0

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
clearning node...
clearing ir...?
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
has variable
[i] _feeGrowthGlobal1 cleared
typecheckig node...
_feeGrowthGlobal1_1(uint256) := feeGrowthGlobal1_10(uint256)
Function name: rangeFeeGrowth
asgn

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 10
Final dest type: 10
[i]Type for _feeGrowthGlobal1

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_224(bool) = lowerTick_1 <= currentTick_1
has variable
[i] TMP_224 cleared
clearing ir...?
CONDITION TMP_224
typecheckig node...
TMP_224(bool) = lowerTick_1 <= currentTick_1
Function name: rangeFeeGrowth
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_224

Name: TMP_224 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_224
Condition...
Conidtion: 
TMP_224
TMP_224
clearning node...
clearing ir...?
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
has variable
clearing ir...?
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
has variable
[i] TMP_225 cleared
clearing ir...?
feeGrowthBelow0_2(uint256) := TMP_225(uint256)
has variable
[i] feeGrowthBelow0 cleared
typecheckig node...
REF_169(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside0
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_169

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_225(uint256) = _feeGrowthGlobal0_1 (c)- REF_169
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_225 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_225

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthBelow0_2(uint256) := TMP_225(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_225 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
has variable
clearing ir...?
feeGrowthBelow0_1(uint256) := REF_167(uint256)
has variable
[i] feeGrowthBelow0 cleared
typecheckig node...
REF_167(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside0
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_167

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthBelow0_1(uint256) := REF_167(uint256)
Function name: rangeFeeGrowth
asgn

Name: lower.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
has variable
clearing ir...?
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
has variable
[i] TMP_226 cleared
clearing ir...?
feeGrowthBelow1_2(uint256) := TMP_226(uint256)
has variable
[i] feeGrowthBelow1 cleared
typecheckig node...
REF_170(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside1
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_170

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_226(uint256) = _feeGrowthGlobal1_1 (c)- REF_170
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_226 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_226

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthBelow1_2(uint256) := TMP_226(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_226 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
has variable
clearing ir...?
feeGrowthBelow1_1(uint256) := REF_168(uint256)
has variable
[i] feeGrowthBelow1 cleared
typecheckig node...
REF_168(uint256) -> lower_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
lower
feeGrowthOutside1
rangeFeeGrowth
lower Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_168

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthBelow1_1(uint256) := REF_168(uint256)
Function name: rangeFeeGrowth
asgn

Name: lower.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
has variable
[i] feeGrowthBelow0 cleared
clearing ir...?
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_1', 'feeGrowthBelow1_2'])
has variable
[i] feeGrowthBelow1 cleared
typecheckig node...
feeGrowthBelow0_3(uint256) := ϕ(['feeGrowthBelow0_1', 'feeGrowthBelow0_2'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthBelow0

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthBelow1_3(uint256) := ϕ(['feeGrowthBelow1_1', 'feeGrowthBelow1_2'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthBelow1

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_227(bool) = currentTick_1 < upperTick_1
has variable
[i] TMP_227 cleared
clearing ir...?
CONDITION TMP_227
typecheckig node...
TMP_227(bool) = currentTick_1 < upperTick_1
Function name: rangeFeeGrowth
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_227

Name: TMP_227 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_227
Condition...
Conidtion: 
TMP_227
TMP_227
clearning node...
clearing ir...?
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
has variable
clearing ir...?
feeGrowthAbove0_1(uint256) := REF_171(uint256)
has variable
[i] feeGrowthAbove0 cleared
typecheckig node...
REF_171(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside0
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_171

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthAbove0_1(uint256) := REF_171(uint256)
Function name: rangeFeeGrowth
asgn

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
has variable
clearing ir...?
feeGrowthAbove1_1(uint256) := REF_172(uint256)
has variable
[i] feeGrowthAbove1 cleared
typecheckig node...
REF_172(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside1
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_172

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
feeGrowthAbove1_1(uint256) := REF_172(uint256)
Function name: rangeFeeGrowth
asgn

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
has variable
clearing ir...?
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
has variable
[i] TMP_228 cleared
clearing ir...?
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
has variable
[i] feeGrowthAbove0 cleared
typecheckig node...
REF_173(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside0
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside0
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_173

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_228(uint256) = _feeGrowthGlobal0_1 (c)- REF_173
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_228 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_228

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthAbove0_2(uint256) := TMP_228(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_228 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
has variable
clearing ir...?
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
has variable
[i] TMP_229 cleared
clearing ir...?
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
has variable
[i] feeGrowthAbove1 cleared
typecheckig node...
REF_174(uint256) -> upper_1 (-> ['ticks']).feeGrowthOutside1
Function name: rangeFeeGrowth
MEMBER
upper
feeGrowthOutside1
rangeFeeGrowth
upper Fields:
feeGrowthOutside0
feeGrowthOutside1
^^^

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_174

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthOutside1 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_229(uint256) = _feeGrowthGlobal1_1 (c)- REF_174
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.feeGrowthOutside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_229 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_229

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthAbove1_2(uint256) := TMP_229(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_229 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
has variable
[i] feeGrowthAbove0 cleared
clearing ir...?
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
has variable
[i] feeGrowthAbove1 cleared
typecheckig node...
feeGrowthAbove0_3(uint256) := ϕ(['feeGrowthAbove0_1', 'feeGrowthAbove0_2'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthAbove0

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthAbove1_3(uint256) := ϕ(['feeGrowthAbove1_2', 'feeGrowthAbove1_1'])
Function name: rangeFeeGrowth
Phi
[i]Type for feeGrowthAbove1

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
has variable
[i] TMP_230 cleared
clearing ir...?
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
has variable
[i] TMP_231 cleared
clearing ir...?
feeGrowthInside0_1(uint256) := TMP_231(uint256)
has variable
[i] feeGrowthInside0 cleared
typecheckig node...
TMP_230(uint256) = _feeGrowthGlobal0_1 (c)- feeGrowthBelow0_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_230 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_230

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
TMP_231(uint256) = TMP_230 (c)- feeGrowthAbove0_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 110, Left type: 110
Final dest type: 110

Name: TMP_230 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: TMP_231 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_231

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthInside0_1(uint256) := TMP_231(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_231 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthInside0

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
has variable
[i] TMP_232 cleared
clearing ir...?
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
has variable
[i] TMP_233 cleared
clearing ir...?
feeGrowthInside1_1(uint256) := TMP_233(uint256)
has variable
[i] feeGrowthInside1 cleared
typecheckig node...
TMP_232(uint256) = _feeGrowthGlobal1_1 (c)- feeGrowthBelow1_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: -1, Left type: 10
Final dest type: 110

Name: _feeGrowthGlobal1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: feeGrowthBelow1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_232 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_232

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
TMP_233(uint256) = TMP_232 (c)- feeGrowthAbove1_3
Function name: rangeFeeGrowth
lnorm: u rnorm: u
Finance type key: (10, 10)
Func: sub
Dest type: 10, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Dest updated
Right type: 110, Left type: 110
Final dest type: 110

Name: TMP_232 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthAbove1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: TMP_233 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
[i]Type for TMP_233

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
feeGrowthInside1_1(uint256) := TMP_233(uint256)
Function name: rangeFeeGrowth
asgn

Name: TMP_233 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
Finance type key: (10, -1)
Func: assign
Dest type: 110, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 110
Final dest type: 110
[i]Type for feeGrowthInside1

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
done.
clearning node...
clearing ir...?
RETURN feeGrowthInside0_1,feeGrowthInside1_1
typecheckig node...
RETURN feeGrowthInside0_1,feeGrowthInside1_1
RETURN

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
WORKLIST iteration 0 for function call "rangeFeeGrowth":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: rangeFeeGrowth

Name: feeGrowthInside0 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
___

Name: feeGrowthInside1 Function: rangeFeeGrowth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: updated compound fee ratio (t)
___
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: rangeSecondsInside
Function name: rangeSecondsInside
Function Visibility (test): public
lowerTick
Finding type for lowerTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: int24
int24
Final Type: int24

Name: lowerTick Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
upperTick
Finding type for upperTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: int24
int24
Final Type: int24

Name: upperTick Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
secondsPerLiquidity_10(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
has variable
clearing ir...?
nearestTick_19(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
has variable
clearing ir...?
ticks_17(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
has variable
typecheckig node...
secondsPerLiquidity_10(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Function name: rangeSecondsInside
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_19(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: rangeSecondsInside
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_17(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: rangeSecondsInside
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
currentTick_1(int24) := nearestTick_19(int24)
has variable
[i] currentTick cleared
typecheckig node...
currentTick_1(int24) := nearestTick_19(int24)
Function name: rangeSecondsInside
asgn

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentTick Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for currentTick

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_175(Ticks.Tick) -> ticks_17[lowerTick_1]
has variable
clearing ir...?
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_175(Ticks.Tick)
has variable
[i] lower cleared
typecheckig node...
REF_175(Ticks.Tick) -> ticks_17[lowerTick_1]
Function name: rangeSecondsInside
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_175

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_175(Ticks.Tick)
Function name: rangeSecondsInside
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for lower

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_176(Ticks.Tick) -> ticks_17[upperTick_1]
has variable
clearing ir...?
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_176(Ticks.Tick)
has variable
[i] upper cleared
typecheckig node...
REF_176(Ticks.Tick) -> ticks_17[upperTick_1]
Function name: rangeSecondsInside
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_176

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_176(Ticks.Tick)
Function name: rangeSecondsInside
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for upper

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
secondsGlobal_1(uint256) := secondsPerLiquidity_10(uint160)
has variable
[i] secondsGlobal cleared
typecheckig node...
secondsGlobal_1(uint256) := secondsPerLiquidity_10(uint160)
Function name: rangeSecondsInside
asgn

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsGlobal Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_234(bool) = lowerTick_1 <= currentTick_1
has variable
[i] TMP_234 cleared
clearing ir...?
CONDITION TMP_234
typecheckig node...
TMP_234(bool) = lowerTick_1 <= currentTick_1
Function name: rangeSecondsInside
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_234

Name: TMP_234 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_234
Condition...
Conidtion: 
TMP_234
TMP_234
clearning node...
clearing ir...?
REF_178(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
has variable
clearing ir...?
TMP_235(uint256) = secondsGlobal_1 (c)- REF_178
has variable
[i] TMP_235 cleared
clearing ir...?
secondsBelow_2(uint256) := TMP_235(uint256)
has variable
[i] secondsBelow cleared
typecheckig node...
REF_178(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
Function name: rangeSecondsInside
MEMBER
lower
secondsPerLiquidityOutside
rangeSecondsInside
lower Fields:
^^^
[i]Type for REF_178

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_235(uint256) = secondsGlobal_1 (c)- REF_178
Function name: rangeSecondsInside
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_235 Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_235

Name: TMP_235 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_235(uint256) = secondsGlobal_1 (c)- REF_178
XXXXX
secondsBelow_2(uint256) := TMP_235(uint256)
Function name: rangeSecondsInside
asgn

Name: TMP_235 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_177(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
has variable
clearing ir...?
secondsBelow_1(uint256) := REF_177(uint160)
has variable
[i] secondsBelow cleared
typecheckig node...
REF_177(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
Function name: rangeSecondsInside
MEMBER
lower
secondsPerLiquidityOutside
rangeSecondsInside
lower Fields:
secondsPerLiquidityOutside
^^^

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_177

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsBelow_1(uint256) := REF_177(uint160)
Function name: rangeSecondsInside
asgn

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
secondsBelow_3(uint256) := ϕ(['secondsBelow_1', 'secondsBelow_2'])
has variable
[i] secondsBelow cleared
typecheckig node...
secondsBelow_3(uint256) := ϕ(['secondsBelow_1', 'secondsBelow_2'])
Function name: rangeSecondsInside
Phi
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_236(bool) = currentTick_1 < upperTick_1
has variable
[i] TMP_236 cleared
clearing ir...?
CONDITION TMP_236
typecheckig node...
TMP_236(bool) = currentTick_1 < upperTick_1
Function name: rangeSecondsInside
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_236

Name: TMP_236 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_236
Condition...
Conidtion: 
TMP_236
TMP_236
clearning node...
clearing ir...?
REF_179(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
has variable
clearing ir...?
secondsAbove_2(uint256) := REF_179(uint160)
has variable
[i] secondsAbove cleared
typecheckig node...
REF_179(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
Function name: rangeSecondsInside
MEMBER
upper
secondsPerLiquidityOutside
rangeSecondsInside
upper Fields:
^^^
[i]Type for REF_179

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsAbove_2(uint256) := REF_179(uint160)
Function name: rangeSecondsInside
asgn

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
secondsAbove_2(uint256) := REF_179(uint160)
XXXXX
clearning node...
clearing ir...?
secondsAbove_3(uint256) := ϕ(['secondsAbove_2', 'secondsAbove_1'])
has variable
[i] secondsAbove cleared
typecheckig node...
secondsAbove_3(uint256) := ϕ(['secondsAbove_2', 'secondsAbove_1'])
Function name: rangeSecondsInside
Phi
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_180(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
has variable
clearing ir...?
TMP_237(uint256) = secondsGlobal_1 (c)- REF_180
has variable
[i] TMP_237 cleared
clearing ir...?
secondsAbove_1(uint256) := TMP_237(uint256)
has variable
[i] secondsAbove cleared
typecheckig node...
REF_180(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
Function name: rangeSecondsInside
MEMBER
upper
secondsPerLiquidityOutside
rangeSecondsInside
upper Fields:
secondsPerLiquidityOutside
^^^

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_180

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_237(uint256) = secondsGlobal_1 (c)- REF_180
Function name: rangeSecondsInside
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_237 Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_237

Name: TMP_237 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsAbove_1(uint256) := TMP_237(uint256)
Function name: rangeSecondsInside
asgn

Name: TMP_237 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_238(uint256) = secondsGlobal_1 (c)- secondsBelow_3
has variable
[i] TMP_238 cleared
clearing ir...?
TMP_239(uint256) = TMP_238 (c)- secondsAbove_3
has variable
[i] TMP_239 cleared
clearing ir...?
secondsInside_1(uint256) := TMP_239(uint256)
has variable
[i] secondsInside cleared
typecheckig node...
TMP_238(uint256) = secondsGlobal_1 (c)- secondsBelow_3
Function name: rangeSecondsInside
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_238 Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_238

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_239(uint256) = TMP_238 (c)- secondsAbove_3
Function name: rangeSecondsInside
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_239 Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_239

Name: TMP_239 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsInside_1(uint256) := TMP_239(uint256)
Function name: rangeSecondsInside
asgn

Name: TMP_239 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsInside Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsInside

Name: secondsInside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "rangeSecondsInside":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
secondsPerLiquidity_10(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Function name: rangeSecondsInside
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_19(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: rangeSecondsInside
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_17(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: rangeSecondsInside
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
currentTick_1(int24) := nearestTick_19(int24)
Function name: rangeSecondsInside
asgn

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for currentTick

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_175(Ticks.Tick) -> ticks_17[lowerTick_1]
Function name: rangeSecondsInside
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_175

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_175(Ticks.Tick)
Function name: rangeSecondsInside
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: secondsPerLiquidityOutside
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for lower

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: secondsPerLiquidityOutside
Finance Type: undef
done.
typecheckig node...
REF_176(Ticks.Tick) -> ticks_17[upperTick_1]
Function name: rangeSecondsInside
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_176

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_176(Ticks.Tick)
Function name: rangeSecondsInside
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: secondsPerLiquidityOutside
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for upper

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: secondsPerLiquidityOutside
Finance Type: undef
done.
typecheckig node...
secondsGlobal_1(uint256) := secondsPerLiquidity_10(uint160)
Function name: rangeSecondsInside
asgn

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
typecheckig node...
TMP_234(bool) = lowerTick_1 <= currentTick_1
Function name: rangeSecondsInside
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_234

Name: TMP_234 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_234
Condition...
Conidtion: 
TMP_234
TMP_234
typecheckig node...
REF_178(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
Function name: rangeSecondsInside
MEMBER
lower
secondsPerLiquidityOutside
rangeSecondsInside
lower Fields:
secondsPerLiquidityOutside
^^^

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_178

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_235(uint256) = secondsGlobal_1 (c)- REF_178
Function name: rangeSecondsInside
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_235 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_235

Name: TMP_235 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsBelow_2(uint256) := TMP_235(uint256)
Function name: rangeSecondsInside
asgn

Name: TMP_235 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_177(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
Function name: rangeSecondsInside
MEMBER
lower
secondsPerLiquidityOutside
rangeSecondsInside
lower Fields:
secondsPerLiquidityOutside
^^^

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_177

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsBelow_1(uint256) := REF_177(uint160)
Function name: rangeSecondsInside
asgn

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
secondsBelow_3(uint256) := ϕ(['secondsBelow_1', 'secondsBelow_2'])
Function name: rangeSecondsInside
Phi
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_236(bool) = currentTick_1 < upperTick_1
Function name: rangeSecondsInside
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_236

Name: TMP_236 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_236
Condition...
Conidtion: 
TMP_236
TMP_236
typecheckig node...
REF_179(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
Function name: rangeSecondsInside
MEMBER
upper
secondsPerLiquidityOutside
rangeSecondsInside
upper Fields:
secondsPerLiquidityOutside
^^^

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_179

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsAbove_2(uint256) := REF_179(uint160)
Function name: rangeSecondsInside
asgn

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
secondsAbove_3(uint256) := ϕ(['secondsAbove_2', 'secondsAbove_1'])
Function name: rangeSecondsInside
Phi
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_180(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
Function name: rangeSecondsInside
MEMBER
upper
secondsPerLiquidityOutside
rangeSecondsInside
upper Fields:
secondsPerLiquidityOutside
^^^

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_180

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_237(uint256) = secondsGlobal_1 (c)- REF_180
Function name: rangeSecondsInside
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_237 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_237

Name: TMP_237 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsAbove_1(uint256) := TMP_237(uint256)
Function name: rangeSecondsInside
asgn

Name: TMP_237 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_238(uint256) = secondsGlobal_1 (c)- secondsBelow_3
Function name: rangeSecondsInside
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_238

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_239(uint256) = TMP_238 (c)- secondsAbove_3
Function name: rangeSecondsInside
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_239 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_239

Name: TMP_239 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsInside_1(uint256) := TMP_239(uint256)
Function name: rangeSecondsInside
asgn

Name: TMP_239 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsInside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsInside

Name: secondsInside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "rangeSecondsInside":
 New undefined nodes- 0
 Old undefined nodes- 2
typecheckig node...
secondsPerLiquidity_10(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Function name: rangeSecondsInside
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_19(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: rangeSecondsInside
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
ticks_17(mapping(int24 => Ticks.Tick)) := ϕ(['ticks_15', 'ticks_16', 'ticks_17', 'ticks_13', 'ticks_0', 'ticks_2', 'ticks_8'])
Function name: rangeSecondsInside
Phi
[i]Type for ticks

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
currentTick_1(int24) := nearestTick_19(int24)
Function name: rangeSecondsInside
asgn

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for currentTick

Name: currentTick Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_175(Ticks.Tick) -> ticks_17[lowerTick_1]
Function name: rangeSecondsInside
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_175

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lower_1 (-> ['ticks'])(Ticks.Tick) := REF_175(Ticks.Tick)
Function name: rangeSecondsInside
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: secondsPerLiquidityOutside
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for lower

Name: lower Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: secondsPerLiquidityOutside
Finance Type: undef
done.
typecheckig node...
REF_176(Ticks.Tick) -> ticks_17[upperTick_1]
Function name: rangeSecondsInside
INDEX

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_176

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
upper_1 (-> ['ticks'])(Ticks.Tick) := REF_176(Ticks.Tick)
Function name: rangeSecondsInside
asgn

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: secondsPerLiquidityOutside
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for upper

Name: upper Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: secondsPerLiquidityOutside
Finance Type: undef
done.
typecheckig node...
secondsGlobal_1(uint256) := secondsPerLiquidity_10(uint160)
Function name: rangeSecondsInside
asgn

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsGlobal

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
typecheckig node...
typecheckig node...
TMP_234(bool) = lowerTick_1 <= currentTick_1
Function name: rangeSecondsInside
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_234

Name: TMP_234 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_234
Condition...
Conidtion: 
TMP_234
TMP_234
typecheckig node...
REF_178(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
Function name: rangeSecondsInside
MEMBER
lower
secondsPerLiquidityOutside
rangeSecondsInside
lower Fields:
secondsPerLiquidityOutside
^^^

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_178

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_235(uint256) = secondsGlobal_1 (c)- REF_178
Function name: rangeSecondsInside
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_235 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_235

Name: TMP_235 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsBelow_2(uint256) := TMP_235(uint256)
Function name: rangeSecondsInside
asgn

Name: TMP_235 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_177(uint160) -> lower_1 (-> ['ticks']).secondsPerLiquidityOutside
Function name: rangeSecondsInside
MEMBER
lower
secondsPerLiquidityOutside
rangeSecondsInside
lower Fields:
secondsPerLiquidityOutside
^^^

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_177

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsBelow_1(uint256) := REF_177(uint160)
Function name: rangeSecondsInside
asgn

Name: lower.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
secondsBelow_3(uint256) := ϕ(['secondsBelow_1', 'secondsBelow_2'])
Function name: rangeSecondsInside
Phi
[i]Type for secondsBelow

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_236(bool) = currentTick_1 < upperTick_1
Function name: rangeSecondsInside
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_236

Name: TMP_236 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_236
Condition...
Conidtion: 
TMP_236
TMP_236
typecheckig node...
REF_179(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
Function name: rangeSecondsInside
MEMBER
upper
secondsPerLiquidityOutside
rangeSecondsInside
upper Fields:
secondsPerLiquidityOutside
^^^

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_179

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsAbove_2(uint256) := REF_179(uint160)
Function name: rangeSecondsInside
asgn

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
secondsAbove_3(uint256) := ϕ(['secondsAbove_2', 'secondsAbove_1'])
Function name: rangeSecondsInside
Phi
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_180(uint160) -> upper_1 (-> ['ticks']).secondsPerLiquidityOutside
Function name: rangeSecondsInside
MEMBER
upper
secondsPerLiquidityOutside
rangeSecondsInside
upper Fields:
secondsPerLiquidityOutside
^^^

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_180

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsPerLiquidityOutside Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_237(uint256) = secondsGlobal_1 (c)- REF_180
Function name: rangeSecondsInside
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: upper.secondsPerLiquidityOutside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_237 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_237

Name: TMP_237 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsAbove_1(uint256) := TMP_237(uint256)
Function name: rangeSecondsInside
asgn

Name: TMP_237 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsAbove

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_238(uint256) = secondsGlobal_1 (c)- secondsBelow_3
Function name: rangeSecondsInside
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: secondsGlobal Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsBelow Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_238

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_239(uint256) = TMP_238 (c)- secondsAbove_3
Function name: rangeSecondsInside
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_238 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsAbove Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_239 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_239

Name: TMP_239 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
secondsInside_1(uint256) := TMP_239(uint256)
Function name: rangeSecondsInside
asgn

Name: TMP_239 Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: secondsInside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for secondsInside

Name: secondsInside Function: rangeSecondsInside
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 2 for function call "rangeSecondsInside":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: rangeSecondsInside

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getAssets
Function getAssets not marked
Mark Iterations TRUE, proceeding anyway
Function name: getAssets
Function Visibility (test): public
clearning node...
clearing ir...?
token0_29(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_33(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
token0_29(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: getAssets
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_33(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: getAssets
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_241 = new address[](2)
clearing ir...?
assets_1(address[]) := TMP_241(address)
has variable
[i] assets cleared
typecheckig node...
TMP_241 = new address[](2)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
assets_1(address[]) := TMP_241(address)
Function name: getAssets
asgn

Name: TMP_241 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: assets Function: getAssets
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
assets_1(address[]) := TMP_241(address)
XXXXX
clearning node...
clearing ir...?
REF_181(address) -> assets_1[0]
has variable
clearing ir...?
assets_2(address[]) := ϕ(['assets_1'])
has variable
[i] assets cleared
clearing ir...?
REF_181 (->assets_2) := token0_29(address)
has variable
typecheckig node...
REF_181(address) -> assets_1[0]
Function name: getAssets
INDEX
[i]Type for REF_181

Name: REF_181 Function: getAssets
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
assets_2(address[]) := ϕ(['assets_1'])
Function name: getAssets
Phi
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_181 (->assets_2) := token0_29(address)
Function name: getAssets
asgn

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_181 Function: getAssets
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_181

Name: REF_181 Function: getAssets
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_182(address) -> assets_2[1]
has variable
clearing ir...?
assets_3(address[]) := ϕ(['assets_2'])
has variable
[i] assets cleared
clearing ir...?
REF_182 (->assets_3) := token1_33(address)
has variable
typecheckig node...
REF_182(address) -> assets_2[1]
Function name: getAssets
INDEX
[i]Type for REF_182

Name: REF_182 Function: getAssets
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
assets_3(address[]) := ϕ(['assets_2'])
Function name: getAssets
Phi
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_182 (->assets_3) := token1_33(address)
Function name: getAssets
asgn

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_182 Function: getAssets
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_182

Name: REF_182 Function: getAssets
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "getAssets":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
token0_29(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: getAssets
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_33(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: getAssets
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_241 = new address[](2)
[i]Type for TMP_241

Name: TMP_241 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
assets_1(address[]) := TMP_241(address)
Function name: getAssets
asgn

Name: TMP_241 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: assets Function: getAssets
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
assets_1(address[]) := TMP_241(address)
XXXXX
typecheckig node...
REF_181(address) -> assets_1[0]
Function name: getAssets
INDEX
[i]Type for REF_181

Name: REF_181 Function: getAssets
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
assets_2(address[]) := ϕ(['assets_1'])
Function name: getAssets
Phi
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_181 (->assets_2) := token0_29(address)
Function name: getAssets
asgn

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_181 Function: getAssets
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_181

Name: REF_181 Function: getAssets
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_182(address) -> assets_2[1]
Function name: getAssets
INDEX
[i]Type for REF_182

Name: REF_182 Function: getAssets
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
assets_3(address[]) := ϕ(['assets_2'])
Function name: getAssets
Phi
[i]Type for assets

Name: assets Function: getAssets
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_182 (->assets_3) := token1_33(address)
Function name: getAssets
asgn

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_182 Function: getAssets
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_182

Name: REF_182 Function: getAssets
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "getAssets":
 New undefined nodes- 1
 Old undefined nodes- 1
No save for this scenario
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getAmountOut
Function getAmountOut not marked
Mark Iterations TRUE, proceeding anyway
Function name: getAmountOut
Function Visibility (test): public

Finding type for ...
bytes
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_242(None) = SOLIDITY_CALL revert()()
typecheckig node...
TMP_242(None) = SOLIDITY_CALL revert()()
[i]Type for TMP_242

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "getAmountOut":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getImmutables
Function getImmutables not marked
Mark Iterations TRUE, proceeding anyway
Function name: getImmutables
Function Visibility (test): public
clearning node...
clearing ir...?
MAX_TICK_LIQUIDITY_6(uint128) := ϕ(['MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_0'])
has variable
clearing ir...?
tickSpacing_3(uint24) := ϕ(['tickSpacing_1', 'tickSpacing_0'])
has variable
clearing ir...?
swapFee_4(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
has variable
clearing ir...?
barFeeTo_6(address) := ϕ(['barFeeTo_4', 'barFeeTo_5', 'barFeeTo_3', 'barFeeTo_1', 'barFeeTo_0'])
has variable
clearing ir...?
bento_12(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
has variable
clearing ir...?
masterDeployer_4(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_1', 'masterDeployer_0'])
has variable
clearing ir...?
token0_30(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
has variable
clearing ir...?
token1_34(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
has variable
typecheckig node...
MAX_TICK_LIQUIDITY_6(uint128) := ϕ(['MAX_TICK_LIQUIDITY_5', 'MAX_TICK_LIQUIDITY_1', 'MAX_TICK_LIQUIDITY_3', 'MAX_TICK_LIQUIDITY_0'])
Function name: getImmutables
Phi
[i]Type for MAX_TICK_LIQUIDITY

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tickSpacing_3(uint24) := ϕ(['tickSpacing_1', 'tickSpacing_0'])
Function name: getImmutables
Phi
[i]Type for tickSpacing

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
swapFee_4(uint24) := ϕ(['swapFee_0', 'swapFee_1', 'swapFee_3'])
Function name: getImmutables
Phi
[i]Type for swapFee

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
barFeeTo_6(address) := ϕ(['barFeeTo_4', 'barFeeTo_5', 'barFeeTo_3', 'barFeeTo_1', 'barFeeTo_0'])
Function name: getImmutables
Phi
[i]Type for barFeeTo

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
bento_12(IBentoBoxMinimal) := ϕ(['bento_11', 'bento_6', 'bento_5', 'bento_0', 'bento_3', 'bento_1', 'bento_9'])
Function name: getImmutables
Phi
[i]Type for bento

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
masterDeployer_4(IMasterDeployer) := ϕ(['masterDeployer_3', 'masterDeployer_1', 'masterDeployer_0'])
Function name: getImmutables
Phi
[i]Type for masterDeployer

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
done.
token0_30(address) := ϕ(['token0_23', 'token0_25', 'token0_14', 'token0_1', 'token0_0', 'token0_20', 'token0_22', 'token0_28', 'token0_10', 'token0_9', 'token0_19', 'token0_27'])
Function name: getImmutables
Phi
[i]Type for token0

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1_34(address) := ϕ(['token1_11', 'token1_1', 'token1_10', 'token1_23', 'token1_27', 'token1_9', 'token1_24', 'token1_20', 'token1_30', 'token1_32', 'token1_0', 'token1_15', 'token1_21', 'token1_25'])
Function name: getImmutables
Phi
[i]Type for token1

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_MAX_TICK_LIQUIDITY_1(uint128) := MAX_TICK_LIQUIDITY_6(uint128)
has variable
[i] _MAX_TICK_LIQUIDITY cleared
typecheckig node...
_MAX_TICK_LIQUIDITY_1(uint128) := MAX_TICK_LIQUIDITY_6(uint128)
Function name: getImmutables
asgn

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _MAX_TICK_LIQUIDITY Function: getImmutables
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _MAX_TICK_LIQUIDITY

Name: _MAX_TICK_LIQUIDITY Function: getImmutables
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_tickSpacing_1(uint24) := tickSpacing_3(uint24)
has variable
[i] _tickSpacing cleared
typecheckig node...
_tickSpacing_1(uint24) := tickSpacing_3(uint24)
Function name: getImmutables
asgn

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _tickSpacing Function: getImmutables
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _tickSpacing

Name: _tickSpacing Function: getImmutables
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_swapFee_1(uint24) := swapFee_4(uint24)
has variable
[i] _swapFee cleared
typecheckig node...
_swapFee_1(uint24) := swapFee_4(uint24)
Function name: getImmutables
asgn

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _swapFee Function: getImmutables
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _swapFee

Name: _swapFee Function: getImmutables
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_barFeeTo_1(address) := barFeeTo_6(address)
has variable
[i] _barFeeTo cleared
typecheckig node...
_barFeeTo_1(address) := barFeeTo_6(address)
Function name: getImmutables
asgn

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _barFeeTo Function: getImmutables
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _barFeeTo

Name: _barFeeTo Function: getImmutables
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_bento_1(IBentoBoxMinimal) := bento_12(IBentoBoxMinimal)
has variable
[i] _bento cleared
typecheckig node...
_bento_1(IBentoBoxMinimal) := bento_12(IBentoBoxMinimal)
Function name: getImmutables
asgn

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef

Name: _bento Function: getImmutables
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _bento

Name: _bento Function: getImmutables
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_masterDeployer_1(IMasterDeployer) := masterDeployer_4(IMasterDeployer)
has variable
[i] _masterDeployer cleared
typecheckig node...
_masterDeployer_1(IMasterDeployer) := masterDeployer_4(IMasterDeployer)
Function name: getImmutables
asgn

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef

Name: _masterDeployer Function: getImmutables
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _masterDeployer

Name: _masterDeployer Function: getImmutables
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_token0_1(address) := token0_30(address)
has variable
[i] _token0 cleared
typecheckig node...
_token0_1(address) := token0_30(address)
Function name: getImmutables
asgn

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _token0 Function: getImmutables
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _token0

Name: _token0 Function: getImmutables
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_token1_1(address) := token1_34(address)
has variable
[i] _token1 cleared
typecheckig node...
_token1_1(address) := token1_34(address)
Function name: getImmutables
asgn

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _token1 Function: getImmutables
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _token1

Name: _token1 Function: getImmutables
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "getImmutables":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getPriceAndNearestTicks
Function getPriceAndNearestTicks not marked
Mark Iterations TRUE, proceeding anyway
Function name: getPriceAndNearestTicks
Function Visibility (test): public
clearning node...
clearing ir...?
price_9(uint160) := ϕ(['price_0', 'price_8', 'price_3', 'price_1', 'price_5'])
has variable
clearing ir...?
nearestTick_20(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
has variable
typecheckig node...
price_9(uint160) := ϕ(['price_0', 'price_8', 'price_3', 'price_1', 'price_5'])
Function name: getPriceAndNearestTicks
Phi
[i]Type for price

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
nearestTick_20(int24) := ϕ(['nearestTick_17', 'nearestTick_16', 'nearestTick_0', 'nearestTick_8', 'nearestTick_14', 'nearestTick_1'])
Function name: getPriceAndNearestTicks
Phi
[i]Type for nearestTick

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_price_1(uint160) := price_9(uint160)
has variable
[i] _price cleared
typecheckig node...
_price_1(uint160) := price_9(uint160)
Function name: getPriceAndNearestTicks
asgn

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _price Function: getPriceAndNearestTicks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _price

Name: _price Function: getPriceAndNearestTicks
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_nearestTick_1(int24) := nearestTick_20(int24)
has variable
[i] _nearestTick cleared
typecheckig node...
_nearestTick_1(int24) := nearestTick_20(int24)
Function name: getPriceAndNearestTicks
asgn

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _nearestTick Function: getPriceAndNearestTicks
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _nearestTick

Name: _nearestTick Function: getPriceAndNearestTicks
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "getPriceAndNearestTicks":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getTokenProtocolFees
Function getTokenProtocolFees not marked
Mark Iterations TRUE, proceeding anyway
Function name: getTokenProtocolFees
Function Visibility (test): public
clearning node...
clearing ir...?
token0ProtocolFee_6(uint128) := ϕ(['token0ProtocolFee_3', 'token0ProtocolFee_5', 'token0ProtocolFee_0', 'token0ProtocolFee_2'])
has variable
clearing ir...?
token1ProtocolFee_7(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_2', 'token1ProtocolFee_0', 'token1ProtocolFee_6'])
has variable
typecheckig node...
token0ProtocolFee_6(uint128) := ϕ(['token0ProtocolFee_3', 'token0ProtocolFee_5', 'token0ProtocolFee_0', 'token0ProtocolFee_2'])
Function name: getTokenProtocolFees
Phi
[i]Type for token0ProtocolFee

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
token1ProtocolFee_7(uint128) := ϕ(['token1ProtocolFee_4', 'token1ProtocolFee_3', 'token1ProtocolFee_2', 'token1ProtocolFee_0', 'token1ProtocolFee_6'])
Function name: getTokenProtocolFees
Phi
[i]Type for token1ProtocolFee

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_token0ProtocolFee_1(uint128) := token0ProtocolFee_6(uint128)
has variable
[i] _token0ProtocolFee cleared
typecheckig node...
_token0ProtocolFee_1(uint128) := token0ProtocolFee_6(uint128)
Function name: getTokenProtocolFees
asgn

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _token0ProtocolFee Function: getTokenProtocolFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _token0ProtocolFee

Name: _token0ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_token1ProtocolFee_1(uint128) := token1ProtocolFee_7(uint128)
has variable
[i] _token1ProtocolFee cleared
typecheckig node...
_token1ProtocolFee_1(uint128) := token1ProtocolFee_7(uint128)
Function name: getTokenProtocolFees
asgn

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _token1ProtocolFee Function: getTokenProtocolFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _token1ProtocolFee

Name: _token1ProtocolFee Function: getTokenProtocolFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "getTokenProtocolFees":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getReserves
Function getReserves not marked
Mark Iterations TRUE, proceeding anyway
Function name: getReserves
Function Visibility (test): public
clearning node...
clearing ir...?
reserve0_31(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
has variable
clearing ir...?
reserve1_33(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
has variable
typecheckig node...
reserve0_31(uint128) := ϕ(['reserve0_0', 'reserve0_9', 'reserve0_23', 'reserve0_24', 'reserve0_21', 'reserve0_30', 'reserve0_11', 'reserve0_16'])
Function name: getReserves
Phi
[i]Type for reserve0

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
reserve1_33(uint128) := ϕ(['reserve1_32', 'reserve1_24', 'reserve1_17', 'reserve1_10', 'reserve1_0', 'reserve1_9', 'reserve1_26', 'reserve1_25', 'reserve1_22', 'reserve1_12'])
Function name: getReserves
Phi
[i]Type for reserve1

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
_reserve0_1(uint128) := reserve0_31(uint128)
has variable
[i] _reserve0 cleared
typecheckig node...
_reserve0_1(uint128) := reserve0_31(uint128)
Function name: getReserves
asgn

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: _reserve0 Function: getReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for _reserve0

Name: _reserve0 Function: getReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
clearning node...
clearing ir...?
_reserve1_1(uint128) := reserve1_33(uint128)
has variable
[i] _reserve1 cleared
typecheckig node...
_reserve1_1(uint128) := reserve1_33(uint128)
Function name: getReserves
asgn

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve

Name: _reserve1 Function: getReserves
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (30, -1)
Func: assign
Dest type: 30, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: 30
Final dest type: 30
[i]Type for _reserve1

Name: _reserve1 Function: getReserves
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
done.
WORKLIST iteration 0 for function call "getReserves":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getLiquidityAndLastObservation
Function getLiquidityAndLastObservation not marked
Mark Iterations TRUE, proceeding anyway
Function name: getLiquidityAndLastObservation
Function Visibility (test): public
clearning node...
clearing ir...?
secondsPerLiquidity_11(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
has variable
clearing ir...?
lastObservation_4(uint32) := ϕ(['lastObservation_0', 'lastObservation_3', 'lastObservation_2'])
has variable
typecheckig node...
secondsPerLiquidity_11(uint160) := ϕ(['secondsPerLiquidity_9', 'secondsPerLiquidity_0', 'secondsPerLiquidity_8', 'secondsPerLiquidity_6'])
Function name: getLiquidityAndLastObservation
Phi
[i]Type for secondsPerLiquidity

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lastObservation_4(uint32) := ϕ(['lastObservation_0', 'lastObservation_3', 'lastObservation_2'])
Function name: getLiquidityAndLastObservation
Phi
[i]Type for lastObservation

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_secondsPerLiquidity_1(uint160) := secondsPerLiquidity_11(uint160)
has variable
[i] _secondsPerLiquidity cleared
typecheckig node...
_secondsPerLiquidity_1(uint160) := secondsPerLiquidity_11(uint160)
Function name: getLiquidityAndLastObservation
asgn

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _secondsPerLiquidity Function: getLiquidityAndLastObservation
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _secondsPerLiquidity

Name: _secondsPerLiquidity Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_lastObservation_1(uint32) := lastObservation_4(uint32)
has variable
[i] _lastObservation cleared
typecheckig node...
_lastObservation_1(uint32) := lastObservation_4(uint32)
Function name: getLiquidityAndLastObservation
asgn

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _lastObservation Function: getLiquidityAndLastObservation
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1, 110: True}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _lastObservation

Name: _lastObservation Function: getLiquidityAndLastObservation
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "getLiquidityAndLastObservation":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
Mark Iterations TRUE, proceeding anyway
Function name: slitherConstructorConstantVariables
Function Visibility (test): internal
State_var: unlocked
Finding type for unlocked...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: unlocked Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK_LIQUIDITY
Finding type for MAX_TICK_LIQUIDITY...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: MAX_TICK_LIQUIDITY Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFeeTo
Finding type for barFeeTo...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: barFeeTo Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: bento
Finding type for bento...
IBentoBoxMinimal
Check copy_toekn_tuple
(-1, -1, 0, 'BENTO', -1)
----
Type: IBentoBoxMinimal
IBentoBoxMinimal
Final Type: IBentoBoxMinimal
 NO FIELDS

Name: bento Function: global
Num: -1
Den: -1
Norm: 0
LF: BENTO
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: masterDeployer
Finding type for masterDeployer...
IMasterDeployer
Check copy_toekn_tuple
(-1, -1, 0, 'DEPLOYER', -1)
----
Type: IMasterDeployer
IMasterDeployer
Final Type: IMasterDeployer
 NO FIELDS

Name: masterDeployer Function: global
Num: -1
Den: -1
Norm: 0
LF: DEPLOYER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: swapFee
Finding type for swapFee...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: swapFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tickSpacing
Finding type for tickSpacing...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: tickSpacing Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token0
Finding type for token0...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1
Finding type for token1...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: token1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: barFee
Finding type for barFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: barFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: feeGrowthGlobal0
Finding type for feeGrowthGlobal0...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: feeGrowthGlobal1
Finding type for feeGrowthGlobal1...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 10)
----
Type: uint256
uint256
Final Type: uint256

Name: feeGrowthGlobal1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: compound fee ratio (t)
[*]Type fetched successfully
State_var: lastObservation
Finding type for lastObservation...
uint32
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint32
uint32
Final Type: uint32

Name: lastObservation Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: liquidity
Finding type for liquidity...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: liquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: nearestTick
Finding type for nearestTick...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: nearestTick Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: price
Finding type for price...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: price Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: secondsPerLiquidity
Finding type for secondsPerLiquidity...
uint160
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint160
uint160
Final Type: uint160

Name: secondsPerLiquidity Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ticks
Finding type for ticks...
mapping(int24 => Ticks.Tick)
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(int24 => Ticks.Tick)
mapping(int24 => Ticks.Tick)
Ticks.Tick
Final Type: Ticks.Tick
global
ticks
previousTick
global
ticks
nextTick
global
ticks
liquidity
global
ticks
feeGrowthOutside0
global
ticks
feeGrowthOutside1
global
ticks
secondsPerLiquidityOutside
FIELDS:
ticks Fields:
^^^

Name: ticks Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reserve0
Finding type for reserve0...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve0 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: reserve1
Finding type for reserve1...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, 30)
----
Type: uint128
uint128
Final Type: uint128

Name: reserve1 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: reserve
[*]Type fetched successfully
State_var: token0ProtocolFee
Finding type for token0ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token0ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: token1ProtocolFee
Finding type for token1ProtocolFee...
uint128
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint128
uint128
Final Type: uint128

Name: token1ProtocolFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_FEE
Finding type for MAX_FEE...
uint24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint24
uint24
Final Type: uint24

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: positions
Finding type for positions...
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(address => mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position)))
mapping(int24 => mapping(int24 => ConcentratedLiquidityPool.Position))
mapping(int24 => ConcentratedLiquidityPool.Position)
ConcentratedLiquidityPool.Position
Final Type: ConcentratedLiquidityPool.Position
global
positions
liquidity
global
positions
feeGrowthInside0Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
global
positions
feeGrowthInside1Last
Check copy_toekn_tuple
([-1], [-1], ['u'], None, 10)
----
Type: uint256
uint256
Final Type: uint256
Type: uint256
uint256
Final Type: uint256
FIELDS:
positions Fields:
feeGrowthInside0Last
feeGrowthInside1Last
^^^

Name: positions Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: feeGrowthInside0Last, feeGrowthInside1Last
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_TICK
Finding type for MAX_TICK...
int24
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: int24
int24
Final Type: int24

Name: MAX_TICK Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Errors: [<slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0dcf310>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d59550>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d81550>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d81fa0>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fadf0d8a3d0>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d8abe0>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7fadf0d44a00>, <slither.slithir.variables.local_variable.LocalIRVariable object at 0x7fadf0d44b50>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d4e7f0>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0d4ea60>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0cdad60>, <slither.slithir.variables.state_variable.StateIRVariable object at 0x7fadf0cdafd0>]
Seen contract: {'ConcentratedLiquidityPool': True} Contract name out: IBentoBoxMinimal
[x] IBentoBoxMinimal not run
Seen contract: {'ConcentratedLiquidityPool': True, 'IBentoBoxMinimal': True} Contract name out: IMasterDeployer
[x] IMasterDeployer not run
Seen contract: {'ConcentratedLiquidityPool': True, 'IBentoBoxMinimal': True, 'IMasterDeployer': True} Contract name out: IPool
[x] IPool not run
Seen contract: {'ConcentratedLiquidityPool': True, 'IBentoBoxMinimal': True, 'IMasterDeployer': True, 'IPool': True} Contract name out: IPositionManager
[x] IPositionManager not run
Seen contract: {'ConcentratedLiquidityPool': True, 'IBentoBoxMinimal': True, 'IMasterDeployer': True, 'IPool': True, 'IPositionManager': True} Contract name out: ITridentCallee
[x] ITridentCallee not run
Seen contract: {'ConcentratedLiquidityPool': True, 'IBentoBoxMinimal': True, 'IMasterDeployer': True, 'IPool': True, 'IPositionManager': True, 'ITridentCallee': True} Contract name out: ITridentRouter
[x] ITridentRouter not run
Seen contract: {'ConcentratedLiquidityPool': True, 'IBentoBoxMinimal': True, 'IMasterDeployer': True, 'IPool': True, 'IPositionManager': True, 'ITridentCallee': True, 'ITridentRouter': True} Contract name out: RebaseLibrary
[x] RebaseLibrary not run
Seen contract: {'ConcentratedLiquidityPool': True, 'IBentoBoxMinimal': True, 'IMasterDeployer': True, 'IPool': True, 'IPositionManager': True, 'ITridentCallee': True, 'ITridentRouter': True, 'RebaseLibrary': True} Contract name out: DyDxMath
[x] DyDxMath not run
Seen contract: {'ConcentratedLiquidityPool': True, 'IBentoBoxMinimal': True, 'IMasterDeployer': True, 'IPool': True, 'IPositionManager': True, 'ITridentCallee': True, 'ITridentRouter': True, 'RebaseLibrary': True, 'DyDxMath': True} Contract name out: FullMath
[x] FullMath not run
Seen contract: {'ConcentratedLiquidityPool': True, 'IBentoBoxMinimal': True, 'IMasterDeployer': True, 'IPool': True, 'IPositionManager': True, 'ITridentCallee': True, 'ITridentRouter': True, 'RebaseLibrary': True, 'DyDxMath': True, 'FullMath': True} Contract name out: SwapLib
[x] SwapLib not run
Seen contract: {'ConcentratedLiquidityPool': True, 'IBentoBoxMinimal': True, 'IMasterDeployer': True, 'IPool': True, 'IPositionManager': True, 'ITridentCallee': True, 'ITridentRouter': True, 'RebaseLibrary': True, 'DyDxMath': True, 'FullMath': True, 'SwapLib': True} Contract name out: TickMath
[x] TickMath not run
Seen contract: {'ConcentratedLiquidityPool': True, 'IBentoBoxMinimal': True, 'IMasterDeployer': True, 'IPool': True, 'IPositionManager': True, 'ITridentCallee': True, 'ITridentRouter': True, 'RebaseLibrary': True, 'DyDxMath': True, 'FullMath': True, 'SwapLib': True, 'TickMath': True} Contract name out: Ticks
[x] Ticks not run
Seen contract: {'ConcentratedLiquidityPool': True, 'IBentoBoxMinimal': True, 'IMasterDeployer': True, 'IPool': True, 'IPositionManager': True, 'ITridentCallee': True, 'ITridentRouter': True, 'RebaseLibrary': True, 'DyDxMath': True, 'FullMath': True, 'SwapLib': True, 'TickMath': True, 'Ticks': True} Contract name out: UnsafeMath
[x] UnsafeMath not run
Function count: 47
