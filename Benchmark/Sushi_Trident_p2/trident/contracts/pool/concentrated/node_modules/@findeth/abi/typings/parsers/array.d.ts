import { DecodeFunction, EncodeFunction, Parser } from './parser';
/**
 * Check if a type is an array type.
 *
 * @param {string} type
 * @return {boolean}
 */
export declare const isArray: (type: string) => boolean;
/**
 * Get the "inner" type for an array type. E.g. `getType("uint256[]")` -> uint256.
 *
 * @param {string} type
 * @return {string}
 */
export declare const getType: (type: string) => string;
export declare const encodeArray: EncodeFunction;
export declare const decodeArray: DecodeFunction;
/**
 * Get a parser for a type. Throws an error if the parser could not be found.
 *
 * @param {string} type
 * @return {Parser}
 */
export declare const getParser: (type: string) => Parser;
/**
 * Pack multiple values into a single Buffer, based on the provided types. Returns a new buffer with the
 * packed values.
 *
 * Based on the implementation of Ethers.js:
 * https://github.com/ethers-io/ethers.js/blob/fa87417e9416d99a37d9a2668a1e54feb7e342fc/packages/abi/src.ts/coders/array.ts
 *
 * @param {Buffer} buffer
 * @param {any[]} values
 * @param {string[]} types
 * @return {Buffer}
 */
export declare const pack: (buffer: Uint8Array, values: unknown[], types: string[]) => Uint8Array;
/**
 * Iterate over a `Buffer` with provided `chunkSize`.
 *
 * @param {Buffer} buffer
 * @param {number} chunkSize
 * @return {Generator<Buffer, Buffer, void>}
 */
export declare function iterate(buffer: Uint8Array, chunkSize: number): Generator<Uint8Array, Uint8Array, void>;
export declare const unpack: (buffer: Uint8Array, types: string[]) => unknown[];
