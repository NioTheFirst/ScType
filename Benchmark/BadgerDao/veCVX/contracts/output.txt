ContextUpgradeable
MathUpgradeable
SafeMathUpgradeable
Initializable
IERC20Upgradeable
SafeERC20Upgradeable
AddressUpgradeable
PausableUpgradeable
BaseStrategy
SettAccessControl
IController
ISettV3
IStrategy
ICvxLocker
IDelegateRegistry
IUniswapRouterV2
MyStrategy
contract name: ContextUpgradeable
WARNING!!!!
ContextUpgradeable_types.txt
Finance File not Found
Type File not found.
[x] ContextUpgradeable not run
contract name: MathUpgradeable
WARNING!!!!
MathUpgradeable_types.txt
Finance File not Found
Type File not found.
[x] MathUpgradeable not run
contract name: SafeMathUpgradeable
WARNING!!!!
SafeMathUpgradeable_types.txt
Finance File not Found
Type File not found.
[x] SafeMathUpgradeable not run
contract name: Initializable
WARNING!!!!
Initializable_types.txt
Finance File not Found
Type File not found.
[x] Initializable not run
contract name: IERC20Upgradeable
WARNING!!!!
IERC20Upgradeable_types.txt
Finance File not Found
Type File not found.
[x] IERC20Upgradeable not run
contract name: SafeERC20Upgradeable
WARNING!!!!
SafeERC20Upgradeable_types.txt
Finance File not Found
Type File not found.
[x] SafeERC20Upgradeable not run
contract name: AddressUpgradeable
WARNING!!!!
AddressUpgradeable_types.txt
Finance File not Found
Type File not found.
[x] AddressUpgradeable not run
contract name: PausableUpgradeable
WARNING!!!!
PausableUpgradeable_types.txt
Finance File not Found
Type File not found.
[x] PausableUpgradeable not run
contract name: BaseStrategy
WARNING!!!!
BaseStrategy_types.txt
Finance File not Found
Type File not found.
[x] BaseStrategy not run
contract name: SettAccessControl
WARNING!!!!
SettAccessControl_types.txt
Finance File not Found
Type File not found.
[x] SettAccessControl not run
contract name: IController
WARNING!!!!
IController_types.txt
Finance File not Found
Type File not found.
[x] IController not run
contract name: ISettV3
WARNING!!!!
ISettV3_types.txt
Finance File not Found
Type File not found.
[x] ISettV3 not run
contract name: IStrategy
WARNING!!!!
IStrategy_types.txt
Finance File not Found
Type File not found.
[x] IStrategy not run
contract name: ICvxLocker
WARNING!!!!
ICvxLocker_types.txt
Finance File not Found
Type File not found.
[x] ICvxLocker not run
contract name: IDelegateRegistry
WARNING!!!!
IDelegateRegistry_types.txt
Finance File not Found
Type File not found.
[x] IDelegateRegistry not run
contract name: IUniswapRouterV2
WARNING!!!!
IUniswapRouterV2_types.txt
Finance File not Found
Type File not found.
[x] IUniswapRouterV2 not run
contract name: MyStrategy
WARNING!!!!
MyStrategy_types.txt
Finance file: MyStrategy_ftypes.txt
"MyStrategy_types.txt" opened successfully.
[*c],MyStrategy

[sef], CONTROLLER, vaults, 1, {c, [-1], [-1], 0, VAULT}

{c, [-1], [-1], 0, VAULT}
['c', '[-1]', '[-1]', '0', 'VAULT']
[sef], CONTROLLER, rewards

[sef], SUSHI_ROUTER, swapExactTokensForTokens

[sef], LOCKER, balanceOf, 1, {c, [2], [-1], 0}

{c, [2], [-1], 0}
['c', '[2]', '[-1]', '0']
[sef], LOCKER, maximumBoostPayment

[sef], CVX_VAULT, getPricePerFullShare, 1, {c, 2, 1, 18}

{c, 2, 1, 18}
['c', '2', '1', '18']
[sef], LOCKER, lockedBalanceOf, 1, {c, [2], [-1], 0}

{c, [2], [-1], 0}
['c', '[2]', '[-1]', '0']
[sef], CVX, balanceOf, 1, {c, [2], [-1], 0}

{c, [2], [-1], 0}
['c', '[2]', '[-1]', '0']
[sef], WANT, balanceOf, 1, {c, [1], [-1], 0}

{c, [1], [-1], 0}
['c', '[1]', '[-1]', '0']
[sef], REWARD, balanceOf, 1, {c, [1], [-1], 0}

{c, [1], [-1], 0}
['c', '[1]', '[-1]', '0']
[t],global,LOCKER,-1,-1,0, LOCKER

[t], global, this, -1, -1, 0

[t],global,CVX,-1,-1,0, CVX

[t],global,CVX_VAULT,-1,-1,0, CVX_VAULT

[t],global,SUSHI_ROUTER,-1,-1,0, SUSHI_ROUTER

[t],global,WETH,-1,-1,0, WETH

[t],global,reward,-1,-1,0, REWARD

[t],global,lpComponent,-1,-1,0, LP

[t],global,want,-1,-1,0, WANT

[t],global,controller,-1,-1,0, CONTROLLER

[t],global,performanceFeeGovernance,-1,-1,0, FEEGOV

[t],global,performanceFeeStrategist,-1,-1,0, FEESTRAT

[t],global,strategist,-1,-1,0, STRAT

[t],global,DELEGATE,-1,-1,0, DELEGATE

[t],global,DELEGATED_SPACE,-1,-1,0, DELEGAT_SPACE

[t],global,SNAPSHOT,-1,-1,0

[t],global,MAX_BPS,-1,-1,0

[t],global,withdrawalSafetyCheck,-1,-1,0

[t],global,harvestOnRebalance,-1,-1,0

[t],global,processLocksOnReinvest,-1,-1,0

[t],global ,processLocksOnRebalance,-1,-1,0

[t],global,MAX_FEE,-1,-1,0

[t], global, uniswap

[t], global, withdrawalFee

[t], global, governance

[t], global, keeper

[t], global, withdrawalMaxDeviationThreshold

[t], global, guardian

[t],_transferToVault,_amount,1,-1,0

[t],_processFee,token,-1,-1,0

[t],_processFee,amount,1,-1,0

[t],_processFee,feeBps,-1,-1,0

[t],_processFee,recipient,-1,-1,0

[t],CVXToWant,cvx,2,-1,0

[t],getProtectedTokens,_asset,-1,-1,0

[t],_withdrawSome,_amount,1,-1,0

[t],harvest,governancePerformanceFee,-1,-1,0

[t],harvest,strategistPerformanceFee,-1,-1,0

[t],_onlyNotProtectedTokens,_asset,1,-1,0

[t],manualRebalance,toLock,-1,-1,0

[t], wantToCVX, want, 1, -1, 0



Param: [*c]
Param: MyStrategy

Param: [sef]
Param:  CONTROLLER
Param:  vaults
Param:  1
Param:  {c
Param:  [-1]
Param:  [-1]
Param:  0
Param:  VAULT}

Param: [sef]
Param:  CONTROLLER
Param:  rewards

Param: [sef]
Param:  SUSHI_ROUTER
Param:  swapExactTokensForTokens

Param: [sef]
Param:  LOCKER
Param:  balanceOf
Param:  1
Param:  {c
Param:  [2]
Param:  [-1]
Param:  0
Param:  f:0}

Isolated Param: 0
F num: 0
Param: [sef]
Param:  LOCKER
Param:  maximumBoostPayment

Param: [sef]
Param:  CVX_VAULT
Param:  getPricePerFullShare
Param:  1
Param:  {c
Param:  2
Param:  1
Param:  18}

Param: [sef]
Param:  LOCKER
Param:  lockedBalanceOf

Param: [sef]
Param:  CVX
Param:  balanceOf
Param:  1
Param:  {c
Param:  [2]
Param:  [-1]
Param:  0
Param:  f:0}

Isolated Param: 0
F num: 0
Param: [sef]
Param:  WANT
Param:  balanceOf
Param:  1
Param:  {c
Param:  [1]
Param:  [-1]
Param:  0
Param:  f:0}

Isolated Param: 0
F num: 0
Param: [sef]
Param:  REWARD
Param:  balanceOf
Param:  1
Param:  {c
Param:  [1]
Param:  [-1]
Param:  0. f:0}

Isolated Param: 0
F num: 0
Param: [t]
Param: global
Param: LOCKER
Param: -1
Param: -1
Param: 0
Param:  LOCKER

Param: [t]
Param:  global
Param:  this
Param:  -1
Param:  -1
Param:  0

Param: [t]
Param: global
Param: CVX
Param: -1
Param: -1
Param: 0
Param:  CVX

Param: [t]
Param: global
Param: CVX_VAULT
Param: -1
Param: -1
Param: 0
Param:  CVX_VAULT

Param: [t]
Param: global
Param: SUSHI_ROUTER
Param: -1
Param: -1
Param: 0
Param:  SUSHI_ROUTER

Param: [t]
Param: global
Param: WETH
Param: -1
Param: -1
Param: 0
Param:  WETH

Param: [t]
Param: global
Param: reward
Param: -1
Param: -1
Param: 0
Param:  REWARD

Param: [t]
Param: global
Param: lpComponent
Param: -1
Param: -1
Param: 0
Param:  LP

Param: [t]
Param: global
Param: want
Param: -1
Param: -1
Param: 0
Param:  WANT

Param: [t]
Param: global
Param: controller
Param: -1
Param: -1
Param: 0
Param:  CONTROLLER

Param: [t]
Param: global
Param: performanceFeeGovernance
Param: -1
Param: -1
Param: 0
Param:  FEEGOV

Param: [t]
Param: global
Param: performanceFeeStrategist
Param: -1
Param: -1
Param: 0
Param:  FEESTRAT

Param: [t]
Param: global
Param: strategist
Param: -1
Param: -1
Param: 0
Param:  STRAT

Param: [t]
Param: global
Param: DELEGATE
Param: -1
Param: -1
Param: 0
Param:  DELEGATE

Param: [t]
Param: global
Param: DELEGATED_SPACE
Param: -1
Param: -1
Param: 0
Param:  DELEGAT_SPACE

Param: [t]
Param: global
Param: SNAPSHOT
Param: -1
Param: -1
Param: 0

Param: [t]
Param: global
Param: MAX_BPS
Param: -1
Param: -1
Param: 0

Param: [t]
Param: global
Param: withdrawalSafetyCheck
Param: -1
Param: -1
Param: 0

Param: [t]
Param: global
Param: harvestOnRebalance
Param: -1
Param: -1
Param: 0

Param: [t]
Param: global
Param: processLocksOnReinvest
Param: -1
Param: -1
Param: 0

Param: [t]
Param: global 
Param: processLocksOnRebalance
Param: -1
Param: -1
Param: 0

Param: [t]
Param: global
Param: MAX_FEE
Param: -1
Param: -1
Param: 0
Param:  f:12

Isolated Param: 12
F num: 12
Param: [t]
Param:  global
Param:  uniswap

Param: [t]
Param:  global
Param:  withdrawalFee
Param:  f:12

Isolated Param: 12
F num: 12
Param: [t]
Param:  global
Param:  governance

Param: [t]
Param:  global
Param:  keeper

Param: [t]
Param:  global
Param:  withdrawalMaxDeviationThreshold

Param: [t]
Param:  global
Param:  guardian

Param: [t]
Param: _transferToVault
Param: _amount
Param: 1
Param: -1
Param: 0
Param:  f:0

Isolated Param: 0
F num: 0
Param: [t]
Param: _processFee
Param: token
Param: -1
Param: -1
Param: 0

Param: [t]
Param: _processFee
Param: amount
Param: 1
Param: -1
Param: 0
Param:  f:0

Isolated Param: 0
F num: 0
Param: [t]
Param: _processFee
Param: feeBps
Param: -1
Param: -1
Param: 0

Param: [t]
Param: _processFee
Param: recipient
Param: -1
Param: -1
Param: 0

Param: [t]
Param: CVXToWant
Param: cvx
Param: 2
Param: -1
Param: 0
Param:  f:0

Isolated Param: 0
F num: 0
Param: [t]
Param: getProtectedTokens
Param: _asset
Param: -1
Param: -1
Param: 0

Param: [t]
Param: _withdrawSome
Param: _amount
Param: 1
Param: -1
Param: 0
Param:  f:0

Isolated Param: 0
F num: 0
Param: [t]
Param: harvest
Param: governancePerformanceFee
Param: -1
Param: -1
Param: 0. f:12

Isolated Param: 12
F num: 12
Param: [t]
Param: harvest
Param: strategistPerformanceFee
Param: -1
Param: -1
Param: 0
Param:  f:12

Isolated Param: 12
F num: 12
Param: [t]
Param: _onlyNotProtectedTokens
Param: _asset
Param: 1
Param: -1
Param: 0

Param: [t]
Param: manualRebalance
Param: toLock
Param: -1
Param: -1
Param: 0

Param: [t]
Param:  wantToCVX
Param:  want
Param:  1
Param:  -1
Param:  0
Param:  f:0

Isolated Param: 0
F num: 0
Param: 

[*] MyStrategy run
Checking... initialize Visibility: public
[x] No Binary
Checking... setWithdrawalSafetyCheck Visibility: public
[x] No Binary
Checking... setHarvestOnRebalance Visibility: public
[x] No Binary
Checking... setProcessLocksOnReinvest Visibility: public
[x] No Binary
Checking... setProcessLocksOnRebalance Visibility: public
[x] No Binary
Checking... getName Visibility: external
[x] No Binary
Checking... version Visibility: external
[x] No Binary
Checking... CVXToWant Visibility: public
[o] Marked
Checking... wantToCVX Visibility: public
[o] Marked
Checking... balanceOfPool Visibility: public
[o] Marked
Checking... isTendable Visibility: public
[x] No Binary
Checking... getProtectedTokens Visibility: public
[x] No Binary
Checking... setKeepReward Visibility: external
[x] No Binary
Checking... _onlyNotProtectedTokens Visibility: internal
[x] Not visible 
Checking... _deposit Visibility: internal
[x] Not visible 
Checking... prepareWithdrawAll Visibility: external
[o] Marked
Checking... _withdrawAll Visibility: internal
[x] Not visible 
Checking... _withdrawSome Visibility: internal
[x] Not visible 
Checking... harvest Visibility: public
[o] Marked
Checking... tend Visibility: external
[x] No Binary
Checking... _swapcvxCRVToWant Visibility: internal
[x] Not visible 
Checking... _processPerformanceFees Visibility: internal
[x] Not visible 
Checking... _processRewardsFees Visibility: internal
[x] Not visible 
Checking... reinvest Visibility: external
[x] No Binary
Checking... manualProcessExpiredLocks Visibility: external
[x] No Binary
Checking... manualDepositCVXIntoVault Visibility: external
[o] Marked
Checking... manualSendbCVXToVault Visibility: external
[x] No Binary
Checking... manualRebalance Visibility: external
[o] Marked
Checking... slitherConstructorVariables Visibility: internal
[x] Not visible 
Checking... slitherConstructorConstantVariables Visibility: internal
[x] Not visible 
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
State_var: uniswap
Finding type for uniswap...
address
State_var: CVX
Finding type for CVX...
address
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
State_var: want
Finding type for want...
address
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
State_var: _paused
Finding type for _paused...
bool
State_var: controller
Finding type for controller...
address
State_var: reward
Finding type for reward...
address
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
State_var: governance
Finding type for governance...
address
State_var: keeper
Finding type for keeper...
address
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
State_var: WETH
Finding type for WETH...
address
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
State_var: strategist
Finding type for strategist...
address
State_var: DELEGATE
Finding type for DELEGATE...
address
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
State_var: _initialized
Finding type for _initialized...
bool
State_var: _initializing
Finding type for _initializing...
bool
State_var: guardian
Finding type for guardian...
address
State_var: lpComponent
Finding type for lpComponent...
address
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Seen contract: {} Contract name out: ContextUpgradeable
[x] ContextUpgradeable not run
Seen contract: {'ContextUpgradeable': True} Contract name out: MathUpgradeable
[x] MathUpgradeable not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True} Contract name out: SafeMathUpgradeable
[x] SafeMathUpgradeable not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True} Contract name out: Initializable
[x] Initializable not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True} Contract name out: IERC20Upgradeable
[x] IERC20Upgradeable not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'IERC20Upgradeable': True} Contract name out: SafeERC20Upgradeable
[x] SafeERC20Upgradeable not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'IERC20Upgradeable': True, 'SafeERC20Upgradeable': True} Contract name out: AddressUpgradeable
[x] AddressUpgradeable not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'IERC20Upgradeable': True, 'SafeERC20Upgradeable': True, 'AddressUpgradeable': True} Contract name out: PausableUpgradeable
[x] PausableUpgradeable not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'IERC20Upgradeable': True, 'SafeERC20Upgradeable': True, 'AddressUpgradeable': True, 'PausableUpgradeable': True} Contract name out: BaseStrategy
[x] BaseStrategy not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'IERC20Upgradeable': True, 'SafeERC20Upgradeable': True, 'AddressUpgradeable': True, 'PausableUpgradeable': True, 'BaseStrategy': True} Contract name out: SettAccessControl
[x] SettAccessControl not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'IERC20Upgradeable': True, 'SafeERC20Upgradeable': True, 'AddressUpgradeable': True, 'PausableUpgradeable': True, 'BaseStrategy': True, 'SettAccessControl': True} Contract name out: IController
[x] IController not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'IERC20Upgradeable': True, 'SafeERC20Upgradeable': True, 'AddressUpgradeable': True, 'PausableUpgradeable': True, 'BaseStrategy': True, 'SettAccessControl': True, 'IController': True} Contract name out: ISettV3
[x] ISettV3 not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'IERC20Upgradeable': True, 'SafeERC20Upgradeable': True, 'AddressUpgradeable': True, 'PausableUpgradeable': True, 'BaseStrategy': True, 'SettAccessControl': True, 'IController': True, 'ISettV3': True} Contract name out: IStrategy
[x] IStrategy not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'IERC20Upgradeable': True, 'SafeERC20Upgradeable': True, 'AddressUpgradeable': True, 'PausableUpgradeable': True, 'BaseStrategy': True, 'SettAccessControl': True, 'IController': True, 'ISettV3': True, 'IStrategy': True} Contract name out: ICvxLocker
[x] ICvxLocker not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'IERC20Upgradeable': True, 'SafeERC20Upgradeable': True, 'AddressUpgradeable': True, 'PausableUpgradeable': True, 'BaseStrategy': True, 'SettAccessControl': True, 'IController': True, 'ISettV3': True, 'IStrategy': True, 'ICvxLocker': True} Contract name out: IDelegateRegistry
[x] IDelegateRegistry not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'IERC20Upgradeable': True, 'SafeERC20Upgradeable': True, 'AddressUpgradeable': True, 'PausableUpgradeable': True, 'BaseStrategy': True, 'SettAccessControl': True, 'IController': True, 'ISettV3': True, 'IStrategy': True, 'ICvxLocker': True, 'IDelegateRegistry': True} Contract name out: IUniswapRouterV2
[x] IUniswapRouterV2 not run
Seen contract: {'ContextUpgradeable': True, 'MathUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'IERC20Upgradeable': True, 'SafeERC20Upgradeable': True, 'AddressUpgradeable': True, 'PausableUpgradeable': True, 'BaseStrategy': True, 'SettAccessControl': True, 'IController': True, 'ISettV3': True, 'IStrategy': True, 'ICvxLocker': True, 'IDelegateRegistry': True, 'IUniswapRouterV2': True} Contract name out: MyStrategy
[*] MyStrategy run
Reading Function: initialize
Function initialize not marked
Mark Iterations TRUE, proceeding anyway
Function name: initialize
Function Visibility (test): public
_governance
Finding type for _governance...
address
_strategist
Finding type for _strategist...
address
_controller
Finding type for _controller...
address
_keeper
Finding type for _keeper...
address
_guardian
Finding type for _guardian...
address
_wantConfig
Finding type for _wantConfig...
address[3]
_feeConfig
Finding type for _feeConfig...
uint256[3]
_locker
Finding type for _locker...
address
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: _governance
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: _strategist
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: _controller
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: _keeper
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: _guardian
    fields: []
    fintype: -1
Param: 5
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 6
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 7
    num: [-1]
    den: [-1]
    norm: u
    link: _locker
    fields: []
    fintype: -1
clearning node...
clearing ir...?
CVX_1(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
SUSHI_ROUTER_1(address) := ϕ(['SUSHI_ROUTER_0', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
has variable
clearing ir...?
SNAPSHOT_1(IDelegateRegistry) := ϕ(['SNAPSHOT_0', 'SNAPSHOT_4'])
has variable
clearing ir...?
DELEGATE_1(address) := ϕ(['DELEGATE_4', 'DELEGATE_0'])
has variable
clearing ir...?
DELEGATED_SPACE_1(bytes32) := ϕ(['DELEGATED_SPACE_4', 'DELEGATED_SPACE_0'])
has variable
clearing ir...?
CVX_VAULT_1(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
has variable
typecheckig node...
CVX_1(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: initialize
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: u
LF: CVX
Fields: 
Finance Type: undef
done.
SUSHI_ROUTER_1(address) := ϕ(['SUSHI_ROUTER_0', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Function name: initialize
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: u
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
done.
SNAPSHOT_1(IDelegateRegistry) := ϕ(['SNAPSHOT_0', 'SNAPSHOT_4'])
Function name: initialize
Phi
[i]Type for SNAPSHOT

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
DELEGATE_1(address) := ϕ(['DELEGATE_4', 'DELEGATE_0'])
Function name: initialize
Phi
[i]Type for DELEGATE

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: u
LF: DELEGATE
Fields: 
Finance Type: undef
done.
DELEGATED_SPACE_1(bytes32) := ϕ(['DELEGATED_SPACE_4', 'DELEGATED_SPACE_0'])
Function name: initialize
Phi
[i]Type for DELEGATED_SPACE

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CVX_VAULT_1(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
Function name: initialize
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, Initializable.initializer()()
typecheckig node...
MODIFIER_CALL, Initializable.initializer()()
Internal call...
initializer
Function: initializer
ic
done.
clearning node...
clearing ir...?
INTERNAL_CALL, BaseStrategy.__BaseStrategy_init(address,address,address,address,address)(_governance_1,_strategist_1,_controller_1,_keeper_1,_guardian_1)
typecheckig node...
INTERNAL_CALL, BaseStrategy.__BaseStrategy_init(address,address,address,address,address)(_governance_1,_strategist_1,_controller_1,_keeper_1,_guardian_1)
Internal call...
__BaseStrategy_init
_governance
_strategist
_controller
_keeper
_guardian
Function: __BaseStrategy_init
ic
done.
clearning node...
clearing ir...?
REF_91(address) -> _wantConfig_1[0]
has variable
clearing ir...?
want_22(address) := REF_91(address)
has variable
typecheckig node...
REF_91(address) -> _wantConfig_1[0]
Function name: initialize
INDEX
[i]Type for REF_91

Name: REF_91 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
want_22(address) := REF_91(address)
Function name: initialize
asgn

Name: REF_91 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: want Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for want

Name: want Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_92(address) -> _wantConfig_1[1]
has variable
clearing ir...?
lpComponent_1(address) := REF_92(address)
has variable
typecheckig node...
REF_92(address) -> _wantConfig_1[1]
Function name: initialize
INDEX
[i]Type for REF_92

Name: REF_92 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
lpComponent_1(address) := REF_92(address)
Function name: initialize
asgn

Name: REF_92 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: lpComponent Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for lpComponent

Name: lpComponent Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_93(address) -> _wantConfig_1[2]
has variable
clearing ir...?
reward_1(address) := REF_93(address)
has variable
typecheckig node...
REF_93(address) -> _wantConfig_1[2]
Function name: initialize
INDEX
[i]Type for REF_93

Name: REF_93 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
reward_1(address) := REF_93(address)
Function name: initialize
asgn

Name: REF_93 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: reward Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for reward

Name: reward Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_94(uint256) -> _feeConfig_1[0]
has variable
clearing ir...?
performanceFeeGovernance_2(uint256) := REF_94(uint256)
has variable
typecheckig node...
REF_94(uint256) -> _feeConfig_1[0]
Function name: initialize
INDEX
[i]Type for REF_94

Name: REF_94 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
performanceFeeGovernance_2(uint256) := REF_94(uint256)
Function name: initialize
asgn

Name: REF_94 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: performanceFeeGovernance Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for performanceFeeGovernance

Name: performanceFeeGovernance Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_95(uint256) -> _feeConfig_1[1]
has variable
clearing ir...?
performanceFeeStrategist_2(uint256) := REF_95(uint256)
has variable
typecheckig node...
REF_95(uint256) -> _feeConfig_1[1]
Function name: initialize
INDEX
[i]Type for REF_95

Name: REF_95 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
performanceFeeStrategist_2(uint256) := REF_95(uint256)
Function name: initialize
asgn

Name: REF_95 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: performanceFeeStrategist Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for performanceFeeStrategist

Name: performanceFeeStrategist Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_96(uint256) -> _feeConfig_1[2]
has variable
clearing ir...?
withdrawalFee_3(uint256) := REF_96(uint256)
has variable
typecheckig node...
REF_96(uint256) -> _feeConfig_1[2]
Function name: initialize
INDEX
[i]Type for REF_96

Name: REF_96 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
withdrawalFee_3(uint256) := REF_96(uint256)
Function name: initialize
asgn

Name: REF_96 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: withdrawalFee Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for withdrawalFee

Name: withdrawalFee Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_460 = CONVERT _locker_1 to ICvxLocker
has variable
[i] TMP_460 cleared
clearing ir...?
LOCKER_1(ICvxLocker) := TMP_460(ICvxLocker)
has variable
typecheckig node...
TMP_460 = CONVERT _locker_1 to ICvxLocker
Function name: initialize

Name: _locker Function: initialize
Num: -1
Den: -1
Norm: u
LF: _locker
Fields: 
Finance Type: undef

Name: TMP_460 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_460

Name: TMP_460 Function: initialize
Num: -1
Den: -1
Norm: u
LF: _locker
Fields: 
Finance Type: undef
done.
LOCKER_1(ICvxLocker) := TMP_460(ICvxLocker)
Function name: initialize
asgn

Name: TMP_460 Function: initialize
Num: -1
Den: -1
Norm: u
LF: _locker
Fields: 
Finance Type: undef

Name: LOCKER Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for LOCKER

Name: LOCKER Function: initialize
Num: -1
Den: -1
Norm: u
LF: _locker
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_461 = CONVERT CVX_3 to IERC20Upgradeable
has variable
[i] TMP_461 cleared
clearing ir...?
TMP_463(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
has variable
[i] TMP_463 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_461', '_locker_1', 'TMP_463'] 
typecheckig node...
TMP_461 = CONVERT CVX_3 to IERC20Upgradeable
Function name: initialize

Name: CVX Function: global
Num: -1
Den: -1
Norm: u
LF: CVX
Fields: 
Finance Type: undef

Name: TMP_461 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_461

Name: TMP_461 Function: initialize
Num: -1
Den: -1
Norm: u
LF: CVX
Fields: 
Finance Type: undef
done.
TMP_463(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
Function name: initialize
asgn
val: 115792089237316195423570985008687907853269984665640564039457584007913129639935

Name: 115792089237316195423570985008687907853269984665640564039457584007913129639935 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_463 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 115792089237316195423570985008687907853269984665640564039457584007913129639935
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_463

Name: TMP_463 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_461', '_locker_1', 'TMP_463'] 
Library Call: safeApprove
done.
clearning node...
clearing ir...?
TMP_465 = CONVERT CVX_3 to IERC20Upgradeable
has variable
[i] TMP_465 cleared
clearing ir...?
TMP_466 = CONVERT CVX_VAULT_3 to address
has variable
[i] TMP_466 cleared
clearing ir...?
TMP_468(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
has variable
[i] TMP_468 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_465', 'TMP_466', 'TMP_468'] 
typecheckig node...
TMP_465 = CONVERT CVX_3 to IERC20Upgradeable
Function name: initialize

Name: CVX Function: global
Num: -1
Den: -1
Norm: u
LF: CVX
Fields: 
Finance Type: undef

Name: TMP_465 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_465

Name: TMP_465 Function: initialize
Num: -1
Den: -1
Norm: u
LF: CVX
Fields: 
Finance Type: undef
done.
TMP_466 = CONVERT CVX_VAULT_3 to address
Function name: initialize

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_466 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_466

Name: TMP_466 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_468(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
Function name: initialize
asgn
val: 115792089237316195423570985008687907853269984665640564039457584007913129639935

Name: 115792089237316195423570985008687907853269984665640564039457584007913129639935 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_468 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 115792089237316195423570985008687907853269984665640564039457584007913129639935
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_468

Name: TMP_468 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_465', 'TMP_466', 'TMP_468'] 
Library Call: safeApprove
done.
clearning node...
clearing ir...?
TMP_470 = CONVERT reward_1 to IERC20Upgradeable
has variable
[i] TMP_470 cleared
clearing ir...?
TMP_472(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
has variable
[i] TMP_472 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_470', 'SUSHI_ROUTER_3', 'TMP_472'] 
typecheckig node...
TMP_470 = CONVERT reward_1 to IERC20Upgradeable
Function name: initialize

Name: reward Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_470 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_470

Name: TMP_470 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_472(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
Function name: initialize
asgn
val: 115792089237316195423570985008687907853269984665640564039457584007913129639935

Name: 115792089237316195423570985008687907853269984665640564039457584007913129639935 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_472 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 115792089237316195423570985008687907853269984665640564039457584007913129639935
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_472

Name: TMP_472 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_470', 'SUSHI_ROUTER_3', 'TMP_472'] 
Library Call: safeApprove
done.
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:SNAPSHOT_3(IDelegateRegistry), function:setDelegate, arguments:['DELEGATED_SPACE_3', 'DELEGATE_3']  
clearing ir...?
SNAPSHOT_4(IDelegateRegistry) := ϕ(['SNAPSHOT_4', 'SNAPSHOT_3'])
has variable
clearing ir...?
DELEGATE_4(address) := ϕ(['DELEGATE_4', 'DELEGATE_3'])
has variable
clearing ir...?
DELEGATED_SPACE_4(bytes32) := ϕ(['DELEGATED_SPACE_4', 'DELEGATED_SPACE_3'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:SNAPSHOT_3(IDelegateRegistry), function:setDelegate, arguments:['DELEGATED_SPACE_3', 'DELEGATE_3']  
High Call: setDelegate
func name:setDelegate
other func name:setDelegate
done.
SNAPSHOT_4(IDelegateRegistry) := ϕ(['SNAPSHOT_4', 'SNAPSHOT_3'])
Function name: initialize
Phi
[i]Type for SNAPSHOT

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
DELEGATE_4(address) := ϕ(['DELEGATE_4', 'DELEGATE_3'])
Function name: initialize
Phi
[i]Type for DELEGATE

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: u
LF: DELEGATE
Fields: 
Finance Type: undef
done.
DELEGATED_SPACE_4(bytes32) := ϕ(['DELEGATED_SPACE_4', 'DELEGATED_SPACE_3'])
Function name: initialize
Phi
[i]Type for DELEGATED_SPACE

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "initialize":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: setWithdrawalSafetyCheck
Function setWithdrawalSafetyCheck not marked
Mark Iterations TRUE, proceeding anyway
Function name: setWithdrawalSafetyCheck
Function Visibility (test): public
newWithdrawalSafetyCheck
Finding type for newWithdrawalSafetyCheck...
bool
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
typecheckig node...
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Internal call...
_onlyGovernance
Function: _onlyGovernance
ic
done.
clearning node...
clearing ir...?
withdrawalSafetyCheck_1(bool) := newWithdrawalSafetyCheck_1(bool)
has variable
typecheckig node...
withdrawalSafetyCheck_1(bool) := newWithdrawalSafetyCheck_1(bool)
Function name: setWithdrawalSafetyCheck
asgn

Name: newWithdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: withdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for withdrawalSafetyCheck

Name: withdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "setWithdrawalSafetyCheck":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: setHarvestOnRebalance
Function setHarvestOnRebalance not marked
Mark Iterations TRUE, proceeding anyway
Function name: setHarvestOnRebalance
Function Visibility (test): public
newHarvestOnRebalance
Finding type for newHarvestOnRebalance...
bool
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
typecheckig node...
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Internal call...
_onlyGovernance
Function: _onlyGovernance
ic
done.
clearning node...
clearing ir...?
harvestOnRebalance_1(bool) := newHarvestOnRebalance_1(bool)
has variable
typecheckig node...
harvestOnRebalance_1(bool) := newHarvestOnRebalance_1(bool)
Function name: setHarvestOnRebalance
asgn

Name: newHarvestOnRebalance Function: setHarvestOnRebalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: harvestOnRebalance Function: setHarvestOnRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for harvestOnRebalance

Name: harvestOnRebalance Function: setHarvestOnRebalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "setHarvestOnRebalance":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: setProcessLocksOnReinvest
Function setProcessLocksOnReinvest not marked
Mark Iterations TRUE, proceeding anyway
Function name: setProcessLocksOnReinvest
Function Visibility (test): public
newProcessLocksOnReinvest
Finding type for newProcessLocksOnReinvest...
bool
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
typecheckig node...
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Internal call...
_onlyGovernance
Function: _onlyGovernance
ic
done.
clearning node...
clearing ir...?
processLocksOnReinvest_1(bool) := newProcessLocksOnReinvest_1(bool)
has variable
typecheckig node...
processLocksOnReinvest_1(bool) := newProcessLocksOnReinvest_1(bool)
Function name: setProcessLocksOnReinvest
asgn

Name: newProcessLocksOnReinvest Function: setProcessLocksOnReinvest
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: processLocksOnReinvest Function: setProcessLocksOnReinvest
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for processLocksOnReinvest

Name: processLocksOnReinvest Function: setProcessLocksOnReinvest
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "setProcessLocksOnReinvest":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: setProcessLocksOnRebalance
Function setProcessLocksOnRebalance not marked
Mark Iterations TRUE, proceeding anyway
Function name: setProcessLocksOnRebalance
Function Visibility (test): public
newProcessLocksOnRebalance
Finding type for newProcessLocksOnRebalance...
bool
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
typecheckig node...
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Internal call...
_onlyGovernance
Function: _onlyGovernance
ic
done.
clearning node...
clearing ir...?
processLocksOnRebalance_1(bool) := newProcessLocksOnRebalance_1(bool)
has variable
typecheckig node...
processLocksOnRebalance_1(bool) := newProcessLocksOnRebalance_1(bool)
Function name: setProcessLocksOnRebalance
asgn

Name: newProcessLocksOnRebalance Function: setProcessLocksOnRebalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: processLocksOnRebalance Function: setProcessLocksOnRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for processLocksOnRebalance

Name: processLocksOnRebalance Function: setProcessLocksOnRebalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "setProcessLocksOnRebalance":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getName
Function getName not marked
Mark Iterations TRUE, proceeding anyway
Function name: getName
Function Visibility (test): external
clearning node...
typecheckig node...
clearning node...
clearing ir...?
RETURN veCVX Voting Strategy
typecheckig node...
RETURN veCVX Voting Strategy
RETURN

Name: veCVX Voting Strategy Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getName":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: version
Function version not marked
Mark Iterations TRUE, proceeding anyway
Function name: version
Function Visibility (test): external
clearning node...
typecheckig node...
clearning node...
clearing ir...?
RETURN 1.0
typecheckig node...
RETURN 1.0
RETURN

Name: 1.0 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "version":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: CVXToWant
Function name: CVXToWant
Function Visibility (test): public
cvx
Finding type for cvx...
uint256
Check copy_toekn_tuple
(2, -1, 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256

Name: cvx Function: CVXToWant
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
clearning node...
clearing ir...?
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
has variable
[i] cvx cleared
clearing ir...?
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
has variable
typecheckig node...
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
Function name: CVXToWant
Phi
[i]Type for cvx

Name: cvx Function: CVXToWant
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
Function name: CVXToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
has variable
[i] TMP_480 cleared
clearing ir...?
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_4', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
bCVXToCVX_1(uint256) := TMP_480(uint256)
has variable
[i] bCVXToCVX cleared
typecheckig node...
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
Function name: CVXToWant
High Call: getPricePerFullShare
func name:getPricePerFullShare
other func name:getPricePerFullShare
TMP_480
hlc contract name: CVX_VAULT func_name: getPricePerFullShare
('c', [2], [1], 18, None, -1)
wfc len: 1
Check copy_toekn_tuple
([2], [1], 18, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_480

Name: TMP_480 Function: CVXToWant
Num: 2
Den: 1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_4', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: CVXToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
bCVXToCVX_1(uint256) := TMP_480(uint256)
Function name: CVXToWant
asgn

Name: TMP_480 Function: CVXToWant
Num: 2
Den: 1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 2
Den: 1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_481(uint256) = 10 ** 18
has variable
[i] TMP_481 cleared
clearing ir...?
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
has variable
[i] TMP_482 cleared
clearing ir...?
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
has variable
[i] TMP_483 cleared
clearing ir...?
RETURN TMP_483
typecheckig node...
TMP_481(uint256) = 10 ** 18
Function name: CVXToWant
val: 10
1
val: 18

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: 18 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_481 Function: CVXToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
18
val: 10
1
[i]Type for TMP_481

Name: TMP_481 Function: CVXToWant
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
Function name: CVXToWant
Library Call: mul
testing mul...
lnorm: 0 rnorm: 18
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: cvx Function: CVXToWant
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_482 Function: CVXToWant
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_482

Name: TMP_482 Function: CVXToWant
Num: 2
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
Function name: CVXToWant
Library Call: div
lnorm: 18 rnorm: 18
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: TMP_483 Function: CVXToWant
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: PIC_1 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_483 Function: CVXToWant
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_483

Name: TMP_483 Function: CVXToWant
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
RETURN TMP_483
RETURN

Name: TMP_483 Function: CVXToWant
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
WORKLIST iteration 0 for function call "CVXToWant":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: CVXToWant

Name: TMP_483 Function: CVXToWant
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
___
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: wantToCVX
Function name: wantToCVX
Function Visibility (test): public
want
Finding type for want...
uint256
Check copy_toekn_tuple
(1, -1, 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256

Name: want Function: wantToCVX
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
clearning node...
clearing ir...?
want_1(uint256) := ϕ(['balanceOfWant_1'])
has variable
[i] want cleared
clearing ir...?
CVX_VAULT_6(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
has variable
typecheckig node...
want_1(uint256) := ϕ(['balanceOfWant_1'])
Function name: wantToCVX
Phi
[i]Type for want

Name: want Function: wantToCVX
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CVX_VAULT_6(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
Function name: wantToCVX
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_484(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_6(ISettV3), function:getPricePerFullShare, arguments:[]  
has variable
[i] TMP_484 cleared
clearing ir...?
CVX_VAULT_7(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_6', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
bCVXToCVX_1(uint256) := TMP_484(uint256)
has variable
[i] bCVXToCVX cleared
typecheckig node...
TMP_484(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_6(ISettV3), function:getPricePerFullShare, arguments:[]  
Function name: wantToCVX
High Call: getPricePerFullShare
func name:getPricePerFullShare
other func name:getPricePerFullShare
TMP_484
hlc contract name: CVX_VAULT func_name: getPricePerFullShare
('c', [2], [1], 18, None, -1)
wfc len: 1
Check copy_toekn_tuple
([2], [1], 18, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_484

Name: TMP_484 Function: wantToCVX
Num: 2
Den: 1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
CVX_VAULT_7(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_6', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: wantToCVX
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
bCVXToCVX_1(uint256) := TMP_484(uint256)
Function name: wantToCVX
asgn

Name: TMP_484 Function: wantToCVX
Num: 2
Den: 1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: bCVXToCVX Function: wantToCVX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: wantToCVX
Num: 2
Den: 1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['want_1', 'bCVXToCVX_1'] 
has variable
[i] TMP_485 cleared
clearing ir...?
TMP_486(uint256) = 10 ** 18
has variable
[i] TMP_486 cleared
clearing ir...?
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_485', 'TMP_486'] 
has variable
[i] TMP_487 cleared
clearing ir...?
RETURN TMP_487
typecheckig node...
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['want_1', 'bCVXToCVX_1'] 
Function name: wantToCVX
Library Call: mul
testing mul...
lnorm: 0 rnorm: 18
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: PIC_3 Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_485 Function: wantToCVX
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_485

Name: TMP_485 Function: wantToCVX
Num: 2
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_486(uint256) = 10 ** 18
Function name: wantToCVX
val: 10
1
val: 18

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: 18 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_486 Function: wantToCVX
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
18
val: 10
1
[i]Type for TMP_486

Name: TMP_486 Function: wantToCVX
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_485', 'TMP_486'] 
Function name: wantToCVX
Library Call: div
lnorm: 18 rnorm: 18
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: TMP_487 Function: wantToCVX
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_485 Function: wantToCVX
Num: 2
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_487 Function: wantToCVX
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_487

Name: TMP_487 Function: wantToCVX
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
RETURN TMP_487
RETURN

Name: TMP_487 Function: wantToCVX
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
WORKLIST iteration 0 for function call "wantToCVX":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: wantToCVX

Name: TMP_487 Function: wantToCVX
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
___
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: balanceOfPool
Function name: balanceOfPool
Function Visibility (test): public
-100
Add new
clearning node...
clearing ir...?
CVX_4(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_2(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
CVX_VAULT_8(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
has variable
clearing ir...?
withdrawalSafetyCheck_2(bool) := ϕ(['withdrawalSafetyCheck_4', 'withdrawalSafetyCheck_0', 'withdrawalSafetyCheck_1'])
has variable
typecheckig node...
CVX_4(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: balanceOfPool
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_2(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: balanceOfPool
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_8(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
Function name: balanceOfPool
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
withdrawalSafetyCheck_2(bool) := ϕ(['withdrawalSafetyCheck_4', 'withdrawalSafetyCheck_0', 'withdrawalSafetyCheck_1'])
Function name: balanceOfPool
Phi
[i]Type for withdrawalSafetyCheck

Name: withdrawalSafetyCheck Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION withdrawalSafetyCheck_2
typecheckig node...
CONDITION withdrawalSafetyCheck_2
Condition...
Conidtion: 
withdrawalSafetyCheck_2
withdrawalSafetyCheck_2
clearning node...
clearing ir...?
TMP_488(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_8(ISettV3), function:getPricePerFullShare, arguments:[]  
has variable
[i] TMP_488 cleared
clearing ir...?
CVX_5(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_4', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_3(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_2', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
CVX_VAULT_9(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_8', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
bCVXToCVX_1(uint256) := TMP_488(uint256)
has variable
[i] bCVXToCVX cleared
typecheckig node...
TMP_488(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_8(ISettV3), function:getPricePerFullShare, arguments:[]  
Function name: balanceOfPool
High Call: getPricePerFullShare
func name:getPricePerFullShare
other func name:getPricePerFullShare
TMP_488
hlc contract name: CVX_VAULT func_name: getPricePerFullShare
('c', [2], [1], 18, None, -1)
wfc len: 1
Check copy_toekn_tuple
([2], [1], 18, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_488

Name: TMP_488 Function: balanceOfPool
Num: 2
Den: 1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
CVX_5(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_4', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: balanceOfPool
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_3(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_2', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: balanceOfPool
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_9(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_8', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: balanceOfPool
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
bCVXToCVX_1(uint256) := TMP_488(uint256)
Function name: balanceOfPool
asgn

Name: TMP_488 Function: balanceOfPool
Num: 2
Den: 1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: bCVXToCVX Function: balanceOfPool
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: balanceOfPool
Num: 2
Den: 1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_489(uint256) = 10 ** 18
has variable
[i] TMP_489 cleared
clearing ir...?
TMP_490(bool) = bCVXToCVX_1 > TMP_489
has variable
[i] TMP_490 cleared
clearing ir...?
TMP_491(None) = SOLIDITY_CALL require(bool,string)(TMP_490,Loss Of Peg)
typecheckig node...
TMP_489(uint256) = 10 ** 18
Function name: balanceOfPool
val: 10
1
val: 18

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: 18 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_489 Function: balanceOfPool
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
18
val: 10
1
[i]Type for TMP_489

Name: TMP_489 Function: balanceOfPool
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_490(bool) = bCVXToCVX_1 > TMP_489
Function name: balanceOfPool
testing gt...
lnorm: 18 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_489 Function: balanceOfPool
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_490

Name: TMP_490 Function: balanceOfPool
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_491(None) = SOLIDITY_CALL require(bool,string)(TMP_490,Loss Of Peg)
[i]Type for TMP_491

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_492 = CONVERT this to address
has variable
[i] TMP_492 cleared
clearing ir...?
TMP_493(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_3(ICvxLocker), function:lockedBalanceOf, arguments:['TMP_492']  
has variable
[i] TMP_493 cleared
clearing ir...?
CVX_6(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_5', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_4(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_3', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
TMP_494(uint256) = INTERNAL_CALL, MyStrategy.CVXToWant(uint256)(TMP_493)
has variable
[i] TMP_494 cleared
clearing ir...?
TMP_495 = CONVERT CVX_7 to IERC20Upgradeable
has variable
[i] TMP_495 cleared
clearing ir...?
TMP_496 = CONVERT this to address
has variable
[i] TMP_496 cleared
clearing ir...?
TMP_497(uint256) = HIGH_LEVEL_CALL, dest:TMP_495(IERC20Upgradeable), function:balanceOf, arguments:['TMP_496']  
has variable
[i] TMP_497 cleared
clearing ir...?
CVX_8(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_7', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_6(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31', 'LOCKER_5'])
has variable
clearing ir...?
TMP_498(uint256) = INTERNAL_CALL, MyStrategy.CVXToWant(uint256)(TMP_497)
has variable
[i] TMP_498 cleared
clearing ir...?
TMP_499(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['TMP_494', 'TMP_498'] 
has variable
[i] TMP_499 cleared
clearing ir...?
valueInLocker_1(uint256) := TMP_499(uint256)
has variable
[i] valueInLocker cleared
typecheckig node...
TMP_492 = CONVERT this to address
Function name: balanceOfPool
[i]Type for TMP_492

Name: TMP_492 Function: balanceOfPool
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_493(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_3(ICvxLocker), function:lockedBalanceOf, arguments:['TMP_492']  
Function name: balanceOfPool
High Call: lockedBalanceOf
func name:lockedBalanceOf
other func name:lockedBalanceOf
TMP_493
hlc contract name: LOCKER func_name: lockedBalanceOf
('c', [2], [-1], 0, None, -1)
TMP_492
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_493

Name: TMP_493 Function: balanceOfPool
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
CVX_6(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_5', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: balanceOfPool
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_4(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_3', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: balanceOfPool
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
TMP_494(uint256) = INTERNAL_CALL, MyStrategy.CVXToWant(uint256)(TMP_493)
Function name: balanceOfPool
Internal call...
CVXToWant
TMP_493
Function: CVXToWant
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
cur_param: [[2], [-1], 0, None, [], 0]
-100
Parameter length: 1
[[2], [-1], 0, None, [], 0]
added
xyz
Function name: CVXToWant
Function Visibility: public
clearning node...
clearing ir...?
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
has variable
[i] cvx cleared
clearing ir...?
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
has variable
typecheckig node...
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
Function name: CVXToWant
Phi
[i]Type for cvx

Name: cvx Function: CVXToWant
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
Function name: CVXToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
has variable
[i] TMP_480 cleared
clearing ir...?
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_4', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
bCVXToCVX_1(uint256) := TMP_480(uint256)
has variable
[i] bCVXToCVX cleared
typecheckig node...
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
Function name: CVXToWant
High Call: getPricePerFullShare
func name:getPricePerFullShare
other func name:getPricePerFullShare
TMP_480
hlc contract name: CVX_VAULT func_name: getPricePerFullShare
('c', [2], [1], 18, None, -1)
wfc len: 1
Check copy_toekn_tuple
([2], [1], 18, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_480

Name: TMP_480 Function: CVXToWant
Num: 2
Den: 1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_4', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: CVXToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
bCVXToCVX_1(uint256) := TMP_480(uint256)
Function name: CVXToWant
asgn

Name: TMP_480 Function: CVXToWant
Num: 2
Den: 1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 2
Den: 1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_481(uint256) = 10 ** 18
has variable
[i] TMP_481 cleared
clearing ir...?
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
has variable
[i] TMP_482 cleared
clearing ir...?
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
has variable
[i] TMP_483 cleared
clearing ir...?
RETURN TMP_483
typecheckig node...
TMP_481(uint256) = 10 ** 18
Function name: CVXToWant
val: 10
1
val: 18

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: 18 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_481 Function: CVXToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
18
val: 10
1
[i]Type for TMP_481

Name: TMP_481 Function: CVXToWant
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
Function name: CVXToWant
Library Call: mul
testing mul...
lnorm: 0 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: cvx Function: CVXToWant
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_482 Function: CVXToWant
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_482

Name: TMP_482 Function: CVXToWant
Num: 2
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
XXXXX
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
Function name: CVXToWant
Library Call: div
lnorm: 18 rnorm: 18
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_483 Function: CVXToWant
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: PIC_5 Function: None
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_483 Function: CVXToWant
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_483

Name: TMP_483 Function: CVXToWant
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_483
RETURN

Name: TMP_483 Function: CVXToWant
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "CVXToWant":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: CVXToWant

Name: TMP_483 Function: CVXToWant
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_494

Name: TMP_494 Function: balanceOfPool
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_495 = CONVERT CVX_7 to IERC20Upgradeable
Function name: balanceOfPool

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: TMP_495 Function: balanceOfPool
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_495

Name: TMP_495 Function: balanceOfPool
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
TMP_496 = CONVERT this to address
Function name: balanceOfPool
[i]Type for TMP_496

Name: TMP_496 Function: balanceOfPool
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_497(uint256) = HIGH_LEVEL_CALL, dest:TMP_495(IERC20Upgradeable), function:balanceOf, arguments:['TMP_496']  
Function name: balanceOfPool
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_497
hlc contract name: CVX func_name: balanceOf
('c', [2], [-1], 0, None, 0)
TMP_496
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_497

Name: TMP_497 Function: balanceOfPool
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CVX_8(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_7', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: balanceOfPool
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_6(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31', 'LOCKER_5'])
Function name: balanceOfPool
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
TMP_498(uint256) = INTERNAL_CALL, MyStrategy.CVXToWant(uint256)(TMP_497)
Function name: balanceOfPool
Internal call...
CVXToWant
TMP_497
Function: CVXToWant
ic
Internal cal param_cache
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
cur_param: [[2], [-1], 0, None, [], 0]
Its the same:
Param: 0
    num: [2]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
0
Parameter length: 1
[[2], [-1], 0, None, [], 0]
0

Name: PIC_2 Function: None
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_498 Function: balanceOfPool
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_498

Name: TMP_498 Function: balanceOfPool
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_499(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['TMP_494', 'TMP_498'] 
Function name: balanceOfPool
Library Call: add

Name: TMP_499 Function: balanceOfPool
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: 0, Left type: -1
Final dest type: 0

Name: TMP_494 Function: balanceOfPool
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_499 Function: balanceOfPool
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_499

Name: TMP_499 Function: balanceOfPool
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
valueInLocker_1(uint256) := TMP_499(uint256)
Function name: balanceOfPool
asgn

Name: TMP_499 Function: balanceOfPool
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: valueInLocker Function: balanceOfPool
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for valueInLocker

Name: valueInLocker Function: balanceOfPool
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
RETURN valueInLocker_1
typecheckig node...
RETURN valueInLocker_1
RETURN

Name: valueInLocker Function: balanceOfPool
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
WORKLIST iteration 0 for function call "balanceOfPool":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: balanceOfPool

Name: valueInLocker Function: balanceOfPool
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
___
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: isTendable
Function isTendable not marked
Mark Iterations TRUE, proceeding anyway
Function name: isTendable
Function Visibility (test): public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
RETURN False
typecheckig node...
RETURN False
RETURN
val: False

Name: False Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "isTendable":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: getProtectedTokens
Function getProtectedTokens not marked
Mark Iterations TRUE, proceeding anyway
Function name: getProtectedTokens
Function Visibility (test): public
clearning node...
clearing ir...?
want_23(address) := ϕ(['want_17', 'want_6', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_2', 'want_0', 'want_25', 'want_39', 'want_22', 'want_35'])
has variable
clearing ir...?
lpComponent_2(address) := ϕ(['lpComponent_1', 'lpComponent_0'])
has variable
clearing ir...?
reward_2(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
has variable
clearing ir...?
CVX_10(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
typecheckig node...
want_23(address) := ϕ(['want_17', 'want_6', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_2', 'want_0', 'want_25', 'want_39', 'want_22', 'want_35'])
Function name: getProtectedTokens
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
lpComponent_2(address) := ϕ(['lpComponent_1', 'lpComponent_0'])
Function name: getProtectedTokens
Phi
[i]Type for lpComponent

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
done.
reward_2(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
Function name: getProtectedTokens
Phi
[i]Type for reward

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
CVX_10(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: getProtectedTokens
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_501 = new address[](4)
clearing ir...?
protectedTokens_1(address[]) := TMP_501(address)
has variable
[i] protectedTokens cleared
typecheckig node...
TMP_501 = new address[](4)
[i]Type for TMP_501

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
protectedTokens_1(address[]) := TMP_501(address)
Function name: getProtectedTokens
asgn

Name: TMP_501 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
protectedTokens_1(address[]) := TMP_501(address)
XXXXX
clearning node...
clearing ir...?
REF_111(address) -> protectedTokens_1[0]
has variable
clearing ir...?
protectedTokens_2(address[]) := ϕ(['protectedTokens_1'])
has variable
[i] protectedTokens cleared
clearing ir...?
REF_111 (->protectedTokens_2) := want_23(address)
has variable
typecheckig node...
REF_111(address) -> protectedTokens_1[0]
Function name: getProtectedTokens
INDEX
[i]Type for REF_111

Name: REF_111 Function: getProtectedTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
protectedTokens_2(address[]) := ϕ(['protectedTokens_1'])
Function name: getProtectedTokens
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_111 (->protectedTokens_2) := want_23(address)
Function name: getProtectedTokens
asgn

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef

Name: REF_111 Function: getProtectedTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_111

Name: REF_111 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_112(address) -> protectedTokens_2[1]
has variable
clearing ir...?
protectedTokens_3(address[]) := ϕ(['protectedTokens_2'])
has variable
[i] protectedTokens cleared
clearing ir...?
REF_112 (->protectedTokens_3) := lpComponent_2(address)
has variable
typecheckig node...
REF_112(address) -> protectedTokens_2[1]
Function name: getProtectedTokens
INDEX
[i]Type for REF_112

Name: REF_112 Function: getProtectedTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
protectedTokens_3(address[]) := ϕ(['protectedTokens_2'])
Function name: getProtectedTokens
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_112 (->protectedTokens_3) := lpComponent_2(address)
Function name: getProtectedTokens
asgn

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef

Name: REF_112 Function: getProtectedTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_112

Name: REF_112 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_113(address) -> protectedTokens_3[2]
has variable
clearing ir...?
protectedTokens_4(address[]) := ϕ(['protectedTokens_3'])
has variable
[i] protectedTokens cleared
clearing ir...?
REF_113 (->protectedTokens_4) := reward_2(address)
has variable
typecheckig node...
REF_113(address) -> protectedTokens_3[2]
Function name: getProtectedTokens
INDEX
[i]Type for REF_113

Name: REF_113 Function: getProtectedTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
protectedTokens_4(address[]) := ϕ(['protectedTokens_3'])
Function name: getProtectedTokens
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_113 (->protectedTokens_4) := reward_2(address)
Function name: getProtectedTokens
asgn

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef

Name: REF_113 Function: getProtectedTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_113

Name: REF_113 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_114(address) -> protectedTokens_4[3]
has variable
clearing ir...?
protectedTokens_5(address[]) := ϕ(['protectedTokens_4'])
has variable
[i] protectedTokens cleared
clearing ir...?
REF_114 (->protectedTokens_5) := CVX_10(address)
has variable
typecheckig node...
REF_114(address) -> protectedTokens_4[3]
Function name: getProtectedTokens
INDEX
[i]Type for REF_114

Name: REF_114 Function: getProtectedTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
protectedTokens_5(address[]) := ϕ(['protectedTokens_4'])
Function name: getProtectedTokens
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_114 (->protectedTokens_5) := CVX_10(address)
Function name: getProtectedTokens
asgn

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: REF_114 Function: getProtectedTokens
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_114

Name: REF_114 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN protectedTokens_5
typecheckig node...
RETURN protectedTokens_5
RETURN

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "getProtectedTokens":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
want_23(address) := ϕ(['want_17', 'want_6', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_2', 'want_0', 'want_25', 'want_39', 'want_22', 'want_35'])
Function name: getProtectedTokens
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
lpComponent_2(address) := ϕ(['lpComponent_1', 'lpComponent_0'])
Function name: getProtectedTokens
Phi
[i]Type for lpComponent

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
done.
reward_2(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
Function name: getProtectedTokens
Phi
[i]Type for reward

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
CVX_10(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: getProtectedTokens
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_501 = new address[](4)
[i]Type for TMP_501

Name: TMP_501 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
protectedTokens_1(address[]) := TMP_501(address)
Function name: getProtectedTokens
asgn

Name: TMP_501 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
protectedTokens_1(address[]) := TMP_501(address)
XXXXX
typecheckig node...
REF_111(address) -> protectedTokens_1[0]
Function name: getProtectedTokens
INDEX
[i]Type for REF_111

Name: REF_111 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
protectedTokens_2(address[]) := ϕ(['protectedTokens_1'])
Function name: getProtectedTokens
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_111 (->protectedTokens_2) := want_23(address)
Function name: getProtectedTokens
asgn

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef

Name: REF_111 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_111

Name: REF_111 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_112(address) -> protectedTokens_2[1]
Function name: getProtectedTokens
INDEX
[i]Type for REF_112

Name: REF_112 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
protectedTokens_3(address[]) := ϕ(['protectedTokens_2'])
Function name: getProtectedTokens
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_112 (->protectedTokens_3) := lpComponent_2(address)
Function name: getProtectedTokens
asgn

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef

Name: REF_112 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_112

Name: REF_112 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_113(address) -> protectedTokens_3[2]
Function name: getProtectedTokens
INDEX
[i]Type for REF_113

Name: REF_113 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
protectedTokens_4(address[]) := ϕ(['protectedTokens_3'])
Function name: getProtectedTokens
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_113 (->protectedTokens_4) := reward_2(address)
Function name: getProtectedTokens
asgn

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef

Name: REF_113 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_113

Name: REF_113 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_114(address) -> protectedTokens_4[3]
Function name: getProtectedTokens
INDEX
[i]Type for REF_114

Name: REF_114 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
protectedTokens_5(address[]) := ϕ(['protectedTokens_4'])
Function name: getProtectedTokens
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_114 (->protectedTokens_5) := CVX_10(address)
Function name: getProtectedTokens
asgn

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: REF_114 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_114

Name: REF_114 Function: getProtectedTokens
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
RETURN protectedTokens_5
RETURN

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 1 for function call "getProtectedTokens":
 New undefined nodes- 1
 Old undefined nodes- 1
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: setKeepReward
Function setKeepReward not marked
Mark Iterations TRUE, proceeding anyway
Function name: setKeepReward
Function Visibility (test): external
_setKeepReward
Finding type for _setKeepReward...
uint256
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
clearning node...
typecheckig node...
clearning node...
clearing ir...?
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
typecheckig node...
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Internal call...
_onlyGovernance
Function: _onlyGovernance
ic
done.
WORKLIST iteration 0 for function call "setKeepReward":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _onlyNotProtectedTokens
Function _onlyNotProtectedTokens not marked
Mark Iterations TRUE, proceeding anyway
Function name: _onlyNotProtectedTokens
Function Visibility (test): internal
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _deposit
Function _deposit not marked
Mark Iterations TRUE, proceeding anyway
Function name: _deposit
Function Visibility (test): internal
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: prepareWithdrawAll
Function name: prepareWithdrawAll
Function Visibility (test): external
-100
Add new
clearning node...
clearing ir...?
CVX_14(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_13(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
CVX_VAULT_12(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
has variable
typecheckig node...
CVX_14(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: prepareWithdrawAll
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_13(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: prepareWithdrawAll
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_12(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
Function name: prepareWithdrawAll
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
typecheckig node...
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Internal call...
_onlyGovernance
Function: _onlyGovernance
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: _onlyGovernance
Function Visibility: internal
clearning node...
clearing ir...?
governance_4(address) := ϕ(['governance_7', 'governance_0', 'governance_1'])
has variable
typecheckig node...
governance_4(address) := ϕ(['governance_7', 'governance_0', 'governance_1'])
Function name: _onlyGovernance
Phi
[i]Type for governance

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_431(bool) = msg.sender == governance_4
has variable
[i] TMP_431 cleared
clearing ir...?
TMP_432(None) = SOLIDITY_CALL require(bool,string)(TMP_431,onlyGovernance)
typecheckig node...
TMP_431(bool) = msg.sender == governance_4
Function name: _onlyGovernance
[i]Type for TMP_431

Name: TMP_431 Function: _onlyGovernance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_432(None) = SOLIDITY_CALL require(bool,string)(TMP_431,onlyGovernance)
[i]Type for TMP_432

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_onlyGovernance":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _onlyGovernance
done.
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:LOCKER_14(ICvxLocker), function:processExpiredLocks, arguments:['False']  
clearing ir...?
CVX_16(address) := ϕ(['CVX_15', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_15(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_14', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
CVX_VAULT_14(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_13', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:LOCKER_14(ICvxLocker), function:processExpiredLocks, arguments:['False']  
High Call: processExpiredLocks
func name:processExpiredLocks
other func name:processExpiredLocks
done.
CVX_16(address) := ϕ(['CVX_15', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: prepareWithdrawAll
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_15(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_14', 'LOCKER_44', 'LOCKER_31'])
Function name: prepareWithdrawAll
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_14(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_13', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: prepareWithdrawAll
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_518 = CONVERT CVX_16 to IERC20Upgradeable
has variable
[i] TMP_518 cleared
clearing ir...?
TMP_519 = CONVERT this to address
has variable
[i] TMP_519 cleared
clearing ir...?
TMP_520(uint256) = HIGH_LEVEL_CALL, dest:TMP_518(IERC20Upgradeable), function:balanceOf, arguments:['TMP_519']  
has variable
[i] TMP_520 cleared
clearing ir...?
CVX_17(address) := ϕ(['CVX_45', 'CVX_16', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
CVX_VAULT_15(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_14', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
toDeposit_1(uint256) := TMP_520(uint256)
has variable
[i] toDeposit cleared
typecheckig node...
TMP_518 = CONVERT CVX_16 to IERC20Upgradeable
Function name: prepareWithdrawAll

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: TMP_518 Function: prepareWithdrawAll
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_518

Name: TMP_518 Function: prepareWithdrawAll
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
TMP_519 = CONVERT this to address
Function name: prepareWithdrawAll
[i]Type for TMP_519

Name: TMP_519 Function: prepareWithdrawAll
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_520(uint256) = HIGH_LEVEL_CALL, dest:TMP_518(IERC20Upgradeable), function:balanceOf, arguments:['TMP_519']  
Function name: prepareWithdrawAll
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_520
hlc contract name: CVX func_name: balanceOf
('c', [2], [-1], 0, None, 0)
TMP_519
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_520

Name: TMP_520 Function: prepareWithdrawAll
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CVX_17(address) := ϕ(['CVX_45', 'CVX_16', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: prepareWithdrawAll
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
CVX_VAULT_15(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_14', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: prepareWithdrawAll
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
toDeposit_1(uint256) := TMP_520(uint256)
Function name: prepareWithdrawAll
asgn

Name: TMP_520 Function: prepareWithdrawAll
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: toDeposit Function: prepareWithdrawAll
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for toDeposit

Name: toDeposit Function: prepareWithdrawAll
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_521(bool) = toDeposit_1 > 0
has variable
[i] TMP_521 cleared
clearing ir...?
CONDITION TMP_521
typecheckig node...
TMP_521(bool) = toDeposit_1 > 0
Function name: prepareWithdrawAll
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_521

Name: TMP_521 Function: prepareWithdrawAll
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_521
Condition...
Conidtion: 
TMP_521
TMP_521
clearning node...
typecheckig node...
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:CVX_VAULT_15(ISettV3), function:deposit, arguments:['toDeposit_1']  
clearing ir...?
CVX_VAULT_16(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:CVX_VAULT_15(ISettV3), function:deposit, arguments:['toDeposit_1']  
High Call: deposit
func name:deposit
other func name:deposit
done.
CVX_VAULT_16(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
Function name: prepareWithdrawAll
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "prepareWithdrawAll":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: prepareWithdrawAll
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _withdrawAll
Function _withdrawAll not marked
Mark Iterations TRUE, proceeding anyway
Function name: _withdrawAll
Function Visibility (test): internal
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _withdrawSome
Function _withdrawSome not marked
Mark Iterations TRUE, proceeding anyway
Function name: _withdrawSome
Function Visibility (test): internal
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: harvest
Function name: harvest
Function Visibility (test): public
-100
Add new
clearning node...
clearing ir...?
want_26(address) := ϕ(['want_17', 'want_6', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_2', 'want_0', 'want_25', 'want_39', 'want_22', 'want_35'])
has variable
clearing ir...?
reward_3(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
has variable
clearing ir...?
LOCKER_19(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
typecheckig node...
want_26(address) := ϕ(['want_17', 'want_6', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_2', 'want_0', 'want_25', 'want_39', 'want_22', 'want_35'])
Function name: harvest
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
reward_3(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
Function name: harvest
Phi
[i]Type for reward

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
LOCKER_19(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: harvest
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
typecheckig node...
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Internal call...
whenNotPaused
Function: whenNotPaused
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: whenNotPaused
Function Visibility: internal
clearning node...
clearing ir...?
_paused_5(bool) := ϕ(['_paused_3', '_paused_1', '_paused_0', '_paused_4'])
has variable
typecheckig node...
_paused_5(bool) := ϕ(['_paused_3', '_paused_1', '_paused_0', '_paused_4'])
Function name: whenNotPaused
Phi
[i]Type for _paused

Name: _paused Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_668 = ! _paused_5 
clearing ir...?
TMP_669(None) = SOLIDITY_CALL require(bool,string)(TMP_668,Pausable: paused)
typecheckig node...
TMP_668 = ! _paused_5 
[i]Type for TMP_668

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_669(None) = SOLIDITY_CALL require(bool,string)(TMP_668,Pausable: paused)
[i]Type for TMP_669

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "whenNotPaused":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: whenNotPaused
done.
clearning node...
clearing ir...?
INTERNAL_CALL, SettAccessControl._onlyAuthorizedActors()()
typecheckig node...
INTERNAL_CALL, SettAccessControl._onlyAuthorizedActors()()
Internal call...
_onlyAuthorizedActors
Function: _onlyAuthorizedActors
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: _onlyAuthorizedActors
Function Visibility: internal
clearning node...
clearing ir...?
governance_6(address) := ϕ(['governance_7', 'governance_0', 'governance_1'])
has variable
clearing ir...?
keeper_3(address) := ϕ(['keeper_1', 'keeper_4', 'keeper_0'])
has variable
typecheckig node...
governance_6(address) := ϕ(['governance_7', 'governance_0', 'governance_1'])
Function name: _onlyAuthorizedActors
Phi
[i]Type for governance

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
keeper_3(address) := ϕ(['keeper_1', 'keeper_4', 'keeper_0'])
Function name: _onlyAuthorizedActors
Phi
[i]Type for keeper

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_437(bool) = msg.sender == keeper_3
has variable
[i] TMP_437 cleared
clearing ir...?
TMP_438(bool) = msg.sender == governance_6
has variable
[i] TMP_438 cleared
clearing ir...?
TMP_439(bool) = TMP_437 || TMP_438
has variable
[i] TMP_439 cleared
clearing ir...?
TMP_440(None) = SOLIDITY_CALL require(bool,string)(TMP_439,onlyAuthorizedActors)
typecheckig node...
TMP_437(bool) = msg.sender == keeper_3
Function name: _onlyAuthorizedActors
[i]Type for TMP_437

Name: TMP_437 Function: _onlyAuthorizedActors
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_438(bool) = msg.sender == governance_6
Function name: _onlyAuthorizedActors
[i]Type for TMP_438

Name: TMP_438 Function: _onlyAuthorizedActors
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_439(bool) = TMP_437 || TMP_438
Function name: _onlyAuthorizedActors
[i]Type for TMP_439

Name: TMP_439 Function: _onlyAuthorizedActors
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_440(None) = SOLIDITY_CALL require(bool,string)(TMP_439,onlyAuthorizedActors)
[i]Type for TMP_440

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_onlyAuthorizedActors":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _onlyAuthorizedActors
done.
clearning node...
clearing ir...?
TMP_544 = CONVERT want_28 to IERC20Upgradeable
has variable
[i] TMP_544 cleared
clearing ir...?
TMP_545 = CONVERT this to address
has variable
[i] TMP_545 cleared
clearing ir...?
TMP_546(uint256) = HIGH_LEVEL_CALL, dest:TMP_544(IERC20Upgradeable), function:balanceOf, arguments:['TMP_545']  
has variable
[i] TMP_546 cleared
clearing ir...?
want_29(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_2', 'want_28', 'want_25', 'want_39', 'want_22', 'want_35'])
has variable
clearing ir...?
reward_6(address) := ϕ(['reward_12', 'reward_10', 'reward_5', 'reward_1'])
has variable
clearing ir...?
LOCKER_22(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_21', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
_before_1(uint256) := TMP_546(uint256)
has variable
[i] _before cleared
typecheckig node...
TMP_544 = CONVERT want_28 to IERC20Upgradeable
Function name: harvest

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef

Name: TMP_544 Function: harvest
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_544

Name: TMP_544 Function: harvest
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
TMP_545 = CONVERT this to address
Function name: harvest
[i]Type for TMP_545

Name: TMP_545 Function: harvest
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_546(uint256) = HIGH_LEVEL_CALL, dest:TMP_544(IERC20Upgradeable), function:balanceOf, arguments:['TMP_545']  
Function name: harvest
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_546
hlc contract name: WANT func_name: balanceOf
('c', [1], [-1], 0, None, 0)
TMP_545
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_546

Name: TMP_546 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
want_29(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_2', 'want_28', 'want_25', 'want_39', 'want_22', 'want_35'])
Function name: harvest
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
reward_6(address) := ϕ(['reward_12', 'reward_10', 'reward_5', 'reward_1'])
Function name: harvest
Phi
[i]Type for reward

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
LOCKER_22(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_21', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: harvest
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
_before_1(uint256) := TMP_546(uint256)
Function name: harvest
asgn

Name: TMP_546 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: _before Function: harvest
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for _before

Name: _before Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_547 = CONVERT reward_6 to IERC20Upgradeable
has variable
[i] TMP_547 cleared
clearing ir...?
TMP_548 = CONVERT this to address
has variable
[i] TMP_548 cleared
clearing ir...?
TMP_549(uint256) = HIGH_LEVEL_CALL, dest:TMP_547(IERC20Upgradeable), function:balanceOf, arguments:['TMP_548']  
has variable
[i] TMP_549 cleared
clearing ir...?
want_30(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_29', 'want_49', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35'])
has variable
clearing ir...?
reward_7(address) := ϕ(['reward_6', 'reward_12', 'reward_10', 'reward_1'])
has variable
clearing ir...?
LOCKER_23(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_22', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
_beforeCVX_1(uint256) := TMP_549(uint256)
has variable
[i] _beforeCVX cleared
typecheckig node...
TMP_547 = CONVERT reward_6 to IERC20Upgradeable
Function name: harvest

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef

Name: TMP_547 Function: harvest
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_547

Name: TMP_547 Function: harvest
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
TMP_548 = CONVERT this to address
Function name: harvest
[i]Type for TMP_548

Name: TMP_548 Function: harvest
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_549(uint256) = HIGH_LEVEL_CALL, dest:TMP_547(IERC20Upgradeable), function:balanceOf, arguments:['TMP_548']  
Function name: harvest
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_549
hlc contract name: REWARD func_name: balanceOf
('c', [1], [-1], 0, None, 0)
TMP_548
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_549

Name: TMP_549 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
want_30(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_29', 'want_49', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35'])
Function name: harvest
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
reward_7(address) := ϕ(['reward_6', 'reward_12', 'reward_10', 'reward_1'])
Function name: harvest
Phi
[i]Type for reward

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
LOCKER_23(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_22', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: harvest
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
_beforeCVX_1(uint256) := TMP_549(uint256)
Function name: harvest
asgn

Name: TMP_549 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: _beforeCVX Function: harvest
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for _beforeCVX

Name: _beforeCVX Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_550 = CONVERT this to address
has variable
[i] TMP_550 cleared
clearing ir...?
HIGH_LEVEL_CALL, dest:LOCKER_23(ICvxLocker), function:getReward, arguments:['TMP_550', 'False']  
clearing ir...?
want_31(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_30', 'want_49', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35'])
has variable
clearing ir...?
reward_8(address) := ϕ(['reward_12', 'reward_10', 'reward_7', 'reward_1'])
has variable
clearing ir...?
LOCKER_24(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_23', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
typecheckig node...
TMP_550 = CONVERT this to address
Function name: harvest
[i]Type for TMP_550

Name: TMP_550 Function: harvest
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:LOCKER_23(ICvxLocker), function:getReward, arguments:['TMP_550', 'False']  
High Call: getReward
func name:getReward
other func name:getReward
done.
want_31(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_30', 'want_49', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35'])
Function name: harvest
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
reward_8(address) := ϕ(['reward_12', 'reward_10', 'reward_7', 'reward_1'])
Function name: harvest
Phi
[i]Type for reward

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
LOCKER_24(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_23', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: harvest
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_552 = CONVERT reward_8 to IERC20Upgradeable
has variable
[i] TMP_552 cleared
clearing ir...?
TMP_553 = CONVERT this to address
has variable
[i] TMP_553 cleared
clearing ir...?
TMP_554(uint256) = HIGH_LEVEL_CALL, dest:TMP_552(IERC20Upgradeable), function:balanceOf, arguments:['TMP_553']  
has variable
[i] TMP_554 cleared
clearing ir...?
want_32(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_49', 'want_31', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35'])
has variable
clearing ir...?
reward_9(address) := ϕ(['reward_12', 'reward_10', 'reward_8', 'reward_1'])
has variable
clearing ir...?
TMP_555(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['TMP_554', '_beforeCVX_1'] 
has variable
[i] TMP_555 cleared
clearing ir...?
earnedReward_1(uint256) := TMP_555(uint256)
has variable
[i] earnedReward cleared
typecheckig node...
TMP_552 = CONVERT reward_8 to IERC20Upgradeable
Function name: harvest

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef

Name: TMP_552 Function: harvest
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_552

Name: TMP_552 Function: harvest
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
TMP_553 = CONVERT this to address
Function name: harvest
[i]Type for TMP_553

Name: TMP_553 Function: harvest
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_554(uint256) = HIGH_LEVEL_CALL, dest:TMP_552(IERC20Upgradeable), function:balanceOf, arguments:['TMP_553']  
Function name: harvest
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_554
hlc contract name: REWARD func_name: balanceOf
('c', [1], [-1], 0, None, 0)
TMP_553
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_554

Name: TMP_554 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
want_32(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_49', 'want_31', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35'])
Function name: harvest
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
reward_9(address) := ϕ(['reward_12', 'reward_10', 'reward_8', 'reward_1'])
Function name: harvest
Phi
[i]Type for reward

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
TMP_555(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['TMP_554', '_beforeCVX_1'] 
Function name: harvest
Library Call: sub
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
Func: sub
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: 0, Left type: 0
Final dest type: 0

Name: TMP_554 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: _beforeCVX Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_554 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_555 Function: harvest
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_555

Name: TMP_555 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
earnedReward_1(uint256) := TMP_555(uint256)
Function name: harvest
asgn

Name: TMP_555 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: earnedReward Function: harvest
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for earnedReward

Name: earnedReward Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TUPLE_4(uint256,uint256) = INTERNAL_CALL, MyStrategy._processRewardsFees(uint256,address)(earnedReward_1,reward_9)
has variable
clearing ir...?
governancePerformanceFee_1(uint256)= UNPACK TUPLE_4 index: 0 
has variable
[i] governancePerformanceFee cleared
clearing ir...?
strategistPerformanceFee_1(uint256)= UNPACK TUPLE_4 index: 1 
has variable
[i] strategistPerformanceFee cleared
typecheckig node...
TUPLE_4(uint256,uint256) = INTERNAL_CALL, MyStrategy._processRewardsFees(uint256,address)(earnedReward_1,reward_9)
Function name: harvest
Internal call...
_processRewardsFees
earnedReward
reward
Function: _processRewardsFees
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: REWARD
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: REWARD
    fields: []
    fintype: -1
Parameter length: 1
[[1], [-1], 0, None, [], 0]
[[-1], [-1], 0, 'REWARD', [], -1]
added
xyz
Function name: _processRewardsFees
Function Visibility: internal
clearning node...
clearing ir...?
_amount_1(uint256) := ϕ(['earnedReward_1'])
has variable
[i] _amount cleared
clearing ir...?
_token_1(address) := ϕ(['reward_9'])
has variable
[i] _token cleared
clearing ir...?
performanceFeeGovernance_6(uint256) := ϕ(['performanceFeeGovernance_8', 'performanceFeeGovernance_5', 'performanceFeeGovernance_1', 'performanceFeeGovernance_2', 'performanceFeeGovernance_0'])
has variable
clearing ir...?
performanceFeeStrategist_7(uint256) := ϕ(['performanceFeeStrategist_0', 'performanceFeeStrategist_6', 'performanceFeeStrategist_10', 'performanceFeeStrategist_2', 'performanceFeeStrategist_1'])
has variable
clearing ir...?
controller_17(address) := ϕ(['controller_13', 'controller_0', 'controller_9', 'controller_16', 'controller_1', 'controller_19', 'controller_11', 'controller_4'])
has variable
clearing ir...?
strategist_8(address) := ϕ(['strategist_1', 'strategist_11', 'strategist_0', 'strategist_3', 'strategist_7'])
has variable
typecheckig node...
_amount_1(uint256) := ϕ(['earnedReward_1'])
Function name: _processRewardsFees
Phi
[i]Type for _amount

Name: _amount Function: _processRewardsFees
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
_token_1(address) := ϕ(['reward_9'])
Function name: _processRewardsFees
Phi
[i]Type for _token

Name: _token Function: _processRewardsFees
Num: -1
Den: -1
Norm: u
LF: REWARD
Fields: 
Finance Type: undef
done.
performanceFeeGovernance_6(uint256) := ϕ(['performanceFeeGovernance_8', 'performanceFeeGovernance_5', 'performanceFeeGovernance_1', 'performanceFeeGovernance_2', 'performanceFeeGovernance_0'])
Function name: _processRewardsFees
Phi
[i]Type for performanceFeeGovernance

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
done.
performanceFeeStrategist_7(uint256) := ϕ(['performanceFeeStrategist_0', 'performanceFeeStrategist_6', 'performanceFeeStrategist_10', 'performanceFeeStrategist_2', 'performanceFeeStrategist_1'])
Function name: _processRewardsFees
Phi
[i]Type for performanceFeeStrategist

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
done.
controller_17(address) := ϕ(['controller_13', 'controller_0', 'controller_9', 'controller_16', 'controller_1', 'controller_19', 'controller_11', 'controller_4'])
Function name: _processRewardsFees
Phi
[i]Type for controller

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
done.
strategist_8(address) := ϕ(['strategist_1', 'strategist_11', 'strategist_0', 'strategist_3', 'strategist_7'])
Function name: _processRewardsFees
Phi
[i]Type for strategist

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_584 = CONVERT controller_17 to IController
has variable
[i] TMP_584 cleared
clearing ir...?
TMP_585(address) = HIGH_LEVEL_CALL, dest:TMP_584(IController), function:rewards, arguments:[]  
has variable
[i] TMP_585 cleared
clearing ir...?
performanceFeeGovernance_7(uint256) := ϕ(['performanceFeeGovernance_8', 'performanceFeeGovernance_6', 'performanceFeeGovernance_5', 'performanceFeeGovernance_1', 'performanceFeeGovernance_2'])
has variable
clearing ir...?
performanceFeeStrategist_8(uint256) := ϕ(['performanceFeeStrategist_6', 'performanceFeeStrategist_10', 'performanceFeeStrategist_2', 'performanceFeeStrategist_1', 'performanceFeeStrategist_7'])
has variable
clearing ir...?
controller_18(address) := ϕ(['controller_13', 'controller_17', 'controller_9', 'controller_16', 'controller_1', 'controller_19', 'controller_11', 'controller_4'])
has variable
clearing ir...?
strategist_9(address) := ϕ(['strategist_1', 'strategist_7', 'strategist_11', 'strategist_3', 'strategist_8'])
has variable
clearing ir...?
TMP_586(uint256) = INTERNAL_CALL, BaseStrategy._processFee(address,uint256,uint256,address)(_token_1,_amount_1,performanceFeeGovernance_7,TMP_585)
has variable
[i] TMP_586 cleared
clearing ir...?
governanceRewardsFee_1(uint256) := TMP_586(uint256)
has variable
[i] governanceRewardsFee cleared
typecheckig node...
TMP_584 = CONVERT controller_17 to IController
Function name: _processRewardsFees

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef

Name: TMP_584 Function: _processRewardsFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_584

Name: TMP_584 Function: _processRewardsFees
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
done.
TMP_585(address) = HIGH_LEVEL_CALL, dest:TMP_584(IController), function:rewards, arguments:[]  
Function name: _processRewardsFees
High Call: rewards
func name:rewards
other func name:rewards
TMP_585
hlc contract name: CONTROLLER func_name: rewards
wfc len: 0
COPIED
[i]Type for TMP_585

Name: TMP_585 Function: _processRewardsFees
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
performanceFeeGovernance_7(uint256) := ϕ(['performanceFeeGovernance_8', 'performanceFeeGovernance_6', 'performanceFeeGovernance_5', 'performanceFeeGovernance_1', 'performanceFeeGovernance_2'])
Function name: _processRewardsFees
Phi
[i]Type for performanceFeeGovernance

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
done.
performanceFeeStrategist_8(uint256) := ϕ(['performanceFeeStrategist_6', 'performanceFeeStrategist_10', 'performanceFeeStrategist_2', 'performanceFeeStrategist_1', 'performanceFeeStrategist_7'])
Function name: _processRewardsFees
Phi
[i]Type for performanceFeeStrategist

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
done.
controller_18(address) := ϕ(['controller_13', 'controller_17', 'controller_9', 'controller_16', 'controller_1', 'controller_19', 'controller_11', 'controller_4'])
Function name: _processRewardsFees
Phi
[i]Type for controller

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
done.
strategist_9(address) := ϕ(['strategist_1', 'strategist_7', 'strategist_11', 'strategist_3', 'strategist_8'])
Function name: _processRewardsFees
Phi
[i]Type for strategist

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
done.
TMP_586(uint256) = INTERNAL_CALL, BaseStrategy._processFee(address,uint256,uint256,address)(_token_1,_amount_1,performanceFeeGovernance_7,TMP_585)
Function name: _processRewardsFees
Internal call...
_processFee
_token
_amount
performanceFeeGovernance
TMP_585
Function: _processFee
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: REWARD
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FEEGOV
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: REWARD
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FEEGOV
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', 'REWARD', [], -1]
[[1], [-1], 'u', None, [], 0]
[[-1], [-1], 0, 'FEEGOV', [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _processFee
Function Visibility: internal
clearning node...
clearing ir...?
token_1(address) := ϕ(['want_38', '_token_1', 'want_37'])
has variable
[i] token cleared
clearing ir...?
amount_1(uint256) := ϕ(['_amount_1', '_amount_1'])
has variable
[i] amount cleared
clearing ir...?
feeBps_1(uint256) := ϕ(['performanceFeeStrategist_5', 'performanceFeeStrategist_9', 'performanceFeeGovernance_7', 'performanceFeeGovernance_4'])
has variable
[i] feeBps cleared
clearing ir...?
recipient_1(address) := ϕ(['TMP_585', 'TMP_581', 'strategist_6', 'strategist_10'])
has variable
[i] recipient cleared
clearing ir...?
MAX_FEE_16(uint256) := ϕ(['MAX_FEE_0', 'MAX_FEE_14', 'MAX_FEE_6', 'MAX_FEE_2', 'MAX_FEE_13', 'MAX_FEE_8', 'MAX_FEE_4'])
has variable
typecheckig node...
token_1(address) := ϕ(['want_38', '_token_1', 'want_37'])
Function name: _processFee
Phi
[i]Type for token

Name: token Function: _processFee
Num: -1
Den: -1
Norm: u
LF: REWARD
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['_amount_1', '_amount_1'])
Function name: _processFee
Phi
[i]Type for amount

Name: amount Function: _processFee
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
feeBps_1(uint256) := ϕ(['performanceFeeStrategist_5', 'performanceFeeStrategist_9', 'performanceFeeGovernance_7', 'performanceFeeGovernance_4'])
Function name: _processFee
Phi
[i]Type for feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Norm: u
LF: FEEGOV
Fields: 
Finance Type: undef
done.
recipient_1(address) := ϕ(['TMP_585', 'TMP_581', 'strategist_6', 'strategist_10'])
Function name: _processFee
Phi
[i]Type for recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Norm: u
LF: recipient
Fields: 
Finance Type: undef
done.
MAX_FEE_16(uint256) := ϕ(['MAX_FEE_0', 'MAX_FEE_14', 'MAX_FEE_6', 'MAX_FEE_2', 'MAX_FEE_13', 'MAX_FEE_8', 'MAX_FEE_4'])
Function name: _processFee
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
done.
clearning node...
clearing ir...?
TMP_390(bool) = feeBps_1 == 0
has variable
[i] TMP_390 cleared
clearing ir...?
CONDITION TMP_390
typecheckig node...
TMP_390(bool) = feeBps_1 == 0
Function name: _processFee
[i]Type for TMP_390

Name: TMP_390 Function: _processFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_390
Condition...
Conidtion: 
TMP_390
TMP_390
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['amount_1', 'feeBps_1'] 
has variable
[i] TMP_391 cleared
clearing ir...?
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_391', 'MAX_FEE_16'] 
has variable
[i] TMP_392 cleared
clearing ir...?
fee_1(uint256) := TMP_392(uint256)
has variable
[i] fee cleared
typecheckig node...
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['amount_1', 'feeBps_1'] 
Function name: _processFee
Library Call: mul
testing mul...
lnorm: u rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: amount Function: _processFee
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_391 Function: _processFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_391

Name: TMP_391 Function: _processFee
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_391', 'MAX_FEE_16'] 
Function name: _processFee
Library Call: div
lnorm: u rnorm: 0
Finance type key: (0, 12)
Func: div
Dest type: 1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: 12, Left type: 0
Left side: 0, Right side: 12, Checked Ratio: 12
False
Final dest type: 1

Name: TMP_392 Function: _processFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: net balance

Name: TMP_391 Function: _processFee
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_392 Function: _processFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: net balance
[i]Type for TMP_392

Name: TMP_392 Function: _processFee
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance
done.
fee_1(uint256) := TMP_392(uint256)
Function name: _processFee
asgn

Name: TMP_392 Function: _processFee
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance

Name: fee Function: _processFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (1, -1)
Func: assign
Dest type: 1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 1
Final dest type: 1
[i]Type for fee

Name: fee Function: _processFee
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance
done.
clearning node...
clearing ir...?
TMP_393 = CONVERT token_1 to IERC20Upgradeable
has variable
[i] TMP_393 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['TMP_393', 'recipient_1', 'fee_1'] 
typecheckig node...
TMP_393 = CONVERT token_1 to IERC20Upgradeable
Function name: _processFee

Name: token Function: _processFee
Num: -1
Den: -1
Norm: u
LF: REWARD
Fields: 
Finance Type: undef

Name: TMP_393 Function: _processFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_393

Name: TMP_393 Function: _processFee
Num: -1
Den: -1
Norm: u
LF: REWARD
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['TMP_393', 'recipient_1', 'fee_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
RETURN fee_1
typecheckig node...
RETURN fee_1
RETURN

Name: fee Function: _processFee
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance
clearning node...
clearing ir...?
RETURN 0
typecheckig node...
RETURN 0
RETURN
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_processFee":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _processFee

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for TMP_586

Name: TMP_586 Function: _processRewardsFees
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
governanceRewardsFee_1(uint256) := TMP_586(uint256)
Function name: _processRewardsFees
asgn

Name: TMP_586 Function: _processRewardsFees
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: governanceRewardsFee Function: _processRewardsFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for governanceRewardsFee

Name: governanceRewardsFee Function: _processRewardsFees
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_587(uint256) = INTERNAL_CALL, BaseStrategy._processFee(address,uint256,uint256,address)(_token_1,_amount_1,performanceFeeStrategist_9,strategist_10)
has variable
[i] TMP_587 cleared
clearing ir...?
strategistRewardsFee_1(uint256) := TMP_587(uint256)
has variable
[i] strategistRewardsFee cleared
typecheckig node...
TMP_587(uint256) = INTERNAL_CALL, BaseStrategy._processFee(address,uint256,uint256,address)(_token_1,_amount_1,performanceFeeStrategist_9,strategist_10)
Function name: _processRewardsFees
Internal call...
_processFee
_token
_amount
performanceFeeStrategist
strategist
Function: _processFee
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: REWARD
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FEESTRAT
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: 0
    link: STRAT
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: REWARD
    fields: []
    fintype: -1
Param: 1
    num: [1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: FEEGOV
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
cur_param: [[-1], [-1], 'u', 'REWARD', [], -1]
cur_param: [[1], [-1], 'u', None, [], 0]
cur_param: [[-1], [-1], 0, 'FEEGOV', [], -1]
cur_param: [[-1], [-1], 'u', None, [], -1]
-100
Parameter length: 1
[[-1], [-1], 'u', 'REWARD', [], -1]
[[1], [-1], 'u', None, [], 0]
[[-1], [-1], 0, 'FEEGOV', [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: _processFee
Function Visibility: internal
clearning node...
clearing ir...?
token_1(address) := ϕ(['want_38', '_token_1', 'want_37'])
has variable
[i] token cleared
clearing ir...?
amount_1(uint256) := ϕ(['_amount_1', '_amount_1'])
has variable
[i] amount cleared
clearing ir...?
feeBps_1(uint256) := ϕ(['performanceFeeStrategist_5', 'performanceFeeStrategist_9', 'performanceFeeGovernance_7', 'performanceFeeGovernance_4'])
has variable
[i] feeBps cleared
clearing ir...?
recipient_1(address) := ϕ(['TMP_585', 'TMP_581', 'strategist_6', 'strategist_10'])
has variable
[i] recipient cleared
clearing ir...?
MAX_FEE_16(uint256) := ϕ(['MAX_FEE_0', 'MAX_FEE_14', 'MAX_FEE_6', 'MAX_FEE_2', 'MAX_FEE_13', 'MAX_FEE_8', 'MAX_FEE_4'])
has variable
typecheckig node...
token_1(address) := ϕ(['want_38', '_token_1', 'want_37'])
Function name: _processFee
Phi
[i]Type for token

Name: token Function: _processFee
Num: -1
Den: -1
Norm: u
LF: REWARD
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['_amount_1', '_amount_1'])
Function name: _processFee
Phi
[i]Type for amount

Name: amount Function: _processFee
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
feeBps_1(uint256) := ϕ(['performanceFeeStrategist_5', 'performanceFeeStrategist_9', 'performanceFeeGovernance_7', 'performanceFeeGovernance_4'])
Function name: _processFee
Phi
[i]Type for feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Norm: u
LF: FEESTRAT
Fields: 
Finance Type: undef
done.
recipient_1(address) := ϕ(['TMP_585', 'TMP_581', 'strategist_6', 'strategist_10'])
Function name: _processFee
Phi
[i]Type for recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Norm: u
LF: STRAT
Fields: 
Finance Type: undef
done.
MAX_FEE_16(uint256) := ϕ(['MAX_FEE_0', 'MAX_FEE_14', 'MAX_FEE_6', 'MAX_FEE_2', 'MAX_FEE_13', 'MAX_FEE_8', 'MAX_FEE_4'])
Function name: _processFee
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
done.
clearning node...
clearing ir...?
TMP_390(bool) = feeBps_1 == 0
has variable
[i] TMP_390 cleared
clearing ir...?
CONDITION TMP_390
typecheckig node...
TMP_390(bool) = feeBps_1 == 0
Function name: _processFee
[i]Type for TMP_390

Name: TMP_390 Function: _processFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_390
Condition...
Conidtion: 
TMP_390
TMP_390
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['amount_1', 'feeBps_1'] 
has variable
[i] TMP_391 cleared
clearing ir...?
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_391', 'MAX_FEE_16'] 
has variable
[i] TMP_392 cleared
clearing ir...?
fee_1(uint256) := TMP_392(uint256)
has variable
[i] fee cleared
typecheckig node...
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['amount_1', 'feeBps_1'] 
Function name: _processFee
Library Call: mul
testing mul...
lnorm: u rnorm: u
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: amount Function: _processFee
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_391 Function: _processFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_391

Name: TMP_391 Function: _processFee
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_391', 'MAX_FEE_16'] 
Function name: _processFee
Library Call: div
lnorm: u rnorm: 0
Finance type key: (0, 12)
Func: div
Dest type: 1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: 12, Left type: 0
Left side: 0, Right side: 12, Checked Ratio: 12
False
Final dest type: 1

Name: TMP_392 Function: _processFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: net balance

Name: TMP_391 Function: _processFee
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_392 Function: _processFee
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: net balance
[i]Type for TMP_392

Name: TMP_392 Function: _processFee
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance
done.
fee_1(uint256) := TMP_392(uint256)
Function name: _processFee
asgn

Name: TMP_392 Function: _processFee
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance

Name: fee Function: _processFee
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: net balance
Finance type key: (1, -1)
Func: assign
Dest type: 1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 1
Final dest type: 1
[i]Type for fee

Name: fee Function: _processFee
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance
done.
clearning node...
clearing ir...?
TMP_393 = CONVERT token_1 to IERC20Upgradeable
has variable
[i] TMP_393 cleared
clearing ir...?
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['TMP_393', 'recipient_1', 'fee_1'] 
typecheckig node...
TMP_393 = CONVERT token_1 to IERC20Upgradeable
Function name: _processFee

Name: token Function: _processFee
Num: -1
Den: -1
Norm: u
LF: REWARD
Fields: 
Finance Type: undef

Name: TMP_393 Function: _processFee
Num: 
Den: 
Norm: u
LF: REWARD
Fields: 
Finance Type: undef
[i]Type for TMP_393

Name: TMP_393 Function: _processFee
Num: -1
Den: -1
Norm: u
LF: REWARD
Fields: 
Finance Type: undef
done.
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['TMP_393', 'recipient_1', 'fee_1'] 
Library Call: safeTransfer
done.
clearning node...
clearing ir...?
RETURN fee_1
typecheckig node...
RETURN fee_1
RETURN

Name: fee Function: _processFee
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: net balance
clearning node...
clearing ir...?
RETURN 0
typecheckig node...
RETURN 0
RETURN
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "_processFee":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _processFee

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
Check copy_toekn_tuple
([-1], [-1], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
[i]Type for TMP_587

Name: TMP_587 Function: _processRewardsFees
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
strategistRewardsFee_1(uint256) := TMP_587(uint256)
Function name: _processRewardsFees
asgn

Name: TMP_587 Function: _processRewardsFees
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: strategistRewardsFee Function: _processRewardsFees
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for strategistRewardsFee

Name: strategistRewardsFee Function: _processRewardsFees
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_processRewardsFees":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _processRewardsFees

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TUPLE_4

Name: TUPLE_4 Function: harvest
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
governancePerformanceFee_1(uint256)= UNPACK TUPLE_4 index: 0 
Function name: harvest
Reading tuple TUPLE_4 index 0
Finding type for governancePerformanceFee...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: governancePerformanceFee Function: harvest
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
[i]Type for governancePerformanceFee

Name: governancePerformanceFee Function: harvest
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
done.
strategistPerformanceFee_1(uint256)= UNPACK TUPLE_4 index: 1 
Function name: harvest
Reading tuple TUPLE_4 index 1
Finding type for strategistPerformanceFee...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: strategistPerformanceFee Function: harvest
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
[i]Type for strategistPerformanceFee

Name: strategistPerformanceFee Function: harvest
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
done.
clearning node...
clearing ir...?
INTERNAL_CALL, MyStrategy._swapcvxCRVToWant()()
typecheckig node...
INTERNAL_CALL, MyStrategy._swapcvxCRVToWant()()
Internal call...
_swapcvxCRVToWant
Function: _swapcvxCRVToWant
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: _swapcvxCRVToWant
Function Visibility: internal
clearning node...
clearing ir...?
reward_11(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
has variable
clearing ir...?
WETH_1(address) := ϕ(['WETH_0', 'WETH_2'])
has variable
clearing ir...?
CVX_18(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
SUSHI_ROUTER_4(address) := ϕ(['SUSHI_ROUTER_0', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
has variable
clearing ir...?
CVX_VAULT_20(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
has variable
typecheckig node...
reward_11(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for reward

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
WETH_1(address) := ϕ(['WETH_0', 'WETH_2'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for WETH

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
done.
CVX_18(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
SUSHI_ROUTER_4(address) := ϕ(['SUSHI_ROUTER_0', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
done.
CVX_VAULT_20(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_566 = CONVERT reward_11 to IERC20Upgradeable
has variable
[i] TMP_566 cleared
clearing ir...?
TMP_567 = CONVERT this to address
has variable
[i] TMP_567 cleared
clearing ir...?
TMP_568(uint256) = HIGH_LEVEL_CALL, dest:TMP_566(IERC20Upgradeable), function:balanceOf, arguments:['TMP_567']  
has variable
[i] TMP_568 cleared
clearing ir...?
reward_12(address) := ϕ(['reward_11', 'reward_12', 'reward_10', 'reward_1'])
has variable
clearing ir...?
WETH_2(address) := ϕ(['WETH_2', 'WETH_1'])
has variable
clearing ir...?
CVX_19(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_18', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
SUSHI_ROUTER_5(address) := ϕ(['SUSHI_ROUTER_4', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
has variable
clearing ir...?
CVX_VAULT_21(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_20', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
toSwap_1(uint256) := TMP_568(uint256)
has variable
[i] toSwap cleared
typecheckig node...
TMP_566 = CONVERT reward_11 to IERC20Upgradeable
Function name: _swapcvxCRVToWant

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef

Name: TMP_566 Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_566

Name: TMP_566 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
TMP_567 = CONVERT this to address
Function name: _swapcvxCRVToWant
[i]Type for TMP_567

Name: TMP_567 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_568(uint256) = HIGH_LEVEL_CALL, dest:TMP_566(IERC20Upgradeable), function:balanceOf, arguments:['TMP_567']  
Function name: _swapcvxCRVToWant
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_568
hlc contract name: REWARD func_name: balanceOf
('c', [1], [-1], 0, None, 0)
TMP_567
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_568

Name: TMP_568 Function: _swapcvxCRVToWant
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
reward_12(address) := ϕ(['reward_11', 'reward_12', 'reward_10', 'reward_1'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for reward

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
WETH_2(address) := ϕ(['WETH_2', 'WETH_1'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for WETH

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
done.
CVX_19(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_18', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
SUSHI_ROUTER_5(address) := ϕ(['SUSHI_ROUTER_4', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
done.
CVX_VAULT_21(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_20', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
toSwap_1(uint256) := TMP_568(uint256)
Function name: _swapcvxCRVToWant
asgn

Name: TMP_568 Function: _swapcvxCRVToWant
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: toSwap Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for toSwap

Name: toSwap Function: _swapcvxCRVToWant
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_569(bool) = toSwap_1 == 0
has variable
[i] TMP_569 cleared
clearing ir...?
CONDITION TMP_569
typecheckig node...
TMP_569(bool) = toSwap_1 == 0
Function name: _swapcvxCRVToWant
[i]Type for TMP_569

Name: TMP_569 Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_569
Condition...
Conidtion: 
TMP_569
TMP_569
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_571 = new address[](3)
clearing ir...?
path_1(address[]) := TMP_571(address)
has variable
[i] path cleared
typecheckig node...
TMP_571 = new address[](3)
[i]Type for TMP_571

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1(address[]) := TMP_571(address)
Function name: _swapcvxCRVToWant
asgn

Name: TMP_571 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
path_1(address[]) := TMP_571(address)
XXXXX
clearning node...
clearing ir...?
REF_138(address) -> path_1[0]
has variable
clearing ir...?
path_2(address[]) := ϕ(['path_1'])
has variable
[i] path cleared
clearing ir...?
REF_138 (->path_2) := reward_12(address)
has variable
typecheckig node...
REF_138(address) -> path_1[0]
Function name: _swapcvxCRVToWant
INDEX

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swapcvxCRVToWant
path
[i]Type for REF_138

Name: path Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_138(address) -> path_1[0]
XXXXX
path_2(address[]) := ϕ(['path_1'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_138 (->path_2) := reward_12(address)
Function name: _swapcvxCRVToWant
asgn

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef

Name: REF_138 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_138

Name: REF_138 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_139(address) -> path_2[1]
has variable
clearing ir...?
path_3(address[]) := ϕ(['path_2'])
has variable
[i] path cleared
clearing ir...?
REF_139 (->path_3) := WETH_2(address)
has variable
typecheckig node...
REF_139(address) -> path_2[1]
Function name: _swapcvxCRVToWant
INDEX

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swapcvxCRVToWant
path
[i]Type for REF_139

Name: path Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_139(address) -> path_2[1]
XXXXX
path_3(address[]) := ϕ(['path_2'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_139 (->path_3) := WETH_2(address)
Function name: _swapcvxCRVToWant
asgn

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef

Name: REF_139 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_139

Name: REF_139 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_140(address) -> path_3[2]
has variable
clearing ir...?
path_4(address[]) := ϕ(['path_3'])
has variable
[i] path cleared
clearing ir...?
REF_140 (->path_4) := CVX_19(address)
has variable
typecheckig node...
REF_140(address) -> path_3[2]
Function name: _swapcvxCRVToWant
INDEX

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swapcvxCRVToWant
path
[i]Type for REF_140

Name: path Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_140(address) -> path_3[2]
XXXXX
path_4(address[]) := ϕ(['path_3'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_140 (->path_4) := CVX_19(address)
Function name: _swapcvxCRVToWant
asgn

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: REF_140 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_140

Name: REF_140 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_572 = CONVERT SUSHI_ROUTER_5 to IUniswapRouterV2
has variable
[i] TMP_572 cleared
clearing ir...?
TMP_573 = CONVERT this to address
has variable
[i] TMP_573 cleared
clearing ir...?
TMP_574(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_572(IUniswapRouterV2), function:swapExactTokensForTokens, arguments:['toSwap_1', '0', 'path_4', 'TMP_573', 'now']  
has variable
[i] TMP_574 cleared
clearing ir...?
CVX_20(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
SUSHI_ROUTER_6(address) := ϕ(['SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
has variable
clearing ir...?
CVX_VAULT_22(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
has variable
typecheckig node...
TMP_572 = CONVERT SUSHI_ROUTER_5 to IUniswapRouterV2
Function name: _swapcvxCRVToWant

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef

Name: TMP_572 Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_572

Name: TMP_572 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
done.
TMP_573 = CONVERT this to address
Function name: _swapcvxCRVToWant
[i]Type for TMP_573

Name: TMP_573 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_574(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_572(IUniswapRouterV2), function:swapExactTokensForTokens, arguments:['toSwap_1', '0', 'path_4', 'TMP_573', 'now']  
Function name: _swapcvxCRVToWant
High Call: swapExactTokensForTokens
func name:swapExactTokensForTokens
other func name:swapExactTokensForTokens
TMP_574
hlc contract name: SUSHI_ROUTER func_name: swapExactTokensForTokens
wfc len: 0
COPIED
[i]Type for TMP_574

Name: TMP_574 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CVX_20(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
SUSHI_ROUTER_6(address) := ϕ(['SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
done.
CVX_VAULT_22(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_575 = CONVERT CVX_20 to IERC20Upgradeable
has variable
[i] TMP_575 cleared
clearing ir...?
TMP_576 = CONVERT this to address
has variable
[i] TMP_576 cleared
clearing ir...?
TMP_577(uint256) = HIGH_LEVEL_CALL, dest:TMP_575(IERC20Upgradeable), function:balanceOf, arguments:['TMP_576']  
has variable
[i] TMP_577 cleared
clearing ir...?
CVX_21(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_20', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
CVX_VAULT_23(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_22', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
toDeposit_1(uint256) := TMP_577(uint256)
has variable
[i] toDeposit cleared
typecheckig node...
TMP_575 = CONVERT CVX_20 to IERC20Upgradeable
Function name: _swapcvxCRVToWant

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: TMP_575 Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_575

Name: TMP_575 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
TMP_576 = CONVERT this to address
Function name: _swapcvxCRVToWant
[i]Type for TMP_576

Name: TMP_576 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_577(uint256) = HIGH_LEVEL_CALL, dest:TMP_575(IERC20Upgradeable), function:balanceOf, arguments:['TMP_576']  
Function name: _swapcvxCRVToWant
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_577
hlc contract name: CVX func_name: balanceOf
('c', [2], [-1], 0, None, 0)
TMP_576
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_577

Name: TMP_577 Function: _swapcvxCRVToWant
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CVX_21(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_20', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
CVX_VAULT_23(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_22', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
toDeposit_1(uint256) := TMP_577(uint256)
Function name: _swapcvxCRVToWant
asgn

Name: TMP_577 Function: _swapcvxCRVToWant
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: toDeposit Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for toDeposit

Name: toDeposit Function: _swapcvxCRVToWant
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_578(bool) = toDeposit_1 > 0
has variable
[i] TMP_578 cleared
clearing ir...?
CONDITION TMP_578
typecheckig node...
TMP_578(bool) = toDeposit_1 > 0
Function name: _swapcvxCRVToWant
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_578

Name: TMP_578 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_578
Condition...
Conidtion: 
TMP_578
TMP_578
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:CVX_VAULT_23(ISettV3), function:deposit, arguments:['toDeposit_1']  
clearing ir...?
CVX_VAULT_24(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:CVX_VAULT_23(ISettV3), function:deposit, arguments:['toDeposit_1']  
High Call: deposit
func name:deposit
other func name:deposit
done.
CVX_VAULT_24(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
WORKLIST iteration 0 for function call "_swapcvxCRVToWant":
 New undefined nodes- 4
 Old undefined nodes- 0
typecheckig node...
reward_11(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for reward

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
WETH_1(address) := ϕ(['WETH_0', 'WETH_2'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for WETH

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
done.
CVX_18(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
SUSHI_ROUTER_4(address) := ϕ(['SUSHI_ROUTER_0', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
done.
CVX_VAULT_20(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_566 = CONVERT reward_11 to IERC20Upgradeable
Function name: _swapcvxCRVToWant

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef

Name: TMP_566 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[i]Type for TMP_566

Name: TMP_566 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
TMP_567 = CONVERT this to address
Function name: _swapcvxCRVToWant
[i]Type for TMP_567

Name: TMP_567 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_568(uint256) = HIGH_LEVEL_CALL, dest:TMP_566(IERC20Upgradeable), function:balanceOf, arguments:['TMP_567']  
Function name: _swapcvxCRVToWant
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_568
hlc contract name: REWARD func_name: balanceOf
('c', [1], [-1], 0, None, 0)
TMP_567
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_568

Name: TMP_568 Function: _swapcvxCRVToWant
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
reward_12(address) := ϕ(['reward_11', 'reward_12', 'reward_10', 'reward_1'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for reward

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
done.
WETH_2(address) := ϕ(['WETH_2', 'WETH_1'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for WETH

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
done.
CVX_19(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_18', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
SUSHI_ROUTER_5(address) := ϕ(['SUSHI_ROUTER_4', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
done.
CVX_VAULT_21(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_20', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
toSwap_1(uint256) := TMP_568(uint256)
Function name: _swapcvxCRVToWant
asgn

Name: TMP_568 Function: _swapcvxCRVToWant
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: toSwap Function: _swapcvxCRVToWant
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for toSwap

Name: toSwap Function: _swapcvxCRVToWant
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
TMP_569(bool) = toSwap_1 == 0
Function name: _swapcvxCRVToWant
[i]Type for TMP_569

Name: TMP_569 Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_569
Condition...
Conidtion: 
TMP_569
TMP_569
typecheckig node...
typecheckig node...
typecheckig node...
TMP_571 = new address[](3)
[i]Type for TMP_571

Name: TMP_571 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
path_1(address[]) := TMP_571(address)
Function name: _swapcvxCRVToWant
asgn

Name: TMP_571 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
path_1(address[]) := TMP_571(address)
XXXXX
typecheckig node...
REF_138(address) -> path_1[0]
Function name: _swapcvxCRVToWant
INDEX

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swapcvxCRVToWant
path
[i]Type for REF_138

Name: path Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_138(address) -> path_1[0]
XXXXX
path_2(address[]) := ϕ(['path_1'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_138 (->path_2) := reward_12(address)
Function name: _swapcvxCRVToWant
asgn

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef

Name: REF_138 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_138

Name: REF_138 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_139(address) -> path_2[1]
Function name: _swapcvxCRVToWant
INDEX

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swapcvxCRVToWant
path
[i]Type for REF_139

Name: path Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_139(address) -> path_2[1]
XXXXX
path_3(address[]) := ϕ(['path_2'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_139 (->path_3) := WETH_2(address)
Function name: _swapcvxCRVToWant
asgn

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef

Name: REF_139 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_139

Name: REF_139 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_140(address) -> path_3[2]
Function name: _swapcvxCRVToWant
INDEX

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: _swapcvxCRVToWant
path
[i]Type for REF_140

Name: path Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_140(address) -> path_3[2]
XXXXX
path_4(address[]) := ϕ(['path_3'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_140 (->path_4) := CVX_19(address)
Function name: _swapcvxCRVToWant
asgn

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: REF_140 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_140

Name: REF_140 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_572 = CONVERT SUSHI_ROUTER_5 to IUniswapRouterV2
Function name: _swapcvxCRVToWant

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef

Name: TMP_572 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[i]Type for TMP_572

Name: TMP_572 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
done.
TMP_573 = CONVERT this to address
Function name: _swapcvxCRVToWant
[i]Type for TMP_573

Name: TMP_573 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_574(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_572(IUniswapRouterV2), function:swapExactTokensForTokens, arguments:['toSwap_1', '0', 'path_4', 'TMP_573', 'now']  
Function name: _swapcvxCRVToWant
High Call: swapExactTokensForTokens
func name:swapExactTokensForTokens
other func name:swapExactTokensForTokens
TMP_574
hlc contract name: SUSHI_ROUTER func_name: swapExactTokensForTokens
wfc len: 0
COPIED
[i]Type for TMP_574

Name: TMP_574 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CVX_20(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
SUSHI_ROUTER_6(address) := ϕ(['SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
done.
CVX_VAULT_22(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_575 = CONVERT CVX_20 to IERC20Upgradeable
Function name: _swapcvxCRVToWant

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: TMP_575 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[i]Type for TMP_575

Name: TMP_575 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
TMP_576 = CONVERT this to address
Function name: _swapcvxCRVToWant
[i]Type for TMP_576

Name: TMP_576 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_577(uint256) = HIGH_LEVEL_CALL, dest:TMP_575(IERC20Upgradeable), function:balanceOf, arguments:['TMP_576']  
Function name: _swapcvxCRVToWant
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_577
hlc contract name: CVX func_name: balanceOf
('c', [2], [-1], 0, None, 0)
TMP_576
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_577

Name: TMP_577 Function: _swapcvxCRVToWant
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CVX_21(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_20', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
CVX_VAULT_23(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_22', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
toDeposit_1(uint256) := TMP_577(uint256)
Function name: _swapcvxCRVToWant
asgn

Name: TMP_577 Function: _swapcvxCRVToWant
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: toDeposit Function: _swapcvxCRVToWant
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for toDeposit

Name: toDeposit Function: _swapcvxCRVToWant
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
typecheckig node...
TMP_578(bool) = toDeposit_1 > 0
Function name: _swapcvxCRVToWant
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_578

Name: TMP_578 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_578
Condition...
Conidtion: 
TMP_578
TMP_578
typecheckig node...
HIGH_LEVEL_CALL, dest:CVX_VAULT_23(ISettV3), function:deposit, arguments:['toDeposit_1']  
High Call: deposit
func name:deposit
other func name:deposit
done.
CVX_VAULT_24(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
Function name: _swapcvxCRVToWant
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
typecheckig node...
WORKLIST iteration 1 for function call "_swapcvxCRVToWant":
 New undefined nodes- 4
 Old undefined nodes- 4
Saving return values for: _swapcvxCRVToWant
done.
This IR caused addback:
INTERNAL_CALL, MyStrategy._swapcvxCRVToWant()()
XXXXX
clearning node...
clearing ir...?
TMP_557 = CONVERT want_34 to IERC20Upgradeable
has variable
[i] TMP_557 cleared
clearing ir...?
TMP_558 = CONVERT this to address
has variable
[i] TMP_558 cleared
clearing ir...?
TMP_559(uint256) = HIGH_LEVEL_CALL, dest:TMP_557(IERC20Upgradeable), function:balanceOf, arguments:['TMP_558']  
has variable
[i] TMP_559 cleared
clearing ir...?
want_35(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_34', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35'])
has variable
clearing ir...?
TMP_560(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['TMP_559', '_before_1'] 
has variable
[i] TMP_560 cleared
clearing ir...?
earned_1(uint256) := TMP_560(uint256)
has variable
[i] earned cleared
typecheckig node...
TMP_557 = CONVERT want_34 to IERC20Upgradeable
Function name: harvest

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef

Name: TMP_557 Function: harvest
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_557

Name: TMP_557 Function: harvest
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
TMP_558 = CONVERT this to address
Function name: harvest
[i]Type for TMP_558

Name: TMP_558 Function: harvest
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_559(uint256) = HIGH_LEVEL_CALL, dest:TMP_557(IERC20Upgradeable), function:balanceOf, arguments:['TMP_558']  
Function name: harvest
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_559
hlc contract name: WANT func_name: balanceOf
('c', [1], [-1], 0, None, 0)
TMP_558
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_559

Name: TMP_559 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
want_35(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_34', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35'])
Function name: harvest
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
TMP_560(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['TMP_559', '_before_1'] 
Function name: harvest
Library Call: sub
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
Func: sub
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: 0, Left type: 0
Final dest type: 0

Name: TMP_559 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: _before Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_559 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_560 Function: harvest
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_560

Name: TMP_560 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
earned_1(uint256) := TMP_560(uint256)
Function name: harvest
asgn

Name: TMP_560 Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: earned Function: harvest
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for earned

Name: earned Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
Emit Harvest(earned_1,block.number)
typecheckig node...
Emit Harvest(earned_1,block.number)
clearning node...
clearing ir...?
RETURN earned_1
typecheckig node...
RETURN earned_1
RETURN

Name: earned Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
WORKLIST iteration 0 for function call "harvest":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: harvest

Name: earned Function: harvest
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
___
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: tend
Function tend not marked
Mark Iterations TRUE, proceeding anyway
Function name: tend
Function Visibility (test): external
clearning node...
typecheckig node...
clearning node...
clearing ir...?
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
typecheckig node...
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Internal call...
whenNotPaused
Function: whenNotPaused
ic
done.
clearning node...
clearing ir...?
INTERNAL_CALL, SettAccessControl._onlyAuthorizedActors()()
typecheckig node...
INTERNAL_CALL, SettAccessControl._onlyAuthorizedActors()()
Internal call...
_onlyAuthorizedActors
Function: _onlyAuthorizedActors
ic
done.
clearning node...
clearing ir...?
TMP_564(None) = SOLIDITY_CALL revert()()
typecheckig node...
TMP_564(None) = SOLIDITY_CALL revert()()
[i]Type for TMP_564

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "tend":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _swapcvxCRVToWant
Function _swapcvxCRVToWant not marked
Mark Iterations TRUE, proceeding anyway
Function name: _swapcvxCRVToWant
Function Visibility (test): internal
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _processPerformanceFees
Function _processPerformanceFees not marked
Mark Iterations TRUE, proceeding anyway
Function name: _processPerformanceFees
Function Visibility (test): internal
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: _processRewardsFees
Function _processRewardsFees not marked
Mark Iterations TRUE, proceeding anyway
Function name: _processRewardsFees
Function Visibility (test): internal
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: reinvest
Function reinvest not marked
Mark Iterations TRUE, proceeding anyway
Function name: reinvest
Function Visibility (test): external
clearning node...
clearing ir...?
CVX_22(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_25(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
processLocksOnReinvest_2(bool) := ϕ(['processLocksOnReinvest_0', 'processLocksOnReinvest_1', 'processLocksOnReinvest_4'])
has variable
typecheckig node...
CVX_22(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: reinvest
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_25(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: reinvest
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
processLocksOnReinvest_2(bool) := ϕ(['processLocksOnReinvest_0', 'processLocksOnReinvest_1', 'processLocksOnReinvest_4'])
Function name: reinvest
Phi
[i]Type for processLocksOnReinvest

Name: processLocksOnReinvest Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
typecheckig node...
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Internal call...
whenNotPaused
Function: whenNotPaused
ic
done.
clearning node...
clearing ir...?
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
typecheckig node...
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Internal call...
_onlyGovernance
Function: _onlyGovernance
ic
done.
clearning node...
clearing ir...?
CONDITION processLocksOnReinvest_4
typecheckig node...
CONDITION processLocksOnReinvest_4
Condition...
Conidtion: 
processLocksOnReinvest_4
processLocksOnReinvest_4
clearning node...
typecheckig node...
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:LOCKER_27(ICvxLocker), function:processExpiredLocks, arguments:['False']  
clearing ir...?
CVX_25(address) := ϕ(['CVX_45', 'CVX_24', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_28(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_27', 'LOCKER_44', 'LOCKER_31'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:LOCKER_27(ICvxLocker), function:processExpiredLocks, arguments:['False']  
High Call: processExpiredLocks
func name:processExpiredLocks
other func name:processExpiredLocks
done.
CVX_25(address) := ϕ(['CVX_45', 'CVX_24', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: reinvest
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_28(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_27', 'LOCKER_44', 'LOCKER_31'])
Function name: reinvest
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_590 = CONVERT CVX_25 to IERC20Upgradeable
has variable
[i] TMP_590 cleared
clearing ir...?
TMP_591 = CONVERT this to address
has variable
[i] TMP_591 cleared
clearing ir...?
TMP_592(uint256) = HIGH_LEVEL_CALL, dest:TMP_590(IERC20Upgradeable), function:balanceOf, arguments:['TMP_591']  
has variable
[i] TMP_592 cleared
clearing ir...?
CVX_26(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_25', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_29(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_28', 'LOCKER_31'])
has variable
clearing ir...?
toDeposit_1(uint256) := TMP_592(uint256)
has variable
[i] toDeposit cleared
typecheckig node...
TMP_590 = CONVERT CVX_25 to IERC20Upgradeable
Function name: reinvest

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: TMP_590 Function: reinvest
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_590

Name: TMP_590 Function: reinvest
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
TMP_591 = CONVERT this to address
Function name: reinvest
[i]Type for TMP_591

Name: TMP_591 Function: reinvest
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_592(uint256) = HIGH_LEVEL_CALL, dest:TMP_590(IERC20Upgradeable), function:balanceOf, arguments:['TMP_591']  
Function name: reinvest
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_592
[i]Type for TMP_592

Name: TMP_592 Function: reinvest
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CVX_26(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_25', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: reinvest
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_29(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_28', 'LOCKER_31'])
Function name: reinvest
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
toDeposit_1(uint256) := TMP_592(uint256)
Function name: reinvest
asgn

Name: TMP_592 Function: reinvest
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: toDeposit Function: reinvest
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for toDeposit

Name: toDeposit Function: reinvest
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_593 = CONVERT this to address
has variable
[i] TMP_593 cleared
clearing ir...?
TMP_594(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_29(ICvxLocker), function:maximumBoostPayment, arguments:[]  
has variable
[i] TMP_594 cleared
clearing ir...?
LOCKER_30(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_29', 'LOCKER_31'])
has variable
clearing ir...?
HIGH_LEVEL_CALL, dest:LOCKER_30(ICvxLocker), function:lock, arguments:['TMP_593', 'toDeposit_1', 'TMP_594']  
clearing ir...?
LOCKER_31(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_30', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
typecheckig node...
TMP_593 = CONVERT this to address
Function name: reinvest
[i]Type for TMP_593

Name: TMP_593 Function: reinvest
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_594(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_29(ICvxLocker), function:maximumBoostPayment, arguments:[]  
Function name: reinvest
High Call: maximumBoostPayment
func name:maximumBoostPayment
other func name:maximumBoostPayment
TMP_594
[i]Type for TMP_594

Name: TMP_594 Function: reinvest
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
LOCKER_30(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_29', 'LOCKER_31'])
Function name: reinvest
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:LOCKER_30(ICvxLocker), function:lock, arguments:['TMP_593', 'toDeposit_1', 'TMP_594']  
High Call: lock
func name:lock
other func name:lock
done.
LOCKER_31(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_30', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: reinvest
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "reinvest":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: manualProcessExpiredLocks
Function manualProcessExpiredLocks not marked
Mark Iterations TRUE, proceeding anyway
Function name: manualProcessExpiredLocks
Function Visibility (test): external
clearning node...
clearing ir...?
LOCKER_32(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
typecheckig node...
LOCKER_32(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: manualProcessExpiredLocks
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
typecheckig node...
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Internal call...
whenNotPaused
Function: whenNotPaused
ic
done.
clearning node...
clearing ir...?
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
typecheckig node...
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Internal call...
_onlyGovernance
Function: _onlyGovernance
ic
done.
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:LOCKER_34(ICvxLocker), function:processExpiredLocks, arguments:['False']  
clearing ir...?
LOCKER_35(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_34', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:LOCKER_34(ICvxLocker), function:processExpiredLocks, arguments:['False']  
High Call: processExpiredLocks
func name:processExpiredLocks
other func name:processExpiredLocks
done.
LOCKER_35(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_34', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: manualProcessExpiredLocks
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "manualProcessExpiredLocks":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: manualDepositCVXIntoVault
Function name: manualDepositCVXIntoVault
Function Visibility (test): external
-100
Add new
clearning node...
clearing ir...?
CVX_27(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
CVX_VAULT_25(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
has variable
typecheckig node...
CVX_27(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: manualDepositCVXIntoVault
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
CVX_VAULT_25(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
Function name: manualDepositCVXIntoVault
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
typecheckig node...
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Internal call...
whenNotPaused
Function: whenNotPaused
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
typecheckig node...
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Internal call...
_onlyGovernance
Function: _onlyGovernance
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
TMP_601 = CONVERT CVX_29 to IERC20Upgradeable
has variable
[i] TMP_601 cleared
clearing ir...?
TMP_602 = CONVERT this to address
has variable
[i] TMP_602 cleared
clearing ir...?
TMP_603(uint256) = HIGH_LEVEL_CALL, dest:TMP_601(IERC20Upgradeable), function:balanceOf, arguments:['TMP_602']  
has variable
[i] TMP_603 cleared
clearing ir...?
CVX_30(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_29', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
CVX_VAULT_28(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_27', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
toDeposit_1(uint256) := TMP_603(uint256)
has variable
[i] toDeposit cleared
typecheckig node...
TMP_601 = CONVERT CVX_29 to IERC20Upgradeable
Function name: manualDepositCVXIntoVault

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: TMP_601 Function: manualDepositCVXIntoVault
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_601

Name: TMP_601 Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
TMP_602 = CONVERT this to address
Function name: manualDepositCVXIntoVault
[i]Type for TMP_602

Name: TMP_602 Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_603(uint256) = HIGH_LEVEL_CALL, dest:TMP_601(IERC20Upgradeable), function:balanceOf, arguments:['TMP_602']  
Function name: manualDepositCVXIntoVault
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_603
hlc contract name: CVX func_name: balanceOf
('c', [2], [-1], 0, None, 0)
TMP_602
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_603

Name: TMP_603 Function: manualDepositCVXIntoVault
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CVX_30(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_29', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: manualDepositCVXIntoVault
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
CVX_VAULT_28(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_27', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: manualDepositCVXIntoVault
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
toDeposit_1(uint256) := TMP_603(uint256)
Function name: manualDepositCVXIntoVault
asgn

Name: TMP_603 Function: manualDepositCVXIntoVault
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: toDeposit Function: manualDepositCVXIntoVault
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for toDeposit

Name: toDeposit Function: manualDepositCVXIntoVault
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_604(bool) = toDeposit_1 > 0
has variable
[i] TMP_604 cleared
clearing ir...?
CONDITION TMP_604
typecheckig node...
TMP_604(bool) = toDeposit_1 > 0
Function name: manualDepositCVXIntoVault
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_604

Name: TMP_604 Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_604
Condition...
Conidtion: 
TMP_604
TMP_604
clearning node...
typecheckig node...
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:CVX_VAULT_28(ISettV3), function:deposit, arguments:['toDeposit_1']  
clearing ir...?
CVX_VAULT_29(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:CVX_VAULT_28(ISettV3), function:deposit, arguments:['toDeposit_1']  
High Call: deposit
func name:deposit
other func name:deposit
done.
CVX_VAULT_29(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
Function name: manualDepositCVXIntoVault
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "manualDepositCVXIntoVault":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: manualDepositCVXIntoVault
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: manualSendbCVXToVault
Function manualSendbCVXToVault not marked
Mark Iterations TRUE, proceeding anyway
Function name: manualSendbCVXToVault
Function Visibility (test): external
clearning node...
clearing ir...?
want_40(address) := ϕ(['want_17', 'want_6', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_2', 'want_0', 'want_25', 'want_39', 'want_22', 'want_35'])
has variable
typecheckig node...
want_40(address) := ϕ(['want_17', 'want_6', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_2', 'want_0', 'want_25', 'want_39', 'want_22', 'want_35'])
Function name: manualSendbCVXToVault
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
typecheckig node...
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Internal call...
whenNotPaused
Function: whenNotPaused
ic
done.
clearning node...
clearing ir...?
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
typecheckig node...
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Internal call...
_onlyGovernance
Function: _onlyGovernance
ic
done.
clearning node...
clearing ir...?
TMP_608 = CONVERT want_42 to IERC20Upgradeable
has variable
[i] TMP_608 cleared
clearing ir...?
TMP_609 = CONVERT this to address
has variable
[i] TMP_609 cleared
clearing ir...?
TMP_610(uint256) = HIGH_LEVEL_CALL, dest:TMP_608(IERC20Upgradeable), function:balanceOf, arguments:['TMP_609']  
has variable
[i] TMP_610 cleared
clearing ir...?
want_43(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_2', 'want_42', 'want_25', 'want_39', 'want_22', 'want_35'])
has variable
clearing ir...?
bCvxAmount_1(uint256) := TMP_610(uint256)
has variable
[i] bCvxAmount cleared
typecheckig node...
TMP_608 = CONVERT want_42 to IERC20Upgradeable
Function name: manualSendbCVXToVault

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef

Name: TMP_608 Function: manualSendbCVXToVault
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_608

Name: TMP_608 Function: manualSendbCVXToVault
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
TMP_609 = CONVERT this to address
Function name: manualSendbCVXToVault
[i]Type for TMP_609

Name: TMP_609 Function: manualSendbCVXToVault
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_610(uint256) = HIGH_LEVEL_CALL, dest:TMP_608(IERC20Upgradeable), function:balanceOf, arguments:['TMP_609']  
Function name: manualSendbCVXToVault
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_610
[i]Type for TMP_610

Name: TMP_610 Function: manualSendbCVXToVault
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
want_43(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_2', 'want_42', 'want_25', 'want_39', 'want_22', 'want_35'])
Function name: manualSendbCVXToVault
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
bCvxAmount_1(uint256) := TMP_610(uint256)
Function name: manualSendbCVXToVault
asgn

Name: TMP_610 Function: manualSendbCVXToVault
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: bCvxAmount Function: manualSendbCVXToVault
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for bCvxAmount

Name: bCvxAmount Function: manualSendbCVXToVault
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, BaseStrategy._transferToVault(uint256)(bCvxAmount_1)
typecheckig node...
INTERNAL_CALL, BaseStrategy._transferToVault(uint256)(bCvxAmount_1)
Internal call...
_transferToVault
bCvxAmount
Function: _transferToVault
ic
done.
WORKLIST iteration 0 for function call "manualSendbCVXToVault":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: manualRebalance
Function name: manualRebalance
Function Visibility (test): external
toLock
Finding type for toLock...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: toLock Function: manualRebalance
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
want_44(address) := ϕ(['want_17', 'want_6', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_2', 'want_0', 'want_25', 'want_39', 'want_22', 'want_35'])
has variable
clearing ir...?
MAX_BPS_4(uint256) := ϕ(['MAX_BPS_2', 'MAX_BPS_12', 'MAX_BPS_3', 'MAX_BPS_0'])
has variable
clearing ir...?
CVX_31(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_36(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
CVX_VAULT_30(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
has variable
clearing ir...?
harvestOnRebalance_2(bool) := ϕ(['harvestOnRebalance_4', 'harvestOnRebalance_0', 'harvestOnRebalance_1', 'harvestOnRebalance_5'])
has variable
clearing ir...?
processLocksOnRebalance_2(bool) := ϕ(['processLocksOnRebalance_0', 'processLocksOnRebalance_1', 'processLocksOnRebalance_4'])
has variable
typecheckig node...
want_44(address) := ϕ(['want_17', 'want_6', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_2', 'want_0', 'want_25', 'want_39', 'want_22', 'want_35'])
Function name: manualRebalance
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
MAX_BPS_4(uint256) := ϕ(['MAX_BPS_2', 'MAX_BPS_12', 'MAX_BPS_3', 'MAX_BPS_0'])
Function name: manualRebalance
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
CVX_31(address) := ϕ(['CVX_0', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: manualRebalance
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_36(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: manualRebalance
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_30(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_0'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
harvestOnRebalance_2(bool) := ϕ(['harvestOnRebalance_4', 'harvestOnRebalance_0', 'harvestOnRebalance_1', 'harvestOnRebalance_5'])
Function name: manualRebalance
Phi
[i]Type for harvestOnRebalance

Name: harvestOnRebalance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
processLocksOnRebalance_2(bool) := ϕ(['processLocksOnRebalance_0', 'processLocksOnRebalance_1', 'processLocksOnRebalance_4'])
Function name: manualRebalance
Phi
[i]Type for processLocksOnRebalance

Name: processLocksOnRebalance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
typecheckig node...
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Internal call...
whenNotPaused
Function: whenNotPaused
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
typecheckig node...
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Internal call...
_onlyGovernance
Function: _onlyGovernance
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0
done.
clearning node...
clearing ir...?
TMP_614(bool) = toLock_1 <= MAX_BPS_6
has variable
[i] TMP_614 cleared
clearing ir...?
TMP_615(None) = SOLIDITY_CALL require(bool,string)(TMP_614,Max is 100%)
typecheckig node...
TMP_614(bool) = toLock_1 <= MAX_BPS_6
Function name: manualRebalance
testing lt...
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_614

Name: TMP_614 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_615(None) = SOLIDITY_CALL require(bool,string)(TMP_614,Max is 100%)
[i]Type for TMP_615

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
CONDITION processLocksOnRebalance_4
typecheckig node...
CONDITION processLocksOnRebalance_4
Condition...
Conidtion: 
processLocksOnRebalance_4
processLocksOnRebalance_4
clearning node...
typecheckig node...
clearning node...
clearing ir...?
CONDITION harvestOnRebalance_5
typecheckig node...
CONDITION harvestOnRebalance_5
Condition...
Conidtion: 
harvestOnRebalance_5
harvestOnRebalance_5
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_617(uint256) = INTERNAL_CALL, MyStrategy.harvest()()
has variable
[i] TMP_617 cleared
clearing ir...?
want_48(address) := ϕ(['want_35'])
has variable
clearing ir...?
LOCKER_40(ICvxLocker) := ϕ(['LOCKER_24'])
has variable
typecheckig node...
TMP_617(uint256) = INTERNAL_CALL, MyStrategy.harvest()()
Function name: manualRebalance
Internal call...
harvest
Function: harvest
ic
Internal cal param_cache
Its the same:
0
Parameter length: 1
0

Name: PIC_16 Function: None
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_617 Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_617

Name: TMP_617 Function: manualRebalance
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
want_48(address) := ϕ(['want_35'])
Function name: manualRebalance
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
LOCKER_40(ICvxLocker) := ϕ(['LOCKER_24'])
Function name: manualRebalance
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:LOCKER_38(ICvxLocker), function:processExpiredLocks, arguments:['False']  
clearing ir...?
want_47(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_46', 'want_43', 'want_49', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35'])
has variable
clearing ir...?
MAX_BPS_7(uint256) := ϕ(['MAX_BPS_2', 'MAX_BPS_12', 'MAX_BPS_6', 'MAX_BPS_3'])
has variable
clearing ir...?
CVX_34(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_33', 'CVX_9'])
has variable
clearing ir...?
LOCKER_39(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_38', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
CVX_VAULT_33(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_32', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
harvestOnRebalance_5(bool) := ϕ(['harvestOnRebalance_5', 'harvestOnRebalance_1', 'harvestOnRebalance_4'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:LOCKER_38(ICvxLocker), function:processExpiredLocks, arguments:['False']  
High Call: processExpiredLocks
func name:processExpiredLocks
other func name:processExpiredLocks
done.
want_47(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_46', 'want_43', 'want_49', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35'])
Function name: manualRebalance
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
MAX_BPS_7(uint256) := ϕ(['MAX_BPS_2', 'MAX_BPS_12', 'MAX_BPS_6', 'MAX_BPS_3'])
Function name: manualRebalance
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
CVX_34(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_33', 'CVX_9'])
Function name: manualRebalance
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_39(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_38', 'LOCKER_44', 'LOCKER_31'])
Function name: manualRebalance
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_33(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_32', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
harvestOnRebalance_5(bool) := ϕ(['harvestOnRebalance_5', 'harvestOnRebalance_1', 'harvestOnRebalance_4'])
Function name: manualRebalance
Phi
[i]Type for harvestOnRebalance

Name: harvestOnRebalance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_618 = CONVERT want_48 to IERC20Upgradeable
has variable
[i] TMP_618 cleared
clearing ir...?
TMP_619 = CONVERT this to address
has variable
[i] TMP_619 cleared
clearing ir...?
TMP_620(uint256) = HIGH_LEVEL_CALL, dest:TMP_618(IERC20Upgradeable), function:balanceOf, arguments:['TMP_619']  
has variable
[i] TMP_620 cleared
clearing ir...?
want_49(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_48', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35'])
has variable
clearing ir...?
MAX_BPS_9(uint256) := ϕ(['MAX_BPS_2', 'MAX_BPS_12', 'MAX_BPS_8', 'MAX_BPS_3'])
has variable
clearing ir...?
CVX_36(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_35', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_41(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_40', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
CVX_VAULT_35(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_34', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
balanceOfWant_1(uint256) := TMP_620(uint256)
has variable
[i] balanceOfWant cleared
typecheckig node...
TMP_618 = CONVERT want_48 to IERC20Upgradeable
Function name: manualRebalance

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef

Name: TMP_618 Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_618

Name: TMP_618 Function: manualRebalance
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
TMP_619 = CONVERT this to address
Function name: manualRebalance
[i]Type for TMP_619

Name: TMP_619 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_620(uint256) = HIGH_LEVEL_CALL, dest:TMP_618(IERC20Upgradeable), function:balanceOf, arguments:['TMP_619']  
Function name: manualRebalance
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_620
hlc contract name: WANT func_name: balanceOf
('c', [1], [-1], 0, None, 0)
TMP_619
wfc len: 1
Check copy_toekn_tuple
([1], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_620

Name: TMP_620 Function: manualRebalance
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
want_49(address) := ϕ(['want_6', 'want_17', 'want_12', 'want_19', 'want_43', 'want_49', 'want_21', 'want_48', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35'])
Function name: manualRebalance
Phi
[i]Type for want

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
done.
MAX_BPS_9(uint256) := ϕ(['MAX_BPS_2', 'MAX_BPS_12', 'MAX_BPS_8', 'MAX_BPS_3'])
Function name: manualRebalance
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
CVX_36(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_35', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: manualRebalance
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_41(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_40', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: manualRebalance
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_35(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_34', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
balanceOfWant_1(uint256) := TMP_620(uint256)
Function name: manualRebalance
asgn

Name: TMP_620 Function: manualRebalance
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: balanceOfWant Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for balanceOfWant

Name: balanceOfWant Function: manualRebalance
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_621 = CONVERT CVX_36 to IERC20Upgradeable
has variable
[i] TMP_621 cleared
clearing ir...?
TMP_622 = CONVERT this to address
has variable
[i] TMP_622 cleared
clearing ir...?
TMP_623(uint256) = HIGH_LEVEL_CALL, dest:TMP_621(IERC20Upgradeable), function:balanceOf, arguments:['TMP_622']  
has variable
[i] TMP_623 cleared
clearing ir...?
MAX_BPS_10(uint256) := ϕ(['MAX_BPS_2', 'MAX_BPS_9', 'MAX_BPS_12', 'MAX_BPS_3'])
has variable
clearing ir...?
CVX_37(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_36', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_42(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31', 'LOCKER_41'])
has variable
clearing ir...?
CVX_VAULT_36(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_35', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
balanceOfCVX_1(uint256) := TMP_623(uint256)
has variable
[i] balanceOfCVX cleared
typecheckig node...
TMP_621 = CONVERT CVX_36 to IERC20Upgradeable
Function name: manualRebalance

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: TMP_621 Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_621

Name: TMP_621 Function: manualRebalance
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
TMP_622 = CONVERT this to address
Function name: manualRebalance
[i]Type for TMP_622

Name: TMP_622 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_623(uint256) = HIGH_LEVEL_CALL, dest:TMP_621(IERC20Upgradeable), function:balanceOf, arguments:['TMP_622']  
Function name: manualRebalance
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_623
hlc contract name: CVX func_name: balanceOf
('c', [2], [-1], 0, None, 0)
TMP_622
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_623

Name: TMP_623 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
MAX_BPS_10(uint256) := ϕ(['MAX_BPS_2', 'MAX_BPS_9', 'MAX_BPS_12', 'MAX_BPS_3'])
Function name: manualRebalance
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
CVX_37(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_36', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: manualRebalance
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_42(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31', 'LOCKER_41'])
Function name: manualRebalance
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_36(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_35', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
balanceOfCVX_1(uint256) := TMP_623(uint256)
Function name: manualRebalance
asgn

Name: TMP_623 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: balanceOfCVX Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for balanceOfCVX

Name: balanceOfCVX Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_624 = CONVERT this to address
has variable
[i] TMP_624 cleared
clearing ir...?
TMP_625(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_42(ICvxLocker), function:balanceOf, arguments:['TMP_624']  
has variable
[i] TMP_625 cleared
clearing ir...?
MAX_BPS_11(uint256) := ϕ(['MAX_BPS_2', 'MAX_BPS_12', 'MAX_BPS_10', 'MAX_BPS_3'])
has variable
clearing ir...?
CVX_38(address) := ϕ(['CVX_45', 'CVX_37', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_43(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_42', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
CVX_VAULT_37(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_36', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
balanceInLock_1(uint256) := TMP_625(uint256)
has variable
[i] balanceInLock cleared
typecheckig node...
TMP_624 = CONVERT this to address
Function name: manualRebalance
[i]Type for TMP_624

Name: TMP_624 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_625(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_42(ICvxLocker), function:balanceOf, arguments:['TMP_624']  
Function name: manualRebalance
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_625
hlc contract name: LOCKER func_name: balanceOf
('c', [2], [-1], 0, None, 0)
TMP_624
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_625

Name: TMP_625 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
MAX_BPS_11(uint256) := ϕ(['MAX_BPS_2', 'MAX_BPS_12', 'MAX_BPS_10', 'MAX_BPS_3'])
Function name: manualRebalance
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
CVX_38(address) := ϕ(['CVX_45', 'CVX_37', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: manualRebalance
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_43(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_42', 'LOCKER_44', 'LOCKER_31'])
Function name: manualRebalance
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_37(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_36', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
balanceInLock_1(uint256) := TMP_625(uint256)
Function name: manualRebalance
asgn

Name: TMP_625 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: balanceInLock Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for balanceInLock

Name: balanceInLock Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_626(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['balanceOfCVX_1', 'balanceInLock_1'] 
has variable
[i] TMP_626 cleared
clearing ir...?
TMP_627(uint256) = INTERNAL_CALL, MyStrategy.wantToCVX(uint256)(balanceOfWant_1)
has variable
[i] TMP_627 cleared
clearing ir...?
CVX_VAULT_38(ISettV3) := ϕ(['CVX_VAULT_7'])
has variable
clearing ir...?
TMP_628(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['TMP_626', 'TMP_627'] 
has variable
[i] TMP_628 cleared
clearing ir...?
totalCVXBalance_1(uint256) := TMP_628(uint256)
has variable
[i] totalCVXBalance cleared
typecheckig node...
TMP_626(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['balanceOfCVX_1', 'balanceInLock_1'] 
Function name: manualRebalance
Library Call: add

Name: TMP_626 Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
Func: add
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: 0, Left type: 0
Final dest type: 0

Name: balanceOfCVX Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_626 Function: manualRebalance
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_626

Name: TMP_626 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_627(uint256) = INTERNAL_CALL, MyStrategy.wantToCVX(uint256)(balanceOfWant_1)
Function name: manualRebalance
Internal call...
wantToCVX
balanceOfWant
Function: wantToCVX
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
cur_param: [[1], [-1], 0, None, [], 0]
Its the same:
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: 0
0
Parameter length: 1
[[1], [-1], 0, None, [], 0]
0

Name: PIC_4 Function: None
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_627 Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_627

Name: TMP_627 Function: manualRebalance
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CVX_VAULT_38(ISettV3) := ϕ(['CVX_VAULT_7'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
TMP_628(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['TMP_626', 'TMP_627'] 
Function name: manualRebalance
Library Call: add

Name: TMP_628 Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: u
Finance type key: (0, 0)
Func: add
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: 0, Left type: 0
Final dest type: 0

Name: TMP_626 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_628 Function: manualRebalance
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_628

Name: TMP_628 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
totalCVXBalance_1(uint256) := TMP_628(uint256)
Function name: manualRebalance
asgn

Name: TMP_628 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: totalCVXBalance Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for totalCVXBalance

Name: totalCVXBalance Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_629(uint256) = 10 ** 18
has variable
[i] TMP_629 cleared
clearing ir...?
TMP_630(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balanceInLock_1', 'TMP_629'] 
has variable
[i] TMP_630 cleared
clearing ir...?
TMP_631(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_630', 'totalCVXBalance_1'] 
has variable
[i] TMP_631 cleared
clearing ir...?
currentLockRatio_1(uint256) := TMP_631(uint256)
has variable
[i] currentLockRatio cleared
typecheckig node...
TMP_629(uint256) = 10 ** 18
Function name: manualRebalance
val: 10
1
val: 18

Name: 10 Function: None
Num: -1
Den: -1
Norm: 1
LF: None
Fields: 
Finance Type: undef

Name: 18 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_629 Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
x:u
18
val: 10
1
[i]Type for TMP_629

Name: TMP_629 Function: manualRebalance
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_630(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balanceInLock_1', 'TMP_629'] 
Function name: manualRebalance
Library Call: mul
testing mul...
lnorm: 0 rnorm: 18
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: balanceInLock Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_630 Function: manualRebalance
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_630

Name: TMP_630 Function: manualRebalance
Num: 2
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_631(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_630', 'totalCVXBalance_1'] 
Function name: manualRebalance
Library Call: div
lnorm: 18 rnorm: 0
Finance type key: (0, 0)
Func: div
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: 0, Left type: 0
Final dest type: 0

Name: TMP_631 Function: manualRebalance
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: raw balance

Name: PIC_18 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_631 Function: manualRebalance
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_631

Name: TMP_631 Function: manualRebalance
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: raw balance
done.
currentLockRatio_1(uint256) := TMP_631(uint256)
Function name: manualRebalance
asgn

Name: TMP_631 Function: manualRebalance
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: raw balance

Name: currentLockRatio Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for currentLockRatio

Name: currentLockRatio Function: manualRebalance
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_632(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['totalCVXBalance_1', 'toLock_1'] 
has variable
[i] TMP_632 cleared
clearing ir...?
TMP_633(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_632', 'MAX_BPS_12'] 
has variable
[i] TMP_633 cleared
clearing ir...?
newLockRatio_1(uint256) := TMP_633(uint256)
has variable
[i] newLockRatio cleared
typecheckig node...
TMP_632(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['totalCVXBalance_1', 'toLock_1'] 
Function name: manualRebalance
Library Call: mul
testing mul...
lnorm: 0 rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: totalCVXBalance Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_632 Function: manualRebalance
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_632

Name: TMP_632 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_633(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_632', 'MAX_BPS_12'] 
Function name: manualRebalance
Library Call: div
lnorm: 0 rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: TMP_633 Function: manualRebalance
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_632 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_633 Function: manualRebalance
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_633

Name: TMP_633 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
newLockRatio_1(uint256) := TMP_633(uint256)
Function name: manualRebalance
asgn

Name: TMP_633 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: newLockRatio Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for newLockRatio

Name: newLockRatio Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_634(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['MAX_BPS_12', 'toLock_1'] 
has variable
[i] TMP_634 cleared
clearing ir...?
TMP_635(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['totalCVXBalance_1', 'TMP_634'] 
has variable
[i] TMP_635 cleared
clearing ir...?
TMP_636(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_635', 'MAX_BPS_12'] 
has variable
[i] TMP_636 cleared
clearing ir...?
toWantRatio_1(uint256) := TMP_636(uint256)
has variable
[i] toWantRatio cleared
typecheckig node...
TMP_634(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['MAX_BPS_12', 'toLock_1'] 
Function name: manualRebalance
Library Call: sub
lnorm: 0 rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: toLock Function: manualRebalance
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: toLock Function: manualRebalance
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_634 Function: manualRebalance
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_634

Name: TMP_634 Function: manualRebalance
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_635(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['totalCVXBalance_1', 'TMP_634'] 
Function name: manualRebalance
Library Call: mul
testing mul...
lnorm: 0 rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: totalCVXBalance Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_635 Function: manualRebalance
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_635

Name: TMP_635 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
TMP_636(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_635', 'MAX_BPS_12'] 
Function name: manualRebalance
Library Call: div
lnorm: 0 rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: TMP_636 Function: manualRebalance
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_635 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_636 Function: manualRebalance
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_636

Name: TMP_636 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
toWantRatio_1(uint256) := TMP_636(uint256)
Function name: manualRebalance
asgn

Name: TMP_636 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: toWantRatio Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for toWantRatio

Name: toWantRatio Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_637(bool) = newLockRatio_1 <= currentLockRatio_1
has variable
[i] TMP_637 cleared
clearing ir...?
CONDITION TMP_637
typecheckig node...
TMP_637(bool) = newLockRatio_1 <= currentLockRatio_1
Function name: manualRebalance
testing lt...
Error with TMP_637 in function manualRebalance
Error with: TMP_637 in function manualRebalance
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fca1064d190>]
lnorm: 0 rnorm: 18
Finance type key: (0, 0)
Func: compare
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: 0, Left type: 0
Final dest type: -1
[i]Type for TMP_637

Name: TMP_637 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_637
Condition...
Conidtion: 
TMP_637
TMP_637
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_638 = CONVERT CVX_39 to IERC20Upgradeable
has variable
[i] TMP_638 cleared
clearing ir...?
TMP_639 = CONVERT this to address
has variable
[i] TMP_639 cleared
clearing ir...?
TMP_640(uint256) = HIGH_LEVEL_CALL, dest:TMP_638(IERC20Upgradeable), function:balanceOf, arguments:['TMP_639']  
has variable
[i] TMP_640 cleared
clearing ir...?
CVX_46(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
CVX_VAULT_46(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
has variable
clearing ir...?
toDeposit_1(uint256) := TMP_640(uint256)
has variable
[i] toDeposit cleared
typecheckig node...
TMP_638 = CONVERT CVX_39 to IERC20Upgradeable
Function name: manualRebalance

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: TMP_638 Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_638

Name: TMP_638 Function: manualRebalance
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
TMP_639 = CONVERT this to address
Function name: manualRebalance
[i]Type for TMP_639

Name: TMP_639 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_640(uint256) = HIGH_LEVEL_CALL, dest:TMP_638(IERC20Upgradeable), function:balanceOf, arguments:['TMP_639']  
Function name: manualRebalance
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_640
hlc contract name: CVX func_name: balanceOf
('c', [2], [-1], 0, None, 0)
TMP_639
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_640

Name: TMP_640 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CVX_46(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: manualRebalance
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
CVX_VAULT_46(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
toDeposit_1(uint256) := TMP_640(uint256)
Function name: manualRebalance
asgn

Name: TMP_640 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: toDeposit Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for toDeposit

Name: toDeposit Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_643(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['newLockRatio_1', 'currentLockRatio_1'] 
has variable
[i] TMP_643 cleared
clearing ir...?
cvxToLock_1(uint256) := TMP_643(uint256)
has variable
[i] cvxToLock cleared
typecheckig node...
TMP_643(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['newLockRatio_1', 'currentLockRatio_1'] 
Function name: manualRebalance
Library Call: sub
Error with TMP_643 in function manualRebalance
Error with: TMP_643 in function manualRebalance
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fca1064d190>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fca1064d460>]
lnorm: 0 rnorm: 18
Finance type key: (0, 0)
Func: sub
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: 0, Left type: 0
Final dest type: 0

Name: newLockRatio Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: currentLockRatio Function: manualRebalance
Num: -1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: raw balance

Name: newLockRatio Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: TMP_643 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
[i]Type for TMP_643

Name: TMP_643 Function: manualRebalance
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
cvxToLock_1(uint256) := TMP_643(uint256)
Function name: manualRebalance
asgn

Name: TMP_643 Function: manualRebalance
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance

Name: cvxToLock Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for cvxToLock

Name: cvxToLock Function: manualRebalance
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_644 = CONVERT CVX_39 to IERC20Upgradeable
has variable
[i] TMP_644 cleared
clearing ir...?
TMP_645 = CONVERT this to address
has variable
[i] TMP_645 cleared
clearing ir...?
TMP_646(uint256) = HIGH_LEVEL_CALL, dest:TMP_644(IERC20Upgradeable), function:balanceOf, arguments:['TMP_645']  
has variable
[i] TMP_646 cleared
clearing ir...?
CVX_40(address) := ϕ(['CVX_45', 'CVX_39', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_45(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
CVX_VAULT_39(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_38', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
maxCVX_1(uint256) := TMP_646(uint256)
has variable
[i] maxCVX cleared
typecheckig node...
TMP_644 = CONVERT CVX_39 to IERC20Upgradeable
Function name: manualRebalance

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: TMP_644 Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_644

Name: TMP_644 Function: manualRebalance
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
TMP_645 = CONVERT this to address
Function name: manualRebalance
[i]Type for TMP_645

Name: TMP_645 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_646(uint256) = HIGH_LEVEL_CALL, dest:TMP_644(IERC20Upgradeable), function:balanceOf, arguments:['TMP_645']  
Function name: manualRebalance
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_646
hlc contract name: CVX func_name: balanceOf
('c', [2], [-1], 0, None, 0)
TMP_645
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_646

Name: TMP_646 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CVX_40(address) := ϕ(['CVX_45', 'CVX_39', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: manualRebalance
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_45(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: manualRebalance
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_39(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_38', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
maxCVX_1(uint256) := TMP_646(uint256)
Function name: manualRebalance
asgn

Name: TMP_646 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: maxCVX Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for maxCVX

Name: maxCVX Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
clearing ir...?
TMP_647(bool) = cvxToLock_1 > maxCVX_1
has variable
[i] TMP_647 cleared
clearing ir...?
CONDITION TMP_647
typecheckig node...
TMP_647(bool) = cvxToLock_1 > maxCVX_1
Function name: manualRebalance
testing gt...
lnorm: u rnorm: 0
Finance type key: (0, 0)
Func: compare
Dest type: -1, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: 0, Left type: 0
Final dest type: -1

Name: maxCVX Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
False
[i]Type for TMP_647

Name: TMP_647 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_647
Condition...
Conidtion: 
TMP_647
TMP_647
clearning node...
clearing ir...?
TMP_641(bool) = toDeposit_1 > 0
has variable
[i] TMP_641 cleared
clearing ir...?
CONDITION TMP_641
typecheckig node...
TMP_641(bool) = toDeposit_1 > 0
Function name: manualRebalance
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_641

Name: TMP_641 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_641
Condition...
Conidtion: 
TMP_641
TMP_641
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:CVX_VAULT_46(ISettV3), function:deposit, arguments:['toDeposit_1']  
clearing ir...?
CVX_VAULT_47(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:CVX_VAULT_46(ISettV3), function:deposit, arguments:['toDeposit_1']  
High Call: deposit
func name:deposit
other func name:deposit
done.
CVX_VAULT_47(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_651 = CONVERT this to address
has variable
[i] TMP_651 cleared
clearing ir...?
TMP_652(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_45(ICvxLocker), function:maximumBoostPayment, arguments:[]  
has variable
[i] TMP_652 cleared
clearing ir...?
CVX_41(address) := ϕ(['CVX_45', 'CVX_40', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_46(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_45', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
CVX_VAULT_40(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_39', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
HIGH_LEVEL_CALL, dest:LOCKER_46(ICvxLocker), function:lock, arguments:['TMP_651', 'cvxToLock_1', 'TMP_652']  
clearing ir...?
CVX_42(address) := ϕ(['CVX_41', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_47(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_46', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
CVX_VAULT_41(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_40', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
typecheckig node...
TMP_651 = CONVERT this to address
Function name: manualRebalance
[i]Type for TMP_651

Name: TMP_651 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_652(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_45(ICvxLocker), function:maximumBoostPayment, arguments:[]  
Function name: manualRebalance
High Call: maximumBoostPayment
func name:maximumBoostPayment
other func name:maximumBoostPayment
TMP_652
hlc contract name: LOCKER func_name: maximumBoostPayment
wfc len: 0
COPIED
[i]Type for TMP_652

Name: TMP_652 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CVX_41(address) := ϕ(['CVX_45', 'CVX_40', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: manualRebalance
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_46(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_45', 'LOCKER_44', 'LOCKER_31'])
Function name: manualRebalance
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_40(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_39', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:LOCKER_46(ICvxLocker), function:lock, arguments:['TMP_651', 'cvxToLock_1', 'TMP_652']  
High Call: lock
func name:lock
other func name:lock
done.
CVX_42(address) := ϕ(['CVX_41', 'CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: manualRebalance
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_47(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_46', 'LOCKER_44', 'LOCKER_31'])
Function name: manualRebalance
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_41(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_40', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_648 = CONVERT this to address
has variable
[i] TMP_648 cleared
clearing ir...?
TMP_649(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_45(ICvxLocker), function:maximumBoostPayment, arguments:[]  
has variable
[i] TMP_649 cleared
clearing ir...?
CVX_43(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_42', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_48(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
CVX_VAULT_42(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_41', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
HIGH_LEVEL_CALL, dest:LOCKER_48(ICvxLocker), function:lock, arguments:['TMP_648', 'maxCVX_1', 'TMP_649']  
clearing ir...?
CVX_44(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_43', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
LOCKER_49(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_48', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
has variable
clearing ir...?
CVX_VAULT_43(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_42', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
typecheckig node...
TMP_648 = CONVERT this to address
Function name: manualRebalance
[i]Type for TMP_648

Name: TMP_648 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_649(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_45(ICvxLocker), function:maximumBoostPayment, arguments:[]  
Function name: manualRebalance
High Call: maximumBoostPayment
func name:maximumBoostPayment
other func name:maximumBoostPayment
TMP_649
hlc contract name: LOCKER func_name: maximumBoostPayment
wfc len: 0
COPIED
[i]Type for TMP_649

Name: TMP_649 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CVX_43(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_42', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: manualRebalance
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_48(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: manualRebalance
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_42(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_41', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
HIGH_LEVEL_CALL, dest:LOCKER_48(ICvxLocker), function:lock, arguments:['TMP_648', 'maxCVX_1', 'TMP_649']  
High Call: lock
func name:lock
other func name:lock
done.
CVX_44(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_43', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: manualRebalance
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
LOCKER_49(ICvxLocker) := ϕ(['LOCKER_35', 'LOCKER_49', 'LOCKER_48', 'LOCKER_1', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_15', 'LOCKER_24', 'LOCKER_44', 'LOCKER_31'])
Function name: manualRebalance
Phi
[i]Type for LOCKER

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
done.
CVX_VAULT_43(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_42', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
clearning node...
typecheckig node...
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_654 = CONVERT CVX_44 to IERC20Upgradeable
has variable
[i] TMP_654 cleared
clearing ir...?
TMP_655 = CONVERT this to address
has variable
[i] TMP_655 cleared
clearing ir...?
TMP_656(uint256) = HIGH_LEVEL_CALL, dest:TMP_654(IERC20Upgradeable), function:balanceOf, arguments:['TMP_655']  
has variable
[i] TMP_656 cleared
clearing ir...?
CVX_45(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_44', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
has variable
clearing ir...?
CVX_VAULT_44(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_43', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
has variable
clearing ir...?
cvxLeft_1(uint256) := TMP_656(uint256)
has variable
[i] cvxLeft cleared
typecheckig node...
TMP_654 = CONVERT CVX_44 to IERC20Upgradeable
Function name: manualRebalance

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef

Name: TMP_654 Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_654

Name: TMP_654 Function: manualRebalance
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
TMP_655 = CONVERT this to address
Function name: manualRebalance
[i]Type for TMP_655

Name: TMP_655 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: MyStrategy
Fields: 
Finance Type: undef
done.
TMP_656(uint256) = HIGH_LEVEL_CALL, dest:TMP_654(IERC20Upgradeable), function:balanceOf, arguments:['TMP_655']  
Function name: manualRebalance
High Call: balanceOf
func name:balanceOf
other func name:balanceOf
TMP_656
hlc contract name: CVX func_name: balanceOf
('c', [2], [-1], 0, None, 0)
TMP_655
wfc len: 1
Check copy_toekn_tuple
([2], [-1], 0, None, 0)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_656

Name: TMP_656 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
CVX_45(address) := ϕ(['CVX_45', 'CVX_21', 'CVX_26', 'CVX_30', 'CVX_44', 'CVX_3', 'CVX_17', 'CVX_13', 'CVX_46', 'CVX_19', 'CVX_9'])
Function name: manualRebalance
Phi
[i]Type for CVX

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
done.
CVX_VAULT_44(ISettV3) := ϕ(['CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_43', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
cvxLeft_1(uint256) := TMP_656(uint256)
Function name: manualRebalance
asgn

Name: TMP_656 Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance

Name: cvxLeft Function: manualRebalance
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (0, -1)
Func: assign
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0
[i]Type for cvxLeft

Name: cvxLeft Function: manualRebalance
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: raw balance
done.
clearning node...
typecheckig node...
clearning node...
clearing ir...?
TMP_657(bool) = cvxLeft_1 > 0
has variable
[i] TMP_657 cleared
clearing ir...?
CONDITION TMP_657
typecheckig node...
TMP_657(bool) = cvxLeft_1 > 0
Function name: manualRebalance
testing gt...
val: 0
val: 0
lnorm: 0 rnorm: 0
Dest type: 0, Update_ratios: {10: -1, 12: False, 20: -1, 21: -1}
Right type: -1, Left type: 0
Final dest type: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_657

Name: TMP_657 Function: manualRebalance
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: raw balance
done.
CONDITION TMP_657
Condition...
Conidtion: 
TMP_657
TMP_657
clearning node...
typecheckig node...
clearning node...
clearing ir...?
HIGH_LEVEL_CALL, dest:CVX_VAULT_44(ISettV3), function:deposit, arguments:['cvxLeft_1']  
clearing ir...?
CVX_VAULT_45(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
has variable
typecheckig node...
HIGH_LEVEL_CALL, dest:CVX_VAULT_44(ISettV3), function:deposit, arguments:['cvxLeft_1']  
High Call: deposit
func name:deposit
other func name:deposit
done.
CVX_VAULT_45(ISettV3) := ϕ(['CVX_VAULT_21', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_15', 'CVX_VAULT_19', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_24', 'CVX_VAULT_11', 'CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_44', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_18'])
Function name: manualRebalance
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "manualRebalance":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: manualRebalance
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: slitherConstructorVariables
Function slitherConstructorVariables not marked
Mark Iterations TRUE, proceeding anyway
Function name: slitherConstructorVariables
Function Visibility (test): internal
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: slitherConstructorConstantVariables
Function slitherConstructorConstantVariables not marked
Mark Iterations TRUE, proceeding anyway
Function name: slitherConstructorConstantVariables
Function Visibility (test): internal
State_var: MAX_FEE
Finding type for MAX_FEE...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_FEE Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: LOCKER
Finding type for LOCKER...
ICvxLocker
Check copy_toekn_tuple
(-1, -1, 0, 'LOCKER', -1)
----
Type: ICvxLocker
ICvxLocker
Final Type: ICvxLocker
 NO FIELDS

Name: LOCKER Function: global
Num: -1
Den: -1
Norm: 0
LF: LOCKER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: uniswap
Finding type for uniswap...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: uniswap Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: CVX
Finding type for CVX...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CVX', -1)
----
Type: address
address
Final Type: address

Name: CVX Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: processLocksOnReinvest
Finding type for processLocksOnReinvest...
bool
SKIP bool
State_var: CVX_VAULT
Finding type for CVX_VAULT...
ISettV3
Check copy_toekn_tuple
(-1, -1, 0, 'CVX_VAULT', -1)
----
Type: ISettV3
ISettV3
Final Type: ISettV3
 NO FIELDS

Name: CVX_VAULT Function: global
Num: -1
Den: -1
Norm: 0
LF: CVX_VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAX_BPS
Finding type for MAX_BPS...
uint256
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: MAX_BPS Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: want
Finding type for want...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WANT', -1)
----
Type: address
address
Final Type: address

Name: want Function: global
Num: -1
Den: -1
Norm: 0
LF: WANT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalSafetyCheck
Finding type for withdrawalSafetyCheck...
bool
SKIP bool
State_var: _paused
Finding type for _paused...
bool
SKIP bool
State_var: controller
Finding type for controller...
address
Check copy_toekn_tuple
(-1, -1, 0, 'CONTROLLER', -1)
----
Type: address
address
Final Type: address

Name: controller Function: global
Num: -1
Den: -1
Norm: 0
LF: CONTROLLER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: reward
Finding type for reward...
address
Check copy_toekn_tuple
(-1, -1, 0, 'REWARD', -1)
----
Type: address
address
Final Type: address

Name: reward Function: global
Num: -1
Den: -1
Norm: 0
LF: REWARD
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalFee
Finding type for withdrawalFee...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, 12)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalFee Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: simple fee ratio
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: keeper
Finding type for keeper...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: keeper Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SUSHI_ROUTER
Finding type for SUSHI_ROUTER...
address
Check copy_toekn_tuple
(-1, -1, 0, 'SUSHI_ROUTER', -1)
----
Type: address
address
Final Type: address

Name: SUSHI_ROUTER Function: global
Num: -1
Den: -1
Norm: 0
LF: SUSHI_ROUTER
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: WETH
Finding type for WETH...
address
Check copy_toekn_tuple
(-1, -1, 0, 'WETH', -1)
----
Type: address
address
Final Type: address

Name: WETH Function: global
Num: -1
Den: -1
Norm: 0
LF: WETH
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: harvestOnRebalance
Finding type for harvestOnRebalance...
bool
SKIP bool
State_var: processLocksOnRebalance
Finding type for processLocksOnRebalance...
bool
SKIP bool
State_var: performanceFeeGovernance
Finding type for performanceFeeGovernance...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEEGOV', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeGovernance Function: global
Num: -1
Den: -1
Norm: 0
LF: FEEGOV
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: performanceFeeStrategist
Finding type for performanceFeeStrategist...
uint256
Check copy_toekn_tuple
(-1, -1, 0, 'FEESTRAT', -1)
----
Type: uint256
uint256
Final Type: uint256

Name: performanceFeeStrategist Function: global
Num: -1
Den: -1
Norm: 0
LF: FEESTRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: strategist
Finding type for strategist...
address
Check copy_toekn_tuple
(-1, -1, 0, 'STRAT', -1)
----
Type: address
address
Final Type: address

Name: strategist Function: global
Num: -1
Den: -1
Norm: 0
LF: STRAT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATE
Finding type for DELEGATE...
address
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGATE', -1)
----
Type: address
address
Final Type: address

Name: DELEGATE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGATE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: DELEGATED_SPACE
Finding type for DELEGATED_SPACE...
bytes32
Check copy_toekn_tuple
(-1, -1, 0, 'DELEGAT_SPACE', -1)
----
Type: bytes32
bytes32
Final Type: bytes32

Name: DELEGATED_SPACE Function: global
Num: -1
Den: -1
Norm: 0
LF: DELEGAT_SPACE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: SNAPSHOT
Finding type for SNAPSHOT...
IDelegateRegistry
Check copy_toekn_tuple
(-1, -1, 0, None, -1)
----
Type: IDelegateRegistry
IDelegateRegistry
Final Type: IDelegateRegistry
 NO FIELDS

Name: SNAPSHOT Function: global
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: guardian
Finding type for guardian...
address
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: address
address
Final Type: address

Name: guardian Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lpComponent
Finding type for lpComponent...
address
Check copy_toekn_tuple
(-1, -1, 0, 'LP', -1)
----
Type: address
address
Final Type: address

Name: lpComponent Function: global
Num: -1
Den: -1
Norm: 0
LF: LP
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: withdrawalMaxDeviationThreshold
Finding type for withdrawalMaxDeviationThreshold...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None, -1)
----
Type: uint256
uint256
Final Type: uint256

Name: withdrawalMaxDeviationThreshold Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Errors: [<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fca1064d190>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7fca1064d460>]
Function count: 29
