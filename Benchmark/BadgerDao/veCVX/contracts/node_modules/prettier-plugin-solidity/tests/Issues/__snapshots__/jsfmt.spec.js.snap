// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Issue205.sol 1`] = `
contract Example {
    using SafeMath for uint256;
    
    struct BalanceState {
        uint256 balance;
    }

    mapping(address => mapping(address => BalanceState)) private balanceStates;
    function example(address token, uint amount) public {
        balanceStates[msg.sender][token].balance = balanceStates[msg.sender][token].balance.sub(amount);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
contract Example {
    using SafeMath for uint256;

    struct BalanceState {
        uint256 balance;
    }

    mapping(address => mapping(address => BalanceState)) private balanceStates;

    function example(address token, uint256 amount) public {
        balanceStates[msg.sender][token].balance = balanceStates[msg.sender][
            token
        ]
            .balance
            .sub(amount);
    }
}

`;

exports[`Issue289.sol 1`] = `
contract Issue289 {
  function f() {
	address[] storage proposalValidators
 = ethProposals[_blockNumber][_proposalId].proposalValidators;
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
contract Issue289 {
    function f() {
        address[] storage proposalValidators =
            ethProposals[_blockNumber][_proposalId].proposalValidators;
    }
}

`;

exports[`Issue355.sol 1`] = `
pragma solidity 0.6.12;

contract Bug {
  // This is a comment
  uint public hello;

  // Another comment
  uint public bigNum = 100_000;

  // This will disappear
  uint public magic;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pragma solidity 0.6.12;

contract Bug {
    // This is a comment
    uint256 public hello;

    // Another comment
    uint256 public bigNum = 100_000;

    // This will disappear
    uint256 public magic;
}

`;

exports[`Issue385.sol 1`] = `
contract Issue385 {
  function emptyTryCatch() {
            try
                IService(_THIS_SERVICE).server().assign{value: msg.value}(
                    taskReceipt
                )
             {} catch Error(string memory error) {
                error.revertWithInfo("BService.delegatecall.assign:");
            } catch {
                revert("BService.delegatecall.assign:undefined");
            }
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
contract Issue385 {
    function emptyTryCatch() {
        try
            IService(_THIS_SERVICE).server().assign{value: msg.value}(
                taskReceipt
            )
        {} catch Error(string memory error) {
            error.revertWithInfo("BService.delegatecall.assign:");
        } catch {
            revert("BService.delegatecall.assign:undefined");
        }
    }
}

`;
