/**
 * Concatenate two buffers. If a position is specified, `value` will be put in `target` at the specified position. All
 * bytes after that will be moved to the end of the buffer.
 *
 * @param {Uint8Array} target
 * @param {Uint8Array} value
 * @param {number} [position]
 * @return {Uint8Array}
 */
export declare const concat: (target: Uint8Array, value: Uint8Array, position?: number | undefined) => Uint8Array;
/**
 * Concatenates multiple buffers, compatible with Uint8Arrays of browsers.
 *
 * @param {Uint8Array[]} buffers
 * @return {Uint8Array}
 */
export declare const concatMultiple: (buffers: Uint8Array[]) => Uint8Array;
/**
 * Add padding to a buffer. If the buffer is larger than `length`, this function won't do anything. If it's smaller, the
 * buffer will be padded to the specified length, with extra zeroes at the end.
 *
 * @param {Uint8Array} buffer
 * @param {number} [length]
 * @return {Uint8Array}
 */
export declare const addPadding: (buffer: Uint8Array, length?: number) => Uint8Array;
/**
 * Get a value as buffer. The value can be a string, number, bigint or buffer. If the value is a string, it is assumed
 * that it is a hexadecimal value.
 *
 * @param {string | number | bigint | Uint8Array} value
 * @return {Uint8Array}
 */
export declare const toBuffer: (value: string | number | bigint | Uint8Array) => Uint8Array;
/**
 * Get a UTF-8 encodes buffer as string.
 *
 * @param {Uint8Array} value
 * @return {string}
 */
export declare const toString: (value: Uint8Array) => string;
/**
 * Get a number from a buffer.
 *
 * @param {Uint8Array} buffer
 */
export declare const toNumber: (buffer: Uint8Array) => bigint;
/**
 * Get a buffer as hexadecimal string.
 *
 * @param {Uint8Array} buffer
 * @return {string}
 */
export declare const toHex: (buffer: Uint8Array) => string;
