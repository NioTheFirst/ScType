ICoreOracle
WrappedIbbtc
ContextUpgradeable
SafeMathUpgradeable
Initializable
ERC20Upgradeable
IERC20Upgradeable
AddressUpgradeable
contract name: ICoreOracle
WARNING!!!!
ICoreOracle_types.txt
Finance File not Found
Type File not found.
[x] ICoreOracle not run
contract name: WrappedIbbtc
WARNING!!!!
WrappedIbbtc_types.txt
Finance File not Found
"WrappedIbbtc_types.txt" opened successfully.
[*c], WrappedIbbtc

[sef], ORACLE, pricePerShare, 1, {c, 1, 2, 0}

{c, 1, 2, 0}
['c', '1', '2', '0']
transferFrom

[xf], balanceOf

[xf], pricePerShare

[xf], totalSupply

[xf], balanceToShares

[xf], sharesToBalance

[t], global, _balances, 2, -1, 0

[tref], _allowances, 1, -1, 0

[t], global, _totalSupply, 1, -1, 0

[t], global, pendingGovernance

[t], global, _symbol

[t], global, _name

[t], global, ibbtc

[t], global, governance

[t], global, oracle, -1, -1, 0, ORACLE

[t], global, _decimals

[t], global, _initialized

[t], global, _initializing



[t], transferFrom, sender

[t], transferFrom, recipient

[t], transferFrom, amount, 1, -1, 0

[*] WrappedIbbtc run
Checking... initialize Visibility: public
[x] No Binary
Checking... setPendingGovernance Visibility: external
[x] No Binary
Checking... setOracle Visibility: external
[x] No Binary
Checking... acceptPendingGovernance Visibility: external
[x] No Binary
Checking... mint Visibility: external
[x] No Binary
Checking... burn Visibility: external
[x] No Binary
Checking... transferFrom Visibility: public
[o] Marked
Checking... transfer Visibility: public
[x] No Binary
Checking... pricePerShare Visibility: public
[x] No Binary
Checking... sharesOf Visibility: public
[x] No Binary
Checking... balanceOf Visibility: public
[o] Marked
Checking... totalShares Visibility: public
[x] No Binary
Checking... totalSupply Visibility: public
[o] Marked
Checking... balanceToShares Visibility: public
[o] Marked
Checking... sharesToBalance Visibility: public
[o] Marked
State_var: _allowances
Finding type for _allowances...
mapping(address => mapping(address => uint256))
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: mapping(address => mapping(address => uint256))
mapping(address => mapping(address => uint256))
mapping(address => uint256)
uint256
Final Type: uint256

Name: _allowances Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _totalSupply
Finding type for _totalSupply...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _totalSupply Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pendingGovernance
Finding type for pendingGovernance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: pendingGovernance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ibbtc
Finding type for ibbtc...
ERC20Upgradeable
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: ERC20Upgradeable
ERC20Upgradeable
Final Type: ERC20Upgradeable
 NO FIELDS

Name: ibbtc Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: oracle
Finding type for oracle...
ICoreOracle
Check copy_toekn_tuple
(-1, -1, 0, 'ORACLE')
----
Type: ICoreOracle
ICoreOracle
Final Type: ICoreOracle
 NO FIELDS

Name: oracle Function: global
Num: -1
Den: -1
Norm: 0
LF: ORACLE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _decimals
Finding type for _decimals...
uint8
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint8
uint8
Final Type: uint8

Name: _decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
contract name: ContextUpgradeable
WARNING!!!!
ContextUpgradeable_types.txt
Finance File not Found
Type File not found.
[x] ContextUpgradeable not run
contract name: SafeMathUpgradeable
WARNING!!!!
SafeMathUpgradeable_types.txt
Finance File not Found
Type File not found.
[x] SafeMathUpgradeable not run
contract name: Initializable
WARNING!!!!
Initializable_types.txt
Finance File not Found
Type File not found.
[x] Initializable not run
contract name: ERC20Upgradeable
WARNING!!!!
ERC20Upgradeable_types.txt
Finance File not Found
Type File not found.
[x] ERC20Upgradeable not run
contract name: IERC20Upgradeable
WARNING!!!!
IERC20Upgradeable_types.txt
Finance File not Found
Type File not found.
[x] IERC20Upgradeable not run
contract name: AddressUpgradeable
WARNING!!!!
AddressUpgradeable_types.txt
Finance File not Found
Type File not found.
[x] AddressUpgradeable not run
Seen contract: {} Contract name out: ICoreOracle
[x] ICoreOracle not run
Seen contract: {'ICoreOracle': True} Contract name out: WrappedIbbtc
[*] WrappedIbbtc run
Reading Function: initialize
Function initialize not marked
Reading Function: setPendingGovernance
Function setPendingGovernance not marked
Reading Function: setOracle
Function setOracle not marked
Reading Function: acceptPendingGovernance
Function acceptPendingGovernance not marked
Reading Function: mint
Function mint not marked
Reading Function: burn
Function burn not marked
Reading Function: transferFrom
Function name: transferFrom
Function Visibility (test): public
sender
Finding type for sender...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: sender Function: transferFrom
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
recipient
Finding type for recipient...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: recipient Function: transferFrom
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
amount
Finding type for amount...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: amount Function: transferFrom
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
clearning node...
clearing ir...?
_allowances_16(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_1', '_allowances_14', '_allowances_6', '_allowances_21', '_allowances_0', '_allowances_10', '_allowances_15'])
has variable
typecheckig node...
_allowances_16(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_1', '_allowances_14', '_allowances_6', '_allowances_21', '_allowances_0', '_allowances_10', '_allowances_15'])
Function name: transferFrom
Phi
[i]Type for _allowances

Name: _allowances Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_84(uint256) = INTERNAL_CALL, WrappedIbbtc.balanceToShares(uint256)(amount_1)
has variable
[i] TMP_84 cleared
clearing ir...?
amountInShares_1(uint256) := TMP_84(uint256)
has variable
[i] amountInShares cleared
typecheckig node...
TMP_84(uint256) = INTERNAL_CALL, WrappedIbbtc.balanceToShares(uint256)(amount_1)
Function name: transferFrom
Internal call...
balanceToShares
amount
Function: balanceToShares
ic
Internal cal param_cache
Param: 0
    num: [1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
added
xyz
Function name: balanceToShares
Function Visibility: public
clearning node...
clearing ir...?
balance_1(uint256) := ϕ(['amount_1', 'amount_1'])
has variable
[i] balance cleared
typecheckig node...
balance_1(uint256) := ϕ(['amount_1', 'amount_1'])
Function name: balanceToShares
Phi
[i]Type for balance

Name: balance Function: balanceToShares
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balance_1', '1000000000000000000'] 
Function name: balanceToShares
Library Call: mul
testing mul...
val: 1000000000000000000
18
val: 1000000000000000000
18
lnorm: u rnorm: 18
Dest type: -1, Update_ratios: {12: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: balance Function: balanceToShares
Num: 1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_102 Function: balanceToShares
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_102

Name: TMP_102 Function: balanceToShares
Num: 1
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
TMP_103(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
Function name: balanceToShares
Internal call...
pricePerShare
Function: pricePerShare
ic
Internal cal param_cache
-100
added
xyz
Function name: pricePerShare
Function Visibility: public
clearning node...
clearing ir...?
oracle_3(ICoreOracle) := ϕ(['oracle_2', 'oracle_0', 'oracle_4', 'oracle_1'])
has variable
typecheckig node...
oracle_3(ICoreOracle) := ϕ(['oracle_2', 'oracle_0', 'oracle_4', 'oracle_1'])
Function name: pricePerShare
Phi
[i]Type for oracle

Name: oracle Function: global
Num: -1
Den: -1
Norm: 0
LF: ORACLE
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:oracle_3(ICoreOracle), function:pricePerShare, arguments:[]  
Function name: pricePerShare
High Call: pricePerShare
func name:pricePerShare
other func name:pricePerShare
TMP_93
WIP
hlc contract name: ORACLE func_name: pricePerShare
('c', [1], [2], 0, None)
wfc len: 1
Check copy_toekn_tuple
([1], [2], 0, None, -1)
----
Type: uint256
uint256
Final Type: uint256
COPIED
[i]Type for TMP_93

Name: TMP_93 Function: pricePerShare
Num: 1
Den: 2
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
oracle_4(ICoreOracle) := ϕ(['oracle_2', 'oracle_4', 'oracle_1', 'oracle_3'])
Function name: pricePerShare
Phi
[i]Type for oracle

Name: oracle Function: global
Num: -1
Den: -1
Norm: 0
LF: ORACLE
Fields: 
Finance Type: undef
done.
RETURN TMP_93
RETURN

Name: TMP_93 Function: pricePerShare
Num: 1
Den: 2
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "pricePerShare":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: pricePerShare

Name: TMP_93 Function: pricePerShare
Num: 1
Den: 2
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_103

Name: TMP_103 Function: balanceToShares
Num: 1
Den: 2
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_102', 'TMP_103'] 
Function name: balanceToShares
Library Call: div
lnorm: 18 rnorm: 0
Dest type: -1, Update_ratios: {12: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: TMP_104 Function: balanceToShares
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: PIC_2 Function: None
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_104 Function: balanceToShares
Num: 
Den: 
Norm: 18
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_104

Name: TMP_104 Function: balanceToShares
Num: 2
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
RETURN TMP_104
RETURN

Name: TMP_104 Function: balanceToShares
Num: 2
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "balanceToShares":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: balanceToShares

Name: TMP_104 Function: balanceToShares
Num: 2
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_84

Name: TMP_84 Function: transferFrom
Num: 2
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
amountInShares_1(uint256) := TMP_84(uint256)
Function name: transferFrom
asgn

Name: TMP_84 Function: transferFrom
Num: 2
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef

Name: amountInShares Function: transferFrom
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
18
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {12: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for amountInShares

Name: amountInShares Function: transferFrom
Num: 2
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, ERC20Upgradeable._transfer(address,address,uint256)(sender_1,recipient_1,amountInShares_1)
typecheckig node...
INTERNAL_CALL, ERC20Upgradeable._transfer(address,address,uint256)(sender_1,recipient_1,amountInShares_1)
Internal call...
_transfer
sender
recipient
amountInShares
Function: _transfer
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: -1
-100
added
xyz
Function name: _transfer
Function Visibility: internal
clearning node...
clearing ir...?
sender_1(address) := ϕ(['TMP_91', 'TMP_4', 'sender_1', 'sender_1'])
has variable
[i] sender cleared
clearing ir...?
recipient_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'recipient_1'])
has variable
[i] recipient cleared
clearing ir...?
amount_1(uint256) := ϕ(['amount_1', 'amount_1', 'amountInShares_1', 'amountInShares_1'])
has variable
[i] amount cleared
clearing ir...?
_balances_2(mapping(address => uint256)) := ϕ(['_balances_8', '_balances_0', '_balances_5', '_balances_11', '_balances_12', '_balances_1'])
has variable
typecheckig node...
sender_1(address) := ϕ(['TMP_91', 'TMP_4', 'sender_1', 'sender_1'])
Function name: _transfer
Phi
[i]Type for sender

Name: sender Function: _transfer
Num: -1
Den: -1
Norm: u
LF: sender
Fields: 
Finance Type: undef
done.
recipient_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'recipient_1'])
Function name: _transfer
Phi
[i]Type for recipient

Name: recipient Function: _transfer
Num: -1
Den: -1
Norm: u
LF: recipient
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['amount_1', 'amount_1', 'amountInShares_1', 'amountInShares_1'])
Function name: _transfer
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_balances_2(mapping(address => uint256)) := ϕ(['_balances_8', '_balances_0', '_balances_5', '_balances_11', '_balances_12', '_balances_1'])
Function name: _transfer
Phi
[i]Type for _balances

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_21 = CONVERT 0 to address
has variable
[i] TMP_21 cleared
clearing ir...?
TMP_22(bool) = sender_1 != TMP_21
has variable
[i] TMP_22 cleared
clearing ir...?
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,ERC20: transfer from the zero address)
typecheckig node...
TMP_21 = CONVERT 0 to address
Function name: _transfer
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_21 Function: _transfer
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_21

Name: TMP_21 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_22(bool) = sender_1 != TMP_21
Function name: _transfer
[i]Type for TMP_22

Name: TMP_22 Function: _transfer
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,ERC20: transfer from the zero address)
[i]Type for TMP_23

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_24 = CONVERT 0 to address
has variable
[i] TMP_24 cleared
clearing ir...?
TMP_25(bool) = recipient_1 != TMP_24
has variable
[i] TMP_25 cleared
clearing ir...?
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,ERC20: transfer to the zero address)
typecheckig node...
TMP_24 = CONVERT 0 to address
Function name: _transfer
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_24 Function: _transfer
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_24

Name: TMP_24 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_25(bool) = recipient_1 != TMP_24
Function name: _transfer
[i]Type for TMP_25

Name: TMP_25 Function: _transfer
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,ERC20: transfer to the zero address)
[i]Type for TMP_26

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, ERC20Upgradeable._beforeTokenTransfer(address,address,uint256)(sender_1,recipient_1,amount_1)
typecheckig node...
INTERNAL_CALL, ERC20Upgradeable._beforeTokenTransfer(address,address,uint256)(sender_1,recipient_1,amount_1)
Internal call...
_beforeTokenTransfer
sender
recipient
amount
Function: _beforeTokenTransfer
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: sender
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: recipient
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
added
xyz
Function name: _beforeTokenTransfer
Function Visibility: internal
clearning node...
clearing ir...?
from_1(address) := ϕ(['account_1', 'TMP_34', 'sender_1'])
has variable
[i] from cleared
clearing ir...?
to_1(address) := ϕ(['TMP_43', 'account_1', 'recipient_1'])
has variable
[i] to cleared
clearing ir...?
amount_1(uint256) := ϕ(['amount_1', 'amount_1', 'amount_1'])
has variable
[i] amount cleared
typecheckig node...
from_1(address) := ϕ(['account_1', 'TMP_34', 'sender_1'])
Function name: _beforeTokenTransfer
Phi
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: -1
Den: -1
Norm: u
LF: sender
Fields: 
Finance Type: undef
done.
to_1(address) := ϕ(['TMP_43', 'account_1', 'recipient_1'])
Function name: _beforeTokenTransfer
Phi
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: -1
Den: -1
Norm: u
LF: recipient
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['amount_1', 'amount_1', 'amount_1'])
Function name: _beforeTokenTransfer
Phi
[i]Type for amount

Name: amount Function: _beforeTokenTransfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "_beforeTokenTransfer":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _beforeTokenTransfer
done.
clearning node...
clearing ir...?
REF_12(uint256) -> _balances_3[sender_1]
has variable
clearing ir...?
REF_13(uint256) -> _balances_3[sender_1]
has variable
clearing ir...?
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_13', 'amount_1', 'ERC20: transfer amount exceeds balance'] 
has variable
[i] TMP_28 cleared
clearing ir...?
_balances_4(mapping(address => uint256)) := ϕ(['_balances_3'])
has variable
clearing ir...?
REF_12 (->_balances_4) := TMP_28(uint256)
has variable
typecheckig node...
REF_12(uint256) -> _balances_3[sender_1]
Function name: _transfer
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_balances
[i]Type for REF_12

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_12(uint256) -> _balances_3[sender_1]
XXXXX
REF_13(uint256) -> _balances_3[sender_1]
Function name: _transfer
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_balances
[i]Type for REF_13

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_13(uint256) -> _balances_3[sender_1]
XXXXX
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_13', 'amount_1', 'ERC20: transfer amount exceeds balance'] 
Function name: _transfer
Library Call: sub
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {12: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: REF_13 Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amount Function: _transfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amount Function: _transfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_28 Function: _transfer
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_28

Name: TMP_28 Function: _transfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_balances_4(mapping(address => uint256)) := ϕ(['_balances_3'])
Function name: _transfer
Phi
[i]Type for _balances

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_12 (->_balances_4) := TMP_28(uint256)
Function name: _transfer
asgn

Name: TMP_28 Function: _transfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_12 Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
u
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {12: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_12

Name: REF_12 Function: _transfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_15(uint256) -> _balances_4[recipient_1]
has variable
clearing ir...?
REF_16(uint256) -> _balances_4[recipient_1]
has variable
clearing ir...?
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['REF_16', 'amount_1'] 
has variable
[i] TMP_29 cleared
clearing ir...?
_balances_5(mapping(address => uint256)) := ϕ(['_balances_4'])
has variable
clearing ir...?
REF_15 (->_balances_5) := TMP_29(uint256)
has variable
typecheckig node...
REF_15(uint256) -> _balances_4[recipient_1]
Function name: _transfer
INDEX

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_15

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_16(uint256) -> _balances_4[recipient_1]
Function name: _transfer
INDEX

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_16

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['REF_16', 'amount_1'] 
Function name: _transfer
Library Call: add

Name: TMP_29 Function: _transfer
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {12: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_29 Function: _transfer
Num: 
Den: 
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_29

Name: TMP_29 Function: _transfer
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_balances_5(mapping(address => uint256)) := ϕ(['_balances_4'])
Function name: _transfer
Phi
[i]Type for _balances

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_15 (->_balances_5) := TMP_29(uint256)
Function name: _transfer
asgn

Name: TMP_29 Function: _transfer
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_15 Function: _transfer
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {12: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_15

Name: REF_15 Function: _transfer
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
Emit Transfer(sender_1,recipient_1,amount_1)
typecheckig node...
Emit Transfer(sender_1,recipient_1,amount_1)
WORKLIST iteration 0 for function call "_transfer":
 New undefined nodes- 1
 Old undefined nodes- 0
typecheckig node...
sender_1(address) := ϕ(['TMP_91', 'TMP_4', 'sender_1', 'sender_1'])
Function name: _transfer
Phi
[i]Type for sender

Name: sender Function: _transfer
Num: -1
Den: -1
Norm: u
LF: sender
Fields: 
Finance Type: undef
done.
recipient_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'recipient_1'])
Function name: _transfer
Phi
[i]Type for recipient

Name: recipient Function: _transfer
Num: -1
Den: -1
Norm: u
LF: recipient
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['amount_1', 'amount_1', 'amountInShares_1', 'amountInShares_1'])
Function name: _transfer
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_balances_2(mapping(address => uint256)) := ϕ(['_balances_8', '_balances_0', '_balances_5', '_balances_11', '_balances_12', '_balances_1'])
Function name: _transfer
Phi
[i]Type for _balances

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_21 = CONVERT 0 to address
Function name: _transfer
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_21 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_21

Name: TMP_21 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_22(bool) = sender_1 != TMP_21
Function name: _transfer
[i]Type for TMP_22

Name: TMP_22 Function: _transfer
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,ERC20: transfer from the zero address)
[i]Type for TMP_23

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_24 = CONVERT 0 to address
Function name: _transfer
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_24 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_24

Name: TMP_24 Function: _transfer
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_25(bool) = recipient_1 != TMP_24
Function name: _transfer
[i]Type for TMP_25

Name: TMP_25 Function: _transfer
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,ERC20: transfer to the zero address)
[i]Type for TMP_26

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
INTERNAL_CALL, ERC20Upgradeable._beforeTokenTransfer(address,address,uint256)(sender_1,recipient_1,amount_1)
Internal call...
_beforeTokenTransfer
sender
recipient
amount
Function: _beforeTokenTransfer
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: sender
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: recipient
    fields: []
    fintype: -1
Param: 2
    num: [2]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
0
0
done.
typecheckig node...
REF_12(uint256) -> _balances_3[sender_1]
Function name: _transfer
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_balances
[W] Initializing defined variable to constant
[i]Type for REF_12

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_12(uint256) -> _balances_3[sender_1]
XXXXX
REF_13(uint256) -> _balances_3[sender_1]
Function name: _transfer
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_balances
[i]Type for REF_13

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_13(uint256) -> _balances_3[sender_1]
XXXXX
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_13', 'amount_1', 'ERC20: transfer amount exceeds balance'] 
Function name: _transfer
Library Call: sub
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {12: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: REF_13 Function: _transfer
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amount Function: _transfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: amount Function: _transfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_28 Function: _transfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_28

Name: TMP_28 Function: _transfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_balances_4(mapping(address => uint256)) := ϕ(['_balances_3'])
Function name: _transfer
Phi
[i]Type for _balances

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_12 (->_balances_4) := TMP_28(uint256)
Function name: _transfer
asgn

Name: TMP_28 Function: _transfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_12 Function: _transfer
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
u
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {12: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_12

Name: REF_12 Function: _transfer
Num: 2
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
REF_15(uint256) -> _balances_4[recipient_1]
Function name: _transfer
INDEX

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_15

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_16(uint256) -> _balances_4[recipient_1]
Function name: _transfer
INDEX

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Name: global
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_16

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['REF_16', 'amount_1'] 
Function name: _transfer
Library Call: add

Name: TMP_29 Function: _transfer
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
initlize checks
;;;
lnorm: 0 rnorm: u
Dest type: -1, Update_ratios: {12: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_29 Function: _transfer
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_29

Name: TMP_29 Function: _transfer
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_balances_5(mapping(address => uint256)) := ϕ(['_balances_4'])
Function name: _transfer
Phi
[i]Type for _balances

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_15 (->_balances_5) := TMP_29(uint256)
Function name: _transfer
asgn

Name: TMP_29 Function: _transfer
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: REF_15 Function: _transfer
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
0
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {12: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_15

Name: REF_15 Function: _transfer
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
Emit Transfer(sender_1,recipient_1,amount_1)
WORKLIST iteration 1 for function call "_transfer":
 New undefined nodes- 1
 Old undefined nodes- 1
Saving return values for: _transfer
done.
This IR caused addback:
INTERNAL_CALL, ERC20Upgradeable._transfer(address,address,uint256)(sender_1,recipient_1,amountInShares_1)
XXXXX
clearning node...
clearing ir...?
TMP_86(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
has variable
[i] TMP_86 cleared
clearing ir...?
REF_31(mapping(address => uint256)) -> _allowances_19[sender_1]
has variable
clearing ir...?
TMP_87(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
has variable
[i] TMP_87 cleared
clearing ir...?
REF_32(uint256) -> REF_31[TMP_87]
has variable
clearing ir...?
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_32', 'amountInShares_1', 'ERC20: transfer amount exceeds allowance'] 
has variable
[i] TMP_88 cleared
clearing ir...?
INTERNAL_CALL, ERC20Upgradeable._approve(address,address,uint256)(sender_1,TMP_86,TMP_88)
clearing ir...?
_allowances_21(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_15'])
has variable
typecheckig node...
TMP_86(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
Function name: transferFrom
Internal call...
_msgSender
Function: _msgSender
ic
Internal cal param_cache
-100
added
xyz
Function name: _msgSender
Function Visibility: internal
clearning node...
typecheckig node...
typecheckig node...
RETURN msg.sender
RETURN
msg.sender
WORKLIST iteration 0 for function call "_msgSender":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _msgSender

Name: PIC_7 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_86

Name: TMP_86 Function: transferFrom
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_31(mapping(address => uint256)) -> _allowances_19[sender_1]
Function name: transferFrom
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_allowances
REFERENCE TYPE READ
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256
[i]Type for REF_31

Name: None Function: None
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_87(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
Function name: transferFrom
Internal call...
_msgSender
Function: _msgSender
ic
Internal cal param_cache
0
0

Name: PIC_7 Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_87 Function: transferFrom
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_87

Name: TMP_87 Function: transferFrom
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_32(uint256) -> REF_31[TMP_87]
Function name: transferFrom
INDEX

Name: None Function: None
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Name: None
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_32

Name: None Function: None
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_32', 'amountInShares_1', 'ERC20: transfer amount exceeds allowance'] 
Function name: transferFrom
Library Call: sub
Error with TMP_88 in function transferFrom
Error with: TMP_88 in function transferFrom
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f4efcbc2190>]
lnorm: 0 rnorm: 18
Dest type: -1, Update_ratios: {12: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: REF_32 Function: transferFrom
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: amountInShares Function: transferFrom
Num: 2
Den: -1
Norm: 18
LF: None
Fields: 
Finance Type: undef
Error with TMP_88 in function transferFrom
Error with: TMP_88 in function transferFrom
[<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f4efcbc2190>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f4efcbc2190>]
[i]Type for TMP_88

Name: TMP_88 Function: transferFrom
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
INTERNAL_CALL, ERC20Upgradeable._approve(address,address,uint256)(sender_1,TMP_86,TMP_88)
Internal call...
_approve
sender
TMP_86
TMP_88
Function: _approve
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: None
    fields: []
    fintype: -1
-100
added
xyz
Function name: _approve
Function Visibility: internal
clearning node...
clearing ir...?
owner_1(address) := ϕ(['sender_1', 'TMP_6', 'sender_1', 'TMP_17', 'TMP_13'])
has variable
[i] owner cleared
clearing ir...?
spender_1(address) := ϕ(['spender_1', 'TMP_9', 'TMP_86', 'spender_1', 'spender_1'])
has variable
[i] spender cleared
clearing ir...?
amount_1(uint256) := ϕ(['TMP_15', 'amount_1', 'TMP_19', 'TMP_11', 'TMP_88'])
has variable
[i] amount cleared
typecheckig node...
owner_1(address) := ϕ(['sender_1', 'TMP_6', 'sender_1', 'TMP_17', 'TMP_13'])
Function name: _approve
Phi
[i]Type for owner

Name: owner Function: _approve
Num: -1
Den: -1
Norm: u
LF: owner
Fields: 
Finance Type: undef
done.
spender_1(address) := ϕ(['spender_1', 'TMP_9', 'TMP_86', 'spender_1', 'spender_1'])
Function name: _approve
Phi
[i]Type for spender

Name: spender Function: _approve
Num: -1
Den: -1
Norm: u
LF: spender
Fields: 
Finance Type: undef
done.
amount_1(uint256) := ϕ(['TMP_15', 'amount_1', 'TMP_19', 'TMP_11', 'TMP_88'])
Function name: _approve
Phi
[i]Type for amount

Name: amount Function: _approve
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_49 = CONVERT 0 to address
has variable
[i] TMP_49 cleared
clearing ir...?
TMP_50(bool) = owner_1 != TMP_49
has variable
[i] TMP_50 cleared
clearing ir...?
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,ERC20: approve from the zero address)
typecheckig node...
TMP_49 = CONVERT 0 to address
Function name: _approve
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_49 Function: _approve
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_49

Name: TMP_49 Function: _approve
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_50(bool) = owner_1 != TMP_49
Function name: _approve
[i]Type for TMP_50

Name: TMP_50 Function: _approve
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,ERC20: approve from the zero address)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_52 = CONVERT 0 to address
has variable
[i] TMP_52 cleared
clearing ir...?
TMP_53(bool) = spender_1 != TMP_52
has variable
[i] TMP_53 cleared
clearing ir...?
TMP_54(None) = SOLIDITY_CALL require(bool,string)(TMP_53,ERC20: approve to the zero address)
typecheckig node...
TMP_52 = CONVERT 0 to address
Function name: _approve
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_52 Function: _approve
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
[i]Type for TMP_52

Name: TMP_52 Function: _approve
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_53(bool) = spender_1 != TMP_52
Function name: _approve
[i]Type for TMP_53

Name: TMP_53 Function: _approve
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_54(None) = SOLIDITY_CALL require(bool,string)(TMP_53,ERC20: approve to the zero address)
[i]Type for TMP_54

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_26(mapping(address => uint256)) -> _allowances_14[owner_1]
has variable
clearing ir...?
REF_27(uint256) -> REF_26[spender_1]
has variable
clearing ir...?
_allowances_15(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_14'])
has variable
clearing ir...?
REF_27 (->_allowances_15) := amount_1(uint256)
has variable
typecheckig node...
REF_26(mapping(address => uint256)) -> _allowances_14[owner_1]
Function name: _approve
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_allowances
REFERENCE TYPE READ
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256
[i]Type for REF_26

Name: None Function: None
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_27(uint256) -> REF_26[spender_1]
Function name: _approve
INDEX

Name: None Function: None
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
Name: None
REFERENCE LEFT VALUE PROPAGATION
[i]Type for REF_27

Name: None Function: None
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_allowances_15(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_14'])
Function name: _approve
Phi
[i]Type for _allowances

Name: _allowances Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
REF_27 (->_allowances_15) := amount_1(uint256)
Function name: _approve
asgn

Name: amount Function: _approve
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: REF_27 Function: _approve
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
u
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {12: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for REF_27

Name: REF_27 Function: _approve
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
Emit Approval(owner_1,spender_1,amount_1)
typecheckig node...
Emit Approval(owner_1,spender_1,amount_1)
WORKLIST iteration 0 for function call "_approve":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: _approve
done.
_allowances_21(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_15'])
Function name: transferFrom
Phi
[i]Type for _allowances

Name: _allowances Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN True
typecheckig node...
RETURN True
RETURN
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "transferFrom":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: transferFrom

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
State_var: _allowances
Finding type for _allowances...
mapping(address => mapping(address => uint256))
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: mapping(address => mapping(address => uint256))
mapping(address => mapping(address => uint256))
mapping(address => uint256)
uint256
Final Type: uint256

Name: _allowances Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _totalSupply
Finding type for _totalSupply...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _totalSupply Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pendingGovernance
Finding type for pendingGovernance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: pendingGovernance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ibbtc
Finding type for ibbtc...
ERC20Upgradeable
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: ERC20Upgradeable
ERC20Upgradeable
Final Type: ERC20Upgradeable
 NO FIELDS

Name: ibbtc Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: oracle
Finding type for oracle...
ICoreOracle
Check copy_toekn_tuple
(-1, -1, 0, 'ORACLE')
----
Type: ICoreOracle
ICoreOracle
Final Type: ICoreOracle
 NO FIELDS

Name: oracle Function: global
Num: -1
Den: -1
Norm: 0
LF: ORACLE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _decimals
Finding type for _decimals...
uint8
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint8
uint8
Final Type: uint8

Name: _decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: transfer
Function transfer not marked
Reading Function: pricePerShare
Function pricePerShare not marked
Reading Function: sharesOf
Function sharesOf not marked
Reading Function: balanceOf
wooo
State_var: _allowances
Finding type for _allowances...
mapping(address => mapping(address => uint256))
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: mapping(address => mapping(address => uint256))
mapping(address => mapping(address => uint256))
mapping(address => uint256)
uint256
Final Type: uint256

Name: _allowances Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _totalSupply
Finding type for _totalSupply...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _totalSupply Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pendingGovernance
Finding type for pendingGovernance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: pendingGovernance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ibbtc
Finding type for ibbtc...
ERC20Upgradeable
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: ERC20Upgradeable
ERC20Upgradeable
Final Type: ERC20Upgradeable
 NO FIELDS

Name: ibbtc Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: oracle
Finding type for oracle...
ICoreOracle
Check copy_toekn_tuple
(-1, -1, 0, 'ORACLE')
----
Type: ICoreOracle
ICoreOracle
Final Type: ICoreOracle
 NO FIELDS

Name: oracle Function: global
Num: -1
Den: -1
Norm: 0
LF: ORACLE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _decimals
Finding type for _decimals...
uint8
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint8
uint8
Final Type: uint8

Name: _decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: totalShares
Function totalShares not marked
Reading Function: totalSupply
wooo
State_var: _allowances
Finding type for _allowances...
mapping(address => mapping(address => uint256))
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: mapping(address => mapping(address => uint256))
mapping(address => mapping(address => uint256))
mapping(address => uint256)
uint256
Final Type: uint256

Name: _allowances Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _totalSupply
Finding type for _totalSupply...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _totalSupply Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pendingGovernance
Finding type for pendingGovernance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: pendingGovernance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ibbtc
Finding type for ibbtc...
ERC20Upgradeable
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: ERC20Upgradeable
ERC20Upgradeable
Final Type: ERC20Upgradeable
 NO FIELDS

Name: ibbtc Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: oracle
Finding type for oracle...
ICoreOracle
Check copy_toekn_tuple
(-1, -1, 0, 'ORACLE')
----
Type: ICoreOracle
ICoreOracle
Final Type: ICoreOracle
 NO FIELDS

Name: oracle Function: global
Num: -1
Den: -1
Norm: 0
LF: ORACLE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _decimals
Finding type for _decimals...
uint8
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint8
uint8
Final Type: uint8

Name: _decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: balanceToShares
wooo
State_var: _allowances
Finding type for _allowances...
mapping(address => mapping(address => uint256))
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: mapping(address => mapping(address => uint256))
mapping(address => mapping(address => uint256))
mapping(address => uint256)
uint256
Final Type: uint256

Name: _allowances Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _totalSupply
Finding type for _totalSupply...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _totalSupply Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pendingGovernance
Finding type for pendingGovernance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: pendingGovernance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ibbtc
Finding type for ibbtc...
ERC20Upgradeable
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: ERC20Upgradeable
ERC20Upgradeable
Final Type: ERC20Upgradeable
 NO FIELDS

Name: ibbtc Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: oracle
Finding type for oracle...
ICoreOracle
Check copy_toekn_tuple
(-1, -1, 0, 'ORACLE')
----
Type: ICoreOracle
ICoreOracle
Final Type: ICoreOracle
 NO FIELDS

Name: oracle Function: global
Num: -1
Den: -1
Norm: 0
LF: ORACLE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _decimals
Finding type for _decimals...
uint8
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint8
uint8
Final Type: uint8

Name: _decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: sharesToBalance
wooo
State_var: _allowances
Finding type for _allowances...
mapping(address => mapping(address => uint256))
Check copy_toekn_tuple
([1], [-1], 0, None)
----
Type: mapping(address => mapping(address => uint256))
mapping(address => mapping(address => uint256))
mapping(address => uint256)
uint256
Final Type: uint256

Name: _allowances Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(2, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: 2
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _totalSupply
Finding type for _totalSupply...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _totalSupply Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pendingGovernance
Finding type for pendingGovernance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: pendingGovernance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: ibbtc
Finding type for ibbtc...
ERC20Upgradeable
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: ERC20Upgradeable
ERC20Upgradeable
Final Type: ERC20Upgradeable
 NO FIELDS

Name: ibbtc Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: governance
Finding type for governance...
address
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address
address
Final Type: address

Name: governance Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _initialized
Finding type for _initialized...
bool
SKIP bool
State_var: _initializing
Finding type for _initializing...
bool
SKIP bool
State_var: oracle
Finding type for oracle...
ICoreOracle
Check copy_toekn_tuple
(-1, -1, 0, 'ORACLE')
----
Type: ICoreOracle
ICoreOracle
Final Type: ICoreOracle
 NO FIELDS

Name: oracle Function: global
Num: -1
Den: -1
Norm: 0
LF: ORACLE
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _decimals
Finding type for _decimals...
uint8
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint8
uint8
Final Type: uint8

Name: _decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Errors: [<slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f4efcbc2190>, <slither.slithir.variables.temporary_ssa.TemporaryVariableSSA object at 0x7f4efcbc2190>]
Seen contract: {'ICoreOracle': True, 'WrappedIbbtc': True} Contract name out: ContextUpgradeable
[x] ContextUpgradeable not run
Seen contract: {'ICoreOracle': True, 'WrappedIbbtc': True, 'ContextUpgradeable': True} Contract name out: SafeMathUpgradeable
[x] SafeMathUpgradeable not run
Seen contract: {'ICoreOracle': True, 'WrappedIbbtc': True, 'ContextUpgradeable': True, 'SafeMathUpgradeable': True} Contract name out: Initializable
[x] Initializable not run
Seen contract: {'ICoreOracle': True, 'WrappedIbbtc': True, 'ContextUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True} Contract name out: ERC20Upgradeable
[x] ERC20Upgradeable not run
Seen contract: {'ICoreOracle': True, 'WrappedIbbtc': True, 'ContextUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'ERC20Upgradeable': True} Contract name out: IERC20Upgradeable
[x] IERC20Upgradeable not run
Seen contract: {'ICoreOracle': True, 'WrappedIbbtc': True, 'ContextUpgradeable': True, 'SafeMathUpgradeable': True, 'Initializable': True, 'ERC20Upgradeable': True, 'IERC20Upgradeable': True} Contract name out: AddressUpgradeable
[x] AddressUpgradeable not run
