InsureDAOERC20
PoolTemplate
IIndexTemplate
IParameters
IPoolTemplate
IRegistry
IUniversalMarket
IVault
IERC20
IERC20Metadata
Context
MerkleProof
contract name: InsureDAOERC20
WARNING!!!!
InsureDAOERC20_types.txt
Finance File not Found
Type File not found.
[x] InsureDAOERC20 not run
contract name: PoolTemplate
WARNING!!!!
PoolTemplate_types.txt
Finance File not Found
"PoolTemplate_types.txt" opened successfully.
[*c], PoolTemplate

[sef], REF, name

[sef], REF, symbol

[sef], REF, decimals

[sef], REF, getVault, 1, {c, -1, -1, 0, VAULT}

{c, -1, -1, 0, VAULT}
['c', '-1', '-1', '0', 'VAULT']
[t], global, lockedAmount, 1, -1, 0

[t], global, parameters

[t], global, _decimals

[t], global, MAGIC_SCALE_1E6

[t], global, marketStatus

[t], global, vault, -1, -1, 0, VAULT

[t], global, _name

[t], global, allInsuranceCount

[t], global, attributionDebt

[t], global, rewardPerCredit

[t], global, totalCredit

[t], global, insurances

[t], global, _symbol

[t], global, _balances, 1, -1, 0

[t], global, _totalSupply, 1, -1, 0

[t], global, withdrawalReq, 1, -1, 0

[t], global, indicies

[t], global, incident

[t], global, indexList

[t], global, _allowances

[t], global, registry

[t], global, pendingEnd

[t], initialize, _metaData

[t], initialize, _conditions

[tref], _references, -1, -1, 0, REF

[*] PoolTemplate run
Checking... constructor Visibility: public
[x] No Binary
Checking... initialize Visibility: external
[o] Marked
Checking... deposit Visibility: public
[o] Marked
Checking... _depositFrom Visibility: internal
[x] Not visible 
Checking... requestWithdraw Visibility: external
[o] Marked
Checking... withdraw Visibility: external
[o] Marked
Checking... unlockBatch Visibility: external
[o] Marked
Checking... unlock Visibility: public
[o] Marked
Checking... allocateCredit Visibility: external
[o] Marked
Checking... withdrawCredit Visibility: external
[o] Marked
Checking... insure Visibility: external
[o] Marked
Checking... redeem Visibility: external
[o] Marked
Checking... transferInsurance Visibility: external
[o] Marked
Checking... getPremium Visibility: public
[x] No Binary
Checking... applyCover Visibility: external
[o] Marked
Checking... resume Visibility: external
[o] Marked
Checking... rate Visibility: external
[o] Marked
Checking... valueOfUnderlying Visibility: public
[o] Marked
Checking... pendingPremium Visibility: external
[o] Marked
Checking... worth Visibility: public
[o] Marked
Checking... allocatedCredit Visibility: public
[x] No Binary
Checking... availableBalance Visibility: public
[o] Marked
Checking... utilizationRate Visibility: public
[o] Marked
Checking... totalLiquidity Visibility: public
[o] Marked
Checking... originalLiquidity Visibility: public
[o] Marked
Checking... setPaused Visibility: external
[o] Marked
Checking... changeMetadata Visibility: external
[x] No Binary
Checking... _beforeTokenTransfer Visibility: internal
[x] Not visible 
Checking... _divCeil Visibility: internal
[x] Not visible 
Checking... _sub Visibility: internal
[x] Not visible 
Checking... slitherConstructorConstantVariables Visibility: internal
[x] Not visible 
State_var: insurances
Finding type for insurances...
mapping(uint256 => PoolTemplate.Insurance)
State_var: paused
Finding type for paused...
bool
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
State_var: _totalSupply
Finding type for _totalSupply...
uint256
State_var: MAGIC_SCALE_1E6
Finding type for MAGIC_SCALE_1E6...
uint256
State_var: attributionDebt
Finding type for attributionDebt...
uint256
State_var: indicies
Finding type for indicies...
mapping(address => PoolTemplate.IndexInfo)
State_var: registry
Finding type for registry...
IRegistry
State_var: rewardPerCredit
Finding type for rewardPerCredit...
uint256
State_var: totalCredit
Finding type for totalCredit...
uint256
State_var: vault
Finding type for vault...
IVault
State_var: _allowances
Finding type for _allowances...
mapping(address => mapping(address => uint256))
State_var: lockedAmount
Finding type for lockedAmount...
uint256
State_var: _decimals
Finding type for _decimals...
uint8
State_var: marketStatus
Finding type for marketStatus...
PoolTemplate.MarketStatus
State_var: _name
Finding type for _name...
string
State_var: parameters
Finding type for parameters...
IParameters
State_var: allInsuranceCount
Finding type for allInsuranceCount...
uint256
State_var: _symbol
Finding type for _symbol...
string
State_var: tokenInitialized
Finding type for tokenInitialized...
bool
State_var: withdrawalReq
Finding type for withdrawalReq...
mapping(address => PoolTemplate.Withdrawal)
State_var: initialized
Finding type for initialized...
bool
State_var: incident
Finding type for incident...
PoolTemplate.Incident
State_var: indexList
Finding type for indexList...
address[]
State_var: pendingEnd
Finding type for pendingEnd...
uint256
contract name: IIndexTemplate
WARNING!!!!
IIndexTemplate_types.txt
Finance File not Found
Type File not found.
[x] IIndexTemplate not run
contract name: IParameters
WARNING!!!!
IParameters_types.txt
Finance File not Found
Type File not found.
[x] IParameters not run
contract name: IPoolTemplate
WARNING!!!!
IPoolTemplate_types.txt
Finance File not Found
Type File not found.
[x] IPoolTemplate not run
contract name: IRegistry
WARNING!!!!
IRegistry_types.txt
Finance File not Found
Type File not found.
[x] IRegistry not run
contract name: IUniversalMarket
WARNING!!!!
IUniversalMarket_types.txt
Finance File not Found
Type File not found.
[x] IUniversalMarket not run
contract name: IVault
WARNING!!!!
IVault_types.txt
Finance File not Found
Type File not found.
[x] IVault not run
contract name: IERC20
WARNING!!!!
IERC20_types.txt
Finance File not Found
Type File not found.
[x] IERC20 not run
contract name: IERC20Metadata
WARNING!!!!
IERC20Metadata_types.txt
Finance File not Found
Type File not found.
[x] IERC20Metadata not run
contract name: Context
WARNING!!!!
Context_types.txt
Finance File not Found
Type File not found.
[x] Context not run
contract name: MerkleProof
WARNING!!!!
MerkleProof_types.txt
Finance File not Found
Type File not found.
[x] MerkleProof not run
Seen contract: {} Contract name out: InsureDAOERC20
[x] InsureDAOERC20 not run
Seen contract: {'InsureDAOERC20': True} Contract name out: PoolTemplate
[*] PoolTemplate run
Reading Function: constructor
Function constructor not marked
Mark Iterations TRUE, proceeding anyway
Function name: constructor
Function Visibility (test): public
clearning node...
typecheckig node...
clearning node...
clearing ir...?
initialized_1(bool) := True(bool)
has variable
typecheckig node...
initialized_1(bool) := True(bool)
Function name: constructor
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: initialized Function: constructor
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for initialized

Name: initialized Function: constructor
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "constructor":
 New undefined nodes- 0
 Old undefined nodes- 0
No save for this scenario
State_var: insurances
Finding type for insurances...
mapping(uint256 => PoolTemplate.Insurance)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(uint256 => PoolTemplate.Insurance)
mapping(uint256 => PoolTemplate.Insurance)
PoolTemplate.Insurance
Final Type: PoolTemplate.Insurance
global
insurances
id
global
insurances
startTime
global
insurances
endTime
global
insurances
amount
global
insurances
target
global
insurances
insured
global
insurances
status
FIELDS:
insurances Fields:
^^^

Name: insurances Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: paused
Finding type for paused...
bool
SKIP bool
State_var: _balances
Finding type for _balances...
mapping(address => uint256)
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: mapping(address => uint256)
mapping(address => uint256)
uint256
Final Type: uint256

Name: _balances Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _totalSupply
Finding type for _totalSupply...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: _totalSupply Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: MAGIC_SCALE_1E6
Finding type for MAGIC_SCALE_1E6...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: MAGIC_SCALE_1E6 Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: attributionDebt
Finding type for attributionDebt...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: attributionDebt Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: indicies
Finding type for indicies...
mapping(address => PoolTemplate.IndexInfo)
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => PoolTemplate.IndexInfo)
mapping(address => PoolTemplate.IndexInfo)
PoolTemplate.IndexInfo
Final Type: PoolTemplate.IndexInfo
global
indicies
credit
global
indicies
rewardDebt
global
indicies
exist
FIELDS:
indicies Fields:
^^^

Name: indicies Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: registry
Finding type for registry...
IRegistry
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: IRegistry
IRegistry
Final Type: IRegistry
 NO FIELDS

Name: registry Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: rewardPerCredit
Finding type for rewardPerCredit...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: rewardPerCredit Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: totalCredit
Finding type for totalCredit...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: totalCredit Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: vault
Finding type for vault...
IVault
Check copy_toekn_tuple
(-1, -1, 0, 'VAULT')
----
Type: IVault
IVault
Final Type: IVault
 NO FIELDS

Name: vault Function: global
Num: -1
Den: -1
Norm: 0
LF: VAULT
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _allowances
Finding type for _allowances...
mapping(address => mapping(address => uint256))
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: mapping(address => mapping(address => uint256))
mapping(address => mapping(address => uint256))
mapping(address => uint256)
uint256
Final Type: uint256

Name: _allowances Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: lockedAmount
Finding type for lockedAmount...
uint256
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: uint256
uint256
Final Type: uint256

Name: lockedAmount Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _decimals
Finding type for _decimals...
uint8
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint8
uint8
Final Type: uint8

Name: _decimals Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: marketStatus
Finding type for marketStatus...
PoolTemplate.MarketStatus
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: PoolTemplate.MarketStatus
PoolTemplate.MarketStatus
Final Type: PoolTemplate.MarketStatus
 NO FIELDS

Name: marketStatus Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _name
Finding type for _name...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _name Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: parameters
Finding type for parameters...
IParameters
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: IParameters
IParameters
Final Type: IParameters
 NO FIELDS

Name: parameters Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: allInsuranceCount
Finding type for allInsuranceCount...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: allInsuranceCount Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: _symbol
Finding type for _symbol...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _symbol Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: tokenInitialized
Finding type for tokenInitialized...
bool
SKIP bool
State_var: withdrawalReq
Finding type for withdrawalReq...
mapping(address => PoolTemplate.Withdrawal)
Check copy_toekn_tuple
(1, -1, 0, None)
----
Type: mapping(address => PoolTemplate.Withdrawal)
mapping(address => PoolTemplate.Withdrawal)
PoolTemplate.Withdrawal
Final Type: PoolTemplate.Withdrawal
global
withdrawalReq
timestamp
global
withdrawalReq
amount
FIELDS:
withdrawalReq Fields:
^^^

Name: withdrawalReq Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: initialized
Finding type for initialized...
bool
SKIP bool
State_var: incident
Finding type for incident...
PoolTemplate.Incident
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: PoolTemplate.Incident
PoolTemplate.Incident
Final Type: PoolTemplate.Incident
global
incident
payoutNumerator
global
incident
payoutDenominator
global
incident
incidentTimestamp
global
incident
merkleRoot
FIELDS:
incident Fields:
^^^

Name: incident Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: indexList
Finding type for indexList...
address[]
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: address[]
address[]
address
Final Type: address

Name: indexList Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
State_var: pendingEnd
Finding type for pendingEnd...
uint256
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256
uint256
Final Type: uint256

Name: pendingEnd Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
Reading Function: initialize
Function name: initialize
Function Visibility (test): external
_metaData
Finding type for _metaData...
string
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: string
string
Final Type: string

Name: _metaData Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
_conditions
Finding type for _conditions...
uint256[]
Check copy_toekn_tuple
(-1, -1, 'u', None)
----
Type: uint256[]
uint256[]
uint256
Final Type: uint256

Name: _conditions Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[*]Type fetched successfully
_references
Finding type for _references...
address[]
Check copy_toekn_tuple
([-1], [-1], 0, 'REF')
----
Type: address[]
address[]
address
Final Type: address

Name: _references Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
[*]Type fetched successfully
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: REF
    fields: []
    fintype: -1
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: 0
    link: REF
    fields: []
    fintype: -1
clearning node...
clearing ir...?
initialized_2(bool) := ϕ(['initialized_0', 'initialized_1', 'initialized_3'])
has variable
typecheckig node...
initialized_2(bool) := ϕ(['initialized_0', 'initialized_1', 'initialized_3'])
Function name: initialize
Phi
[i]Type for initialized

Name: initialized Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_126(bool) = initialized_2 == False
has variable
[i] TMP_126 cleared
clearing ir...?
TMP_127 = CONVERT _metaData_1 to bytes
has variable
[i] TMP_127 cleared
clearing ir...?
REF_34 -> LENGTH TMP_127
clearing ir...?
TMP_128(bool) = REF_34 > 0
has variable
[i] TMP_128 cleared
clearing ir...?
TMP_129(bool) = TMP_126 && TMP_128
has variable
[i] TMP_129 cleared
clearing ir...?
REF_35(address) -> _references_1 (-> [])[0]
has variable
clearing ir...?
TMP_130 = CONVERT 0 to address
has variable
[i] TMP_130 cleared
clearing ir...?
TMP_131(bool) = REF_35 != TMP_130
has variable
[i] TMP_131 cleared
clearing ir...?
TMP_132(bool) = TMP_129 && TMP_131
has variable
[i] TMP_132 cleared
clearing ir...?
REF_36(address) -> _references_1 (-> [])[1]
has variable
clearing ir...?
TMP_133 = CONVERT 0 to address
has variable
[i] TMP_133 cleared
clearing ir...?
TMP_134(bool) = REF_36 != TMP_133
has variable
[i] TMP_134 cleared
clearing ir...?
TMP_135(bool) = TMP_132 && TMP_134
has variable
[i] TMP_135 cleared
clearing ir...?
REF_37(address) -> _references_1 (-> [])[2]
has variable
clearing ir...?
TMP_136 = CONVERT 0 to address
has variable
[i] TMP_136 cleared
clearing ir...?
TMP_137(bool) = REF_37 != TMP_136
has variable
[i] TMP_137 cleared
clearing ir...?
TMP_138(bool) = TMP_135 && TMP_137
has variable
[i] TMP_138 cleared
clearing ir...?
REF_38(address) -> _references_1 (-> [])[3]
has variable
clearing ir...?
TMP_139 = CONVERT 0 to address
has variable
[i] TMP_139 cleared
clearing ir...?
TMP_140(bool) = REF_38 != TMP_139
has variable
[i] TMP_140 cleared
clearing ir...?
TMP_141(bool) = TMP_138 && TMP_140
has variable
[i] TMP_141 cleared
clearing ir...?
REF_39(address) -> _references_1 (-> [])[4]
has variable
clearing ir...?
TMP_142 = CONVERT 0 to address
has variable
[i] TMP_142 cleared
clearing ir...?
TMP_143(bool) = REF_39 != TMP_142
has variable
[i] TMP_143 cleared
clearing ir...?
TMP_144(bool) = TMP_141 && TMP_143
has variable
[i] TMP_144 cleared
clearing ir...?
REF_40(uint256) -> _conditions_1 (-> [])[0]
has variable
clearing ir...?
REF_41(uint256) -> _conditions_1 (-> [])[1]
has variable
clearing ir...?
TMP_145(bool) = REF_40 <= REF_41
has variable
[i] TMP_145 cleared
clearing ir...?
TMP_146(bool) = TMP_144 && TMP_145
has variable
[i] TMP_146 cleared
clearing ir...?
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,ERROR: INITIALIZATION_BAD_CONDITIONS)
typecheckig node...
TMP_126(bool) = initialized_2 == False
Function name: initialize
[i]Type for TMP_126

Name: TMP_126 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_127 = CONVERT _metaData_1 to bytes
Function name: initialize

Name: _metaData Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_127 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_127

Name: TMP_127 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_34 -> LENGTH TMP_127
[i]Type for REF_34

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_128(bool) = REF_34 > 0
Function name: initialize
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_128 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_128

Name: TMP_128 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_128(bool) = REF_34 > 0
XXXXX
TMP_129(bool) = TMP_126 && TMP_128
Function name: initialize
[i]Type for TMP_129

Name: TMP_129 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_35(address) -> _references_1 (-> [])[0]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_references
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'REF')
----
Type: address
address
Final Type: address
[i]Type for REF_35

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_130 = CONVERT 0 to address
Function name: initialize
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_130 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_130

Name: TMP_130 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_131(bool) = REF_35 != TMP_130
Function name: initialize
[i]Type for TMP_131

Name: TMP_131 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_132(bool) = TMP_129 && TMP_131
Function name: initialize
[i]Type for TMP_132

Name: TMP_132 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_36(address) -> _references_1 (-> [])[1]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_references
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'REF')
----
Type: address
address
Final Type: address
[i]Type for REF_36

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_133 = CONVERT 0 to address
Function name: initialize
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_133 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_133

Name: TMP_133 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_134(bool) = REF_36 != TMP_133
Function name: initialize
[i]Type for TMP_134

Name: TMP_134 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_135(bool) = TMP_132 && TMP_134
Function name: initialize
[i]Type for TMP_135

Name: TMP_135 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_37(address) -> _references_1 (-> [])[2]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_references
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'REF')
----
Type: address
address
Final Type: address
[i]Type for REF_37

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_136 = CONVERT 0 to address
Function name: initialize
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_136 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_136

Name: TMP_136 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_137(bool) = REF_37 != TMP_136
Function name: initialize
[i]Type for TMP_137

Name: TMP_137 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_138(bool) = TMP_135 && TMP_137
Function name: initialize
[i]Type for TMP_138

Name: TMP_138 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_38(address) -> _references_1 (-> [])[3]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_references
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'REF')
----
Type: address
address
Final Type: address
[i]Type for REF_38

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_139 = CONVERT 0 to address
Function name: initialize
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_139 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_139

Name: TMP_139 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_140(bool) = REF_38 != TMP_139
Function name: initialize
[i]Type for TMP_140

Name: TMP_140 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_141(bool) = TMP_138 && TMP_140
Function name: initialize
[i]Type for TMP_141

Name: TMP_141 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_39(address) -> _references_1 (-> [])[4]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_references
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'REF')
----
Type: address
address
Final Type: address
[i]Type for REF_39

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_142 = CONVERT 0 to address
Function name: initialize
val: 0

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: TMP_142 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: 0
val: 0
[i]Type for TMP_142

Name: TMP_142 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
TMP_143(bool) = REF_39 != TMP_142
Function name: initialize
[i]Type for TMP_143

Name: TMP_143 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_144(bool) = TMP_141 && TMP_143
Function name: initialize
[i]Type for TMP_144

Name: TMP_144 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
REF_40(uint256) -> _conditions_1 (-> [])[0]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_conditions
[i]Type for REF_40

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_40(uint256) -> _conditions_1 (-> [])[0]
XXXXX
REF_41(uint256) -> _conditions_1 (-> [])[1]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_conditions
[i]Type for REF_41

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_41(uint256) -> _conditions_1 (-> [])[1]
XXXXX
TMP_145(bool) = REF_40 <= REF_41
Function name: initialize
testing lt...
lnorm: u rnorm: u
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for TMP_145

Name: TMP_145 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_146(bool) = TMP_144 && TMP_145
Function name: initialize
[i]Type for TMP_146

Name: TMP_146 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,ERROR: INITIALIZATION_BAD_CONDITIONS)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
initialized_3(bool) := True(bool)
has variable
typecheckig node...
initialized_3(bool) := True(bool)
Function name: initialize
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: initialized Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for initialized

Name: initialized Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_43(address) -> _references_1 (-> [])[1]
has variable
clearing ir...?
TMP_148 = CONVERT REF_43 to IERC20Metadata
has variable
[i] TMP_148 cleared
clearing ir...?
TMP_149(string) = HIGH_LEVEL_CALL, dest:TMP_148(IERC20Metadata), function:name, arguments:[]  
has variable
[i] TMP_149 cleared
clearing ir...?
TMP_150(bytes) = SOLIDITY_CALL abi.encodePacked()(InsureDAO-,TMP_149,-PoolInsurance)
clearing ir...?
TMP_151 = CONVERT TMP_150 to string
has variable
[i] TMP_151 cleared
clearing ir...?
_name_1(string) := TMP_151(string)
has variable
[i] _name cleared
typecheckig node...
REF_43(address) -> _references_1 (-> [])[1]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_references
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'REF')
----
Type: address
address
Final Type: address
[i]Type for REF_43

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_148 = CONVERT REF_43 to IERC20Metadata
Function name: initialize

Name: REF_43 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef

Name: TMP_148 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_148

Name: TMP_148 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_149(string) = HIGH_LEVEL_CALL, dest:TMP_148(IERC20Metadata), function:name, arguments:[]  
Function name: initialize
High Call: name
func name:name
other func name:name
TMP_149
hlc contract name: REF func_name: name
wfc len: 0
COPIED
[i]Type for TMP_149

Name: TMP_149 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_150(bytes) = SOLIDITY_CALL abi.encodePacked()(InsureDAO-,TMP_149,-PoolInsurance)
[i]Type for TMP_150

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_151 = CONVERT TMP_150 to string
Function name: initialize

Name: TMP_150 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_151 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_151

Name: TMP_151 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_151 = CONVERT TMP_150 to string
XXXXX
_name_1(string) := TMP_151(string)
Function name: initialize
asgn

Name: TMP_151 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _name Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _name

Name: _name Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_name_1(string) := TMP_151(string)
XXXXX
clearning node...
clearing ir...?
REF_46(address) -> _references_1 (-> [])[1]
has variable
clearing ir...?
TMP_152 = CONVERT REF_46 to IERC20Metadata
has variable
[i] TMP_152 cleared
clearing ir...?
TMP_153(string) = HIGH_LEVEL_CALL, dest:TMP_152(IERC20Metadata), function:symbol, arguments:[]  
has variable
[i] TMP_153 cleared
clearing ir...?
TMP_154(bytes) = SOLIDITY_CALL abi.encodePacked()(i-,TMP_153)
clearing ir...?
TMP_155 = CONVERT TMP_154 to string
has variable
[i] TMP_155 cleared
clearing ir...?
_symbol_1(string) := TMP_155(string)
has variable
[i] _symbol cleared
typecheckig node...
REF_46(address) -> _references_1 (-> [])[1]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_references
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'REF')
----
Type: address
address
Final Type: address
[i]Type for REF_46

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_152 = CONVERT REF_46 to IERC20Metadata
Function name: initialize

Name: REF_46 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef

Name: TMP_152 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_152

Name: TMP_152 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_153(string) = HIGH_LEVEL_CALL, dest:TMP_152(IERC20Metadata), function:symbol, arguments:[]  
Function name: initialize
High Call: symbol
func name:symbol
other func name:symbol
TMP_153
hlc contract name: REF func_name: symbol
wfc len: 0
COPIED
[i]Type for TMP_153

Name: TMP_153 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_154(bytes) = SOLIDITY_CALL abi.encodePacked()(i-,TMP_153)
[i]Type for TMP_154

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_155 = CONVERT TMP_154 to string
Function name: initialize

Name: TMP_154 Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: TMP_155 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_155

Name: TMP_155 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
TMP_155 = CONVERT TMP_154 to string
XXXXX
_symbol_1(string) := TMP_155(string)
Function name: initialize
asgn

Name: TMP_155 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _symbol Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _symbol

Name: _symbol Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_symbol_1(string) := TMP_155(string)
XXXXX
clearning node...
clearing ir...?
REF_48(address) -> _references_1 (-> [])[0]
has variable
clearing ir...?
TMP_156 = CONVERT REF_48 to IERC20Metadata
has variable
[i] TMP_156 cleared
clearing ir...?
TMP_157(uint8) = HIGH_LEVEL_CALL, dest:TMP_156(IERC20Metadata), function:decimals, arguments:[]  
has variable
[i] TMP_157 cleared
clearing ir...?
_decimals_1(uint8) := TMP_157(uint8)
has variable
[i] _decimals cleared
typecheckig node...
REF_48(address) -> _references_1 (-> [])[0]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_references
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'REF')
----
Type: address
address
Final Type: address
[i]Type for REF_48

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_156 = CONVERT REF_48 to IERC20Metadata
Function name: initialize

Name: REF_48 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef

Name: TMP_156 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_156

Name: TMP_156 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_157(uint8) = HIGH_LEVEL_CALL, dest:TMP_156(IERC20Metadata), function:decimals, arguments:[]  
Function name: initialize
High Call: decimals
func name:decimals
other func name:decimals
TMP_157
hlc contract name: REF func_name: decimals
wfc len: 0
COPIED
[i]Type for TMP_157

Name: TMP_157 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_decimals_1(uint8) := TMP_157(uint8)
Function name: initialize
asgn

Name: TMP_157 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _decimals Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _decimals

Name: _decimals Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
INTERNAL_CALL, InsureDAOERC20.initializeToken(string,string,uint8)(_name_1,_symbol_1,_decimals_1)
typecheckig node...
INTERNAL_CALL, InsureDAOERC20.initializeToken(string,string,uint8)(_name_1,_symbol_1,_decimals_1)
Internal call...
initializeToken
_name
_symbol
_decimals
Function: initializeToken
ic
Internal cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[], [], 'u', None, [], -1]
[[], [], 'u', None, [], -1]
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: initializeToken
Function Visibility: internal
clearning node...
clearing ir...?
name__1(string) := ϕ(['_name_1'])
has variable
[i] name_ cleared
clearing ir...?
symbol__1(string) := ϕ(['_symbol_1'])
has variable
[i] symbol_ cleared
clearing ir...?
decimals__1(uint8) := ϕ(['_decimals_1'])
has variable
[i] decimals_ cleared
clearing ir...?
tokenInitialized_1(bool) := ϕ(['tokenInitialized_0', 'tokenInitialized_2'])
has variable
typecheckig node...
name__1(string) := ϕ(['_name_1'])
Function name: initializeToken
Phi
[i]Type for name_

Name: name_ Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
symbol__1(string) := ϕ(['_symbol_1'])
Function name: initializeToken
Phi
[i]Type for symbol_

Name: symbol_ Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
decimals__1(uint8) := ϕ(['_decimals_1'])
Function name: initializeToken
Phi
[i]Type for decimals_

Name: decimals_ Function: initializeToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tokenInitialized_1(bool) := ϕ(['tokenInitialized_0', 'tokenInitialized_2'])
Function name: initializeToken
Phi
[i]Type for tokenInitialized

Name: tokenInitialized Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_63 = ! tokenInitialized_1 
clearing ir...?
TMP_64(None) = SOLIDITY_CALL assert(bool)(TMP_63)
typecheckig node...
TMP_63 = ! tokenInitialized_1 
[i]Type for TMP_63

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_64(None) = SOLIDITY_CALL assert(bool)(TMP_63)
[i]Type for TMP_64

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
tokenInitialized_2(bool) := True(bool)
has variable
typecheckig node...
tokenInitialized_2(bool) := True(bool)
Function name: initializeToken
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: tokenInitialized Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenInitialized

Name: tokenInitialized Function: initializeToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
_name_1(string) := name__1(string)
has variable
typecheckig node...
_name_1(string) := name__1(string)
Function name: initializeToken
asgn

Name: name_ Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _name Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _name

Name: _name Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_name_1(string) := name__1(string)
XXXXX
clearning node...
clearing ir...?
_symbol_1(string) := symbol__1(string)
has variable
typecheckig node...
_symbol_1(string) := symbol__1(string)
Function name: initializeToken
asgn

Name: symbol_ Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _symbol Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _symbol

Name: _symbol Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_symbol_1(string) := symbol__1(string)
XXXXX
clearning node...
clearing ir...?
_decimals_1(uint8) := decimals__1(uint8)
has variable
typecheckig node...
_decimals_1(uint8) := decimals__1(uint8)
Function name: initializeToken
asgn

Name: decimals_ Function: initializeToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _decimals Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _decimals

Name: _decimals Function: initializeToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 0 for function call "initializeToken":
 New undefined nodes- 2
 Old undefined nodes- 0
typecheckig node...
name__1(string) := ϕ(['_name_1'])
Function name: initializeToken
Phi
[i]Type for name_

Name: name_ Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
symbol__1(string) := ϕ(['_symbol_1'])
Function name: initializeToken
Phi
[i]Type for symbol_

Name: symbol_ Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
decimals__1(uint8) := ϕ(['_decimals_1'])
Function name: initializeToken
Phi
[i]Type for decimals_

Name: decimals_ Function: initializeToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
tokenInitialized_1(bool) := ϕ(['tokenInitialized_0', 'tokenInitialized_2'])
Function name: initializeToken
Phi
[i]Type for tokenInitialized

Name: tokenInitialized Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
TMP_63 = ! tokenInitialized_1 
[i]Type for TMP_63

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_64(None) = SOLIDITY_CALL assert(bool)(TMP_63)
[i]Type for TMP_64

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
tokenInitialized_2(bool) := True(bool)
Function name: initializeToken
asgn
val: True

Name: True Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: tokenInitialized Function: initializeToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
val: True
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for tokenInitialized

Name: tokenInitialized Function: initializeToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
typecheckig node...
_name_1(string) := name__1(string)
Function name: initializeToken
asgn

Name: name_ Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _name Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _name

Name: _name Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_name_1(string) := name__1(string)
XXXXX
typecheckig node...
_symbol_1(string) := symbol__1(string)
Function name: initializeToken
asgn

Name: symbol_ Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _symbol Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _symbol

Name: _symbol Function: initializeToken
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
_symbol_1(string) := symbol__1(string)
XXXXX
typecheckig node...
_decimals_1(uint8) := decimals__1(uint8)
Function name: initializeToken
asgn

Name: decimals_ Function: initializeToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: _decimals Function: initializeToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _decimals

Name: _decimals Function: initializeToken
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
WORKLIST iteration 1 for function call "initializeToken":
 New undefined nodes- 2
 Old undefined nodes- 2
Saving return values for: initializeToken
done.
This IR caused addback:
INTERNAL_CALL, InsureDAOERC20.initializeToken(string,string,uint8)(_name_1,_symbol_1,_decimals_1)
XXXXX
clearning node...
clearing ir...?
REF_50(address) -> _references_1 (-> [])[2]
has variable
clearing ir...?
TMP_159 = CONVERT REF_50 to IRegistry
has variable
[i] TMP_159 cleared
clearing ir...?
registry_1(IRegistry) := TMP_159(IRegistry)
has variable
typecheckig node...
REF_50(address) -> _references_1 (-> [])[2]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_references
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'REF')
----
Type: address
address
Final Type: address
[i]Type for REF_50

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_159 = CONVERT REF_50 to IRegistry
Function name: initialize

Name: REF_50 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef

Name: TMP_159 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_159

Name: TMP_159 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
registry_1(IRegistry) := TMP_159(IRegistry)
Function name: initialize
asgn

Name: TMP_159 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef

Name: registry Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for registry

Name: registry Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_51(address) -> _references_1 (-> [])[3]
has variable
clearing ir...?
TMP_160 = CONVERT REF_51 to IParameters
has variable
[i] TMP_160 cleared
clearing ir...?
parameters_1(IParameters) := TMP_160(IParameters)
has variable
typecheckig node...
REF_51(address) -> _references_1 (-> [])[3]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_references
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'REF')
----
Type: address
address
Final Type: address
[i]Type for REF_51

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_160 = CONVERT REF_51 to IParameters
Function name: initialize

Name: REF_51 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef

Name: TMP_160 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_160

Name: TMP_160 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
parameters_1(IParameters) := TMP_160(IParameters)
Function name: initialize
asgn

Name: TMP_160 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef

Name: parameters Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for parameters

Name: parameters Function: initialize
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_53(address) -> _references_1 (-> [])[1]
has variable
clearing ir...?
TMP_161(address) = HIGH_LEVEL_CALL, dest:parameters_1(IParameters), function:getVault, arguments:['REF_53']  
has variable
[i] TMP_161 cleared
clearing ir...?
parameters_2(IParameters) := ϕ(['parameters_1', 'parameters_23', 'parameters_8', 'parameters_21', 'parameters_10', 'parameters_18', 'parameters_2'])
has variable
clearing ir...?
TMP_162 = CONVERT TMP_161 to IVault
has variable
[i] TMP_162 cleared
clearing ir...?
vault_1(IVault) := TMP_162(IVault)
has variable
typecheckig node...
REF_53(address) -> _references_1 (-> [])[1]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_references
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'REF')
----
Type: address
address
Final Type: address
[i]Type for REF_53

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_161(address) = HIGH_LEVEL_CALL, dest:parameters_1(IParameters), function:getVault, arguments:['REF_53']  
Function name: initialize
High Call: getVault
func name:getVault
other func name:getVault
TMP_161
hlc contract name: REF func_name: getVault
('c', [-1], [-1], 0, 'VAULT')
REF_53
wfc len: 1
Check copy_toekn_tuple
([-1], [-1], 0, 'VAULT', -1)
----
Type: address
address
Final Type: address
COPIED
[i]Type for TMP_161

Name: TMP_161 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: VAULT
Fields: 
Finance Type: undef
done.
parameters_2(IParameters) := ϕ(['parameters_1', 'parameters_23', 'parameters_8', 'parameters_21', 'parameters_10', 'parameters_18', 'parameters_2'])
Function name: initialize
Phi
[i]Type for parameters

Name: parameters Function: global
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_162 = CONVERT TMP_161 to IVault
Function name: initialize

Name: TMP_161 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: VAULT
Fields: 
Finance Type: undef

Name: TMP_162 Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for TMP_162

Name: TMP_162 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: VAULT
Fields: 
Finance Type: undef
done.
vault_1(IVault) := TMP_162(IVault)
Function name: initialize
asgn

Name: TMP_162 Function: initialize
Num: -1
Den: -1
Norm: 0
LF: VAULT
Fields: 
Finance Type: undef

Name: vault Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for vault

Name: vault Function: initialize
Num: -1
Den: -1
Norm: 0
LF: VAULT
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
metadata_1(string) := _metaData_1(string)
has variable
typecheckig node...
metadata_1(string) := _metaData_1(string)
Function name: initialize
asgn

Name: _metaData Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: metadata Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for metadata

Name: metadata Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_54(PoolTemplate.MarketStatus) -> MarketStatus.Trading
has variable
clearing ir...?
marketStatus_1(PoolTemplate.MarketStatus) := REF_54(PoolTemplate.MarketStatus)
has variable
typecheckig node...
REF_54(PoolTemplate.MarketStatus) -> MarketStatus.Trading
Function name: initialize
MEMBER
MarketStatus
MarketStatus
Trading
global
MarketStatus Fields:
^^^
[i]Type for REF_54

Name: MarketStatus.Trading Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MarketStatus.Trading Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Trading Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
marketStatus_1(PoolTemplate.MarketStatus) := REF_54(PoolTemplate.MarketStatus)
Function name: initialize
asgn

Name: MarketStatus.Trading Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: marketStatus Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for marketStatus

Name: marketStatus Function: initialize
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
marketStatus_1(PoolTemplate.MarketStatus) := REF_54(PoolTemplate.MarketStatus)
XXXXX
clearning node...
clearing ir...?
REF_55(uint256) -> _conditions_1 (-> [])[1]
has variable
clearing ir...?
TMP_163(bool) = REF_55 > 0
has variable
[i] TMP_163 cleared
clearing ir...?
CONDITION TMP_163
typecheckig node...
REF_55(uint256) -> _conditions_1 (-> [])[1]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_conditions
[i]Type for REF_55

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_55(uint256) -> _conditions_1 (-> [])[1]
XXXXX
TMP_163(bool) = REF_55 > 0
Function name: initialize
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_163

Name: TMP_163 Function: initialize
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
CONDITION TMP_163
Condition...
Conidtion: 
TMP_163
TMP_163
clearning node...
typecheckig node...
clearning node...
clearing ir...?
REF_56(uint256) -> _conditions_1 (-> [])[1]
has variable
clearing ir...?
REF_57(address) -> _references_1 (-> [])[4]
has variable
clearing ir...?
TMP_164(uint256) = INTERNAL_CALL, PoolTemplate._depositFrom(uint256,address)(REF_56,REF_57)
has variable
[i] TMP_164 cleared
typecheckig node...
REF_56(uint256) -> _conditions_1 (-> [])[1]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_conditions
[i]Type for REF_56

Name: None Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
This IR caused addback:
REF_56(uint256) -> _conditions_1 (-> [])[1]
XXXXX
REF_57(address) -> _references_1 (-> [])[4]
Function name: initialize
INDEX

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Name: None
_references
REFERENCE TYPE READ
Check copy_toekn_tuple
([-1], [-1], 0, 'REF')
----
Type: address
address
Final Type: address
[i]Type for REF_57

Name: None Function: None
Num: -1
Den: -1
Norm: 0
LF: REF
Fields: 
Finance Type: undef
done.
TMP_164(uint256) = INTERNAL_CALL, PoolTemplate._depositFrom(uint256,address)(REF_56,REF_57)
Function name: initialize
Internal call...
_depositFrom
REF_56
REF_57
Function: _depositFrom
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: REF
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: 0
    link: REF
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
[[-1], [-1], 0, 'REF', [], -1]
added
xyz
Function name: _depositFrom
Function Visibility: internal
clearning node...
clearing ir...?
_amount_1(uint256) := ϕ(['REF_56'])
has variable
[i] _amount cleared
clearing ir...?
_from_1(address) := ϕ(['REF_57'])
has variable
[i] _from cleared
clearing ir...?
paused_2(bool) := ϕ(['paused_11', 'paused_0', 'paused_12', 'paused_9', 'paused_7'])
has variable
clearing ir...?
vault_5(IVault) := ϕ(['vault_0', 'vault_1', 'vault_7', 'vault_19', 'vault_25', 'vault_35', 'vault_33', 'vault_4', 'vault_24', 'vault_45', 'vault_42', 'vault_16', 'vault_18'])
has variable
clearing ir...?
marketStatus_3(PoolTemplate.MarketStatus) := ϕ(['marketStatus_1', 'marketStatus_16', 'marketStatus_18', 'marketStatus_6', 'marketStatus_13', 'marketStatus_8', 'marketStatus_15', 'marketStatus_0'])
has variable
typecheckig node...
_amount_1(uint256) := ϕ(['REF_56'])
Function name: _depositFrom
Phi
[i]Type for _amount

Name: _amount Function: _depositFrom
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
_from_1(address) := ϕ(['REF_57'])
Function name: _depositFrom
Phi
[i]Type for _from

Name: _from Function: _depositFrom
Num: -1
Den: -1
Norm: u
LF: REF
Fields: 
Finance Type: undef
done.
paused_2(bool) := ϕ(['paused_11', 'paused_0', 'paused_12', 'paused_9', 'paused_7'])
Function name: _depositFrom
Phi
[i]Type for paused

Name: paused Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
vault_5(IVault) := ϕ(['vault_0', 'vault_1', 'vault_7', 'vault_19', 'vault_25', 'vault_35', 'vault_33', 'vault_4', 'vault_24', 'vault_45', 'vault_42', 'vault_16', 'vault_18'])
Function name: _depositFrom
Phi
[i]Type for vault

Name: vault Function: global
Num: -1
Den: -1
Norm: 0
LF: VAULT
Fields: 
Finance Type: undef
done.
marketStatus_3(PoolTemplate.MarketStatus) := ϕ(['marketStatus_1', 'marketStatus_16', 'marketStatus_18', 'marketStatus_6', 'marketStatus_13', 'marketStatus_8', 'marketStatus_15', 'marketStatus_0'])
Function name: _depositFrom
Phi
[i]Type for marketStatus

Name: marketStatus Function: _depositFrom
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
REF_60(PoolTemplate.MarketStatus) -> MarketStatus.Trading
has variable
clearing ir...?
TMP_176(bool) = marketStatus_3 == REF_60
has variable
[i] TMP_176 cleared
clearing ir...?
TMP_177(bool) = paused_2 == False
has variable
[i] TMP_177 cleared
clearing ir...?
TMP_178(bool) = TMP_176 && TMP_177
has variable
[i] TMP_178 cleared
clearing ir...?
TMP_179(None) = SOLIDITY_CALL require(bool,string)(TMP_178,ERROR: DEPOSIT_DISABLED)
typecheckig node...
REF_60(PoolTemplate.MarketStatus) -> MarketStatus.Trading
Function name: _depositFrom
MEMBER
MarketStatus
MarketStatus
Trading
global
MarketStatus Fields:
Trading
^^^

Name: Trading Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
[i]Type for REF_60

Name: MarketStatus.Trading Function: _depositFrom
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: MarketStatus.Trading Function: _depositFrom
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef

Name: Trading Function: None
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_176(bool) = marketStatus_3 == REF_60
Function name: _depositFrom
[i]Type for TMP_176

Name: TMP_176 Function: _depositFrom
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_177(bool) = paused_2 == False
Function name: _depositFrom
[i]Type for TMP_177

Name: TMP_177 Function: _depositFrom
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_178(bool) = TMP_176 && TMP_177
Function name: _depositFrom
[i]Type for TMP_178

Name: TMP_178 Function: _depositFrom
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_179(None) = SOLIDITY_CALL require(bool,string)(TMP_178,ERROR: DEPOSIT_DISABLED)
[i]Type for TMP_179

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_180(bool) = _amount_1 > 0
has variable
[i] TMP_180 cleared
clearing ir...?
TMP_181(None) = SOLIDITY_CALL require(bool,string)(TMP_180,ERROR: DEPOSIT_ZERO)
typecheckig node...
TMP_180(bool) = _amount_1 > 0
Function name: _depositFrom
testing gt...
val: 0
val: 0
lnorm: u rnorm: 0
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1

Name: 0 Function: None
Num: -1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
True
[i]Type for TMP_180

Name: TMP_180 Function: _depositFrom
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
TMP_181(None) = SOLIDITY_CALL require(bool,string)(TMP_180,ERROR: DEPOSIT_ZERO)
[i]Type for TMP_181

Name: None Function: None
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_182(uint256) = INTERNAL_CALL, PoolTemplate.worth(uint256)(_amount_1)
has variable
[i] TMP_182 cleared
clearing ir...?
_mintAmount_1(uint256) := TMP_182(uint256)
has variable
[i] _mintAmount cleared
typecheckig node...
TMP_182(uint256) = INTERNAL_CALL, PoolTemplate.worth(uint256)(_amount_1)
Function name: _depositFrom
Internal call...
worth
_amount
Function: worth
ic
Internal cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
-100
Add new
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Parameter length: 1
[[-1], [-1], 'u', None, [], -1]
added
xyz
Function name: worth
Function Visibility: public
clearning node...
clearing ir...?
_value_1(uint256) := ϕ(['_amount_1', '_amount_1'])
has variable
[i] _value cleared
typecheckig node...
_value_1(uint256) := ϕ(['_amount_1', '_amount_1'])
Function name: worth
Phi
[i]Type for _value

Name: _value Function: worth
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_390(uint256) = INTERNAL_CALL, InsureDAOERC20.totalSupply()()
has variable
[i] TMP_390 cleared
clearing ir...?
_supply_1(uint256) := TMP_390(uint256)
has variable
[i] _supply cleared
typecheckig node...
TMP_390(uint256) = INTERNAL_CALL, InsureDAOERC20.totalSupply()()
Function name: worth
Internal call...
totalSupply
Function: totalSupply
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: totalSupply
Function Visibility: public
clearning node...
clearing ir...?
_totalSupply_1(uint256) := ϕ(['_totalSupply_7', '_totalSupply_0', '_totalSupply_4'])
has variable
typecheckig node...
_totalSupply_1(uint256) := ϕ(['_totalSupply_7', '_totalSupply_0', '_totalSupply_4'])
Function name: totalSupply
Phi
[i]Type for _totalSupply

Name: _totalSupply Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
RETURN _totalSupply_1
typecheckig node...
RETURN _totalSupply_1
RETURN

Name: _totalSupply Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
WORKLIST iteration 0 for function call "totalSupply":
 New undefined nodes- 0
 Old undefined nodes- 0
Saving return values for: totalSupply

Name: _totalSupply Function: global
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
___
[i]Type for TMP_390

Name: TMP_390 Function: worth
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
_supply_1(uint256) := TMP_390(uint256)
Function name: worth
asgn

Name: TMP_390 Function: worth
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef

Name: _supply Function: worth
Num: 
Den: 
Norm: u
LF: None
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
Func: assign
Dest type: -1, Update_ratios: {10: -1, 12: -1, 20: -1, 21: -1}
Right type: -1, Left type: -1
Final dest type: -1
[i]Type for _supply

Name: _supply Function: worth
Num: 1
Den: -1
Norm: 0
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_391(uint256) = INTERNAL_CALL, PoolTemplate.originalLiquidity()()
has variable
[i] TMP_391 cleared
clearing ir...?
_originalLiquidity_1(uint256) := TMP_391(uint256)
has variable
[i] _originalLiquidity cleared
typecheckig node...
TMP_391(uint256) = INTERNAL_CALL, PoolTemplate.originalLiquidity()()
Function name: worth
Internal call...
originalLiquidity
Function: originalLiquidity
ic
Internal cal param_cache
-100
Add new
Parameter length: 1
added
xyz
Function name: originalLiquidity
Function Visibility: public
clearning node...
clearing ir...?
vault_43(IVault) := ϕ(['vault_0', 'vault_1', 'vault_7', 'vault_19', 'vault_25', 'vault_35', 'vault_33', 'vault_4', 'vault_24', 'vault_45', 'vault_42', 'vault_16', 'vault_18'])
has variable
clearing ir...?
attributionDebt_21(uint256) := ϕ(['attributionDebt_9', 'attributionDebt_23', 'attributionDebt_2', 'attributionDebt_0', 'attributionDebt_11', 'attributionDebt_3', 'attributionDebt_19'])
has variable
typecheckig node...
vault_43(IVault) := ϕ(['vault_0', 'vault_1', 'vault_7', 'vault_19', 'vault_25', 'vault_35', 'vault_33', 'vault_4', 'vault_24', 'vault_45', 'vault_42', 'vault_16', 'vault_18'])
Function name: originalLiquidity
Phi
[i]Type for vault

Name: vault Function: global
Num: -1
Den: -1
Norm: 0
LF: VAULT
Fields: 
Finance Type: undef
done.
attributionDebt_21(uint256) := ϕ(['attributionDebt_9', 'attributionDebt_23', 'attributionDebt_2', 'attributionDebt_0', 'attributionDebt_11', 'attributionDebt_3', 'attributionDebt_19'])
Function name: originalLiquidity
Phi
[i]Type for attributionDebt

Name: attributionDebt Function: global
Num: -1
Den: -1
Norm: u
LF: None
Fields: 
Finance Type: undef
done.
clearning node...
clearing ir...?
TMP_411 = CONVERT this to address
has variable
[i] TMP_411 cleared
clearing ir...?
TMP_412(uint256) = HIGH_LEVEL_CALL, dest:vault_43(IVault), function:underlyingValue, arguments:['TMP_411']  
has variable
[i] TMP_412 cleared
clearing ir...?
vault_44(IVault) := ϕ(['vault_1', 'vault_7', 'vault_19', 'vault_25', 'vault_35', 'vault_33', 'vault_4', 'vault_24', 'vault_45', 'vault_42', 'vault_16', 'vault_43', 'vault_18'])
has variable
clearing ir...?
attributionDebt_22(uint256) := ϕ(['attributionDebt_9', 'attributionDebt_23', 'attributionDebt_2', 'attributionDebt_11', 'attributionDebt_21', 'attributionDebt_3', 'attributionDebt_19'])
has variable
clearing ir...?
TMP_413(uint256) = HIGH_LEVEL_CALL, dest:vault_44(IVault), function:attributionValue, arguments:['attributionDebt_22']  
has variable
[i] TMP_413 cleared
clearing ir...?
vault_45(IVault) := ϕ(['vault_44', 'vault_1', 'vault_7', 'vault_19', 'vault_25', 'vault_35', 'vault_33', 'vault_4', 'vault_24', 'vault_45', 'vault_42', 'vault_16', 'vault_18'])
has variable
clearing ir...?
attributionDebt_23(uint256) := ϕ(['attributionDebt_9', 'attributionDebt_23', 'attributionDebt_2', 'attributionDebt_22', 'attributionDebt_11', 'attributionDebt_3', 'attributionDebt_19'])
has variable
clearing ir...?
TMP_414(uint256) = TMP_412 (c)- TMP_413
has variable
[i] TMP_414 cleared
clearing ir...?
RETURN TMP_414
typecheckig node...
TMP_411 = CONVERT this to address
Function name: originalLiquidity
[i]Type for TMP_411

Name: TMP_411 Function: originalLiquidity
Num: -1
Den: -1
Norm: u
LF: PoolTemplate
Fields: 
Finance Type: undef
done.
TMP_412(uint256) = HIGH_LEVEL_CALL, dest:vault_43(IVault), function:underlyingValue, arguments:['TMP_411']  
Function name: originalLiquidity
High Call: underlyingValue
func name:underlyingValue
other func name:underlyingValue
TMP_412
hlc contract name: VAULT func_name: underlyingValue
TMP_412
Finding type for hlc_0...
uint256
[x]Failed to fetch type from type file, defaulting to human interface
Define num type for "hlc_0": 
