{
  "address": "0xfE4AF289b1a3fA6ac8902031eAD94ff4D57D01f8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "ReferralCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_referredTrader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "Referred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "createReferralCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "getReferral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getReferred",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_codeOwners",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_ownedCodes",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "_referredA",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_referredTo",
          "type": "bytes32[]"
        }
      ],
      "name": "initRefs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "setProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referredTrader",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "setReferred",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f6b7175c736b19906ad3515b6b9ef90673d74fb352992392ebcc8a1271f2d40",
  "receipt": {
    "to": null,
    "from": "0x8c807CDdB6fAADF96956353f70ea60D63fAb69D5",
    "contractAddress": "0xfE4AF289b1a3fA6ac8902031eAD94ff4D57D01f8",
    "transactionIndex": 26,
    "gasUsed": "716318",
    "logsBloom": "0x
    "blockHash": "0xe367c08cd7235e48ac7126c617da2f01b229e59038118dfb26f59c3abfefbada",
    "transactionHash": "0x7f6b7175c736b19906ad3515b6b9ef90673d74fb352992392ebcc8a1271f2d40",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 34502270,
        "transactionHash": "0x7f6b7175c736b19906ad3515b6b9ef90673d74fb352992392ebcc8a1271f2d40",
        "address": "0xfE4AF289b1a3fA6ac8902031eAD94ff4D57D01f8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c807cddb6faadf96956353f70ea60d63fab69d5"
        ],
        "data": "0x",
        "logIndex": 68,
        "blockHash": "0xe367c08cd7235e48ac7126c617da2f01b229e59038118dfb26f59c3abfefbada"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 34502270,
        "transactionHash": "0x7f6b7175c736b19906ad3515b6b9ef90673d74fb352992392ebcc8a1271f2d40",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008c807cddb6faadf96956353f70ea60d63fab69d5",
          "0x00000000000000000000000000856730088a5c3191bd26eb482e45229555ce57"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001033c33d9afda200000000000000000000000000000000000000000000000016ac2842ca762cc3700000000000000000000000000000000000000000000051d435304a4a451644700000000000000000000000000000000000000000000000169bf47f8cdb2f21700000000000000000000000000000000000000000000051d445640d87e013e67",
        "logIndex": 69,
        "blockHash": "0xe367c08cd7235e48ac7126c617da2f01b229e59038118dfb26f59c3abfefbada"
      }
    ],
    "blockNumber": 34502270,
    "cumulativeGasUsed": "4249243",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "710bcf1bfa15842ad8333fd2e3fedacf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"ReferralCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referredTrader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"Referred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"createReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getReferred\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_codeOwners\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_ownedCodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_referredA\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_referredTo\",\"type\":\"bytes32[]\"}],\"name\":\"initRefs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredTrader\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"setReferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Referrals.sol\":\"Referrals\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Referrals.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IReferrals.sol\\\";\\n\\ncontract Referrals is Ownable, IReferrals {\\n\\n    bool private isInit;\\n\\n    address public protocol;\\n\\n    mapping(bytes32 => address) private _referral;\\n    mapping(address => bytes32) private _referred;\\n\\n    function createReferralCode(bytes32 _hash) external {\\n        require(_referral[_hash] == address(0), \\\"Referral code already exists\\\");\\n        _referral[_hash] = _msgSender();\\n        emit ReferralCreated(_msgSender(), _hash);\\n    }\\n\\n    function setReferred(address _referredTrader, bytes32 _hash) external onlyProtocol {\\n        if (_referred[_referredTrader] != bytes32(0)) {\\n            return;\\n        }\\n        if (_referredTrader == _referral[_hash]) {\\n            return;\\n        }\\n        _referred[_referredTrader] = _hash;\\n        emit Referred(_referredTrader, _hash);\\n    }\\n\\n    function getReferred(address _trader) external view returns (bytes32) {\\n        return _referred[_trader];\\n    }\\n\\n    function getReferral(bytes32 _hash) external view returns (address) {\\n        return _referral[_hash];\\n    }\\n\\n    // Owner\\n\\n    function setProtocol(address _protocol) external onlyOwner {\\n        protocol = _protocol;\\n    }\\n\\n    function initRefs(\\n        address[] memory _codeOwners,\\n        bytes32[] memory _ownedCodes,\\n        address[] memory _referredA,\\n        bytes32[] memory _referredTo\\n    ) external onlyOwner {\\n        require(!isInit);\\n        isInit = true;\\n        uint _codeOwnersL = _codeOwners.length;\\n        uint _referredAL = _referredA.length;\\n        for (uint i=0; i<_codeOwnersL; i++) {\\n            _referral[_ownedCodes[i]] = _codeOwners[i];\\n        }\\n        for (uint i=0; i<_referredAL; i++) {\\n            _referred[_referredA[i]] = _referredTo[i];\\n        }\\n    }\\n\\n    // Modifiers\\n\\n    modifier onlyProtocol() {\\n        require(_msgSender() == address(protocol), \\\"!Protocol\\\");\\n        _;\\n    }\\n\\n    event ReferralCreated(address _referrer, bytes32 _hash);\\n    event Referred(address _referredTrader, bytes32 _hash);\\n\\n}\",\"keccak256\":\"0x4423372d05d1cdd61144823ff3995ad374467145aae30ac3a514724e2b1951bb\",\"license\":\"Unlicense\"},\"contracts/interfaces/IReferrals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IReferrals {\\n\\n    function createReferralCode(bytes32 _hash) external;\\n    function setReferred(address _referredTrader, bytes32 _hash) external;\\n    function getReferred(address _trader) external view returns (bytes32);\\n    function getReferral(bytes32 _hash) external view returns (address);\\n    \\n}\",\"keccak256\":\"0xe9eb4e36961dd0c97371b03849177c802f00bbc30f03c9cb99151ef8e5dbe660\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b9d8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638ce7442611610076578063d113f04c1161005b578063d113f04c146101a4578063e20c8548146101e8578063f2fde38b146101fb57600080fd5b80638ce74426146101665780638da5cb5b1461018657600080fd5b8063715018a6116100a7578063715018a6146100eb57806382e58d51146100f3578063888cda9d1461015357600080fd5b80630a9d793d146100c357806330330615146100d8575b600080fd5b6100d66100d1366004610858565b61020e565b005b6100d66100e636600461087a565b61025d565b6100d6610366565b61012961010136600461087a565b60009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100d6610161366004610a02565b61037a565b6001546101299073ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16610129565b6101da6101b2366004610858565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b60405190815260200161014a565b6100d66101f6366004610aaf565b61052d565b6100d6610209366004610858565b610682565b610216610739565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16156102ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f526566657272616c20636f646520616c7265616479206578697374730000000060448201526064015b60405180910390fd5b60008181526002602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633908117909155825190815290810183905281517f5a56e3c54cb51afda5c8ffe89dae0adf7d78e99319eaeadd2539e2ec00cdf043929181900390910190a150565b61036e610739565b61037860006107ba565b565b610382610739565b60005474010000000000000000000000000000000000000000900460ff16156103aa57600080fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001781558451835190915b8281101561048f5786818151811061040a5761040a610ad9565b60200260200101516002600088848151811061042857610428610ad9565b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808061048790610b08565b9150506103f0565b5060005b81811015610524578381815181106104ad576104ad610ad9565b6020026020010151600360008784815181106104cb576104cb610ad9565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061051c90610b08565b915050610493565b50505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f2150726f746f636f6c000000000000000000000000000000000000000000000060448201526064016102e5565b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604090205461067e5760008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff83811691161461067e5773ffffffffffffffffffffffffffffffffffffffff8216600081815260036020908152604091829020849055815192835282018390527f37c9ec64695b190bd0f33ba0a1eba4006268223654349489b4a8b5cb13ffcd89910160405180910390a15b5050565b61068a610739565b73ffffffffffffffffffffffffffffffffffffffff811661072d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102e5565b610736816107ba565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e5565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461085357600080fd5b919050565b60006020828403121561086a57600080fd5b6108738261082f565b9392505050565b60006020828403121561088c57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561090957610909610893565b604052919050565b600067ffffffffffffffff82111561092b5761092b610893565b5060051b60200190565b600082601f83011261094657600080fd5b8135602061095b61095683610911565b6108c2565b82815260059290921b8401810191818101908684111561097a57600080fd5b8286015b8481101561099c5761098f8161082f565b835291830191830161097e565b509695505050505050565b600082601f8301126109b857600080fd5b813560206109c861095683610911565b82815260059290921b840181019181810190868411156109e757600080fd5b8286015b8481101561099c57803583529183019183016109eb565b60008060008060808587031215610a1857600080fd5b843567ffffffffffffffff80821115610a3057600080fd5b610a3c88838901610935565b95506020870135915080821115610a5257600080fd5b610a5e888389016109a7565b94506040870135915080821115610a7457600080fd5b610a8088838901610935565b93506060870135915080821115610a9657600080fd5b50610aa3878288016109a7565b91505092959194509250565b60008060408385031215610ac257600080fd5b610acb8361082f565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b60577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220e7ba72fab98a8f65a25edf51b793d2dab8095329d190c5fe998233087549f6ce64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80638ce7442611610076578063d113f04c1161005b578063d113f04c146101a4578063e20c8548146101e8578063f2fde38b146101fb57600080fd5b80638ce74426146101665780638da5cb5b1461018657600080fd5b8063715018a6116100a7578063715018a6146100eb57806382e58d51146100f3578063888cda9d1461015357600080fd5b80630a9d793d146100c357806330330615146100d8575b600080fd5b6100d66100d1366004610858565b61020e565b005b6100d66100e636600461087a565b61025d565b6100d6610366565b61012961010136600461087a565b60009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100d6610161366004610a02565b61037a565b6001546101299073ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16610129565b6101da6101b2366004610858565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b60405190815260200161014a565b6100d66101f6366004610aaf565b61052d565b6100d6610209366004610858565b610682565b610216610739565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16156102ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f526566657272616c20636f646520616c7265616479206578697374730000000060448201526064015b60405180910390fd5b60008181526002602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633908117909155825190815290810183905281517f5a56e3c54cb51afda5c8ffe89dae0adf7d78e99319eaeadd2539e2ec00cdf043929181900390910190a150565b61036e610739565b61037860006107ba565b565b610382610739565b60005474010000000000000000000000000000000000000000900460ff16156103aa57600080fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001781558451835190915b8281101561048f5786818151811061040a5761040a610ad9565b60200260200101516002600088848151811061042857610428610ad9565b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808061048790610b08565b9150506103f0565b5060005b81811015610524578381815181106104ad576104ad610ad9565b6020026020010151600360008784815181106104cb576104cb610ad9565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061051c90610b08565b915050610493565b50505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f2150726f746f636f6c000000000000000000000000000000000000000000000060448201526064016102e5565b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604090205461067e5760008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff83811691161461067e5773ffffffffffffffffffffffffffffffffffffffff8216600081815260036020908152604091829020849055815192835282018390527f37c9ec64695b190bd0f33ba0a1eba4006268223654349489b4a8b5cb13ffcd89910160405180910390a15b5050565b61068a610739565b73ffffffffffffffffffffffffffffffffffffffff811661072d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102e5565b610736816107ba565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e5565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461085357600080fd5b919050565b60006020828403121561086a57600080fd5b6108738261082f565b9392505050565b60006020828403121561088c57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561090957610909610893565b604052919050565b600067ffffffffffffffff82111561092b5761092b610893565b5060051b60200190565b600082601f83011261094657600080fd5b8135602061095b61095683610911565b6108c2565b82815260059290921b8401810191818101908684111561097a57600080fd5b8286015b8481101561099c5761098f8161082f565b835291830191830161097e565b509695505050505050565b600082601f8301126109b857600080fd5b813560206109c861095683610911565b82815260059290921b840181019181810190868411156109e757600080fd5b8286015b8481101561099c57803583529183019183016109eb565b60008060008060808587031215610a1857600080fd5b843567ffffffffffffffff80821115610a3057600080fd5b610a3c88838901610935565b95506020870135915080821115610a5257600080fd5b610a5e888389016109a7565b94506040870135915080821115610a7457600080fd5b610a8088838901610935565b93506060870135915080821115610a9657600080fd5b50610aa3878288016109a7565b91505092959194509250565b60008060408385031215610ac257600080fd5b610acb8361082f565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b60577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220e7ba72fab98a8f65a25edf51b793d2dab8095329d190c5fe998233087549f6ce64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10313,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "isInit",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10315,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "protocol",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10319,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "_referral",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 10323,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "_referred",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}