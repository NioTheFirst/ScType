{
  "language": "Solidity",
  "sources": {
    "contracts/utils/TradingLibrary.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../interfaces/IPosition.sol\";\n\ninterface IPrice {\n    function latestAnswer() external view returns (int256);\n    function decimals() external view returns (uint256);\n}\n\nstruct PriceData {\n    address provider;\n    uint256 asset;\n    uint256 price;\n    uint256 timestamp;\n    bool isClosed;\n}\n\nlibrary TradingLibrary {\n\n    using ECDSA for bytes32;\n\n    function pnl(bool _direction, uint _currentPrice, uint _price, uint _margin, uint _leverage, int256 accInterest) external pure returns (int256 _positionSize, int256 _payout) {\n        unchecked {\n            if (_direction && _currentPrice >= _price) {\n                _payout = int256(_margin) + int256(_margin * _leverage * (1e18 * _currentPrice / _price - 1e18)/1e18**2) + accInterest;\n                _positionSize = int256(_margin * _leverage / 1e18) + int256(_margin * _leverage * (1e18 * _currentPrice / _price - 1e18)/1e18**2) + accInterest;\n            } else if (_direction && _currentPrice < _price) {\n                _payout = int256(_margin) - int256(_margin * _leverage * (1e18 - 1e18 * _currentPrice / _price)/1e18**2) + accInterest;\n                _positionSize = int256(_margin * _leverage / 1e18) - int256(_margin * _leverage * (1e18 - 1e18 * _currentPrice / _price)/1e18**2) + accInterest;\n            } else if (!_direction && _currentPrice <= _price) {\n                _payout = int256(_margin) + int256(_margin * _leverage * (1e18 - 1e18 * _currentPrice / _price)/1e18**2) + accInterest;\n                _positionSize = int256(_margin * _leverage / 1e18) + int256(_margin * _leverage * (1e18 - 1e18 * _currentPrice / _price)/1e18**2) + accInterest;\n            } else {\n                _payout = int256(_margin) - int256(_margin * _leverage * (1e18 * _currentPrice / _price - 1e18)/1e18**2) + accInterest;\n                _positionSize = int256(_margin * _leverage / 1e18) - int256(_margin * _leverage * (1e18 * _currentPrice / _price - 1e18)/1e18**2) + accInterest;\n            }\n        }\n    }\n\n    function liqPrice(bool _direction, uint _tradePrice, uint _leverage, uint _margin, int _accInterest, uint _liqPercent) public pure returns (uint256 _liqPrice) {\n        if (_direction) {\n            _liqPrice = _tradePrice - ((_tradePrice*1e18/_leverage) * uint(int(_margin)+_accInterest) / _margin) * _liqPercent / 10000;\n        } else {\n            _liqPrice = _tradePrice + ((_tradePrice*1e18/_leverage) * uint(int(_margin)+_accInterest) / _margin) * _liqPercent / 10000;\n        }\n    }\n\n    function getLiqPrice(address _positions, uint _id, uint _liqPercent) external view returns (uint256) {\n        IPosition.Trade memory _trade = IPosition(_positions).trades(_id);\n        return liqPrice(_trade.direction, _trade.price, _trade.leverage, _trade.margin, _trade.accInterest, _liqPercent);\n    }\n\n    function verifyAndCreatePrice(\n        uint256 _minNodeCount,\n        uint256 _validSignatureTimer,\n        uint256 _asset,\n        bool _chainlinkEnabled,\n        address _chainlinkFeed,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature,        \n        mapping(address => bool) storage _nodeProvided,\n        mapping(address => bool) storage _isNode\n    )\n        external returns (uint256)\n    {\n        uint256 _length = _signature.length;\n        require(_priceData.length == _length, \"length\");\n        require(_length >= _minNodeCount, \"minNode\");\n        address[] memory _nodes = new address[](_length);\n        uint256[] memory _prices = new uint256[](_length);\n        for (uint256 i=0; i<_length; i++) {\n            require(_asset == _priceData[i].asset, \"!Asset\");\n            address _provider = (\n                keccak256(abi.encode(_priceData[i]))\n            ).toEthSignedMessageHash().recover(_signature[i]);\n            require(_provider == _priceData[i].provider, \"BadSig\");\n            require(_isNode[_provider], \"!Node\");\n            _nodes[i] = _provider;\n            require(_nodeProvided[_provider] == false, \"NodeP\");\n            _nodeProvided[_provider] = true;\n            require(!_priceData[i].isClosed, \"Closed\");\n            require(block.timestamp >= _priceData[i].timestamp, \"FutSig\");\n            require(block.timestamp <= _priceData[i].timestamp + _validSignatureTimer, \"ExpSig\");\n            require(_priceData[i].price > 0, \"NoPrice\");\n            _prices[i] = _priceData[i].price;\n        }\n        uint256 _price = median(_prices);\n        if (_chainlinkEnabled && _chainlinkFeed != address(0)) {\n            int256 assetChainlinkPriceInt = IPrice(_chainlinkFeed).latestAnswer();\n            if (assetChainlinkPriceInt != 0) {\n                uint256 assetChainlinkPrice = uint256(assetChainlinkPriceInt) * 10**(18 - IPrice(_chainlinkFeed).decimals());\n                require(\n                    _price < assetChainlinkPrice+assetChainlinkPrice*2/100 &&\n                    _price > assetChainlinkPrice-assetChainlinkPrice*2/100, \"!chainlinkPrice\"\n                );\n            }\n        }\n        for (uint i=0; i<_length; i++) {\n            delete _nodeProvided[_nodes[i]];\n        }\n        return _price;\n    }\n\n    /**\n     * @dev Gets the median value from an array\n     * @param array array of unsigned integers to get the median from\n     * @return median value from the array\n     */\n    function median(uint[] memory array) private pure returns(uint) {\n        unchecked {\n            sort(array, 0, array.length);\n            return array.length % 2 == 0 ? (array[array.length/2-1]+array[array.length/2])/2 : array[array.length/2];            \n        }\n    }\n\n    function swap(uint[] memory array, uint i, uint j) private pure { \n        (array[i], array[j]) = (array[j], array[i]); \n    }\n\n    function sort(uint[] memory array, uint begin, uint end) private pure {\n        unchecked {\n            if (begin >= end) { return; }\n            uint j = begin;\n            uint pivot = array[j];\n            for (uint i = begin + 1; i < end; ++i) {\n                if (array[i] < pivot) {\n                    swap(array, i, ++j);\n                }\n            }\n            swap(array, begin, j);\n            sort(array, begin, j);\n            sort(array, j + 1, end);            \n        }\n    }\n}\n"
    },
    "contracts/interfaces/IPosition.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPosition {\n\n    struct Trade {\n        uint margin;\n        uint leverage;\n        uint asset;\n        bool direction;\n        uint price;\n        uint tpPrice;\n        uint slPrice;\n        uint orderType;\n        address trader;\n        uint id;\n        address tigAsset;\n        int accInterest;\n    }\n\n    struct MintTrade {\n        address account;\n        uint256 margin;\n        uint256 leverage;\n        uint256 asset;\n        bool direction;\n        uint256 price;\n        uint256 tp;\n        uint256 sl;\n        uint256 orderType;\n        address tigAsset;\n    }\n\n    function trades(uint256) external view returns (Trade memory);\n    function executeLimitOrder(uint256 _id, uint256 _price, uint256 _newMargin) external;\n    function modifyMargin(uint256 _id, uint256 _newMargin, uint256 _newLeverage) external;\n    function reducePosition(uint256 _id, uint256 _newMargin) external;\n    function assetOpenPositions(uint256 _asset) external view returns (uint256[] calldata);\n    function assetOpenPositionsIndexes(uint256 _asset, uint256 _id) external view returns (uint256);\n    function limitOrders(uint256 _asset) external view returns (uint256[] memory);\n    function limitOrderIndexes(uint256 _asset, uint256 _id) external view returns (uint256);\n    function assetOpenPositionsLength(uint256 _asset) external view returns (uint256);\n    function limitOrdersLength(uint256 _asset) external view returns (uint256);\n    function ownerOf(uint _id) external view returns (address);\n    function mint(MintTrade memory _mintTrade) external;\n    function burn(uint _id) external;\n    function modifyTp(uint _id, uint _tpPrice) external;\n    function modifySl(uint _id, uint _slPrice) external;\n    function getCount() external view returns (uint);\n    function updateFunding(uint256 _asset, address _tigAsset, uint256 _longOi, uint256 _shortOi, uint256 _baseFundingRate) external;\n    function setAccInterest(uint256 _id) external;\n}"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/interfaces/ITrading.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport \"../utils/TradingLibrary.sol\";\n\npragma solidity ^0.8.0;\n\ninterface ITrading {\n\n    struct TradeInfo {\n        uint256 margin;\n        address marginAsset;\n        address stableVault;\n        uint256 leverage;\n        uint256 asset;\n        bool direction;\n        uint256 tpPrice;\n        uint256 slPrice;\n        bytes32 referral;\n    }\n\n    struct ERC20PermitData {\n        uint256 deadline;\n        uint256 amount;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        bool usePermit;\n    }\n\n    function initiateMarketOrder(\n        TradeInfo calldata _tradeInfo,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature,\n        ERC20PermitData calldata _permitData\n    ) external payable;\n\n    function initiateCloseOrder(\n        uint _id,\n        uint _percent,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature,\n        address _stableVault,\n        address _outputToken\n    ) external;\n\n    function initiateLimitOrder(\n        TradeInfo calldata _tradeInfo,\n        uint256 _orderType, // 1 limit, 2 momentum\n        uint256 _price,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature,\n        ERC20PermitData calldata _permitData\n    ) external payable;\n\n    function cancelLimitOrder(\n        uint256 _id\n    ) external;\n\n    function addMargin(\n        uint256 _id,\n        uint256 _addMargin,\n        address _marginAsset,\n        address _stableVault,\n        ERC20PermitData calldata _permitData\n    ) external payable;\n\n    function updateTpSl(\n        bool _type, // true is TP\n        uint _id,\n        uint _limitPrice,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature\n    ) external;\n\n    function executeLimitOrder(\n        uint _id, \n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature\n    ) external;\n\n    function liquidatePosition(\n        uint _id,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature\n    ) external;\n\n    function limitClose(\n        uint _id,\n        bool _tp,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature\n    ) external;\n\n    function allowedMargin(address _tigAsset) external view returns (bool);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}