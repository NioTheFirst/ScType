{
  "language": "Solidity",
  "sources": {
    "contracts/Trading.sol": {
      "content": "//TODO add events\n\n//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"./utils/MetaContext.sol\";\nimport \"./interfaces/ITrading.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IPairsContract.sol\";\nimport \"./interfaces/IPosition.sol\";\nimport \"./interfaces/IGovNFT.sol\";\nimport \"./interfaces/IStableVault.sol\";\nimport \"./interfaces/INativeStableVault.sol\";\nimport \"./utils/TradingLibrary.sol\";\n\n\ninterface IStable is IERC20 {\n    function burnFrom(address account, uint amount) external;\n    function mintFor(address account, uint amount) external;\n}\n\ninterface ExtendedIERC20 is IERC20 {\n    function decimals() external view returns (uint);\n}\n\ninterface ERC20Permit is IERC20 {\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\ncontract Trading is MetaContext, ITrading {\n    mapping(address => bool) private nodeProvided; // Used for TradingLibrary\n\n    uint256 constant private DIVISION_CONSTANT = 10000; // 100%\n    address constant private eth = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\n    uint public daoFees; // 0.1%\n    uint public burnFees; // 0%\n    uint public referralFees; // 0.01%\n    uint public botFees; // 0.02%\n    uint public maxGasPrice = 1000000000000; // 1000 gwei\n    mapping(address => uint) public minPositionSize;\n    uint public liqPercent = 9000; // Default 90%\n    uint public maxWinPercent;\n\n    bool public paused;\n\n    bool public chainlinkEnabled;\n\n    mapping(address => bool) public allowedMargin;\n\n    IPairsContract public pairsContract;\n    IPosition public position;\n    IGovNFT public gov;\n\n    mapping(address => bool) private isNode;\n    uint256 public validSignatureTimer;\n    uint256 public minNodeCount;\n\n    mapping(uint => uint) public blockDelayPassed; // id => block.number\n    uint public blockDelay;\n\n    constructor(\n        address _position,\n        address _gov,\n        address _pairsContract\n    )\n    {\n        position = IPosition(_position);\n        gov = IGovNFT(_gov);\n        pairsContract = IPairsContract(_pairsContract);\n    }\n\n\n\n    // ===== END-USER FUNCTIONS =====\n\n    /**\n     * @param _tradeInfo Trade info\n     * @param _priceData verifiable off-chain data\n     * @param _signature node signature\n     * @param _permitData data and signature needed for token approval\n     */\n    function initiateMarketOrder(\n        TradeInfo calldata _tradeInfo,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature,\n        ERC20PermitData calldata _permitData\n    )\n        external payable\n    {\n        _checkDelay(position.getCount());\n        address _tigAsset = IStableVault(_tradeInfo.stableVault).stable();\n        validateTrade(_tradeInfo.asset, _tigAsset, _tradeInfo.margin, _tradeInfo.leverage);\n        _handleDeposit(_tigAsset, _tradeInfo.marginAsset, _tradeInfo.margin, _tradeInfo.stableVault, _permitData);\n        uint256 _price = TradingLibrary.verifyAndCreatePrice(minNodeCount, validSignatureTimer, chainlinkEnabled, pairsContract.idToAsset(_tradeInfo.asset).chainlinkFeed, _priceData, _signature, nodeProvided, isNode);\n        _setReferral(_tradeInfo.referral);\n        uint256 margin = _handleOpenFees(_tradeInfo.asset, _tradeInfo.margin, _tigAsset, _tradeInfo.leverage, _msgSender());\n        _checkSl(_tradeInfo.slPrice, _tradeInfo.direction, _price);\n        if (_tradeInfo.direction) {\n            pairsContract.modifyLongOi(_tradeInfo.asset, _tigAsset, true, margin*_tradeInfo.leverage/1e18);\n        } else {\n            pairsContract.modifyShortOi(_tradeInfo.asset, _tigAsset, true, margin*_tradeInfo.leverage/1e18);\n        }\n        updateFunding(_tradeInfo.asset, _tigAsset);\n        position.mint(\n            IPosition.MintTrade(\n                _msgSender(),\n                margin,\n                _tradeInfo.leverage,\n                _tradeInfo.asset,\n                _tradeInfo.direction,\n                _price,\n                _tradeInfo.tpPrice,\n                _tradeInfo.slPrice,\n                0,\n                _tigAsset\n            )\n        );\n        emit PositionOpened(_tradeInfo, _msgSender(), _price, margin, position.getCount()-1);\n    }\n\n    /**\n     * @dev initiate closing position\n     * @param _id id of the position NFT\n     * @param _percent percent of the position being closed in BP\n     * @param _priceData verifiable off-chain data\n     * @param _signature node signature\n     * @param _stableVault StableVault address\n     * @param _outputToken Token received upon closing trade\n     */\n    function initiateCloseOrder(\n        uint _id,\n        uint _percent,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature,\n        address _stableVault,\n        address _outputToken\n    )\n        external\n    {\n        _checkDelay(_id);\n        _checkOwner(_id);\n        IPosition.Trade memory _trade = position.trades(_id);\n        require(_trade.orderType == 0, \"Limit\");        \n        uint256 _price = TradingLibrary.verifyAndCreatePrice(minNodeCount, validSignatureTimer, chainlinkEnabled, pairsContract.idToAsset(_trade.asset).chainlinkFeed, _priceData, _signature, nodeProvided, isNode);\n        require(_percent <= DIVISION_CONSTANT && _percent > 0, \"Bad%\");\n        _closePosition(_id, _percent, _price, _stableVault, _outputToken); \n    }\n\n    function initiateLimitOrder(\n        TradeInfo calldata _tradeInfo,\n        uint256 _orderType, // 1 limit, 2 momentum\n        uint256 _price,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature,  \n        ERC20PermitData calldata _permitData\n    )\n        external payable\n    {\n        _checkDelay(position.getCount());\n        if (_orderType == 2) {\n            uint _assetPrice = TradingLibrary.verifyAndCreatePrice(minNodeCount, validSignatureTimer, chainlinkEnabled, pairsContract.idToAsset(_tradeInfo.asset).chainlinkFeed, _priceData, _signature, nodeProvided, isNode);\n            if (_tradeInfo.direction) {\n                require(_price >= _assetPrice, \"BadBuyStop\");\n            } else {\n                require(_price <= _assetPrice, \"BadSellStop\");\n            }\n        }\n        address _tigAsset = IStableVault(_tradeInfo.stableVault).stable();\n        validateTrade(_tradeInfo.asset, _tigAsset, _tradeInfo.margin, _tradeInfo.leverage);\n        require(_orderType > 0, \"!Limit\");\n        require(_price > 0, \"!Price\");\n        _handleDeposit(_tigAsset, _tradeInfo.marginAsset, _tradeInfo.margin, _tradeInfo.stableVault, _permitData);\n        _checkSl(_tradeInfo.slPrice, _tradeInfo.direction, _price);\n        _setReferral(_tradeInfo.referral);\n        position.mint(\n            IPosition.MintTrade(\n                _msgSender(),\n                _tradeInfo.margin,\n                _tradeInfo.leverage,\n                _tradeInfo.asset,\n                _tradeInfo.direction,\n                _price,\n                _tradeInfo.tpPrice,\n                _tradeInfo.slPrice,\n                _orderType,\n                _tigAsset\n            )\n        );\n        emit PositionOpened(_tradeInfo, _msgSender(), _price, _tradeInfo.margin, position.getCount() - 1);\n    }\n\n    function cancelLimitOrder(\n        uint256 _id\n    )\n        external\n    {\n        _checkDelay(_id);\n        _checkOwner(_id);\n        IPosition.Trade memory trade = position.trades(_id);\n        IStable(trade.tigAsset).mintFor(_msgSender(), trade.margin);\n        position.burn(_id);\n        emit LimitCancelled(_id);\n    }\n\n    function addMargin(\n        uint256 _id,\n        uint256 _addMargin,\n        address _marginAsset,\n        address _stableVault,\n        ERC20PermitData calldata _permitData\n    )\n        external payable\n    {\n        unchecked {\n            _checkDelay(_id);\n            _checkOwner(_id);\n            IPosition.Trade memory _trade = position.trades(_id);\n            IPairsContract.Asset memory asset = pairsContract.idToAsset(_trade.asset);\n            uint256 _positionSize = _trade.margin * _trade.leverage / 1e18;\n            uint256 _newMargin = _trade.margin + _addMargin;\n            uint256 _newLeverage = _positionSize * 1e18 / _newMargin;\n            require(_newLeverage >= asset.minLeverage, \"<minLev\");\n            _handleDeposit(_trade.tigAsset, _marginAsset, _addMargin, _stableVault, _permitData);\n            position.modifyMargin(_id, _newMargin, _newLeverage);\n            emit MarginAdded(_id, _newMargin);\n        }\n    }\n\n    function updateTpSl(\n        bool _type, // true is TP\n        uint _id,\n        uint _limitPrice,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature\n    )\n        external\n    {\n        _checkOwner(_id);\n        IPosition.Trade memory _trade = position.trades(_id);\n        require(_trade.orderType == 0, \"!updateLimit\");\n        if (_type) {\n            position.modifyTp(_id, _limitPrice);\n        } else {\n            uint256 _price = TradingLibrary.verifyAndCreatePrice(minNodeCount, validSignatureTimer, chainlinkEnabled, pairsContract.idToAsset(_trade.asset).chainlinkFeed, _priceData, _signature, nodeProvided, isNode);\n            _checkSl(_limitPrice, _trade.direction, _price);\n            position.modifySl(_id, _limitPrice);\n        }\n        emit UpdateTPSL(_id, _type, _limitPrice);\n    }\n\n    function executeLimitOrder(\n        uint _id, \n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature\n    ) \n        external\n    {\n        _checkDelay(_id);\n        _checkGas();\n        require(!paused, \"Paused\");\n        IPosition.Trade memory trade = position.trades(_id);\n        uint256 _price = TradingLibrary.verifyAndCreatePrice(minNodeCount, validSignatureTimer, chainlinkEnabled, pairsContract.idToAsset(trade.asset).chainlinkFeed, _priceData, _signature, nodeProvided, isNode);\n        require(trade.orderType != 0, \"!execOpen\");\n        if (trade.direction && trade.orderType == 1) {\n            require(trade.price >= _price, \"BL\");\n        } else if (!trade.direction && trade.orderType == 1) {\n            require(trade.price <= _price, \"SL\");      \n        } else if (!trade.direction && trade.orderType == 2) {\n            require(trade.price >= _price, \"SS\");\n        } else {\n            require(trade.price <= _price, \"BS\");\n        }\n        uint256 _newMargin = _handleOpenFees(trade.asset, trade.margin, trade.tigAsset, trade.leverage, trade.trader);\n        if (trade.direction) {\n            pairsContract.modifyLongOi(trade.asset, trade.tigAsset, true, _newMargin*trade.leverage/1e18);\n        } else {\n            pairsContract.modifyShortOi(trade.asset, trade.tigAsset, true, _newMargin*trade.leverage/1e18);\n        }\n        updateFunding(trade.asset, trade.tigAsset);\n        position.executeLimitOrder(_id, trade.price, _newMargin);\n        emit LimitOrderExecuted(trade.asset, trade.trader, trade.direction, _price, trade.leverage, _newMargin, _id);\n    }\n\n    /**\n     * @dev liquidate position\n     * @param _id id of the position NFT\n     * @param _priceData verifiable off-chain data\n     * @param _signature node signature\n     */\n    function liquidatePosition(\n        uint _id,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature\n    )\n        external\n    {\n        unchecked{\n            _checkGas();\n            IPosition.Trade memory _trade = position.trades(_id);\n            uint256 _price = TradingLibrary.verifyAndCreatePrice(minNodeCount, validSignatureTimer, chainlinkEnabled, pairsContract.idToAsset(_trade.asset).chainlinkFeed, _priceData, _signature, nodeProvided, isNode);\n            require(_trade.orderType == 0, \"!liqLimit\");\n            (,int256 _payout) = TradingLibrary.pnl(_trade.direction, _price, _trade.price, _trade.margin, _trade.leverage, _trade.accInterest);\n            require(_payout <= int256(_trade.margin*(DIVISION_CONSTANT-liqPercent)/DIVISION_CONSTANT), \"!liq\");\n            if (_trade.direction) {\n                pairsContract.modifyLongOi(_trade.asset, _trade.tigAsset, false, _trade.margin*_trade.leverage/1e18);\n            } else {\n                pairsContract.modifyShortOi(_trade.asset, _trade.tigAsset, false, _trade.margin*_trade.leverage/1e18);\n            }\n            updateFunding(_trade.asset, _trade.tigAsset);\n            IStable(_trade.tigAsset).mintFor(_msgSender(), ((_trade.margin*_trade.leverage/1e18)*pairsContract.idToAsset(_trade.asset).feeMultiplier/DIVISION_CONSTANT)*botFees/DIVISION_CONSTANT);\n            position.burn(_id);\n            emit PositionLiquidated(_id);\n        }\n    }\n\n    /**\n     * @dev close position at a pre-set price\n     * @param _id id of the position NFT\n     * @param _tp true if take profit\n     * @param _priceData verifiable off-chain data\n     * @param _signature node signature\n     */\n    function limitClose(\n        uint _id,\n        bool _tp,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature\n    )\n        external\n    {\n        _checkDelay(_id);\n        _checkGas();\n        IPosition.Trade memory _trade = position.trades(_id);\n        uint256 _price = TradingLibrary.verifyAndCreatePrice(minNodeCount, validSignatureTimer, chainlinkEnabled, pairsContract.idToAsset(_trade.asset).chainlinkFeed, _priceData, _signature, nodeProvided, isNode);\n        require(_trade.orderType == 0, \"!closeLimit\");\n        uint _limitPrice;\n        if (_tp) {\n            require(_trade.tpPrice != 0, \"!TP\");\n            if(_trade.direction) {\n                require(_trade.tpPrice <= _price, \"LTP\");\n            } else {\n                require(_trade.tpPrice >= _price, \"STP\");\n            }\n            _limitPrice = _trade.tpPrice;\n        } else {\n            require(_trade.slPrice != 0, \"!SL\");\n            if(_trade.direction) {\n                require(_trade.slPrice >= _price, \"LSL\");\n            } else {\n                require(_trade.slPrice <= _price, \"SSL\");\n            }\n            _limitPrice = _trade.slPrice;\n        }\n        _closePosition(_id, DIVISION_CONSTANT, _limitPrice, address(0), _trade.tigAsset);\n    }\n\n\n\n    // ===== INTERNAL FUNCTIONS =====\n\n    /**\n     * @dev close the initiated position.\n     * @param _id id of the position NFT\n     * @param _percent percent of the position being closed in BP\n     * @param _price asset price\n     * @param _stableVault StableVault address\n     * @param _outputToken Token that trader will receive\n     */\n    function _closePosition(\n        uint _id,\n        uint _percent,\n        uint _price,\n        address _stableVault,\n        address _outputToken\n    )\n        internal\n    {\n        IPosition.Trade memory _trade = position.trades(_id);\n        (int256 _positionSize, int256 _payout) = TradingLibrary.pnl(_trade.direction, _price, _trade.price, _trade.margin, _trade.leverage, _trade.accInterest);\n        if (_trade.direction) {\n            pairsContract.modifyLongOi(_trade.asset, _trade.tigAsset, false, (_trade.margin*_trade.leverage/1e18)*_percent/DIVISION_CONSTANT);\n        } else {\n            pairsContract.modifyShortOi(_trade.asset, _trade.tigAsset, false, (_trade.margin*_trade.leverage/1e18)*_percent/DIVISION_CONSTANT);     \n        }\n        position.setAccInterest(_id);\n        updateFunding(_trade.asset, _trade.tigAsset);\n        if (_percent < DIVISION_CONSTANT) {\n            position.reducePosition(_id, _percent);\n        } else {\n            position.burn(_id);\n        }\n        uint256 _toMint;\n        if (_payout > 0) {\n            _toMint = _handleCloseFees(_trade.asset, uint256(_payout)*_percent/DIVISION_CONSTANT, _trade.tigAsset, uint256(_positionSize)*_percent/DIVISION_CONSTANT, _trade.trader);\n            if (maxWinPercent > 0 && _toMint > _trade.margin*maxWinPercent/DIVISION_CONSTANT) {\n                _toMint = _trade.margin*maxWinPercent/DIVISION_CONSTANT;\n            }\n            IStable(_trade.tigAsset).mintFor(address(this), _toMint);\n            if (_outputToken == _trade.tigAsset) {\n                IERC20(_outputToken).transfer(_trade.trader, _toMint);\n            } else {\n                if (_outputToken != eth) {\n                    uint256 _balBefore = IERC20(_outputToken).balanceOf(address(this));\n                    IStableVault(_stableVault).withdraw(_outputToken, _toMint);\n                    require(IERC20(_outputToken).balanceOf(address(this)) == _balBefore + _toMint/(10**(18-ExtendedIERC20(_outputToken).decimals())), \"BadWithdraw\");\n                    IERC20(_outputToken).transfer(_trade.trader, IERC20(_outputToken).balanceOf(address(this)) - _balBefore);          \n                } else {\n                    uint256 _balBefore = address(this).balance;\n                    try INativeStableVault(_stableVault).withdrawNative(_toMint) {} catch {\n                        revert(\"!VaultNativeSupport\");\n                    }\n                    require(address(this).balance == _balBefore + _toMint, \"BadNativeWithdraw\");\n                    payable(_msgSender()).transfer(address(this).balance - _balBefore);\n                }\n            }\n        }\n        emit PositionClosed(_id, _price, _percent, _toMint);\n    }\n\n    /**\n     * @dev handle fees distribution and margin size after fees for opening\n     * @param _asset asset id\n     * @param _margin margin\n     * @param _tigAsset margin asset\n     * @param _leverage leverage\n     * @param _trader trader address\n     * @return _afterFees margin after fees\n     */\n    function _handleOpenFees(\n        uint _asset,\n        uint _margin,\n        address _tigAsset,\n        uint _leverage,\n        address _trader\n    )\n        internal\n        returns (uint256 _afterFees)\n    {\n        IPairsContract.Asset memory asset = pairsContract.idToAsset(_asset);\n        uint[4] memory _fees = [ // Avoids stack too deep error\n            daoFees*asset.feeMultiplier/DIVISION_CONSTANT,\n            burnFees*asset.feeMultiplier/DIVISION_CONSTANT,\n            referralFees*asset.feeMultiplier/DIVISION_CONSTANT,\n            botFees*asset.feeMultiplier/DIVISION_CONSTANT\n        ];\n        if (pairsContract.getReferral(pairsContract.getReferred(_trader)) != address(0)) {\n            IStable(_tigAsset).mintFor(\n                pairsContract.getReferral(pairsContract.getReferred(_trader)),\n                (_margin * _leverage / 1e18)\n                * _fees[2] // get referral fee%\n                / DIVISION_CONSTANT // divide by 100%\n            );\n            _fees[0] = _fees[0] - _fees[2];\n        }\n        if (_trader != _msgSender()) {\n            IStable(_tigAsset).mintFor(\n                _msgSender(),\n                (_margin * _leverage / 1e18)\n                * _fees[3] // get bot fee%\n                / DIVISION_CONSTANT // divide by 100%\n            );\n            _fees[0] = _fees[0] - _fees[3];\n        } else {\n            _fees[3] = 0;\n        }\n        _afterFees =\n            _margin - ( // subtract position size fees from margin\n                (_margin * _leverage / 1e18)\n                * (_fees[0] + _fees[1] + _fees[3]) // get total fee%\n                / DIVISION_CONSTANT // divide by 100%\n            );\n        uint _daoFeesPaid = (_margin * _leverage / 1e18) * (_fees[0]) / DIVISION_CONSTANT;\n        IStable(_tigAsset).mintFor(address(this), _daoFeesPaid);\n        gov.distribute(_tigAsset, IStable(_tigAsset).balanceOf(address(this)));\n    }\n\n    /**\n     * @dev handle fees distribution after closing\n     * @param _asset asset id\n     * @param _payout payout to trader before fees\n     * @param _tigAsset margin asset\n     * @param _positionSize position size + pnl\n     * @param _trader trader address\n     * @return payout_ payout to trader after fees\n     */\n    function _handleCloseFees(\n        uint _asset,\n        uint _payout,\n        address _tigAsset,\n        uint _positionSize,\n        address _trader\n    )\n        internal\n        returns (uint payout_)\n    {\n        IPairsContract.Asset memory asset = pairsContract.idToAsset(_asset);\n        uint _daoFeesPaid = (_positionSize*daoFees/DIVISION_CONSTANT)*asset.feeMultiplier/DIVISION_CONSTANT;\n        uint _burnFeesPaid = (_positionSize*burnFees/DIVISION_CONSTANT)*asset.feeMultiplier/DIVISION_CONSTANT;\n        uint _referralFeesPaid = (_positionSize*referralFees/DIVISION_CONSTANT)*asset.feeMultiplier/DIVISION_CONSTANT;\n        uint _botFeesPaid;\n        address _referrer = pairsContract.getReferral(pairsContract.getReferred(_trader));\n        if (_referrer != address(0)) {\n            IStable(_tigAsset).mintFor(\n                _referrer,\n                _referralFeesPaid\n            );\n            _daoFeesPaid = _daoFeesPaid-_referralFeesPaid;\n        }\n        if (_trader != _msgSender()) {\n            _botFeesPaid = (_positionSize*botFees/DIVISION_CONSTANT)*asset.feeMultiplier/DIVISION_CONSTANT;\n            IStable(_tigAsset).mintFor(\n                _msgSender(),\n                _botFeesPaid\n            );\n            _daoFeesPaid = _daoFeesPaid - _botFeesPaid;\n        }\n        payout_ = _payout - _daoFeesPaid - _burnFeesPaid - _botFeesPaid;\n        IStable(_tigAsset).mintFor(address(this), _daoFeesPaid);\n        gov.distribute(_tigAsset, _daoFeesPaid);\n        return payout_;\n    }\n\n    function _handleDeposit(address _tigAsset, address _marginAsset, uint256 _margin, address _stableVault, ERC20PermitData calldata _permitData) internal {\n        IStable tigAsset = IStable(_tigAsset);\n        if (_tigAsset != _marginAsset) {\n            if (msg.value > 0) {\n                require(_marginAsset == eth, \"NativeDeposit\");\n            } else {\n                if (_permitData.usePermit) {\n                    ERC20Permit(_marginAsset).permit(_msgSender(), address(this), _permitData.amount, _permitData.deadline, _permitData.v, _permitData.r, _permitData.s);\n                }\n            }\n            uint256 _balBefore = tigAsset.balanceOf(address(this));\n            if (_marginAsset != eth){\n                IERC20(_marginAsset).transferFrom(_msgSender(), address(this), _margin);\n                IERC20(_marginAsset).approve(_stableVault, type(uint256).max);\n                IStableVault(_stableVault).deposit(_marginAsset, _margin);\n                require(tigAsset.balanceOf(address(this)) == _balBefore + _margin*(10**(18-ExtendedIERC20(_marginAsset).decimals())), \"BadDeposit\");\n                tigAsset.burnFrom(address(this), tigAsset.balanceOf(address(this)));\n            } else {\n                require(msg.value == _margin, \"msg.value != margin\");\n                try INativeStableVault(_stableVault).depositNative{value: _margin}() {} catch {\n                    revert(\"!VaultNativeSupport\");\n                }\n                require(tigAsset.balanceOf(address(this)) == _balBefore + _margin, \"BadNativeDeposit\");\n                tigAsset.burnFrom(address(this), _margin);\n            }\n        } else {\n            tigAsset.burnFrom(_msgSender(), _margin);\n        }        \n    }\n\n    function updateFunding(uint256 _asset, address _tigAsset) internal {\n        position.updateFunding(\n            _asset,\n            _tigAsset,\n            pairsContract.idToOi(_asset, _tigAsset).longOi,\n            pairsContract.idToOi(_asset, _tigAsset).shortOi,\n            pairsContract.idToAsset(_asset).baseFundingRate\n        );\n    }\n\n    function _setReferral(bytes32 _referral) internal {\n        if (_referral != bytes32(0)) {\n            if (pairsContract.getReferral(_referral) != address(0)) {\n                if (pairsContract.getReferred(_msgSender()) == bytes32(0)) {\n                    pairsContract.setReferred(_msgSender(), _referral);\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev validates the inputs of trades\n     * @param _asset asset id\n     * @param _tigAsset margin asset\n     * @param _margin margin\n     * @param _leverage leverage\n     */\n    function validateTrade(uint _asset, address _tigAsset, uint _margin, uint _leverage) internal view {\n        IPairsContract.Asset memory asset = pairsContract.idToAsset(_asset);\n        require(allowedMargin[_tigAsset], \"!Margin\");\n        require(!paused, \"Paused\");\n        require(pairsContract.allowedAsset(_asset), \"!Asset\");\n        require(_leverage >= asset.minLeverage && _leverage <= asset.maxLeverage, \"BadLev\");\n        require(_margin*_leverage/1e18 >= minPositionSize[_tigAsset], \"<minPos\");\n    }\n\n    function _checkSl(uint _sl, bool _direction, uint _price) internal pure {\n        if (_direction) {\n            require (_sl <= _price, \"BadLSL\");\n        } else {\n            require (_sl >= _price || _sl == 0, \"BadSSL\");\n        }\n    }\n\n    function _checkOwner(uint _id) internal view {\n        require(position.ownerOf(_id) == _msgSender(), \"!Owner\");    \n    }\n\n    function _checkGas() internal view {\n        require(tx.gasprice <= maxGasPrice, \"gas!\");    \n    }\n\n    function _checkDelay(uint _id) internal {\n        unchecked {\n            require(block.number >= blockDelayPassed[_id], \"Wait\");\n            blockDelayPassed[_id] = block.number + blockDelay;            \n        }\n    }\n\n\n\n    // ===== GOVERNANCE-ONLY =====\n\n    /**\n     * @notice in blocks not seconds\n     */\n    function setBlockDelay(\n        uint _blockDelay\n    )\n        external\n        onlyOwner\n    {\n        blockDelay = _blockDelay;\n    }\n\n    function setLiqPercent(\n        uint _liqPercent\n    )\n        external\n        onlyOwner\n    {\n        require(_liqPercent <= DIVISION_CONSTANT && _liqPercent >= 5000);\n        liqPercent = _liqPercent;\n    }\n\n    function setMaxWinPercent(\n        uint _maxWinPercent\n    )\n        external\n        onlyOwner\n    {\n        require(_maxWinPercent >= 50000 || _maxWinPercent == 0);\n        maxWinPercent = _maxWinPercent;\n    }\n\n    function setValidSignatureTimer(\n        uint _validSignatureTimer\n    )\n        external\n        onlyOwner\n    {\n        require(_validSignatureTimer > 0);\n        validSignatureTimer = _validSignatureTimer;\n    }\n\n    function setMinNodeCount(\n        uint _minNodeCount\n    )\n        external\n        onlyOwner\n    {\n        require(_minNodeCount > 0);\n        minNodeCount = _minNodeCount;\n    }\n\n    /**\n     * @dev Allows a tigAsset to be used\n     * @param _tigAsset tigAsset\n     * @param _bool bool\n     */\n    function setAllowedMargin(\n        address _tigAsset,\n        bool _bool\n    ) \n        external\n        onlyOwner\n    {\n        allowedMargin[_tigAsset] = _bool;\n        IStable(_tigAsset).approve(address(gov), type(uint).max);\n    }\n\n    /**\n     * @dev changes the minimum position size\n     * @param _tigAsset tigAsset\n     * @param _min minimum position size 18 decimals\n     */\n    function setMinPositionSize(\n        address _tigAsset,\n        uint _min\n    ) \n        external\n        onlyOwner\n    {\n        minPositionSize[_tigAsset] = _min;\n    }\n\n    function setPaused(bool _paused) external onlyOwner {\n        paused = _paused;\n    }\n\n    function setMaxGasPrice(uint _maxGasPrice) external onlyOwner {\n        maxGasPrice = _maxGasPrice;\n    }\n\n    /**\n     * @dev Sets the fees for the trading protocol\n     * @param _daoFees Fees distributed to the DAO\n     * @param _burnFees Fees which get burned\n     * @param _referralFees Fees given to referrers\n     * @param _botFees Fees given to bots that execute limit orders\n     */\n    function setFees(uint _daoFees, uint _burnFees, uint _referralFees, uint _botFees) external onlyOwner {\n        unchecked {\n            require(_daoFees >= _botFees+_referralFees);\n            daoFees = _daoFees;\n            burnFees = _burnFees;\n            referralFees = _referralFees;\n            botFees = _botFees;\n        }\n    }\n\n    /**\n     * @dev whitelists a node\n     * @param _node node address\n     * @param _bool bool\n     */\n    function setNode(address _node, bool _bool) external onlyOwner {\n        isNode[_node] = _bool;\n    }\n\n    function setChainlinkEnabled(bool _bool) external onlyOwner {\n        chainlinkEnabled = _bool;\n    }\n\n    // ===== EVENTS =====\n\n    event PositionOpened(\n        TradeInfo _tradeInfo,\n        address _trader,\n        uint _price,\n        uint _marginAfterFees,\n        uint _id\n    );\n\n    event PositionClosed(\n        uint _id,\n        uint _closePrice,\n        uint _percent,\n        uint _payout\n    );\n\n    event PositionLiquidated(\n        uint _id\n    );\n\n    event LimitOrderExecuted(\n        uint _asset,\n        address _trader,\n        bool _direction,\n        uint _openPrice,\n        uint _lev,\n        uint _margin,\n        uint _id\n    );\n\n    event UpdateTPSL(\n        uint _id,\n        bool _isTp,\n        uint _price\n    );\n\n    event LimitCancelled(\n        uint _id\n    );\n\n    event MarginAdded(\n        uint _id,\n        uint _newMargin\n    );\n\n    receive() external payable {}\n\n}\n"
    },
    "contracts/utils/MetaContext.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MetaContext is Ownable {\n    mapping(address => bool) private _isTrustedForwarder;\n\n    function setTrustedForwarder(address _forwarder, bool _bool) external onlyOwner {\n        _isTrustedForwarder[_forwarder] = _bool;\n    }\n\n    function isTrustedForwarder(address _forwarder) external view returns (bool) {\n        return _isTrustedForwarder[_forwarder];\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (_isTrustedForwarder[msg.sender]) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            /// @solidity memory-safe-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (_isTrustedForwarder[msg.sender]) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ITrading.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport \"../utils/TradingLibrary.sol\";\n\npragma solidity ^0.8.0;\n\ninterface ITrading {\n\n    struct TradeInfo {\n        uint256 margin;\n        address marginAsset;\n        address stableVault;\n        uint256 leverage;\n        uint256 asset;\n        bool direction;\n        uint256 tpPrice;\n        uint256 slPrice;\n        bytes32 referral;\n    }\n\n    struct ERC20PermitData {\n        uint256 deadline;\n        uint256 amount;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        bool usePermit;\n    }\n\n    function initiateMarketOrder(\n        TradeInfo calldata _tradeInfo,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature,\n        ERC20PermitData calldata _permitData\n    ) external payable;\n\n    function initiateCloseOrder(\n        uint _id,\n        uint _percent,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature,\n        address _stableVault,\n        address _outputToken\n    ) external;\n\n    function initiateLimitOrder(\n        TradeInfo calldata _tradeInfo,\n        uint256 _orderType, // 1 limit, 2 momentum\n        uint256 _price,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature,\n        ERC20PermitData calldata _permitData\n    ) external payable;\n\n    function cancelLimitOrder(\n        uint256 _id\n    ) external;\n\n    function addMargin(\n        uint256 _id,\n        uint256 _addMargin,\n        address _marginAsset,\n        address _stableVault,\n        ERC20PermitData calldata _permitData\n    ) external payable;\n\n    function updateTpSl(\n        bool _type, // true is TP\n        uint _id,\n        uint _limitPrice,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature\n    ) external;\n\n    function executeLimitOrder(\n        uint _id, \n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature\n    ) external;\n\n    function liquidatePosition(\n        uint _id,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature\n    ) external;\n\n    function limitClose(\n        uint _id,\n        bool _tp,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature\n    ) external;\n\n    function allowedMargin(address _tigAsset) external view returns (bool);\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IPairsContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPairsContract {\n\n    struct Asset {\n        string name;\n        address chainlinkFeed;\n        uint256 minLeverage;\n        uint256 maxLeverage;\n        uint256 feeMultiplier;\n        uint256 baseFundingRate;\n    }\n\n    struct OpenInterest {\n        uint256 longOi;\n        uint256 shortOi;\n        uint256 maxOi;\n    }\n\n    function allowedAsset(uint) external view returns (bool);\n    function idToAsset(uint256 _asset) external view returns (Asset memory);\n    function idToOi(uint256 _asset, address _tigAsset) external view returns (OpenInterest memory);\n    function setAssetBaseFundingRate(uint256 _asset, uint256 _baseFundingRate) external;\n    function modifyLongOi(uint256 _asset, address _tigAsset, bool _onOpen, uint256 _amount) external;\n    function modifyShortOi(uint256 _asset, address _tigAsset, bool _onOpen, uint256 _amount) external;\n\n    function createReferralCode(bytes32 _hash) external;\n    function setReferred(address _referredTrader, bytes32 _hash) external;\n    function getReferred(address _trader) external view returns (bytes32);\n    function getReferral(bytes32 _hash) external view returns (address);\n}"
    },
    "contracts/interfaces/IPosition.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPosition {\n\n    struct Trade {\n        uint margin;\n        uint leverage;\n        uint asset;\n        bool direction;\n        uint price;\n        uint tpPrice;\n        uint slPrice;\n        uint orderType;\n        address trader;\n        uint id;\n        address tigAsset;\n        int accInterest;\n    }\n\n    struct MintTrade {\n        address account;\n        uint256 margin;\n        uint256 leverage;\n        uint256 asset;\n        bool direction;\n        uint256 price;\n        uint256 tp;\n        uint256 sl;\n        uint256 orderType;\n        address tigAsset;\n    }\n\n    function trades(uint256) external view returns (Trade memory);\n    function executeLimitOrder(uint256 _id, uint256 _price, uint256 _newMargin) external;\n    function modifyMargin(uint256 _id, uint256 _newMargin, uint256 _newLeverage) external;\n    function reducePosition(uint256 _id, uint256 _newMargin) external;\n    function assetOpenPositions(uint256 _asset) external view returns (uint256[] calldata);\n    function assetOpenPositionsIndexes(uint256 _asset, uint256 _id) external view returns (uint256);\n    function limitOrders(uint256 _asset) external view returns (uint256[] memory);\n    function limitOrderIndexes(uint256 _asset, uint256 _id) external view returns (uint256);\n    function assetOpenPositionsLength(uint256 _asset) external view returns (uint256);\n    function limitOrdersLength(uint256 _asset) external view returns (uint256);\n    function ownerOf(uint _id) external view returns (address);\n    function mint(MintTrade memory _mintTrade) external;\n    function burn(uint _id) external;\n    function modifyTp(uint _id, uint _tpPrice) external;\n    function modifySl(uint _id, uint _slPrice) external;\n    function getCount() external view returns (uint);\n    function updateFunding(uint256 _asset, address _tigAsset, uint256 _longOi, uint256 _shortOi, uint256 _baseFundingRate) external;\n    function setAccInterest(uint256 _id) external;\n}"
    },
    "contracts/interfaces/IGovNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IGovNFT {\n    function distribute(address _tigAsset, uint _amount) external;\n}"
    },
    "contracts/interfaces/IStableVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IStableVault {\n    function deposit(address, uint) external;\n    function withdraw(address, uint) external returns (uint256);\n    function allowed(address) external view returns (bool);\n    function stable() external view returns (address);\n}"
    },
    "contracts/interfaces/INativeStableVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface INativeStableVault {\n    function depositNative() external payable;\n    function withdrawNative(uint256 _amount) external returns (uint256);\n}"
    },
    "contracts/utils/TradingLibrary.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../interfaces/IPosition.sol\";\n\ninterface IPrice {\n    function latestAnswer() external view returns (int256);\n    function decimals() external view returns (uint256);\n}\n\nstruct PriceData {\n    address provider;\n    uint256 asset;\n    uint256 price;\n    uint256 timestamp;\n    bool isClosed;\n}\n\nlibrary TradingLibrary {\n\n    using ECDSA for bytes32;\n\n    function pnl(bool _direction, uint _currentPrice, uint _price, uint _margin, uint _leverage, int256 accInterest) external pure returns (int256 _positionSize, int256 _payout) {\n        unchecked {\n            if (_direction && _currentPrice >= _price) {\n                _payout = int256(_margin) + int256(_margin * _leverage * (1e18 * _currentPrice / _price - 1e18)/1e18**2) + accInterest;\n                _positionSize = int256(_margin * _leverage / 1e18) + int256(_margin * _leverage * (1e18 * _currentPrice / _price - 1e18)/1e18**2) + accInterest;\n            } else if (_direction && _currentPrice < _price) {\n                _payout = int256(_margin) - int256(_margin * _leverage * (1e18 - 1e18 * _currentPrice / _price)/1e18**2) + accInterest;\n                _positionSize = int256(_margin * _leverage / 1e18) - int256(_margin * _leverage * (1e18 - 1e18 * _currentPrice / _price)/1e18**2) + accInterest;\n            } else if (!_direction && _currentPrice <= _price) {\n                _payout = int256(_margin) + int256(_margin * _leverage * (1e18 - 1e18 * _currentPrice / _price)/1e18**2) + accInterest;\n                _positionSize = int256(_margin * _leverage / 1e18) + int256(_margin * _leverage * (1e18 - 1e18 * _currentPrice / _price)/1e18**2) + accInterest;\n            } else {\n                _payout = int256(_margin) - int256(_margin * _leverage * (1e18 * _currentPrice / _price - 1e18)/1e18**2) + accInterest;\n                _positionSize = int256(_margin * _leverage / 1e18) - int256(_margin * _leverage * (1e18 * _currentPrice / _price - 1e18)/1e18**2) + accInterest;\n            }\n        }\n    }\n\n    function liqPrice(bool _direction, uint _tradePrice, uint _leverage, uint _margin, int _accInterest, uint _liqPercent) public pure returns (uint256 _liqPrice) {\n        if (_direction) {\n            _liqPrice = _tradePrice - ((_tradePrice*1e18/_leverage) * uint(int(_margin)+_accInterest) / _margin) * _liqPercent / 10000;\n        } else {\n            _liqPrice = _tradePrice + ((_tradePrice*1e18/_leverage) * uint(int(_margin)+_accInterest) / _margin) * _liqPercent / 10000;\n        }\n    }\n\n    function getLiqPrice(address _positions, uint _id, uint _liqPercent) external view returns (uint256) {\n        IPosition.Trade memory _trade = IPosition(_positions).trades(_id);\n        return liqPrice(_trade.direction, _trade.price, _trade.leverage, _trade.margin, _trade.accInterest, _liqPercent);\n    }\n\n    function verifyAndCreatePrice(\n        uint256 _minNodeCount,\n        uint256 _validSignatureTimer,\n        bool _chainlinkEnabled,\n        address _chainlinkFeed,\n        PriceData[] calldata _priceData,\n        bytes[] calldata _signature,        \n        mapping(address => bool) storage _nodeProvided,\n        mapping(address => bool) storage _isNode\n    )\n        external returns (uint256)\n    {\n        unchecked {\n            uint256 _length = _signature.length;\n            require(_priceData.length == _length, \"length\");\n            require(_length >= _minNodeCount, \"minNode\");\n            address[] memory _nodes = new address[](_length);\n            uint256[] memory _prices = new uint256[](_length);\n            for (uint256 i=0; i<_length; i++) {\n                address _provider = (\n                    keccak256(abi.encode(_priceData[i]))\n                ).toEthSignedMessageHash().recover(_signature[i]);\n                require(_provider == _priceData[i].provider, \"BadSig\");\n                require(_isNode[_provider], \"!Node\");\n                _nodes[i] = _provider;\n                require(_nodeProvided[_provider] == false, \"NodeP\");\n                _nodeProvided[_provider] = true;\n                require(!_priceData[i].isClosed, \"Closed\");\n                require(block.timestamp >= _priceData[i].timestamp, \"FutSig\");\n                require(block.timestamp <= _priceData[i].timestamp + _validSignatureTimer, \"ExpSig\");\n                require(_priceData[i].price > 0, \"NoPrice\");\n                _prices[i] = _priceData[i].price;\n            }\n            uint256 _price = median(_prices);\n            if (_chainlinkEnabled && _chainlinkFeed != address(0)) {\n                int256 assetChainlinkPriceInt = IPrice(_chainlinkFeed).latestAnswer();\n                if (assetChainlinkPriceInt != 0) {\n                    uint256 assetChainlinkPrice = uint256(assetChainlinkPriceInt) * 10**(18 - IPrice(_chainlinkFeed).decimals());\n                    require(\n                        _price < assetChainlinkPrice+assetChainlinkPrice*2/100 &&\n                        _price > assetChainlinkPrice-assetChainlinkPrice*2/100, \"!chainlinkPrice\"\n                    );\n                }\n            }\n            for (uint i=0; i<_length; i++) {\n                delete _nodeProvided[_nodes[i]];\n            }            \n            return _price;            \n        }\n    }\n\n    /**\n     * @dev Gets the median value from an array\n     * @param array array of unsigned integers to get the median from\n     * @return median value from the array\n     */\n    function median(uint[] memory array) private pure returns(uint) {\n        unchecked {\n            sort(array, 0, array.length);\n            return array.length % 2 == 0 ? (array[array.length/2-1]+array[array.length/2])/2 : array[array.length/2];            \n        }\n    }\n\n    function swap(uint[] memory array, uint i, uint j) private pure { \n        (array[i], array[j]) = (array[j], array[i]); \n    }\n\n    function sort(uint[] memory array, uint begin, uint end) private pure {\n        unchecked {\n            if (begin >= end) { return; }\n            uint j = begin;\n            uint pivot = array[j];\n            for (uint i = begin + 1; i < end; ++i) {\n                if (array[i] < pivot) {\n                    swap(array, i, ++j);\n                }\n            }\n            swap(array, begin, j);\n            sort(array, begin, j);\n            sort(array, j + 1, end);            \n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 0
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}