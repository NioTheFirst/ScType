{
  "address": "0xe82fcefbDD034500B5862B4827CAE5c117f6b921",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stable",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "delistToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_permitMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "listToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stable",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_output",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4d6081d00c19fa94b915f54bf993934fd35f3c281e7c1cd06a8a51c2bfe00cf",
  "receipt": {
    "to": null,
    "from": "0x8c807CDdB6fAADF96956353f70ea60D63fAb69D5",
    "contractAddress": "0xe82fcefbDD034500B5862B4827CAE5c117f6b921",
    "transactionIndex": 1,
    "gasUsed": "7506162",
    "logsBloom": "0x
    "blockHash": "0x71242b3f7a6bfd78fac8221a107356db00030b89c51b0021b98443f754e15e6d",
    "transactionHash": "0xf4d6081d00c19fa94b915f54bf993934fd35f3c281e7c1cd06a8a51c2bfe00cf",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 30638780,
        "transactionHash": "0xf4d6081d00c19fa94b915f54bf993934fd35f3c281e7c1cd06a8a51c2bfe00cf",
        "address": "0xe82fcefbDD034500B5862B4827CAE5c117f6b921",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c807cddb6faadf96956353f70ea60d63fab69d5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x71242b3f7a6bfd78fac8221a107356db00030b89c51b0021b98443f754e15e6d"
      }
    ],
    "blockNumber": 30638780,
    "cumulativeGasUsed": "7506162",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7E491F53bF807f836E2dd6C4A4FBd193e1913EFd"
  ],
  "numDeployments": 1,
  "solcInputHash": "710bcf1bfa15842ad8333fd2e3fedacf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stable\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"delistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_permitMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"listToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_output\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StableVault.sol\":\"StableVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/StableVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./utils/MetaContext.sol\\\";\\nimport \\\"./interfaces/IStableVault.sol\\\";\\n\\ninterface IERC20Mintable is IERC20 {\\n    function mintFor(address, uint256) external;\\n    function burnFrom(address, uint256) external;\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface ERC20Permit is IERC20 {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ncontract StableVault is MetaContext, IStableVault {\\n\\n    mapping(address => bool) public allowed;\\n    mapping(address => uint) private tokenIndex;\\n    address[] public tokens;\\n\\n    address public immutable stable;\\n\\n    constructor(address _stable) {\\n        stable = _stable;\\n    }\\n\\n    function deposit(address _token, uint256 _amount) public {\\n        require(allowed[_token], \\\"Token not listed\\\");\\n        IERC20(_token).transferFrom(_msgSender(), address(this), _amount);\\n        IERC20Mintable(stable).mintFor(\\n            _msgSender(),\\n            _amount*(10**(18-IERC20Mintable(_token).decimals()))\\n        );\\n    }\\n\\n    function depositWithPermit(address _token, uint256 _amount, uint256 _deadline, bool _permitMax, uint8 v, bytes32 r, bytes32 s) external {\\n        uint _toAllow = _amount;\\n        if (_permitMax) _toAllow = type(uint).max;\\n        ERC20Permit(_token).permit(_msgSender(), address(this), _toAllow, _deadline, v, r, s);\\n        deposit(_token, _amount);\\n    }\\n\\n    function withdraw(address _token, uint256 _amount) external returns (uint256 _output) {\\n        IERC20Mintable(stable).burnFrom(_msgSender(), _amount);\\n        _output = _amount/10**(18-IERC20Mintable(_token).decimals());\\n        IERC20(_token).transfer(\\n            _msgSender(),\\n            _output\\n        );\\n    }\\n\\n    function listToken(address _token) external onlyOwner {\\n        require(!allowed[_token], \\\"Already added\\\");\\n        tokenIndex[_token] = tokens.length;\\n        tokens.push(_token);\\n        allowed[_token] = true;\\n    }\\n\\n    function delistToken(address _token) external onlyOwner {\\n        require(allowed[_token], \\\"Not added\\\");\\n        tokenIndex[tokens[tokens.length-1]] = tokenIndex[_token];\\n        tokens[tokenIndex[_token]] = tokens[tokens.length-1];\\n        delete tokenIndex[_token];\\n        tokens.pop();\\n        allowed[_token] = false;\\n    }\\n}\",\"keccak256\":\"0x20d7111389582d7db13e158caaad52e8abf45976049a7f7575b6af24c41f0b90\",\"license\":\"MIT\"},\"contracts/interfaces/IStableVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStableVault {\\n    function deposit(address, uint) external;\\n    function withdraw(address, uint) external returns (uint256);\\n    function allowed(address) external view returns (bool);\\n    function stable() external view returns (address);\\n}\",\"keccak256\":\"0x09ad3f164d9f8f418a6f183223c1b6d43ab4e675bfd328d318c11f142098b3ec\",\"license\":\"MIT\"},\"contracts/utils/MetaContext.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MetaContext is Ownable {\\n    mapping(address => bool) private _isTrustedForwarder;\\n\\n    function setTrustedForwarder(address _forwarder, bool _bool) external onlyOwner {\\n        _isTrustedForwarder[_forwarder] = _bool;\\n    }\\n\\n    function isTrustedForwarder(address _forwarder) external view returns (bool) {\\n        return _isTrustedForwarder[_forwarder];\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (_isTrustedForwarder[msg.sender]) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (_isTrustedForwarder[msg.sender]) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a15b1245c2df01e82f4dccd4ad2e5791b5d2dcf75d6f026297f39b652e35aad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001429380380620014298339810160408190526200003491620000ee565b62000048620000426200005a565b6200009a565b6001600160a01b031660805262000120565b3360009081526001602052604081205460ff161562000080575060131936013560601c90565b62000095620000ea60201b62000d8d1760201c565b905090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3390565b6000602082840312156200010157600080fd5b81516001600160a01b03811681146200011957600080fd5b9392505050565b6080516112e0620001496000396000818160fe015281816106240152610b7401526112e06000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063715018a61161008c578063d63a8e1111610066578063d63a8e1114610205578063e691d03b14610228578063f2fde38b1461023b578063f3fef3a31461024e57600080fd5b8063715018a6146101cc5780638da5cb5b146101d4578063abffc9ac146101f257600080fd5b806347e7ef24116100bd57806347e7ef241461015d5780634f64b2be14610170578063572b6c051461018357600080fd5b80631fc1e25f146100e457806322be3de1146100f957806335fd95c41461014a575b600080fd5b6100f76100f2366004610f31565b61026f565b005b6101207f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100f7610158366004610f61565b6103c7565b6100f761016b366004610fd6565b6104d2565b61012061017e366004611000565b61077c565b6101bc610191366004610f31565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b6040519015158152602001610141565b6100f76107b3565b60005473ffffffffffffffffffffffffffffffffffffffff16610120565b6100f7610200366004610f31565b6107c7565b6101bc610213366004610f31565b60026020526000908152604090205460ff1681565b6100f7610236366004611019565b610a5b565b6100f7610249366004610f31565b610ab9565b61026161025c366004610fd6565b610b70565b604051908152602001610141565b610277610d91565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205460ff161561030c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f416c72656164792061646465640000000000000000000000000000000000000060448201526064015b60405180910390fd5b6004805473ffffffffffffffffffffffffffffffffffffffff909216600081815260036020908152604080832086905560018087019095557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90950180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905591815260029091529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b8584156103f157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b8773ffffffffffffffffffffffffffffffffffffffff1663d505accf610415610e4b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604481018490526064810189905260ff8716608482015260a4810186905260c4810185905260e401600060405180830381600087803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b505050506104c888886104d2565b5050505050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205460ff16610561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f546f6b656e206e6f74206c6973746564000000000000000000000000000000006044820152606401610303565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd610585610e4b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604481018490526064016020604051808303816000875af11580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106219190611050565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663da1919b3610666610e4b565b8473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d5919061106d565b6106e09060126110b5565b6106eb90600a6111ee565b6106f590856111fa565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561076057600080fd5b505af1158015610774573d6000803e3d6000fd5b505050505050565b6004818154811061078c57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6107bb610d91565b6107c56000610e93565b565b6107cf610d91565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205460ff1661085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f7420616464656400000000000000000000000000000000000000000000006044820152606401610303565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020819052604082205460048054919391610899906001906110b5565b815481106108a9576108a9611211565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902055600480546108eb906001906110b5565b815481106108fb576108fb611211565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff8481168452600390925260409092205460048054929093169291811061094657610946611211565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94851617905591831681526003909152604081205560048054806109b3576109b3611240565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590920190925573ffffffffffffffffffffffffffffffffffffffff92909216815260029091526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b610a63610d91565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b610ac1610d91565b73ffffffffffffffffffffffffffffffffffffffff8116610b64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610303565b610b6d81610e93565b50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166379cc6790610bb6610e4b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101859052604401600060405180830381600087803b158015610c2357600080fd5b505af1158015610c37573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa919061106d565b610cb59060126110b5565b610cc090600a6111ee565b610cca908361126f565b90508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610cf0610e4b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af1158015610d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d869190611050565b5092915050565b3390565b610d99610e4b565b73ffffffffffffffffffffffffffffffffffffffff16610dce60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146107c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610303565b3360009081526001602052604081205460ff1615610e8e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610f2c57600080fd5b919050565b600060208284031215610f4357600080fd5b610f4c82610f08565b9392505050565b8015158114610b6d57600080fd5b600080600080600080600060e0888a031215610f7c57600080fd5b610f8588610f08565b965060208801359550604088013594506060880135610fa381610f53565b9350608088013560ff81168114610fb957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610fe957600080fd5b610ff283610f08565b946020939093013593505050565b60006020828403121561101257600080fd5b5035919050565b6000806040838503121561102c57600080fd5b61103583610f08565b9150602083013561104581610f53565b809150509250929050565b60006020828403121561106257600080fd5b8151610f4c81610f53565b60006020828403121561107f57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156110c8576110c8611086565b92915050565b600181815b8085111561112757817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561110d5761110d611086565b8085161561111a57918102915b93841c93908002906110d3565b509250929050565b60008261113e575060016110c8565b8161114b575060006110c8565b8160018114611161576002811461116b57611187565b60019150506110c8565b60ff84111561117c5761117c611086565b50506001821b6110c8565b5060208310610133831016604e8410600b84101617156111aa575081810a6110c8565b6111b483836110ce565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156111e6576111e6611086565b029392505050565b6000610f4c838361112f565b80820281158282048414176110c8576110c8611086565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000826112a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220d79406f90f314f216f7621ea6f09836828bb79a8b4060c5d5671732078500fdd64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c8063715018a61161008c578063d63a8e1111610066578063d63a8e1114610205578063e691d03b14610228578063f2fde38b1461023b578063f3fef3a31461024e57600080fd5b8063715018a6146101cc5780638da5cb5b146101d4578063abffc9ac146101f257600080fd5b806347e7ef24116100bd57806347e7ef241461015d5780634f64b2be14610170578063572b6c051461018357600080fd5b80631fc1e25f146100e457806322be3de1146100f957806335fd95c41461014a575b600080fd5b6100f76100f2366004610f31565b61026f565b005b6101207f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100f7610158366004610f61565b6103c7565b6100f761016b366004610fd6565b6104d2565b61012061017e366004611000565b61077c565b6101bc610191366004610f31565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b6040519015158152602001610141565b6100f76107b3565b60005473ffffffffffffffffffffffffffffffffffffffff16610120565b6100f7610200366004610f31565b6107c7565b6101bc610213366004610f31565b60026020526000908152604090205460ff1681565b6100f7610236366004611019565b610a5b565b6100f7610249366004610f31565b610ab9565b61026161025c366004610fd6565b610b70565b604051908152602001610141565b610277610d91565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205460ff161561030c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f416c72656164792061646465640000000000000000000000000000000000000060448201526064015b60405180910390fd5b6004805473ffffffffffffffffffffffffffffffffffffffff909216600081815260036020908152604080832086905560018087019095557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90950180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905591815260029091529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b8584156103f157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b8773ffffffffffffffffffffffffffffffffffffffff1663d505accf610415610e4b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604481018490526064810189905260ff8716608482015260a4810186905260c4810185905260e401600060405180830381600087803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b505050506104c888886104d2565b5050505050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205460ff16610561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f546f6b656e206e6f74206c6973746564000000000000000000000000000000006044820152606401610303565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd610585610e4b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604481018490526064016020604051808303816000875af11580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106219190611050565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663da1919b3610666610e4b565b8473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d5919061106d565b6106e09060126110b5565b6106eb90600a6111ee565b6106f590856111fa565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561076057600080fd5b505af1158015610774573d6000803e3d6000fd5b505050505050565b6004818154811061078c57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6107bb610d91565b6107c56000610e93565b565b6107cf610d91565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205460ff1661085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f7420616464656400000000000000000000000000000000000000000000006044820152606401610303565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020819052604082205460048054919391610899906001906110b5565b815481106108a9576108a9611211565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902055600480546108eb906001906110b5565b815481106108fb576108fb611211565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff8481168452600390925260409092205460048054929093169291811061094657610946611211565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94851617905591831681526003909152604081205560048054806109b3576109b3611240565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590920190925573ffffffffffffffffffffffffffffffffffffffff92909216815260029091526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b610a63610d91565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b610ac1610d91565b73ffffffffffffffffffffffffffffffffffffffff8116610b64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610303565b610b6d81610e93565b50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166379cc6790610bb6610e4b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101859052604401600060405180830381600087803b158015610c2357600080fd5b505af1158015610c37573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa919061106d565b610cb59060126110b5565b610cc090600a6111ee565b610cca908361126f565b90508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610cf0610e4b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018490526044016020604051808303816000875af1158015610d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d869190611050565b5092915050565b3390565b610d99610e4b565b73ffffffffffffffffffffffffffffffffffffffff16610dce60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146107c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610303565b3360009081526001602052604081205460ff1615610e8e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610f2c57600080fd5b919050565b600060208284031215610f4357600080fd5b610f4c82610f08565b9392505050565b8015158114610b6d57600080fd5b600080600080600080600060e0888a031215610f7c57600080fd5b610f8588610f08565b965060208801359550604088013594506060880135610fa381610f53565b9350608088013560ff81168114610fb957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610fe957600080fd5b610ff283610f08565b946020939093013593505050565b60006020828403121561101257600080fd5b5035919050565b6000806040838503121561102c57600080fd5b61103583610f08565b9150602083013561104581610f53565b809150509250929050565b60006020828403121561106257600080fd5b8151610f4c81610f53565b60006020828403121561107f57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156110c8576110c8611086565b92915050565b600181815b8085111561112757817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561110d5761110d611086565b8085161561111a57918102915b93841c93908002906110d3565b509250929050565b60008261113e575060016110c8565b8161114b575060006110c8565b8160018114611161576002811461116b57611187565b60019150506110c8565b60ff84111561117c5761117c611086565b50506001821b6110c8565b5060208310610133831016604e8410600b84101617156111aa575081810a6110c8565b6111b483836110ce565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156111e6576111e6611086565b029392505050565b6000610f4c838361112f565b80820281158282048414176110c8576110c8611086565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000826112a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220d79406f90f314f216f7621ea6f09836828bb79a8b4060c5d5671732078500fdd64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/StableVault.sol:StableVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14491,
        "contract": "contracts/StableVault.sol:StableVault",
        "label": "_isTrustedForwarder",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10709,
        "contract": "contracts/StableVault.sol:StableVault",
        "label": "allowed",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10713,
        "contract": "contracts/StableVault.sol:StableVault",
        "label": "tokenIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10716,
        "contract": "contracts/StableVault.sol:StableVault",
        "label": "tokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}