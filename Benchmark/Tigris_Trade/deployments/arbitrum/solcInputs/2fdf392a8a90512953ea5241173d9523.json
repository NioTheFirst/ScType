{
  "language": "Solidity",
  "sources": {
    "contracts/NFTSale.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IERC721 {\n    function balanceOf(address) external view returns (uint256);\n    function safeTransferMany(address, uint[] memory) external;\n    function claim(address) external;\n}\n\ninterface IERC20 {\n    function balanceOf(address) external view returns (uint256);\n    function transfer(address, uint) external;\n    function transferFrom(address, address, uint) external;\n}\n\ncontract NFTSale is Ownable {\n\n    uint public price;\n    IERC721 public nft;\n    IERC20 public token;\n\n    uint[] public availableIds;\n\n    constructor (IERC721 _nft, IERC20 _token) {\n        nft = _nft;\n        token = _token;\n    }\n\n\n    function setPrice(uint _price) external onlyOwner {\n        price = _price;\n    }\n\n    function available() external view returns (uint) {\n        return nft.balanceOf(address(this));\n    }\n\n    function buy(uint _amount) external {\n        require(_amount <= availableIds.length, \"Not enough for sale\");\n        uint _tokenAmount = _amount*price;\n        token.transferFrom(msg.sender, owner(), _tokenAmount);\n        uint[] memory _sold = new uint[](_amount);\n        for (uint i=0; i<_amount; i++) {\n            _sold[i] = availableIds[(availableIds.length-i) - 1];\n        }\n        for (uint i=0; i<_amount; i++) {\n            availableIds.pop();\n        }\n        nft.safeTransferMany(msg.sender, _sold);\n    }\n\n    function recovertoken() external {\n        token.transfer(owner(), token.balanceOf(address(this)));\n    }\n\n    function recoverNft() external onlyOwner {\n        nft.safeTransferMany(owner(), availableIds);\n        availableIds = new uint[](0);\n    }\n\n    function setIds(uint[] calldata _ids) external onlyOwner {\n        availableIds = _ids;\n    }\n\n    function claimPendingRev(address _tigAsset) external {\n        nft.claim(_tigAsset);\n        IERC20(_tigAsset).transfer(owner(), IERC20(_tigAsset).balanceOf(address(this)));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}