{
  "address": "0x72c2361A2Da2a98855539c0d596036E364eB8bE4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_setBaseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "ReceiveNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "_bridgeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "allowedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "approveMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tigAsset",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_destination",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "crossChain",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tigAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_userApplication",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInZRO",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrustedAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBridge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tigAsset",
          "type": "address"
        }
      ],
      "name": "pending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "safeTransferFromMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "safeTransferMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "setAllowedAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "name": "setEndpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        }
      ],
      "name": "setGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setMaxBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "setTrustedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe26cd63fe10be90a972afc158803eebebbe0dd5fa58bd744d50b934d56911a43",
  "receipt": {
    "to": null,
    "from": "0x8c807CDdB6fAADF96956353f70ea60D63fAb69D5",
    "contractAddress": "0x72c2361A2Da2a98855539c0d596036E364eB8bE4",
    "transactionIndex": 1,
    "gasUsed": "14022154",
    "logsBloom": "0x
    "blockHash": "0x5929d19d1092db1a3e402e8fbe9d9525595e080f0ece52ae296dd6270d8872c5",
    "transactionHash": "0xe26cd63fe10be90a972afc158803eebebbe0dd5fa58bd744d50b934d56911a43",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 1675724,
        "transactionHash": "0xe26cd63fe10be90a972afc158803eebebbe0dd5fa58bd744d50b934d56911a43",
        "address": "0x72c2361A2Da2a98855539c0d596036E364eB8bE4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c807cddb6faadf96956353f70ea60d63fab69d5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5929d19d1092db1a3e402e8fbe9d9525595e080f0ece52ae296dd6270d8872c5"
      }
    ],
    "blockNumber": 1675724,
    "cumulativeGasUsed": "14022154",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "",
    "Tigris Governance NFT",
    "Tigris Gov NFT"
  ],
  "numDeployments": 1,
  "solcInputHash": "7b1ca2c078e5196f2ac66a3b3c2e2fb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_setBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"ReceiveNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_bridgeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"allowedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"approveMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tigAsset\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_destination\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"crossChain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tigAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInZRO\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrustedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tigAsset\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"safeTransferFromMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"safeTransferMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setAllowedAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"name\":\"setEndpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setTrustedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GovNFTBridged.sol\":\"GovNFTBridged\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/GovNFTBridged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./utils/MetaContext.sol\\\";\\nimport \\\"./interfaces/IGovNFT.sol\\\";\\nimport \\\"./utils/ExcessivelySafeCall.sol\\\";\\n\\ncontract GovNFTBridged is ERC721Enumerable, ILayerZeroReceiver, MetaContext, IGovNFT {\\n    using ExcessivelySafeCall for address;\\n\\n    uint256 public gas = 150000;\\n    string public baseURI;\\n    uint256 public maxBridge = 20;\\n    ILayerZeroEndpoint public endpoint;\\n\\n    mapping(uint16 => mapping(address => bool)) public isTrustedAddress;\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n    event ReceiveNFT(\\n        uint16 _srcChainId,\\n        address _from,\\n        uint256[] _tokenId\\n    );\\n\\n    constructor(\\n        address _endpoint,\\n        string memory _setBaseURI,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC721(_name, _symbol) {\\n        endpoint = ILayerZeroEndpoint(_endpoint);\\n        baseURI = _setBaseURI;\\n    }\\n\\n    function _baseURI() internal override view returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function setBaseURI(string calldata _newBaseURI) external onlyOwner {\\n        baseURI = _newBaseURI;\\n    }\\n\\n    function _bridgeMint(address to, uint256 tokenId) public {\\n        require(msg.sender == address(this) || _msgSender() == owner(), \\\"NotBridge\\\");\\n        require(tokenId <= 10000 && tokenId != 0, \\\"BadID\\\");\\n        for (uint i=0; i<assetsLength(); i++) {\\n            userPaid[to][assets[i]] += accRewardsPerNFT[assets[i]];\\n        }\\n        super._mint(to, tokenId);\\n    }\\n\\n    function _burn(uint256 tokenId) internal override {\\n        address owner = ownerOf(tokenId);\\n        for (uint i=0; i<assetsLength(); i++) {\\n            userDebt[owner][assets[i]] += accRewardsPerNFT[assets[i]];\\n            userDebt[owner][assets[i]] -= userPaid[owner][assets[i]]/balanceOf(owner);\\n            userPaid[owner][assets[i]] -= userPaid[owner][assets[i]]/balanceOf(owner);            \\n        }\\n        super._burn(tokenId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        require(ownerOf(tokenId) == from, \\\"!Owner\\\");\\n        for (uint i=0; i<assetsLength(); i++) {\\n            userDebt[from][assets[i]] += accRewardsPerNFT[assets[i]];\\n            userDebt[from][assets[i]] -= userPaid[from][assets[i]]/balanceOf(from);\\n            userPaid[from][assets[i]] -= userPaid[from][assets[i]]/balanceOf(from);\\n            userPaid[to][assets[i]] += accRewardsPerNFT[assets[i]];\\n        }\\n        super._transfer(from, to, tokenId);\\n    }\\n\\n    function setTrustedAddress(uint16 _chainId, address _contract, bool _bool) external onlyOwner {\\n        isTrustedAddress[_chainId][_contract] = _bool;\\n    }\\n\\n    function crossChain(\\n        uint16 _dstChainId,\\n        bytes memory _destination,\\n        address _to,\\n        uint256[] memory tokenId\\n    ) public payable {\\n        require(tokenId.length > 0, \\\"Not bridging\\\");\\n        for (uint i=0; i<tokenId.length; i++) {\\n            require(_msgSender() == ownerOf(tokenId[i]), \\\"Not the owner\\\");\\n            // burn NFT\\n            _burn(tokenId[i]);\\n        }\\n        address targetAddress;\\n        assembly {\\n            targetAddress := mload(add(_destination, 20))\\n        }\\n        require(isTrustedAddress[_dstChainId][targetAddress], \\\"!Trusted\\\");\\n        bytes memory payload = abi.encode(_to, tokenId);\\n        // encode adapterParams to specify more gas for the destination\\n        uint16 version = 1;\\n        uint256 _gas = 500_000 + gas*tokenId.length;\\n        bytes memory adapterParams = abi.encodePacked(version, _gas);\\n        (uint256 messageFee, ) = endpoint.estimateFees(\\n            _dstChainId,\\n            address(this),\\n            payload,\\n            false,\\n            adapterParams\\n        );\\n        require(\\n            msg.value >= messageFee,\\n            \\\"Must send enough value to cover messageFee\\\"\\n        );\\n        endpoint.send{value: msg.value}(\\n            _dstChainId,\\n            _destination,\\n            payload,\\n            payable(_msgSender()),\\n            address(0x0),\\n            adapterParams\\n        );\\n    }\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) external override {\\n        require(_msgSender() == address(endpoint), \\\"!Endpoint\\\");\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft()*4/5, 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public {\\n        // only internal transaction\\n        require(msg.sender == address(this), \\\"NonblockingLzApp: caller must be app\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64, bytes memory _payload) internal {\\n        address fromAddress;\\n        assembly {\\n            fromAddress := mload(add(_srcAddress, 20))\\n        }\\n        require(isTrustedAddress[_srcChainId][fromAddress], \\\"!TrustedAddress\\\");\\n        (address toAddress, uint256[] memory tokenId) = abi.decode(\\n            _payload,\\n            (address, uint256[])\\n        );\\n        // mint the tokens\\n        for (uint i=0; i<tokenId.length; i++) {\\n            _bridgeMint(toAddress, tokenId[i]);\\n        }\\n        emit ReceiveNFT(_srcChainId, toAddress, tokenId);\\n    }\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n\\n    // Endpoint.sol estimateFees() returns the fees for the message\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint256 nativeFee, uint256 zroFee) {\\n        return\\n            endpoint.estimateFees(\\n                _dstChainId,\\n                _userApplication,\\n                _payload,\\n                _payInZRO,\\n                _adapterParams\\n            );\\n    }\\n\\n    function setGas(uint _gas) external onlyOwner {\\n        gas = _gas;\\n    }\\n\\n    function setEndpoint(ILayerZeroEndpoint _endpoint) external onlyOwner {\\n        require(address(_endpoint) != address(0), \\\"ZeroAddress\\\");\\n        endpoint = _endpoint;\\n    }\\n\\n    function safeTransferMany(address _to, uint[] calldata _ids) external {\\n        for (uint i=0; i<_ids.length; i++) {\\n            _transfer(_msgSender(), _to, _ids[i]);\\n        }\\n    }\\n\\n    function safeTransferFromMany(address _from, address _to, uint[] calldata _ids) external {\\n        for (uint i=0; i<_ids.length; i++) {\\n            safeTransferFrom(_from, _to, _ids[i]);\\n        }\\n    }\\n\\n    function approveMany(address _to, uint[] calldata _ids) external {\\n        for (uint i=0; i<_ids.length; i++) {\\n            approve(_to, _ids[i]);\\n        }\\n    }\\n\\n    // Rewards\\n    address[] public assets;\\n    mapping(address => bool) private _allowedAsset;\\n    mapping(address => uint) private assetsIndex;\\n    mapping(address => mapping(address => uint256)) private userPaid;\\n    mapping(address => mapping(address => uint256)) private userDebt;\\n    mapping(address => uint256) private accRewardsPerNFT;\\n\\n    function claim(address _tigAsset) external {\\n        address _msgsender = _msgSender();\\n        uint256 amount = pending(_msgsender, _tigAsset);\\n        userPaid[_msgsender][_tigAsset] += amount;\\n        IERC20(_tigAsset).transfer(_msgsender, amount);\\n    }\\n\\n    function distribute(address _tigAsset, uint _amount) external {\\n        if (assets.length == 0 || assets[assetsIndex[_tigAsset]] == address(0) || totalSupply() == 0 || !_allowedAsset[_tigAsset]) return;\\n        try IERC20(_tigAsset).transferFrom(_msgSender(), address(this), _amount) {\\n            accRewardsPerNFT[_tigAsset] += _amount/totalSupply();\\n        } catch {\\n            return;\\n        }\\n    }\\n\\n    function pending(address user, address _tigAsset) public view returns (uint256) {\\n        return userDebt[user][_tigAsset] + balanceOf(user)*accRewardsPerNFT[_tigAsset] - userPaid[user][_tigAsset]; \\n    }\\n\\n    function addAsset(address _asset) external onlyOwner {\\n        require(assets.length == 0 || assets[assetsIndex[_asset]] != _asset, \\\"Already added\\\");\\n        assetsIndex[_asset] = assets.length;\\n        assets.push(_asset);\\n        _allowedAsset[_asset] = true;\\n    }\\n\\n    function setAllowedAsset(address _asset, bool _bool) external onlyOwner {\\n        _allowedAsset[_asset] = _bool;\\n    }\\n\\n    function setMaxBridge(uint256 _max) external onlyOwner {\\n        maxBridge = _max;\\n    }\\n\\n    function assetsLength() public view returns (uint256) {\\n        return assets.length;\\n    }\\n\\n    function allowedAsset(address _asset) external view returns (bool) {\\n        return _allowedAsset[_asset];\\n    }\\n\\n    function balanceIds(address _user) external view returns (uint[] memory) {\\n        uint[] memory _ids = new uint[](balanceOf(_user));\\n        for (uint i=0; i<_ids.length; i++) {\\n            _ids[i] = tokenOfOwnerByIndex(_user, i);\\n        }\\n        return _ids;\\n    }\\n\\n    // META-TX\\n    function _msgSender() internal view override(Context, MetaContext) returns (address sender) {\\n        return MetaContext._msgSender();\\n    }\\n    function _msgData() internal view override(Context, MetaContext) returns (bytes calldata) {\\n        return MetaContext._msgData();\\n    }\\n}\",\"keccak256\":\"0x6ba0c087b87829cf31dee0d022351438340d220a3bf1142948aba306e9be86dd\",\"license\":\"MIT\"},\"contracts/interfaces/IGovNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGovNFT {\\n    function distribute(address _tigAsset, uint _amount) external;\\n    function safeTransferMany(address _to, uint[] calldata _ids) external;\\n    function claim(address _tigAsset) external;\\n    function pending(address user, address _tigAsset) external view returns (uint256);\\n}\",\"keccak256\":\"0xf00d0f47b5203afe24d1a9f6f0e0d76ec6d48b6f4dffab0dd14a80338f5d157c\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\",\"keccak256\":\"0x39f957310be67a711c26cdd1b6c664d8f219e5ab7912e065b08db2faac940c81\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\",\"keccak256\":\"0xcccb3c6e5fdfdc58385bc6b1cd2a6f9eae1105543778a585a7a796758a97afa6\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\",\"keccak256\":\"0x4040cafd28f9f2b8fe2ba990d65be437e1042eeda2e201043d32b2cba026cdaa\",\"license\":\"BUSL-1.1\"},\"contracts/utils/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23942250ddd277c443fa27c6b4ab51e6b3b5e654548b6b9e8d785a88ebec4dfe\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/utils/MetaContext.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MetaContext is Ownable {\\n    mapping(address => bool) private _isTrustedForwarder;\\n\\n    function setTrustedForwarder(address _forwarder, bool _bool) external onlyOwner {\\n        _isTrustedForwarder[_forwarder] = _bool;\\n    }\\n\\n    function isTrustedForwarder(address _forwarder) external view returns (bool) {\\n        return _isTrustedForwarder[_forwarder];\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (_isTrustedForwarder[msg.sender]) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (_isTrustedForwarder[msg.sender]) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a15b1245c2df01e82f4dccd4ad2e5791b5d2dcf75d6f026297f39b652e35aad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052620249f0600c556014600e553480156200001d57600080fd5b5060405162005ab438038062005ab4833981016040819052620000409162000222565b8181600062000050838262000363565b5060016200005f828262000363565b5050506200007c62000076620000b060201b60201c565b620000cc565b600f80546001600160a01b0319166001600160a01b038616179055600d620000a5848262000363565b50505050506200042f565b6000620000c76200011e60201b620028ed1760201c565b905090565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b336000908152600b602052604081205460ff161562000144575060131936013560601c90565b620000c76200015960201b6200293a1760201c565b3390565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200018557600080fd5b81516001600160401b0380821115620001a257620001a26200015d565b604051601f8301601f19908116603f01168101908282118183101715620001cd57620001cd6200015d565b81604052838152602092508683858801011115620001ea57600080fd5b600091505b838210156200020e5785820183015181830184015290820190620001ef565b600093810190920192909252949350505050565b600080600080608085870312156200023957600080fd5b84516001600160a01b03811681146200025157600080fd5b60208601519094506001600160401b03808211156200026f57600080fd5b6200027d8883890162000173565b945060408701519150808211156200029457600080fd5b620002a28883890162000173565b93506060870151915080821115620002b957600080fd5b50620002c88782880162000173565b91505092959194509250565b600181811c90821680620002e957607f821691505b6020821081036200030a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200035e57600081815260208120601f850160051c81016020861015620003395750805b601f850160051c820191505b818110156200035a5782815560010162000345565b5050505b505050565b81516001600160401b038111156200037f576200037f6200015d565b6200039781620003908454620002d4565b8462000310565b602080601f831160018114620003cf5760008415620003b65750858301515b600019600386901b1c1916600185901b1785556200035a565b600085815260208120601f198616915b828110156200040057888601518255948401946001909101908401620003df565b50858210156200041f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b615675806200043f6000396000f3fe6080604052600436106103285760003560e01c80636c0360eb116101a5578063cf35bdd0116100ec578063e691d03b11610095578063f2fde38b1161006f578063f2fde38b146109c8578063f35da34c146109e8578063f50477a214610a2e578063fb93210814610a4357600080fd5b8063e691d03b14610932578063e985e9c514610952578063ec92977d146109a857600080fd5b8063d9a3aa3c116100c6578063d9a3aa3c146108d2578063dbbb4155146108f2578063dd51faa21461091257600080fd5b8063cf35bdd014610872578063d1deba1f14610892578063d6651c70146108b257600080fd5b806399bb81341161014e578063adc82e0111610128578063adc82e0114610805578063b88d4fde14610832578063c87b56dd1461085257600080fd5b806399bb81341461078a578063a22cb465146107aa578063a914fdc6146107ca57600080fd5b8063715018a61161017f578063715018a6146107355780638da5cb5b1461074a57806395d89b411461077557600080fd5b80636c0360eb146106ea5780636ca7c216146106ff57806370a082311461071557600080fd5b80633206e3e711610274578063572b6c051161021d5780635deccd72116101f75780635deccd721461066a5780635e280f111461067d5780636352211e146106aa57806366ad5c8a146106ca57600080fd5b8063572b6c05146105b557806358c5de6a146105fb5780635b8c41e61461061b57600080fd5b8063456560f41161024e578063456560f41461055f5780634f6ccce71461057557806355f804b31461059557600080fd5b80633206e3e7146104ea57806340a7bb101461050a57806342842e0e1461053f57600080fd5b806318160ddd116102d657806323b872dd116102b057806323b872dd1461048a578063298410e5146104aa5780632f745c59146104ca57600080fd5b806318160ddd1461042b57806319bc9ae81461044a5780631e83409a1461046a57600080fd5b806306fdde031161030757806306fdde03146103a4578063081812fc146103c6578063095ea7b31461040b57600080fd5b80621d35671461032d57806301ffc9a71461034f57806304e538fd14610384575b600080fd5b34801561033957600080fd5b5061034d610348366004614714565b610a63565b005b34801561035b57600080fd5b5061036f61036a3660046147c7565b610c74565b60405190151581526020015b60405180910390f35b34801561039057600080fd5b5061034d61039f366004614806565b610cd0565b3480156103b057600080fd5b506103b9610ed5565b60405161037b91906148a0565b3480156103d257600080fd5b506103e66103e13660046148b3565b610f67565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161037b565b34801561041757600080fd5b5061034d610426366004614806565b610f9b565b34801561043757600080fd5b506008545b60405190815260200161037b565b34801561045657600080fd5b5061043c6104653660046148cc565b611146565b34801561047657600080fd5b5061034d610485366004614905565b6111e8565b34801561049657600080fd5b5061034d6104a5366004614922565b6112ed565b3480156104b657600080fd5b5061034d6104c5366004614905565b611395565b3480156104d657600080fd5b5061043c6104e5366004614806565b611528565b3480156104f657600080fd5b5061034d6105053660046149af565b6115f7565b34801561051657600080fd5b5061052a610525366004614a64565b61163e565b6040805192835260208301919091520161037b565b34801561054b57600080fd5b5061034d61055a366004614922565b6116f5565b34801561056b57600080fd5b5061043c600e5481565b34801561058157600080fd5b5061043c6105903660046148b3565b611710565b3480156105a157600080fd5b5061034d6105b0366004614b0c565b6117ce565b3480156105c157600080fd5b5061036f6105d0366004614905565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205460ff1690565b34801561060757600080fd5b5061034d610616366004614b4e565b6117e3565b34801561062757600080fd5b5061043c610636366004614b97565b6011602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b61034d610678366004614c19565b611851565b34801561068957600080fd5b50600f546103e69073ffffffffffffffffffffffffffffffffffffffff1681565b3480156106b657600080fd5b506103e66106c53660046148b3565b611cb0565b3480156106d657600080fd5b5061034d6106e5366004614cfb565b611d3c565b3480156106f657600080fd5b506103b9611e40565b34801561070b57600080fd5b5061043c600c5481565b34801561072157600080fd5b5061043c610730366004614905565b611ece565b34801561074157600080fd5b5061034d611f9c565b34801561075657600080fd5b50600a5473ffffffffffffffffffffffffffffffffffffffff166103e6565b34801561078157600080fd5b506103b9611fb0565b34801561079657600080fd5b5061034d6107a5366004614d8f565b611fbf565b3480156107b657600080fd5b5061034d6107c5366004614de4565b611ffe565b3480156107d657600080fd5b5061036f6107e5366004614e12565b601060209081526000928352604080842090915290825290205460ff1681565b34801561081157600080fd5b50610825610820366004614905565b612010565b60405161037b9190614e69565b34801561083e57600080fd5b5061034d61084d366004614e7c565b6120ad565b34801561085e57600080fd5b506103b961086d3660046148b3565b612156565b34801561087e57600080fd5b506103e661088d3660046148b3565b6121bc565b34801561089e57600080fd5b5061034d6108ad366004614cfb565b6121f3565b3480156108be57600080fd5b5061034d6108cd366004614d8f565b612475565b3480156108de57600080fd5b5061034d6108ed366004614de4565b6124bc565b3480156108fe57600080fd5b5061034d61090d366004614905565b61251a565b34801561091e57600080fd5b5061034d61092d3660046148b3565b6125e6565b34801561093e57600080fd5b5061034d61094d366004614de4565b6125f3565b34801561095e57600080fd5b5061036f61096d3660046148cc565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156109b457600080fd5b5061034d6109c33660046148b3565b612651565b3480156109d457600080fd5b5061034d6109e3366004614905565b61265e565b3480156109f457600080fd5b5061036f610a03366004614905565b73ffffffffffffffffffffffffffffffffffffffff1660009081526013602052604090205460ff1690565b348015610a3a57600080fd5b5060125461043c565b348015610a4f57600080fd5b5061034d610a5e366004614806565b612715565b600f5473ffffffffffffffffffffffffffffffffffffffff16610a8461293e565b73ffffffffffffffffffffffffffffffffffffffff1614610b06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21456e64706f696e74000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080610bcb60055a610b1a906004614f0b565b610b249190614f22565b60966366ad5c8a60e01b89898989604051602401610b459493929190614f5d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915230929190612948565b9150915081610c6c578280519060200120601160008861ffff1661ffff16815260200190815260200160002086604051610c059190614fa7565b90815260408051918290036020908101832067ffffffffffffffff89166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90610c639088908890889088908790614fc3565b60405180910390a15b505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d63000000000000000000000000000000000000000000000000000000001480610cca5750610cca826129d3565b92915050565b33301480610d125750600a5473ffffffffffffffffffffffffffffffffffffffff16610cfa61293e565b73ffffffffffffffffffffffffffffffffffffffff16145b610d78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f7442726964676500000000000000000000000000000000000000000000006044820152606401610afd565b6127108111158015610d8957508015155b610def576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f42616449440000000000000000000000000000000000000000000000000000006044820152606401610afd565b60005b601254811015610ec6576017600060128381548110610e1357610e13615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff90811684528382019490945260409283018220549387168252601590529081206012805491929185908110610e6d57610e6d615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400181208054909190610eae908490615051565b90915550819050610ebe81615064565b915050610df2565b50610ed18282612ab6565b5050565b606060008054610ee49061509c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f109061509c565b8015610f5d5780601f10610f3257610100808354040283529160200191610f5d565b820191906000526020600020905b815481529060010190602001808311610f4057829003601f168201915b5050505050905090565b6000610f7282612ce9565b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610fa682611cb0565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610afd565b8073ffffffffffffffffffffffffffffffffffffffff1661108261293e565b73ffffffffffffffffffffffffffffffffffffffff1614806110ab57506110ab8161096d61293e565b611137576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610afd565b6111418383612d74565b505050565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260156020908152604080832093851683529281528282205460179091529181205490919061119085611ece565b61119a9190614f0b565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152601660209081526040808320938816835292905220546111d79190615051565b6111e191906150ef565b9392505050565b60006111f261293e565b905060006112008284611146565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152601560209081526040808320938816835292905290812080549293508392909190611249908490615051565b90915550506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e79190615102565b50505050565b6112fe6112f861293e565b82612e14565b61138a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610afd565b611141838383612ed4565b61139d613315565b6012541580611407575073ffffffffffffffffffffffffffffffffffffffff81166000818152601460205260409020546012805490919081106113e2576113e2615022565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b61146d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f416c7265616479206164646564000000000000000000000000000000000000006044820152606401610afd565b6012805473ffffffffffffffffffffffffffffffffffffffff909216600081815260146020908152604080832086905560018087019095557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344490950180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905591815260139091529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b600061153383611ece565b82106115c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610afd565b5073ffffffffffffffffffffffffffffffffffffffff919091166000908152600660209081526040808320938352929052205490565b60005b8181101561163757611625858585858581811061161957611619615022565b905060200201356116f5565b8061162f81615064565b9150506115fa565b5050505050565b600f546040517f40a7bb10000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff909116906340a7bb10906116a5908c908c908c908c908c908c908c90600401615168565b6040805180830381865afa1580156116c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e591906151cb565b9150915097509795505050505050565b611141838383604051806020016040528060008152506120ad565b600061171b60085490565b82106117a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610afd565b600882815481106117bc576117bc615022565b90600052602060002001549050919050565b6117d6613315565b600d611141828483615235565b6117eb613315565b61ffff909216600090815260106020908152604080832073ffffffffffffffffffffffffffffffffffffffff90941683529290522080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055565b60008151116118bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f74206272696467696e6700000000000000000000000000000000000000006044820152606401610afd565b60005b81518110156119b9576118ea8282815181106118dd576118dd615022565b6020026020010151611cb0565b73ffffffffffffffffffffffffffffffffffffffff1661190861293e565b73ffffffffffffffffffffffffffffffffffffffff1614611985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420746865206f776e6572000000000000000000000000000000000000006044820152606401610afd565b6119a782828151811061199a5761199a615022565b60200260200101516133cf565b806119b181615064565b9150506118bf565b50601483015161ffff8516600090815260106020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16611a5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21547275737465640000000000000000000000000000000000000000000000006044820152606401610afd565b60008383604051602001611a7292919061534f565b604051602081830303815290604052905060006001905060008451600c54611a9a9190614f0b565b611aa7906207a120615051565b6040805160f085901b7fffff0000000000000000000000000000000000000000000000000000000000001660208201526022808201849052825180830390910181526042820192839052600f547f40a7bb100000000000000000000000000000000000000000000000000000000090935292935060009173ffffffffffffffffffffffffffffffffffffffff16906340a7bb1090611b51908d9030908a908790899060460161537e565b6040805180830381865afa158015611b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9191906151cb565b50905080341015611c24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4d7573742073656e6420656e6f7567682076616c756520746f20636f7665722060448201527f6d657373616765466565000000000000000000000000000000000000000000006064820152608401610afd565b600f5473ffffffffffffffffffffffffffffffffffffffff1663c5803100348c8c89611c4e61293e565b6000896040518863ffffffff1660e01b8152600401611c72969594939291906153d1565b6000604051808303818588803b158015611c8b57600080fd5b505af1158015611c9f573d6000803e3d6000fd5b505050505050505050505050505050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610cca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610afd565b333014611dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560448201527f20617070000000000000000000000000000000000000000000000000000000006064820152608401610afd565b610c6c8686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152899350915087908790819084018382808284376000920191909152506136c592505050565b600d8054611e4d9061509c565b80601f0160208091040260200160405190810160405280929190818152602001828054611e799061509c565b8015611ec65780601f10611e9b57610100808354040283529160200191611ec6565b820191906000526020600020905b815481529060010190602001808311611ea957829003601f168201915b505050505081565b600073ffffffffffffffffffffffffffffffffffffffff8216611f73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610afd565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b611fa4613315565b611fae60006137f8565b565b606060018054610ee49061509c565b60005b818110156112e757611fec84848484818110611fe057611fe0615022565b90506020020135610f9b565b80611ff681615064565b915050611fc2565b610ed161200961293e565b838361386f565b6060600061201d83611ece565b67ffffffffffffffff811115612035576120356145f0565b60405190808252806020026020018201604052801561205e578160200160208202803683370190505b50905060005b81518110156120a6576120778482611528565b82828151811061208957612089615022565b60209081029190910101528061209e81615064565b915050612064565b5092915050565b6120be6120b861293e565b83612e14565b61214a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610afd565b6112e78484848461399c565b606061216182612ce9565b600061216b613a3f565b9050600081511161218b57604051806020016040528060008152506111e1565b8061219584613a4e565b6040516020016121a6929190615445565b6040516020818303038152906040529392505050565b601281815481106121cc57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b61ffff861660009081526011602052604080822090516122169088908890615474565b908152604080516020928190038301902067ffffffffffffffff8716600090815292529020549050806122cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201527f61676500000000000000000000000000000000000000000000000000000000006064820152608401610afd565b8083836040516122dc929190615474565b604051809103902014612371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6160448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610afd565b61ffff871660009081526011602052604080822090516123949089908990615474565b908152604080516020928190038301812067ffffffffffffffff8916600090815290845282902093909355601f8801829004820283018201905286825261242d918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506136c592505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051612464959493929190615484565b60405180910390a150505050505050565b60005b818110156112e7576124aa61248b61293e565b8585858581811061249e5761249e615022565b90506020020135612ed4565b806124b481615064565b915050612478565b6124c4613315565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260136020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b612522613315565b73ffffffffffffffffffffffffffffffffffffffff811661259f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5a65726f416464726573730000000000000000000000000000000000000000006044820152606401610afd565b600f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6125ee613315565b600c55565b6125fb613315565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b612659613315565b600e55565b612666613315565b73ffffffffffffffffffffffffffffffffffffffff8116612709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610afd565b612712816137f8565b50565b601254158061277e575073ffffffffffffffffffffffffffffffffffffffff821660009081526014602052604081205460128054909190811061275a5761275a615022565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16145b806127895750600854155b806127ba575073ffffffffffffffffffffffffffffffffffffffff821660009081526013602052604090205460ff16155b156127c3575050565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd6127e761293e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604481018490526064016020604051808303816000875af1925050508015612899575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261289691810190615102565b60015b6128a1575050565b506008546128af9082614f22565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260176020526040812080549091906128e4908490615051565b90915550505050565b336000908152600b602052604081205460ff161561293057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b905090565b3390565b60006129356128ed565b6000606060008060008661ffff1667ffffffffffffffff81111561296e5761296e6145f0565b6040519080825280601f01601f191660200182016040528015612998576020820181803683370190505b50905060008087516020890160008d8df191503d9250868311156129ba578692505b828152826000602083013e909890975095505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480612a6657507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610cca57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610cca565b73ffffffffffffffffffffffffffffffffffffffff8216612b33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610afd565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615612bbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610afd565b612bcd600083836001613b0c565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615612c59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610afd565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260036020908152604080832080546001019055848352600290915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16612712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610afd565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091558190612dce82611cb0565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612e2083611cb0565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612e8e575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff165b80612ecc57508373ffffffffffffffffffffffffffffffffffffffff16612eb484610f67565b73ffffffffffffffffffffffffffffffffffffffff16145b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16612ef482611cb0565b73ffffffffffffffffffffffffffffffffffffffff1614612f71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f214f776e657200000000000000000000000000000000000000000000000000006044820152606401610afd565b60005b601254811015613309576017600060128381548110612f9557612f95615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff90811684528382019490945260409283018220549388168252601690529081206012805491929185908110612fef57612fef615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400181208054909190613030908490615051565b9091555061303f905084611ece565b73ffffffffffffffffffffffffffffffffffffffff85166000908152601560205260408120601280549192918590811061307b5761307b615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020546130b79190614f22565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260166020526040812060128054919291859081106130f3576130f3615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080549091906131349084906150ef565b90915550613143905084611ece565b73ffffffffffffffffffffffffffffffffffffffff85166000908152601560205260408120601280549192918590811061317f5761317f615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020546131bb9190614f22565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260156020526040812060128054919291859081106131f7576131f7615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080549091906132389084906150ef565b92505081905550601760006012838154811061325657613256615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff908116845283820194909452604092830182205493871682526015905290812060128054919291859081106132b0576132b0615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080549091906132f1908490615051565b9091555081905061330181615064565b915050612f74565b50611141838383613cb5565b61331d61293e565b73ffffffffffffffffffffffffffffffffffffffff16613352600a5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614611fae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610afd565b60006133da82611cb0565b905060005b6012548110156136bb57601760006012838154811061340057613400615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff9081168452838201949094526040928301822054938616825260169052908120601280549192918590811061345a5761345a615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040018120805490919061349b908490615051565b909155506134aa905082611ece565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260156020526040812060128054919291859081106134e6576134e6615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020546135229190614f22565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601660205260408120601280549192918590811061355e5761355e615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040018120805490919061359f9084906150ef565b909155506135ae905082611ece565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260156020526040812060128054919291859081106135ea576135ea615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020546136269190614f22565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601560205260408120601280549192918590811061366257613662615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080549091906136a39084906150ef565b909155508190506136b381615064565b9150506133df565b50610ed182613fbd565b601483015161ffff8516600090815260106020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16613768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f21547275737465644164647265737300000000000000000000000000000000006044820152606401610afd565b6000808380602001905181019061377f91906154c0565b9150915060005b81518110156137c4576137b2838383815181106137a5576137a5615022565b6020026020010151610cd0565b806137bc81615064565b915050613786565b507fd1277f109a4c2ec8d99a410396e48214f894389b6e789a231d8b7ccbb050bed787838360405161246493929190615568565b600a805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603613904576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610afd565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6139a7848484612ed4565b6139b3848484846140a3565b6112e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610afd565b6060600d8054610ee49061509c565b60606000613a5b83614284565b600101905060008167ffffffffffffffff811115613a7b57613a7b6145f0565b6040519080825280601f01601f191660200182016040528015613aa5576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084613aaf57509392505050565b613b1884848484614366565b6001811115613ba9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f7274656400000000000000000000006064820152608401610afd565b8173ffffffffffffffffffffffffffffffffffffffff8516613c1257613c0d81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613c4f565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614613c4f57613c4f8582614422565b73ffffffffffffffffffffffffffffffffffffffff8416613c7857613c73816144d9565b611637565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611637576116378482614588565b8273ffffffffffffffffffffffffffffffffffffffff16613cd582611cb0565b73ffffffffffffffffffffffffffffffffffffffff1614613d78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610afd565b73ffffffffffffffffffffffffffffffffffffffff8216613e1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610afd565b613e278383836001613b0c565b8273ffffffffffffffffffffffffffffffffffffffff16613e4782611cb0565b73ffffffffffffffffffffffffffffffffffffffff1614613eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610afd565b600081815260046020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915573ffffffffffffffffffffffffffffffffffffffff8781168086526003855283862080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000613fc882611cb0565b9050613fd8816000846001613b0c565b613fe182611cb0565b600083815260046020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915573ffffffffffffffffffffffffffffffffffffffff85168085526003845282852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600073ffffffffffffffffffffffffffffffffffffffff84163b15614279578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026140e661293e565b8786866040518563ffffffff1660e01b815260040161410894939291906155aa565b6020604051808303816000875af1925050508015614161575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261415e918101906155f3565b60015b61422e573d80801561418f576040519150601f19603f3d011682016040523d82523d6000602084013e614194565b606091505b508051600003614226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610afd565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050612ecc565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106142cd577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106142f9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061431757662386f26fc10000830492506010015b6305f5e100831061432f576305f5e100830492506008015b612710831061434357612710830492506004015b60648310614355576064830492506002015b600a8310610cca5760010192915050565b60018111156112e75773ffffffffffffffffffffffffffffffffffffffff8416156143c65773ffffffffffffffffffffffffffffffffffffffff8416600090815260036020526040812080548392906143c09084906150ef565b90915550505b73ffffffffffffffffffffffffffffffffffffffff8316156112e75773ffffffffffffffffffffffffffffffffffffffff831660009081526003602052604081208054839290614417908490615051565b909155505050505050565b6000600161442f84611ece565b61443991906150ef565b6000838152600760205260409020549091508082146144995773ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b50600091825260076020908152604080842084905573ffffffffffffffffffffffffffffffffffffffff9094168352600681528383209183525290812055565b6008546000906144eb906001906150ef565b6000838152600960205260408120546008805493945090928490811061451357614513615022565b90600052602060002001549050806008838154811061453457614534615022565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061456c5761456c615610565b6001900381819060005260206000200160009055905550505050565b600061459383611ece565b73ffffffffffffffffffffffffffffffffffffffff9093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b803561ffff811681146145eb57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614666576146666145f0565b604052919050565b600082601f83011261467f57600080fd5b813567ffffffffffffffff811115614699576146996145f0565b6146ca60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161461f565b8181528460208386010111156146df57600080fd5b816020850160208301376000918101602001919091529392505050565b803567ffffffffffffffff811681146145eb57600080fd5b6000806000806080858703121561472a57600080fd5b614733856145d9565b9350602085013567ffffffffffffffff8082111561475057600080fd5b61475c8883890161466e565b945061476a604088016146fc565b9350606087013591508082111561478057600080fd5b5061478d8782880161466e565b91505092959194509250565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461271257600080fd5b6000602082840312156147d957600080fd5b81356111e181614799565b73ffffffffffffffffffffffffffffffffffffffff8116811461271257600080fd5b6000806040838503121561481957600080fd5b8235614824816147e4565b946020939093013593505050565b60005b8381101561484d578181015183820152602001614835565b50506000910152565b6000815180845261486e816020860160208601614832565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006111e16020830184614856565b6000602082840312156148c557600080fd5b5035919050565b600080604083850312156148df57600080fd5b82356148ea816147e4565b915060208301356148fa816147e4565b809150509250929050565b60006020828403121561491757600080fd5b81356111e1816147e4565b60008060006060848603121561493757600080fd5b8335614942816147e4565b92506020840135614952816147e4565b929592945050506040919091013590565b60008083601f84011261497557600080fd5b50813567ffffffffffffffff81111561498d57600080fd5b6020830191508360208260051b85010111156149a857600080fd5b9250929050565b600080600080606085870312156149c557600080fd5b84356149d0816147e4565b935060208501356149e0816147e4565b9250604085013567ffffffffffffffff8111156149fc57600080fd5b614a0887828801614963565b95989497509550505050565b60008083601f840112614a2657600080fd5b50813567ffffffffffffffff811115614a3e57600080fd5b6020830191508360208285010111156149a857600080fd5b801515811461271257600080fd5b600080600080600080600060a0888a031215614a7f57600080fd5b614a88886145d9565b96506020880135614a98816147e4565b9550604088013567ffffffffffffffff80821115614ab557600080fd5b614ac18b838c01614a14565b909750955060608a01359150614ad682614a56565b90935060808901359080821115614aec57600080fd5b50614af98a828b01614a14565b989b979a50959850939692959293505050565b60008060208385031215614b1f57600080fd5b823567ffffffffffffffff811115614b3657600080fd5b614b4285828601614a14565b90969095509350505050565b600080600060608486031215614b6357600080fd5b614b6c846145d9565b92506020840135614b7c816147e4565b91506040840135614b8c81614a56565b809150509250925092565b600080600060608486031215614bac57600080fd5b614bb5846145d9565b9250602084013567ffffffffffffffff811115614bd157600080fd5b614bdd8682870161466e565b925050614bec604085016146fc565b90509250925092565b600067ffffffffffffffff821115614c0f57614c0f6145f0565b5060051b60200190565b60008060008060808587031215614c2f57600080fd5b614c38856145d9565b935060208086013567ffffffffffffffff80821115614c5657600080fd5b614c6289838a0161466e565b955060408801359150614c74826147e4565b90935060608701359080821115614c8a57600080fd5b508601601f81018813614c9c57600080fd5b8035614caf614caa82614bf5565b61461f565b81815260059190911b8201830190838101908a831115614cce57600080fd5b928401925b82841015614cec57833582529284019290840190614cd3565b979a9699509497505050505050565b60008060008060008060808789031215614d1457600080fd5b614d1d876145d9565b9550602087013567ffffffffffffffff80821115614d3a57600080fd5b614d468a838b01614a14565b9097509550859150614d5a60408a016146fc565b94506060890135915080821115614d7057600080fd5b50614d7d89828a01614a14565b979a9699509497509295939492505050565b600080600060408486031215614da457600080fd5b8335614daf816147e4565b9250602084013567ffffffffffffffff811115614dcb57600080fd5b614dd786828701614963565b9497909650939450505050565b60008060408385031215614df757600080fd5b8235614e02816147e4565b915060208301356148fa81614a56565b60008060408385031215614e2557600080fd5b6148ea836145d9565b600081518084526020808501945080840160005b83811015614e5e57815187529582019590820190600101614e42565b509495945050505050565b6020815260006111e16020830184614e2e565b60008060008060808587031215614e9257600080fd5b8435614e9d816147e4565b93506020850135614ead816147e4565b925060408501359150606085013567ffffffffffffffff811115614ed057600080fd5b61478d8782880161466e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610cca57610cca614edc565b600082614f58577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b61ffff85168152608060208201526000614f7a6080830186614856565b67ffffffffffffffff851660408401528281036060840152614f9c8185614856565b979650505050505050565b60008251614fb9818460208701614832565b9190910192915050565b61ffff8616815260a060208201526000614fe060a0830187614856565b67ffffffffffffffff8616604084015282810360608401526150028186614856565b905082810360808401526150168185614856565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820180821115610cca57610cca614edc565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361509557615095614edc565b5060010190565b600181811c908216806150b057607f821691505b6020821081036150e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b81810381811115610cca57610cca614edc565b60006020828403121561511457600080fd5b81516111e181614a56565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b61ffff8816815273ffffffffffffffffffffffffffffffffffffffff8716602082015260a0604082015260006151a260a08301878961511f565b851515606084015282810360808401526151bd81858761511f565b9a9950505050505050505050565b600080604083850312156151de57600080fd5b505080516020909101519092909150565b601f82111561114157600081815260208120601f850160051c810160208610156152165750805b601f850160051c820191505b81811015610c6c57828155600101615222565b67ffffffffffffffff83111561524d5761524d6145f0565b6152618361525b835461509c565b836151ef565b6000601f8411600181146152b3576000851561527d5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611637565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b8281101561530257868501358255602094850194600190920191016152e2565b508682101561533d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000612ecc6040830184614e2e565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a0604082015260006153b760a0830186614856565b841515606084015282810360808401526150168185614856565b61ffff8716815260c0602082015260006153ee60c0830188614856565b82810360408401526154008188614856565b73ffffffffffffffffffffffffffffffffffffffff87811660608601528616608085015283810360a085015290506154388185614856565b9998505050505050505050565b60008351615457818460208801614832565b83519083019061546b818360208801614832565b01949350505050565b8183823760009101908152919050565b61ffff861681526080602082015260006154a260808301868861511f565b67ffffffffffffffff94909416604083015250606001529392505050565b600080604083850312156154d357600080fd5b82516154de816147e4565b8092505060208084015167ffffffffffffffff8111156154fd57600080fd5b8401601f8101861361550e57600080fd5b805161551c614caa82614bf5565b81815260059190911b8201830190838101908883111561553b57600080fd5b928401925b8284101561555957835182529284019290840190615540565b80955050505050509250929050565b61ffff8416815273ffffffffffffffffffffffffffffffffffffffff831660208201526060604082015260006155a16060830184614e2e565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526155e96080830184614856565b9695505050505050565b60006020828403121561560557600080fd5b81516111e181614799565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220c5e576b42469966f54710a336dae2e30326665dcbdd8f29c78bb2df49ba99d2164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103285760003560e01c80636c0360eb116101a5578063cf35bdd0116100ec578063e691d03b11610095578063f2fde38b1161006f578063f2fde38b146109c8578063f35da34c146109e8578063f50477a214610a2e578063fb93210814610a4357600080fd5b8063e691d03b14610932578063e985e9c514610952578063ec92977d146109a857600080fd5b8063d9a3aa3c116100c6578063d9a3aa3c146108d2578063dbbb4155146108f2578063dd51faa21461091257600080fd5b8063cf35bdd014610872578063d1deba1f14610892578063d6651c70146108b257600080fd5b806399bb81341161014e578063adc82e0111610128578063adc82e0114610805578063b88d4fde14610832578063c87b56dd1461085257600080fd5b806399bb81341461078a578063a22cb465146107aa578063a914fdc6146107ca57600080fd5b8063715018a61161017f578063715018a6146107355780638da5cb5b1461074a57806395d89b411461077557600080fd5b80636c0360eb146106ea5780636ca7c216146106ff57806370a082311461071557600080fd5b80633206e3e711610274578063572b6c051161021d5780635deccd72116101f75780635deccd721461066a5780635e280f111461067d5780636352211e146106aa57806366ad5c8a146106ca57600080fd5b8063572b6c05146105b557806358c5de6a146105fb5780635b8c41e61461061b57600080fd5b8063456560f41161024e578063456560f41461055f5780634f6ccce71461057557806355f804b31461059557600080fd5b80633206e3e7146104ea57806340a7bb101461050a57806342842e0e1461053f57600080fd5b806318160ddd116102d657806323b872dd116102b057806323b872dd1461048a578063298410e5146104aa5780632f745c59146104ca57600080fd5b806318160ddd1461042b57806319bc9ae81461044a5780631e83409a1461046a57600080fd5b806306fdde031161030757806306fdde03146103a4578063081812fc146103c6578063095ea7b31461040b57600080fd5b80621d35671461032d57806301ffc9a71461034f57806304e538fd14610384575b600080fd5b34801561033957600080fd5b5061034d610348366004614714565b610a63565b005b34801561035b57600080fd5b5061036f61036a3660046147c7565b610c74565b60405190151581526020015b60405180910390f35b34801561039057600080fd5b5061034d61039f366004614806565b610cd0565b3480156103b057600080fd5b506103b9610ed5565b60405161037b91906148a0565b3480156103d257600080fd5b506103e66103e13660046148b3565b610f67565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161037b565b34801561041757600080fd5b5061034d610426366004614806565b610f9b565b34801561043757600080fd5b506008545b60405190815260200161037b565b34801561045657600080fd5b5061043c6104653660046148cc565b611146565b34801561047657600080fd5b5061034d610485366004614905565b6111e8565b34801561049657600080fd5b5061034d6104a5366004614922565b6112ed565b3480156104b657600080fd5b5061034d6104c5366004614905565b611395565b3480156104d657600080fd5b5061043c6104e5366004614806565b611528565b3480156104f657600080fd5b5061034d6105053660046149af565b6115f7565b34801561051657600080fd5b5061052a610525366004614a64565b61163e565b6040805192835260208301919091520161037b565b34801561054b57600080fd5b5061034d61055a366004614922565b6116f5565b34801561056b57600080fd5b5061043c600e5481565b34801561058157600080fd5b5061043c6105903660046148b3565b611710565b3480156105a157600080fd5b5061034d6105b0366004614b0c565b6117ce565b3480156105c157600080fd5b5061036f6105d0366004614905565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205460ff1690565b34801561060757600080fd5b5061034d610616366004614b4e565b6117e3565b34801561062757600080fd5b5061043c610636366004614b97565b6011602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b61034d610678366004614c19565b611851565b34801561068957600080fd5b50600f546103e69073ffffffffffffffffffffffffffffffffffffffff1681565b3480156106b657600080fd5b506103e66106c53660046148b3565b611cb0565b3480156106d657600080fd5b5061034d6106e5366004614cfb565b611d3c565b3480156106f657600080fd5b506103b9611e40565b34801561070b57600080fd5b5061043c600c5481565b34801561072157600080fd5b5061043c610730366004614905565b611ece565b34801561074157600080fd5b5061034d611f9c565b34801561075657600080fd5b50600a5473ffffffffffffffffffffffffffffffffffffffff166103e6565b34801561078157600080fd5b506103b9611fb0565b34801561079657600080fd5b5061034d6107a5366004614d8f565b611fbf565b3480156107b657600080fd5b5061034d6107c5366004614de4565b611ffe565b3480156107d657600080fd5b5061036f6107e5366004614e12565b601060209081526000928352604080842090915290825290205460ff1681565b34801561081157600080fd5b50610825610820366004614905565b612010565b60405161037b9190614e69565b34801561083e57600080fd5b5061034d61084d366004614e7c565b6120ad565b34801561085e57600080fd5b506103b961086d3660046148b3565b612156565b34801561087e57600080fd5b506103e661088d3660046148b3565b6121bc565b34801561089e57600080fd5b5061034d6108ad366004614cfb565b6121f3565b3480156108be57600080fd5b5061034d6108cd366004614d8f565b612475565b3480156108de57600080fd5b5061034d6108ed366004614de4565b6124bc565b3480156108fe57600080fd5b5061034d61090d366004614905565b61251a565b34801561091e57600080fd5b5061034d61092d3660046148b3565b6125e6565b34801561093e57600080fd5b5061034d61094d366004614de4565b6125f3565b34801561095e57600080fd5b5061036f61096d3660046148cc565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156109b457600080fd5b5061034d6109c33660046148b3565b612651565b3480156109d457600080fd5b5061034d6109e3366004614905565b61265e565b3480156109f457600080fd5b5061036f610a03366004614905565b73ffffffffffffffffffffffffffffffffffffffff1660009081526013602052604090205460ff1690565b348015610a3a57600080fd5b5060125461043c565b348015610a4f57600080fd5b5061034d610a5e366004614806565b612715565b600f5473ffffffffffffffffffffffffffffffffffffffff16610a8461293e565b73ffffffffffffffffffffffffffffffffffffffff1614610b06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21456e64706f696e74000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080610bcb60055a610b1a906004614f0b565b610b249190614f22565b60966366ad5c8a60e01b89898989604051602401610b459493929190614f5d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915230929190612948565b9150915081610c6c578280519060200120601160008861ffff1661ffff16815260200190815260200160002086604051610c059190614fa7565b90815260408051918290036020908101832067ffffffffffffffff89166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90610c639088908890889088908790614fc3565b60405180910390a15b505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d63000000000000000000000000000000000000000000000000000000001480610cca5750610cca826129d3565b92915050565b33301480610d125750600a5473ffffffffffffffffffffffffffffffffffffffff16610cfa61293e565b73ffffffffffffffffffffffffffffffffffffffff16145b610d78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f7442726964676500000000000000000000000000000000000000000000006044820152606401610afd565b6127108111158015610d8957508015155b610def576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f42616449440000000000000000000000000000000000000000000000000000006044820152606401610afd565b60005b601254811015610ec6576017600060128381548110610e1357610e13615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff90811684528382019490945260409283018220549387168252601590529081206012805491929185908110610e6d57610e6d615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400181208054909190610eae908490615051565b90915550819050610ebe81615064565b915050610df2565b50610ed18282612ab6565b5050565b606060008054610ee49061509c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f109061509c565b8015610f5d5780601f10610f3257610100808354040283529160200191610f5d565b820191906000526020600020905b815481529060010190602001808311610f4057829003601f168201915b5050505050905090565b6000610f7282612ce9565b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610fa682611cb0565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610afd565b8073ffffffffffffffffffffffffffffffffffffffff1661108261293e565b73ffffffffffffffffffffffffffffffffffffffff1614806110ab57506110ab8161096d61293e565b611137576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610afd565b6111418383612d74565b505050565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260156020908152604080832093851683529281528282205460179091529181205490919061119085611ece565b61119a9190614f0b565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152601660209081526040808320938816835292905220546111d79190615051565b6111e191906150ef565b9392505050565b60006111f261293e565b905060006112008284611146565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152601560209081526040808320938816835292905290812080549293508392909190611249908490615051565b90915550506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e79190615102565b50505050565b6112fe6112f861293e565b82612e14565b61138a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610afd565b611141838383612ed4565b61139d613315565b6012541580611407575073ffffffffffffffffffffffffffffffffffffffff81166000818152601460205260409020546012805490919081106113e2576113e2615022565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b61146d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f416c7265616479206164646564000000000000000000000000000000000000006044820152606401610afd565b6012805473ffffffffffffffffffffffffffffffffffffffff909216600081815260146020908152604080832086905560018087019095557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344490950180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905591815260139091529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b600061153383611ece565b82106115c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610afd565b5073ffffffffffffffffffffffffffffffffffffffff919091166000908152600660209081526040808320938352929052205490565b60005b8181101561163757611625858585858581811061161957611619615022565b905060200201356116f5565b8061162f81615064565b9150506115fa565b5050505050565b600f546040517f40a7bb10000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff909116906340a7bb10906116a5908c908c908c908c908c908c908c90600401615168565b6040805180830381865afa1580156116c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e591906151cb565b9150915097509795505050505050565b611141838383604051806020016040528060008152506120ad565b600061171b60085490565b82106117a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610afd565b600882815481106117bc576117bc615022565b90600052602060002001549050919050565b6117d6613315565b600d611141828483615235565b6117eb613315565b61ffff909216600090815260106020908152604080832073ffffffffffffffffffffffffffffffffffffffff90941683529290522080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055565b60008151116118bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f74206272696467696e6700000000000000000000000000000000000000006044820152606401610afd565b60005b81518110156119b9576118ea8282815181106118dd576118dd615022565b6020026020010151611cb0565b73ffffffffffffffffffffffffffffffffffffffff1661190861293e565b73ffffffffffffffffffffffffffffffffffffffff1614611985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420746865206f776e6572000000000000000000000000000000000000006044820152606401610afd565b6119a782828151811061199a5761199a615022565b60200260200101516133cf565b806119b181615064565b9150506118bf565b50601483015161ffff8516600090815260106020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16611a5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f21547275737465640000000000000000000000000000000000000000000000006044820152606401610afd565b60008383604051602001611a7292919061534f565b604051602081830303815290604052905060006001905060008451600c54611a9a9190614f0b565b611aa7906207a120615051565b6040805160f085901b7fffff0000000000000000000000000000000000000000000000000000000000001660208201526022808201849052825180830390910181526042820192839052600f547f40a7bb100000000000000000000000000000000000000000000000000000000090935292935060009173ffffffffffffffffffffffffffffffffffffffff16906340a7bb1090611b51908d9030908a908790899060460161537e565b6040805180830381865afa158015611b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9191906151cb565b50905080341015611c24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4d7573742073656e6420656e6f7567682076616c756520746f20636f7665722060448201527f6d657373616765466565000000000000000000000000000000000000000000006064820152608401610afd565b600f5473ffffffffffffffffffffffffffffffffffffffff1663c5803100348c8c89611c4e61293e565b6000896040518863ffffffff1660e01b8152600401611c72969594939291906153d1565b6000604051808303818588803b158015611c8b57600080fd5b505af1158015611c9f573d6000803e3d6000fd5b505050505050505050505050505050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610cca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610afd565b333014611dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560448201527f20617070000000000000000000000000000000000000000000000000000000006064820152608401610afd565b610c6c8686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152899350915087908790819084018382808284376000920191909152506136c592505050565b600d8054611e4d9061509c565b80601f0160208091040260200160405190810160405280929190818152602001828054611e799061509c565b8015611ec65780601f10611e9b57610100808354040283529160200191611ec6565b820191906000526020600020905b815481529060010190602001808311611ea957829003601f168201915b505050505081565b600073ffffffffffffffffffffffffffffffffffffffff8216611f73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610afd565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b611fa4613315565b611fae60006137f8565b565b606060018054610ee49061509c565b60005b818110156112e757611fec84848484818110611fe057611fe0615022565b90506020020135610f9b565b80611ff681615064565b915050611fc2565b610ed161200961293e565b838361386f565b6060600061201d83611ece565b67ffffffffffffffff811115612035576120356145f0565b60405190808252806020026020018201604052801561205e578160200160208202803683370190505b50905060005b81518110156120a6576120778482611528565b82828151811061208957612089615022565b60209081029190910101528061209e81615064565b915050612064565b5092915050565b6120be6120b861293e565b83612e14565b61214a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610afd565b6112e78484848461399c565b606061216182612ce9565b600061216b613a3f565b9050600081511161218b57604051806020016040528060008152506111e1565b8061219584613a4e565b6040516020016121a6929190615445565b6040516020818303038152906040529392505050565b601281815481106121cc57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b61ffff861660009081526011602052604080822090516122169088908890615474565b908152604080516020928190038301902067ffffffffffffffff8716600090815292529020549050806122cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201527f61676500000000000000000000000000000000000000000000000000000000006064820152608401610afd565b8083836040516122dc929190615474565b604051809103902014612371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6160448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610afd565b61ffff871660009081526011602052604080822090516123949089908990615474565b908152604080516020928190038301812067ffffffffffffffff8916600090815290845282902093909355601f8801829004820283018201905286825261242d918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506136c592505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051612464959493929190615484565b60405180910390a150505050505050565b60005b818110156112e7576124aa61248b61293e565b8585858581811061249e5761249e615022565b90506020020135612ed4565b806124b481615064565b915050612478565b6124c4613315565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260136020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b612522613315565b73ffffffffffffffffffffffffffffffffffffffff811661259f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5a65726f416464726573730000000000000000000000000000000000000000006044820152606401610afd565b600f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6125ee613315565b600c55565b6125fb613315565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b612659613315565b600e55565b612666613315565b73ffffffffffffffffffffffffffffffffffffffff8116612709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610afd565b612712816137f8565b50565b601254158061277e575073ffffffffffffffffffffffffffffffffffffffff821660009081526014602052604081205460128054909190811061275a5761275a615022565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16145b806127895750600854155b806127ba575073ffffffffffffffffffffffffffffffffffffffff821660009081526013602052604090205460ff16155b156127c3575050565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd6127e761293e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604481018490526064016020604051808303816000875af1925050508015612899575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261289691810190615102565b60015b6128a1575050565b506008546128af9082614f22565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260176020526040812080549091906128e4908490615051565b90915550505050565b336000908152600b602052604081205460ff161561293057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b905090565b3390565b60006129356128ed565b6000606060008060008661ffff1667ffffffffffffffff81111561296e5761296e6145f0565b6040519080825280601f01601f191660200182016040528015612998576020820181803683370190505b50905060008087516020890160008d8df191503d9250868311156129ba578692505b828152826000602083013e909890975095505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480612a6657507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610cca57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610cca565b73ffffffffffffffffffffffffffffffffffffffff8216612b33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610afd565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615612bbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610afd565b612bcd600083836001613b0c565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615612c59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610afd565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260036020908152604080832080546001019055848352600290915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008181526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16612712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610afd565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091558190612dce82611cb0565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612e2083611cb0565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612e8e575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff165b80612ecc57508373ffffffffffffffffffffffffffffffffffffffff16612eb484610f67565b73ffffffffffffffffffffffffffffffffffffffff16145b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16612ef482611cb0565b73ffffffffffffffffffffffffffffffffffffffff1614612f71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f214f776e657200000000000000000000000000000000000000000000000000006044820152606401610afd565b60005b601254811015613309576017600060128381548110612f9557612f95615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff90811684528382019490945260409283018220549388168252601690529081206012805491929185908110612fef57612fef615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400181208054909190613030908490615051565b9091555061303f905084611ece565b73ffffffffffffffffffffffffffffffffffffffff85166000908152601560205260408120601280549192918590811061307b5761307b615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020546130b79190614f22565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260166020526040812060128054919291859081106130f3576130f3615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080549091906131349084906150ef565b90915550613143905084611ece565b73ffffffffffffffffffffffffffffffffffffffff85166000908152601560205260408120601280549192918590811061317f5761317f615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020546131bb9190614f22565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260156020526040812060128054919291859081106131f7576131f7615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080549091906132389084906150ef565b92505081905550601760006012838154811061325657613256615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff908116845283820194909452604092830182205493871682526015905290812060128054919291859081106132b0576132b0615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080549091906132f1908490615051565b9091555081905061330181615064565b915050612f74565b50611141838383613cb5565b61331d61293e565b73ffffffffffffffffffffffffffffffffffffffff16613352600a5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614611fae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610afd565b60006133da82611cb0565b905060005b6012548110156136bb57601760006012838154811061340057613400615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff9081168452838201949094526040928301822054938616825260169052908120601280549192918590811061345a5761345a615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040018120805490919061349b908490615051565b909155506134aa905082611ece565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260156020526040812060128054919291859081106134e6576134e6615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020546135229190614f22565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601660205260408120601280549192918590811061355e5761355e615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040018120805490919061359f9084906150ef565b909155506135ae905082611ece565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260156020526040812060128054919291859081106135ea576135ea615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020546136269190614f22565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601560205260408120601280549192918590811061366257613662615022565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001812080549091906136a39084906150ef565b909155508190506136b381615064565b9150506133df565b50610ed182613fbd565b601483015161ffff8516600090815260106020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16613768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f21547275737465644164647265737300000000000000000000000000000000006044820152606401610afd565b6000808380602001905181019061377f91906154c0565b9150915060005b81518110156137c4576137b2838383815181106137a5576137a5615022565b6020026020010151610cd0565b806137bc81615064565b915050613786565b507fd1277f109a4c2ec8d99a410396e48214f894389b6e789a231d8b7ccbb050bed787838360405161246493929190615568565b600a805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603613904576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610afd565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6139a7848484612ed4565b6139b3848484846140a3565b6112e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610afd565b6060600d8054610ee49061509c565b60606000613a5b83614284565b600101905060008167ffffffffffffffff811115613a7b57613a7b6145f0565b6040519080825280601f01601f191660200182016040528015613aa5576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084613aaf57509392505050565b613b1884848484614366565b6001811115613ba9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f7274656400000000000000000000006064820152608401610afd565b8173ffffffffffffffffffffffffffffffffffffffff8516613c1257613c0d81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613c4f565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614613c4f57613c4f8582614422565b73ffffffffffffffffffffffffffffffffffffffff8416613c7857613c73816144d9565b611637565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611637576116378482614588565b8273ffffffffffffffffffffffffffffffffffffffff16613cd582611cb0565b73ffffffffffffffffffffffffffffffffffffffff1614613d78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610afd565b73ffffffffffffffffffffffffffffffffffffffff8216613e1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610afd565b613e278383836001613b0c565b8273ffffffffffffffffffffffffffffffffffffffff16613e4782611cb0565b73ffffffffffffffffffffffffffffffffffffffff1614613eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610afd565b600081815260046020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915573ffffffffffffffffffffffffffffffffffffffff8781168086526003855283862080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000613fc882611cb0565b9050613fd8816000846001613b0c565b613fe182611cb0565b600083815260046020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915573ffffffffffffffffffffffffffffffffffffffff85168085526003845282852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600073ffffffffffffffffffffffffffffffffffffffff84163b15614279578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026140e661293e565b8786866040518563ffffffff1660e01b815260040161410894939291906155aa565b6020604051808303816000875af1925050508015614161575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261415e918101906155f3565b60015b61422e573d80801561418f576040519150601f19603f3d011682016040523d82523d6000602084013e614194565b606091505b508051600003614226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610afd565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050612ecc565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106142cd577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106142f9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061431757662386f26fc10000830492506010015b6305f5e100831061432f576305f5e100830492506008015b612710831061434357612710830492506004015b60648310614355576064830492506002015b600a8310610cca5760010192915050565b60018111156112e75773ffffffffffffffffffffffffffffffffffffffff8416156143c65773ffffffffffffffffffffffffffffffffffffffff8416600090815260036020526040812080548392906143c09084906150ef565b90915550505b73ffffffffffffffffffffffffffffffffffffffff8316156112e75773ffffffffffffffffffffffffffffffffffffffff831660009081526003602052604081208054839290614417908490615051565b909155505050505050565b6000600161442f84611ece565b61443991906150ef565b6000838152600760205260409020549091508082146144995773ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b50600091825260076020908152604080842084905573ffffffffffffffffffffffffffffffffffffffff9094168352600681528383209183525290812055565b6008546000906144eb906001906150ef565b6000838152600960205260408120546008805493945090928490811061451357614513615022565b90600052602060002001549050806008838154811061453457614534615022565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061456c5761456c615610565b6001900381819060005260206000200160009055905550505050565b600061459383611ece565b73ffffffffffffffffffffffffffffffffffffffff9093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b803561ffff811681146145eb57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614666576146666145f0565b604052919050565b600082601f83011261467f57600080fd5b813567ffffffffffffffff811115614699576146996145f0565b6146ca60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161461f565b8181528460208386010111156146df57600080fd5b816020850160208301376000918101602001919091529392505050565b803567ffffffffffffffff811681146145eb57600080fd5b6000806000806080858703121561472a57600080fd5b614733856145d9565b9350602085013567ffffffffffffffff8082111561475057600080fd5b61475c8883890161466e565b945061476a604088016146fc565b9350606087013591508082111561478057600080fd5b5061478d8782880161466e565b91505092959194509250565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461271257600080fd5b6000602082840312156147d957600080fd5b81356111e181614799565b73ffffffffffffffffffffffffffffffffffffffff8116811461271257600080fd5b6000806040838503121561481957600080fd5b8235614824816147e4565b946020939093013593505050565b60005b8381101561484d578181015183820152602001614835565b50506000910152565b6000815180845261486e816020860160208601614832565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006111e16020830184614856565b6000602082840312156148c557600080fd5b5035919050565b600080604083850312156148df57600080fd5b82356148ea816147e4565b915060208301356148fa816147e4565b809150509250929050565b60006020828403121561491757600080fd5b81356111e1816147e4565b60008060006060848603121561493757600080fd5b8335614942816147e4565b92506020840135614952816147e4565b929592945050506040919091013590565b60008083601f84011261497557600080fd5b50813567ffffffffffffffff81111561498d57600080fd5b6020830191508360208260051b85010111156149a857600080fd5b9250929050565b600080600080606085870312156149c557600080fd5b84356149d0816147e4565b935060208501356149e0816147e4565b9250604085013567ffffffffffffffff8111156149fc57600080fd5b614a0887828801614963565b95989497509550505050565b60008083601f840112614a2657600080fd5b50813567ffffffffffffffff811115614a3e57600080fd5b6020830191508360208285010111156149a857600080fd5b801515811461271257600080fd5b600080600080600080600060a0888a031215614a7f57600080fd5b614a88886145d9565b96506020880135614a98816147e4565b9550604088013567ffffffffffffffff80821115614ab557600080fd5b614ac18b838c01614a14565b909750955060608a01359150614ad682614a56565b90935060808901359080821115614aec57600080fd5b50614af98a828b01614a14565b989b979a50959850939692959293505050565b60008060208385031215614b1f57600080fd5b823567ffffffffffffffff811115614b3657600080fd5b614b4285828601614a14565b90969095509350505050565b600080600060608486031215614b6357600080fd5b614b6c846145d9565b92506020840135614b7c816147e4565b91506040840135614b8c81614a56565b809150509250925092565b600080600060608486031215614bac57600080fd5b614bb5846145d9565b9250602084013567ffffffffffffffff811115614bd157600080fd5b614bdd8682870161466e565b925050614bec604085016146fc565b90509250925092565b600067ffffffffffffffff821115614c0f57614c0f6145f0565b5060051b60200190565b60008060008060808587031215614c2f57600080fd5b614c38856145d9565b935060208086013567ffffffffffffffff80821115614c5657600080fd5b614c6289838a0161466e565b955060408801359150614c74826147e4565b90935060608701359080821115614c8a57600080fd5b508601601f81018813614c9c57600080fd5b8035614caf614caa82614bf5565b61461f565b81815260059190911b8201830190838101908a831115614cce57600080fd5b928401925b82841015614cec57833582529284019290840190614cd3565b979a9699509497505050505050565b60008060008060008060808789031215614d1457600080fd5b614d1d876145d9565b9550602087013567ffffffffffffffff80821115614d3a57600080fd5b614d468a838b01614a14565b9097509550859150614d5a60408a016146fc565b94506060890135915080821115614d7057600080fd5b50614d7d89828a01614a14565b979a9699509497509295939492505050565b600080600060408486031215614da457600080fd5b8335614daf816147e4565b9250602084013567ffffffffffffffff811115614dcb57600080fd5b614dd786828701614963565b9497909650939450505050565b60008060408385031215614df757600080fd5b8235614e02816147e4565b915060208301356148fa81614a56565b60008060408385031215614e2557600080fd5b6148ea836145d9565b600081518084526020808501945080840160005b83811015614e5e57815187529582019590820190600101614e42565b509495945050505050565b6020815260006111e16020830184614e2e565b60008060008060808587031215614e9257600080fd5b8435614e9d816147e4565b93506020850135614ead816147e4565b925060408501359150606085013567ffffffffffffffff811115614ed057600080fd5b61478d8782880161466e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610cca57610cca614edc565b600082614f58577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b61ffff85168152608060208201526000614f7a6080830186614856565b67ffffffffffffffff851660408401528281036060840152614f9c8185614856565b979650505050505050565b60008251614fb9818460208701614832565b9190910192915050565b61ffff8616815260a060208201526000614fe060a0830187614856565b67ffffffffffffffff8616604084015282810360608401526150028186614856565b905082810360808401526150168185614856565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820180821115610cca57610cca614edc565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361509557615095614edc565b5060010190565b600181811c908216806150b057607f821691505b6020821081036150e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b81810381811115610cca57610cca614edc565b60006020828403121561511457600080fd5b81516111e181614a56565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b61ffff8816815273ffffffffffffffffffffffffffffffffffffffff8716602082015260a0604082015260006151a260a08301878961511f565b851515606084015282810360808401526151bd81858761511f565b9a9950505050505050505050565b600080604083850312156151de57600080fd5b505080516020909101519092909150565b601f82111561114157600081815260208120601f850160051c810160208610156152165750805b601f850160051c820191505b81811015610c6c57828155600101615222565b67ffffffffffffffff83111561524d5761524d6145f0565b6152618361525b835461509c565b836151ef565b6000601f8411600181146152b3576000851561527d5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611637565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b8281101561530257868501358255602094850194600190920191016152e2565b508682101561533d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000612ecc6040830184614e2e565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a0604082015260006153b760a0830186614856565b841515606084015282810360808401526150168185614856565b61ffff8716815260c0602082015260006153ee60c0830188614856565b82810360408401526154008188614856565b73ffffffffffffffffffffffffffffffffffffffff87811660608601528616608085015283810360a085015290506154388185614856565b9998505050505050505050565b60008351615457818460208801614832565b83519083019061546b818360208801614832565b01949350505050565b8183823760009101908152919050565b61ffff861681526080602082015260006154a260808301868861511f565b67ffffffffffffffff94909416604083015250606001529392505050565b600080604083850312156154d357600080fd5b82516154de816147e4565b8092505060208084015167ffffffffffffffff8111156154fd57600080fd5b8401601f8101861361550e57600080fd5b805161551c614caa82614bf5565b81815260059190911b8201830190838101908883111561553b57600080fd5b928401925b8284101561555957835182529284019290840190615540565b80955050505050509250929050565b61ffff8416815273ffffffffffffffffffffffffffffffffffffffff831660208201526060604082015260006155a16060830184614e2e565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526155e96080830184614856565b9695505050505050565b60006020828403121561560557600080fd5b81516111e181614799565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220c5e576b42469966f54710a336dae2e30326665dcbdd8f29c78bb2df49ba99d2164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2605,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2607,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2611,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2615,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2619,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2625,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3673,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3677,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3680,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3684,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 396,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 18509,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "_isTrustedForwarder",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8697,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "gas",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 8699,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "baseURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 8702,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "maxBridge",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 8705,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "endpoint",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(ILayerZeroEndpoint)15460"
      },
      {
        "astId": 8711,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "isTrustedAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint16,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8719,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "failedMessages",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 9620,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "assets",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9624,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "_allowedAsset",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9628,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "assetsIndex",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9634,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "userPaid",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9640,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "userDebt",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9644,
        "contract": "contracts/GovNFTBridged.sol:GovNFTBridged",
        "label": "accRewardsPerNFT",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ILayerZeroEndpoint)15460": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpoint",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}