/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from "..";
import { Reverter } from "../Reverter";

export class Reverter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: TransactionOverrides): Promise<Reverter> {
    return super.deploy(overrides) as Promise<Reverter>;
  }
  getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
    return super.getDeployTransaction(overrides);
  }
  attach(address: string): Reverter {
    return super.attach(address) as Reverter;
  }
  connect(signer: Signer): Reverter__factory {
    return super.connect(signer) as Reverter__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Reverter {
    return new Contract(address, _abi, signerOrProvider) as Reverter;
  }
}

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50606980601d6000396000f3fe608060408190527f08c379a00000000000000000000000000000000000000000000000000000000081526020608452601660a4527f5261697365642062792052657665727465722e736f6c0000000000000000000060c452606490fdfea164736f6c6343000606000a";
