/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface CoordinatorInterface extends Interface {
  functions: {
    withdrawableTokens: TypedFunctionDescription<{
      encode([]: [string]): string;
    }>;

    fulfillOracleRequest: TypedFunctionDescription<{
      encode([_requestId, _data]: [Arrayish, Arrayish]): string;
    }>;

    oracleRequest: TypedFunctionDescription<{
      encode([
        _sender,
        _amount,
        _sAId,
        _callbackAddress,
        _callbackFunctionId,
        _nonce,
        _dataVersion,
        _data,
      ]: [
        string,
        BigNumberish,
        Arrayish,
        string,
        Arrayish,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    EXPIRY_TIME: TypedFunctionDescription<{ encode([]: []): string }>;

    getId: TypedFunctionDescription<{
      encode([_agreementData]: [Arrayish]): string;
    }>;

    cancelOracleRequest: TypedFunctionDescription<{
      encode([, , ,]: [Arrayish, BigNumberish, Arrayish, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{
      encode([_account]: [string]): string;
    }>;

    serviceAgreements: TypedFunctionDescription<{
      encode([]: [Arrayish]): string;
    }>;

    depositFunds: TypedFunctionDescription<{
      encode([_sender, _amount]: [string, BigNumberish]): string;
    }>;

    onTokenTransfer: TypedFunctionDescription<{
      encode([_sender, _amount, _data]: [
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    initiateServiceAgreement: TypedFunctionDescription<{
      encode([_serviceAgreementData, _oracleSignaturesData]: [
        Arrayish,
        Arrayish
      ]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([_recipient, _amount]: [string, BigNumberish]): string;
    }>;
  };

  events: {
    OracleRequest: TypedEventDescription<{
      encodeTopics([
        sAId,
        requester,
        requestId,
        payment,
        callbackAddr,
        callbackFunctionId,
        cancelExpiration,
        dataVersion,
        data,
      ]: [
        Arrayish | null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    NewServiceAgreement: TypedEventDescription<{
      encodeTopics([said, requestDigest]: [
        Arrayish | null,
        Arrayish | null
      ]): string[];
    }>;

    CancelOracleRequest: TypedEventDescription<{
      encodeTopics([internalId]: [null]): string[];
    }>;
  };
}

export class Coordinator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Coordinator;
  attach(addressOrName: string): Coordinator;
  deployed(): Promise<Coordinator>;

  on(event: EventFilter | string, listener: Listener): Coordinator;
  once(event: EventFilter | string, listener: Listener): Coordinator;
  addListener(eventName: EventFilter | string, listener: Listener): Coordinator;
  removeAllListeners(eventName: EventFilter | string): Coordinator;
  removeListener(eventName: any, listener: Listener): Coordinator;

  interface: CoordinatorInterface;

  functions: {
    withdrawableTokens(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdrawableTokens(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    fulfillOracleRequest(
      _requestId: Arrayish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "fulfillOracleRequest(bytes32,bytes32)"(
      _requestId: Arrayish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    oracleRequest(
      _sender: string,
      _amount: BigNumberish,
      _sAId: Arrayish,
      _callbackAddress: string,
      _callbackFunctionId: Arrayish,
      _nonce: BigNumberish,
      _dataVersion: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)"(
      _sender: string,
      _amount: BigNumberish,
      _sAId: Arrayish,
      _callbackAddress: string,
      _callbackFunctionId: Arrayish,
      _nonce: BigNumberish,
      _dataVersion: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    EXPIRY_TIME(overrides?: TransactionOverrides): Promise<BigNumber>;

    "EXPIRY_TIME()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getId(
      _agreementData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getId(bytes)"(
      _agreementData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    cancelOracleRequest(
      arg0: Arrayish,
      arg1: BigNumberish,
      arg2: Arrayish,
      arg3: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "cancelOracleRequest(bytes32,uint256,bytes4,uint256)"(
      arg0: Arrayish,
      arg1: BigNumberish,
      arg2: Arrayish,
      arg3: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    balanceOf(
      _account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      _account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    serviceAgreements(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, string, string] & {
        payment: BigNumber;
        expiration: BigNumber;
        endAt: BigNumber;
        requestDigest: string;
        aggregator: string;
        aggInitiateJobSelector: string;
        aggFulfillSelector: string;
      }
    >;

    "serviceAgreements(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, string, string] & {
        payment: BigNumber;
        expiration: BigNumber;
        endAt: BigNumber;
        requestDigest: string;
        aggregator: string;
        aggInitiateJobSelector: string;
        aggFulfillSelector: string;
      }
    >;

    depositFunds(
      _sender: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "depositFunds(address,uint256)"(
      _sender: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "onTokenTransfer(address,uint256,bytes)"(
      _sender: string,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    initiateServiceAgreement(
      _serviceAgreementData: Arrayish,
      _oracleSignaturesData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "initiateServiceAgreement(bytes,bytes)"(
      _serviceAgreementData: Arrayish,
      _oracleSignaturesData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  withdrawableTokens(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "withdrawableTokens(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  fulfillOracleRequest(
    _requestId: Arrayish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "fulfillOracleRequest(bytes32,bytes32)"(
    _requestId: Arrayish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  oracleRequest(
    _sender: string,
    _amount: BigNumberish,
    _sAId: Arrayish,
    _callbackAddress: string,
    _callbackFunctionId: Arrayish,
    _nonce: BigNumberish,
    _dataVersion: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)"(
    _sender: string,
    _amount: BigNumberish,
    _sAId: Arrayish,
    _callbackAddress: string,
    _callbackFunctionId: Arrayish,
    _nonce: BigNumberish,
    _dataVersion: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  EXPIRY_TIME(overrides?: TransactionOverrides): Promise<BigNumber>;

  "EXPIRY_TIME()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getId(
    _agreementData: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "getId(bytes)"(
    _agreementData: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  cancelOracleRequest(
    arg0: Arrayish,
    arg1: BigNumberish,
    arg2: Arrayish,
    arg3: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "cancelOracleRequest(bytes32,uint256,bytes4,uint256)"(
    arg0: Arrayish,
    arg1: BigNumberish,
    arg2: Arrayish,
    arg3: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  balanceOf(
    _account: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    _account: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  serviceAgreements(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string, string, string] & {
      payment: BigNumber;
      expiration: BigNumber;
      endAt: BigNumber;
      requestDigest: string;
      aggregator: string;
      aggInitiateJobSelector: string;
      aggFulfillSelector: string;
    }
  >;

  "serviceAgreements(bytes32)"(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string, string, string] & {
      payment: BigNumber;
      expiration: BigNumber;
      endAt: BigNumber;
      requestDigest: string;
      aggregator: string;
      aggInitiateJobSelector: string;
      aggFulfillSelector: string;
    }
  >;

  depositFunds(
    _sender: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "depositFunds(address,uint256)"(
    _sender: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  onTokenTransfer(
    _sender: string,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "onTokenTransfer(address,uint256,bytes)"(
    _sender: string,
    _amount: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  initiateServiceAgreement(
    _serviceAgreementData: Arrayish,
    _oracleSignaturesData: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "initiateServiceAgreement(bytes,bytes)"(
    _serviceAgreementData: Arrayish,
    _oracleSignaturesData: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    OracleRequest(
      sAId: Arrayish | null,
      requester: null,
      requestId: null,
      payment: null,
      callbackAddr: null,
      callbackFunctionId: null,
      cancelExpiration: null,
      dataVersion: null,
      data: null
    ): EventFilter;

    NewServiceAgreement(
      said: Arrayish | null,
      requestDigest: Arrayish | null
    ): EventFilter;

    CancelOracleRequest(internalId: null): EventFilter;
  };

  estimate: {
    withdrawableTokens(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdrawableTokens(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    fulfillOracleRequest(
      _requestId: Arrayish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "fulfillOracleRequest(bytes32,bytes32)"(
      _requestId: Arrayish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    oracleRequest(
      _sender: string,
      _amount: BigNumberish,
      _sAId: Arrayish,
      _callbackAddress: string,
      _callbackFunctionId: Arrayish,
      _nonce: BigNumberish,
      _dataVersion: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)"(
      _sender: string,
      _amount: BigNumberish,
      _sAId: Arrayish,
      _callbackAddress: string,
      _callbackFunctionId: Arrayish,
      _nonce: BigNumberish,
      _dataVersion: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    EXPIRY_TIME(overrides?: TransactionOverrides): Promise<BigNumber>;

    "EXPIRY_TIME()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getId(
      _agreementData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getId(bytes)"(
      _agreementData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    cancelOracleRequest(
      arg0: Arrayish,
      arg1: BigNumberish,
      arg2: Arrayish,
      arg3: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "cancelOracleRequest(bytes32,uint256,bytes4,uint256)"(
      arg0: Arrayish,
      arg1: BigNumberish,
      arg2: Arrayish,
      arg3: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    balanceOf(
      _account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      _account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    serviceAgreements(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "serviceAgreements(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    depositFunds(
      _sender: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "depositFunds(address,uint256)"(
      _sender: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    onTokenTransfer(
      _sender: string,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "onTokenTransfer(address,uint256,bytes)"(
      _sender: string,
      _amount: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    initiateServiceAgreement(
      _serviceAgreementData: Arrayish,
      _oracleSignaturesData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "initiateServiceAgreement(bytes,bytes)"(
      _serviceAgreementData: Arrayish,
      _oracleSignaturesData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdraw(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
