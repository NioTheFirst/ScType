/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface CompoundPriceFlaggingValidatorInterface extends Interface {
  functions: {
    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    check: TypedFunctionDescription<{
      encode([aggregators]: [string[]]): string;
    }>;

    checkUpkeep: TypedFunctionDescription<{
      encode([data]: [Arrayish]): string;
    }>;

    compoundOpenOracle: TypedFunctionDescription<{ encode([]: []): string }>;

    flags: TypedFunctionDescription<{ encode([]: []): string }>;

    getFeedDetails: TypedFunctionDescription<{
      encode([aggregator]: [string]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    performUpkeep: TypedFunctionDescription<{
      encode([data]: [Arrayish]): string;
    }>;

    setCompoundOpenOracleAddress: TypedFunctionDescription<{
      encode([oracleAddress]: [string]): string;
    }>;

    setFeedDetails: TypedFunctionDescription<{
      encode([
        aggregator,
        compoundSymbol,
        compoundDecimals,
        compoundDeviationThresholdNumerator,
      ]: [string, string, BigNumberish, BigNumberish]): string;
    }>;

    setFlagsAddress: TypedFunctionDescription<{
      encode([flagsAddress]: [string]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([to]: [string]): string;
    }>;

    update: TypedFunctionDescription<{
      encode([aggregators]: [string[]]): string;
    }>;
  };

  events: {
    CompoundOpenOracleAddressUpdated: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    FeedDetailsSet: TypedEventDescription<{
      encodeTopics([
        aggregator,
        symbol,
        decimals,
        deviationThresholdNumerator,
      ]: [string | null, null, null, null]): string[];
    }>;

    FlagsAddressUpdated: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;
  };
}

export class CompoundPriceFlaggingValidator extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): CompoundPriceFlaggingValidator;
  attach(addressOrName: string): CompoundPriceFlaggingValidator;
  deployed(): Promise<CompoundPriceFlaggingValidator>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): CompoundPriceFlaggingValidator;
  once(
    event: EventFilter | string,
    listener: Listener
  ): CompoundPriceFlaggingValidator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): CompoundPriceFlaggingValidator;
  removeAllListeners(
    eventName: EventFilter | string
  ): CompoundPriceFlaggingValidator;
  removeListener(
    eventName: any,
    listener: Listener
  ): CompoundPriceFlaggingValidator;

  interface: CompoundPriceFlaggingValidatorInterface;

  functions: {
    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    check(
      aggregators: string[],
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    "check(address[])"(
      aggregators: string[],
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    checkUpkeep(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<[boolean, string]>;

    "checkUpkeep(bytes)"(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<[boolean, string]>;

    compoundOpenOracle(overrides?: TransactionOverrides): Promise<string>;

    "compoundOpenOracle()"(overrides?: TransactionOverrides): Promise<string>;

    flags(overrides?: TransactionOverrides): Promise<string>;

    "flags()"(overrides?: TransactionOverrides): Promise<string>;

    getFeedDetails(
      aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<[string, number, number]>;

    "getFeedDetails(address)"(
      aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<[string, number, number]>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    performUpkeep(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "performUpkeep(bytes)"(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setCompoundOpenOracleAddress(
      oracleAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setCompoundOpenOracleAddress(address)"(
      oracleAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setFeedDetails(
      aggregator: string,
      compoundSymbol: string,
      compoundDecimals: BigNumberish,
      compoundDeviationThresholdNumerator: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setFeedDetails(address,string,uint8,uint32)"(
      aggregator: string,
      compoundSymbol: string,
      compoundDecimals: BigNumberish,
      compoundDeviationThresholdNumerator: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setFlagsAddress(
      flagsAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setFlagsAddress(address)"(
      flagsAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    update(
      aggregators: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "update(address[])"(
      aggregators: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  check(
    aggregators: string[],
    overrides?: TransactionOverrides
  ): Promise<string[]>;

  "check(address[])"(
    aggregators: string[],
    overrides?: TransactionOverrides
  ): Promise<string[]>;

  checkUpkeep(
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<[boolean, string]>;

  "checkUpkeep(bytes)"(
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<[boolean, string]>;

  compoundOpenOracle(overrides?: TransactionOverrides): Promise<string>;

  "compoundOpenOracle()"(overrides?: TransactionOverrides): Promise<string>;

  flags(overrides?: TransactionOverrides): Promise<string>;

  "flags()"(overrides?: TransactionOverrides): Promise<string>;

  getFeedDetails(
    aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<[string, number, number]>;

  "getFeedDetails(address)"(
    aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<[string, number, number]>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  performUpkeep(
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "performUpkeep(bytes)"(
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setCompoundOpenOracleAddress(
    oracleAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setCompoundOpenOracleAddress(address)"(
    oracleAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setFeedDetails(
    aggregator: string,
    compoundSymbol: string,
    compoundDecimals: BigNumberish,
    compoundDeviationThresholdNumerator: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setFeedDetails(address,string,uint8,uint32)"(
    aggregator: string,
    compoundSymbol: string,
    compoundDecimals: BigNumberish,
    compoundDeviationThresholdNumerator: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setFlagsAddress(
    flagsAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setFlagsAddress(address)"(
    flagsAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  update(
    aggregators: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "update(address[])"(
    aggregators: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    CompoundOpenOracleAddressUpdated(
      from: string | null,
      to: string | null
    ): EventFilter;

    FeedDetailsSet(
      aggregator: string | null,
      symbol: null,
      decimals: null,
      deviationThresholdNumerator: null
    ): EventFilter;

    FlagsAddressUpdated(from: string | null, to: string | null): EventFilter;

    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransferred(from: string | null, to: string | null): EventFilter;
  };

  estimate: {
    acceptOwnership(overrides?: TransactionOverrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    check(
      aggregators: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "check(address[])"(
      aggregators: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    checkUpkeep(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "checkUpkeep(bytes)"(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    compoundOpenOracle(overrides?: TransactionOverrides): Promise<BigNumber>;

    "compoundOpenOracle()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    flags(overrides?: TransactionOverrides): Promise<BigNumber>;

    "flags()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getFeedDetails(
      aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getFeedDetails(address)"(
      aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    performUpkeep(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "performUpkeep(bytes)"(
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setCompoundOpenOracleAddress(
      oracleAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setCompoundOpenOracleAddress(address)"(
      oracleAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setFeedDetails(
      aggregator: string,
      compoundSymbol: string,
      compoundDecimals: BigNumberish,
      compoundDeviationThresholdNumerator: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setFeedDetails(address,string,uint8,uint32)"(
      aggregator: string,
      compoundSymbol: string,
      compoundDecimals: BigNumberish,
      compoundDeviationThresholdNumerator: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setFlagsAddress(
      flagsAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setFlagsAddress(address)"(
      flagsAddress: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    update(
      aggregators: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "update(address[])"(
      aggregators: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
