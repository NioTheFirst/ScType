/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface OperatorFactoryInterface extends Interface {
  functions: {
    created: TypedFunctionDescription<{ encode([query]: [string]): string }>;

    deployNewForwarder: TypedFunctionDescription<{ encode([]: []): string }>;

    deployNewForwarderAndTransferOwnership: TypedFunctionDescription<{
      encode([to, message]: [string, Arrayish]): string;
    }>;

    deployNewOperator: TypedFunctionDescription<{ encode([]: []): string }>;

    deployNewOperatorAndForwarder: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    getChainlinkToken: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    AuthorizedForwarderCreated: TypedEventDescription<{
      encodeTopics([forwarder, owner, sender]: [
        string | null,
        string | null,
        string | null
      ]): string[];
    }>;

    OperatorCreated: TypedEventDescription<{
      encodeTopics([operator, owner, sender]: [
        string | null,
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class OperatorFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): OperatorFactory;
  attach(addressOrName: string): OperatorFactory;
  deployed(): Promise<OperatorFactory>;

  on(event: EventFilter | string, listener: Listener): OperatorFactory;
  once(event: EventFilter | string, listener: Listener): OperatorFactory;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): OperatorFactory;
  removeAllListeners(eventName: EventFilter | string): OperatorFactory;
  removeListener(eventName: any, listener: Listener): OperatorFactory;

  interface: OperatorFactoryInterface;

  functions: {
    created(query: string, overrides?: TransactionOverrides): Promise<boolean>;

    "created(address)"(
      query: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    deployNewForwarder(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deployNewForwarder()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deployNewForwarderAndTransferOwnership(
      to: string,
      message: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deployNewForwarderAndTransferOwnership(address,bytes)"(
      to: string,
      message: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deployNewOperator(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deployNewOperator()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deployNewOperatorAndForwarder(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "deployNewOperatorAndForwarder()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getChainlinkToken(overrides?: TransactionOverrides): Promise<string>;

    "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<string>;
  };

  created(query: string, overrides?: TransactionOverrides): Promise<boolean>;

  "created(address)"(
    query: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  deployNewForwarder(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deployNewForwarder()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deployNewForwarderAndTransferOwnership(
    to: string,
    message: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deployNewForwarderAndTransferOwnership(address,bytes)"(
    to: string,
    message: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deployNewOperator(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deployNewOperator()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deployNewOperatorAndForwarder(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "deployNewOperatorAndForwarder()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getChainlinkToken(overrides?: TransactionOverrides): Promise<string>;

  "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<string>;

  filters: {
    AuthorizedForwarderCreated(
      forwarder: string | null,
      owner: string | null,
      sender: string | null
    ): EventFilter;

    OperatorCreated(
      operator: string | null,
      owner: string | null,
      sender: string | null
    ): EventFilter;
  };

  estimate: {
    created(
      query: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "created(address)"(
      query: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    deployNewForwarder(overrides?: TransactionOverrides): Promise<BigNumber>;

    "deployNewForwarder()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    deployNewForwarderAndTransferOwnership(
      to: string,
      message: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "deployNewForwarderAndTransferOwnership(address,bytes)"(
      to: string,
      message: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    deployNewOperator(overrides?: TransactionOverrides): Promise<BigNumber>;

    "deployNewOperator()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    deployNewOperatorAndForwarder(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "deployNewOperatorAndForwarder()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getChainlinkToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };
}
