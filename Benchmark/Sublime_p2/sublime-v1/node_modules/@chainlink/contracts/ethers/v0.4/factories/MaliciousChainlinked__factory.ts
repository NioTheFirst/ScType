/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from "..";
import { MaliciousChainlinked } from "../MaliciousChainlinked";

export class MaliciousChainlinked__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: TransactionOverrides): Promise<MaliciousChainlinked> {
    return super.deploy(overrides) as Promise<MaliciousChainlinked>;
  }
  getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
    return super.getDeployTransaction(overrides);
  }
  attach(address: string): MaliciousChainlinked {
    return super.attach(address) as MaliciousChainlinked;
  }
  connect(signer: Signer): MaliciousChainlinked__factory {
    return super.connect(signer) as MaliciousChainlinked__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MaliciousChainlinked {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MaliciousChainlinked;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "id",
        type: "bytes32",
      },
    ],
    name: "ChainlinkRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "id",
        type: "bytes32",
      },
    ],
    name: "ChainlinkFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "id",
        type: "bytes32",
      },
    ],
    name: "ChainlinkCancelled",
    type: "event",
  },
];

const _bytecode =
  "0x608060405260016004556001600655348015601957600080fd5b5060358060276000396000f3006080604052600080fd00a165627a7a72305820e471be20dd0c535be2c18a9e33c77d17362b9e09726946f2e8b5c240ef3caa5b0029";
