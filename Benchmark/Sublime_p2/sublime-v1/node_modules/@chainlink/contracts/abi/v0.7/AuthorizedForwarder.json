{
	"schemaVersion": "2.0.0",
	"contractName": "AuthorizedForwarder",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "link",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "senders",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "changedBy",
						"type": "address"
					}
				],
				"name": "AuthorizedSendersChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					}
				],
				"name": "OwnershipTransferRequestedWithMessage",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "forward",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAuthorizedSenders",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getChainlinkToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "isAuthorizedSender",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "ownerForward",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "senders",
						"type": "address[]"
					}
				],
				"name": "setAuthorizedSenders",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					}
				],
				"name": "transferOwnershipWithMessage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"forward(address,bytes)": {
					"details": "Only callable by an authorized sender",
					"params": {
						"data": "to forward",
						"to": "address"
					}
				},
				"getAuthorizedSenders()": {
					"returns": {
						"_0": "array of addresses"
					}
				},
				"isAuthorizedSender(address)": {
					"params": {
						"sender": "The address of the Chainlink node"
					},
					"returns": {
						"_0": "The authorization status of the node"
					}
				},
				"ownerForward(address,bytes)": {
					"details": "Only callable by the owner",
					"params": {
						"data": "to forward",
						"to": "address"
					}
				},
				"setAuthorizedSenders(address[])": {
					"params": {
						"senders": "The addresses of the authorized Chainlink node"
					}
				},
				"transferOwnershipWithMessage(address,bytes)": {
					"params": {
						"message": "instructions for recipient upon accepting ownership",
						"to": "address proposed recipeint of ownership"
					}
				}
			},
			"version": 1
		},
		"evm": {
			"bytecode": {
				"object": "0x60a06040523480156200001157600080fd5b50604051620011f2380380620011f2833981810160405260808110156200003757600080fd5b8151602083015160408085015160608601805192519496939591949391820192846401000000008211156200006b57600080fd5b9083019060208201858111156200008157600080fd5b82516401000000008111828201881017156200009c57600080fd5b82525081516020918201929091019080838360005b83811015620000cb578181015183820152602001620000b1565b50505050905090810190601f168015620000f95780820380516001836020036101000a031916815260200191505b50604052508491508390506001600160a01b03821662000160576040805162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156200019357620001938162000272565b50506001600160601b0319606085901b166080526001600160a01b038216156200026857816001600160a01b0316836001600160a01b03167f4e1e878dc28d5f040db5969163ff1acd75c44c3f655da2dde9c70bbd8e56dc7e836040518080602001828103825283818151815260200191508051906020019080838360005b838110156200022c57818101518382015260200162000212565b50505050905090810190601f1680156200025a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a35b5050505062000322565b6001600160a01b038116331415620002d1576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60805160601c610ead620003456000398061043f52806105ae5250610ead6000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806379ba509711610076578063ee56997b1161005b578063ee56997b1461033b578063f2fde38b146103ab578063fa00763a146103de576100be565b806379ba50971461032b5780638da5cb5b14610333576100be565b80632408afaa116100a75780632408afaa146101835780634d3e2323146101db5780636fadcf721461029e576100be565b8063033f49f7146100c3578063165d35e114610152575b600080fd5b610150600480360360408110156100d957600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561011157600080fd5b82018360208201111561012357600080fd5b8035906020019184600183028401116401000000008311171561014557600080fd5b509092509050610425565b005b61015a61043d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61018b610461565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101c75781810151838201526020016101af565b505050509050019250505060405180910390f35b610150600480360360408110156101f157600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561022957600080fd5b82018360208201111561023b57600080fd5b8035906020019184600183028401116401000000008311171561025d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506104d0945050505050565b610150600480360360408110156102b457600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156102ec57600080fd5b8201836020820111156102fe57600080fd5b8035906020019184600183028401116401000000008311171561032057600080fd5b5090925090506105a4565b610150610667565b61015a610769565b6101506004803603602081101561035157600080fd5b81019060208101813564010000000081111561036c57600080fd5b82018360208201111561037e57600080fd5b803590602001918460208302840111640100000000831117156103a057600080fd5b509092509050610785565b610150600480360360208110156103c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a0a565b610411600480360360208110156103f457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a1e565b604080519115158252519081900360200190f35b61042d610a49565b610438838383610ad1565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060038054806020026020016040519081016040528092919081815260200182805480156104c657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161049b575b5050505050905090565b6104d982610a0a565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4e1e878dc28d5f040db5969163ff1acd75c44c3f655da2dde9c70bbd8e56dc7e836040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056657818101518382015260200161054e565b50505050905090810190601f1680156105935780820380516001836020036101000a031916815260200191505b509250505060405180910390a35050565b6105ac610c41565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561042d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742023666f727761726420746f204c696e6b20746f6b656e000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff1633146106ed57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b61078d610cb5565b6107f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742073657420617574686f72697a65642073656e64657273000000604482015290519081900360640190fd5b8061084e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610e7b6026913960400191505060405180910390fd5b60035460005b818110156108d6576000600260006003848154811061086f57fe5b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600101610854565b5060005b82811015610958576001600260008686858181106108f457fe5b6020908102929092013573ffffffffffffffffffffffffffffffffffffffff1683525081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790556001016108da565b5061096560038484610ddd565b507ff263cfb3e4298332e776194610cf9fdc09ccb3ada8b9aa39764d882e11fbf0a083833360405180806020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281038252858582818152602001925060200280828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201829003965090945050505050a1505050565b610a12610a49565b610a1b81610cdc565b50565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b60005473ffffffffffffffffffffffffffffffffffffffff163314610acf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b565b610af08373ffffffffffffffffffffffffffffffffffffffff16610dd7565b610b5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d75737420666f727761726420746f206120636f6e7472616374000000000000604482015290519081900360640190fd5b60008373ffffffffffffffffffffffffffffffffffffffff168383604051808383808284376040519201945060009350909150508083038183865af19150503d8060008114610bc6576040519150601f19603f3d011682016040523d82523d6000602084013e610bcb565b606091505b5050905080610c3b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f466f727761726465642063616c6c206661696c65640000000000000000000000604482015290519081900360640190fd5b50505050565b610c4a33610a1e565b610acf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f7420617574686f72697a65642073656e6465720000000000000000000000604482015290519081900360640190fd5b600033610cc0610769565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b73ffffffffffffffffffffffffffffffffffffffff8116331415610d6157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b3b151590565b828054828255906000526020600020908101928215610e55579160200282015b82811115610e555781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff843516178255602090920191600190910190610dfd565b50610e61929150610e65565b5090565b5b80821115610e615760008155600101610e6656fe4d7573742068617665206174206c65617374203120617574686f72697a65642073656e646572a164736f6c6343000706000a",
				"sourceMap": "214:2209:3:-:0;;;499:306;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;499:306:3;;;;;;;;;;-1:-1:-1;499:306:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;499:306:3;;-1:-1:-1;632:5:3;;-1:-1:-1;639:9:3;;-1:-1:-1;;587:19:7;;579:56;;;;;-1:-1:-1;;;579:56:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;642:7;:15;;-1:-1:-1;642:15:7;-1:-1:-1;642:15:7;;;;;;;;;;667:26;;;663:79;;703:32;722:12;703:18;:32::i;:::-;-1:-1:-1;;;658:24:3;;;-1:-1:-1;658:24:3;::::1;::::0;-1:-1:-1;692:23:3;::::1;::::0;688:113:::1;;730:64;::::0;;::::1;::::0;;;;;;;::::1;::::0;;;-1:-1:-1;730:64:3;;::::1;::::0;;;::::1;::::0;::::1;::::0;786:7;;730:64;;;;;;;;;::::1;::::0;;;;;::::1;;;;;;;::::0;;::::1;::::0;;;::::1;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;688:113;499:306:::0;;;;214:2209;;1590:202:7;1672:10;-1:-1:-1;1666:16:7;;;;1658:52;;;;;-1:-1:-1;;;1658:52:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;1717:14;:19;;-1:-1:-1;1717:19:7;-1:-1:-1;1717:19:7;;;;;;;;;-1:-1:-1;1775:7:7;;1748:39;;1717:19;;1775:7;;1748:39;;-1:-1:-1;1748:39:7;1590:202;:::o;214:2209:3:-;;;;;;;;;;;;"
			},
			"deployedBytecode": {
				"object": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c806379ba509711610076578063ee56997b1161005b578063ee56997b1461033b578063f2fde38b146103ab578063fa00763a146103de576100be565b806379ba50971461032b5780638da5cb5b14610333576100be565b80632408afaa116100a75780632408afaa146101835780634d3e2323146101db5780636fadcf721461029e576100be565b8063033f49f7146100c3578063165d35e114610152575b600080fd5b610150600480360360408110156100d957600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561011157600080fd5b82018360208201111561012357600080fd5b8035906020019184600183028401116401000000008311171561014557600080fd5b509092509050610425565b005b61015a61043d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61018b610461565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101c75781810151838201526020016101af565b505050509050019250505060405180910390f35b610150600480360360408110156101f157600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561022957600080fd5b82018360208201111561023b57600080fd5b8035906020019184600183028401116401000000008311171561025d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506104d0945050505050565b610150600480360360408110156102b457600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156102ec57600080fd5b8201836020820111156102fe57600080fd5b8035906020019184600183028401116401000000008311171561032057600080fd5b5090925090506105a4565b610150610667565b61015a610769565b6101506004803603602081101561035157600080fd5b81019060208101813564010000000081111561036c57600080fd5b82018360208201111561037e57600080fd5b803590602001918460208302840111640100000000831117156103a057600080fd5b509092509050610785565b610150600480360360208110156103c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a0a565b610411600480360360208110156103f457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a1e565b604080519115158252519081900360200190f35b61042d610a49565b610438838383610ad1565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060038054806020026020016040519081016040528092919081815260200182805480156104c657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161049b575b5050505050905090565b6104d982610a0a565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4e1e878dc28d5f040db5969163ff1acd75c44c3f655da2dde9c70bbd8e56dc7e836040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056657818101518382015260200161054e565b50505050905090810190601f1680156105935780820380516001836020036101000a031916815260200191505b509250505060405180910390a35050565b6105ac610c41565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561042d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742023666f727761726420746f204c696e6b20746f6b656e000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff1633146106ed57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b61078d610cb5565b6107f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742073657420617574686f72697a65642073656e64657273000000604482015290519081900360640190fd5b8061084e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610e7b6026913960400191505060405180910390fd5b60035460005b818110156108d6576000600260006003848154811061086f57fe5b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600101610854565b5060005b82811015610958576001600260008686858181106108f457fe5b6020908102929092013573ffffffffffffffffffffffffffffffffffffffff1683525081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790556001016108da565b5061096560038484610ddd565b507ff263cfb3e4298332e776194610cf9fdc09ccb3ada8b9aa39764d882e11fbf0a083833360405180806020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281038252858582818152602001925060200280828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201829003965090945050505050a1505050565b610a12610a49565b610a1b81610cdc565b50565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b60005473ffffffffffffffffffffffffffffffffffffffff163314610acf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b565b610af08373ffffffffffffffffffffffffffffffffffffffff16610dd7565b610b5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d75737420666f727761726420746f206120636f6e7472616374000000000000604482015290519081900360640190fd5b60008373ffffffffffffffffffffffffffffffffffffffff168383604051808383808284376040519201945060009350909150508083038183865af19150503d8060008114610bc6576040519150601f19603f3d011682016040523d82523d6000602084013e610bcb565b606091505b5050905080610c3b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f466f727761726465642063616c6c206661696c65640000000000000000000000604482015290519081900360640190fd5b50505050565b610c4a33610a1e565b610acf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f7420617574686f72697a65642073656e6465720000000000000000000000604482015290519081900360640190fd5b600033610cc0610769565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b73ffffffffffffffffffffffffffffffffffffffff8116331415610d6157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b3b151590565b828054828255906000526020600020908101928215610e55579160200282015b82811115610e555781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff843516178255602090920191600190910190610dfd565b50610e61929150610e65565b5090565b5b80821115610e615760008155600101610e6656fe4d7573742068617665206174206c65617374203120617574686f72697a65642073656e646572a164736f6c6343000706000a",
				"sourceMap": "214:2209:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1328:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1328:127:3;;-1:-1:-1;1328:127:3;-1:-1:-1;1328:127:3;:::i;:::-;;331:42;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1354:152:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1662:202:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1662:202:3;;-1:-1:-1;1662:202:3;;-1:-1:-1;;;;;1662:202:3:i;968:208::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;968:208:3;;-1:-1:-1;968:208:3;-1:-1:-1;968:208:3;:::i;1069:275:7:-;;;:::i;1395:111::-;;;:::i;559:696:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;559:696:4;;-1:-1:-1;559:696:4;-1:-1:-1;559:696:4;:::i;855:122:7:-;;;;;;;;;;;;;;;;-1:-1:-1;855:122:7;;;;:::i;1704:151:4:-;;;;;;;;;;;;;;;;-1:-1:-1;1704:151:4;;;;:::i;:::-;;;;;;;;;;;;;;;;;;1328:127:3;2073:20:7;:18;:20::i;:::-;1432:18:3::1;1441:2;1445:4;;1432:8;:18::i;:::-;1328:127:::0;;;:::o;331:42::-;;;:::o;1354:152:4:-;1441:16;1479:22;1472:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1354:152;:::o;1662:202:3:-;1765:21;1783:2;1765:17;:21::i;:::-;1847:2;1797:62;;1835:10;1797:62;;;1851:7;1797:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1662:202;;:::o;968:208::-;2439:29:4;:27;:29::i;:::-;1096:17:3::1;1090:23;;:2;:23;;;;1082:65;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;1069:275:7::0;1152:14;;;;1138:10;:28;1130:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1200:16;1219:7;;1242:10;1232:20;;;;;;;;-1:-1:-1;1258:27:7;;;;;;;1297:42;;1219:7;;;;;1242:10;;1219:7;;1297:42;;;1069:275;:::o;1395:111::-;1465:7;1494;;;1395:111;:::o;559:696:4:-;2626:26;:24;:26::i;:::-;2618:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;704:18;696:69:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;853:22;:29:::0;819:31:::1;888:123;912:23;908:1;:27;888:123;;;999:5;950:19;:46;970:22;993:1;970:25;;;;;;;;;::::0;;;::::1;::::0;;;;;;::::1;::::0;::::1;;950:46:::0;;;::::1;::::0;;;;;;;;:54;;;::::1;::::0;::::1;;::::0;;;::::1;::::0;;-1:-1:-1;937:3:4::1;888:123;;;;1044:9;1039:98;1059:18:::0;;::::1;1039:98;;;1126:4;1092:19;:31;1112:7;;1120:1;1112:10;;;;;;;;::::0;;::::1;::::0;;;::::1;;;;1092:31:::0;;-1:-1:-1;1092:31:4;::::1;::::0;;;;;;-1:-1:-1;1092:31:4;:38;;;::::1;::::0;::::1;;::::0;;;::::1;::::0;;-1:-1:-1;1079:3:4::1;1039:98;;;-1:-1:-1::0;1162:32:4::1;:22;1187:7:::0;;1162:32:::1;:::i;:::-;;1205:45;1230:7;;1239:10;1205:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;;::::1;::::0;-1:-1:-1;1205:45:4;;-1:-1:-1;;;;;1205:45:4::1;2692:1;559:696:::0;;:::o;855:122:7:-;2073:20;:18;:20::i;:::-;950:22:::1;969:2;950:18;:22::i;:::-;855:122:::0;:::o;1704:151:4:-;1823:27;;1802:4;1823:27;;;:19;:27;;;;;;;;;1704:151::o;1837:121:7:-;1919:7;;;;1905:10;:21;1897:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1837:121::o;2196:224:3:-;2287:15;:2;:13;;;:15::i;:::-;2279:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2340:11;2356:2;:7;;2364:4;;2356:13;;;;;;;;;;;;;;-1:-1:-1;2356:13:3;;-1:-1:-1;2356:13:3;;-1:-1:-1;;2356:13:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2339:30;;;2383:6;2375:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2196:224;;;;:::o;2169:138:4:-;2246:30;2265:10;2246:18;:30::i;:::-;2238:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1989:131:3;2073:4;2105:10;2094:7;:5;:7::i;:::-;:21;;;2087:28;;1989:131;:::o;1590:202:7:-;1666:16;;;1672:10;1666:16;;1658:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1717:14;:19;;;;;;;;;;;;;;-1:-1:-1;1775:7:7;;1748:39;;1717:19;;1775:7;;1748:39;;-1:-1:-1;1748:39:7;1590:202;:::o;838:413:38:-;1198:20;1236:8;;;838:413::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;"
			},
			"methodIdentifiers": {
				"acceptOwnership()": "79ba5097",
				"forward(address,bytes)": "6fadcf72",
				"getAuthorizedSenders()": "2408afaa",
				"getChainlinkToken()": "165d35e1",
				"isAuthorizedSender(address)": "fa00763a",
				"owner()": "8da5cb5b",
				"ownerForward(address,bytes)": "033f49f7",
				"setAuthorizedSenders(address[])": "ee56997b",
				"transferOwnership(address)": "f2fde38b",
				"transferOwnershipWithMessage(address,bytes)": "4d3e2323"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"AuthorizedSendersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"OwnershipTransferRequestedWithMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizedSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isAuthorizedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ownerForward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"}],\"name\":\"setAuthorizedSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"transferOwnershipWithMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"forward(address,bytes)\":{\"details\":\"Only callable by an authorized sender\",\"params\":{\"data\":\"to forward\",\"to\":\"address\"}},\"getAuthorizedSenders()\":{\"returns\":{\"_0\":\"array of addresses\"}},\"isAuthorizedSender(address)\":{\"params\":{\"sender\":\"The address of the Chainlink node\"},\"returns\":{\"_0\":\"The authorization status of the node\"}},\"ownerForward(address,bytes)\":{\"details\":\"Only callable by the owner\",\"params\":{\"data\":\"to forward\",\"to\":\"address\"}},\"setAuthorizedSenders(address[])\":{\"params\":{\"senders\":\"The addresses of the authorized Chainlink node\"}},\"transferOwnershipWithMessage(address,bytes)\":{\"params\":{\"message\":\"instructions for recipient upon accepting ownership\",\"to\":\"address proposed recipeint of ownership\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"forward(address,bytes)\":{\"notice\":\"Forward a call to another contract\"},\"getAuthorizedSenders()\":{\"notice\":\"Retrieve a list of authorized senders\"},\"isAuthorizedSender(address)\":{\"notice\":\"Use this to check if a node is authorized for fulfilling requests\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"ownerForward(address,bytes)\":{\"notice\":\"Forward a call to another contract\"},\"setAuthorizedSenders(address[])\":{\"notice\":\"Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"transferOwnershipWithMessage(address,bytes)\":{\"notice\":\"Transfer ownership with instructions for recipient\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/AuthorizedForwarder.sol\":\"AuthorizedForwarder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/AuthorizedForwarder.sol\":{\"keccak256\":\"0xf2a2ba7eac33654e866fff8d8f8d0a9f7df1ecb31908bf13a6e305f00045a22d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4736edcde3521d150b41432b47c5258835c0aae4bc2929d47bbf6f0bb1afe27a\",\"dweb:/ipfs/QmbebamqC4X2EZPpUt2VUsbKNQyjctJN1T2EgJn4oEVXPB\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/AuthorizedReceiver.sol\":{\"keccak256\":\"0xdf8629200c2b65826a638c955c193e3ac0cca520feee67cfba2ad562cf02c156\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc0cb2d401959af812abee6d6beaf4d194c3d1b74865164286596615e138d45b\",\"dweb:/ipfs/QmPRwok3wt2ikvDMtcpqBF1EiEYuJAwRuDyXzZTvQA1qJJ\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/ConfirmedOwnerWithProposal.sol\":{\"keccak256\":\"0xd594f8533e00d3a68088b74cdb26035dbfc565a6af1c251f5fd5d5b44f94134c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf67278a0a54d56fc6c57215cc1fa3f73c53cf485563d67725b0bd81dd0e1bfa\",\"dweb:/ipfs/QmZzD3r1PyorWgke7czxw9MDReDEdnpZ6ktphqvbqUSgTt\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/AuthorizedReceiverInterface.sol\":{\"keccak256\":\"0x647fc393b9d6be0c20e5ac5bcb19114f9a50e808d567979ed04abba5ee18a22f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef307221efe7b5e72ced7e24005a8363384013b1b26e307d9c9735e1624ac677\",\"dweb:/ipfs/QmYfcisfmWohe1v7bQH1EBA58Ct2zdkTNpSUjq3aKUqpkX\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/ChainlinkRequestInterface.sol\":{\"keccak256\":\"0x5461aa441a5578fdb7181169e0060b8cb3e7eb96441140e8353424deae730073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a71019411365d5e12056b55669366926caf128e60584269f8bc6715ba93e756\",\"dweb:/ipfs/QmaRS5tzQcSAkoFaj6aSM4aywiK7mgyVg9Xv9c9jii9rv8\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/OperatorInterface.sol\":{\"keccak256\":\"0x120e5c9c58e4c0fac6e3ed977dd8dffe09b377bebdbdee3fd10478f9251867e2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa5eccf74f0d284438861be7c4036db505686c76fe417eb736a408a9b2f87ef6\",\"dweb:/ipfs/QmZ17QX5KEoPPqmbGJwCzGVoiEtthaSoQmccWesRQGM2pc\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/OracleInterface.sol\":{\"keccak256\":\"0xaed6dd4b2d459742adac17f25eab467d840c8c6ea9d92f07c10a2c0ab3bb9768\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d0626b656d2afe88c1f558ab5e67926ddfd5760789a42cdba1125a4a0f5455d5\",\"dweb:/ipfs/QmW43891ANK2b7UR5bsyfoC99N8dK2e8KGfuxUdkeQfuoU\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/OwnableInterface.sol\":{\"keccak256\":\"0xc70f1ef06be11ec954b93df177d4f17bfc1b6017105a1be9bb52aeb5119133d1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e69106bac4bf140c2e514ea9ebc67337ebd2c506fbeeb84a540eac6d884595d5\",\"dweb:/ipfs/QmWqZifScXZ4YFHrYNvXU5449dGBoTgcjL7YEHPuU5A94o\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/vendor/Address.sol\":{\"keccak256\":\"0x2b9cf9ce6991c8e13ccb127689d0b10e21586479272698ef86fb28ce770313df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ce9930eeacc78a86c667709b5f3995183f7bed169f3384770781eea6268eb0c\",\"dweb:/ipfs/QmdjKoxd9yeJq4ntdJCweFzJ3SJ2EhPAxhsTBchdj1h4Ga\"]}},\"version\":1}",
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptOwnership()": {
					"notice": "Allows an ownership transfer to be completed by the recipient."
				},
				"forward(address,bytes)": {
					"notice": "Forward a call to another contract"
				},
				"getAuthorizedSenders()": {
					"notice": "Retrieve a list of authorized senders"
				},
				"isAuthorizedSender(address)": {
					"notice": "Use this to check if a node is authorized for fulfilling requests"
				},
				"owner()": {
					"notice": "Get the current owner"
				},
				"ownerForward(address,bytes)": {
					"notice": "Forward a call to another contract"
				},
				"setAuthorizedSenders(address[])": {
					"notice": "Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow."
				},
				"transferOwnership(address)": {
					"notice": "Allows an owner to begin transferring ownership to a new address, pending."
				},
				"transferOwnershipWithMessage(address,bytes)": {
					"notice": "Transfer ownership with instructions for recipient"
				}
			},
			"version": 1
		}
	},
	"sources": {
		"dev/AuthorizedForwarder.sol": {
			"id": 3
		},
		"interfaces/OperatorInterface.sol": {
			"id": 24
		},
		"interfaces/ChainlinkRequestInterface.sol": {
			"id": 19
		},
		"interfaces/OracleInterface.sol": {
			"id": 25
		},
		"dev/ConfirmedOwnerWithProposal.sol": {
			"id": 7
		},
		"interfaces/OwnableInterface.sol": {
			"id": 26
		},
		"dev/AuthorizedReceiver.sol": {
			"id": 4
		},
		"interfaces/AuthorizedReceiverInterface.sol": {
			"id": 18
		},
		"vendor/Address.sol": {
			"id": 38
		}
	},
	"sourceCodes": {
		"dev/AuthorizedForwarder.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"../interfaces/OperatorInterface.sol\";\nimport \"./ConfirmedOwnerWithProposal.sol\";\nimport \"./AuthorizedReceiver.sol\";\nimport \"../vendor/Address.sol\";\n\ncontract AuthorizedForwarder is\n  ConfirmedOwnerWithProposal,\n  AuthorizedReceiver\n{\n  using Address for address;\n\n  address public immutable getChainlinkToken;\n\n  event OwnershipTransferRequestedWithMessage(\n    address indexed from,\n    address indexed to,\n    bytes message\n  );\n\n  constructor(\n    address link,\n    address owner,\n    address recipient,\n    bytes memory message\n  )\n    ConfirmedOwnerWithProposal(owner, recipient)\n  {\n    getChainlinkToken = link;\n    if (recipient != address(0)) {\n      emit OwnershipTransferRequestedWithMessage(owner, recipient, message);\n    }\n  }\n\n  /**\n   * @notice Forward a call to another contract\n   * @dev Only callable by an authorized sender\n   * @param to address\n   * @param data to forward\n   */\n  function forward(\n    address to,\n    bytes calldata data\n  )\n    external\n    validateAuthorizedSender()\n  {\n    require(to != getChainlinkToken, \"Cannot #forward to Link token\");\n    _forward(to, data);\n  }\n\n  /**\n   * @notice Forward a call to another contract\n   * @dev Only callable by the owner\n   * @param to address\n   * @param data to forward\n   */\n  function ownerForward(\n    address to,\n    bytes calldata data\n  )\n    external\n    onlyOwner()\n  {\n    _forward(to, data);\n  }\n\n  /**\n   * @notice Transfer ownership with instructions for recipient\n   * @param to address proposed recipeint of ownership\n   * @param message instructions for recipient upon accepting ownership\n   */\n  function transferOwnershipWithMessage(\n    address to,\n    bytes memory message\n  )\n    public\n  {\n    transferOwnership(to);\n    emit OwnershipTransferRequestedWithMessage(msg.sender, to, message);\n  }\n\n  /**\n   * @notice concrete implementation of AuthorizedReceiver\n   * @return bool of whether sender is authorized\n   */\n  function _canSetAuthorizedSenders()\n    internal\n    view\n    override\n    returns (bool)\n  {\n    return owner() == msg.sender;\n  }\n\n  /**\n   * @notice common forwarding functionality and validation\n   */\n  function _forward(\n    address to,\n    bytes calldata data\n  )\n    private\n  {\n    require(to.isContract(), \"Must forward to a contract\");\n    (bool status,) = to.call(data);\n    require(status, \"Forwarded call failed\");\n  }\n\n}\n",
		"interfaces/OperatorInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./ChainlinkRequestInterface.sol\";\nimport \"./OracleInterface.sol\";\n\ninterface OperatorInterface is\n  ChainlinkRequestInterface,\n  OracleInterface\n{\n\n  function requestOracleData(\n    address sender,\n    uint256 payment,\n    bytes32 specId,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  )\n    external;\n\n  function fulfillOracleRequest2(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool\n    );\n\n  function ownerTransferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool success\n    );\n\n}\n",
		"interfaces/ChainlinkRequestInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface ChainlinkRequestInterface {\n  function oracleRequest(\n    address sender,\n    uint256 requestPrice,\n    bytes32 serviceAgreementID,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  ) external;\n\n  function cancelOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunctionId,\n    uint256 expiration\n  ) external;\n}\n",
		"interfaces/OracleInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface OracleInterface {\n  function fulfillOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes32 data\n  )\n    external\n    returns (\n      bool\n    );\n\n  function withdraw(\n    address recipient,\n    uint256 amount\n  ) external;\n\n  function withdrawable()\n    external\n    view\n    returns (\n      uint256\n    );\n}\n",
		"dev/ConfirmedOwnerWithProposal.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"../interfaces/OwnableInterface.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\n\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(\n    address indexed from,\n    address indexed to\n  );\n  event OwnershipTransferred(\n    address indexed from,\n    address indexed to\n  );\n\n  constructor(\n    address owner,\n    address pendingOwner\n  ) {\n    require(owner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = owner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /**\n   * @notice Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(\n    address to\n  )\n    public\n    override\n    onlyOwner()\n  {\n    _transferOwnership(to);\n  }\n\n  /**\n   * @notice Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership()\n    external\n    override\n  {\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @notice Get the current owner\n   */\n  function owner()\n    public\n    view\n    override\n    returns (\n      address\n    )\n  {\n    return s_owner;\n  }\n\n  /**\n   * @notice validate, transfer ownership, and emit relevant events\n   */\n  function _transferOwnership(\n    address to\n  )\n    private\n  {\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /**\n   * @notice validate access\n   */\n  function _validateOwnership()\n    internal\n    view\n  {\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /**\n   * @notice Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n\n}\n",
		"interfaces/OwnableInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface OwnableInterface {\n  function owner()\n    external\n    returns (\n      address\n    );\n\n  function transferOwnership(\n    address recipient\n  )\n    external;\n\n  function acceptOwnership()\n    external;\n}\n",
		"dev/AuthorizedReceiver.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"../interfaces/AuthorizedReceiverInterface.sol\";\n\nabstract contract AuthorizedReceiver is\n  AuthorizedReceiverInterface\n{\n\n  mapping(address => bool) private s_authorizedSenders;\n  address[] private s_authorizedSenderList;\n\n  event AuthorizedSendersChanged(\n    address[] senders,\n    address changedBy\n  );\n\n  /**\n   * @notice Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\n   * @param senders The addresses of the authorized Chainlink node\n   */\n  function setAuthorizedSenders(\n    address[] calldata senders\n  )\n    external\n    override\n    validateAuthorizedSenderSetter()\n  {\n    require(senders.length > 0, \"Must have at least 1 authorized sender\");\n    // Set previous authorized senders to false\n    uint256 authorizedSendersLength = s_authorizedSenderList.length;\n    for (uint256 i = 0; i < authorizedSendersLength; i++) {\n      s_authorizedSenders[s_authorizedSenderList[i]] = false;\n    }\n    // Set new to true\n    for (uint256 i = 0; i < senders.length; i++) {\n      s_authorizedSenders[senders[i]] = true;\n    }\n    // Replace list\n    s_authorizedSenderList = senders;\n    emit AuthorizedSendersChanged(senders, msg.sender);\n  }\n\n  /**\n   * @notice Retrieve a list of authorized senders\n   * @return array of addresses\n   */\n  function getAuthorizedSenders()\n    external\n    view\n    override\n    returns (\n      address[] memory\n    )\n  {\n    return s_authorizedSenderList;\n  }\n\n  /**\n   * @notice Use this to check if a node is authorized for fulfilling requests\n   * @param sender The address of the Chainlink node\n   * @return The authorization status of the node\n   */\n  function isAuthorizedSender(\n    address sender\n  )\n    public\n    view\n    override\n    returns (bool)\n  {\n    return s_authorizedSenders[sender];\n  }\n\n  /**\n   * @notice customizable guard of who can update the authorized sender list\n   * @return bool whether sender can update authorized sender list\n   */\n  function _canSetAuthorizedSenders()\n    internal\n    virtual\n    returns (bool);\n\n  /**\n   * @notice validates the sender is an authorized sender\n   */\n  function _validateIsAuthorizedSender()\n    internal\n    view\n  {\n    require(isAuthorizedSender(msg.sender), \"Not authorized sender\");\n  }\n\n  /**\n   * @notice prevents non-authorized addresses from calling this method\n   */\n  modifier validateAuthorizedSender()\n  {\n    _validateIsAuthorizedSender();\n    _;\n  }\n\n  /**\n   * @notice prevents non-authorized addresses from calling this method\n   */\n  modifier validateAuthorizedSenderSetter()\n  {\n    require(_canSetAuthorizedSenders(), \"Cannot set authorized senders\");\n    _;\n  }\n\n}\n",
		"interfaces/AuthorizedReceiverInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface AuthorizedReceiverInterface {\n\n  function isAuthorizedSender(\n    address sender\n  )\n    external\n    view\n    returns (bool);\n\n  function getAuthorizedSenders()\n    external\n    returns (\n      address[] memory\n    );\n\n  function setAuthorizedSenders(\n    address[] calldata senders\n  )\n    external;\n\n}\n",
		"vendor/Address.sol": "// SPDX-License-Identifier: MIT\n// From https://github.com/OpenZeppelin/openzeppelin-contracts v3.4.0(fa64a1ced0b70ab89073d5d0b6e01b0778f7e7d6)\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
	},
	"sourceTreeHashHex": "0x8fc067a13aa4fb4baef1bfbfdd6b35688700281acb8e87238bb657e0bca3276a",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.7.6+commit.7338295f.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"metadata": {
				"bytecodeHash": "none"
			},
			"remappings": []
		}
	},
	"chains": {}
}