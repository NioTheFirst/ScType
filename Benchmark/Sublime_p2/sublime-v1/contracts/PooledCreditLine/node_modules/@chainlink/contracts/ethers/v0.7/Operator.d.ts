/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface OperatorInterface extends Interface {
  functions: {
    acceptAuthorizedReceivers: TypedFunctionDescription<{
      encode([targets, senders]: [string[], string[]]): string;
    }>;

    acceptOwnableContracts: TypedFunctionDescription<{
      encode([ownable]: [string[]]): string;
    }>;

    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    cancelOracleRequest: TypedFunctionDescription<{
      encode([requestId, payment, callbackFunc, expiration]: [
        Arrayish,
        BigNumberish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    distributeFunds: TypedFunctionDescription<{
      encode([receivers, amounts]: [string[], BigNumberish[]]): string;
    }>;

    fulfillOracleRequest: TypedFunctionDescription<{
      encode([
        requestId,
        payment,
        callbackAddress,
        callbackFunctionId,
        expiration,
        data,
      ]: [
        Arrayish,
        BigNumberish,
        string,
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    fulfillOracleRequest2: TypedFunctionDescription<{
      encode([
        requestId,
        payment,
        callbackAddress,
        callbackFunctionId,
        expiration,
        data,
      ]: [
        Arrayish,
        BigNumberish,
        string,
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    getAuthorizedSenders: TypedFunctionDescription<{ encode([]: []): string }>;

    getChainlinkToken: TypedFunctionDescription<{ encode([]: []): string }>;

    getExpiryTime: TypedFunctionDescription<{ encode([]: []): string }>;

    isAuthorizedSender: TypedFunctionDescription<{
      encode([sender]: [string]): string;
    }>;

    onTokenTransfer: TypedFunctionDescription<{
      encode([sender, amount, data]: [string, BigNumberish, Arrayish]): string;
    }>;

    oracleRequest: TypedFunctionDescription<{
      encode([
        sender,
        payment,
        specId,
        callbackAddress,
        callbackFunctionId,
        nonce,
        dataVersion,
        data,
      ]: [
        string,
        BigNumberish,
        Arrayish,
        string,
        Arrayish,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    ownerForward: TypedFunctionDescription<{
      encode([to, data]: [string, Arrayish]): string;
    }>;

    ownerTransferAndCall: TypedFunctionDescription<{
      encode([to, value, data]: [string, BigNumberish, Arrayish]): string;
    }>;

    requestOracleData: TypedFunctionDescription<{
      encode([
        sender,
        payment,
        specId,
        callbackAddress,
        callbackFunctionId,
        nonce,
        dataVersion,
        data,
      ]: [
        string,
        BigNumberish,
        Arrayish,
        string,
        Arrayish,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    setAuthorizedSenders: TypedFunctionDescription<{
      encode([senders]: [string[]]): string;
    }>;

    setAuthorizedSendersOn: TypedFunctionDescription<{
      encode([targets, senders]: [string[], string[]]): string;
    }>;

    transferOwnableContracts: TypedFunctionDescription<{
      encode([ownable, newOwner]: [string[], string]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([to]: [string]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([recipient, amount]: [string, BigNumberish]): string;
    }>;

    withdrawable: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    AuthorizedSendersChanged: TypedEventDescription<{
      encodeTopics([senders, changedBy]: [null, null]): string[];
    }>;

    CancelOracleRequest: TypedEventDescription<{
      encodeTopics([requestId]: [Arrayish | null]): string[];
    }>;

    OracleRequest: TypedEventDescription<{
      encodeTopics([
        specId,
        requester,
        requestId,
        payment,
        callbackAddr,
        callbackFunctionId,
        cancelExpiration,
        dataVersion,
        data,
      ]: [
        Arrayish | null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    OracleResponse: TypedEventDescription<{
      encodeTopics([requestId]: [Arrayish | null]): string[];
    }>;

    OwnableContractAccepted: TypedEventDescription<{
      encodeTopics([accpetedContract]: [string | null]): string[];
    }>;

    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    TargetsUpdatedAuthorizedSenders: TypedEventDescription<{
      encodeTopics([targets, senders, changedBy]: [null, null, null]): string[];
    }>;
  };
}

export class Operator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Operator;
  attach(addressOrName: string): Operator;
  deployed(): Promise<Operator>;

  on(event: EventFilter | string, listener: Listener): Operator;
  once(event: EventFilter | string, listener: Listener): Operator;
  addListener(eventName: EventFilter | string, listener: Listener): Operator;
  removeAllListeners(eventName: EventFilter | string): Operator;
  removeListener(eventName: any, listener: Listener): Operator;

  interface: OperatorInterface;

  functions: {
    acceptAuthorizedReceivers(
      targets: string[],
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "acceptAuthorizedReceivers(address[],address[])"(
      targets: string[],
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    acceptOwnableContracts(
      ownable: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "acceptOwnableContracts(address[])"(
      ownable: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    cancelOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackFunc: Arrayish,
      expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "cancelOracleRequest(bytes32,uint256,bytes4,uint256)"(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackFunc: Arrayish,
      expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    distributeFunds(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "distributeFunds(address[],uint256[])"(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    fulfillOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)"(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    fulfillOracleRequest2(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)"(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getAuthorizedSenders(overrides?: TransactionOverrides): Promise<string[]>;

    "getAuthorizedSenders()"(
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    getChainlinkToken(overrides?: TransactionOverrides): Promise<string>;

    "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<string>;

    getExpiryTime(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getExpiryTime()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    isAuthorizedSender(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isAuthorizedSender(address)"(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    onTokenTransfer(
      sender: string,
      amount: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "onTokenTransfer(address,uint256,bytes)"(
      sender: string,
      amount: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    oracleRequest(
      sender: string,
      payment: BigNumberish,
      specId: Arrayish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)"(
      sender: string,
      payment: BigNumberish,
      specId: Arrayish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    ownerForward(
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "ownerForward(address,bytes)"(
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    ownerTransferAndCall(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "ownerTransferAndCall(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestOracleData(
      sender: string,
      payment: BigNumberish,
      specId: Arrayish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "requestOracleData(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)"(
      sender: string,
      payment: BigNumberish,
      specId: Arrayish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAuthorizedSenders(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAuthorizedSenders(address[])"(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAuthorizedSendersOn(
      targets: string[],
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAuthorizedSendersOn(address[],address[])"(
      targets: string[],
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnableContracts(
      ownable: string[],
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnableContracts(address[],address)"(
      ownable: string[],
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawable(overrides?: TransactionOverrides): Promise<BigNumber>;

    "withdrawable()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };

  acceptAuthorizedReceivers(
    targets: string[],
    senders: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "acceptAuthorizedReceivers(address[],address[])"(
    targets: string[],
    senders: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  acceptOwnableContracts(
    ownable: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "acceptOwnableContracts(address[])"(
    ownable: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  cancelOracleRequest(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackFunc: Arrayish,
    expiration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "cancelOracleRequest(bytes32,uint256,bytes4,uint256)"(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackFunc: Arrayish,
    expiration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  distributeFunds(
    receivers: string[],
    amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "distributeFunds(address[],uint256[])"(
    receivers: string[],
    amounts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  fulfillOracleRequest(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    expiration: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)"(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    expiration: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  fulfillOracleRequest2(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    expiration: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)"(
    requestId: Arrayish,
    payment: BigNumberish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    expiration: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getAuthorizedSenders(overrides?: TransactionOverrides): Promise<string[]>;

  "getAuthorizedSenders()"(overrides?: TransactionOverrides): Promise<string[]>;

  getChainlinkToken(overrides?: TransactionOverrides): Promise<string>;

  "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<string>;

  getExpiryTime(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getExpiryTime()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  isAuthorizedSender(
    sender: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "isAuthorizedSender(address)"(
    sender: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  onTokenTransfer(
    sender: string,
    amount: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "onTokenTransfer(address,uint256,bytes)"(
    sender: string,
    amount: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  oracleRequest(
    sender: string,
    payment: BigNumberish,
    specId: Arrayish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    nonce: BigNumberish,
    dataVersion: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)"(
    sender: string,
    payment: BigNumberish,
    specId: Arrayish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    nonce: BigNumberish,
    dataVersion: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  ownerForward(
    to: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "ownerForward(address,bytes)"(
    to: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  ownerTransferAndCall(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "ownerTransferAndCall(address,uint256,bytes)"(
    to: string,
    value: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requestOracleData(
    sender: string,
    payment: BigNumberish,
    specId: Arrayish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    nonce: BigNumberish,
    dataVersion: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "requestOracleData(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)"(
    sender: string,
    payment: BigNumberish,
    specId: Arrayish,
    callbackAddress: string,
    callbackFunctionId: Arrayish,
    nonce: BigNumberish,
    dataVersion: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAuthorizedSenders(
    senders: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAuthorizedSenders(address[])"(
    senders: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAuthorizedSendersOn(
    targets: string[],
    senders: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAuthorizedSendersOn(address[],address[])"(
    targets: string[],
    senders: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnableContracts(
    ownable: string[],
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnableContracts(address[],address)"(
    ownable: string[],
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawable(overrides?: TransactionOverrides): Promise<BigNumber>;

  "withdrawable()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  filters: {
    AuthorizedSendersChanged(senders: null, changedBy: null): EventFilter;

    CancelOracleRequest(requestId: Arrayish | null): EventFilter;

    OracleRequest(
      specId: Arrayish | null,
      requester: null,
      requestId: null,
      payment: null,
      callbackAddr: null,
      callbackFunctionId: null,
      cancelExpiration: null,
      dataVersion: null,
      data: null
    ): EventFilter;

    OracleResponse(requestId: Arrayish | null): EventFilter;

    OwnableContractAccepted(accpetedContract: string | null): EventFilter;

    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransferred(from: string | null, to: string | null): EventFilter;

    TargetsUpdatedAuthorizedSenders(
      targets: null,
      senders: null,
      changedBy: null
    ): EventFilter;
  };

  estimate: {
    acceptAuthorizedReceivers(
      targets: string[],
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "acceptAuthorizedReceivers(address[],address[])"(
      targets: string[],
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    acceptOwnableContracts(
      ownable: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "acceptOwnableContracts(address[])"(
      ownable: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    acceptOwnership(overrides?: TransactionOverrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    cancelOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackFunc: Arrayish,
      expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "cancelOracleRequest(bytes32,uint256,bytes4,uint256)"(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackFunc: Arrayish,
      expiration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    distributeFunds(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "distributeFunds(address[],uint256[])"(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    fulfillOracleRequest(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)"(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    fulfillOracleRequest2(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)"(
      requestId: Arrayish,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      expiration: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getAuthorizedSenders(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getAuthorizedSenders()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getChainlinkToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getChainlinkToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getExpiryTime(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getExpiryTime()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    isAuthorizedSender(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isAuthorizedSender(address)"(
      sender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    onTokenTransfer(
      sender: string,
      amount: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "onTokenTransfer(address,uint256,bytes)"(
      sender: string,
      amount: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    oracleRequest(
      sender: string,
      payment: BigNumberish,
      specId: Arrayish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)"(
      sender: string,
      payment: BigNumberish,
      specId: Arrayish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    ownerForward(
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "ownerForward(address,bytes)"(
      to: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    ownerTransferAndCall(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "ownerTransferAndCall(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    requestOracleData(
      sender: string,
      payment: BigNumberish,
      specId: Arrayish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "requestOracleData(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)"(
      sender: string,
      payment: BigNumberish,
      specId: Arrayish,
      callbackAddress: string,
      callbackFunctionId: Arrayish,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setAuthorizedSenders(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAuthorizedSenders(address[])"(
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setAuthorizedSendersOn(
      targets: string[],
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAuthorizedSendersOn(address[],address[])"(
      targets: string[],
      senders: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferOwnableContracts(
      ownable: string[],
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnableContracts(address[],address)"(
      ownable: string[],
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      to: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdrawable(overrides?: TransactionOverrides): Promise<BigNumber>;

    "withdrawable()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };
}
