/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface AggregatorProxyInterfaceInterface extends Interface {
  functions: {
    aggregator: TypedFunctionDescription<{ encode([]: []): string }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    description: TypedFunctionDescription<{ encode([]: []): string }>;

    getAnswer: TypedFunctionDescription<{
      encode([roundId]: [BigNumberish]): string;
    }>;

    getRoundData: TypedFunctionDescription<{
      encode([_roundId]: [BigNumberish]): string;
    }>;

    getTimestamp: TypedFunctionDescription<{
      encode([roundId]: [BigNumberish]): string;
    }>;

    latestAnswer: TypedFunctionDescription<{ encode([]: []): string }>;

    latestRound: TypedFunctionDescription<{ encode([]: []): string }>;

    latestRoundData: TypedFunctionDescription<{ encode([]: []): string }>;

    latestTimestamp: TypedFunctionDescription<{ encode([]: []): string }>;

    phaseAggregators: TypedFunctionDescription<{
      encode([phaseId]: [BigNumberish]): string;
    }>;

    phaseId: TypedFunctionDescription<{ encode([]: []): string }>;

    proposedAggregator: TypedFunctionDescription<{ encode([]: []): string }>;

    proposedGetRoundData: TypedFunctionDescription<{
      encode([roundId]: [BigNumberish]): string;
    }>;

    proposedLatestRoundData: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    AnswerUpdated: TypedEventDescription<{
      encodeTopics([current, roundId, updatedAt]: [
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    NewRound: TypedEventDescription<{
      encodeTopics([roundId, startedBy, startedAt]: [
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class AggregatorProxyInterface extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): AggregatorProxyInterface;
  attach(addressOrName: string): AggregatorProxyInterface;
  deployed(): Promise<AggregatorProxyInterface>;

  on(event: EventFilter | string, listener: Listener): AggregatorProxyInterface;
  once(
    event: EventFilter | string,
    listener: Listener
  ): AggregatorProxyInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): AggregatorProxyInterface;
  removeAllListeners(eventName: EventFilter | string): AggregatorProxyInterface;
  removeListener(eventName: any, listener: Listener): AggregatorProxyInterface;

  interface: AggregatorProxyInterfaceInterface;

  functions: {
    aggregator(overrides?: TransactionOverrides): Promise<string>;

    "aggregator()"(overrides?: TransactionOverrides): Promise<string>;

    decimals(overrides?: TransactionOverrides): Promise<number>;

    "decimals()"(overrides?: TransactionOverrides): Promise<number>;

    description(overrides?: TransactionOverrides): Promise<string>;

    "description()"(overrides?: TransactionOverrides): Promise<string>;

    getAnswer(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getAnswer(uint256)"(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getRoundData(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    "getRoundData(uint80)"(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getTimestamp(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTimestamp(uint256)"(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    latestAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestRound(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestRound()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestRoundData(
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    "latestRoundData()"(
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    latestTimestamp(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestTimestamp()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    phaseAggregators(
      phaseId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "phaseAggregators(uint16)"(
      phaseId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    phaseId(overrides?: TransactionOverrides): Promise<number>;

    "phaseId()"(overrides?: TransactionOverrides): Promise<number>;

    proposedAggregator(overrides?: TransactionOverrides): Promise<string>;

    "proposedAggregator()"(overrides?: TransactionOverrides): Promise<string>;

    proposedGetRoundData(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    "proposedGetRoundData(uint80)"(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    proposedLatestRoundData(
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    "proposedLatestRoundData()"(
      overrides?: TransactionOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    version(overrides?: TransactionOverrides): Promise<BigNumber>;

    "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };

  aggregator(overrides?: TransactionOverrides): Promise<string>;

  "aggregator()"(overrides?: TransactionOverrides): Promise<string>;

  decimals(overrides?: TransactionOverrides): Promise<number>;

  "decimals()"(overrides?: TransactionOverrides): Promise<number>;

  description(overrides?: TransactionOverrides): Promise<string>;

  "description()"(overrides?: TransactionOverrides): Promise<string>;

  getAnswer(
    roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getAnswer(uint256)"(
    roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getRoundData(
    _roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  "getRoundData(uint80)"(
    _roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  getTimestamp(
    roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getTimestamp(uint256)"(
    roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  latestAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

  "latestAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  latestRound(overrides?: TransactionOverrides): Promise<BigNumber>;

  "latestRound()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  latestRoundData(
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  "latestRoundData()"(
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  latestTimestamp(overrides?: TransactionOverrides): Promise<BigNumber>;

  "latestTimestamp()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  phaseAggregators(
    phaseId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "phaseAggregators(uint16)"(
    phaseId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  phaseId(overrides?: TransactionOverrides): Promise<number>;

  "phaseId()"(overrides?: TransactionOverrides): Promise<number>;

  proposedAggregator(overrides?: TransactionOverrides): Promise<string>;

  "proposedAggregator()"(overrides?: TransactionOverrides): Promise<string>;

  proposedGetRoundData(
    roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  "proposedGetRoundData(uint80)"(
    roundId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  proposedLatestRoundData(
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  "proposedLatestRoundData()"(
    overrides?: TransactionOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  version(overrides?: TransactionOverrides): Promise<BigNumber>;

  "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  filters: {
    AnswerUpdated(
      current: BigNumberish | null,
      roundId: BigNumberish | null,
      updatedAt: null
    ): EventFilter;

    NewRound(
      roundId: BigNumberish | null,
      startedBy: string | null,
      startedAt: null
    ): EventFilter;
  };

  estimate: {
    aggregator(overrides?: TransactionOverrides): Promise<BigNumber>;

    "aggregator()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    decimals(overrides?: TransactionOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    description(overrides?: TransactionOverrides): Promise<BigNumber>;

    "description()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getAnswer(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getAnswer(uint256)"(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getRoundData(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getRoundData(uint80)"(
      _roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getTimestamp(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTimestamp(uint256)"(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    latestAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestRound(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestRound()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestRoundData()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestTimestamp(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestTimestamp()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    phaseAggregators(
      phaseId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "phaseAggregators(uint16)"(
      phaseId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    phaseId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "phaseId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    proposedAggregator(overrides?: TransactionOverrides): Promise<BigNumber>;

    "proposedAggregator()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    proposedGetRoundData(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "proposedGetRoundData(uint80)"(
      roundId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    proposedLatestRoundData(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "proposedLatestRoundData()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    version(overrides?: TransactionOverrides): Promise<BigNumber>;

    "version()"(overrides?: TransactionOverrides): Promise<BigNumber>;
  };
}
