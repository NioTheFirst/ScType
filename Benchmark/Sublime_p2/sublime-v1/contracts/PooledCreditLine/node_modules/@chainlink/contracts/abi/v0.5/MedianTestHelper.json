{
	"schemaVersion": "2.0.0",
	"contractName": "MedianTestHelper",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "_list",
						"type": "int256[]"
					}
				],
				"name": "publicGet",
				"outputs": [
					{
						"name": "",
						"type": "int256"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50610699806100206000396000f3fe6080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663115efb208114610045575b600080fd5b34801561005157600080fd5b506100f56004803603602081101561006857600080fd5b81019060208101813564010000000081111561008357600080fd5b82018360208201111561009557600080fd5b803590602001918460208302840111640100000000831117156100b757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610107945050505050565b60408051918252519081900360200190f35b60006101128261011a565b90505b919050565b80516000908161013182600263ffffffff6101d016565b90506002820615156101b257600061015161014b86610258565b836102d4565b9050600061016f8661016a85600163ffffffff6104bb16565b6102d4565b905060006002808407818407010590506101a68161019a60028505600287059063ffffffff61053616565b9063ffffffff61053616565b95505050505050610115565b6101c78461016a83600163ffffffff6104bb16565b92505050610115565b600080821161024057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b6000828481151561024d57fe5b049150505b92915050565b6060808251604051908082528060200260200182016040528015610286578160200160208202803883390190505b50905060005b83518110156102cd5783818151811015156102a357fe5b9060200190602002015182828151811015156102bb57fe5b6020908102909101015260010161028c565b5092915050565b8151604080518281526020808402820101909152600091849184919060609082801561030a578160200160208202803883390190505b509050606082604051908082528060200260200182016040528015610339578160200160208202803883390190505b5090506000806000805b8861035588600263ffffffff6101d016565b8151811061035f57fe5b9060200190602002015191506000935060009250600090505b868110156104385781898281518110151561038f57fe5b9060200190602002015112156103da5788818151811015156103ad57fe5b9060200190602002015186858151811015156103c557fe5b60209081029091010152600190930192610430565b8189828151811015156103e957fe5b90602001906020020151131561043057888181518110151561040757fe5b90602001906020020151858481518110151561041f57fe5b602090810290910101526001909201915b600101610378565b8388116104565783965061044c89876105f3565b90995095506104b6565b610466878463ffffffff6105f616565b8811156104a65761048d610480888563ffffffff6105f616565b899063ffffffff6105f616565b975082965061049c89866105f3565b90995094506104b6565b5097506102529650505050505050565b610343565b60008282018381101561052f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082820181831280159061054b5750838112155b80610560575060008312801561056057508381125b151561052f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f60448201527f7700000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b91565b60008282111561066757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fea165627a7a72305820316f04166ad41ed960b90de4712e296ff882ac1af62170250b15bd082ebdd99e0029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x699 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x115EFB20 DUP2 EQ PUSH2 0x45 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x107 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x112 DUP3 PUSH2 0x11A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0x131 DUP3 PUSH1 0x2 PUSH4 0xFFFFFFFF PUSH2 0x1D0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP3 MOD ISZERO ISZERO PUSH2 0x1B2 JUMPI PUSH1 0x0 PUSH2 0x151 PUSH2 0x14B DUP7 PUSH2 0x258 JUMP JUMPDEST DUP4 PUSH2 0x2D4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16F DUP7 PUSH2 0x16A DUP6 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x4BB AND JUMP JUMPDEST PUSH2 0x2D4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP1 DUP5 SMOD DUP2 DUP5 SMOD ADD SDIV SWAP1 POP PUSH2 0x1A6 DUP2 PUSH2 0x19A PUSH1 0x2 DUP6 SDIV PUSH1 0x2 DUP8 SDIV SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x536 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x536 AND JUMP JUMPDEST SWAP6 POP POP POP POP POP POP PUSH2 0x115 JUMP JUMPDEST PUSH2 0x1C7 DUP5 PUSH2 0x16A DUP4 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x4BB AND JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x115 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x240 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x24D JUMPI INVALID JUMPDEST DIV SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x286 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x2CD JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2A3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2BB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x28C JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP2 DUP5 SWAP2 DUP5 SWAP2 SWAP1 PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x30A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP3 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x339 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 JUMPDEST DUP9 PUSH2 0x355 DUP9 PUSH1 0x2 PUSH4 0xFFFFFFFF PUSH2 0x1D0 AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x35F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SWAP2 POP PUSH1 0x0 SWAP4 POP PUSH1 0x0 SWAP3 POP PUSH1 0x0 SWAP1 POP JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x438 JUMPI DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x38F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SLT ISZERO PUSH2 0x3DA JUMPI DUP9 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3AD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3C5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x430 JUMP JUMPDEST DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3E9 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SGT ISZERO PUSH2 0x430 JUMPI DUP9 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x407 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x41F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 JUMPDEST PUSH1 0x1 ADD PUSH2 0x378 JUMP JUMPDEST DUP4 DUP9 GT PUSH2 0x456 JUMPI DUP4 SWAP7 POP PUSH2 0x44C DUP10 DUP8 PUSH2 0x5F3 JUMP JUMPDEST SWAP1 SWAP10 POP SWAP6 POP PUSH2 0x4B6 JUMP JUMPDEST PUSH2 0x466 DUP8 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x5F6 AND JUMP JUMPDEST DUP9 GT ISZERO PUSH2 0x4A6 JUMPI PUSH2 0x48D PUSH2 0x480 DUP9 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x5F6 AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x5F6 AND JUMP JUMPDEST SWAP8 POP DUP3 SWAP7 POP PUSH2 0x49C DUP10 DUP7 PUSH2 0x5F3 JUMP JUMPDEST SWAP1 SWAP10 POP SWAP5 POP PUSH2 0x4B6 JUMP JUMPDEST POP SWAP8 POP PUSH2 0x252 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x343 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x52F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP2 DUP4 SLT DUP1 ISZERO SWAP1 PUSH2 0x54B JUMPI POP DUP4 DUP2 SLT ISZERO JUMPDEST DUP1 PUSH2 0x560 JUMPI POP PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x560 JUMPI POP DUP4 DUP2 SLT JUMPDEST ISZERO ISZERO PUSH2 0x52F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5369676E6564536166654D6174683A206164646974696F6E206F766572666C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7700000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x667 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 BALANCE PUSH16 0x4166AD41ED960B90DE4712E296FF882 0xac BYTE 0xf6 0x21 PUSH17 0x250B15BD082EBDD99E0029000000000000 ",
				"sourceMap": "50:160:31:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;50:160:31;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x6080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663115efb208114610045575b600080fd5b34801561005157600080fd5b506100f56004803603602081101561006857600080fd5b81019060208101813564010000000081111561008357600080fd5b82018360208201111561009557600080fd5b803590602001918460208302840111640100000000831117156100b757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610107945050505050565b60408051918252519081900360200190f35b60006101128261011a565b90505b919050565b80516000908161013182600263ffffffff6101d016565b90506002820615156101b257600061015161014b86610258565b836102d4565b9050600061016f8661016a85600163ffffffff6104bb16565b6102d4565b905060006002808407818407010590506101a68161019a60028505600287059063ffffffff61053616565b9063ffffffff61053616565b95505050505050610115565b6101c78461016a83600163ffffffff6104bb16565b92505050610115565b600080821161024057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b6000828481151561024d57fe5b049150505b92915050565b6060808251604051908082528060200260200182016040528015610286578160200160208202803883390190505b50905060005b83518110156102cd5783818151811015156102a357fe5b9060200190602002015182828151811015156102bb57fe5b6020908102909101015260010161028c565b5092915050565b8151604080518281526020808402820101909152600091849184919060609082801561030a578160200160208202803883390190505b509050606082604051908082528060200260200182016040528015610339578160200160208202803883390190505b5090506000806000805b8861035588600263ffffffff6101d016565b8151811061035f57fe5b9060200190602002015191506000935060009250600090505b868110156104385781898281518110151561038f57fe5b9060200190602002015112156103da5788818151811015156103ad57fe5b9060200190602002015186858151811015156103c557fe5b60209081029091010152600190930192610430565b8189828151811015156103e957fe5b90602001906020020151131561043057888181518110151561040757fe5b90602001906020020151858481518110151561041f57fe5b602090810290910101526001909201915b600101610378565b8388116104565783965061044c89876105f3565b90995095506104b6565b610466878463ffffffff6105f616565b8811156104a65761048d610480888563ffffffff6105f616565b899063ffffffff6105f616565b975082965061049c89866105f3565b90995094506104b6565b5097506102529650505050505050565b610343565b60008282018381101561052f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082820181831280159061054b5750838112155b80610560575060008312801561056057508381125b151561052f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f60448201527f7700000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b91565b60008282111561066757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fea165627a7a72305820316f04166ad41ed960b90de4712e296ff882ac1af62170250b15bd082ebdd99e0029",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x115EFB20 DUP2 EQ PUSH2 0x45 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x107 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x112 DUP3 PUSH2 0x11A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0x131 DUP3 PUSH1 0x2 PUSH4 0xFFFFFFFF PUSH2 0x1D0 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP3 MOD ISZERO ISZERO PUSH2 0x1B2 JUMPI PUSH1 0x0 PUSH2 0x151 PUSH2 0x14B DUP7 PUSH2 0x258 JUMP JUMPDEST DUP4 PUSH2 0x2D4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x16F DUP7 PUSH2 0x16A DUP6 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x4BB AND JUMP JUMPDEST PUSH2 0x2D4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP1 DUP5 SMOD DUP2 DUP5 SMOD ADD SDIV SWAP1 POP PUSH2 0x1A6 DUP2 PUSH2 0x19A PUSH1 0x2 DUP6 SDIV PUSH1 0x2 DUP8 SDIV SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x536 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x536 AND JUMP JUMPDEST SWAP6 POP POP POP POP POP POP PUSH2 0x115 JUMP JUMPDEST PUSH2 0x1C7 DUP5 PUSH2 0x16A DUP4 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x4BB AND JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x115 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x240 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x24D JUMPI INVALID JUMPDEST DIV SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x286 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x2CD JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2A3 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2BB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x28C JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP2 DUP5 SWAP2 DUP5 SWAP2 SWAP1 PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x30A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP3 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x339 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 JUMPDEST DUP9 PUSH2 0x355 DUP9 PUSH1 0x2 PUSH4 0xFFFFFFFF PUSH2 0x1D0 AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x35F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SWAP2 POP PUSH1 0x0 SWAP4 POP PUSH1 0x0 SWAP3 POP PUSH1 0x0 SWAP1 POP JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x438 JUMPI DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x38F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SLT ISZERO PUSH2 0x3DA JUMPI DUP9 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3AD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3C5 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 PUSH2 0x430 JUMP JUMPDEST DUP2 DUP10 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x3E9 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SGT ISZERO PUSH2 0x430 JUMPI DUP9 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x407 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x41F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 JUMPDEST PUSH1 0x1 ADD PUSH2 0x378 JUMP JUMPDEST DUP4 DUP9 GT PUSH2 0x456 JUMPI DUP4 SWAP7 POP PUSH2 0x44C DUP10 DUP8 PUSH2 0x5F3 JUMP JUMPDEST SWAP1 SWAP10 POP SWAP6 POP PUSH2 0x4B6 JUMP JUMPDEST PUSH2 0x466 DUP8 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x5F6 AND JUMP JUMPDEST DUP9 GT ISZERO PUSH2 0x4A6 JUMPI PUSH2 0x48D PUSH2 0x480 DUP9 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x5F6 AND JUMP JUMPDEST DUP10 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x5F6 AND JUMP JUMPDEST SWAP8 POP DUP3 SWAP7 POP PUSH2 0x49C DUP10 DUP7 PUSH2 0x5F3 JUMP JUMPDEST SWAP1 SWAP10 POP SWAP5 POP PUSH2 0x4B6 JUMP JUMPDEST POP SWAP8 POP PUSH2 0x252 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x343 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x52F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP2 DUP4 SLT DUP1 ISZERO SWAP1 PUSH2 0x54B JUMPI POP DUP4 DUP2 SLT ISZERO JUMPDEST DUP1 PUSH2 0x560 JUMPI POP PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0x560 JUMPI POP DUP4 DUP2 SLT JUMPDEST ISZERO ISZERO PUSH2 0x52F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5369676E6564536166654D6174683A206164646974696F6E206F766572666C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7700000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x667 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 BALANCE PUSH16 0x4166AD41ED960B90DE4712E296FF882 0xac BYTE 0xf6 0x21 PUSH17 0x250B15BD082EBDD99E0029000000000000 ",
				"sourceMap": "50:160:31:-;;;;;;;;;;;;;;;;;;;;;;;81:126;;8:9:-1;5:2;;;30:1;27;20:12;5:2;81:126:31;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;81:126:31;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;81:126:31;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;81:126:31;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;81:126:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;81:126:31;;-1:-1:-1;81:126:31;;-1:-1:-1;;;;;81:126:31;;;;;;;;;;;;;;;;;;156:6;179:23;196:5;179:16;:23::i;:::-;172:30;;81:126;;;;:::o;395:633:3:-;511:12;;472:6;;;551:19;511:12;568:1;551:19;:16;:19;:::i;:::-;529:41;-1:-1:-1;595:1:3;580:12;:16;:21;576:448;;;611:14;628:37;640:11;645:5;640:4;:11::i;:::-;653;628;:37::i;:::-;611:54;-1:-1:-1;673:14:3;690:38;702:5;709:18;:11;725:1;709:18;:15;:18;:::i;:::-;690:11;:38::i;:::-;673:55;-1:-1:-1;764:16:3;813:1;784:11;;;798;;;784:25;783:31;;-1:-1:-1;829:45:3;783:31;829:30;857:1;847:7;:11;840:1;830:7;:11;;829:30;:17;:30;:::i;:::-;:34;:45;:34;:45;:::i;:::-;822:52;;;;;;;;;576:448;951:38;963:5;970:18;:11;986:1;970:18;:15;:18;:::i;951:38::-;944:45;;;;;;2497:304:37;2555:7;2640:5;;;2632:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2682:9;2698:1;2694;:5;;;;;;;;;-1:-1:-1;;2497:304:37;;;;;:::o;2665:250:3:-;2735:15;2760:21;2797:5;:12;2784:26;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2784:26:3;-1:-1:-1;2760:50:3;-1:-1:-1;2821:9:3;2816:77;2840:5;:12;2836:1;:16;2816:77;;;2878:5;2884:1;2878:8;;;;;;;;;;;;;;;;;;2867:5;2873:1;2867:8;;;;;;;;;;;;;;;;;;:19;2854:3;;2816:77;;;-1:-1:-1;2905:5:3;2665:250;-1:-1:-1;;2665:250:3:o;1304:893::-;1470:8;;1505:18;;;;;;;;;;;;;;;;1391:6;;1427:2;;1447;;1470:8;1407:17;;1470:8;1505:18;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1505:18:3;;1484:39;;1529:18;1563:4;1550:18;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1550:18:3;;1529:39;;1574:13;1593;1612:12;1630:9;1646:547;1675:1;1677:11;:4;1686:1;1677:11;:8;:11;:::i;:::-;1675:14;;;;;;;;;;;;;;;;1667:22;;1705:1;1697:9;;1722:1;1714:9;;1740:1;1736:5;;1731:203;1747:4;1743:1;:8;1731:203;;;1779:5;1772:1;1774;1772:4;;;;;;;;;;;;;;;;;;:12;1768:158;;;1810:1;1812;1810:4;;;;;;;;;;;;;;;;;;1798:2;1801:5;1798:9;;;;;;;;;;;;;;;;;;:16;1826:7;;;;;1768:158;;;1861:5;1854:1;1856;1854:4;;;;;;;;;;;;;;;;;;:12;1850:76;;;1892:1;1894;1892:4;;;;;;;;;;;;;;;;;;1880:2;1883:5;1880:9;;;;;;;;;;;;;;;;;;:16;1908:7;;;;;1850:76;1753:3;;1731:203;;;1945:10;;;1941:246;;1974:5;1967:12;;1999:11;2004:1;2007:2;1999:4;:11::i;:::-;1989:21;;-1:-1:-1;1989:21:3;-1:-1:-1;1941:246:3;;;2034:15;:4;2043:5;2034:15;:8;:15;:::i;:::-;2029:1;:21;2025:162;;;2066:22;2072:15;:4;2081:5;2072:15;:8;:15;:::i;:::-;2066:1;;:22;:5;:22;:::i;:::-;2062:26;;2105:5;2098:12;;2130:11;2135:1;2138:2;2130:4;:11::i;:::-;2120:21;;-1:-1:-1;2120:21:3;-1:-1:-1;2025:162:3;;;-1:-1:-1;2173:5:3;-1:-1:-1;2166:12:3;;-1:-1:-1;;;;;;;2166:12:3;2025:162;1646:547;;831:162:37;889:7;916:5;;;935:6;;;;927:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;987:1;831:162;-1:-1:-1;;;831:162:37:o;305:284:38:-;375:6;468:7;;;490;;;;;;:18;;;506:2;501:1;:7;;490:18;489:42;;;;519:1;514:2;:6;:16;;;;;528:2;524:1;:6;514:16;481:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2387:149:3;2524:2;2387:149::o;1245:165:37:-;1303:7;1326:6;;;;1318:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1385:5:37;;;1245:165::o"
			},
			"methodIdentifiers": {
				"publicGet(int256[])": "115efb20"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_list\",\"type\":\"int256[]\"}],\"name\":\"publicGet\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.5/tests/MedianTestHelper.sol\":\"MedianTestHelper\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.5/Median.sol\":{\"keccak256\":\"0xb0b6c08d8d2d8f42f0465575cf5f9b11fd65381ae31d004b6c5e0e053d31b742\",\"urls\":[\"bzzr://fe529079ffb63f3cbb4b001bc85c95733a1c2369ce9226cbe35c93a5bf810188\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.5/tests/MedianTestHelper.sol\":{\"keccak256\":\"0x8c06f4f700937f967fb14c8108362a5a7af85a0f1a75742b04aa88bf41dad0ac\",\"urls\":[\"bzzr://2ed4684e27a3ddf9888a0c06bf8eb1c0de3b2582d89811436714da9a508cbd24\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.5/vendor/SafeMathChainlink.sol\":{\"keccak256\":\"0x796a82f2e4ab35469224050fb62ecd2dc038474e7f9d4dfd7a1023080c009883\",\"urls\":[\"bzzr://6e0bb08f77ca150b228e70773696ea301e939c0b5542fedb05276b683b774e13\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.5/vendor/SignedSafeMath.sol\":{\"keccak256\":\"0x2695f6b8893d0333f719b12156bb8e2c2589c431fdf7241aca428bd2b5564dd4\",\"urls\":[\"bzzr://b82f0e4c561256ead4b559e2bc4585731001e99b572702849cb12b918c213fe8\"]}},\"version\":1}",
		"userdoc": {
			"methods": {}
		}
	},
	"sources": {
		"tests/MedianTestHelper.sol": {
			"id": 31
		},
		"Median.sol": {
			"id": 3
		},
		"vendor/SafeMathChainlink.sol": {
			"id": 37
		},
		"vendor/SignedSafeMath.sol": {
			"id": 38
		}
	},
	"sourceCodes": {
		"tests/MedianTestHelper.sol": "pragma solidity ^0.5.0;\n\nimport \"../Median.sol\";\n\ncontract MedianTestHelper {\n\n  function publicGet(int256[] memory _list)\n    public\n    pure\n    returns (int256)\n  {\n    return Median.calculate(_list);\n  }\n\n}\n",
		"Median.sol": "pragma solidity ^0.5.0;\n\nimport \"./vendor/SafeMathChainlink.sol\";\nimport \"./vendor/SignedSafeMath.sol\";\n\nlibrary Median {\n  using SafeMathChainlink for uint256;\n  using SignedSafeMath for int256;\n\n  /**\n   * @dev Returns the sorted middle, or the average of the two middle indexed \n   * items if the array has an even number of elements\n   * @param _list The list of elements to compare\n   */\n  function calculate(int256[] memory _list)\n    internal\n    pure\n    returns (int256)\n  {\n    uint256 answerLength = _list.length;\n    uint256 middleIndex = answerLength.div(2);\n    if (answerLength % 2 == 0) {\n      int256 median1 = quickselect(copy(_list), middleIndex);\n      int256 median2 = quickselect(_list, middleIndex.add(1)); // quickselect is 1 indexed\n      int256 remainder = (median1 % 2 + median2 % 2) / 2;\n      return (median1 / 2).add(median2 / 2).add(remainder); // signed integers are not supported by SafeMath\n    } else {\n      return quickselect(_list, middleIndex.add(1)); // quickselect is 1 indexed\n    }\n  }\n\n  /**\n   * @dev Returns the kth value of the ordered array\n   * See: http://www.cs.yale.edu/homes/aspnes/pinewiki/QuickSelect.html\n   * @param _a The list of elements to pull from\n   * @param _k The index, 1 based, of the elements you want to pull from when ordered\n   */\n  function quickselect(int256[] memory _a, uint256 _k)\n    private\n    pure\n    returns (int256)\n  {\n    int256[] memory a = _a;\n    uint256 k = _k;\n    uint256 aLen = a.length;\n    int256[] memory a1 = new int256[](aLen);\n    int256[] memory a2 = new int256[](aLen);\n    uint256 a1Len;\n    uint256 a2Len;\n    int256 pivot;\n    uint256 i;\n\n    while (true) {\n      pivot = a[aLen.div(2)];\n      a1Len = 0;\n      a2Len = 0;\n      for (i = 0; i < aLen; i++) {\n        if (a[i] < pivot) {\n          a1[a1Len] = a[i];\n          a1Len++;\n        } else if (a[i] > pivot) {\n          a2[a2Len] = a[i];\n          a2Len++;\n        }\n      }\n      if (k <= a1Len) {\n        aLen = a1Len;\n        (a, a1) = swap(a, a1);\n      } else if (k > (aLen.sub(a2Len))) {\n        k = k.sub(aLen.sub(a2Len));\n        aLen = a2Len;\n        (a, a2) = swap(a, a2);\n      } else {\n        return pivot;\n      }\n    }\n  }\n\n  /**\n   * @dev Swaps the pointers to two uint256 arrays in memory\n   * @param _a The pointer to the first in memory array\n   * @param _b The pointer to the second in memory array\n   */\n  function swap(int256[] memory _a, int256[] memory _b)\n    private\n    pure\n    returns(int256[] memory, int256[] memory)\n  {\n    return (_b, _a);\n  }\n\n  /**\n   * @dev Makes an in memory copy of the array passed in\n   * @param _list The pointer to the array to be copied\n   */\n  function copy(int256[] memory _list)\n    private\n    pure\n    returns(int256[] memory)\n  {\n    int256[] memory list2 = new int256[](_list.length);\n    for (uint256 i = 0; i < _list.length; i++) {\n      list2[i] = _list[i];\n    }\n    return list2;\n  }\n\n}\n",
		"vendor/SafeMathChainlink.sol": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathChainlink {\n  /**\n    * @dev Returns the addition of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `+` operator.\n    *\n    * Requirements:\n    * - Addition cannot overflow.\n    */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the subtraction of two unsigned integers, reverting on\n    * overflow (when the result is negative).\n    *\n    * Counterpart to Solidity's `-` operator.\n    *\n    * Requirements:\n    * - Subtraction cannot overflow.\n    */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a, \"SafeMath: subtraction overflow\");\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the multiplication of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `*` operator.\n    *\n    * Requirements:\n    * - Multiplication cannot overflow.\n    */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the integer division of two unsigned integers. Reverts on\n    * division by zero. The result is rounded towards zero.\n    *\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n    * uses an invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, \"SafeMath: division by zero\");\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n    * Reverts when dividing by zero.\n    *\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\n    * invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0, \"SafeMath: modulo by zero\");\n    return a % b;\n  }\n}\n",
		"vendor/SignedSafeMath.sol": "pragma solidity ^0.5.0;\n\nlibrary SignedSafeMath {\n\n  /**\n   * @dev Adds two int256s and makes sure the result doesn't overflow. Signed\n   * integers aren't supported by the SafeMath library, thus this method\n   * @param _a The first number to be added\n   * @param _a The second number to be added\n   */\n  function add(int256 _a, int256 _b)\n    internal\n    pure\n    returns (int256)\n  {\n    // solium-disable-next-line zeppelin/no-arithmetic-operations\n    int256 c = _a + _b;\n    require((_b >= 0 && c >= _a) || (_b < 0 && c < _a), \"SignedSafeMath: addition overflow\");\n\n    return c;\n  }\n}"
	},
	"sourceTreeHashHex": "0xd244560350634f5df56c771cd5772601432e59bfd4d89d5563bf9e71dc3fb39e",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.0+commit.1d4f565a.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"metadata": {
				"bytecodeHash": "none"
			},
			"remappings": []
		}
	},
	"chains": {}
}