/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface FlagsInterfaceInterface extends Interface {
  functions: {
    getFlag: TypedFunctionDescription<{ encode([]: [string]): string }>;

    getFlags: TypedFunctionDescription<{ encode([]: [string[]]): string }>;

    lowerFlags: TypedFunctionDescription<{ encode([]: [string[]]): string }>;

    raiseFlag: TypedFunctionDescription<{ encode([]: [string]): string }>;

    raiseFlags: TypedFunctionDescription<{ encode([]: [string[]]): string }>;

    setRaisingAccessController: TypedFunctionDescription<{
      encode([]: [string]): string;
    }>;
  };

  events: {};
}

export class FlagsInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): FlagsInterface;
  attach(addressOrName: string): FlagsInterface;
  deployed(): Promise<FlagsInterface>;

  on(event: EventFilter | string, listener: Listener): FlagsInterface;
  once(event: EventFilter | string, listener: Listener): FlagsInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): FlagsInterface;
  removeAllListeners(eventName: EventFilter | string): FlagsInterface;
  removeListener(eventName: any, listener: Listener): FlagsInterface;

  interface: FlagsInterfaceInterface;

  functions: {
    getFlag(arg0: string, overrides?: TransactionOverrides): Promise<boolean>;

    "getFlag(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    getFlags(
      arg0: string[],
      overrides?: TransactionOverrides
    ): Promise<boolean[]>;

    "getFlags(address[])"(
      arg0: string[],
      overrides?: TransactionOverrides
    ): Promise<boolean[]>;

    lowerFlags(
      arg0: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "lowerFlags(address[])"(
      arg0: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    raiseFlag(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "raiseFlag(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    raiseFlags(
      arg0: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "raiseFlags(address[])"(
      arg0: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setRaisingAccessController(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setRaisingAccessController(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getFlag(arg0: string, overrides?: TransactionOverrides): Promise<boolean>;

  "getFlag(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  getFlags(
    arg0: string[],
    overrides?: TransactionOverrides
  ): Promise<boolean[]>;

  "getFlags(address[])"(
    arg0: string[],
    overrides?: TransactionOverrides
  ): Promise<boolean[]>;

  lowerFlags(
    arg0: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "lowerFlags(address[])"(
    arg0: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  raiseFlag(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "raiseFlag(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  raiseFlags(
    arg0: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "raiseFlags(address[])"(
    arg0: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setRaisingAccessController(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setRaisingAccessController(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    getFlag(arg0: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "getFlag(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getFlags(
      arg0: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getFlags(address[])"(
      arg0: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    lowerFlags(
      arg0: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "lowerFlags(address[])"(
      arg0: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    raiseFlag(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "raiseFlag(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    raiseFlags(
      arg0: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "raiseFlags(address[])"(
      arg0: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setRaisingAccessController(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setRaisingAccessController(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
