{
	"schemaVersion": "2.0.0",
	"contractName": "CompoundPriceFlaggingValidator",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "flagsAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "compoundOracleAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "CompoundOpenOracleAddressUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "aggregator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "decimals",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "deviationThresholdNumerator",
						"type": "uint32"
					}
				],
				"name": "FeedDetailsSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "FlagsAddressUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "aggregators",
						"type": "address[]"
					}
				],
				"name": "check",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "checkUpkeep",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "compoundOpenOracle",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "flags",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "aggregator",
						"type": "address"
					}
				],
				"name": "getFeedDetails",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					},
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					},
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "performUpkeep",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "oracleAddress",
						"type": "address"
					}
				],
				"name": "setCompoundOpenOracleAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "aggregator",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "compoundSymbol",
						"type": "string"
					},
					{
						"internalType": "uint8",
						"name": "compoundDecimals",
						"type": "uint8"
					},
					{
						"internalType": "uint32",
						"name": "compoundDeviationThresholdNumerator",
						"type": "uint32"
					}
				],
				"name": "setFeedDetails",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "flagsAddress",
						"type": "address"
					}
				],
				"name": "setFlagsAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "aggregators",
						"type": "address[]"
					}
				],
				"name": "update",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"check(address[])": {
					"details": "If any of the aggregators provided have an equivalent Compound Oracle feed that with a price outside of the configured deviation, this function will return them.",
					"params": {
						"aggregators": "address[] memory"
					},
					"returns": {
						"_0": "address[] invalid feeds"
					}
				},
				"checkUpkeep(bytes)": {
					"details": "If any of the aggregators provided have an equivalent Compound Oracle feed that with a price outside of the configured deviation, this function will return them.",
					"params": {
						"data": "bytes encoded address array"
					},
					"returns": {
						"_0": "needsUpkeep bool indicating whether upkeep needs to be performed",
						"_1": "invalid aggregators - bytes encoded address array of invalid aggregator addresses"
					}
				},
				"compoundOpenOracle()": {
					"returns": {
						"_0": "address"
					}
				},
				"constructor": {
					"details": "Use this contract to compare Chainlink aggregator prices against the Compound Open Oracle prices",
					"params": {
						"compoundOracleAddress": "Address of the Compound Open Oracle UniswapAnchoredView contract",
						"flagsAddress": "Address of the flag contract"
					}
				},
				"flags()": {
					"returns": {
						"_0": "address"
					}
				},
				"getFeedDetails(address)": {
					"params": {
						"aggregator": "address"
					},
					"returns": {
						"_0": "string Compound Oracle Symbol",
						"_1": "uint8 Compound Oracle Decimals",
						"_2": "uint32 Deviation Threshold Numerator"
					}
				},
				"performUpkeep(bytes)": {
					"details": "This contract must have write permissions on the Flags contract",
					"params": {
						"data": "bytes encoded address array"
					}
				},
				"setCompoundOpenOracleAddress(address)": {
					"params": {
						"oracleAddress": "Compound Open Oracle UniswapAnchoredView address"
					}
				},
				"setFeedDetails(address,string,uint8,uint32)": {
					"params": {
						"aggregator": "The Chainlink aggregator address",
						"compoundDecimals": "The number of decimals in the Compound feed",
						"compoundDeviationThresholdNumerator": "The threshold numerator use to determine the percentage with which the difference in prices must reside within. Parts per billion.   For example:     If prices are valid within a 5% threshold, assuming x is the compoundDeviationThresholdNumerator:     x / 1,000,000,000 = 0.05     x = 50,000,000",
						"compoundSymbol": "The symbol used by Compound for this feed"
					}
				},
				"setFlagsAddress(address)": {
					"params": {
						"flagsAddress": "sets the address of the flags contract"
					}
				},
				"update(address[])": {
					"details": "This contract must have write permissions on the Flags contract",
					"params": {
						"aggregators": "address[] memory"
					},
					"returns": {
						"_0": "address[] memory invalid aggregators"
					}
				}
			},
			"version": 1
		},
		"evm": {
			"bytecode": {
				"object": "",
				"sourceMap": "722:12779:5:-:0;;;2197:207;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2197:207:5;;;;;;;2293:10;;371:1:6;587:19:7;579:56;;;;;-1:-1:-1;;;579:56:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;642:7;:15;;-1:-1:-1;;;;;;642:15:7;-1:-1:-1;;;;;642:15:7;;;;;;;;;;667:26;;;663:79;;703:32;722:12;703:18;:32::i;:::-;512:234;;271:116:6;2313:29:5::1;2329:12;2313:15;;;:29;;:::i;:::-;2348:51;2377:21:::0;2348:28:::1;:51::i;:::-;2197:207:::0;;722:12779;;1590:202:7;-1:-1:-1;;;;;1666:16:7;;1672:10;1666:16;;1658:52;;;;;-1:-1:-1;;;1658:52:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;1717:14;:19;;-1:-1:-1;;;;;;1717:19:7;-1:-1:-1;;;;;1717:19:7;;;;;;;;;-1:-1:-1;1775:7:7;;1748:39;;1717:19;;1775:7;;1748:39;;-1:-1:-1;1748:39:7;1590:202;:::o;3057:274:5:-;2073:20:7;:18;:20::i;:::-;3174:7:5::1;::::0;-1:-1:-1;;;;;3174:7:5;;::::1;::::0;3192:24;::::1;::::0;::::1;3188:139;;3226:7;:38:::0;;-1:-1:-1;;;;;;3226:38:5::1;-1:-1:-1::0;;;;;3226:38:5;;::::1;::::0;;::::1;::::0;;;3277:43:::1;::::0;3226:38;;3277:43;::::1;::::0;::::1;::::0;-1:-1:-1;;3277:43:5::1;3188:139;2099:1:7;3057:274:5::0;:::o;2581:327::-;2073:20:7;:18;:20::i;:::-;2712:16:5::1;::::0;-1:-1:-1;;;;;2712:16:5;;::::1;::::0;2739:25;::::1;::::0;::::1;2735:169;;2774:16;:53:::0;;-1:-1:-1;;;;;;2774:53:5::1;-1:-1:-1::0;;;;;2774:53:5;;::::1;::::0;;::::1;::::0;;;2840:57:::1;::::0;2774:53;;2840:57;::::1;::::0;::::1;::::0;-1:-1:-1;;2840:57:5::1;2099:1:7;2581:327:5::0;:::o;1837:121:7:-;1919:7;;-1:-1:-1;;;;;1919:7:7;1905:10;:21;1897:56;;;;;-1:-1:-1;;;1897:56:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;1837:121::o;722:12779:5:-;;;;;;;"
			},
			"deployedBytecode": {
				"object": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c806379ba50971161008c5780638da5cb5b116100665780638da5cb5b146104ed578063f0ba3ae1146104f5578063f1987695146105b7578063f2fde38b146105ea576100df565b806379ba5097146103a65780638417ca99146103ae578063870e5d511461044a576100df565b806364cc4aa5116100bd57806364cc4aa51461027c5780636e04ff0d146102ad578063725afd441461039e576100df565b806325c620b9146100e4578063317f17dc146101195780634585e33b1461020c575b600080fd5b610117600480360360208110156100fa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661061d565b005b6101bc6004803603602081101561012f57600080fd5b81019060208101813564010000000081111561014a57600080fd5b82018360208201111561015c57600080fd5b8035906020019184602083028401116401000000008311171561017e57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506106c0945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101f85781810151838201526020016101e0565b505050509050019250505060405180910390f35b6101176004803603602081101561022257600080fd5b81019060208101813564010000000081111561023d57600080fd5b82018360208201111561024f57600080fd5b8035906020019184600183028401116401000000008311171561027157600080fd5b50909250905061079f565b6102846107b7565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61031d600480360360208110156102c357600080fd5b8101906020810181356401000000008111156102de57600080fd5b8201836020820111156102f057600080fd5b8035906020019184600183028401116401000000008311171561031257600080fd5b5090925090506107d3565b60405180831515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561036257818101518382015260200161034a565b50505050905090810190601f16801561038f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b610284610862565b61011761087e565b610117600480360360808110156103c457600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156103fc57600080fd5b82018360208201111561040e57600080fd5b8035906020019184600183028401116401000000008311171561043057600080fd5b9193509150803560ff16906020013563ffffffff16610980565b6101bc6004803603602081101561046057600080fd5b81019060208101813564010000000081111561047b57600080fd5b82018360208201111561048d57600080fd5b803590602001918460208302840111640100000000831117156104af57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610ee8945050505050565b610284610fba565b6105286004803603602081101561050b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610fd6565b60405180806020018460ff1681526020018363ffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561057a578181015183820152602001610562565b50505050905090810190601f1680156105a75780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b610117600480360360208110156105cd57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110f5565b6101176004803603602081101561060057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611197565b6106256111ab565b60035473ffffffffffffffffffffffffffffffffffffffff90811690821681146106bc57600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84811691821790925560405190918316907fd37715469c4865e142b38d226fd2732c830e5acb6338e1b3007a8a0b689f766790600090a35b5050565b606060006106cd83610ee8565b6002546040517f760bc82d00000000000000000000000000000000000000000000000000000000815260206004820181815284516024840152845194955073ffffffffffffffffffffffffffffffffffffffff9093169363760bc82d93869390928392604490920191818601910280838360005b83811015610759578181015183820152602001610741565b5050505090500192505050600060405180830381600087803b15801561077e57600080fd5b505af1158015610792573d6000803e3d6000fd5b509293505050505b919050565b6107b28282602081101561012f57600080fd5b505050565b60025473ffffffffffffffffffffffffffffffffffffffff1690565b6000606060006107ec8585602081101561046057600080fd5b9050600080825111905080826040516020018080602001828103825283818151815260200191508051906020019060200280838360005b8381101561083b578181015183820152602001610823565b50505050905001925050506040516020818303038152906040529350935050509250929050565b60035473ffffffffffffffffffffffffffffffffffffffff1690565b60015473ffffffffffffffffffffffffffffffffffffffff16331461090457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6109886111ab565b60008163ffffffff161180156109a85750633b9aca008163ffffffff1611155b610a1357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f496e76616c6964207468726573686f6c64206e756d657261746f720000000000604482015290519081900360640190fd5b610a5284848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061123392505050565b610abd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c696420436f6d706f756e6420707269636500000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff851660009081526004602090815260408083208054825160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f810185900485028201850190935282815292909190830182828015610b855780601f10610b5a57610100808354040283529160200191610b85565b820191906000526020600020905b815481529060010190602001808311610b6857829003601f168201915b50505050509050805160001415610d4b57604051806060016040528086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060ff861660208084019190915263ffffffff861660409384015273ffffffffffffffffffffffffffffffffffffffff8a16825260048152919020825180519192610c28928492909101906118d4565b5060208281015160019290920180546040948501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911660ff948516177fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff1661010063ffffffff92831602179091558351928716918301919091528416918101919091526060808252810185905273ffffffffffffffffffffffffffffffffffffffff8716907f135b0348f308ff0dd1327c639a992d37786e313b6b100424477b900a075ddaa69087908790879087908060808101868680828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690920182900397509095505050505050a2610ee0565b6040805160608101825282815260ff851660208083019190915263ffffffff85168284015273ffffffffffffffffffffffffffffffffffffffff8916600090815260048252929092208151805192939192610da992849201906118d4565b5060208281015160019290920180546040948501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911660ff948516177fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff1661010063ffffffff92831602179091558351928716838301528516928201929092526060808252835190820152825173ffffffffffffffffffffffffffffffffffffffff8916927f135b0348f308ff0dd1327c639a992d37786e313b6b100424477b900a075ddaa69285928892889291829160808301919087019080838360005b83811015610ea3578181015183820152602001610e8b565b50505050905090810190601f168015610ed05780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a25b505050505050565b60606000825167ffffffffffffffff81118015610f0457600080fd5b50604051908082528060200260200182016040528015610f2e578160200160208202803683370190505b5090506000805b8451811015610fa6576000858281518110610f4c57fe5b60200260200101519050610f5f81611333565b15610f9d5780848481518110610f7157fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001909201915b50600101610f35565b5080845114610fb3578082525b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602090815260408083208151815460026001821615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190911604601f81018590049094028101608090810190935260608082018581529095948594859492849290918491908401828280156110af5780601f10611084576101008083540402835291602001916110af565b820191906000526020600020905b81548152906001019060200180831161109257829003601f168201915b50505091835250506001919091015460ff811660208084019190915261010090910463ffffffff1660409283015282519083015192909101519097919650945092505050565b6110fd6111ab565b60025473ffffffffffffffffffffffffffffffffffffffff90811690821681146106bc57600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84811691821790925560405190918316907f900aa01828592ab069e4d44e7a36c70ebd476e35f567c7db6a691e503b8029d890600090a35050565b61119f6111ab565b6111a881611497565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461123157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b565b6003546040517ffe2c619800000000000000000000000000000000000000000000000000000000815260206004820181815284516024840152845160009473ffffffffffffffffffffffffffffffffffffffff169363fe2c6198938793928392604401918501908083838b5b838110156112b757818101518382015260200161129f565b50505050905090810190601f1680156112e45780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561130157600080fd5b505afa158015611315573d6000803e3d6000fd5b505050506040513d602081101561132b57600080fd5b505192915050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602090815260408083208151815460026001821615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190911604601f8101859004909402810160809081019093526060810184815285949193849284918401828280156114045780601f106113d957610100808354040283529160200191611404565b820191906000526020600020905b8154815290600101906020018083116113e757829003601f168201915b50505091835250506001919091015460ff8116602083015263ffffffff6101009091048116604092830152908201519192501661144557600091505061079a565b60006114548260000151611233565b905060008061146286611592565b9150915061147682828587602001516116b0565b809450819350505061148d828486604001516116fd565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff811633141561151c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b600080600083905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156115e257600080fd5b505afa1580156115f6573d6000803e3d6000fd5b505050506040513d60a081101561160c57600080fd5b50602090810151604080517f313ce567000000000000000000000000000000000000000000000000000000008152905191965086935073ffffffffffffffffffffffffffffffffffffffff85169263313ce56792600480840193829003018186803b15801561167a57600080fd5b505afa15801561168e573d6000803e3d6000fd5b505050506040513d60208110156116a457600080fd5b50519395939450505050565b6000808260ff168560ff1611156116d45760ff83860316600a0a93909302926116f1565b8260ff168560ff1610156116f15760ff85840316600a0a95909502945b50939491935090915050565b600080611721633b9aca0061171b8763ffffffff8088169061175d16565b906117d9565b905060008486111561173e57611737868661185d565b9050611753565b8486101561175357611750858761185d565b90505b1015949350505050565b60008261176c575060006117d3565b8282028284828161177957fe5b04146117d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806119766021913960400191505060405180910390fd5b90505b92915050565b600080821161184957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b600082848161185457fe5b04949350505050565b6000828211156118ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261190a5760008555611950565b82601f1061192357805160ff1916838001178555611950565b82800160010185558215611950579182015b82811115611950578251825591602001919060010190611935565b5061195c929150611960565b5090565b5b8082111561195c576000815560010161196156fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c6343000706000a",
				"sourceMap": "722:12779:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2581:327;;;;;;;;;;;;;;;;-1:-1:-1;2581:327:5;;;;:::i;:::-;;6690:252;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6690:252:5;;-1:-1:-1;6690:252:5;;-1:-1:-1;;;;;6690:252:5:i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8056:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8056:128:5;;-1:-1:-1;8056:128:5;-1:-1:-1;8056:128:5;:::i;8825:109::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7419:337;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7419:337:5;;-1:-1:-1;7419:337:5;-1:-1:-1;7419:337:5;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9021:131;;;:::i;1069:275:7:-;;;:::i;4027:1365:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4027:1365:5;-1:-1:-1;4027:1365:5;;;;;;;;;;;:::i;5729:615::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5729:615:5;;-1:-1:-1;5729:615:5;;-1:-1:-1;;;;;5729:615:5:i;1395:111:7:-;;;:::i;8416:337:5:-;;;;;;;;;;;;;;;;-1:-1:-1;8416:337:5;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3057:274;;;;;;;;;;;;;;;;-1:-1:-1;3057:274:5;;;;:::i;855:122:7:-;;;;;;;;;;;;;;;;-1:-1:-1;855:122:7;;;;:::i;2581:327:5:-;2073:20:7;:18;:20::i;:::-;2712:16:5::1;::::0;::::1;::::0;;::::1;::::0;2739:25;::::1;::::0;::::1;2735:169;;2774:16;:53:::0;;;::::1;;::::0;;::::1;::::0;;::::1;::::0;;;2840:57:::1;::::0;2774:53;;2840:57;::::1;::::0;::::1;::::0;-1:-1:-1;;2840:57:5::1;2735:169;2099:1:7;2581:327:5::0;:::o;6690:252::-;6775:16;6806:35;6844:18;6850:11;6844:5;:18::i;:::-;6868:7;;:38;;;;;;;;;;;;;;;;;;;;6806:56;;-1:-1:-1;6868:7:5;;;;;:18;;6806:56;;6868:38;;;;;;;;;;;;;;;;;:7;:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6919:18:5;;-1:-1:-1;;;;6690:252:5;;;;:::o;8056:128::-;8142:37;8160:4;;8149:29;;;;;;;;;8142:37;;8056:128;;:::o;8825:109::-;8921:7;;;;8825:109;:::o;7419:337::-;7524:4;7536:12;7563:35;7601:36;7618:4;;7607:29;;;;;;;;;7601:36;7563:74;;7643:16;7691:1;7663:18;:25;:29;7643:50;;7707:11;7731:18;7720:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7699:52;;;;;;7419:337;;;;;:::o;9021:131::-;9130:16;;;;9021:131;:::o;1069:275:7:-;1152:14;;;;1138:10;:28;1130:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1200:16;1219:7;;1242:10;1232:20;;;;;;;;-1:-1:-1;1258:27:7;;;;;;;1297:42;;1219:7;;;;;1242:10;;1219:7;;1297:42;;;1069:275;:::o;4027:1365:5:-;2073:20:7;:18;:20::i;:::-;4275:1:5::1;4237:35;:39;;;:95;;;;;1376:13;4286:35;:46;;;;4237:95;4229:135;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;4378:32;4395:14;;4378:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;4378:16:5::1;::::0;-1:-1:-1;;;4378:32:5:i:1;:::-;4370:72;;;::::0;;::::1;::::0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;4478:25;::::0;::::1;4448:27;4478:25:::0;;;:13:::1;:25;::::0;;;;;;;4448:62;;;;::::1;;::::0;::::1;;;;::::0;;;;::::1;::::0;;;::::1;;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;;;;4478:25;;4448:62;;::::1;4478:25:::0;4448:62;;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4571:13;4565:27;4596:1;4565:32;4561:827;;;4635:171;;;;;;;;4673:14;;4635:171;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;-1:-1:-1;4635:171:5;;;-1:-1:-1;;;4635:171:5::1;::::0;::::1;;::::0;;::::1;::::0;;;;::::1;::::0;::::1;::::0;;;;;4607:25:::1;::::0;::::1;::::0;;:13:::1;:25:::0;;;;;:199;;;;:25;;:199:::1;::::0;:25;;:199;;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;4607:199:5::1;::::0;;::::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;::::1;;::::0;;::::1;;::::0;::::1;;;::::0;;::::1;;;::::0;;;4819:137;;;;::::1;::::0;;::::1;::::0;;;;;::::1;::::0;;;;;;;;;;;;;;;;::::1;::::0;::::1;::::0;::::1;::::0;4863:14;;4819:137;;;;;;;;;;4863:14;4819:137;;4863:14;4819:137;::::1;;::::0;;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;;::::1;::::0;-1:-1:-1;4819:137:5;;-1:-1:-1;;;;;;4819:137:5::1;4561:827;;;5062:170;::::0;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;;::::0;;::::1;::::0;;;;::::1;::::0;::::1;::::0;;;;5034:25:::1;::::0;::::1;-1:-1:-1::0;5034:25:5;;;:13:::1;:25:::0;;;;;;:198;;;;5062:170;;5034:25;;:198:::1;::::0;:25;;:198:::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;5034:198:5::1;::::0;;::::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;::::1;;::::0;;::::1;;::::0;::::1;;;::::0;;::::1;;;::::0;;;5245:136;;;;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;;;;;;;;;;;;;;;;::::1;::::0;::::1;::::0;::::1;::::0;;;;;;;;;;;;;;;;::::1;::::0;;;;-1:-1:-1;5245:136:5::1;;;;;;;::::0;;::::1;::::0;;;::::1;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4561:827;2099:1:7;4027:1365:5::0;;;;;:::o;5729:615::-;5822:16;5853:35;5905:11;:18;5891:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5891:33:5;;5853:71;;5930:20;5965:9;5960:222;5984:11;:18;5980:1;:22;5960:222;;;6017:18;6038:11;6050:1;6038:14;;;;;;;;;;;;;;6017:35;;6064:22;6075:10;6064;:22::i;:::-;6060:116;;;6133:10;6098:18;6117:12;6098:32;;;;;;;;:45;;;;:32;;;;;;;;;;;:45;6153:14;;;;;6060:116;-1:-1:-1;6004:3:5;;5960:222;;;;6214:12;6192:11;:18;:34;6188:121;;6282:12;6262:18;6255:40;6245:58;-1:-1:-1;6321:18:5;5729:615;-1:-1:-1;;5729:615:5:o;1395:111:7:-;1465:7;1494;;;1395:111;:::o;8416:337:5:-;8604:25;;;8529:5;8604:25;;;:13;:25;;;;;;;;8563:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8508:13;8563:66;;;;;;8508:13;;8529:5;;;;;8604:25;8563:66;;;;8604:25;;8563:66;;;8604:25;8563:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8563:66:5;;;-1:-1:-1;;8563:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;8649:18;;8675:20;;;;8703:39;;;;;8649:18;;8675:20;;-1:-1:-1;8703:39:5;-1:-1:-1;8416:337:5;-1:-1:-1;;;8416:337:5:o;3057:274::-;2073:20:7;:18;:20::i;:::-;3174:7:5::1;::::0;::::1;::::0;;::::1;::::0;3192:24;::::1;::::0;::::1;3188:139;;3226:7;:38:::0;;;::::1;;::::0;;::::1;::::0;;::::1;::::0;;;3277:43:::1;::::0;3226:38;;3277:43;::::1;::::0;::::1;::::0;-1:-1:-1;;3277:43:5::1;2099:1:7;3057:274:5::0;:::o;855:122:7:-;2073:20;:18;:20::i;:::-;950:22:::1;969:2;950:18;:22::i;:::-;855:122:::0;:::o;1837:121::-;1919:7;;;;1905:10;:21;1897:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1837:121::o;9296:161:5:-;9422:16;;:30;;;;;;;;;;;;;;;;;;;;9393:7;;9422:16;;;:22;;9445:6;;9422:30;;;;;;;;;;;;9393:7;9422:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9422:30:5;;9296:161;-1:-1:-1;;9296:161:5:o;9757:849::-;9914:25;;;9846:12;9914:25;;;:13;:25;;;;;;;;9873:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9846:12;;9873:66;;;;9914:25;;9873:66;;9914:25;9873:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9873:66:5;;;-1:-1:-1;;9873:66:5;;;;;;;;;;;;;;;;;;;;;;;;;9949:39;;;;9873:66;;-1:-1:-1;9949:44:5;9945:77;;10010:5;10003:12;;;;;9945:77;10064:17;10084:36;10101:11;:18;;;10084:16;:36::i;:::-;10064:56;;10127:23;10152:24;10180:29;10198:10;10180:17;:29::i;:::-;10126:83;;;;10312:120;10340:15;10363:18;10389:9;10406:11;:20;;;10312;:120::i;:::-;10281:151;;;;;;;;10508:93;10533:15;10550:9;10561:11;:39;;;10508:24;:93::i;:::-;10501:100;9757:849;-1:-1:-1;;;;;;9757:849:5:o;1590:202:7:-;1666:16;;;1672:10;1666:16;;1658:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1717:14;:19;;;;;;;;;;;;;;-1:-1:-1;1775:7:7;;1748:39;;1717:19;;1775:7;;1748:39;;-1:-1:-1;1748:39:7;1590:202;:::o;10776:349:5:-;10872:13;10893:14;10922:31;10978:10;10922:67;;10997:18;11022:9;:25;;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11022:27:5;;;;;;11100:20;;;;;;;11022:27;;-1:-1:-1;11022:27:5;;-1:-1:-1;11100:18:5;;;;;;:20;;;;;;;;;;:18;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11100:20:5;10776:349;;11100:20;;-1:-1:-1;;;;10776:349:5:o;11625:788::-;11814:31;11853:29;11922:16;11901:37;;:18;:37;;;11897:422;;;12031:13;11961:37;;;12031:13;12027:2;:17;12068:26;;;;;11897:422;;;12136:16;12115:37;;:18;:37;;;12111:208;;;12245:13;12175:37;;;12245:13;12241:2;:17;12284:28;;;;;12111:208;-1:-1:-1;12350:15:5;;12395:13;;-1:-1:-1;11625:788:5;;-1:-1:-1;;11625:788:5:o;12823:676::-;12994:20;;13124:61;1376:13;13124:48;:15;:48;;;;;:19;:48;:::i;:::-;:52;;:61::i;:::-;13089:96;;13219:17;13264:9;13246:15;:27;13242:190;;;13295:30;:15;13315:9;13295:19;:30::i;:::-;13283:42;;13242:190;;;13364:9;13346:15;:27;13342:90;;;13395:30;:9;13409:15;13395:13;:30::i;:::-;13383:42;;13342:90;13456:37;;;12823:676;-1:-1:-1;;;;12823:676:5:o;1746:456:42:-;1835:7;2066:6;2062:35;;-1:-1:-1;2089:1:42;2082:8;;2062:35;2115:5;;;2119:1;2115;:5;:1;2134:5;;;;;:10;2126:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2196:1;-1:-1:-1;1746:456:42;;;;;:::o;2643:342::-;2732:7;2828:1;2824;:5;2816:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2866:9;2882:1;2878;:5;;;;;;;2643:342;-1:-1:-1;;;;2643:342:42:o;1315:203::-;1404:7;1439:1;1434;:6;;1426:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1493:5:42;;;1315:203::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;"
			},
			"methodIdentifiers": {
				"acceptOwnership()": "79ba5097",
				"check(address[])": "870e5d51",
				"checkUpkeep(bytes)": "6e04ff0d",
				"compoundOpenOracle()": "725afd44",
				"flags()": "64cc4aa5",
				"getFeedDetails(address)": "f0ba3ae1",
				"owner()": "8da5cb5b",
				"performUpkeep(bytes)": "4585e33b",
				"setCompoundOpenOracleAddress(address)": "25c620b9",
				"setFeedDetails(address,string,uint8,uint32)": "8417ca99",
				"setFlagsAddress(address)": "f1987695",
				"transferOwnership(address)": "f2fde38b",
				"update(address[])": "317f17dc"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flagsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compoundOracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CompoundOpenOracleAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deviationThresholdNumerator\",\"type\":\"uint32\"}],\"name\":\"FeedDetailsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FlagsAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"aggregators\",\"type\":\"address[]\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundOpenOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flags\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"getFeedDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"setCompoundOpenOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"compoundSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"compoundDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"compoundDeviationThresholdNumerator\",\"type\":\"uint32\"}],\"name\":\"setFeedDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flagsAddress\",\"type\":\"address\"}],\"name\":\"setFlagsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"aggregators\",\"type\":\"address[]\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"check(address[])\":{\"details\":\"If any of the aggregators provided have an equivalent Compound Oracle feed that with a price outside of the configured deviation, this function will return them.\",\"params\":{\"aggregators\":\"address[] memory\"},\"returns\":{\"_0\":\"address[] invalid feeds\"}},\"checkUpkeep(bytes)\":{\"details\":\"If any of the aggregators provided have an equivalent Compound Oracle feed that with a price outside of the configured deviation, this function will return them.\",\"params\":{\"data\":\"bytes encoded address array\"},\"returns\":{\"_0\":\"needsUpkeep bool indicating whether upkeep needs to be performed\",\"_1\":\"invalid aggregators - bytes encoded address array of invalid aggregator addresses\"}},\"compoundOpenOracle()\":{\"returns\":{\"_0\":\"address\"}},\"constructor\":{\"details\":\"Use this contract to compare Chainlink aggregator prices against the Compound Open Oracle prices\",\"params\":{\"compoundOracleAddress\":\"Address of the Compound Open Oracle UniswapAnchoredView contract\",\"flagsAddress\":\"Address of the flag contract\"}},\"flags()\":{\"returns\":{\"_0\":\"address\"}},\"getFeedDetails(address)\":{\"params\":{\"aggregator\":\"address\"},\"returns\":{\"_0\":\"string Compound Oracle Symbol\",\"_1\":\"uint8 Compound Oracle Decimals\",\"_2\":\"uint32 Deviation Threshold Numerator\"}},\"performUpkeep(bytes)\":{\"details\":\"This contract must have write permissions on the Flags contract\",\"params\":{\"data\":\"bytes encoded address array\"}},\"setCompoundOpenOracleAddress(address)\":{\"params\":{\"oracleAddress\":\"Compound Open Oracle UniswapAnchoredView address\"}},\"setFeedDetails(address,string,uint8,uint32)\":{\"params\":{\"aggregator\":\"The Chainlink aggregator address\",\"compoundDecimals\":\"The number of decimals in the Compound feed\",\"compoundDeviationThresholdNumerator\":\"The threshold numerator use to determine the percentage with which the difference in prices must reside within. Parts per billion.   For example:     If prices are valid within a 5% threshold, assuming x is the compoundDeviationThresholdNumerator:     x / 1,000,000,000 = 0.05     x = 50,000,000\",\"compoundSymbol\":\"The symbol used by Compound for this feed\"}},\"setFlagsAddress(address)\":{\"params\":{\"flagsAddress\":\"sets the address of the flags contract\"}},\"update(address[])\":{\"details\":\"This contract must have write permissions on the Flags contract\",\"params\":{\"aggregators\":\"address[] memory\"},\"returns\":{\"_0\":\"address[] memory invalid aggregators\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"check(address[])\":{\"notice\":\"Check the price deviation of an array of aggregators\"},\"checkUpkeep(bytes)\":{\"notice\":\"Check the price deviation of an array of aggregators\"},\"compoundOpenOracle()\":{\"notice\":\"Get the Compound Open Oracle address\"},\"constructor\":{\"notice\":\"Create a new CompoundPriceFlaggingValidator\"},\"flags()\":{\"notice\":\"Get the flags address\"},\"getFeedDetails(address)\":{\"notice\":\"Get the threshold of an aggregator\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"performUpkeep(bytes)\":{\"notice\":\"Check and raise flags for any aggregator that has an equivalent Compound Open Oracle feed with a price deviation exceeding the configured setting.\"},\"setCompoundOpenOracleAddress(address)\":{\"notice\":\"Set the address of the Compound Open Oracle UniswapAnchoredView contract\"},\"setFeedDetails(address,string,uint8,uint32)\":{\"notice\":\"Set the threshold details for comparing a Chainlink aggregator to a Compound Open Oracle feed.\"},\"setFlagsAddress(address)\":{\"notice\":\"Updates the flagging contract address for raising flags\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"update(address[])\":{\"notice\":\"Check and raise flags for any aggregator that has an equivalent Compound Open Oracle feed with a price deviation exceeding the configured setting.\"}},\"notice\":\"This validator compares the price of Chainlink aggregators against their equivalent Compound Open Oracle feeds. For each aggregator, a Compound feed is configured with its symbol, number of decimals, and deviation threshold. An aggregator address is flagged when its corresponding Compound feed price deviates by more than the configured threshold from the aggregator price.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/CompoundPriceFlaggingValidator.sol\":\"CompoundPriceFlaggingValidator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/CompoundPriceFlaggingValidator.sol\":{\"keccak256\":\"0x346c4d8157437c4badd4a86c65c3e732191c4e168511c5307fb396af31757b29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c4f145f609b697f0c56f8e3e04cb00e9aa04ad661ee85d7d2aea5149fad66938\",\"dweb:/ipfs/Qmcz1cETuD1aUBgh6bD2WBDH2pebPNQitVijAuqqR7ohmV\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/ConfirmedOwner.sol\":{\"keccak256\":\"0x4ca4b13814b24424f4a4565827888abd73a599db359e33c378d468cf952f2e12\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://390be8bf9d384603f8d4ce2c243f5480ce9ce5dcfec138642c56a70c4c35e09f\",\"dweb:/ipfs/QmP5QqCLwDBbKzy2PCDqjtkAg5FdYF2p2xKgP92kqyC3DA\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/ConfirmedOwnerWithProposal.sol\":{\"keccak256\":\"0xd594f8533e00d3a68088b74cdb26035dbfc565a6af1c251f5fd5d5b44f94134c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf67278a0a54d56fc6c57215cc1fa3f73c53cf485563d67725b0bd81dd0e1bfa\",\"dweb:/ipfs/QmZzD3r1PyorWgke7czxw9MDReDEdnpZ6ktphqvbqUSgTt\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0x62c8752bb170233359e653c61d491d6a79fe1d7d7281377c5ac4e9c03ce811ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e38ee533afdf7d6d20a7c9fabc30ed1b904230402e7864db84d607dd2a570dfd\",\"dweb:/ipfs/QmUxobRD1bk13PZ398NrHGPjzKMYJSBTZKcgPNuEDRDMGY\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/FlagsInterface.sol\":{\"keccak256\":\"0x58d2cb73917d191163679c823eab45c6e785d9b270966313bed480ee3359275b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99d009ba6d18c2bc60d752e7081a29cf8ae22e0bd95ee553c32f20329f47f297\",\"dweb:/ipfs/QmUBvxSzhYUEoizNP9izLUsu4NtTNMF1Eb8Mv7ym8ySAqT\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/OwnableInterface.sol\":{\"keccak256\":\"0xc70f1ef06be11ec954b93df177d4f17bfc1b6017105a1be9bb52aeb5119133d1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e69106bac4bf140c2e514ea9ebc67337ebd2c506fbeeb84a540eac6d884595d5\",\"dweb:/ipfs/QmWqZifScXZ4YFHrYNvXU5449dGBoTgcjL7YEHPuU5A94o\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/UniswapAnchoredView.sol\":{\"keccak256\":\"0x3ac3df15fcd185532f0bf413a7b01a2f1e05f5b1961a655142ffd3f8cb83a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://807e7b8d1ec6c232f8a84c1508bc08f71003b411c96c3ea851d21356ed29d3df\",\"dweb:/ipfs/QmcES5aYp4KkuXZWYp4qp1JoGfQrwiJWD8mkfA875ECgS6\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/UpkeepInterface.sol\":{\"keccak256\":\"0x5ecbcf30e91c27ef5f4043bcd17b76e4ae311413f2f6902ae8e880a2890df73c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d06984716a5d7f68d72fc1c3c9613c885b0d743677707de7b188dae8c304688b\",\"dweb:/ipfs/QmbVNtLuxtMm3QqFC2WjZa3u5hQ5384Lm2o8n5LC38yFfo\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/vendor/SafeMathChainlink.sol\":{\"keccak256\":\"0xdef991bae78444c98da33e88e81682001bb5bb9541ec19b1a05c19df8bbbff8b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://684404db5f34ead354c37a01566c3568a187903355211f97cb60118e868397fd\",\"dweb:/ipfs/QmbZR3LxbVh1bBK6JhJGHRDAGn7GAtHVsB1FxxnDYRBQs8\"]}},\"version\":1}",
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptOwnership()": {
					"notice": "Allows an ownership transfer to be completed by the recipient."
				},
				"check(address[])": {
					"notice": "Check the price deviation of an array of aggregators"
				},
				"checkUpkeep(bytes)": {
					"notice": "Check the price deviation of an array of aggregators"
				},
				"compoundOpenOracle()": {
					"notice": "Get the Compound Open Oracle address"
				},
				"constructor": {
					"notice": "Create a new CompoundPriceFlaggingValidator"
				},
				"flags()": {
					"notice": "Get the flags address"
				},
				"getFeedDetails(address)": {
					"notice": "Get the threshold of an aggregator"
				},
				"owner()": {
					"notice": "Get the current owner"
				},
				"performUpkeep(bytes)": {
					"notice": "Check and raise flags for any aggregator that has an equivalent Compound Open Oracle feed with a price deviation exceeding the configured setting."
				},
				"setCompoundOpenOracleAddress(address)": {
					"notice": "Set the address of the Compound Open Oracle UniswapAnchoredView contract"
				},
				"setFeedDetails(address,string,uint8,uint32)": {
					"notice": "Set the threshold details for comparing a Chainlink aggregator to a Compound Open Oracle feed."
				},
				"setFlagsAddress(address)": {
					"notice": "Updates the flagging contract address for raising flags"
				},
				"transferOwnership(address)": {
					"notice": "Allows an owner to begin transferring ownership to a new address, pending."
				},
				"update(address[])": {
					"notice": "Check and raise flags for any aggregator that has an equivalent Compound Open Oracle feed with a price deviation exceeding the configured setting."
				}
			},
			"notice": "This validator compares the price of Chainlink aggregators against their equivalent Compound Open Oracle feeds. For each aggregator, a Compound feed is configured with its symbol, number of decimals, and deviation threshold. An aggregator address is flagged when its corresponding Compound feed price deviates by more than the configured threshold from the aggregator price.",
			"version": 1
		}
	},
	"sources": {
		"dev/CompoundPriceFlaggingValidator.sol": {
			"id": 5
		},
		"dev/ConfirmedOwner.sol": {
			"id": 6
		},
		"dev/ConfirmedOwnerWithProposal.sol": {
			"id": 7
		},
		"interfaces/OwnableInterface.sol": {
			"id": 26
		},
		"vendor/SafeMathChainlink.sol": {
			"id": 42
		},
		"interfaces/FlagsInterface.sol": {
			"id": 21
		},
		"interfaces/AggregatorV3Interface.sol": {
			"id": 17
		},
		"interfaces/UniswapAnchoredView.sol": {
			"id": 29
		},
		"interfaces/UpkeepInterface.sol": {
			"id": 30
		}
	},
	"sourceCodes": {
		"dev/CompoundPriceFlaggingValidator.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./ConfirmedOwner.sol\";\nimport \"../vendor/SafeMathChainlink.sol\";\nimport \"../interfaces/FlagsInterface.sol\";\nimport \"../interfaces/AggregatorV3Interface.sol\";\nimport \"../interfaces/UniswapAnchoredView.sol\";\nimport \"../interfaces/UpkeepInterface.sol\";\n\n/**\n * @notice This validator compares the price of Chainlink aggregators against\n * their equivalent Compound Open Oracle feeds. For each aggregator, a Compound\n * feed is configured with its symbol, number of decimals, and deviation threshold.\n * An aggregator address is flagged when its corresponding Compound feed price deviates\n * by more than the configured threshold from the aggregator price.\n */\ncontract CompoundPriceFlaggingValidator is ConfirmedOwner, UpkeepInterface {\n  using SafeMathChainlink for uint256;\n\n  struct CompoundFeedDetails {\n    // Used to call the Compound Open Oracle\n    string symbol;\n    // Used to convert price to match aggregator decimals\n    uint8 decimals;\n    // The numerator used to determine the threshold percentage\n    // as parts per billion.\n    // 1,000,000,000 = 100%\n    //   500,000,000 = 50%\n    //   100,000,000 = 10%\n    //    50,000,000 = 5%\n    //    10,000,000 = 1%\n    //     2,000,000 = 0.2%\n    //                 etc\n    uint32 deviationThresholdNumerator;\n  }\n\n  uint256 private constant BILLION = 1_000_000_000;\n\n  FlagsInterface private s_flags;\n  UniswapAnchoredView private s_compOpenOracle;\n  mapping(address => CompoundFeedDetails) private s_feedDetails;\n\n  event CompoundOpenOracleAddressUpdated(\n    address indexed from,\n    address indexed to\n  );\n  event FlagsAddressUpdated(\n    address indexed from,\n    address indexed to\n  );\n  event FeedDetailsSet(\n    address indexed aggregator,\n    string symbol,\n    uint8 decimals,\n    uint32 deviationThresholdNumerator\n  );\n  \n  /**\n   * @notice Create a new CompoundPriceFlaggingValidator\n   * @dev Use this contract to compare Chainlink aggregator prices\n   * against the Compound Open Oracle prices\n   * @param flagsAddress Address of the flag contract\n   * @param compoundOracleAddress Address of the Compound Open Oracle UniswapAnchoredView contract\n   */\n  constructor(\n    address flagsAddress,\n    address compoundOracleAddress\n  )\n    ConfirmedOwner(msg.sender)\n  {\n    setFlagsAddress(flagsAddress);\n    setCompoundOpenOracleAddress(compoundOracleAddress);\n  }\n\n  /**\n   * @notice Set the address of the Compound Open Oracle UniswapAnchoredView contract\n   * @param oracleAddress Compound Open Oracle UniswapAnchoredView address\n   */\n  function setCompoundOpenOracleAddress(\n    address oracleAddress\n  )\n    public\n    onlyOwner()\n  {\n    address previous = address(s_compOpenOracle);\n    if (previous != oracleAddress) {\n      s_compOpenOracle = UniswapAnchoredView(oracleAddress);\n      emit CompoundOpenOracleAddressUpdated(previous, oracleAddress);\n    }\n  }\n\n  /**\n   * @notice Updates the flagging contract address for raising flags\n   * @param flagsAddress sets the address of the flags contract\n   */\n  function setFlagsAddress(\n    address flagsAddress\n  )\n    public\n    onlyOwner()\n  {\n    address previous = address(s_flags);\n    if (previous != flagsAddress) {\n      s_flags = FlagsInterface(flagsAddress);\n      emit FlagsAddressUpdated(previous, flagsAddress);\n    }\n  }\n\n  /**\n   * @notice Set the threshold details for comparing a Chainlink aggregator\n   * to a Compound Open Oracle feed.\n   * @param aggregator The Chainlink aggregator address\n   * @param compoundSymbol The symbol used by Compound for this feed\n   * @param compoundDecimals The number of decimals in the Compound feed\n   * @param compoundDeviationThresholdNumerator The threshold numerator use to determine\n   * the percentage with which the difference in prices must reside within. Parts per billion.\n   *   For example:\n   *     If prices are valid within a 5% threshold, assuming x is the compoundDeviationThresholdNumerator:\n   *     x / 1,000,000,000 = 0.05\n   *     x = 50,000,000\n   */\n  function setFeedDetails(\n    address aggregator,\n    string calldata compoundSymbol,\n    uint8 compoundDecimals,\n    uint32 compoundDeviationThresholdNumerator\n  ) \n    public \n    onlyOwner() \n  {\n    require(compoundDeviationThresholdNumerator > 0\n      && compoundDeviationThresholdNumerator <= BILLION, \"Invalid threshold numerator\");\n    require(_compoundPriceOf(compoundSymbol) != 0, \"Invalid Compound price\");\n    string memory currentSymbol = s_feedDetails[aggregator].symbol;\n    // If symbol is not set, use the new one\n    if (bytes(currentSymbol).length == 0) {\n      s_feedDetails[aggregator] = CompoundFeedDetails({\n        symbol: compoundSymbol,\n        decimals: compoundDecimals,\n        deviationThresholdNumerator: compoundDeviationThresholdNumerator\n      });\n      emit FeedDetailsSet(\n        aggregator,\n        compoundSymbol,\n        compoundDecimals,\n        compoundDeviationThresholdNumerator\n      );\n    }\n    // If the symbol is already set, don't change it\n    else {\n      s_feedDetails[aggregator] = CompoundFeedDetails({\n        symbol: currentSymbol,\n        decimals: compoundDecimals,\n        deviationThresholdNumerator: compoundDeviationThresholdNumerator\n      });\n      emit FeedDetailsSet(\n        aggregator,\n        currentSymbol,\n        compoundDecimals,\n        compoundDeviationThresholdNumerator\n      );\n    }\n  }\n\n  /**\n   * @notice Check the price deviation of an array of aggregators\n   * @dev If any of the aggregators provided have an equivalent Compound Oracle feed\n   * that with a price outside of the configured deviation, this function will return them.\n   * @param aggregators address[] memory\n   * @return address[] invalid feeds\n   */\n  function check(\n    address[] memory aggregators\n  )\n    public\n    view\n    returns (\n      address[] memory\n    )\n  {\n    address[] memory invalidAggregators = new address[](aggregators.length);\n    uint256 invalidCount = 0;\n    for (uint256 i = 0; i < aggregators.length; i++) {\n      address aggregator = aggregators[i];\n      if (_isInvalid(aggregator)) {\n        invalidAggregators[invalidCount] = aggregator;\n        invalidCount++;\n      }\n    }\n\n    if (aggregators.length != invalidCount) {\n      assembly {\n        mstore(invalidAggregators, invalidCount)\n      }\n    }\n    return invalidAggregators;\n  }\n\n  /**\n   * @notice Check and raise flags for any aggregator that has an equivalent Compound\n   * Open Oracle feed with a price deviation exceeding the configured setting.\n   * @dev This contract must have write permissions on the Flags contract\n   * @param aggregators address[] memory\n   * @return address[] memory invalid aggregators\n   */\n  function update(\n    address[] memory aggregators\n  )\n    public\n    returns (\n      address[] memory\n    )\n  {\n    address[] memory invalidAggregators = check(aggregators);\n    s_flags.raiseFlags(invalidAggregators);\n    return invalidAggregators;\n  }\n\n  /**\n   * @notice Check the price deviation of an array of aggregators\n   * @dev If any of the aggregators provided have an equivalent Compound Oracle feed\n   * that with a price outside of the configured deviation, this function will return them.\n   * @param data bytes encoded address array\n   * @return needsUpkeep bool indicating whether upkeep needs to be performed\n   * @return invalid aggregators - bytes encoded address array of invalid aggregator addresses\n   */\n  function checkUpkeep(\n    bytes calldata data\n  )\n    external\n    view\n    override\n    returns (\n      bool,\n      bytes memory\n    )\n  {\n    address[] memory invalidAggregators = check(abi.decode(data, (address[])));\n    bool needsUpkeep = (invalidAggregators.length > 0);\n    return (needsUpkeep, abi.encode(invalidAggregators));\n  }\n\n  /**\n   * @notice Check and raise flags for any aggregator that has an equivalent Compound\n   * Open Oracle feed with a price deviation exceeding the configured setting.\n   * @dev This contract must have write permissions on the Flags contract\n   * @param data bytes encoded address array\n   */\n  function performUpkeep(\n    bytes calldata data\n  )\n    external\n    override\n  {\n    update(abi.decode(data, (address[])));\n  }\n\n  /**\n   * @notice Get the threshold of an aggregator\n   * @param aggregator address\n   * @return string Compound Oracle Symbol\n   * @return uint8 Compound Oracle Decimals\n   * @return uint32 Deviation Threshold Numerator\n   */\n  function getFeedDetails(\n    address aggregator\n  )\n    public\n    view\n    returns (\n      string memory,\n      uint8,\n      uint32\n    )\n  {\n    CompoundFeedDetails memory compDetails = s_feedDetails[aggregator];\n    return(\n      compDetails.symbol,\n      compDetails.decimals,\n      compDetails.deviationThresholdNumerator\n    );\n  }\n\n  /**\n   * @notice Get the flags address\n   * @return address\n   */\n  function flags()\n    external\n    view\n    returns (\n      address\n    )\n  {\n    return address(s_flags);\n  }\n\n  /**\n   * @notice Get the Compound Open Oracle address\n   * @return address\n   */\n  function compoundOpenOracle()\n    external\n    view\n    returns (\n      address\n    )\n  {\n    return address(s_compOpenOracle);\n  }\n\n  /**\n   * @notice Return the Compound oracle price of an asset using its symbol\n   * @param symbol string\n   * @return price uint256\n   */\n  function _compoundPriceOf(\n    string memory symbol\n  )\n    private\n    view\n    returns (\n      uint256\n    )\n  {\n    return s_compOpenOracle.price(symbol);\n  }\n\n  // VALIDATION FUNCTIONS\n\n  /**\n   * @notice Check if an aggregator has an equivalent Compound Oracle feed\n   * that's price is deviated more than the threshold.\n   * @param aggregator address of the Chainlink aggregator\n   * @return invalid bool. True if the deviation exceeds threshold.\n   */\n  function _isInvalid(\n    address aggregator\n  )\n    private\n    view\n    returns (\n      bool invalid\n    )\n  {\n    CompoundFeedDetails memory compDetails = s_feedDetails[aggregator];\n    if (compDetails.deviationThresholdNumerator == 0) {\n      return false;\n    }\n    // Get both oracle price details\n    uint256 compPrice = _compoundPriceOf(compDetails.symbol);\n    (uint256 aggregatorPrice, uint8 aggregatorDecimals) = _aggregatorValues(aggregator);\n\n    // Adjust the prices so the number of decimals in each align\n    (aggregatorPrice, compPrice) = _adjustPriceDecimals(\n      aggregatorPrice,\n      aggregatorDecimals,\n      compPrice,\n      compDetails.decimals\n    );\n\n    // Check whether the prices deviate beyond the threshold.\n    return _deviatesBeyondThreshold(aggregatorPrice, compPrice, compDetails.deviationThresholdNumerator);\n  }\n\n  /**\n   * @notice Retrieve the price and the decimals from an Aggregator\n   * @param aggregator address\n   * @return price uint256\n   * @return decimals uint8\n   */\n  function _aggregatorValues(\n    address aggregator\n  )\n    private\n    view\n    returns (\n      uint256 price,\n      uint8 decimals\n    )\n  {\n    AggregatorV3Interface priceFeed = AggregatorV3Interface(aggregator);\n    (,int256 signedPrice,,,) = priceFeed.latestRoundData();\n    price = uint256(signedPrice);\n    decimals = priceFeed.decimals();\n  }\n\n  /**\n   * @notice Adjust the price values of the Aggregator and Compound feeds so that\n   * their decimal places align. This enables deviation to be calculated.\n   * @param aggregatorPrice uint256\n   * @param aggregatorDecimals uint8 - decimal places included in the aggregator price\n   * @param compoundPrice uint256\n   * @param compoundDecimals uint8 - decimal places included in the compound price\n   * @return adjustedAggregatorPrice uint256\n   * @return adjustedCompoundPrice uint256\n   */\n  function _adjustPriceDecimals(\n    uint256 aggregatorPrice,\n    uint8 aggregatorDecimals,\n    uint256 compoundPrice,\n    uint8 compoundDecimals\n  )\n    private\n    pure\n    returns (\n      uint256 adjustedAggregatorPrice,\n      uint256 adjustedCompoundPrice\n    )\n  {\n    if (aggregatorDecimals > compoundDecimals) {\n      uint8 diff = aggregatorDecimals - compoundDecimals;\n      uint256 multiplier = 10**uint256(diff);\n      compoundPrice = compoundPrice * multiplier;\n    }\n    else if (aggregatorDecimals < compoundDecimals) {\n      uint8 diff = compoundDecimals - aggregatorDecimals;\n      uint256 multiplier = 10**uint256(diff);\n      aggregatorPrice = aggregatorPrice * multiplier;\n    }\n    adjustedAggregatorPrice = aggregatorPrice;\n    adjustedCompoundPrice = compoundPrice;\n  }\n\n  /**\n   * @notice Check whether the compound price deviates from the aggregator price\n   * beyond the given threshold\n   * @dev Prices must be adjusted to match decimals prior to calling this function\n   * @param aggregatorPrice uint256\n   * @param compPrice uint256\n   * @param deviationThresholdNumerator uint32\n   * @return beyondThreshold boolean. Returns true if deviation is beyond threshold.\n   */\n  function _deviatesBeyondThreshold(\n    uint256 aggregatorPrice,\n    uint256 compPrice,\n    uint32 deviationThresholdNumerator\n  )\n    private\n    pure\n    returns (\n      bool beyondThreshold\n    )\n  {\n    // Deviation amount threshold from the aggregator price\n    uint256 deviationAmountThreshold = aggregatorPrice.mul(deviationThresholdNumerator).div(BILLION);\n\n    // Calculate deviation\n    uint256 deviation;\n    if (aggregatorPrice > compPrice) {\n      deviation = aggregatorPrice.sub(compPrice);\n    }\n    else if (aggregatorPrice < compPrice) {\n      deviation = compPrice.sub(aggregatorPrice);\n    }\n    beyondThreshold = (deviation >= deviationAmountThreshold);\n  }\n}\n",
		"dev/ConfirmedOwner.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./ConfirmedOwnerWithProposal.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n\n  constructor(\n    address newOwner\n  )\n    ConfirmedOwnerWithProposal(\n      newOwner,\n      address(0)\n    )\n  {\n  }\n\n}\n",
		"dev/ConfirmedOwnerWithProposal.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"../interfaces/OwnableInterface.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\n\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(\n    address indexed from,\n    address indexed to\n  );\n  event OwnershipTransferred(\n    address indexed from,\n    address indexed to\n  );\n\n  constructor(\n    address owner,\n    address pendingOwner\n  ) {\n    require(owner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = owner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /**\n   * @notice Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(\n    address to\n  )\n    public\n    override\n    onlyOwner()\n  {\n    _transferOwnership(to);\n  }\n\n  /**\n   * @notice Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership()\n    external\n    override\n  {\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @notice Get the current owner\n   */\n  function owner()\n    public\n    view\n    override\n    returns (\n      address\n    )\n  {\n    return s_owner;\n  }\n\n  /**\n   * @notice validate, transfer ownership, and emit relevant events\n   */\n  function _transferOwnership(\n    address to\n  )\n    private\n  {\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /**\n   * @notice validate access\n   */\n  function _validateOwnership()\n    internal\n    view\n  {\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /**\n   * @notice Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n\n}\n",
		"interfaces/OwnableInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface OwnableInterface {\n  function owner()\n    external\n    returns (\n      address\n    );\n\n  function transferOwnership(\n    address recipient\n  )\n    external;\n\n  function acceptOwnership()\n    external;\n}\n",
		"vendor/SafeMathChainlink.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathChainlink {\n  /**\n    * @dev Returns the addition of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `+` operator.\n    *\n    * Requirements:\n    * - Addition cannot overflow.\n    */\n  function add(\n    uint256 a,\n    uint256 b\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the subtraction of two unsigned integers, reverting on\n    * overflow (when the result is negative).\n    *\n    * Counterpart to Solidity's `-` operator.\n    *\n    * Requirements:\n    * - Subtraction cannot overflow.\n    */\n  function sub(\n    uint256 a,\n    uint256 b\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    require(b <= a, \"SafeMath: subtraction overflow\");\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the multiplication of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `*` operator.\n    *\n    * Requirements:\n    * - Multiplication cannot overflow.\n    */\n  function mul(\n    uint256 a,\n    uint256 b\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the integer division of two unsigned integers. Reverts on\n    * division by zero. The result is rounded towards zero.\n    *\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n    * uses an invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function div(\n    uint256 a,\n    uint256 b\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, \"SafeMath: division by zero\");\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n    * Reverts when dividing by zero.\n    *\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\n    * invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function mod(\n    uint256 a,\n    uint256 b\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    require(b != 0, \"SafeMath: modulo by zero\");\n    return a % b;\n  }\n}\n",
		"interfaces/FlagsInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface FlagsInterface {\n  function getFlag(\n    address\n  )\n    external\n    view\n    returns (\n      bool\n    );\n\n  function getFlags(\n    address[] calldata\n  )\n    external\n    view\n    returns (\n      bool[] memory\n    );\n\n  function raiseFlag(\n    address\n  ) external;\n\n  function raiseFlags(\n    address[] calldata\n  ) external;\n\n  function lowerFlags(\n    address[] calldata\n  ) external;\n\n  function setRaisingAccessController(\n    address\n  ) external;\n}\n",
		"interfaces/AggregatorV3Interface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n",
		"interfaces/UniswapAnchoredView.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\n// Compound Finance's oracle interface\ninterface UniswapAnchoredView {\n  \n  function price(\n    string memory symbol\n  )\n    external \n    view \n    returns(\n      uint256\n    );\n}\n",
		"interfaces/UpkeepInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface UpkeepInterface {\n  function checkUpkeep(\n    bytes calldata data\n  )\n    external\n    returns (\n      bool,\n      bytes memory\n    );\n\n  function performUpkeep(\n    bytes calldata data\n  ) external;\n}\n"
	},
	"sourceTreeHashHex": "0x8f9b3855031358f7d2588f9cb32c605a7784546a68a6de9d5ca0a77913b5e9b6",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.7.6+commit.7338295f.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"metadata": {
				"bytecodeHash": "none"
			},
			"remappings": []
		}
	},
	"chains": {}
}