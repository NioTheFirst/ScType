{
	"schemaVersion": "2.0.0",
	"contractName": "OperatorFactory",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "linkAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "forwarder",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "AuthorizedForwarderCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "OperatorCreated",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "query",
						"type": "address"
					}
				],
				"name": "created",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deployNewForwarder",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					}
				],
				"name": "deployNewForwarderAndTransferOwnership",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deployNewOperator",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deployNewOperatorAndForwarder",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getChainlinkToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"params": {
						"linkAddress": "address"
					}
				}
			},
			"title": "Operator Factory",
			"version": 1
		},
		"evm": {
			"bytecode": {
				"object": "0x60a060405234801561001057600080fd5b506040516151773803806151778339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b03166150f7610080600039806101df5280610208528061030652806104b2528061067252806107c352506150f76000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063d42efd8311610050578063d42efd8314610101578063d689d09514610148578063f4adb6e1146101d557610072565b8063165d35e11461007757806332f01eae146100a85780633babafdb146100f9575b600080fd5b61007f6101dd565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100b0610201565b604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b61007f61049e565b6101346004803603602081101561011757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610642565b604080519115158252519081900360200190f35b61007f6004803603604081101561015e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561019657600080fd5b8201836020820111156101a857600080fd5b803590602001918460018302840111640100000000831117156101ca57600080fd5b50909250905061066d565b61007f6107be565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060007f000000000000000000000000000000000000000000000000000000000000000033604051610234906108b0565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604080519182900301906000f080158015610274573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff811660008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555192935033928392917fd3bb727b2e716a1f142bc9c63c66fe0ae4c5fbc89234f8aa77d0c864a7b63bab91a460408051600080825260208201909252905060007f000000000000000000000000000000000000000000000000000000000000000083600084604051610335906108bd565b808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156103c35781810151838201526020016103ab565b50505050905090810190601f1680156103f05780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f080158015610414573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff80821660008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055519394503393928716927f1c9576ab03e40fdf23673f82d904a0f029c8a6629272a4edad4be877e83af64b9190a4919350909150509091565b6040805160008082526020820190925260007f0000000000000000000000000000000000000000000000000000000000000000336000846040516104e1906108bd565b808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561056f578181015183820152602001610557565b50505050905090810190601f16801561059c5780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f0801580156105c0573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff811660008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555192935033928392917f1c9576ab03e40fdf23673f82d904a0f029c8a6629272a4edad4be877e83af64b91a491505090565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b6000807f0000000000000000000000000000000000000000000000000000000000000000338686866040516106a1906108bd565b73ffffffffffffffffffffffffffffffffffffffff808716825285811660208301528416604082015260806060820181815290820183905260a082018484808284376000838201819052604051601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909301819003995097509095505050505050f08015801561073a573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff811660008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555192935033928392917f1c9576ab03e40fdf23673f82d904a0f029c8a6629272a4edad4be877e83af64b91a4949350505050565b6000807f0000000000000000000000000000000000000000000000000000000000000000336040516107ef906108b0565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604080519182900301906000f08015801561082f573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff811660008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555192935033928392917fd3bb727b2e716a1f142bc9c63c66fe0ae4c5fbc89234f8aa77d0c864a7b63bab91a4905090565b61362e806108cb83390190565b6111f280613ef98339019056fe60a060405260016005553480156200001657600080fd5b506040516200362e3803806200362e833981810160405260408110156200003c57600080fd5b508051602090910151808060006001600160a01b038216620000a5576040805162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0384811691909117909155811615620000d857620000d881620000f2565b5050505060601b6001600160601b031916608052620001a3565b6001600160a01b03811633141562000151576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b03838116918217909255600254604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b60805160601c61344f620001df60003980610e6652806110925280611ab95280611e41528061204a52806126475280612c53525061344f6000f3fe6080604052600436106101805760003560e01c80636bd59ec0116100d6578063a4c0ed361161007f578063f3fef3a311610059578063f3fef3a314610b88578063fa00763a14610bce578063fc4a03ed14610c0e57610180565b8063a4c0ed36146109f6578063ee56997b14610acb578063f2fde38b14610b4857610180565b806379ba5097116100b057806379ba50971461092d5780638da5cb5b14610942578063902fc3701461095757610180565b80636bd59ec01461072a5780636de879d6146107ec5780636ee4d553146108cf57610180565b80633ec5bc1411610138578063501883011161011257806350188301146105725780635ffa6288146105875780636ae0bc761461065657610180565b80633ec5bc141461036857806340429946146103fb5780634ab0d190146104de57610180565b8063165d35e111610169578063165d35e11461029e5780632408afaa146102dc57806325cb5bc01461034157610180565b806301994b9914610185578063033f49f714610204575b600080fd5b34801561019157600080fd5b50610202600480360360208110156101a857600080fd5b8101906020810181356401000000008111156101c357600080fd5b8201836020820111156101d557600080fd5b803590602001918460208302840111640100000000831117156101f757600080fd5b509092509050610cdd565b005b34801561021057600080fd5b506102026004803603604081101561022757600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561025f57600080fd5b82018360208201111561027157600080fd5b8035906020019184600183028401116401000000008311171561029357600080fd5b509092509050610e5b565b3480156102aa57600080fd5b506102b3611090565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156102e857600080fd5b506102f16110b4565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561032d578181015183820152602001610315565b505050509050019250505060405180910390f35b34801561034d57600080fd5b50610356611123565b60408051918252519081900360200190f35b34801561037457600080fd5b506102026004803603604081101561038b57600080fd5b8101906020810181356401000000008111156103a657600080fd5b8201836020820111156103b857600080fd5b803590602001918460208302840111640100000000831117156103da57600080fd5b91935091503573ffffffffffffffffffffffffffffffffffffffff16611129565b34801561040757600080fd5b50610202600480360361010081101561041f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013592604082013592606083013516917fffffffff000000000000000000000000000000000000000000000000000000006080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561049f57600080fd5b8201836020820111156104b157600080fd5b803590602001918460018302840111640100000000831117156104d357600080fd5b5090925090506111f7565b3480156104ea57600080fd5b5061055e600480360360c081101561050157600080fd5b5080359060208101359073ffffffffffffffffffffffffffffffffffffffff604082013516907fffffffff000000000000000000000000000000000000000000000000000000006060820135169060808101359060a00135611213565b604080519115158252519081900360200190f35b34801561057e57600080fd5b506103566114b4565b34801561059357600080fd5b50610202600480360360408110156105aa57600080fd5b8101906020810181356401000000008111156105c557600080fd5b8201836020820111156105d757600080fd5b803590602001918460208302840111640100000000831117156105f957600080fd5b91939092909160208101903564010000000081111561061757600080fd5b82018360208201111561062957600080fd5b8035906020019184602083028401116401000000008311171561064b57600080fd5b5090925090506114c3565b34801561066257600080fd5b5061055e600480360360c081101561067957600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516917fffffffff00000000000000000000000000000000000000000000000000000000606082013516916080820135919081019060c0810160a08201356401000000008111156106eb57600080fd5b8201836020820111156106fd57600080fd5b8035906020019184600183028401116401000000008311171561071f57600080fd5b50909250905061154c565b6102026004803603604081101561074057600080fd5b81019060208101813564010000000081111561075b57600080fd5b82018360208201111561076d57600080fd5b8035906020019184602083028401116401000000008311171561078f57600080fd5b9193909290916020810190356401000000008111156107ad57600080fd5b8201836020820111156107bf57600080fd5b803590602001918460208302840111640100000000831117156107e157600080fd5b50909250905061187e565b3480156107f857600080fd5b50610202600480360361010081101561081057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013592604082013592606083013516917fffffffff000000000000000000000000000000000000000000000000000000006080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561089057600080fd5b8201836020820111156108a257600080fd5b803590602001918460018302840111640100000000831117156108c457600080fd5b509092509050611a15565b3480156108db57600080fd5b50610202600480360360808110156108f257600080fd5b508035906020810135907fffffffff000000000000000000000000000000000000000000000000000000006040820135169060600135611c97565b34801561093957600080fd5b50610202611ebb565b34801561094e57600080fd5b506102b3611fc1565b34801561096357600080fd5b5061055e6004803603606081101561097a57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516916020810135918101906060810160408201356401000000008111156109b757600080fd5b8201836020820111156109c957600080fd5b803590602001918460018302840111640100000000831117156109eb57600080fd5b509092509050611fdd565b348015610a0257600080fd5b5061020260048036036060811015610a1957600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691602081013591810190606081016040820135640100000000811115610a5657600080fd5b820183602082011115610a6857600080fd5b80359060200191846001830284011164010000000083111715610a8a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612143945050505050565b348015610ad757600080fd5b5061020260048036036020811015610aee57600080fd5b810190602081018135640100000000811115610b0957600080fd5b820183602082011115610b1b57600080fd5b80359060200191846020830284011164010000000083111715610b3d57600080fd5b509092509050612345565b348015610b5457600080fd5b5061020260048036036020811015610b6b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166125c8565b348015610b9457600080fd5b5061020260048036036040811015610bab57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356125dc565b348015610bda57600080fd5b5061055e60048036036020811015610bf157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612708565b348015610c1a57600080fd5b5061020260048036036040811015610c3157600080fd5b810190602081018135640100000000811115610c4c57600080fd5b820183602082011115610c5e57600080fd5b80359060200191846020830284011164010000000083111715610c8057600080fd5b919390929091602081019035640100000000811115610c9e57600080fd5b820183602082011115610cb057600080fd5b80359060200191846020830284011164010000000083111715610cd257600080fd5b509092509050612733565b610ce561296c565b610d5057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742073657420617574686f72697a65642073656e64657273000000604482015290519081900360640190fd5b60005b81811015610e5657828282818110610d6757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379ba50976040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610dcb57600080fd5b505af1158015610ddf573d6000803e3d6000fd5b50505050828282818110610def57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f615a0c1cb00a60d4acd77ec67acf2f17f223ef0932d591052fabc33643fe7e8260405160405180910390a2600101610d53565b505050565b610e636129a2565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f1f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f43616e6e6f742063616c6c20746f204c494e4b00000000000000000000000000604482015290519081900360640190fd5b610f3e8473ffffffffffffffffffffffffffffffffffffffff16612a2a565b610fa957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d75737420666f727761726420746f206120636f6e7472616374000000000000604482015290519081900360640190fd5b60008473ffffffffffffffffffffffffffffffffffffffff168484604051808383808284376040519201945060009350909150508083038183865af19150503d8060008114611014576040519150601f19603f3d011682016040523d82523d6000602084013e611019565b606091505b505090508061108957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f466f727761726465642063616c6c206661696c65640000000000000000000000604482015290519081900360640190fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6060600180548060200260200160405190810160405280929190818152602001828054801561111957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116110ee575b5050505050905090565b61012c81565b6111316129a2565b60005b828110156111f15783838281811061114857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156111cd57600080fd5b505af11580156111e1573d6000803e3d6000fd5b5050600190920191506111349050565b50505050565b611208898989898989898989611a15565b505050505050505050565b600061121d612a30565b600087815260046020526040902054879060081b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166112be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b6112cd88888888886001612aa4565b60405188907f9e9bc7616d42c2835d05ae617e508454e63b30b934be8aa932ebc125e0e58a6490600090a262061a805a101561136a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b60408051602481018a9052604480820186905282518083039091018152606490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000089161781529151815160009373ffffffffffffffffffffffffffffffffffffffff8b169392918291908083835b6020831061143d57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611400565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461149f576040519150601f19603f3d011682016040523d82523d6000602084013e6114a4565b606091505b50909a9950505050505050505050565b60006114be612c32565b905090565b6114cb61296c565b61153657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742073657420617574686f72697a65642073656e64657273000000604482015290519081900360640190fd5b6115408484610cdd565b6111f184848484612733565b6000611556612a30565b600088815260046020526040902054889060081b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166115f757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b8884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060208101518281146116a157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f466972737420776f7264206d7573742062652072657175657374496400000000604482015290519081900360640190fd5b6116b08c8c8c8c8c6002612aa4565b6040518c907f9e9bc7616d42c2835d05ae617e508454e63b30b934be8aa932ebc125e0e58a6490600090a262061a805a101561174d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b60008a73ffffffffffffffffffffffffffffffffffffffff168a898960405160200180847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004018383808284378083019250505093505050506040516020818303038152906040526040518082805190602001908083835b6020831061180357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016117c6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611865576040519150601f19603f3d011682016040523d82523d6000602084013e61186a565b606091505b50909e9d5050505050505050505050505050565b821580159061188c57508281145b6118f757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964206172726179206c656e677468287329000000000000000000604482015290519081900360640190fd5b3460005b848110156119a757600084848381811061191157fe5b90506020020135905061192d8184612d1090919063ffffffff16565b925086868381811061193b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561199d573d6000803e3d6000fd5b50506001016118fb565b50801561108957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f546f6f206d756368204554482073656e74000000000000000000000000000000604482015290519081900360640190fd5b611a1d611090565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ab657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d75737420757365204c494e4b20746f6b656e00000000000000000000000000604482015290519081900360640190fd5b857f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b7257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f43616e6e6f742063616c6c20746f204c494e4b00000000000000000000000000604482015290519081900360640190fd5b600080611b838c8c8b8b8b8b612d87565b91509150897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a73ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff168152602001867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092018290039c50909a5050505050505050505050a2505050505050505050505050565b6000611ca584338585612f70565b60008681526004602052604090205490915060081b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090811690821614611d4d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b42821115611dbc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52657175657374206973206e6f74206578706972656400000000000000000000604482015290519081900360640190fd5b6000858152600460205260408082208290555186917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a2604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101869052905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9160448083019260209291908290030181600087803b158015611e8957600080fd5b505af1158015611e9d573d6000803e3d6000fd5b505050506040513d6020811015611eb357600080fd5b505161108957fe5b60035473ffffffffffffffffffffffffffffffffffffffff163314611f4157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000008082163390811790935560038054909116905560405173ffffffffffffffffffffffffffffffffffffffff909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b60025473ffffffffffffffffffffffffffffffffffffffff1690565b6000611fe76129a2565b8380611ff1612c32565b1015612048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061340e6035913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea0878787876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050602060405180830381600087803b15801561210d57600080fd5b505af1158015612121573d6000803e3d6000fd5b505050506040513d602081101561213757600080fd5b50519695505050505050565b61214b611090565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146121e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d75737420757365204c494e4b20746f6b656e00000000000000000000000000604482015290519081900360640190fd5b602081015181906121f58183612ff5565b84602484015283604484015260003073ffffffffffffffffffffffffffffffffffffffff16846040518082805190602001908083835b6020831061226857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161222b565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146122c8576040519150601f19603f3d011682016040523d82523d6000602084013e6122cd565b606091505b505090508061233d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b505050505050565b61234d61296c565b6123b857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742073657420617574686f72697a65642073656e64657273000000604482015290519081900360640190fd5b8061240e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806133e86026913960400191505060405180910390fd5b60015460005b818110156124955760008060006001848154811061242e57fe5b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600101612414565b5060005b828110156125165760016000808686858181106124b257fe5b6020908102929092013573ffffffffffffffffffffffffffffffffffffffff1683525081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600101612499565b5061252360018484613353565b507ff263cfb3e4298332e776194610cf9fdc09ccb3ada8b9aa39764d882e11fbf0a083833360405180806020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281038252858582818152602001925060200280828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201829003965090945050505050a1505050565b6125d06129a2565b6125d981613166565b50565b6125e46129a2565b80806125ee612c32565b1015612645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061340e6035913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156126d657600080fd5b505af11580156126ea573d6000803e3d6000fd5b505050506040513d602081101561270057600080fd5b5051610e5657fe5b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b61273b61296c565b6127a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742073657420617574686f72697a65642073656e64657273000000604482015290519081900360640190fd5b7f1bb185903e2cb2f1b303523128b60e314dea81df4f8d9b7351cadd344f6e772784848484336040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381038352888882818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352868152602090810191508790870280828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201829003995090975050505050505050a160005b83811015611089578484828181106128aa57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee56997b84846040518363ffffffff1660e01b815260040180806020018281038252848482818152602001925060200280828437600081840152601f19601f8201169050808301925050509350505050600060405180830381600087803b15801561294857600080fd5b505af115801561295c573d6000803e3d6000fd5b5050600190920191506128969050565b600061297733612708565b806114be575033612986611fc1565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b60025473ffffffffffffffffffffffffffffffffffffffff163314612a2857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b565b3b151590565b612a3933612708565b612a2857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f7420617574686f72697a65642073656e6465720000000000000000000000604482015290519081900360640190fd5b6000612ab286868686612f70565b60008881526004602052604090205490915060081b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090811690821614612b5a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b612b6382613262565b60008881526004602052604090205460ff9182167f01000000000000000000000000000000000000000000000000000000000000009091049091161115612c0b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f446174612076657273696f6e73206d757374206d617463680000000000000000604482015290519081900360640190fd5b600554612c189087612d10565b600555505050600093845250506004602052506040812055565b600080612c4b6001600554612d1090919063ffffffff16565b9050612d0a817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612cd857600080fd5b505afa158015612cec573d6000803e3d6000fd5b505050506040513d6020811015612d0257600080fd5b505190612d10565b91505090565b600082821115612d8157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60408051606088901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660208083019190915260348083018690528351808403909101815260549092018352815191810191909120600081815260049092529181205460081b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001615612e7c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4d75737420757365206120756e69717565204944000000000000000000000000604482015290519081900360640190fd5b612e884261012c6132d8565b90506000612e9888888885612f70565b905060405180604001604052808260ff19168152602001612eb886613262565b60ff90811690915260008581526004602090815260409091208351815494909201519092167f01000000000000000000000000000000000000000000000000000000000000000260089190911c7fff00000000000000000000000000000000000000000000000000000000000000909316929092177effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16919091179055600554612f6190896132d8565b60055550965096945050505050565b6040805160208082019690965260609490941b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016848201527fffffffff000000000000000000000000000000000000000000000000000000009290921660548401526058808401919091528151808403909101815260789092019052805191012090565b80516044111561306657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c69642072657175657374206c656e67746800000000000000000000604482015290519081900360640190fd5b7fffffffff0000000000000000000000000000000000000000000000000000000082167f6de879d60000000000000000000000000000000000000000000000000000000014806130f757507fffffffff0000000000000000000000000000000000000000000000000000000082167f4042994600000000000000000000000000000000000000000000000000000000145b61316257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b5050565b73ffffffffffffffffffffffffffffffffffffffff81163314156131eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff838116918217909255600254604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b600061010082106132d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6e756d62657220746f6f2062696720746f206361737400000000000000000000604482015290519081900360640190fd5b5090565b60008282018381101561334c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b8280548282559060005260206000209081019282156133cb579160200282015b828111156133cb5781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff843516178255602090920191600190910190613373565b506132d49291505b808211156132d457600081556001016133d356fe4d7573742068617665206174206c65617374203120617574686f72697a65642073656e646572416d6f756e74207265717565737465642069732067726561746572207468616e20776974686472617761626c652062616c616e6365a164736f6c6343000706000a60a06040523480156200001157600080fd5b50604051620011f2380380620011f2833981810160405260808110156200003757600080fd5b8151602083015160408085015160608601805192519496939591949391820192846401000000008211156200006b57600080fd5b9083019060208201858111156200008157600080fd5b82516401000000008111828201881017156200009c57600080fd5b82525081516020918201929091019080838360005b83811015620000cb578181015183820152602001620000b1565b50505050905090810190601f168015620000f95780820380516001836020036101000a031916815260200191505b50604052508491508390506001600160a01b03821662000160576040805162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156200019357620001938162000272565b50506001600160601b0319606085901b166080526001600160a01b038216156200026857816001600160a01b0316836001600160a01b03167f4e1e878dc28d5f040db5969163ff1acd75c44c3f655da2dde9c70bbd8e56dc7e836040518080602001828103825283818151815260200191508051906020019080838360005b838110156200022c57818101518382015260200162000212565b50505050905090810190601f1680156200025a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a35b5050505062000322565b6001600160a01b038116331415620002d1576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60805160601c610ead620003456000398061043f52806105ae5250610ead6000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806379ba509711610076578063ee56997b1161005b578063ee56997b1461033b578063f2fde38b146103ab578063fa00763a146103de576100be565b806379ba50971461032b5780638da5cb5b14610333576100be565b80632408afaa116100a75780632408afaa146101835780634d3e2323146101db5780636fadcf721461029e576100be565b8063033f49f7146100c3578063165d35e114610152575b600080fd5b610150600480360360408110156100d957600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561011157600080fd5b82018360208201111561012357600080fd5b8035906020019184600183028401116401000000008311171561014557600080fd5b509092509050610425565b005b61015a61043d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61018b610461565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101c75781810151838201526020016101af565b505050509050019250505060405180910390f35b610150600480360360408110156101f157600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561022957600080fd5b82018360208201111561023b57600080fd5b8035906020019184600183028401116401000000008311171561025d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506104d0945050505050565b610150600480360360408110156102b457600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156102ec57600080fd5b8201836020820111156102fe57600080fd5b8035906020019184600183028401116401000000008311171561032057600080fd5b5090925090506105a4565b610150610667565b61015a610769565b6101506004803603602081101561035157600080fd5b81019060208101813564010000000081111561036c57600080fd5b82018360208201111561037e57600080fd5b803590602001918460208302840111640100000000831117156103a057600080fd5b509092509050610785565b610150600480360360208110156103c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a0a565b610411600480360360208110156103f457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a1e565b604080519115158252519081900360200190f35b61042d610a49565b610438838383610ad1565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060038054806020026020016040519081016040528092919081815260200182805480156104c657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161049b575b5050505050905090565b6104d982610a0a565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4e1e878dc28d5f040db5969163ff1acd75c44c3f655da2dde9c70bbd8e56dc7e836040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056657818101518382015260200161054e565b50505050905090810190601f1680156105935780820380516001836020036101000a031916815260200191505b509250505060405180910390a35050565b6105ac610c41565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561042d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742023666f727761726420746f204c696e6b20746f6b656e000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff1633146106ed57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b61078d610cb5565b6107f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742073657420617574686f72697a65642073656e64657273000000604482015290519081900360640190fd5b8061084e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610e7b6026913960400191505060405180910390fd5b60035460005b818110156108d6576000600260006003848154811061086f57fe5b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600101610854565b5060005b82811015610958576001600260008686858181106108f457fe5b6020908102929092013573ffffffffffffffffffffffffffffffffffffffff1683525081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790556001016108da565b5061096560038484610ddd565b507ff263cfb3e4298332e776194610cf9fdc09ccb3ada8b9aa39764d882e11fbf0a083833360405180806020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281038252858582818152602001925060200280828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201829003965090945050505050a1505050565b610a12610a49565b610a1b81610cdc565b50565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b60005473ffffffffffffffffffffffffffffffffffffffff163314610acf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b565b610af08373ffffffffffffffffffffffffffffffffffffffff16610dd7565b610b5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d75737420666f727761726420746f206120636f6e7472616374000000000000604482015290519081900360640190fd5b60008373ffffffffffffffffffffffffffffffffffffffff168383604051808383808284376040519201945060009350909150508083038183865af19150503d8060008114610bc6576040519150601f19603f3d011682016040523d82523d6000602084013e610bcb565b606091505b5050905080610c3b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f466f727761726465642063616c6c206661696c65640000000000000000000000604482015290519081900360640190fd5b50505050565b610c4a33610a1e565b610acf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f7420617574686f72697a65642073656e6465720000000000000000000000604482015290519081900360640190fd5b600033610cc0610769565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b73ffffffffffffffffffffffffffffffffffffffff8116331415610d6157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b3b151590565b828054828255906000526020600020908101928215610e55579160200282015b82811115610e555781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff843516178255602090920191600190910190610dfd565b50610e61929150610e65565b5090565b5b80821115610e615760008155600101610e6656fe4d7573742068617665206174206c65617374203120617574686f72697a65642073656e646572a164736f6c6343000706000aa164736f6c6343000706000a",
				"sourceMap": "211:3081:10:-:0;;;619:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;619:83:10;666:31;;;;-1:-1:-1;;;;;;666:31:10;;;-1:-1:-1;;;;;211:3081:10;;;;;;;;"
			},
			"deployedBytecode": {
				"object": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063d42efd8311610050578063d42efd8314610101578063d689d09514610148578063f4adb6e1146101d557610072565b8063165d35e11461007757806332f01eae146100a85780633babafdb146100f9575b600080fd5b61007f6101dd565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100b0610201565b604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b61007f61049e565b6101346004803603602081101561011757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610642565b604080519115158252519081900360200190f35b61007f6004803603604081101561015e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561019657600080fd5b8201836020820111156101a857600080fd5b803590602001918460018302840111640100000000831117156101ca57600080fd5b50909250905061066d565b61007f6107be565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060007f000000000000000000000000000000000000000000000000000000000000000033604051610234906108b0565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604080519182900301906000f080158015610274573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff811660008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555192935033928392917fd3bb727b2e716a1f142bc9c63c66fe0ae4c5fbc89234f8aa77d0c864a7b63bab91a460408051600080825260208201909252905060007f000000000000000000000000000000000000000000000000000000000000000083600084604051610335906108bd565b808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156103c35781810151838201526020016103ab565b50505050905090810190601f1680156103f05780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f080158015610414573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff80821660008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055519394503393928716927f1c9576ab03e40fdf23673f82d904a0f029c8a6629272a4edad4be877e83af64b9190a4919350909150509091565b6040805160008082526020820190925260007f0000000000000000000000000000000000000000000000000000000000000000336000846040516104e1906108bd565b808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561056f578181015183820152602001610557565b50505050905090810190601f16801561059c5780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f0801580156105c0573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff811660008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555192935033928392917f1c9576ab03e40fdf23673f82d904a0f029c8a6629272a4edad4be877e83af64b91a491505090565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b6000807f0000000000000000000000000000000000000000000000000000000000000000338686866040516106a1906108bd565b73ffffffffffffffffffffffffffffffffffffffff808716825285811660208301528416604082015260806060820181815290820183905260a082018484808284376000838201819052604051601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909301819003995097509095505050505050f08015801561073a573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff811660008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555192935033928392917f1c9576ab03e40fdf23673f82d904a0f029c8a6629272a4edad4be877e83af64b91a4949350505050565b6000807f0000000000000000000000000000000000000000000000000000000000000000336040516107ef906108b0565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604080519182900301906000f08015801561082f573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff811660008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555192935033928392917fd3bb727b2e716a1f142bc9c63c66fe0ae4c5fbc89234f8aa77d0c864a7b63bab91a4905090565b61362e806108cb83390190565b6111f280613ef98339019056fe60a060405260016005553480156200001657600080fd5b506040516200362e3803806200362e833981810160405260408110156200003c57600080fd5b508051602090910151808060006001600160a01b038216620000a5576040805162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0384811691909117909155811615620000d857620000d881620000f2565b5050505060601b6001600160601b031916608052620001a3565b6001600160a01b03811633141562000151576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b03838116918217909255600254604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b60805160601c61344f620001df60003980610e6652806110925280611ab95280611e41528061204a52806126475280612c53525061344f6000f3fe6080604052600436106101805760003560e01c80636bd59ec0116100d6578063a4c0ed361161007f578063f3fef3a311610059578063f3fef3a314610b88578063fa00763a14610bce578063fc4a03ed14610c0e57610180565b8063a4c0ed36146109f6578063ee56997b14610acb578063f2fde38b14610b4857610180565b806379ba5097116100b057806379ba50971461092d5780638da5cb5b14610942578063902fc3701461095757610180565b80636bd59ec01461072a5780636de879d6146107ec5780636ee4d553146108cf57610180565b80633ec5bc1411610138578063501883011161011257806350188301146105725780635ffa6288146105875780636ae0bc761461065657610180565b80633ec5bc141461036857806340429946146103fb5780634ab0d190146104de57610180565b8063165d35e111610169578063165d35e11461029e5780632408afaa146102dc57806325cb5bc01461034157610180565b806301994b9914610185578063033f49f714610204575b600080fd5b34801561019157600080fd5b50610202600480360360208110156101a857600080fd5b8101906020810181356401000000008111156101c357600080fd5b8201836020820111156101d557600080fd5b803590602001918460208302840111640100000000831117156101f757600080fd5b509092509050610cdd565b005b34801561021057600080fd5b506102026004803603604081101561022757600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561025f57600080fd5b82018360208201111561027157600080fd5b8035906020019184600183028401116401000000008311171561029357600080fd5b509092509050610e5b565b3480156102aa57600080fd5b506102b3611090565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156102e857600080fd5b506102f16110b4565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561032d578181015183820152602001610315565b505050509050019250505060405180910390f35b34801561034d57600080fd5b50610356611123565b60408051918252519081900360200190f35b34801561037457600080fd5b506102026004803603604081101561038b57600080fd5b8101906020810181356401000000008111156103a657600080fd5b8201836020820111156103b857600080fd5b803590602001918460208302840111640100000000831117156103da57600080fd5b91935091503573ffffffffffffffffffffffffffffffffffffffff16611129565b34801561040757600080fd5b50610202600480360361010081101561041f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013592604082013592606083013516917fffffffff000000000000000000000000000000000000000000000000000000006080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561049f57600080fd5b8201836020820111156104b157600080fd5b803590602001918460018302840111640100000000831117156104d357600080fd5b5090925090506111f7565b3480156104ea57600080fd5b5061055e600480360360c081101561050157600080fd5b5080359060208101359073ffffffffffffffffffffffffffffffffffffffff604082013516907fffffffff000000000000000000000000000000000000000000000000000000006060820135169060808101359060a00135611213565b604080519115158252519081900360200190f35b34801561057e57600080fd5b506103566114b4565b34801561059357600080fd5b50610202600480360360408110156105aa57600080fd5b8101906020810181356401000000008111156105c557600080fd5b8201836020820111156105d757600080fd5b803590602001918460208302840111640100000000831117156105f957600080fd5b91939092909160208101903564010000000081111561061757600080fd5b82018360208201111561062957600080fd5b8035906020019184602083028401116401000000008311171561064b57600080fd5b5090925090506114c3565b34801561066257600080fd5b5061055e600480360360c081101561067957600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516917fffffffff00000000000000000000000000000000000000000000000000000000606082013516916080820135919081019060c0810160a08201356401000000008111156106eb57600080fd5b8201836020820111156106fd57600080fd5b8035906020019184600183028401116401000000008311171561071f57600080fd5b50909250905061154c565b6102026004803603604081101561074057600080fd5b81019060208101813564010000000081111561075b57600080fd5b82018360208201111561076d57600080fd5b8035906020019184602083028401116401000000008311171561078f57600080fd5b9193909290916020810190356401000000008111156107ad57600080fd5b8201836020820111156107bf57600080fd5b803590602001918460208302840111640100000000831117156107e157600080fd5b50909250905061187e565b3480156107f857600080fd5b50610202600480360361010081101561081057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013592604082013592606083013516917fffffffff000000000000000000000000000000000000000000000000000000006080820135169160a08201359160c081013591810190610100810160e082013564010000000081111561089057600080fd5b8201836020820111156108a257600080fd5b803590602001918460018302840111640100000000831117156108c457600080fd5b509092509050611a15565b3480156108db57600080fd5b50610202600480360360808110156108f257600080fd5b508035906020810135907fffffffff000000000000000000000000000000000000000000000000000000006040820135169060600135611c97565b34801561093957600080fd5b50610202611ebb565b34801561094e57600080fd5b506102b3611fc1565b34801561096357600080fd5b5061055e6004803603606081101561097a57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516916020810135918101906060810160408201356401000000008111156109b757600080fd5b8201836020820111156109c957600080fd5b803590602001918460018302840111640100000000831117156109eb57600080fd5b509092509050611fdd565b348015610a0257600080fd5b5061020260048036036060811015610a1957600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691602081013591810190606081016040820135640100000000811115610a5657600080fd5b820183602082011115610a6857600080fd5b80359060200191846001830284011164010000000083111715610a8a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612143945050505050565b348015610ad757600080fd5b5061020260048036036020811015610aee57600080fd5b810190602081018135640100000000811115610b0957600080fd5b820183602082011115610b1b57600080fd5b80359060200191846020830284011164010000000083111715610b3d57600080fd5b509092509050612345565b348015610b5457600080fd5b5061020260048036036020811015610b6b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166125c8565b348015610b9457600080fd5b5061020260048036036040811015610bab57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356125dc565b348015610bda57600080fd5b5061055e60048036036020811015610bf157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612708565b348015610c1a57600080fd5b5061020260048036036040811015610c3157600080fd5b810190602081018135640100000000811115610c4c57600080fd5b820183602082011115610c5e57600080fd5b80359060200191846020830284011164010000000083111715610c8057600080fd5b919390929091602081019035640100000000811115610c9e57600080fd5b820183602082011115610cb057600080fd5b80359060200191846020830284011164010000000083111715610cd257600080fd5b509092509050612733565b610ce561296c565b610d5057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742073657420617574686f72697a65642073656e64657273000000604482015290519081900360640190fd5b60005b81811015610e5657828282818110610d6757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379ba50976040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610dcb57600080fd5b505af1158015610ddf573d6000803e3d6000fd5b50505050828282818110610def57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f615a0c1cb00a60d4acd77ec67acf2f17f223ef0932d591052fabc33643fe7e8260405160405180910390a2600101610d53565b505050565b610e636129a2565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f1f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f43616e6e6f742063616c6c20746f204c494e4b00000000000000000000000000604482015290519081900360640190fd5b610f3e8473ffffffffffffffffffffffffffffffffffffffff16612a2a565b610fa957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d75737420666f727761726420746f206120636f6e7472616374000000000000604482015290519081900360640190fd5b60008473ffffffffffffffffffffffffffffffffffffffff168484604051808383808284376040519201945060009350909150508083038183865af19150503d8060008114611014576040519150601f19603f3d011682016040523d82523d6000602084013e611019565b606091505b505090508061108957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f466f727761726465642063616c6c206661696c65640000000000000000000000604482015290519081900360640190fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6060600180548060200260200160405190810160405280929190818152602001828054801561111957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116110ee575b5050505050905090565b61012c81565b6111316129a2565b60005b828110156111f15783838281811061114857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156111cd57600080fd5b505af11580156111e1573d6000803e3d6000fd5b5050600190920191506111349050565b50505050565b611208898989898989898989611a15565b505050505050505050565b600061121d612a30565b600087815260046020526040902054879060081b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166112be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b6112cd88888888886001612aa4565b60405188907f9e9bc7616d42c2835d05ae617e508454e63b30b934be8aa932ebc125e0e58a6490600090a262061a805a101561136a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b60408051602481018a9052604480820186905282518083039091018152606490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000089161781529151815160009373ffffffffffffffffffffffffffffffffffffffff8b169392918291908083835b6020831061143d57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611400565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461149f576040519150601f19603f3d011682016040523d82523d6000602084013e6114a4565b606091505b50909a9950505050505050505050565b60006114be612c32565b905090565b6114cb61296c565b61153657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742073657420617574686f72697a65642073656e64657273000000604482015290519081900360640190fd5b6115408484610cdd565b6111f184848484612733565b6000611556612a30565b600088815260046020526040902054889060081b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166115f757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4d757374206861766520612076616c6964207265717565737449640000000000604482015290519081900360640190fd5b8884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060208101518281146116a157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f466972737420776f7264206d7573742062652072657175657374496400000000604482015290519081900360640190fd5b6116b08c8c8c8c8c6002612aa4565b6040518c907f9e9bc7616d42c2835d05ae617e508454e63b30b934be8aa932ebc125e0e58a6490600090a262061a805a101561174d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d7573742070726f7669646520636f6e73756d657220656e6f75676820676173604482015290519081900360640190fd5b60008a73ffffffffffffffffffffffffffffffffffffffff168a898960405160200180847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004018383808284378083019250505093505050506040516020818303038152906040526040518082805190602001908083835b6020831061180357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016117c6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611865576040519150601f19603f3d011682016040523d82523d6000602084013e61186a565b606091505b50909e9d5050505050505050505050505050565b821580159061188c57508281145b6118f757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964206172726179206c656e677468287329000000000000000000604482015290519081900360640190fd5b3460005b848110156119a757600084848381811061191157fe5b90506020020135905061192d8184612d1090919063ffffffff16565b925086868381811061193b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561199d573d6000803e3d6000fd5b50506001016118fb565b50801561108957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f546f6f206d756368204554482073656e74000000000000000000000000000000604482015290519081900360640190fd5b611a1d611090565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ab657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d75737420757365204c494e4b20746f6b656e00000000000000000000000000604482015290519081900360640190fd5b857f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b7257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f43616e6e6f742063616c6c20746f204c494e4b00000000000000000000000000604482015290519081900360640190fd5b600080611b838c8c8b8b8b8b612d87565b91509150897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a73ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff168152602001867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092018290039c50909a5050505050505050505050a2505050505050505050505050565b6000611ca584338585612f70565b60008681526004602052604090205490915060081b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090811690821614611d4d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b42821115611dbc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f52657175657374206973206e6f74206578706972656400000000000000000000604482015290519081900360640190fd5b6000858152600460205260408082208290555186917fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9391a2604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101869052905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9160448083019260209291908290030181600087803b158015611e8957600080fd5b505af1158015611e9d573d6000803e3d6000fd5b505050506040513d6020811015611eb357600080fd5b505161108957fe5b60035473ffffffffffffffffffffffffffffffffffffffff163314611f4157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000008082163390811790935560038054909116905560405173ffffffffffffffffffffffffffffffffffffffff909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b60025473ffffffffffffffffffffffffffffffffffffffff1690565b6000611fe76129a2565b8380611ff1612c32565b1015612048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061340e6035913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea0878787876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050602060405180830381600087803b15801561210d57600080fd5b505af1158015612121573d6000803e3d6000fd5b505050506040513d602081101561213757600080fd5b50519695505050505050565b61214b611090565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146121e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d75737420757365204c494e4b20746f6b656e00000000000000000000000000604482015290519081900360640190fd5b602081015181906121f58183612ff5565b84602484015283604484015260003073ffffffffffffffffffffffffffffffffffffffff16846040518082805190602001908083835b6020831061226857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161222b565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146122c8576040519150601f19603f3d011682016040523d82523d6000602084013e6122cd565b606091505b505090508061233d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f556e61626c6520746f2063726561746520726571756573740000000000000000604482015290519081900360640190fd5b505050505050565b61234d61296c565b6123b857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742073657420617574686f72697a65642073656e64657273000000604482015290519081900360640190fd5b8061240e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806133e86026913960400191505060405180910390fd5b60015460005b818110156124955760008060006001848154811061242e57fe5b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600101612414565b5060005b828110156125165760016000808686858181106124b257fe5b6020908102929092013573ffffffffffffffffffffffffffffffffffffffff1683525081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600101612499565b5061252360018484613353565b507ff263cfb3e4298332e776194610cf9fdc09ccb3ada8b9aa39764d882e11fbf0a083833360405180806020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281038252858582818152602001925060200280828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201829003965090945050505050a1505050565b6125d06129a2565b6125d981613166565b50565b6125e46129a2565b80806125ee612c32565b1015612645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061340e6035913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156126d657600080fd5b505af11580156126ea573d6000803e3d6000fd5b505050506040513d602081101561270057600080fd5b5051610e5657fe5b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b61273b61296c565b6127a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742073657420617574686f72697a65642073656e64657273000000604482015290519081900360640190fd5b7f1bb185903e2cb2f1b303523128b60e314dea81df4f8d9b7351cadd344f6e772784848484336040518080602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381038352888882818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352868152602090810191508790870280828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201829003995090975050505050505050a160005b83811015611089578484828181106128aa57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee56997b84846040518363ffffffff1660e01b815260040180806020018281038252848482818152602001925060200280828437600081840152601f19601f8201169050808301925050509350505050600060405180830381600087803b15801561294857600080fd5b505af115801561295c573d6000803e3d6000fd5b5050600190920191506128969050565b600061297733612708565b806114be575033612986611fc1565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b60025473ffffffffffffffffffffffffffffffffffffffff163314612a2857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b565b3b151590565b612a3933612708565b612a2857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f7420617574686f72697a65642073656e6465720000000000000000000000604482015290519081900360640190fd5b6000612ab286868686612f70565b60008881526004602052604090205490915060081b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090811690821614612b5a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f506172616d7320646f206e6f74206d6174636820726571756573742049440000604482015290519081900360640190fd5b612b6382613262565b60008881526004602052604090205460ff9182167f01000000000000000000000000000000000000000000000000000000000000009091049091161115612c0b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f446174612076657273696f6e73206d757374206d617463680000000000000000604482015290519081900360640190fd5b600554612c189087612d10565b600555505050600093845250506004602052506040812055565b600080612c4b6001600554612d1090919063ffffffff16565b9050612d0a817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612cd857600080fd5b505afa158015612cec573d6000803e3d6000fd5b505050506040513d6020811015612d0257600080fd5b505190612d10565b91505090565b600082821115612d8157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60408051606088901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660208083019190915260348083018690528351808403909101815260549092018352815191810191909120600081815260049092529181205460081b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001615612e7c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4d75737420757365206120756e69717565204944000000000000000000000000604482015290519081900360640190fd5b612e884261012c6132d8565b90506000612e9888888885612f70565b905060405180604001604052808260ff19168152602001612eb886613262565b60ff90811690915260008581526004602090815260409091208351815494909201519092167f01000000000000000000000000000000000000000000000000000000000000000260089190911c7fff00000000000000000000000000000000000000000000000000000000000000909316929092177effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16919091179055600554612f6190896132d8565b60055550965096945050505050565b6040805160208082019690965260609490941b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016848201527fffffffff000000000000000000000000000000000000000000000000000000009290921660548401526058808401919091528151808403909101815260789092019052805191012090565b80516044111561306657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c69642072657175657374206c656e67746800000000000000000000604482015290519081900360640190fd5b7fffffffff0000000000000000000000000000000000000000000000000000000082167f6de879d60000000000000000000000000000000000000000000000000000000014806130f757507fffffffff0000000000000000000000000000000000000000000000000000000082167f4042994600000000000000000000000000000000000000000000000000000000145b61316257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b5050565b73ffffffffffffffffffffffffffffffffffffffff81163314156131eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff838116918217909255600254604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b600061010082106132d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6e756d62657220746f6f2062696720746f206361737400000000000000000000604482015290519081900360640190fd5b5090565b60008282018381101561334c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b8280548282559060005260206000209081019282156133cb579160200282015b828111156133cb5781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff843516178255602090920191600190910190613373565b506132d49291505b808211156132d457600081556001016133d356fe4d7573742068617665206174206c65617374203120617574686f72697a65642073656e646572416d6f756e74207265717565737465642069732067726561746572207468616e20776974686472617761626c652062616c616e6365a164736f6c6343000706000a60a06040523480156200001157600080fd5b50604051620011f2380380620011f2833981810160405260808110156200003757600080fd5b8151602083015160408085015160608601805192519496939591949391820192846401000000008211156200006b57600080fd5b9083019060208201858111156200008157600080fd5b82516401000000008111828201881017156200009c57600080fd5b82525081516020918201929091019080838360005b83811015620000cb578181015183820152602001620000b1565b50505050905090810190601f168015620000f95780820380516001836020036101000a031916815260200191505b50604052508491508390506001600160a01b03821662000160576040805162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156200019357620001938162000272565b50506001600160601b0319606085901b166080526001600160a01b038216156200026857816001600160a01b0316836001600160a01b03167f4e1e878dc28d5f040db5969163ff1acd75c44c3f655da2dde9c70bbd8e56dc7e836040518080602001828103825283818151815260200191508051906020019080838360005b838110156200022c57818101518382015260200162000212565b50505050905090810190601f1680156200025a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a35b5050505062000322565b6001600160a01b038116331415620002d1576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60805160601c610ead620003456000398061043f52806105ae5250610ead6000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806379ba509711610076578063ee56997b1161005b578063ee56997b1461033b578063f2fde38b146103ab578063fa00763a146103de576100be565b806379ba50971461032b5780638da5cb5b14610333576100be565b80632408afaa116100a75780632408afaa146101835780634d3e2323146101db5780636fadcf721461029e576100be565b8063033f49f7146100c3578063165d35e114610152575b600080fd5b610150600480360360408110156100d957600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561011157600080fd5b82018360208201111561012357600080fd5b8035906020019184600183028401116401000000008311171561014557600080fd5b509092509050610425565b005b61015a61043d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61018b610461565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101c75781810151838201526020016101af565b505050509050019250505060405180910390f35b610150600480360360408110156101f157600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561022957600080fd5b82018360208201111561023b57600080fd5b8035906020019184600183028401116401000000008311171561025d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506104d0945050505050565b610150600480360360408110156102b457600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156102ec57600080fd5b8201836020820111156102fe57600080fd5b8035906020019184600183028401116401000000008311171561032057600080fd5b5090925090506105a4565b610150610667565b61015a610769565b6101506004803603602081101561035157600080fd5b81019060208101813564010000000081111561036c57600080fd5b82018360208201111561037e57600080fd5b803590602001918460208302840111640100000000831117156103a057600080fd5b509092509050610785565b610150600480360360208110156103c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a0a565b610411600480360360208110156103f457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a1e565b604080519115158252519081900360200190f35b61042d610a49565b610438838383610ad1565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060038054806020026020016040519081016040528092919081815260200182805480156104c657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161049b575b5050505050905090565b6104d982610a0a565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4e1e878dc28d5f040db5969163ff1acd75c44c3f655da2dde9c70bbd8e56dc7e836040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056657818101518382015260200161054e565b50505050905090810190601f1680156105935780820380516001836020036101000a031916815260200191505b509250505060405180910390a35050565b6105ac610c41565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561042d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742023666f727761726420746f204c696e6b20746f6b656e000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff1633146106ed57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b61078d610cb5565b6107f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43616e6e6f742073657420617574686f72697a65642073656e64657273000000604482015290519081900360640190fd5b8061084e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610e7b6026913960400191505060405180910390fd5b60035460005b818110156108d6576000600260006003848154811061086f57fe5b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600101610854565b5060005b82811015610958576001600260008686858181106108f457fe5b6020908102929092013573ffffffffffffffffffffffffffffffffffffffff1683525081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790556001016108da565b5061096560038484610ddd565b507ff263cfb3e4298332e776194610cf9fdc09ccb3ada8b9aa39764d882e11fbf0a083833360405180806020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281038252858582818152602001925060200280828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201829003965090945050505050a1505050565b610a12610a49565b610a1b81610cdc565b50565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b60005473ffffffffffffffffffffffffffffffffffffffff163314610acf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b565b610af08373ffffffffffffffffffffffffffffffffffffffff16610dd7565b610b5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d75737420666f727761726420746f206120636f6e7472616374000000000000604482015290519081900360640190fd5b60008373ffffffffffffffffffffffffffffffffffffffff168383604051808383808284376040519201945060009350909150508083038183865af19150503d8060008114610bc6576040519150601f19603f3d011682016040523d82523d6000602084013e610bcb565b606091505b5050905080610c3b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f466f727761726465642063616c6c206661696c65640000000000000000000000604482015290519081900360640190fd5b50505050565b610c4a33610a1e565b610acf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f7420617574686f72697a65642073656e6465720000000000000000000000604482015290519081900360640190fd5b600033610cc0610769565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b73ffffffffffffffffffffffffffffffffffffffff8116331415610d6157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b3b151590565b828054828255906000526020600020908101928215610e55579160200282015b82811115610e555781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff843516178255602090920191600190910190610dfd565b50610e61929150610e65565b5090565b5b80821115610e615760008155600101610e6656fe4d7573742068617665206174206c65617374203120617574686f72697a65642073656e646572a164736f6c6343000706000aa164736f6c6343000706000a",
				"sourceMap": "211:3081:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;241:42;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1283:722;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2096:440;;;:::i;3172:117::-;;;;;;;;;;;;;;;;-1:-1:-1;3172:117:10;;;;:::i;:::-;;;;;;;;;;;;;;;;;;2627:465;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2627:465:10;;-1:-1:-1;2627:465:10;-1:-1:-1;2627:465:10;:::i;792:336::-;;;:::i;241:42::-;;;:::o;1283:722::-;1357:7;1372;1394:17;1434;1459:10;1414:61;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1414:61:10;;;;;;;;;;;;;;;-1:-1:-1;1481:28:10;;;:9;:28;;;;;;;;;;;:35;;;;1512:4;1481:35;;;1527:82;1394:81;;-1:-1:-1;1593:10:10;;;;1481:28;1527:82;;;1635:12;;;1616:16;1635:12;;;;;;;;;1616:31;;1653:29;1716:17;1749:8;1774:1;1784:3;1685:108;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1799:29:10;;;;:9;:29;;;;;;;;;;;:36;;;;1831:4;1799:36;;;1846:101;1653:140;;-1:-1:-1;1931:10:10;;1846:101;;;;;;1799:9;1846:101;1970:8;;-1:-1:-1;1989:9:10;;-1:-1:-1;;1283:722:10;;:::o;2096:440::-;2200:12;;;2159:7;2200:12;;;;;;;;;2218:29;2281:17;2306:10;2332:1;2342:3;2250:101;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2358:29:10;;;:9;:29;;;;;;;;;;;:36;;;;2390:4;2358:36;;;2405:94;2218:133;;-1:-1:-1;2483:10:10;;;;2358:29;2405:94;;;2521:9;-1:-1:-1;;2096:440:10;:::o;3172:117::-;3268:16;;3247:4;3268:16;;;;;;;;;;;;;;3172:117::o;2627:465::-;2756:7;2778:29;2841:17;2866:10;2884:2;2894:7;;2810:97;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2810:97:10;-1:-1:-1;2810:97:10;;-1:-1:-1;;;;;;2810:97:10;;;;;;;;;;;;;;;-1:-1:-1;2914:29:10;;;:9;:29;;;;;;;;;;;:36;;;;2946:4;2914:36;;;2961:94;2778:129;;-1:-1:-1;3039:10:10;;;;2914:29;2961:94;;;3077:9;2627:465;-1:-1:-1;;;;2627:465:10:o;792:336::-;854:7;876:17;916;941:10;896:61;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;896:61:10;;;;;;;;;;;;;;;-1:-1:-1;964:28:10;;;:9;:28;;;;;;;;;;;:35;;;;995:4;964:35;;;1010:82;876:81;;-1:-1:-1;1076:10:10;;;;964:28;1010:82;;;1114:8;-1:-1:-1;792:336:10;:::o;-1:-1:-1:-;;;;;;;;:::o;:::-;;;;;;;;:::o"
			},
			"methodIdentifiers": {
				"created(address)": "d42efd83",
				"deployNewForwarder()": "3babafdb",
				"deployNewForwarderAndTransferOwnership(address,bytes)": "d689d095",
				"deployNewOperator()": "f4adb6e1",
				"deployNewOperatorAndForwarder()": "32f01eae",
				"getChainlinkToken()": "165d35e1"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"linkAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AuthorizedForwarderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OperatorCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"query\",\"type\":\"address\"}],\"name\":\"created\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployNewForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"deployNewForwarderAndTransferOwnership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployNewOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployNewOperatorAndForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"linkAddress\":\"address\"}}},\"title\":\"Operator Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"created(address)\":{\"notice\":\"indicates whether this factory deployed an address\"},\"deployNewForwarder()\":{\"notice\":\"creates a new Forwarder contract with the msg.sender as owner\"},\"deployNewForwarderAndTransferOwnership(address,bytes)\":{\"notice\":\"creates a new Forwarder contract with the msg.sender as owner\"},\"deployNewOperator()\":{\"notice\":\"creates a new Operator contract with the msg.sender as owner\"},\"deployNewOperatorAndForwarder()\":{\"notice\":\"creates a new Operator contract with the msg.sender as owner and a new Operator Forwarder with the Operator as the owner\"}},\"notice\":\"Creates Operator contracts for node operators\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/OperatorFactory.sol\":\"OperatorFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/AuthorizedForwarder.sol\":{\"keccak256\":\"0xf2a2ba7eac33654e866fff8d8f8d0a9f7df1ecb31908bf13a6e305f00045a22d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4736edcde3521d150b41432b47c5258835c0aae4bc2929d47bbf6f0bb1afe27a\",\"dweb:/ipfs/QmbebamqC4X2EZPpUt2VUsbKNQyjctJN1T2EgJn4oEVXPB\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/AuthorizedReceiver.sol\":{\"keccak256\":\"0xdf8629200c2b65826a638c955c193e3ac0cca520feee67cfba2ad562cf02c156\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc0cb2d401959af812abee6d6beaf4d194c3d1b74865164286596615e138d45b\",\"dweb:/ipfs/QmPRwok3wt2ikvDMtcpqBF1EiEYuJAwRuDyXzZTvQA1qJJ\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/ConfirmedOwner.sol\":{\"keccak256\":\"0x4ca4b13814b24424f4a4565827888abd73a599db359e33c378d468cf952f2e12\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://390be8bf9d384603f8d4ce2c243f5480ce9ce5dcfec138642c56a70c4c35e09f\",\"dweb:/ipfs/QmP5QqCLwDBbKzy2PCDqjtkAg5FdYF2p2xKgP92kqyC3DA\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/ConfirmedOwnerWithProposal.sol\":{\"keccak256\":\"0xd594f8533e00d3a68088b74cdb26035dbfc565a6af1c251f5fd5d5b44f94134c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf67278a0a54d56fc6c57215cc1fa3f73c53cf485563d67725b0bd81dd0e1bfa\",\"dweb:/ipfs/QmZzD3r1PyorWgke7czxw9MDReDEdnpZ6ktphqvbqUSgTt\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/LinkTokenReceiver.sol\":{\"keccak256\":\"0x0369f7825291bfb9e60c1802a78ef99ac2a33294a53cfa5b9b876713f6bdc382\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1755267772ed169fe6d1c21c21649e2276db3fdd9c53a486b83cca5bd205a763\",\"dweb:/ipfs/QmQSHMe15MWqGhXw522eF8DG4P6c6nNjZpC9r4QK5H37f5\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/Operator.sol\":{\"keccak256\":\"0x867c2fbbb270eecfc997995f16a496f743fa89757df0497713c4373fca2a05ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b90d594e87acb31e8c77acd4717f4c06d387e4599ce085f6f1d4bdb72f63c40b\",\"dweb:/ipfs/QmXbczPjktUmw2AMUuB42WREncq1u3EzPLPhPUC1JdpzPw\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/OperatorFactory.sol\":{\"keccak256\":\"0x8101610e909040c90f8cbc8556c1a595f6c11bfe011925f337b23e509f34bd41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://10bae9f81867701d5cd81dfbafe99fdea96719798b6a8d2ada906505cee44a0c\",\"dweb:/ipfs/QmbSRZxqqvBPX65TUPNshvukbdHp8JRJ9EAc1ioezPorf3\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/AuthorizedReceiverInterface.sol\":{\"keccak256\":\"0x647fc393b9d6be0c20e5ac5bcb19114f9a50e808d567979ed04abba5ee18a22f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef307221efe7b5e72ced7e24005a8363384013b1b26e307d9c9735e1624ac677\",\"dweb:/ipfs/QmYfcisfmWohe1v7bQH1EBA58Ct2zdkTNpSUjq3aKUqpkX\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/ChainlinkRequestInterface.sol\":{\"keccak256\":\"0x5461aa441a5578fdb7181169e0060b8cb3e7eb96441140e8353424deae730073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a71019411365d5e12056b55669366926caf128e60584269f8bc6715ba93e756\",\"dweb:/ipfs/QmaRS5tzQcSAkoFaj6aSM4aywiK7mgyVg9Xv9c9jii9rv8\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/LinkTokenInterface.sol\":{\"keccak256\":\"0xfa5c9db0efdd0fc8659b3d973929645883282e9a3e0bd3a95e625d06eded8cbc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c96843bd511f705c7847c826174e12aa23117dc2517f4802ef46a7c994533019\",\"dweb:/ipfs/QmQ5MCvEJktQ9EExX7Mgg5ccUbKgkitkoYYamVwtr9MXAH\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/OperatorInterface.sol\":{\"keccak256\":\"0x120e5c9c58e4c0fac6e3ed977dd8dffe09b377bebdbdee3fd10478f9251867e2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa5eccf74f0d284438861be7c4036db505686c76fe417eb736a408a9b2f87ef6\",\"dweb:/ipfs/QmZ17QX5KEoPPqmbGJwCzGVoiEtthaSoQmccWesRQGM2pc\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/OracleInterface.sol\":{\"keccak256\":\"0xaed6dd4b2d459742adac17f25eab467d840c8c6ea9d92f07c10a2c0ab3bb9768\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d0626b656d2afe88c1f558ab5e67926ddfd5760789a42cdba1125a4a0f5455d5\",\"dweb:/ipfs/QmW43891ANK2b7UR5bsyfoC99N8dK2e8KGfuxUdkeQfuoU\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/OwnableInterface.sol\":{\"keccak256\":\"0xc70f1ef06be11ec954b93df177d4f17bfc1b6017105a1be9bb52aeb5119133d1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e69106bac4bf140c2e514ea9ebc67337ebd2c506fbeeb84a540eac6d884595d5\",\"dweb:/ipfs/QmWqZifScXZ4YFHrYNvXU5449dGBoTgcjL7YEHPuU5A94o\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/interfaces/WithdrawalInterface.sol\":{\"keccak256\":\"0x78183f108c4bc3c5fc2568dae90421e172ce7e1ed1132d999173f7b318cb1870\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6f2207e1e354919483d0ad9af6539664e9a46a95e4b7c315617d63ea4e507a4\",\"dweb:/ipfs/QmNaFDQaBMV4jwPKQDwwLgMBTmmc7aY9fNZX1otMuGezGg\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/vendor/Address.sol\":{\"keccak256\":\"0x2b9cf9ce6991c8e13ccb127689d0b10e21586479272698ef86fb28ce770313df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ce9930eeacc78a86c667709b5f3995183f7bed169f3384770781eea6268eb0c\",\"dweb:/ipfs/QmdjKoxd9yeJq4ntdJCweFzJ3SJ2EhPAxhsTBchdj1h4Ga\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/vendor/SafeMathChainlink.sol\":{\"keccak256\":\"0xdef991bae78444c98da33e88e81682001bb5bb9541ec19b1a05c19df8bbbff8b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://684404db5f34ead354c37a01566c3568a187903355211f97cb60118e868397fd\",\"dweb:/ipfs/QmbZR3LxbVh1bBK6JhJGHRDAGn7GAtHVsB1FxxnDYRBQs8\"]}},\"version\":1}",
		"userdoc": {
			"kind": "user",
			"methods": {
				"created(address)": {
					"notice": "indicates whether this factory deployed an address"
				},
				"deployNewForwarder()": {
					"notice": "creates a new Forwarder contract with the msg.sender as owner"
				},
				"deployNewForwarderAndTransferOwnership(address,bytes)": {
					"notice": "creates a new Forwarder contract with the msg.sender as owner"
				},
				"deployNewOperator()": {
					"notice": "creates a new Operator contract with the msg.sender as owner"
				},
				"deployNewOperatorAndForwarder()": {
					"notice": "creates a new Operator contract with the msg.sender as owner and a new Operator Forwarder with the Operator as the owner"
				}
			},
			"notice": "Creates Operator contracts for node operators",
			"version": 1
		}
	},
	"sources": {
		"dev/OperatorFactory.sol": {
			"id": 10
		},
		"dev/Operator.sol": {
			"id": 9
		},
		"dev/AuthorizedReceiver.sol": {
			"id": 4
		},
		"interfaces/AuthorizedReceiverInterface.sol": {
			"id": 18
		},
		"dev/LinkTokenReceiver.sol": {
			"id": 8
		},
		"dev/ConfirmedOwner.sol": {
			"id": 6
		},
		"dev/ConfirmedOwnerWithProposal.sol": {
			"id": 7
		},
		"interfaces/OwnableInterface.sol": {
			"id": 26
		},
		"interfaces/LinkTokenInterface.sol": {
			"id": 23
		},
		"interfaces/OperatorInterface.sol": {
			"id": 24
		},
		"interfaces/ChainlinkRequestInterface.sol": {
			"id": 19
		},
		"interfaces/OracleInterface.sol": {
			"id": 25
		},
		"interfaces/WithdrawalInterface.sol": {
			"id": 31
		},
		"vendor/Address.sol": {
			"id": 38
		},
		"vendor/SafeMathChainlink.sol": {
			"id": 42
		},
		"dev/AuthorizedForwarder.sol": {
			"id": 3
		}
	},
	"sourceCodes": {
		"dev/OperatorFactory.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./Operator.sol\";\nimport \"./AuthorizedForwarder.sol\";\n\n/**\n * @title Operator Factory\n * @notice Creates Operator contracts for node operators\n */\ncontract OperatorFactory {\n\n  address public immutable getChainlinkToken;\n  mapping(address => bool) private s_created;\n\n  event OperatorCreated(\n    address indexed operator,\n    address indexed owner,\n    address indexed sender\n  );\n  event AuthorizedForwarderCreated(\n    address indexed forwarder,\n    address indexed owner,\n    address indexed sender\n  );\n\n  /**\n   * @param linkAddress address\n   */\n  constructor(\n    address linkAddress\n  ) {\n    getChainlinkToken = linkAddress;\n  }\n\n  /**\n   * @notice creates a new Operator contract with the msg.sender as owner\n   */\n  function deployNewOperator()\n    external\n    returns (\n      address\n    )\n  {\n    Operator operator = new Operator(\n      getChainlinkToken,\n      msg.sender\n    );\n\n    s_created[address(operator)] = true;\n    emit OperatorCreated(\n      address(operator),\n      msg.sender,\n      msg.sender\n    );\n\n    return address(operator);\n  }\n\n  /**\n   * @notice creates a new Operator contract with the msg.sender as owner and a\n   * new Operator Forwarder with the Operator as the owner\n   */\n  function deployNewOperatorAndForwarder()\n    external\n    returns (\n      address,\n      address\n    )\n  {\n    Operator operator = new Operator(\n      getChainlinkToken,\n      msg.sender\n    );\n    s_created[address(operator)] = true;\n    emit OperatorCreated(\n      address(operator),\n      msg.sender,\n      msg.sender\n    );\n\n    bytes memory tmp = new bytes(0);\n    AuthorizedForwarder forwarder = new AuthorizedForwarder(\n      getChainlinkToken,\n      address(operator),\n      address(0),\n      tmp\n    );\n    s_created[address(forwarder)] = true;\n    emit AuthorizedForwarderCreated(\n      address(forwarder),\n      address(operator),\n      msg.sender\n    );\n\n    return (address(operator), address(forwarder));\n  }\n\n  /**\n   * @notice creates a new Forwarder contract with the msg.sender as owner\n   */\n  function deployNewForwarder()\n    external\n    returns (\n      address\n    )\n  {\n    bytes memory tmp = new bytes(0);\n    AuthorizedForwarder forwarder = new AuthorizedForwarder(\n      getChainlinkToken,\n      msg.sender,\n      address(0),\n      tmp\n    );\n\n    s_created[address(forwarder)] = true;\n    emit AuthorizedForwarderCreated(\n      address(forwarder),\n      msg.sender,\n      msg.sender\n    );\n\n    return address(forwarder);\n  }\n\n  /**\n   * @notice creates a new Forwarder contract with the msg.sender as owner\n   */\n  function deployNewForwarderAndTransferOwnership(\n    address to,\n    bytes calldata message\n  )\n    external\n    returns (\n      address\n    )\n  {\n    AuthorizedForwarder forwarder = new AuthorizedForwarder(\n      getChainlinkToken,\n      msg.sender,\n      to,\n      message\n    );\n\n    s_created[address(forwarder)] = true;\n    emit AuthorizedForwarderCreated(\n      address(forwarder),\n      msg.sender,\n      msg.sender\n    );\n\n    return address(forwarder);\n  }\n\n  /**\n   * @notice indicates whether this factory deployed an address\n   */\n  function created(\n    address query\n  )\n    external\n    view\n    returns (bool)\n  {\n    return s_created[query];\n  }\n\n}\n",
		"dev/Operator.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./AuthorizedReceiver.sol\";\nimport \"./LinkTokenReceiver.sol\";\nimport \"./ConfirmedOwner.sol\";\nimport \"../interfaces/LinkTokenInterface.sol\";\nimport \"../interfaces/OperatorInterface.sol\";\nimport \"../interfaces/OwnableInterface.sol\";\nimport \"../interfaces/WithdrawalInterface.sol\";\nimport \"../vendor/Address.sol\";\nimport \"../vendor/SafeMathChainlink.sol\";\n\n/**\n * @title The Chainlink Operator contract\n * @notice Node operators can deploy this contract to fulfill requests sent to them\n */\ncontract Operator is\n  AuthorizedReceiver,\n  ConfirmedOwner,\n  LinkTokenReceiver,\n  OperatorInterface,\n  WithdrawalInterface\n{\n  using Address for address;\n  using SafeMathChainlink for uint256;\n\n  struct Commitment {\n    bytes31 paramsHash;\n    uint8 dataVersion;\n  }\n\n  uint256 constant public getExpiryTime = 5 minutes;\n  uint256 constant private MAXIMUM_DATA_VERSION = 256;\n  uint256 constant private MINIMUM_CONSUMER_GAS_LIMIT = 400000;\n  uint256 constant private SELECTOR_LENGTH = 4;\n  uint256 constant private EXPECTED_REQUEST_WORDS = 2;\n  uint256 constant private MINIMUM_REQUEST_LENGTH = SELECTOR_LENGTH + (32 * EXPECTED_REQUEST_WORDS);\n  // We initialize fields to 1 instead of 0 so that the first invocation\n  // does not cost more gas.\n  uint256 constant private ONE_FOR_CONSISTENT_GAS_COST = 1;\n  // oracleRequest is version 1, enabling single word responses\n  bytes4 constant private ORACLE_REQUEST_SELECTOR = this.oracleRequest.selector;\n  // requestOracleData is version 2, enabling multi-word responses\n  bytes4 constant private OPERATOR_REQUEST_SELECTOR = this.requestOracleData.selector;\n\n  LinkTokenInterface internal immutable linkToken;\n  mapping(bytes32 => Commitment) private s_commitments;\n  // Tokens sent for requests that have not been fulfilled yet\n  uint256 private s_tokensInEscrow = ONE_FOR_CONSISTENT_GAS_COST;\n\n  event OracleRequest(\n    bytes32 indexed specId,\n    address requester,\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddr,\n    bytes4 callbackFunctionId,\n    uint256 cancelExpiration,\n    uint256 dataVersion,\n    bytes data\n  );\n\n  event CancelOracleRequest(\n    bytes32 indexed requestId\n  );\n\n  event OracleResponse(\n    bytes32 indexed requestId\n  );\n\n  event OwnableContractAccepted(\n    address indexed accpetedContract\n  );\n\n  event TargetsUpdatedAuthorizedSenders(\n    address[] targets,\n    address[] senders,\n    address changedBy\n  );\n\n  /**\n   * @notice Deploy with the address of the LINK token\n   * @dev Sets the LinkToken address for the imported LinkTokenInterface\n   * @param link The address of the LINK token\n   * @param owner The address of the owner\n   */\n  constructor(\n    address link,\n    address owner\n  )\n    ConfirmedOwner(owner)\n  {\n    linkToken = LinkTokenInterface(link); // external but already deployed and unalterable\n  }\n\n  function oracleRequest(\n    address sender,\n    uint256 payment,\n    bytes32 specId,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  )\n    external\n    override\n  {\n    requestOracleData(\n      sender,\n      payment,\n      specId,\n      callbackAddress,\n      callbackFunctionId,\n      nonce,\n      dataVersion,\n      data\n    );\n  }\n\n  /**\n   * @notice Creates the Chainlink request\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\n   * Emits OracleRequest event for the Chainlink node to detect.\n   * @param sender The sender of the request\n   * @param payment The amount of payment given (specified in wei)\n   * @param specId The Job Specification ID\n   * @param callbackAddress The callback address for the response\n   * @param callbackFunctionId The callback function ID for the response\n   * @param nonce The nonce sent by the requester\n   * @param dataVersion The specified data version\n   * @param data The CBOR payload of the request\n   */\n  function requestOracleData(\n    address sender,\n    uint256 payment,\n    bytes32 specId,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  )\n    public\n    override\n    validateFromLINK()\n    validateNotToLINK(callbackAddress)\n  {\n    (bytes32 requestId, uint256 expiration) = _verifyOracleRequest(\n      sender,\n      payment,\n      callbackAddress,\n      callbackFunctionId,\n      nonce,\n      dataVersion\n    );\n    emit OracleRequest(\n      specId,\n      sender,\n      requestId,\n      payment,\n      callbackAddress,\n      callbackFunctionId,\n      expiration,\n      dataVersion,\n      data);\n  }\n\n  /**\n   * @notice Called by the Chainlink node to fulfill requests\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\n   * Will call the callback address' callback function without bubbling up error\n   * checking in a `require` so that the node can get paid.\n   * @param requestId The fulfillment request ID that must match the requester's\n   * @param payment The payment amount that will be released for the oracle (specified in wei)\n   * @param callbackAddress The callback address to call for fulfillment\n   * @param callbackFunctionId The callback function ID to use for fulfillment\n   * @param expiration The expiration that the node should respond by before the requester can cancel\n   * @param data The data to return to the consuming contract\n   * @return Status if the external call was successful\n   */\n  function fulfillOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes32 data\n  )\n    external\n    override\n    validateAuthorizedSender()\n    validateRequestId(requestId)\n    returns (\n      bool\n    )\n  {\n    _verifyOracleResponse(\n      requestId,\n      payment,\n      callbackAddress,\n      callbackFunctionId,\n      expiration,\n      1\n    );\n    emit OracleResponse(requestId);\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \"Must provide consumer enough gas\");\n    // All updates to the oracle's fulfillment should come before calling the\n    // callback(addr+functionId) as it is untrusted.\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\n    (bool success, ) = callbackAddress.call(abi.encodeWithSelector(callbackFunctionId, requestId, data)); // solhint-disable-line avoid-low-level-calls\n    return success;\n  }\n\n  /**\n   * @notice Called by the Chainlink node to fulfill requests with multi-word support\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\n   * Will call the callback address' callback function without bubbling up error\n   * checking in a `require` so that the node can get paid.\n   * @param requestId The fulfillment request ID that must match the requester's\n   * @param payment The payment amount that will be released for the oracle (specified in wei)\n   * @param callbackAddress The callback address to call for fulfillment\n   * @param callbackFunctionId The callback function ID to use for fulfillment\n   * @param expiration The expiration that the node should respond by before the requester can cancel\n   * @param data The data to return to the consuming contract\n   * @return Status if the external call was successful\n   */\n  function fulfillOracleRequest2(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes calldata data\n  )\n    external\n    override\n    validateAuthorizedSender()\n    validateRequestId(requestId)\n    validateMultiWordResponseId(requestId, data)\n    returns (\n      bool\n    )\n  {\n    _verifyOracleResponse(\n      requestId,\n      payment,\n      callbackAddress,\n      callbackFunctionId,\n      expiration,\n      2\n    );\n    emit OracleResponse(requestId);\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \"Must provide consumer enough gas\");\n    // All updates to the oracle's fulfillment should come before calling the\n    // callback(addr+functionId) as it is untrusted.\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\n    (bool success, ) = callbackAddress.call(abi.encodePacked(callbackFunctionId, data)); // solhint-disable-line avoid-low-level-calls\n    return success;\n  }\n\n  /**\n   * @notice Transfer the ownership of ownable contracts\n   * @param ownable list of addresses to transfer\n   * @param newOwner address to transfer ownership to\n   */\n  function transferOwnableContracts(\n    address[] calldata ownable,\n    address newOwner\n  )\n    external\n    onlyOwner()\n  {\n    for (uint256 i = 0; i < ownable.length; i++) {\n      OwnableInterface(ownable[i]).transferOwnership(newOwner);\n    }\n  }\n\n  /**\n   * @notice Accept the ownership of an ownable contract\n   * @dev Must be the pending owner on the contract\n   * @param ownable list of addresses of Ownable contracts to accept\n   */\n  function acceptOwnableContracts(\n    address[] calldata ownable\n  )\n    public\n    validateAuthorizedSenderSetter()\n  {\n    for (uint256 i = 0; i < ownable.length; i++) {\n      OwnableInterface(ownable[i]).acceptOwnership();\n      emit OwnableContractAccepted(ownable[i]);\n    }\n  }\n\n  /**\n   * @notice Sets the fulfillment permission for\n   * @param targets The addresses to set permissions on\n   * @param senders The addresses that are allowed to send updates\n   */\n  function setAuthorizedSendersOn(\n    address[] calldata targets,\n    address[] calldata senders\n  )\n    public\n    validateAuthorizedSenderSetter()\n  {\n    TargetsUpdatedAuthorizedSenders(targets, senders, msg.sender);\n\n    for (uint256 i = 0; i < targets.length; i++) {\n      AuthorizedReceiverInterface(targets[i]).setAuthorizedSenders(senders);\n    }\n  }\n\n  /**\n   * @notice Sets the fulfillment permission for\n   * @param targets The addresses to set permissions on\n   * @param senders The addresses that are allowed to send updates\n   */\n  function acceptAuthorizedReceivers(\n    address[] calldata targets,\n    address[] calldata senders\n  )\n    external\n    validateAuthorizedSenderSetter()\n  {\n    acceptOwnableContracts(targets);\n    setAuthorizedSendersOn(targets, senders);\n  }\n\n  /**\n   * @notice Allows the node operator to withdraw earned LINK to a given address\n   * @dev The owner of the contract can be another wallet and does not have to be a Chainlink node\n   * @param recipient The address to send the LINK token to\n   * @param amount The amount to send (specified in wei)\n   */\n  function withdraw(\n    address recipient,\n    uint256 amount\n  )\n    external\n    override(OracleInterface, WithdrawalInterface)\n    onlyOwner()\n    validateAvailableFunds(amount)\n  {\n    assert(linkToken.transfer(recipient, amount));\n  }\n\n  /**\n   * @notice Displays the amount of LINK that is available for the node operator to withdraw\n   * @dev We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\n   * @return The amount of withdrawable LINK on the contract\n   */\n  function withdrawable()\n    external\n    view\n    override(OracleInterface, WithdrawalInterface)\n    returns (uint256)\n  {\n    return _fundsAvailable();\n  }\n\n  /**\n   * @notice Forward a call to another contract\n   * @dev Only callable by the owner\n   * @param to address\n   * @param data to forward\n   */\n  function ownerForward(\n    address to,\n    bytes calldata data\n  )\n    external\n    onlyOwner()\n    validateNotToLINK(to)\n  {\n    require(to.isContract(), \"Must forward to a contract\");\n    (bool status,) = to.call(data);\n    require(status, \"Forwarded call failed\");\n  }\n\n  /**\n   * @notice Interact with other LinkTokenReceiver contracts by calling transferAndCall\n   * @param to The address to transfer to.\n   * @param value The amount to be transferred.\n   * @param data The extra data to be passed to the receiving contract.\n   * @return success bool\n   */\n  function ownerTransferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  )\n    external\n    override\n    onlyOwner()\n    validateAvailableFunds(value)\n    returns (\n      bool success\n    )\n  {\n    return linkToken.transferAndCall(to, value, data);\n  }\n\n  /**\n   * @notice Distribute funds to multiple addresses using ETH send\n   * to this payable function.\n   * @dev Array length must be equal, ETH sent must equal the sum of amounts.\n   * @param receivers list of addresses\n   * @param amounts list of amounts\n   */\n  function distributeFunds(\n    address payable[] calldata receivers,\n    uint[] calldata amounts\n  )\n    external\n    payable\n  {\n    require(receivers.length > 0 && receivers.length == amounts.length, \"Invalid array length(s)\");\n    uint256 valueRemaining = msg.value;\n    for (uint256 i = 0; i < receivers.length; i++) {\n      uint256 sendAmount = amounts[i];\n      valueRemaining = valueRemaining.sub(sendAmount);\n      receivers[i].transfer(sendAmount);\n    }\n    require(valueRemaining == 0, \"Too much ETH sent\");\n  }\n\n  /**\n   * @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\n   * sent for the request back to the requester's address.\n   * @dev Given params must hash to a commitment stored on the contract in order for the request to be valid\n   * Emits CancelOracleRequest event.\n   * @param requestId The request ID\n   * @param payment The amount of payment given (specified in wei)\n   * @param callbackFunc The requester's specified callback address\n   * @param expiration The time of the expiration for the request\n   */\n  function cancelOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunc,\n    uint256 expiration\n  )\n    external\n    override\n  {\n    bytes31 paramsHash = _buildFunctionHash(payment, msg.sender, callbackFunc, expiration);\n    require(s_commitments[requestId].paramsHash == paramsHash, \"Params do not match request ID\");\n    // solhint-disable-next-line not-rely-on-time\n    require(expiration <= block.timestamp, \"Request is not expired\");\n\n    delete s_commitments[requestId];\n    emit CancelOracleRequest(requestId);\n\n    assert(linkToken.transfer(msg.sender, payment));\n  }\n\n  /**\n   * @notice Returns the address of the LINK token\n   * @dev This is the public implementation for chainlinkTokenAddress, which is\n   * an internal method of the ChainlinkClient contract\n   */\n  function getChainlinkToken()\n    public\n    view\n    override\n    returns (\n      address\n    )\n  {\n    return address(linkToken);\n  }\n\n\n  /**\n   * @notice Require that the token transfer action is valid\n   * @dev OPERATOR_REQUEST_SELECTOR = multiword, ORACLE_REQUEST_SELECTOR = singleword\n   */\n  function _validateTokenTransferAction(\n    bytes4 funcSelector,\n    bytes memory data\n  )\n    internal\n    override\n    pure\n  {\n    require(data.length >= MINIMUM_REQUEST_LENGTH, \"Invalid request length\");\n    require(funcSelector == OPERATOR_REQUEST_SELECTOR || funcSelector == ORACLE_REQUEST_SELECTOR, \"Must use whitelisted functions\");\n  }\n\n  /**\n   * @notice Verify the Oracle Request\n   * @param sender The sender of the request\n   * @param payment The amount of payment given (specified in wei)\n   * @param callbackAddress The callback address for the response\n   * @param callbackFunctionId The callback function ID for the response\n   * @param nonce The nonce sent by the requester\n   */\n  function _verifyOracleRequest(\n    address sender,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion\n  )\n    private\n    returns (\n      bytes32 requestId,\n      uint256 expiration\n    )\n  {\n    requestId = keccak256(abi.encodePacked(sender, nonce));\n    require(s_commitments[requestId].paramsHash == 0, \"Must use a unique ID\");\n    // solhint-disable-next-line not-rely-on-time\n    expiration = block.timestamp.add(getExpiryTime);\n    bytes31 paramsHash = _buildFunctionHash(payment, callbackAddress, callbackFunctionId, expiration);\n    s_commitments[requestId] = Commitment(paramsHash, _safeCastToUint8(dataVersion));\n    s_tokensInEscrow = s_tokensInEscrow.add(payment);\n    return (requestId, expiration);\n  }\n\n  /**\n   * @notice Verify the Oracle Response\n   * @param requestId The fulfillment request ID that must match the requester's\n   * @param payment The payment amount that will be released for the oracle (specified in wei)\n   * @param callbackAddress The callback address to call for fulfillment\n   * @param callbackFunctionId The callback function ID to use for fulfillment\n   * @param expiration The expiration that the node should respond by before the requester can cancel\n   */\n  function _verifyOracleResponse(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    uint256 dataVersion\n  )\n    internal\n  {\n    bytes31 paramsHash = _buildFunctionHash(payment, callbackAddress, callbackFunctionId, expiration);\n    require(s_commitments[requestId].paramsHash == paramsHash, \"Params do not match request ID\");\n    require(s_commitments[requestId].dataVersion <= _safeCastToUint8(dataVersion), \"Data versions must match\");\n    s_tokensInEscrow = s_tokensInEscrow.sub(payment);\n    delete s_commitments[requestId];\n  }\n\n  /**\n   * @notice Build the bytes31 function hash from the payment, callback and expiration.\n   * @param payment The payment amount that will be released for the oracle (specified in wei)\n   * @param callbackAddress The callback address to call for fulfillment\n   * @param callbackFunctionId The callback function ID to use for fulfillment\n   * @param expiration The expiration that the node should respond by before the requester can cancel\n   * @return hash bytes31\n   */\n  function _buildFunctionHash(\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration\n  )\n    internal\n    pure\n    returns (\n      bytes31\n    )\n  {\n    return bytes31(keccak256(\n      abi.encodePacked(\n        payment,\n        callbackAddress,\n        callbackFunctionId,\n        expiration\n      )\n    ));\n  }\n\n  /**\n   * @notice Safely cast uint256 to uint8\n   * @param number uint256\n   * @return uint8 number\n   */\n  function _safeCastToUint8(\n    uint256 number\n  )\n    internal\n    pure\n    returns (\n      uint8\n    )\n  {\n    require(number < MAXIMUM_DATA_VERSION, \"number too big to cast\");\n    return uint8(number);\n  }\n\n  /**\n   * @notice Returns the LINK available in this contract, not locked in escrow\n   * @return uint256 LINK tokens available\n   */\n  function _fundsAvailable()\n    private\n    view\n    returns (\n      uint256\n    )\n  {\n    uint256 inEscrow = s_tokensInEscrow.sub(ONE_FOR_CONSISTENT_GAS_COST);\n    return linkToken.balanceOf(address(this)).sub(inEscrow);\n  }\n\n  /**\n   * @notice concrete implementation of AuthorizedReceiver\n   * @return bool of whether sender is authorized\n   */\n  function _canSetAuthorizedSenders()\n    internal\n    view\n    override\n    returns (bool)\n  {\n    return isAuthorizedSender(msg.sender) || owner() == msg.sender;\n  }\n\n\n  // MODIFIERS\n\n  /**\n   * @dev Reverts if the first 32 bytes of the bytes array is not equal to requestId\n   * @param requestId bytes32\n   * @param data bytes\n   */\n  modifier validateMultiWordResponseId(\n    bytes32 requestId,\n    bytes memory data\n  ) {\n    bytes32 firstWord;\n    assembly{\n      firstWord := mload(add(data, 0x20))\n    }\n    require(requestId == firstWord, \"First word must be requestId\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if amount requested is greater than withdrawable balance\n   * @param amount The given amount to compare to `s_withdrawableTokens`\n   */\n  modifier validateAvailableFunds(\n    uint256 amount\n  ) {\n    require(_fundsAvailable() >= amount, \"Amount requested is greater than withdrawable balance\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if request ID does not exist\n   * @param requestId The given request ID to check in stored `commitments`\n   */\n  modifier validateRequestId(\n    bytes32 requestId\n  ) {\n    require(s_commitments[requestId].paramsHash != 0, \"Must have a valid requestId\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if the callback address is the LINK token\n   * @param to The callback address\n   */\n  modifier validateNotToLINK(\n    address to\n  ) {\n    require(to != address(linkToken), \"Cannot call to LINK\");\n    _;\n  }\n\n}\n",
		"dev/AuthorizedReceiver.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"../interfaces/AuthorizedReceiverInterface.sol\";\n\nabstract contract AuthorizedReceiver is\n  AuthorizedReceiverInterface\n{\n\n  mapping(address => bool) private s_authorizedSenders;\n  address[] private s_authorizedSenderList;\n\n  event AuthorizedSendersChanged(\n    address[] senders,\n    address changedBy\n  );\n\n  /**\n   * @notice Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\n   * @param senders The addresses of the authorized Chainlink node\n   */\n  function setAuthorizedSenders(\n    address[] calldata senders\n  )\n    external\n    override\n    validateAuthorizedSenderSetter()\n  {\n    require(senders.length > 0, \"Must have at least 1 authorized sender\");\n    // Set previous authorized senders to false\n    uint256 authorizedSendersLength = s_authorizedSenderList.length;\n    for (uint256 i = 0; i < authorizedSendersLength; i++) {\n      s_authorizedSenders[s_authorizedSenderList[i]] = false;\n    }\n    // Set new to true\n    for (uint256 i = 0; i < senders.length; i++) {\n      s_authorizedSenders[senders[i]] = true;\n    }\n    // Replace list\n    s_authorizedSenderList = senders;\n    emit AuthorizedSendersChanged(senders, msg.sender);\n  }\n\n  /**\n   * @notice Retrieve a list of authorized senders\n   * @return array of addresses\n   */\n  function getAuthorizedSenders()\n    external\n    view\n    override\n    returns (\n      address[] memory\n    )\n  {\n    return s_authorizedSenderList;\n  }\n\n  /**\n   * @notice Use this to check if a node is authorized for fulfilling requests\n   * @param sender The address of the Chainlink node\n   * @return The authorization status of the node\n   */\n  function isAuthorizedSender(\n    address sender\n  )\n    public\n    view\n    override\n    returns (bool)\n  {\n    return s_authorizedSenders[sender];\n  }\n\n  /**\n   * @notice customizable guard of who can update the authorized sender list\n   * @return bool whether sender can update authorized sender list\n   */\n  function _canSetAuthorizedSenders()\n    internal\n    virtual\n    returns (bool);\n\n  /**\n   * @notice validates the sender is an authorized sender\n   */\n  function _validateIsAuthorizedSender()\n    internal\n    view\n  {\n    require(isAuthorizedSender(msg.sender), \"Not authorized sender\");\n  }\n\n  /**\n   * @notice prevents non-authorized addresses from calling this method\n   */\n  modifier validateAuthorizedSender()\n  {\n    _validateIsAuthorizedSender();\n    _;\n  }\n\n  /**\n   * @notice prevents non-authorized addresses from calling this method\n   */\n  modifier validateAuthorizedSenderSetter()\n  {\n    require(_canSetAuthorizedSenders(), \"Cannot set authorized senders\");\n    _;\n  }\n\n}\n",
		"interfaces/AuthorizedReceiverInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface AuthorizedReceiverInterface {\n\n  function isAuthorizedSender(\n    address sender\n  )\n    external\n    view\n    returns (bool);\n\n  function getAuthorizedSenders()\n    external\n    returns (\n      address[] memory\n    );\n\n  function setAuthorizedSenders(\n    address[] calldata senders\n  )\n    external;\n\n}\n",
		"dev/LinkTokenReceiver.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nabstract contract LinkTokenReceiver {\n\n  /**\n   * @notice Called when LINK is sent to the contract via `transferAndCall`\n   * @dev The data payload's first 2 words will be overwritten by the `sender` and `amount`\n   * values to ensure correctness. Calls oracleRequest.\n   * @param sender Address of the sender\n   * @param amount Amount of LINK sent (specified in wei)\n   * @param data Payload of the transaction\n   */\n  function onTokenTransfer(\n    address sender,\n    uint256 amount,\n    bytes memory data\n  )\n    public\n    validateFromLINK()\n    permittedFunctionsForLINK(data)\n  {\n    assembly {\n      // solhint-disable-next-line avoid-low-level-calls\n      mstore(add(data, 36), sender) // ensure correct sender is passed\n      // solhint-disable-next-line avoid-low-level-calls\n      mstore(add(data, 68), amount)    // ensure correct amount is passed\n    }\n    // solhint-disable-next-line avoid-low-level-calls\n    (bool success, ) = address(this).delegatecall(data); // calls oracleRequest\n    require(success, \"Unable to create request\");\n  }\n\n  function getChainlinkToken()\n    public\n    view\n    virtual\n    returns (\n      address\n    );\n\n  /**\n   * @notice Validate the function called on token transfer\n   */\n  function _validateTokenTransferAction(\n    bytes4 funcSelector,\n    bytes memory data\n  )\n    internal\n    virtual;\n\n  /**\n   * @dev Reverts if not sent from the LINK token\n   */\n  modifier validateFromLINK() {\n    require(msg.sender == getChainlinkToken(), \"Must use LINK token\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if the given data does not begin with the `oracleRequest` function selector\n   * @param data The data payload of the request\n   */\n  modifier permittedFunctionsForLINK(\n    bytes memory data\n  ) {\n    bytes4 funcSelector;\n    assembly {\n      // solhint-disable-next-line avoid-low-level-calls\n      funcSelector := mload(add(data, 32))\n    }\n    _validateTokenTransferAction(funcSelector, data);\n    _;\n  }\n\n}\n",
		"dev/ConfirmedOwner.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./ConfirmedOwnerWithProposal.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n\n  constructor(\n    address newOwner\n  )\n    ConfirmedOwnerWithProposal(\n      newOwner,\n      address(0)\n    )\n  {\n  }\n\n}\n",
		"dev/ConfirmedOwnerWithProposal.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"../interfaces/OwnableInterface.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\n\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(\n    address indexed from,\n    address indexed to\n  );\n  event OwnershipTransferred(\n    address indexed from,\n    address indexed to\n  );\n\n  constructor(\n    address owner,\n    address pendingOwner\n  ) {\n    require(owner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = owner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /**\n   * @notice Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(\n    address to\n  )\n    public\n    override\n    onlyOwner()\n  {\n    _transferOwnership(to);\n  }\n\n  /**\n   * @notice Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership()\n    external\n    override\n  {\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @notice Get the current owner\n   */\n  function owner()\n    public\n    view\n    override\n    returns (\n      address\n    )\n  {\n    return s_owner;\n  }\n\n  /**\n   * @notice validate, transfer ownership, and emit relevant events\n   */\n  function _transferOwnership(\n    address to\n  )\n    private\n  {\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /**\n   * @notice validate access\n   */\n  function _validateOwnership()\n    internal\n    view\n  {\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /**\n   * @notice Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n\n}\n",
		"interfaces/OwnableInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface OwnableInterface {\n  function owner()\n    external\n    returns (\n      address\n    );\n\n  function transferOwnership(\n    address recipient\n  )\n    external;\n\n  function acceptOwnership()\n    external;\n}\n",
		"interfaces/LinkTokenInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface LinkTokenInterface {\n\n  function allowance(\n    address owner,\n    address spender\n  )\n    external\n    view\n    returns (\n      uint256 remaining\n    );\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function balanceOf(\n    address owner\n  )\n    external\n    view\n    returns (\n      uint256 balance\n    );\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8 decimalPlaces\n    );\n\n  function decreaseApproval(\n    address spender,\n    uint256 addedValue\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function increaseApproval(\n    address spender,\n    uint256 subtractedValue\n  ) external;\n\n  function name()\n    external\n    view\n    returns (\n      string memory tokenName\n    );\n\n  function symbol()\n    external\n    view\n    returns (\n      string memory tokenSymbol\n    );\n\n  function totalSupply()\n    external\n    view\n    returns (\n      uint256 totalTokensIssued\n    );\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n}\n",
		"interfaces/OperatorInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./ChainlinkRequestInterface.sol\";\nimport \"./OracleInterface.sol\";\n\ninterface OperatorInterface is\n  ChainlinkRequestInterface,\n  OracleInterface\n{\n\n  function requestOracleData(\n    address sender,\n    uint256 payment,\n    bytes32 specId,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  )\n    external;\n\n  function fulfillOracleRequest2(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool\n    );\n\n  function ownerTransferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool success\n    );\n\n}\n",
		"interfaces/ChainlinkRequestInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface ChainlinkRequestInterface {\n  function oracleRequest(\n    address sender,\n    uint256 requestPrice,\n    bytes32 serviceAgreementID,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  ) external;\n\n  function cancelOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunctionId,\n    uint256 expiration\n  ) external;\n}\n",
		"interfaces/OracleInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface OracleInterface {\n  function fulfillOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes32 data\n  )\n    external\n    returns (\n      bool\n    );\n\n  function withdraw(\n    address recipient,\n    uint256 amount\n  ) external;\n\n  function withdrawable()\n    external\n    view\n    returns (\n      uint256\n    );\n}\n",
		"interfaces/WithdrawalInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ninterface WithdrawalInterface {\n  /**\n   * @notice transfer LINK held by the contract belonging to msg.sender to\n   * another address\n   * @param recipient is the address to send the LINK to\n   * @param amount is the amount of LINK to send\n   */\n  function withdraw(\n    address recipient,\n    uint256 amount\n  ) external;\n\n  /**\n   * @notice query the available amount of LINK to withdraw by msg.sender\n   */\n  function withdrawable()\n    external\n    view\n    returns (\n      uint256\n    );\n}\n",
		"vendor/Address.sol": "// SPDX-License-Identifier: MIT\n// From https://github.com/OpenZeppelin/openzeppelin-contracts v3.4.0(fa64a1ced0b70ab89073d5d0b6e01b0778f7e7d6)\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n",
		"vendor/SafeMathChainlink.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathChainlink {\n  /**\n    * @dev Returns the addition of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `+` operator.\n    *\n    * Requirements:\n    * - Addition cannot overflow.\n    */\n  function add(\n    uint256 a,\n    uint256 b\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the subtraction of two unsigned integers, reverting on\n    * overflow (when the result is negative).\n    *\n    * Counterpart to Solidity's `-` operator.\n    *\n    * Requirements:\n    * - Subtraction cannot overflow.\n    */\n  function sub(\n    uint256 a,\n    uint256 b\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    require(b <= a, \"SafeMath: subtraction overflow\");\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the multiplication of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `*` operator.\n    *\n    * Requirements:\n    * - Multiplication cannot overflow.\n    */\n  function mul(\n    uint256 a,\n    uint256 b\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the integer division of two unsigned integers. Reverts on\n    * division by zero. The result is rounded towards zero.\n    *\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n    * uses an invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function div(\n    uint256 a,\n    uint256 b\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, \"SafeMath: division by zero\");\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n    * Reverts when dividing by zero.\n    *\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\n    * invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function mod(\n    uint256 a,\n    uint256 b\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    require(b != 0, \"SafeMath: modulo by zero\");\n    return a % b;\n  }\n}\n",
		"dev/AuthorizedForwarder.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"../interfaces/OperatorInterface.sol\";\nimport \"./ConfirmedOwnerWithProposal.sol\";\nimport \"./AuthorizedReceiver.sol\";\nimport \"../vendor/Address.sol\";\n\ncontract AuthorizedForwarder is\n  ConfirmedOwnerWithProposal,\n  AuthorizedReceiver\n{\n  using Address for address;\n\n  address public immutable getChainlinkToken;\n\n  event OwnershipTransferRequestedWithMessage(\n    address indexed from,\n    address indexed to,\n    bytes message\n  );\n\n  constructor(\n    address link,\n    address owner,\n    address recipient,\n    bytes memory message\n  )\n    ConfirmedOwnerWithProposal(owner, recipient)\n  {\n    getChainlinkToken = link;\n    if (recipient != address(0)) {\n      emit OwnershipTransferRequestedWithMessage(owner, recipient, message);\n    }\n  }\n\n  /**\n   * @notice Forward a call to another contract\n   * @dev Only callable by an authorized sender\n   * @param to address\n   * @param data to forward\n   */\n  function forward(\n    address to,\n    bytes calldata data\n  )\n    external\n    validateAuthorizedSender()\n  {\n    require(to != getChainlinkToken, \"Cannot #forward to Link token\");\n    _forward(to, data);\n  }\n\n  /**\n   * @notice Forward a call to another contract\n   * @dev Only callable by the owner\n   * @param to address\n   * @param data to forward\n   */\n  function ownerForward(\n    address to,\n    bytes calldata data\n  )\n    external\n    onlyOwner()\n  {\n    _forward(to, data);\n  }\n\n  /**\n   * @notice Transfer ownership with instructions for recipient\n   * @param to address proposed recipeint of ownership\n   * @param message instructions for recipient upon accepting ownership\n   */\n  function transferOwnershipWithMessage(\n    address to,\n    bytes memory message\n  )\n    public\n  {\n    transferOwnership(to);\n    emit OwnershipTransferRequestedWithMessage(msg.sender, to, message);\n  }\n\n  /**\n   * @notice concrete implementation of AuthorizedReceiver\n   * @return bool of whether sender is authorized\n   */\n  function _canSetAuthorizedSenders()\n    internal\n    view\n    override\n    returns (bool)\n  {\n    return owner() == msg.sender;\n  }\n\n  /**\n   * @notice common forwarding functionality and validation\n   */\n  function _forward(\n    address to,\n    bytes calldata data\n  )\n    private\n  {\n    require(to.isContract(), \"Must forward to a contract\");\n    (bool status,) = to.call(data);\n    require(status, \"Forwarded call failed\");\n  }\n\n}\n"
	},
	"sourceTreeHashHex": "0xc367096ab1de537ea51a2bce3626b04e96505f1e9608df99f7e237a9327e3349",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.7.6+commit.7338295f.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"metadata": {
				"bytecodeHash": "none"
			},
			"remappings": []
		}
	},
	"chains": {}
}