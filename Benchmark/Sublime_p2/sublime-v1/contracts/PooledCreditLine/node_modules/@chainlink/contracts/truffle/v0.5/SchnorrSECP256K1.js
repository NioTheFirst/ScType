'use strict'
Object.defineProperty(exports, '__esModule', { value: true })
const contract = require('@truffle/contract')
const SchnorrSECP256K1 = contract({
 "contractName": "SchnorrSECP256K1",
 "abi": [
  {
   "constant": true,
   "inputs": [],
   "name": "HALF_Q",
   "outputs": [
    {
     "name": "",
     "type": "uint256"
    }
   ],
   "payable": false,
   "stateMutability": "view",
   "type": "function"
  },
  {
   "constant": true,
   "inputs": [],
   "name": "Q",
   "outputs": [
    {
     "name": "",
     "type": "uint256"
    }
   ],
   "payable": false,
   "stateMutability": "view",
   "type": "function"
  },
  {
   "constant": true,
   "inputs": [
    {
     "name": "signingPubKeyX",
     "type": "uint256"
    },
    {
     "name": "pubKeyYParity",
     "type": "uint8"
    },
    {
     "name": "signature",
     "type": "uint256"
    },
    {
     "name": "msgHash",
     "type": "uint256"
    },
    {
     "name": "nonceTimesGeneratorAddress",
     "type": "address"
    }
   ],
   "name": "verifySignature",
   "outputs": [
    {
     "name": "",
     "type": "bool"
    }
   ],
   "payable": false,
   "stateMutability": "pure",
   "type": "function"
  }
 ],
 "evm": {
  "bytecode": {
   "linkReferences": {},
   "object": "0x608060405234801561001057600080fd5b50610514806100206000396000f3fe6080604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416638efb3bb2811461005b578063e493ef8c14610082578063ff51dff214610097575b600080fd5b34801561006757600080fd5b50610070610106565b60408051918252519081900360200190f35b34801561008e57600080fd5b5061007061012a565b3480156100a357600080fd5b506100f2600480360360a08110156100ba57600080fd5b50803590602081013560ff16906040810135906060810135906080013573ffffffffffffffffffffffffffffffffffffffff1661014e565b604080519115158252519081900360200190f35b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a181565b7ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414181565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a186106101de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5075626c69632d6b65792078203e3d2048414c465f5100000000000000000000604482015290519081900360640190fd5b7ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141841061029257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f7369676e6174757265206d7573742062652072656475636564206d6f64756c6f60448201527f2051000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b73ffffffffffffffffffffffffffffffffffffffff8216158015906102b75750600086115b80156102c35750600084115b80156102cf5750600083115b151561033c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6e6f207a65726f20696e7075747320616c6c6f77656400000000000000000000604482015290519081900360640190fd5b6040805160208082018990527f010000000000000000000000000000000000000000000000000000000000000060ff89160282840152604182018690526c0100000000000000000000000073ffffffffffffffffffffffffffffffffffffffff86160260618301528251605581840301815260759092019092528051910120600060017ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141878a097ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641410360ff89161561041557601c610418565b601b5b8a7ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641418c870960010260405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610497573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015173ffffffffffffffffffffffffffffffffffffffff86811691161493505050509594505050505056fea165627a7a7230582034c20ceef3b76be68cab42df5d780a7cb56f8cd451c857c9748c70bac1b837310029",
   "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x514 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x8EFB3BB2 DUP2 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xE493EF8C EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0xFF51DFF2 EQ PUSH2 0x97 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0x106 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0x12A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x80 ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1 DUP2 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1 DUP7 LT PUSH2 0x1DE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5075626C69632D6B65792078203E3D2048414C465F5100000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP5 LT PUSH2 0x292 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7369676E6174757265206D7573742062652072656475636564206D6F64756C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2051000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2B7 JUMPI POP PUSH1 0x0 DUP7 GT JUMPDEST DUP1 ISZERO PUSH2 0x2C3 JUMPI POP PUSH1 0x0 DUP5 GT JUMPDEST DUP1 ISZERO PUSH2 0x2CF JUMPI POP PUSH1 0x0 DUP4 GT JUMPDEST ISZERO ISZERO PUSH2 0x33C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F207A65726F20696E7075747320616C6C6F77656400000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP10 SWAP1 MSTORE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 PUSH1 0xFF DUP10 AND MUL DUP3 DUP5 ADD MSTORE PUSH1 0x41 DUP3 ADD DUP7 SWAP1 MSTORE PUSH13 0x1000000000000000000000000 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND MUL PUSH1 0x61 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x55 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x75 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x0 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP8 DUP11 MULMOD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 SUB PUSH1 0xFF DUP10 AND ISZERO PUSH2 0x415 JUMPI PUSH1 0x1C PUSH2 0x418 JUMP JUMPDEST PUSH1 0x1B JUMPDEST DUP11 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP13 DUP8 MULMOD PUSH1 0x1 MUL PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x497 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND SWAP2 AND EQ SWAP4 POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 CALLVALUE 0xc2 0xc 0xee RETURN 0xb7 PUSH12 0xE68CAB42DF5D780A7CB56F8C 0xd4 MLOAD 0xc8 JUMPI 0xc9 PUSH21 0x8C70BAC1B837310029000000000000000000000000 ",
   "sourceMap": "261:7589:9:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;261:7589:9;;;;;;;"
  },
  "deployedBytecode": {
   "linkReferences": {},
   "object": "0x6080604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416638efb3bb2811461005b578063e493ef8c14610082578063ff51dff214610097575b600080fd5b34801561006757600080fd5b50610070610106565b60408051918252519081900360200190f35b34801561008e57600080fd5b5061007061012a565b3480156100a357600080fd5b506100f2600480360360a08110156100ba57600080fd5b50803590602081013560ff16906040810135906060810135906080013573ffffffffffffffffffffffffffffffffffffffff1661014e565b604080519115158252519081900360200190f35b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a181565b7ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414181565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a186106101de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5075626c69632d6b65792078203e3d2048414c465f5100000000000000000000604482015290519081900360640190fd5b7ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141841061029257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f7369676e6174757265206d7573742062652072656475636564206d6f64756c6f60448201527f2051000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b73ffffffffffffffffffffffffffffffffffffffff8216158015906102b75750600086115b80156102c35750600084115b80156102cf5750600083115b151561033c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6e6f207a65726f20696e7075747320616c6c6f77656400000000000000000000604482015290519081900360640190fd5b6040805160208082018990527f010000000000000000000000000000000000000000000000000000000000000060ff89160282840152604182018690526c0100000000000000000000000073ffffffffffffffffffffffffffffffffffffffff86160260618301528251605581840301815260759092019092528051910120600060017ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141878a097ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641410360ff89161561041557601c610418565b601b5b8a7ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641418c870960010260405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610497573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015173ffffffffffffffffffffffffffffffffffffffff86811691161493505050509594505050505056fea165627a7a7230582034c20ceef3b76be68cab42df5d780a7cb56f8cd451c857c9748c70bac1b837310029",
   "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x8EFB3BB2 DUP2 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xE493EF8C EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0xFF51DFF2 EQ PUSH2 0x97 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0x106 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0x12A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0xBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x80 ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1 DUP2 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1 DUP7 LT PUSH2 0x1DE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5075626C69632D6B65792078203E3D2048414C465F5100000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP5 LT PUSH2 0x292 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7369676E6174757265206D7573742062652072656475636564206D6F64756C6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2051000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x84 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2B7 JUMPI POP PUSH1 0x0 DUP7 GT JUMPDEST DUP1 ISZERO PUSH2 0x2C3 JUMPI POP PUSH1 0x0 DUP5 GT JUMPDEST DUP1 ISZERO PUSH2 0x2CF JUMPI POP PUSH1 0x0 DUP4 GT JUMPDEST ISZERO ISZERO PUSH2 0x33C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F207A65726F20696E7075747320616C6C6F77656400000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP10 SWAP1 MSTORE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 PUSH1 0xFF DUP10 AND MUL DUP3 DUP5 ADD MSTORE PUSH1 0x41 DUP3 ADD DUP7 SWAP1 MSTORE PUSH13 0x1000000000000000000000000 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND MUL PUSH1 0x61 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x55 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x75 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x0 PUSH1 0x1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP8 DUP11 MULMOD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 SUB PUSH1 0xFF DUP10 AND ISZERO PUSH2 0x415 JUMPI PUSH1 0x1C PUSH2 0x418 JUMP JUMPDEST PUSH1 0x1B JUMPDEST DUP11 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP13 DUP8 MULMOD PUSH1 0x1 MUL PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x497 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND SWAP2 AND EQ SWAP4 POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 CALLVALUE 0xc2 0xc 0xee RETURN 0xb7 PUSH12 0xE68CAB42DF5D780A7CB56F8C 0xd4 MLOAD 0xc8 JUMPI 0xc9 PUSH21 0x8C70BAC1B837310029000000000000000000000000 ",
   "sourceMap": "261:7589:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;594:45;;8:9:-1;5:2;;;30:1;27;20:12;5:2;594:45:9;;;;;;;;;;;;;;;;;;;;356:170;;8:9:-1;5:2;;;30:1;27;20:12;5:2;356:170:9;;;;5755:2093;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5755:2093:9;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;5755:2093:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;594:45;627:12;594:45;:::o;356:170::-;460:66;356:170;:::o;5755:2093::-;5941:4;627:12;5961:23;;5953:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;460:66;6109:13;;6101:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6483:40;;;;;;;:62;;;6544:1;6527:14;:18;6483:62;:85;;;;;6567:1;6555:9;:13;6483:85;:100;;;;;6582:1;6572:7;:11;6483:100;6475:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6761:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;6761:92:9;;;;;;;6751:103;;;;;6661:20;6761:92;460:66;7485:9;7469:14;7462:36;460:66;7458:40;7667:18;;;;7666:30;;7694:2;7666:30;;;7689:2;7666:30;7712:14;460:66;7764:14;7750:12;7743:39;7735:48;;7365:419;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;7365:419:9;;;;;7797:46;;;;;;;;-1:-1:-1;;;;5755:2093:9;;;;;;;:::o"
  },
  "methodIdentifiers": {
   "HALF_Q()": "8efb3bb2",
   "Q()": "e493ef8c",
   "verifySignature(uint256,uint8,uint256,uint256,address)": "ff51dff2"
  }
 },
 "metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"HALF_Q\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Q\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"signingPubKeyX\",\"type\":\"uint256\"},{\"name\":\"pubKeyYParity\",\"type\":\"uint8\"},{\"name\":\"signature\",\"type\":\"uint256\"},{\"name\":\"msgHash\",\"type\":\"uint256\"},{\"name\":\"nonceTimesGeneratorAddress\",\"type\":\"address\"}],\"name\":\"verifySignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"verifySignature(uint256,uint8,uint256,uint256,address)\":{\"details\":\"See https://en.wikipedia.org/wiki/Schnorr_signature for reference.In what follows, let d be your secret key, PK be your public key, PKx be the x ordinate of your public key, and PKyp be the parity bit for the y ordinate (i.e., 0 if PKy is even, 1 if odd.)**************************************************************************TO CREATE A VALID SIGNATURE FOR THIS METHODFirst PKx must be less than HALF_Q. Then follow these instructions (see evm/test/schnorr_test.js, for an example of carrying them out):1. Hash the target message to a uint256, called msgHash here, using keccak2562. Pick k uniformly and cryptographically securely randomly from {0,...,Q-1}. It is critical that k remains confidential, as your private key can be reconstructed from k and the signature.3. Compute k*g in the secp256k1 group, where g is the group generator. (This is the same as computing the public key from the secret key k. But it's OK if k*g's x ordinate is greater than HALF_Q.)4. Compute the ethereum address for k*g. This is the lower 160 bits of the keccak hash of the concatenated affine coordinates of k*g, as 32-byte big-endians. (For instance, you could pass k to ethereumjs-utils's privateToAddress to compute this, though that should be strictly a development convenience, not for handling live secrets, unless you've locked your javascript environment down very carefully.) Call this address nonceTimesGeneratorAddress.5. Compute e=uint256(keccak256(PKx as a 32-byte big-endian \\u2016 PKyp as a single byte \\u2016 msgHash \\u2016 nonceTimesGeneratorAddress)) This value e is called \\\"msgChallenge\\\" in verifySignature's source code below. Here \\\"\\u2016\\\" means concatenation of the listed byte arrays.6. Let x be your secret key. Compute s = (k - d * e) % Q. Add Q to it, if it's negative. This is your signature. (d is your secret key.)**************************************************************************TO VERIFY A SIGNATUREGiven a signature (s, e) of msgHash, constructed as above, compute S=e*PK+s*generator in the secp256k1 group law, and then the ethereum address of S, as described in step 4. Call that nonceTimesGeneratorAddress. Then call the verifySignature method as:verifySignature(PKx, PKyp, s, msgHash, nonceTimesGeneratorAddress)**************************************************************************This signging scheme deviates slightly from the classical Schnorr signature, in that the address of k*g is used in place of k*g itself, both when calculating e and when verifying sum S as described in the verification paragraph above. This reduces the difficulty of brute-forcing a signature by trying random secp256k1 points in place of k*g in the signature verification process from 256 bits to 160 bits. However, the difficulty of cracking the public key using \\\"baby-step, giant-step\\\" is only 128 bits, so this weakening constitutes no compromise in the security of the signatures or the key.The constraint signingPubKeyX < HALF_Q comes from Eq. (281), p. 24 of Yellow Paper version 78d7b9a. ecrecover only accepts \\\"s\\\" inputs less than HALF_Q, to protect against a signature- malleability vulnerability in ECDSA. Schnorr does not have this vulnerability, but we must account for ecrecover's defense anyway. And since we are abusing ecrecover by putting signingPubKeyX in ecrecover's \\\"s\\\" argument the constraint applies to signingPubKeyX, even though it represents a value in the base field, and has no natural relationship to the order of the curve's cyclic group.**************************************************************************\",\"params\":{\"msgHash\":\"is a 256-bit hash of the message being signed.\",\"nonceTimesGeneratorAddress\":\"is the ethereum address of k*g in the above instructions**************************************************************************\",\"pubKeyYParity\":\"is 0 if the y ordinate of the public key is even, 1  if it's odd.\",\"signature\":\"is the actual signature, described as s in the above instructions.\",\"signingPubKeyX\":\"is the x ordinate of the public key. This must be less than HALF_Q. \"},\"return\":\"True if passed a valid signature, false otherwise. \"}}},\"userdoc\":{\"methods\":{\"verifySignature(uint256,uint8,uint256,uint256,address)\":{\"notice\":\"**************************************************************************verifySignature returns true iff passed a valid Schnorr signature.\"}},\"notice\":\"/////////////////////////////////////////////////////////////////////////////\"}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.5/dev/SchnorrSECP256K1.sol\":\"SchnorrSECP256K1\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.5/dev/SchnorrSECP256K1.sol\":{\"keccak256\":\"0x5c82b83c6aca50fa2ab07bc0b31bac6ee33c7ade303102ecc688087c351f5317\",\"urls\":[\"bzzr://e4d63d170c40da3609bfe0e10fa679bc4318083e6f9d42dbee72ba5e91312d8d\"]}},\"version\":1}"
})

if (process.env.NODE_ENV === 'test') {
  try {
    eval('SchnorrSECP256K1.setProvider(web3.currentProvider)')
  } catch (e) {}
}

exports.SchnorrSECP256K1 = SchnorrSECP256K1
