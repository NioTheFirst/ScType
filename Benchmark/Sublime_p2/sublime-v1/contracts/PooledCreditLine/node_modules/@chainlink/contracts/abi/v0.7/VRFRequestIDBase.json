{
	"schemaVersion": "2.0.0",
	"contractName": "VRFRequestIDBase",
	"compilerOutput": {
		"abi": [],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"evm": {
			"bytecode": {
				"object": "0x6080604052348015600f57600080fd5b50601680601d6000396000f3fe6080604052600080fdfea164736f6c6343000706000a",
				"sourceMap": "57:1592:13:-:0;;;;;;;;;;;;;;;;;;;"
			},
			"deployedBytecode": {
				"object": "0x6080604052600080fdfea164736f6c6343000706000a",
				"sourceMap": "57:1592:13:-:0;;;;;"
			},
			"methodIdentifiers": {}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/VRFRequestIDBase.sol\":\"VRFRequestIDBase\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.7/dev/VRFRequestIDBase.sol\":{\"keccak256\":\"0x9d668e0943b57e2e7d33e6f1b38085da335252971ce9202a7de8a17afdad8511\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4aa0159cc8ba631e26358b6e8362a5776e039251a6a75d839001c22866452bd6\",\"dweb:/ipfs/QmVC8DvJna6yo56FZtXnJ17Lj7sZV3x4mXqheiiXsiziaf\"]}},\"version\":1}",
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"sources": {
		"dev/VRFRequestIDBase.sol": {
			"id": 13
		}
	},
	"sourceCodes": {
		"dev/VRFRequestIDBase.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\ncontract VRFRequestIDBase {\n\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(\n    bytes32 _keyHash,\n    uint256 _vRFInputSeed\n  )\n    internal\n    pure\n    returns (\n      bytes32\n    )\n  {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n"
	},
	"sourceTreeHashHex": "0x9d668e0943b57e2e7d33e6f1b38085da335252971ce9202a7de8a17afdad8511",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.7.6+commit.7338295f.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"metadata": {
				"bytecodeHash": "none"
			},
			"remappings": []
		}
	},
	"chains": {}
}