/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface MockV2AggregatorInterface extends Interface {
  functions: {
    getAnswer: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    getTimestamp: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    latestAnswer: TypedFunctionDescription<{ encode([]: []): string }>;

    latestRound: TypedFunctionDescription<{ encode([]: []): string }>;

    latestTimestamp: TypedFunctionDescription<{ encode([]: []): string }>;

    updateAnswer: TypedFunctionDescription<{
      encode([_answer]: [BigNumberish]): string;
    }>;

    updateRoundData: TypedFunctionDescription<{
      encode([_roundId, _answer, _timestamp, _startedAt]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    AnswerUpdated: TypedEventDescription<{
      encodeTopics([current, roundId, updatedAt]: [
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    NewRound: TypedEventDescription<{
      encodeTopics([roundId, startedBy, startedAt]: [
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class MockV2Aggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MockV2Aggregator;
  attach(addressOrName: string): MockV2Aggregator;
  deployed(): Promise<MockV2Aggregator>;

  on(event: EventFilter | string, listener: Listener): MockV2Aggregator;
  once(event: EventFilter | string, listener: Listener): MockV2Aggregator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MockV2Aggregator;
  removeAllListeners(eventName: EventFilter | string): MockV2Aggregator;
  removeListener(eventName: any, listener: Listener): MockV2Aggregator;

  interface: MockV2AggregatorInterface;

  functions: {
    getAnswer(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getAnswer(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getTimestamp(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTimestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    latestAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestRound(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestRound()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestTimestamp(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestTimestamp()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    updateAnswer(
      _answer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "updateAnswer(int256)"(
      _answer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateRoundData(
      _roundId: BigNumberish,
      _answer: BigNumberish,
      _timestamp: BigNumberish,
      _startedAt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "updateRoundData(uint256,int256,uint256,uint256)"(
      _roundId: BigNumberish,
      _answer: BigNumberish,
      _timestamp: BigNumberish,
      _startedAt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getAnswer(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getAnswer(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getTimestamp(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getTimestamp(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  latestAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

  "latestAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  latestRound(overrides?: TransactionOverrides): Promise<BigNumber>;

  "latestRound()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  latestTimestamp(overrides?: TransactionOverrides): Promise<BigNumber>;

  "latestTimestamp()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  updateAnswer(
    _answer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "updateAnswer(int256)"(
    _answer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateRoundData(
    _roundId: BigNumberish,
    _answer: BigNumberish,
    _timestamp: BigNumberish,
    _startedAt: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "updateRoundData(uint256,int256,uint256,uint256)"(
    _roundId: BigNumberish,
    _answer: BigNumberish,
    _timestamp: BigNumberish,
    _startedAt: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AnswerUpdated(
      current: BigNumberish | null,
      roundId: BigNumberish | null,
      updatedAt: null
    ): EventFilter;

    NewRound(
      roundId: BigNumberish | null,
      startedBy: string | null,
      startedAt: null
    ): EventFilter;
  };

  estimate: {
    getAnswer(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getAnswer(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getTimestamp(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getTimestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    latestAnswer(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestAnswer()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestRound(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestRound()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestTimestamp(overrides?: TransactionOverrides): Promise<BigNumber>;

    "latestTimestamp()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    updateAnswer(
      _answer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "updateAnswer(int256)"(
      _answer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    updateRoundData(
      _roundId: BigNumberish,
      _answer: BigNumberish,
      _timestamp: BigNumberish,
      _startedAt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "updateRoundData(uint256,int256,uint256,uint256)"(
      _roundId: BigNumberish,
      _answer: BigNumberish,
      _timestamp: BigNumberish,
      _startedAt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
