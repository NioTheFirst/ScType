/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from ".";

interface FlagsTestHelperInterface extends Interface {
  functions: {
    flags: TypedFunctionDescription<{ encode([]: []): string }>;

    getFlag: TypedFunctionDescription<{ encode([subject]: [string]): string }>;

    getFlags: TypedFunctionDescription<{
      encode([subjects]: [string[]]): string;
    }>;
  };

  events: {};
}

export class FlagsTestHelper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): FlagsTestHelper;
  attach(addressOrName: string): FlagsTestHelper;
  deployed(): Promise<FlagsTestHelper>;

  on(event: EventFilter | string, listener: Listener): FlagsTestHelper;
  once(event: EventFilter | string, listener: Listener): FlagsTestHelper;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): FlagsTestHelper;
  removeAllListeners(eventName: EventFilter | string): FlagsTestHelper;
  removeListener(eventName: any, listener: Listener): FlagsTestHelper;

  interface: FlagsTestHelperInterface;

  functions: {
    flags(overrides?: TransactionOverrides): Promise<string>;

    "flags()"(overrides?: TransactionOverrides): Promise<string>;

    getFlag(
      subject: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "getFlag(address)"(
      subject: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    getFlags(
      subjects: string[],
      overrides?: TransactionOverrides
    ): Promise<boolean[]>;

    "getFlags(address[])"(
      subjects: string[],
      overrides?: TransactionOverrides
    ): Promise<boolean[]>;
  };

  flags(overrides?: TransactionOverrides): Promise<string>;

  "flags()"(overrides?: TransactionOverrides): Promise<string>;

  getFlag(subject: string, overrides?: TransactionOverrides): Promise<boolean>;

  "getFlag(address)"(
    subject: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  getFlags(
    subjects: string[],
    overrides?: TransactionOverrides
  ): Promise<boolean[]>;

  "getFlags(address[])"(
    subjects: string[],
    overrides?: TransactionOverrides
  ): Promise<boolean[]>;

  filters: {};

  estimate: {
    flags(overrides?: TransactionOverrides): Promise<BigNumber>;

    "flags()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getFlag(
      subject: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getFlag(address)"(
      subject: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getFlags(
      subjects: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getFlags(address[])"(
      subjects: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
