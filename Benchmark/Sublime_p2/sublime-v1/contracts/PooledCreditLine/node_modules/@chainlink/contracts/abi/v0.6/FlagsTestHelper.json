{
	"schemaVersion": "2.0.0",
	"contractName": "FlagsTestHelper",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "flagsContract",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "flags",
				"outputs": [
					{
						"internalType": "contract Flags",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "subject",
						"type": "address"
					}
				],
				"name": "getFlag",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "subjects",
						"type": "address[]"
					}
				],
				"name": "getFlags",
				"outputs": [
					{
						"internalType": "bool[]",
						"name": "",
						"type": "bool[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b506040516104423803806104428339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b03199092169190911790556103dd806100656000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063357e47fe1461004657806364cc4aa51461008d5780637d723cac146100be575b600080fd5b6100796004803603602081101561005c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661017e565b604080519115158252519081900360200190f35b610095610224565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61012e600480360360208110156100d457600080fd5b8101906020810181356401000000008111156100ef57600080fd5b82018360208201111561010157600080fd5b8035906020019184602083028401116401000000008311171561012357600080fd5b509092509050610240565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561016a578181015183820152602001610152565b505050509050019250505060405180910390f35b60008054604080517f357e47fe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529151919092169163357e47fe916024808301926020929190829003018186803b1580156101f257600080fd5b505afa158015610206573d6000803e3d6000fd5b505050506040513d602081101561021c57600080fd5b505192915050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000546040517f7d723cac0000000000000000000000000000000000000000000000000000000081526020600482018181526024830185905260609373ffffffffffffffffffffffffffffffffffffffff1692637d723cac928792879290918291604401908590850280828437600081840152601f19601f820116905080830192505050935050505060006040518083038186803b1580156102e157600080fd5b505afa1580156102f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561033c57600080fd5b810190808051604051939291908464010000000082111561035c57600080fd5b90830190602082018581111561037157600080fd5b825186602082028301116401000000008211171561038e57600080fd5b82525081516020918201928201910280838360005b838110156103bb5781810151838201526020016103a3565b5050505090500160405250505090509291505056fea164736f6c6343000606000a",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x442 CODESIZE SUB DUP1 PUSH2 0x442 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x3DD DUP1 PUSH2 0x65 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x357E47FE EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x64CC4AA5 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x7D723CAC EQ PUSH2 0xBE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x79 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x17E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x95 PUSH2 0x224 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x12E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x101 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x240 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 DUP2 ADD SWAP2 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x152 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x357E47FE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x357E47FE SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x206 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7D723CAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 PUSH4 0x7D723CAC SWAP3 DUP8 SWAP3 DUP8 SWAP3 SWAP1 SWAP2 DUP3 SWAP2 PUSH1 0x44 ADD SWAP1 DUP6 SWAP1 DUP6 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP4 POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x35C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 DUP3 ADD SWAP2 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3BB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3A3 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP MOD MOD STOP EXP ",
				"sourceMap": "81:430:48:-:0;;;133:95;5:9:-1;2:2;;;27:1;24;17:12;2:2;133:95:48;;;;;;;;;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;133:95:48;195:5;:28;;-1:-1:-1;;;;;195:28:48;;;-1:-1:-1;;;;;;195:28:48;;;;;;;;;81:430;;;;;;"
			},
			"deployedBytecode": {
				"immutableReferences": {},
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063357e47fe1461004657806364cc4aa51461008d5780637d723cac146100be575b600080fd5b6100796004803603602081101561005c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661017e565b604080519115158252519081900360200190f35b610095610224565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61012e600480360360208110156100d457600080fd5b8101906020810181356401000000008111156100ef57600080fd5b82018360208201111561010157600080fd5b8035906020019184602083028401116401000000008311171561012357600080fd5b509092509050610240565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561016a578181015183820152602001610152565b505050509050019250505060405180910390f35b60008054604080517f357e47fe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529151919092169163357e47fe916024808301926020929190829003018186803b1580156101f257600080fd5b505afa158015610206573d6000803e3d6000fd5b505050506040513d602081101561021c57600080fd5b505192915050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000546040517f7d723cac0000000000000000000000000000000000000000000000000000000081526020600482018181526024830185905260609373ffffffffffffffffffffffffffffffffffffffff1692637d723cac928792879290918291604401908590850280828437600081840152601f19601f820116905080830192505050935050505060006040518083038186803b1580156102e157600080fd5b505afa1580156102f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561033c57600080fd5b810190808051604051939291908464010000000082111561035c57600080fd5b90830190602082018581111561037157600080fd5b825186602082028301116401000000008211171561038e57600080fd5b82525081516020918201928201910280838360005b838110156103bb5781810151838201526020016103a3565b5050505090500160405250505090509291505056fea164736f6c6343000606000a",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x357E47FE EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x64CC4AA5 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x7D723CAC EQ PUSH2 0xBE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x79 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x17E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x95 PUSH2 0x224 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x12E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x101 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x240 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 DUP2 ADD SWAP2 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x152 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x357E47FE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x357E47FE SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x206 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x21C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7D723CAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 SWAP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 PUSH4 0x7D723CAC SWAP3 DUP8 SWAP3 DUP8 SWAP3 SWAP1 SWAP2 DUP3 SWAP2 PUSH1 0x44 ADD SWAP1 DUP6 SWAP1 DUP6 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP4 POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x35C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD DUP7 PUSH1 0x20 DUP3 MUL DUP4 ADD GT PUSH5 0x100000000 DUP3 GT OR ISZERO PUSH2 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 DUP3 ADD SWAP2 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3BB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3A3 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD PUSH1 0x40 MSTORE POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP MOD MOD STOP EXP ",
				"sourceMap": "81:430:48:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;81:430:48;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;232:124:48;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;232:124:48;;;;:::i;:::-;;;;;;;;;;;;;;;;;;110:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;360:148;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;360:148:48;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;360:148:48;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;360:148:48;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;-1:-1;360:148:48;;-1:-1:-1;360:148:48;-1:-1:-1;360:148:48;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;360:148:48;;;;;;;;;;;;;;;;;232:124;308:4;329:5;;:22;;;;;;:5;:22;;;;;;;;;:5;;;;;:13;;:22;;;;;;;;;;;;;;:5;:22;;;2:2:-1;;;;27:1;24;17:12;2:2;329:22:48;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;329:22:48;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;329:22:48;;232:124;-1:-1:-1;;232:124:48:o;110:18::-;;;;;;:::o;360:148::-;479:5;;:24;;;;;;;;;;;;;;;;;;449:13;;479:5;;;:14;;494:8;;;;479:24;;;;;;;494:8;;479:24;;;494:8;479:24;1:33:-1;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;479:24:48;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;479:24:48;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;479:24:48;;;;;;39:16:-1;36:1;17:17;2:54;101:4;479:24:48;80:15:-1;;;97:9;76:31;65:43;;120:4;113:20;15:2;7:11;;4:2;;;31:1;28;21:12;4:2;479:24:48;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;373:25;;-1:-1;479:24:48;;421:4:-1;412:14;;;;479:24:48;;;;;412:14:-1;479:24:48;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;479:24:48;;;;;;;;;;;472:31;;360:148;;;;:::o"
			},
			"methodIdentifiers": {
				"flags()": "64cc4aa5",
				"getFlag(address)": "357e47fe",
				"getFlags(address[])": "7d723cac"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flagsContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"flags\",\"outputs\":[{\"internalType\":\"contract Flags\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"getFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"subjects\",\"type\":\"address[]\"}],\"name\":\"getFlags\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/tests/FlagsTestHelper.sol\":\"FlagsTestHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/Flags.sol\":{\"keccak256\":\"0x428c7310b3f42b9d25d8fbbf409d60716f3cf956032863eff168c06904fa056f\",\"urls\":[\"bzz-raw://0038c8956b95d3684e080c8d62824408804b70ad29e46ccf376e70e88ed267d6\",\"dweb:/ipfs/QmRPcUjmqgtvydiJDL3BC79JxiFpYy2Bs2ghjVBUZQsGhm\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/Owned.sol\":{\"keccak256\":\"0x93c014d58b820cc7c081b4b604d939c21942296fe0c0cb0069ca4ee63d728bc6\",\"urls\":[\"bzz-raw://b7e8c0742efb5691733cfc4ab1d81221c4a513223820dea3c6885c138a0fb3a7\",\"dweb:/ipfs/QmV8PwFJcGVdy5AAN4hmeKuRwF3eAjrbfYSeFs3Q5cAYE4\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/SimpleReadAccessController.sol\":{\"keccak256\":\"0xac369a002088e3934f3bf74545ccc28d79b05b05fe2ac6f76c963b5707d8bfcb\",\"urls\":[\"bzz-raw://010491b2188a7dd11045993caf6c0c28529f36ca1fabf1f2a0fe22669b0fc5d4\",\"dweb:/ipfs/QmRyBFRsdFehSUbjqUZHvxgMLwWfL28w7H3sbQqcw86jWU\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/SimpleWriteAccessController.sol\":{\"keccak256\":\"0x0daa95c237a078eb1f2e68839c44330f7ef36f5562e6140f62305410031b17be\",\"urls\":[\"bzz-raw://b0e15ad3289b9670513bae7cbcbf6eadb63c546ded3244d0c4c54514815e5e16\",\"dweb:/ipfs/QmYQ5W2s9qd3Y8QSsfGqiZAJtp5dTmMyGmVJHUxJVU3Rju\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/interfaces/AccessControllerInterface.sol\":{\"keccak256\":\"0x92f6ce5945557043b33b5dcd45045aac4c3cb40a85859570750894f0e221a865\",\"urls\":[\"bzz-raw://082523e85a8e46652fbb91791669c8a29c5e2e3de4f68a12d35657ddbe940a26\",\"dweb:/ipfs/Qme8YwLXNzzTVXVCmnJkSaxiLBWxjvut7yRQgDhy3zcMKU\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/interfaces/FlagsInterface.sol\":{\"keccak256\":\"0xbc6623d323a2971d9cb0ef13f8991fcba0567eae5c808565e39487b3477c3345\",\"urls\":[\"bzz-raw://e1400098fb89beeff0237b94d441f69da424cf59fdfcd1881e4fc6894f58b037\",\"dweb:/ipfs/QmPXJS543GSzF8w5yrES3iXth7L9RfN6eHXaUptj1ARenw\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/tests/FlagsTestHelper.sol\":{\"keccak256\":\"0x7361ee424d09d71a480fee8338ac1f54aa6a6b1d1e36598f99a401c1c020f28b\",\"urls\":[\"bzz-raw://9f01939aa9518e8ea96d5d892fff191d531bfa85ee56635947a0f9a5ad7947ac\",\"dweb:/ipfs/QmVwymUu4L2eWdMrh7kx5564hn3wkZ7NiTq4Ypio4vvqGi\"]}},\"version\":1}",
		"userdoc": {
			"methods": {}
		}
	},
	"sources": {
		"tests/FlagsTestHelper.sol": {
			"id": 48
		},
		"Flags.sol": {
			"id": 8
		},
		"SimpleReadAccessController.sol": {
			"id": 19
		},
		"SimpleWriteAccessController.sol": {
			"id": 20
		},
		"Owned.sol": {
			"id": 13
		},
		"interfaces/AccessControllerInterface.sol": {
			"id": 27
		},
		"interfaces/FlagsInterface.sol": {
			"id": 35
		}
	},
	"sourceCodes": {
		"tests/FlagsTestHelper.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"../Flags.sol\";\n\ncontract FlagsTestHelper {\n  Flags public flags;\n\n  constructor(\n    address flagsContract\n  )\n    public\n  {\n    flags = Flags(flagsContract);\n  }\n\n  function getFlag(\n    address subject\n  )\n    external\n    view\n    returns(bool)\n  {\n    return flags.getFlag(subject);\n  }\n\n  function getFlags(\n    address[] calldata subjects\n  )\n    external\n    view\n    returns(bool[] memory)\n  {\n    return flags.getFlags(subjects);\n  }\n\n}\n",
		"Flags.sol": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.6;\n\n\nimport \"./SimpleReadAccessController.sol\";\nimport \"./interfaces/AccessControllerInterface.sol\";\nimport \"./interfaces/FlagsInterface.sol\";\n\n\n/**\n * @title The Flags contract\n * @notice Allows flags to signal to any reader on the access control list.\n * The owner can set flags, or designate other addresses to set flags. The\n * owner must turn the flags off, other setters cannot. An expected pattern is\n * to allow addresses to raise flags on themselves, so if you are subscribing to\n * FlagOn events you should filter for addresses you care about.\n */\ncontract Flags is FlagsInterface, SimpleReadAccessController {\n\n  AccessControllerInterface public raisingAccessController;\n\n  mapping(address => bool) private flags;\n\n  event FlagRaised(\n    address indexed subject\n  );\n  event FlagLowered(\n    address indexed subject\n  );\n  event RaisingAccessControllerUpdated(\n    address indexed previous,\n    address indexed current\n  );\n\n  /**\n   * @param racAddress address for the raising access controller.\n   */\n  constructor(\n    address racAddress\n  )\n    public\n  {\n    setRaisingAccessController(racAddress);\n  }\n\n  /**\n   * @notice read the warning flag status of a contract address.\n   * @param subject The contract address being checked for a flag.\n   * @return A true value indicates that a flag was raised and a\n   * false value indicates that no flag was raised.\n   */\n  function getFlag(address subject)\n    external\n    view\n    override\n    checkAccess()\n    returns (bool)\n  {\n    return flags[subject];\n  }\n\n  /**\n   * @notice read the warning flag status of a contract address.\n   * @param subjects An array of addresses being checked for a flag.\n   * @return An array of bools where a true value for any flag indicates that\n   * a flag was raised and a false value indicates that no flag was raised.\n   */\n  function getFlags(address[] calldata subjects)\n    external\n    view\n    override\n    checkAccess()\n    returns (bool[] memory)\n  {\n    bool[] memory responses = new bool[](subjects.length);\n    for (uint256 i = 0; i < subjects.length; i++) {\n      responses[i] = flags[subjects[i]];\n    }\n    return responses;\n  }\n\n  /**\n   * @notice enable the warning flag for an address.\n   * Access is controlled by raisingAccessController, except for owner\n   * who always has access.\n   * @param subject The contract address whose flag is being raised\n   */\n  function raiseFlag(address subject)\n    external\n    override\n  {\n    require(allowedToRaiseFlags(), \"Not allowed to raise flags\");\n\n    tryToRaiseFlag(subject);\n  }\n\n  /**\n   * @notice enable the warning flags for multiple addresses.\n   * Access is controlled by raisingAccessController, except for owner\n   * who always has access.\n   * @param subjects List of the contract addresses whose flag is being raised\n   */\n  function raiseFlags(address[] calldata subjects)\n    external\n    override\n  {\n    require(allowedToRaiseFlags(), \"Not allowed to raise flags\");\n\n    for (uint256 i = 0; i < subjects.length; i++) {\n      tryToRaiseFlag(subjects[i]);\n    }\n  }\n\n  /**\n   * @notice allows owner to disable the warning flags for multiple addresses.\n   * @param subjects List of the contract addresses whose flag is being lowered\n   */\n  function lowerFlags(address[] calldata subjects)\n    external\n    override\n    onlyOwner()\n  {\n    for (uint256 i = 0; i < subjects.length; i++) {\n      address subject = subjects[i];\n\n      if (flags[subject]) {\n        flags[subject] = false;\n        emit FlagLowered(subject);\n      }\n    }\n  }\n\n  /**\n   * @notice allows owner to change the access controller for raising flags.\n   * @param racAddress new address for the raising access controller.\n   */\n  function setRaisingAccessController(\n    address racAddress\n  )\n    public\n    override\n    onlyOwner()\n  {\n    address previous = address(raisingAccessController);\n\n    if (previous != racAddress) {\n      raisingAccessController = AccessControllerInterface(racAddress);\n\n      emit RaisingAccessControllerUpdated(previous, racAddress);\n    }\n  }\n\n\n  // PRIVATE\n\n  function allowedToRaiseFlags()\n    private\n    view\n    returns (bool)\n  {\n    return msg.sender == owner ||\n      raisingAccessController.hasAccess(msg.sender, msg.data);\n  }\n\n  function tryToRaiseFlag(address subject)\n    private\n  {\n    if (!flags[subject]) {\n      flags[subject] = true;\n      emit FlagRaised(subject);\n    }\n  }\n\n}\n",
		"SimpleReadAccessController.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\nimport \"./SimpleWriteAccessController.sol\";\n\n/**\n * @title SimpleReadAccessController\n * @notice Gives access to:\n * - any externally owned account (note that offchain actors can always read\n * any contract storage regardless of onchain access control measures, so this\n * does not weaken the access control while improving usability)\n * - accounts explicitly added to an access list\n * @dev SimpleReadAccessController is not suitable for access controlling writes\n * since it grants any externally owned account access! See\n * SimpleWriteAccessController for that.\n */\ncontract SimpleReadAccessController is SimpleWriteAccessController {\n\n  /**\n   * @notice Returns the access of an address\n   * @param _user The address to query\n   */\n  function hasAccess(\n    address _user,\n    bytes memory _calldata\n  )\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return super.hasAccess(_user, _calldata) || _user == tx.origin;\n  }\n\n}\n",
		"SimpleWriteAccessController.sol": "// SPDX-License-Identifier: MIT\npragma solidity >0.6.0 <0.8.0;\n\nimport \"./Owned.sol\";\nimport \"./interfaces/AccessControllerInterface.sol\";\n\n/**\n * @title SimpleWriteAccessController\n * @notice Gives access to accounts explicitly added to an access list by the\n * controller's owner.\n * @dev does not make any special permissions for externally, see\n * SimpleReadAccessController for that.\n */\ncontract SimpleWriteAccessController is AccessControllerInterface, Owned {\n\n  bool public checkEnabled;\n  mapping(address => bool) internal accessList;\n\n  event AddedAccess(address user);\n  event RemovedAccess(address user);\n  event CheckAccessEnabled();\n  event CheckAccessDisabled();\n\n  constructor()\n    public\n  {\n    checkEnabled = true;\n  }\n\n  /**\n   * @notice Returns the access of an address\n   * @param _user The address to query\n   */\n  function hasAccess(\n    address _user,\n    bytes memory\n  )\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return accessList[_user] || !checkEnabled;\n  }\n\n  /**\n   * @notice Adds an address to the access list\n   * @param _user The address to add\n   */\n  function addAccess(address _user)\n    external\n    onlyOwner()\n  {\n    if (!accessList[_user]) {\n      accessList[_user] = true;\n\n      emit AddedAccess(_user);\n    }\n  }\n\n  /**\n   * @notice Removes an address from the access list\n   * @param _user The address to remove\n   */\n  function removeAccess(address _user)\n    external\n    onlyOwner()\n  {\n    if (accessList[_user]) {\n      accessList[_user] = false;\n\n      emit RemovedAccess(_user);\n    }\n  }\n\n  /**\n   * @notice makes the access check enforced\n   */\n  function enableAccessCheck()\n    external\n    onlyOwner()\n  {\n    if (!checkEnabled) {\n      checkEnabled = true;\n\n      emit CheckAccessEnabled();\n    }\n  }\n\n  /**\n   * @notice makes the access check unenforced\n   */\n  function disableAccessCheck()\n    external\n    onlyOwner()\n  {\n    if (checkEnabled) {\n      checkEnabled = false;\n\n      emit CheckAccessDisabled();\n    }\n  }\n\n  /**\n   * @dev reverts if the caller does not have access\n   */\n  modifier checkAccess() {\n    require(hasAccess(msg.sender, msg.data), \"No access\");\n    _;\n  }\n}\n",
		"Owned.sol": "// SPDX-License-Identifier: MIT\npragma solidity >0.6.0 <0.8.0;\n\n/**\n * @title The Owned contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract Owned {\n\n  address public owner;\n  address private pendingOwner;\n\n  event OwnershipTransferRequested(\n    address indexed from,\n    address indexed to\n  );\n  event OwnershipTransferred(\n    address indexed from,\n    address indexed to\n  );\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(address _to)\n    external\n    onlyOwner()\n  {\n    pendingOwner = _to;\n\n    emit OwnershipTransferRequested(owner, _to);\n  }\n\n  /**\n   * @dev Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership()\n    external\n  {\n    require(msg.sender == pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = owner;\n    owner = msg.sender;\n    pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @dev Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"Only callable by owner\");\n    _;\n  }\n\n}\n",
		"interfaces/AccessControllerInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity >0.6.0 <0.8.0;\n\ninterface AccessControllerInterface {\n  function hasAccess(address user, bytes calldata data) external view returns (bool);\n}\n",
		"interfaces/FlagsInterface.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.0;\n\ninterface FlagsInterface {\n  function getFlag(address) external view returns (bool);\n  function getFlags(address[] calldata) external view returns (bool[] memory);\n  function raiseFlag(address) external;\n  function raiseFlags(address[] calldata) external;\n  function lowerFlags(address[] calldata) external;\n  function setRaisingAccessController(address) external;\n}\n"
	},
	"sourceTreeHashHex": "0x1da9bf234628b715d5f3948c1ab11491d018226e556e02ceced8f7e329e8b7d1",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.6.6+commit.6c089d02.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"metadata": {
				"bytecodeHash": "none"
			},
			"remappings": []
		}
	},
	"chains": {}
}