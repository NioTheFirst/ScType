Switched global version to 0.8.7



receive
WAVAX_1(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_0', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: receive
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_11 = CONVERT WAVAX_1 to address
[i]Type for TMP_11

Name: TMP_11 Function: receive
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_12(bool) = msg.sender == TMP_11
[i]Type for TMP_12

Name: TMP_12 Function: receive
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_13(None) = SOLIDITY_CALL require(bool,string)(TMP_12,LaunchEvent: you can't send AVAX directly to this contract)
[i]Type for TMP_13

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
WAVAX_1(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_0', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: receive
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_11 = CONVERT WAVAX_1 to address
[i]Type for TMP_11

Name: TMP_11 Function: receive
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_12(bool) = msg.sender == TMP_11
[i]Type for TMP_12

Name: TMP_12 Function: receive
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_13(None) = SOLIDITY_CALL require(bool,string)(TMP_12,LaunchEvent: you can't send AVAX directly to this contract)
[i]Type for TMP_13

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



initialize
initialized_1(bool) := ϕ(['initialized_3', 'initialized_0'])
[i]Type for initialized

Name: initialized Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_9(LaunchEvent.Phase) -> Phase.NotStarted
[i]Type for REF_9

Name: REF_9 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_9)
_phase_1(LaunchEvent.Phase) := ϕ(['REF_38', 'REF_9', 'REF_22'])
[i]Type for _phase

Name: _phase Function: atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
[i]Type for _phase

Name: _phase Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
[i]Type for REF_64

Name: REF_64 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_66

Name: REF_66 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
auctionStart_2(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
[i]Type for auctionStart

Name: auctionStart Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_0', 'PHASE_ONE_DURATION_1'])
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_1', 'PHASE_TWO_DURATION_0'])
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(bool) = block.timestamp < auctionStart_2
[i]Type for TMP_47

Name: TMP_47 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_48(bool) = auctionStart_2 == 0
[i]Type for TMP_48

Name: TMP_48 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(bool) = TMP_47 || TMP_48
[i]Type for TMP_49

Name: TMP_49 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
[i]Type for TMP_50

Name: TMP_50 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(bool) = block.timestamp < TMP_50
[i]Type for TMP_51

Name: TMP_51 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_11

Name: REF_11 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_11
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
[i]Type for TMP_52

Name: TMP_52 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
[i]Type for TMP_53

Name: TMP_53 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_54(bool) = block.timestamp < TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
[i]Type for REF_12

Name: REF_12 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_12
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
[i]Type for REF_13

Name: REF_13 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_13
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
[i]Type for REF_10

Name: REF_10 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_10
auctionStart_2(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
[i]Type for auctionStart

Name: auctionStart Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_0', 'PHASE_ONE_DURATION_1'])
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_1', 'PHASE_TWO_DURATION_0'])
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(bool) = block.timestamp < auctionStart_2
[i]Type for TMP_47

Name: TMP_47 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_48(bool) = auctionStart_2 == 0
[i]Type for TMP_48

Name: TMP_48 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(bool) = TMP_47 || TMP_48
[i]Type for TMP_49

Name: TMP_49 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
[i]Type for TMP_50

Name: TMP_50 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(bool) = block.timestamp < TMP_50
[i]Type for TMP_51

Name: TMP_51 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_11

Name: REF_11 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_11
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
[i]Type for TMP_52

Name: TMP_52 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
[i]Type for TMP_53

Name: TMP_53 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_54(bool) = block.timestamp < TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
[i]Type for REF_12

Name: REF_12 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_12
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
[i]Type for REF_13

Name: REF_13 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_13
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
[i]Type for REF_10

Name: REF_10 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_10
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
[i]Type for REF_65

Name: REF_65 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
[i]Type for REF_68

Name: REF_68 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_67

Name: REF_67 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
[i]Type for REF_70

Name: REF_70 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
[i]Type for REF_69

Name: REF_69 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
[i]Type for REF_71

Name: REF_71 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
[i]Type for _phase

Name: _phase Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
[i]Type for REF_64

Name: REF_64 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_66

Name: REF_66 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
[i]Type for REF_65

Name: REF_65 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
[i]Type for REF_68

Name: REF_68 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_67

Name: REF_67 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
[i]Type for REF_70

Name: REF_70 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
[i]Type for REF_69

Name: REF_69 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
[i]Type for REF_71

Name: REF_71 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_phase_1(LaunchEvent.Phase) := ϕ(['REF_38', 'REF_9', 'REF_22'])
[i]Type for _phase

Name: _phase Function: atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
TMP_14 = ! initialized_2 
[i]Type for TMP_14

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,LaunchEvent: already initialized)
[i]Type for TMP_15

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_16 = CONVERT msg.sender to IRocketJoeFactory
[i]Type for TMP_16

Name: TMP_16 Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_1(IRocketJoeFactory) := TMP_16(IRocketJoeFactory)
Finance type key: (-1, -1)
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TMP_17(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_1(IRocketJoeFactory), function:wavax, arguments:[]  
[i]Type for TMP_17

Name: TMP_17 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_2(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_1', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TMP_18 = CONVERT TMP_17 to IWAVAX
[i]Type for TMP_18

Name: TMP_18 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
WAVAX_2(IWAVAX) := TMP_18(IWAVAX)
Finance type key: (-1, -1)
[i]Type for WAVAX

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
TMP_19(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_2(IRocketJoeFactory), function:router, arguments:[]  
[i]Type for TMP_19

Name: TMP_19 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_3(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_2', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TMP_20 = CONVERT TMP_19 to IJoeRouter02
[i]Type for TMP_20

Name: TMP_20 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
router_1(IJoeRouter02) := TMP_20(IJoeRouter02)
Finance type key: (-1, -1)
[i]Type for router

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
TMP_21(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_3(IRocketJoeFactory), function:factory, arguments:[]  
[i]Type for TMP_21

Name: TMP_21 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_4(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_3', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TMP_22 = CONVERT TMP_21 to IJoeFactory
[i]Type for TMP_22

Name: TMP_22 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
factory_1(IJoeFactory) := TMP_22(IJoeFactory)
Finance type key: (-1, -1)
[i]Type for factory

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
TMP_23(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_4(IRocketJoeFactory), function:rJoe, arguments:[]  
[i]Type for TMP_23

Name: TMP_23 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_5(IRocketJoeFactory) := ϕ(['rocketJoeFactory_4', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TMP_24 = CONVERT TMP_23 to IRocketJoeToken
[i]Type for TMP_24

Name: TMP_24 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
rJoe_1(IRocketJoeToken) := TMP_24(IRocketJoeToken)
Finance type key: (-1, -1)
[i]Type for rJoe

Name: rJoe Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
TMP_25(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_5(IRocketJoeFactory), function:rJoePerAvax, arguments:[]  
[i]Type for TMP_25

Name: TMP_25 Function: initialize
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
rocketJoeFactory_6(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_5', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
rJoePerAvax_1(uint256) := TMP_25(uint256)
Finance type key: (-1, -1)
[i]Type for rJoePerAvax

Name: rJoePerAvax Function: initialize
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_26(bool) = _maxWithdrawPenalty_1 <= 500000000000000000
[i]Type for TMP_26

Name: TMP_26 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,LaunchEvent: maxWithdrawPenalty too big)
[i]Type for TMP_27

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(bool) = _fixedWithdrawPenalty_1 <= 500000000000000000
[i]Type for TMP_28

Name: TMP_28 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,LaunchEvent: fixedWithdrawPenalty too big)
[i]Type for TMP_29

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(bool) = _userTimelock_1 <= 604800
[i]Type for TMP_30

Name: TMP_30 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LaunchEvent: can't lock user LP for more than 7 days)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(bool) = _issuerTimelock_1 > _userTimelock_1
[i]Type for TMP_32

Name: TMP_32 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LaunchEvent: issuer can't withdraw before users)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_34(bool) = _auctionStart_1 > block.timestamp
[i]Type for TMP_34

Name: TMP_34 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,LaunchEvent: start of phase 1 cannot be in the past)
[i]Type for TMP_35

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
issuer_1(address) := _issuer_1(address)
Finance type key: (-1, -1)
[i]Type for issuer

Name: issuer Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: _issuer
Value: u
Fields: 
Finance Type: undef
auctionStart_1(uint256) := _auctionStart_1(uint256)
Finance type key: (-1, -1)
[i]Type for auctionStart

Name: auctionStart Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_36(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_6(IRocketJoeFactory), function:PHASE_ONE_DURATION, arguments:[]  
[i]Type for TMP_36

Name: TMP_36 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_7(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_6'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_DURATION_1(uint256) := TMP_36(uint256)
Finance type key: (-1, -1)
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_37(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_7(IRocketJoeFactory), function:PHASE_ONE_NO_FEE_DURATION, arguments:[]  
[i]Type for TMP_37

Name: TMP_37 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_8(IRocketJoeFactory) := ϕ(['rocketJoeFactory_7', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_NO_FEE_DURATION_1(uint256) := TMP_37(uint256)
Finance type key: (-1, -1)
[i]Type for PHASE_ONE_NO_FEE_DURATION

Name: PHASE_ONE_NO_FEE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_8(IRocketJoeFactory), function:PHASE_TWO_DURATION, arguments:[]  
[i]Type for TMP_38

Name: TMP_38 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_9(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_8', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
PHASE_TWO_DURATION_1(uint256) := TMP_38(uint256)
Finance type key: (-1, -1)
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_39 = CONVERT _token_1 to IERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: initialize
Num: 
Den: 
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
token_1(IERC20Metadata) := TMP_39(IERC20Metadata)
Finance type key: (-1, -1)
[i]Type for token

Name: token Function: initialize
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_40 = CONVERT this to address
[i]Type for TMP_40

Name: TMP_40 Function: initialize
Num: -1
Den: -1
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = HIGH_LEVEL_CALL, dest:token_1(IERC20Metadata), function:balanceOf, arguments:['TMP_40']  
[i]Type for TMP_41

Name: TMP_41 Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
token_2(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_1', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: initialize
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
balance_1(uint256) := TMP_41(uint256)
Finance type key: (0, -1)
[i]Type for balance

Name: balance Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
tokenIncentivesPercent_1(uint256) := _tokenIncentivesPercent_1(uint256)
Finance type key: (-1, -1)
[i]Type for tokenIncentivesPercent

Name: tokenIncentivesPercent Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_42(uint256) = balance_1 (c)* 1000000000000000000
[i]Type for TMP_42

Name: TMP_42 Function: initialize
Num: -999
Den: -1
Address: u
Norm: 24
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: raw balance
TMP_43(uint256) = 1000000000000000000 (c)+ _tokenIncentivesPercent_1
[i]Type for TMP_43

Name: TMP_43 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_44(uint256) = TMP_42 (c)/ TMP_43
[i]Type for TMP_44

Name: TMP_44 Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenReserve_1(uint256) := TMP_44(uint256)
Finance type key: (0, -1)
[i]Type for tokenReserve

Name: tokenReserve Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
TMP_45(uint256) = balance_1 (c)- tokenReserve_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesForUsers_1(uint256) := TMP_45(uint256)
Finance type key: (0, -1)
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesBalance_1(uint256) := tokenIncentivesForUsers_1(uint256)
Finance type key: (0, -1)
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
floorPrice_1(uint256) := _floorPrice_1(uint256)
Finance type key: (40, -1)
[i]Type for floorPrice

Name: floorPrice Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
maxWithdrawPenalty_1(uint256) := _maxWithdrawPenalty_1(uint256)
Finance type key: (-1, -1)
[i]Type for maxWithdrawPenalty

Name: maxWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fixedWithdrawPenalty_1(uint256) := _fixedWithdrawPenalty_1(uint256)
Finance type key: (-1, -1)
[i]Type for fixedWithdrawPenalty

Name: fixedWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxAllocation_1(uint256) := _maxAllocation_1(uint256)
Finance type key: (-1, -1)
[i]Type for maxAllocation

Name: maxAllocation Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
userTimelock_1(uint256) := _userTimelock_1(uint256)
Finance type key: (-1, -1)
[i]Type for userTimelock

Name: userTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
issuerTimelock_1(uint256) := _issuerTimelock_1(uint256)
Finance type key: (-1, -1)
[i]Type for issuerTimelock

Name: issuerTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
initialized_3(bool) := True(bool)
Finance type key: (-1, -1)
[i]Type for initialized

Name: initialized Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
initialized_1(bool) := ϕ(['initialized_3', 'initialized_0'])
[i]Type for initialized

Name: initialized Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
REF_9(LaunchEvent.Phase) -> Phase.NotStarted
[i]Type for REF_9

Name: REF_9 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_9)
TMP_14 = ! initialized_2 
[i]Type for TMP_14

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,LaunchEvent: already initialized)
[i]Type for TMP_15

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_16 = CONVERT msg.sender to IRocketJoeFactory
[i]Type for TMP_16

Name: TMP_16 Function: initialize
Num: 
Den: 
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_1(IRocketJoeFactory) := TMP_16(IRocketJoeFactory)
Finance type key: (-1, -1)
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TMP_17(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_1(IRocketJoeFactory), function:wavax, arguments:[]  
[i]Type for TMP_17

Name: TMP_17 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_2(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_1', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TMP_18 = CONVERT TMP_17 to IWAVAX
[i]Type for TMP_18

Name: TMP_18 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
WAVAX_2(IWAVAX) := TMP_18(IWAVAX)
Finance type key: (-1, -1)
[i]Type for WAVAX

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
TMP_19(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_2(IRocketJoeFactory), function:router, arguments:[]  
[i]Type for TMP_19

Name: TMP_19 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_3(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_2', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TMP_20 = CONVERT TMP_19 to IJoeRouter02
[i]Type for TMP_20

Name: TMP_20 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
router_1(IJoeRouter02) := TMP_20(IJoeRouter02)
Finance type key: (-1, -1)
[i]Type for router

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
TMP_21(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_3(IRocketJoeFactory), function:factory, arguments:[]  
[i]Type for TMP_21

Name: TMP_21 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_4(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_3', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TMP_22 = CONVERT TMP_21 to IJoeFactory
[i]Type for TMP_22

Name: TMP_22 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
factory_1(IJoeFactory) := TMP_22(IJoeFactory)
Finance type key: (-1, -1)
[i]Type for factory

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
TMP_23(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_4(IRocketJoeFactory), function:rJoe, arguments:[]  
[i]Type for TMP_23

Name: TMP_23 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_5(IRocketJoeFactory) := ϕ(['rocketJoeFactory_4', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TMP_24 = CONVERT TMP_23 to IRocketJoeToken
[i]Type for TMP_24

Name: TMP_24 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
rJoe_1(IRocketJoeToken) := TMP_24(IRocketJoeToken)
Finance type key: (-1, -1)
[i]Type for rJoe

Name: rJoe Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
TMP_25(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_5(IRocketJoeFactory), function:rJoePerAvax, arguments:[]  
[i]Type for TMP_25

Name: TMP_25 Function: initialize
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
rocketJoeFactory_6(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_5', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
rJoePerAvax_1(uint256) := TMP_25(uint256)
Finance type key: (-1, -1)
[i]Type for rJoePerAvax

Name: rJoePerAvax Function: initialize
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_26(bool) = _maxWithdrawPenalty_1 <= 500000000000000000
[i]Type for TMP_26

Name: TMP_26 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,LaunchEvent: maxWithdrawPenalty too big)
[i]Type for TMP_27

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(bool) = _fixedWithdrawPenalty_1 <= 500000000000000000
[i]Type for TMP_28

Name: TMP_28 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,LaunchEvent: fixedWithdrawPenalty too big)
[i]Type for TMP_29

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(bool) = _userTimelock_1 <= 604800
[i]Type for TMP_30

Name: TMP_30 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LaunchEvent: can't lock user LP for more than 7 days)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(bool) = _issuerTimelock_1 > _userTimelock_1
[i]Type for TMP_32

Name: TMP_32 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LaunchEvent: issuer can't withdraw before users)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_34(bool) = _auctionStart_1 > block.timestamp
[i]Type for TMP_34

Name: TMP_34 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,LaunchEvent: start of phase 1 cannot be in the past)
[i]Type for TMP_35

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
issuer_1(address) := _issuer_1(address)
Finance type key: (-1, -1)
[i]Type for issuer

Name: issuer Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: _issuer
Value: u
Fields: 
Finance Type: undef
auctionStart_1(uint256) := _auctionStart_1(uint256)
Finance type key: (-1, -1)
[i]Type for auctionStart

Name: auctionStart Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_36(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_6(IRocketJoeFactory), function:PHASE_ONE_DURATION, arguments:[]  
[i]Type for TMP_36

Name: TMP_36 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_7(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_6'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_DURATION_1(uint256) := TMP_36(uint256)
Finance type key: (-1, -1)
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_37(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_7(IRocketJoeFactory), function:PHASE_ONE_NO_FEE_DURATION, arguments:[]  
[i]Type for TMP_37

Name: TMP_37 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_8(IRocketJoeFactory) := ϕ(['rocketJoeFactory_7', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_NO_FEE_DURATION_1(uint256) := TMP_37(uint256)
Finance type key: (-1, -1)
[i]Type for PHASE_ONE_NO_FEE_DURATION

Name: PHASE_ONE_NO_FEE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_8(IRocketJoeFactory), function:PHASE_TWO_DURATION, arguments:[]  
[i]Type for TMP_38

Name: TMP_38 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_9(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_8', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
PHASE_TWO_DURATION_1(uint256) := TMP_38(uint256)
Finance type key: (-1, -1)
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_39 = CONVERT _token_1 to IERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: initialize
Num: 
Den: 
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
token_1(IERC20Metadata) := TMP_39(IERC20Metadata)
Finance type key: (-1, -1)
[i]Type for token

Name: token Function: initialize
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_40 = CONVERT this to address
[i]Type for TMP_40

Name: TMP_40 Function: initialize
Num: 
Den: 
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = HIGH_LEVEL_CALL, dest:token_1(IERC20Metadata), function:balanceOf, arguments:['TMP_40']  
[i]Type for TMP_41

Name: TMP_41 Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
token_2(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_1', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: initialize
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
balance_1(uint256) := TMP_41(uint256)
Finance type key: (0, -1)
[i]Type for balance

Name: balance Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
tokenIncentivesPercent_1(uint256) := _tokenIncentivesPercent_1(uint256)
Finance type key: (-1, -1)
[i]Type for tokenIncentivesPercent

Name: tokenIncentivesPercent Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_42(uint256) = balance_1 (c)* 1000000000000000000
[i]Type for TMP_42

Name: TMP_42 Function: initialize
Num: -999
Den: -1
Address: u
Norm: 24
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: raw balance
TMP_43(uint256) = 1000000000000000000 (c)+ _tokenIncentivesPercent_1
[i]Type for TMP_43

Name: TMP_43 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_44(uint256) = TMP_42 (c)/ TMP_43
[i]Type for TMP_44

Name: TMP_44 Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenReserve_1(uint256) := TMP_44(uint256)
Finance type key: (0, -1)
[i]Type for tokenReserve

Name: tokenReserve Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
TMP_45(uint256) = balance_1 (c)- tokenReserve_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesForUsers_1(uint256) := TMP_45(uint256)
Finance type key: (0, -1)
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesBalance_1(uint256) := tokenIncentivesForUsers_1(uint256)
Finance type key: (0, -1)
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: initialize
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
floorPrice_1(uint256) := _floorPrice_1(uint256)
Finance type key: (40, -1)
[i]Type for floorPrice

Name: floorPrice Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
maxWithdrawPenalty_1(uint256) := _maxWithdrawPenalty_1(uint256)
Finance type key: (-1, -1)
[i]Type for maxWithdrawPenalty

Name: maxWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fixedWithdrawPenalty_1(uint256) := _fixedWithdrawPenalty_1(uint256)
Finance type key: (-1, -1)
[i]Type for fixedWithdrawPenalty

Name: fixedWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxAllocation_1(uint256) := _maxAllocation_1(uint256)
Finance type key: (-1, -1)
[i]Type for maxAllocation

Name: maxAllocation Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
userTimelock_1(uint256) := _userTimelock_1(uint256)
Finance type key: (-1, -1)
[i]Type for userTimelock

Name: userTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
issuerTimelock_1(uint256) := _issuerTimelock_1(uint256)
Finance type key: (-1, -1)
[i]Type for issuerTimelock

Name: issuerTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
initialized_3(bool) := True(bool)
Finance type key: (-1, -1)
[i]Type for initialized

Name: initialized Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef



currentPhase
auctionStart_2(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
[i]Type for auctionStart

Name: auctionStart Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_0', 'PHASE_ONE_DURATION_1'])
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_1', 'PHASE_TWO_DURATION_0'])
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(bool) = block.timestamp < auctionStart_2
[i]Type for TMP_47

Name: TMP_47 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_48(bool) = auctionStart_2 == 0
[i]Type for TMP_48

Name: TMP_48 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(bool) = TMP_47 || TMP_48
[i]Type for TMP_49

Name: TMP_49 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
[i]Type for TMP_50

Name: TMP_50 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(bool) = block.timestamp < TMP_50
[i]Type for TMP_51

Name: TMP_51 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
[i]Type for REF_10

Name: REF_10 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_10
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
[i]Type for TMP_52

Name: TMP_52 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
[i]Type for TMP_53

Name: TMP_53 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_54(bool) = block.timestamp < TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_11

Name: REF_11 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_11
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
[i]Type for REF_12

Name: REF_12 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_12
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
[i]Type for REF_13

Name: REF_13 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_13
auctionStart_2(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
[i]Type for auctionStart

Name: auctionStart Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_0', 'PHASE_ONE_DURATION_1'])
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_1', 'PHASE_TWO_DURATION_0'])
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(bool) = block.timestamp < auctionStart_2
[i]Type for TMP_47

Name: TMP_47 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_48(bool) = auctionStart_2 == 0
[i]Type for TMP_48

Name: TMP_48 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(bool) = TMP_47 || TMP_48
[i]Type for TMP_49

Name: TMP_49 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
[i]Type for TMP_50

Name: TMP_50 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(bool) = block.timestamp < TMP_50
[i]Type for TMP_51

Name: TMP_51 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
[i]Type for REF_10

Name: REF_10 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_10
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
[i]Type for TMP_52

Name: TMP_52 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
[i]Type for TMP_53

Name: TMP_53 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_54(bool) = block.timestamp < TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_11

Name: REF_11 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_11
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
[i]Type for REF_12

Name: REF_12 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_12
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
[i]Type for REF_13

Name: REF_13 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
RETURN REF_13



depositAVAX
issuer_2(address) := ϕ(['issuer_10', 'issuer_12', 'issuer_8', 'issuer_4', 'issuer_0', 'issuer_13', 'issuer_1'])
[i]Type for issuer

Name: issuer Function: depositAVAX
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_0', 'rJoe_4', 'rJoe_6', 'rJoe_5', 'rJoe_1'])
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
WAVAX_3(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_0', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
maxAllocation_2(uint256) := ϕ(['maxAllocation_1', 'maxAllocation_0', 'maxAllocation_4'])
[i]Type for maxAllocation

Name: maxAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9', 'getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0'])
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
stopped_2(bool) := ϕ(['stopped_0', 'stopped_1'])
[i]Type for stopped

Name: stopped Function: isStopped
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_240 = ! stopped_2 
[i]Type for TMP_240

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,LaunchEvent: stopped)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_239(None) = SOLIDITY_CALL require(bool,string)(stopped_2,LaunchEvent: is still running)
[i]Type for TMP_239

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
stopped_2(bool) := ϕ(['stopped_0', 'stopped_1'])
[i]Type for stopped

Name: stopped Function: isStopped
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_240 = ! stopped_2 
[i]Type for TMP_240

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,LaunchEvent: stopped)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_239(None) = SOLIDITY_CALL require(bool,string)(stopped_2,LaunchEvent: is still running)
[i]Type for TMP_239

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_22

Name: REF_22 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
TMP_55(bool) = msg.sender != issuer_4
[i]Type for TMP_55

Name: TMP_55 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_57(bool) = msg.value > 0
[i]Type for TMP_57

Name: TMP_57 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
[i]Type for REF_14

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
[i]Type for REF_15

Name: REF_15 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_59(uint256) = REF_15 (c)+ msg.value
[i]Type for TMP_59

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newAllocation_1(uint256) := TMP_59(uint256)
Finance type key: (-1, -1)
[i]Type for newAllocation

Name: newAllocation Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
[i]Type for TMP_60

Name: TMP_60 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
[i]Type for REF_16

Name: REF_16 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_62(bool) = newAllocation_1 > REF_16
[i]Type for TMP_62

Name: TMP_62 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])", "user_2 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_1', 'rJoeNeeded_0'])
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Finance type key: (-1, -1)
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
[i]Type for REF_17

Name: REF_17 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_63(uint256) = newAllocation_1 (c)- REF_17
[i]Type for TMP_63

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
_avaxAmount_1(uint256) := ϕ(['TMP_63'])
[i]Type for _avaxAmount

Name: _avaxAmount Function: getRJoeAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rJoePerAvax_2(uint256) := ϕ(['rJoePerAvax_1', 'rJoePerAvax_0'])
[i]Type for rJoePerAvax

Name: rJoePerAvax Function: getRJoeAmount
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_199(uint256) = _avaxAmount_1 (c)* rJoePerAvax_2
[i]Type for TMP_199

Name: TMP_199 Function: getRJoeAmount
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_199
_avaxAmount_1(uint256) := ϕ(['TMP_63'])
[i]Type for _avaxAmount

Name: _avaxAmount Function: getRJoeAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rJoePerAvax_2(uint256) := ϕ(['rJoePerAvax_1', 'rJoePerAvax_0'])
[i]Type for rJoePerAvax

Name: rJoePerAvax Function: getRJoeAmount
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_199(uint256) = _avaxAmount_1 (c)* rJoePerAvax_2
[i]Type for TMP_199

Name: TMP_199 Function: getRJoeAmount
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_199
[i]Type for TMP_64

Name: TMP_64 Function: depositAVAX
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rJoeNeeded_1(uint256) := TMP_64(uint256)
Finance type key: (-1, -1)
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Finance type key: (-1, -1)
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_65(bool) = rJoeNeeded_2 > 0
[i]Type for TMP_65

Name: TMP_65 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
WAVAX_8(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_7', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_1', 'rJoe_5', 'rJoe_6'])
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
WAVAX_7(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_6', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
issuer_2(address) := ϕ(['issuer_10', 'issuer_12', 'issuer_8', 'issuer_4', 'issuer_0', 'issuer_13', 'issuer_1'])
[i]Type for issuer

Name: issuer Function: depositAVAX
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_0', 'rJoe_4', 'rJoe_6', 'rJoe_5', 'rJoe_1'])
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
WAVAX_3(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_0', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
maxAllocation_2(uint256) := ϕ(['maxAllocation_1', 'maxAllocation_0', 'maxAllocation_4'])
[i]Type for maxAllocation

Name: maxAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9', 'getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0'])
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_22

Name: REF_22 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
TMP_55(bool) = msg.sender != issuer_4
[i]Type for TMP_55

Name: TMP_55 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_57(bool) = msg.value > 0
[i]Type for TMP_57

Name: TMP_57 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
[i]Type for REF_14

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
[i]Type for REF_15

Name: REF_15 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_59(uint256) = REF_15 (c)+ msg.value
[i]Type for TMP_59

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newAllocation_1(uint256) := TMP_59(uint256)
Finance type key: (-1, -1)
[i]Type for newAllocation

Name: newAllocation Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
[i]Type for TMP_60

Name: TMP_60 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
[i]Type for REF_16

Name: REF_16 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_62(bool) = newAllocation_1 > REF_16
[i]Type for TMP_62

Name: TMP_62 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])", "user_2 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_1', 'rJoeNeeded_0'])
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Finance type key: (-1, -1)
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
[i]Type for REF_17

Name: REF_17 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_63(uint256) = newAllocation_1 (c)- REF_17
[i]Type for TMP_63

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
[i]Type for TMP_64

Name: TMP_64 Function: depositAVAX
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rJoeNeeded_1(uint256) := TMP_64(uint256)
Finance type key: (-1, -1)
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Finance type key: (-1, -1)
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_65(bool) = rJoeNeeded_2 > 0
[i]Type for TMP_65

Name: TMP_65 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
WAVAX_8(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_7', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_1', 'rJoe_5', 'rJoe_6'])
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
WAVAX_7(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_6', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
issuer_2(address) := ϕ(['issuer_10', 'issuer_12', 'issuer_8', 'issuer_4', 'issuer_0', 'issuer_13', 'issuer_1'])
[i]Type for issuer

Name: issuer Function: depositAVAX
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_0', 'rJoe_4', 'rJoe_6', 'rJoe_5', 'rJoe_1'])
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
WAVAX_3(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_0', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
maxAllocation_2(uint256) := ϕ(['maxAllocation_1', 'maxAllocation_0', 'maxAllocation_4'])
[i]Type for maxAllocation

Name: maxAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9', 'getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0'])
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_22

Name: REF_22 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
TMP_55(bool) = msg.sender != issuer_4
[i]Type for TMP_55

Name: TMP_55 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_57(bool) = msg.value > 0
[i]Type for TMP_57

Name: TMP_57 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
[i]Type for REF_14

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
[i]Type for REF_15

Name: REF_15 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_59(uint256) = REF_15 (c)+ msg.value
[i]Type for TMP_59

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newAllocation_1(uint256) := TMP_59(uint256)
Finance type key: (-1, -1)
[i]Type for newAllocation

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
[i]Type for TMP_60

Name: TMP_60 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
[i]Type for REF_16

Name: REF_16 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_62(bool) = newAllocation_1 > REF_16
[i]Type for TMP_62

Name: TMP_62 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])", "user_2 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_1', 'rJoeNeeded_0'])
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Finance type key: (-1, -1)
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
[i]Type for REF_17

Name: REF_17 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_63(uint256) = newAllocation_1 (c)- REF_17
[i]Type for TMP_63

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
[i]Type for TMP_64

Name: TMP_64 Function: depositAVAX
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rJoeNeeded_1(uint256) := TMP_64(uint256)
Finance type key: (-1, -1)
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Finance type key: (-1, -1)
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_65(bool) = rJoeNeeded_2 > 0
[i]Type for TMP_65

Name: TMP_65 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
WAVAX_8(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_7', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_1', 'rJoe_5', 'rJoe_6'])
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
WAVAX_7(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_6', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
issuer_2(address) := ϕ(['issuer_10', 'issuer_12', 'issuer_8', 'issuer_4', 'issuer_0', 'issuer_13', 'issuer_1'])
[i]Type for issuer

Name: issuer Function: depositAVAX
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_0', 'rJoe_4', 'rJoe_6', 'rJoe_5', 'rJoe_1'])
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
WAVAX_3(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_0', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
maxAllocation_2(uint256) := ϕ(['maxAllocation_1', 'maxAllocation_0', 'maxAllocation_4'])
[i]Type for maxAllocation

Name: maxAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9', 'getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0'])
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_22

Name: REF_22 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
TMP_55(bool) = msg.sender != issuer_4
[i]Type for TMP_55

Name: TMP_55 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_57(bool) = msg.value > 0
[i]Type for TMP_57

Name: TMP_57 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
[i]Type for REF_14

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
[i]Type for REF_15

Name: REF_15 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_59(uint256) = REF_15 (c)+ msg.value
[i]Type for TMP_59

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newAllocation_1(uint256) := TMP_59(uint256)
Finance type key: (-1, -1)
[i]Type for newAllocation

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
[i]Type for TMP_60

Name: TMP_60 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
[i]Type for REF_16

Name: REF_16 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_62(bool) = newAllocation_1 > REF_16
[i]Type for TMP_62

Name: TMP_62 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])", "user_2 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_1', 'rJoeNeeded_0'])
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Finance type key: (-1, -1)
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
[i]Type for REF_17

Name: REF_17 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_63(uint256) = newAllocation_1 (c)- REF_17
[i]Type for TMP_63

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
[i]Type for TMP_64

Name: TMP_64 Function: depositAVAX
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rJoeNeeded_1(uint256) := TMP_64(uint256)
Finance type key: (-1, -1)
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 7
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
Finance type key: (-1, -1)
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_65(bool) = rJoeNeeded_2 > 0
[i]Type for TMP_65

Name: TMP_65 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
WAVAX_8(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_7', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_1', 'rJoe_5', 'rJoe_6'])
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
WAVAX_7(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_6', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef



withdrawAVAX
WAVAX_9(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_0', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_0', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9', 'getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0'])
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_71

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
Finance type key: (-1, -1)
[i]Type for _currentPhase

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_23

Name: REF_23 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_72(bool) = _currentPhase_1 == REF_23
[i]Type for TMP_72

Name: TMP_72 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
[i]Type for REF_24

Name: REF_24 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_73(bool) = _currentPhase_1 == REF_24
[i]Type for TMP_73

Name: TMP_73 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_74(bool) = TMP_72 || TMP_73
[i]Type for TMP_74

Name: TMP_74 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_76(bool) = _amount_1 > 0
[i]Type for TMP_76

Name: TMP_76 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
[i]Type for REF_25

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
[i]Type for REF_26

Name: REF_26 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_78(bool) = REF_26 >= _amount_1
[i]Type for TMP_78

Name: TMP_78 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
[i]Type for REF_27

Name: REF_27 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
[i]Type for REF_27

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
auctionStart_3(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
[i]Type for auctionStart

Name: auctionStart Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_DURATION_3(uint256) := ϕ(['PHASE_ONE_DURATION_0', 'PHASE_ONE_DURATION_1'])
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_NO_FEE_DURATION_2(uint256) := ϕ(['PHASE_ONE_NO_FEE_DURATION_0', 'PHASE_ONE_NO_FEE_DURATION_1'])
[i]Type for PHASE_ONE_NO_FEE_DURATION

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxWithdrawPenalty_2(uint256) := ϕ(['maxWithdrawPenalty_0', 'maxWithdrawPenalty_1'])
[i]Type for maxWithdrawPenalty

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fixedWithdrawPenalty_2(uint256) := ϕ(['fixedWithdrawPenalty_0', 'fixedWithdrawPenalty_1'])
[i]Type for fixedWithdrawPenalty

Name: fixedWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_189(uint256) = block.timestamp (c)- auctionStart_3
[i]Type for TMP_189

Name: TMP_189 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
timeElapsed_1(uint256) := TMP_189(uint256)
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_190(bool) = timeElapsed_1 < PHASE_ONE_NO_FEE_DURATION_2
[i]Type for TMP_190

Name: TMP_190 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_192(bool) = timeElapsed_1 < PHASE_ONE_DURATION_3
[i]Type for TMP_192

Name: TMP_192 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_193(uint256) = timeElapsed_1 (c)- PHASE_ONE_NO_FEE_DURATION_2
[i]Type for TMP_193

Name: TMP_193 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_194(uint256) = TMP_193 (c)* maxWithdrawPenalty_2
[i]Type for TMP_194

Name: TMP_194 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_195(uint256) = PHASE_ONE_DURATION_3 (c)- PHASE_ONE_NO_FEE_DURATION_2
[i]Type for TMP_195

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_196 = CONVERT TMP_195 to uint256
[i]Type for TMP_196

Name: TMP_196 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_197(uint256) = TMP_194 (c)/ TMP_196
[i]Type for TMP_197

Name: TMP_197 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_197
RETURN fixedWithdrawPenalty_2
TMP_191(uint256) = maxWithdrawPenalty_2 (c)* 0
[i]Type for TMP_191

Name: TMP_191 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
RETURN TMP_191
auctionStart_3(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
[i]Type for auctionStart

Name: auctionStart Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_DURATION_3(uint256) := ϕ(['PHASE_ONE_DURATION_0', 'PHASE_ONE_DURATION_1'])
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_NO_FEE_DURATION_2(uint256) := ϕ(['PHASE_ONE_NO_FEE_DURATION_0', 'PHASE_ONE_NO_FEE_DURATION_1'])
[i]Type for PHASE_ONE_NO_FEE_DURATION

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxWithdrawPenalty_2(uint256) := ϕ(['maxWithdrawPenalty_0', 'maxWithdrawPenalty_1'])
[i]Type for maxWithdrawPenalty

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fixedWithdrawPenalty_2(uint256) := ϕ(['fixedWithdrawPenalty_0', 'fixedWithdrawPenalty_1'])
[i]Type for fixedWithdrawPenalty

Name: fixedWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_189(uint256) = block.timestamp (c)- auctionStart_3
[i]Type for TMP_189

Name: TMP_189 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
timeElapsed_1(uint256) := TMP_189(uint256)
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_190(bool) = timeElapsed_1 < PHASE_ONE_NO_FEE_DURATION_2
[i]Type for TMP_190

Name: TMP_190 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_192(bool) = timeElapsed_1 < PHASE_ONE_DURATION_3
[i]Type for TMP_192

Name: TMP_192 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_193(uint256) = timeElapsed_1 (c)- PHASE_ONE_NO_FEE_DURATION_2
[i]Type for TMP_193

Name: TMP_193 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_194(uint256) = TMP_193 (c)* maxWithdrawPenalty_2
[i]Type for TMP_194

Name: TMP_194 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_195(uint256) = PHASE_ONE_DURATION_3 (c)- PHASE_ONE_NO_FEE_DURATION_2
[i]Type for TMP_195

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_196 = CONVERT TMP_195 to uint256
[i]Type for TMP_196

Name: TMP_196 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_197(uint256) = TMP_194 (c)/ TMP_196
[i]Type for TMP_197

Name: TMP_197 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_197
RETURN fixedWithdrawPenalty_2
TMP_191(uint256) = maxWithdrawPenalty_2 (c)* 0
[i]Type for TMP_191

Name: TMP_191 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
RETURN TMP_191
[i]Type for TMP_80

Name: TMP_80 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_81(uint256) = _amount_1 (c)* TMP_80
[i]Type for TMP_81

Name: TMP_81 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
[i]Type for TMP_82

Name: TMP_82 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
feeAmount_1(uint256) := TMP_82(uint256)
Finance type key: (0, -1)
[i]Type for feeAmount

Name: feeAmount Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
Finance type key: (0, 0)
[i]Type for TMP_83

Name: TMP_83 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
amountMinusFee_1(uint256) := TMP_83(uint256)
Finance type key: (0, -1)
[i]Type for amountMinusFee

Name: amountMinusFee Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
WAVAX_13(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_12', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
_to_1(address) := ϕ(['TMP_87', 'penaltyCollector_1', 'msg.sender'])
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
_value_1(uint256) := ϕ(['amountMinusFee_1', 'feeAmount_1', 'balance_1', 'excessAvax_1'])
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
success_1(bool)= UNPACK TUPLE_1 index: 0 
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_to_1(address) := ϕ(['TMP_87', 'penaltyCollector_1', 'msg.sender'])
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
_value_1(uint256) := ϕ(['amountMinusFee_1', 'feeAmount_1', 'balance_1', 'excessAvax_1'])
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
success_1(bool)= UNPACK TUPLE_1 index: 0 
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86(bool) = feeAmount_1 > 0
[i]Type for TMP_86

Name: TMP_86 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
[i]Type for TMP_87

Name: TMP_87 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)
WAVAX_9(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_0', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_0', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9', 'getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0'])
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_71

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
Finance type key: (-1, -1)
[i]Type for _currentPhase

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
[i]Type for REF_23

Name: REF_23 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_72(bool) = _currentPhase_1 == REF_23
[i]Type for TMP_72

Name: TMP_72 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
[i]Type for REF_24

Name: REF_24 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_73(bool) = _currentPhase_1 == REF_24
[i]Type for TMP_73

Name: TMP_73 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_74(bool) = TMP_72 || TMP_73
[i]Type for TMP_74

Name: TMP_74 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_76(bool) = _amount_1 > 0
[i]Type for TMP_76

Name: TMP_76 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
[i]Type for REF_25

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
[i]Type for REF_26

Name: REF_26 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_78(bool) = REF_26 >= _amount_1
[i]Type for TMP_78

Name: TMP_78 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
[i]Type for REF_27

Name: REF_27 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
[i]Type for REF_27

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
[i]Type for TMP_80

Name: TMP_80 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_81(uint256) = _amount_1 (c)* TMP_80
[i]Type for TMP_81

Name: TMP_81 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
[i]Type for TMP_82

Name: TMP_82 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
feeAmount_1(uint256) := TMP_82(uint256)
Finance type key: (0, -1)
[i]Type for feeAmount

Name: feeAmount Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
Finance type key: (0, 0)
[i]Type for TMP_83

Name: TMP_83 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
amountMinusFee_1(uint256) := TMP_83(uint256)
Finance type key: (0, -1)
[i]Type for amountMinusFee

Name: amountMinusFee Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
WAVAX_13(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_12', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
TMP_86(bool) = feeAmount_1 > 0
[i]Type for TMP_86

Name: TMP_86 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
[i]Type for TMP_87

Name: TMP_87 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19'])
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)
_to_1(address) := ϕ(['TMP_87', 'penaltyCollector_1', 'msg.sender'])
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
_value_1(uint256) := ϕ(['amountMinusFee_1', 'feeAmount_1', 'balance_1', 'excessAvax_1'])
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
success_1(bool)= UNPACK TUPLE_1 index: 0 
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_to_1(address) := ϕ(['TMP_87', 'penaltyCollector_1', 'msg.sender'])
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
_value_1(uint256) := ϕ(['amountMinusFee_1', 'feeAmount_1', 'balance_1', 'excessAvax_1'])
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
success_1(bool)= UNPACK TUPLE_1 index: 0 
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



createPair
floorPrice_2(uint256) := ϕ(['floorPrice_1', 'floorPrice_0', 'floorPrice_8', 'floorPrice_7'])
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
WAVAX_14(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_0', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
token_3(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_2(IJoeRouter02) := ϕ(['router_11', 'router_0', 'router_1'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_2(IJoeFactory) := ϕ(['factory_1', 'factory_0', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_2(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesBalance_2(uint256) := ϕ(['tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14'])
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesForUsers_2(uint256) := ϕ(['tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_0', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9'])
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
wavaxReserve_11(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
REF_38(LaunchEvent.Phase) -> Phase.PhaseThree
[i]Type for REF_38

Name: REF_38 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_38)
TMP_90 = CONVERT WAVAX_16 to address
[i]Type for TMP_90

Name: TMP_90 Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
wavaxAddress_1(address) := TMP_90(address)
Finance type key: (-1, -1)
[i]Type for wavaxAddress

Name: wavaxAddress Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
TMP_91 = CONVERT token_5 to address
[i]Type for TMP_91

Name: TMP_91 Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
tokenAddress_1(address) := TMP_91(address)
Finance type key: (-1, -1)
[i]Type for tokenAddress

Name: tokenAddress Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_92(address) = HIGH_LEVEL_CALL, dest:factory_4(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
[i]Type for TMP_92

Name: TMP_92 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
floorPrice_5(uint256) := ϕ(['floorPrice_1', 'floorPrice_4', 'floorPrice_8', 'floorPrice_7'])
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
WAVAX_17(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_16', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
token_6(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15', 'token_5'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_5(IJoeRouter02) := ϕ(['router_11', 'router_1', 'router_4'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_5(IJoeFactory) := ϕ(['factory_1', 'factory_4', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_5(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_4'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesBalance_5(uint256) := ϕ(['tokenIncentivesBalance_13', 'tokenIncentivesBalance_4', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14'])
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesForUsers_5(uint256) := ϕ(['tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_4', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9'])
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
wavaxReserve_14(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_13', 'wavaxReserve_10', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_93 = CONVERT 0 to address
[i]Type for TMP_93

Name: TMP_93 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94(bool) = TMP_92 == TMP_93
[i]Type for TMP_94

Name: TMP_94 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95 = CONVERT factory_5 to IJoeFactory
[i]Type for TMP_95

Name: TMP_95 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
TMP_96(address) = HIGH_LEVEL_CALL, dest:TMP_95(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
[i]Type for TMP_96

Name: TMP_96 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
floorPrice_6(uint256) := ϕ(['floorPrice_1', 'floorPrice_5', 'floorPrice_8', 'floorPrice_7'])
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
WAVAX_18(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_17', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
token_7(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_6', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_6(IJoeRouter02) := ϕ(['router_11', 'router_5', 'router_1'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_6(IJoeFactory) := ϕ(['factory_1', 'factory_5', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_6(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_5'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesBalance_6(uint256) := ϕ(['tokenIncentivesBalance_13', 'tokenIncentivesBalance_5', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14'])
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesForUsers_6(uint256) := ϕ(['tokenIncentivesForUsers_5', 'tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9'])
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
wavaxReserve_15(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_14', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_97 = CONVERT TMP_96 to IJoePair
[i]Type for TMP_97

Name: TMP_97 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
TMP_98(uint256) = HIGH_LEVEL_CALL, dest:TMP_97(IJoePair), function:totalSupply, arguments:[]  
[i]Type for TMP_98

Name: TMP_98 Function: createPair
Num: 1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
floorPrice_7(uint256) := ϕ(['floorPrice_6', 'floorPrice_1', 'floorPrice_8', 'floorPrice_7'])
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
WAVAX_19(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_18', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
token_8(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_7', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_7(IJoeRouter02) := ϕ(['router_11', 'router_1', 'router_6'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_7(IJoeFactory) := ϕ(['factory_1', 'factory_6', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_7(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_6'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesBalance_7(uint256) := ϕ(['tokenIncentivesBalance_13', 'tokenIncentivesBalance_6', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14'])
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesForUsers_7(uint256) := ϕ(['tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_6'])
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
wavaxReserve_16(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_15', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_99(bool) = TMP_98 == 0
[i]Type for TMP_99

Name: TMP_99 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(bool) = TMP_94 || TMP_99
[i]Type for TMP_100

Name: TMP_100 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101(None) = SOLIDITY_CALL require(bool,string)(TMP_100,LaunchEvent: liquid pair already exists)
[i]Type for TMP_101

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(bool) = wavaxReserve_16 > 0
[i]Type for TMP_102

Name: TMP_102 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103(None) = SOLIDITY_CALL require(bool,string)(TMP_102,LaunchEvent: no wavax balance)
[i]Type for TMP_103

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenAllocated_1(uint256) := tokenReserve_7(uint256)
Finance type key: (0, -1)
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
TMP_104(uint256) = 10 (c)** 18
[i]Type for TMP_104

Name: TMP_104 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_105(uint256) = wavaxReserve_16 (c)* TMP_104
[i]Type for TMP_105

Name: TMP_105 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: raw balance
TMP_106(uint256) = TMP_105 (c)/ tokenAllocated_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_106

Name: TMP_106 Function: createPair
Num: -1
Den: -999
Address: u
Norm: 12
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: price/exchange rate
TMP_107(bool) = floorPrice_7 > TMP_106
Finance type key: (40, 40)
[i]Type for TMP_107

Name: TMP_107 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenAllocated_3(uint256) := ϕ(['tokenAllocated_2', 'tokenAllocated_1'])
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
TMP_115 = CONVERT router_8 to address
[i]Type for TMP_115

Name: TMP_115 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
TMP_116(bool) = HIGH_LEVEL_CALL, dest:WAVAX_20(IWAVAX), function:approve, arguments:['TMP_115', 'wavaxReserve_17']  
[i]Type for TMP_116

Name: TMP_116 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
WAVAX_21(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_20', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
token_10(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_9', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_9(IJoeRouter02) := ϕ(['router_11', 'router_8', 'router_1'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_9(IJoeFactory) := ϕ(['factory_1', 'factory_8', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_9(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_8'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
wavaxReserve_18(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_17', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_108(uint8) = HIGH_LEVEL_CALL, dest:token_8(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_108

Name: TMP_108 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6
Fields: 
Finance Type: undef
floorPrice_8(uint256) := ϕ(['floorPrice_1', 'floorPrice_8', 'floorPrice_7'])
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
WAVAX_20(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_19', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
token_9(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_8', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_8(IJoeRouter02) := ϕ(['router_11', 'router_1', 'router_7'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_8(IJoeFactory) := ϕ(['factory_1', 'factory_7', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_8(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_7', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesBalance_8(uint256) := ϕ(['tokenIncentivesBalance_13', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14'])
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesForUsers_8(uint256) := ϕ(['tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9'])
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
wavaxReserve_17(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_24', 'wavaxReserve_16', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_109(uint256) = 10 (c)** TMP_108
[i]Type for TMP_109

Name: TMP_109 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_110(uint256) = wavaxReserve_17 (c)* TMP_109
[i]Type for TMP_110

Name: TMP_110 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_111(uint256) = TMP_110 (c)/ floorPrice_8
Finance type key: (0, 40)
Finance type key: (0, 40)
[i]Type for TMP_111

Name: TMP_111 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
tokenAllocated_2(uint256) := TMP_111(uint256)
Finance type key: (0, -1)
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_117 = CONVERT router_9 to address
[i]Type for TMP_117

Name: TMP_117 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
TMP_118(bool) = HIGH_LEVEL_CALL, dest:token_10(IERC20Metadata), function:approve, arguments:['TMP_117', 'tokenAllocated_3']  
[i]Type for TMP_118

Name: TMP_118 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_11(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_22', 'token_21', 'token_25', 'token_11', 'token_10', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_10(IJoeRouter02) := ϕ(['router_11', 'router_9', 'router_1'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_10(IJoeFactory) := ϕ(['factory_1', 'factory_12', 'factory_9'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_10(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_9', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
wavaxReserve_19(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_24', 'wavaxReserve_18', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_112(uint256) = tokenIncentivesForUsers_8 (c)* tokenAllocated_2
Finance type key: (0, 0)
[i]Type for TMP_112

Name: TMP_112 Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
TMP_113(uint256) = TMP_112 (c)/ tokenReserve_8
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_113

Name: TMP_113 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: price/exchange rate
tokenIncentivesForUsers_9(uint256) := TMP_113(uint256)
Error with tokenIncentivesForUsers in function createPair
Error with: tokenIncentivesForUsers in function createPair
Finance type key: (40, -1)
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_119 = CONVERT this to address
[i]Type for TMP_119

Name: TMP_119 Function: createPair
Num: -1
Den: -1
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:router_10(IJoeRouter02), function:addLiquidity, arguments:['wavaxAddress_1', 'tokenAddress_1', 'wavaxReserve_19', 'tokenAllocated_3', 'wavaxReserve_19', 'tokenAllocated_3', 'TMP_119', 'block.timestamp']  
[i]Type for TUPLE_0

Name: TUPLE_0 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
router_11(IJoeRouter02) := ϕ(['router_11', 'router_1', 'router_10'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_11(IJoeFactory) := ϕ(['factory_1', 'factory_12', 'factory_10'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_11(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_10', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
wavaxReserve_20(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_24', 'wavaxReserve_19', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
lpSupply_1(uint256)= UNPACK TUPLE_0 index: 2 
[i]Type for lpSupply

Name: lpSupply Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_114(uint256) = tokenIncentivesBalance_8 (c)- tokenIncentivesForUsers_9
Finance type key: (0, 40)
Error with TMP_114 in function createPair
Error with: TMP_114 in function createPair
[i]Type for TMP_114

Name: TMP_114 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
tokenIncentiveIssuerRefund_1(uint256) := TMP_114(uint256)
Finance type key: (-1, -1)
[i]Type for tokenIncentiveIssuerRefund

Name: tokenIncentiveIssuerRefund Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_120(address) = HIGH_LEVEL_CALL, dest:factory_11(IJoeFactory), function:getPair, arguments:['tokenAddress_1', 'wavaxAddress_1']  
[i]Type for TMP_120

Name: TMP_120 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
factory_12(IJoeFactory) := ϕ(['factory_1', 'factory_11', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_12(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_11'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
wavaxReserve_21(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_20', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_121 = CONVERT TMP_120 to IJoePair
[i]Type for TMP_121

Name: TMP_121 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
pair_1(IJoePair) := TMP_121(IJoePair)
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
wavaxAllocated_1(uint256) := wavaxReserve_21(uint256)
Finance type key: (0, -1)
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
wavaxReserve_22(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
tokenReserve_13(uint256) = tokenReserve_12 (c)- tokenAllocated_3
Finance type key: (0, 0)
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_122 = CONVERT pair_1 to address
[i]Type for TMP_122

Name: TMP_122 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
floorPrice_2(uint256) := ϕ(['floorPrice_1', 'floorPrice_0', 'floorPrice_8', 'floorPrice_7'])
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
WAVAX_14(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_0', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
token_3(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_2(IJoeRouter02) := ϕ(['router_11', 'router_0', 'router_1'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_2(IJoeFactory) := ϕ(['factory_1', 'factory_0', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_2(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
tokenIncentivesBalance_2(uint256) := ϕ(['tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14'])
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesForUsers_2(uint256) := ϕ(['tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_0', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9'])
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
wavaxReserve_11(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
REF_38(LaunchEvent.Phase) -> Phase.PhaseThree
[i]Type for REF_38

Name: REF_38 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_38)
TMP_90 = CONVERT WAVAX_16 to address
[i]Type for TMP_90

Name: TMP_90 Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
wavaxAddress_1(address) := TMP_90(address)
Finance type key: (-1, -1)
[i]Type for wavaxAddress

Name: wavaxAddress Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
TMP_91 = CONVERT token_5 to address
[i]Type for TMP_91

Name: TMP_91 Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
tokenAddress_1(address) := TMP_91(address)
Finance type key: (-1, -1)
[i]Type for tokenAddress

Name: tokenAddress Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_92(address) = HIGH_LEVEL_CALL, dest:factory_4(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
[i]Type for TMP_92

Name: TMP_92 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
floorPrice_5(uint256) := ϕ(['floorPrice_1', 'floorPrice_4', 'floorPrice_8', 'floorPrice_7'])
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
WAVAX_17(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_16', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
token_6(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15', 'token_5'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_5(IJoeRouter02) := ϕ(['router_11', 'router_1', 'router_4'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_5(IJoeFactory) := ϕ(['factory_1', 'factory_4', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_5(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_4'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
tokenIncentivesBalance_5(uint256) := ϕ(['tokenIncentivesBalance_13', 'tokenIncentivesBalance_4', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14'])
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesForUsers_5(uint256) := ϕ(['tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_4', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9'])
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
wavaxReserve_14(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_13', 'wavaxReserve_10', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_93 = CONVERT 0 to address
[i]Type for TMP_93

Name: TMP_93 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94(bool) = TMP_92 == TMP_93
[i]Type for TMP_94

Name: TMP_94 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95 = CONVERT factory_5 to IJoeFactory
[i]Type for TMP_95

Name: TMP_95 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
TMP_96(address) = HIGH_LEVEL_CALL, dest:TMP_95(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
[i]Type for TMP_96

Name: TMP_96 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
floorPrice_6(uint256) := ϕ(['floorPrice_1', 'floorPrice_5', 'floorPrice_8', 'floorPrice_7'])
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
WAVAX_18(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_17', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
token_7(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_6', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_6(IJoeRouter02) := ϕ(['router_11', 'router_5', 'router_1'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_6(IJoeFactory) := ϕ(['factory_1', 'factory_5', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_6(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_5'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
tokenIncentivesBalance_6(uint256) := ϕ(['tokenIncentivesBalance_13', 'tokenIncentivesBalance_5', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14'])
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesForUsers_6(uint256) := ϕ(['tokenIncentivesForUsers_5', 'tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9'])
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
wavaxReserve_15(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_14', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_97 = CONVERT TMP_96 to IJoePair
[i]Type for TMP_97

Name: TMP_97 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
TMP_98(uint256) = HIGH_LEVEL_CALL, dest:TMP_97(IJoePair), function:totalSupply, arguments:[]  
[i]Type for TMP_98

Name: TMP_98 Function: createPair
Num: 1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
floorPrice_7(uint256) := ϕ(['floorPrice_6', 'floorPrice_1', 'floorPrice_8', 'floorPrice_7'])
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
WAVAX_19(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_18', 'WAVAX_2', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
token_8(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_7', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_7(IJoeRouter02) := ϕ(['router_11', 'router_1', 'router_6'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_7(IJoeFactory) := ϕ(['factory_1', 'factory_6', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_7(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_6'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
tokenIncentivesBalance_7(uint256) := ϕ(['tokenIncentivesBalance_13', 'tokenIncentivesBalance_6', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14'])
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesForUsers_7(uint256) := ϕ(['tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_6'])
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
wavaxReserve_16(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_15', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_99(bool) = TMP_98 == 0
[i]Type for TMP_99

Name: TMP_99 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(bool) = TMP_94 || TMP_99
[i]Type for TMP_100

Name: TMP_100 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101(None) = SOLIDITY_CALL require(bool,string)(TMP_100,LaunchEvent: liquid pair already exists)
[i]Type for TMP_101

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_102(bool) = wavaxReserve_16 > 0
[i]Type for TMP_102

Name: TMP_102 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103(None) = SOLIDITY_CALL require(bool,string)(TMP_102,LaunchEvent: no wavax balance)
[i]Type for TMP_103

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenAllocated_1(uint256) := tokenReserve_7(uint256)
Finance type key: (0, -1)
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_104(uint256) = 10 (c)** 18
[i]Type for TMP_104

Name: TMP_104 Function: createPair
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
TMP_105(uint256) = wavaxReserve_16 (c)* TMP_104
[i]Type for TMP_105

Name: TMP_105 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_106(uint256) = TMP_105 (c)/ tokenAllocated_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_106

Name: TMP_106 Function: createPair
Num: -1
Den: -999
Address: u
Norm: 12
LF: None
Value: 0
Fields: 
Finance Type: price/exchange rate
TMP_107(bool) = floorPrice_7 > TMP_106
Finance type key: (40, 40)
[i]Type for TMP_107

Name: TMP_107 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenAllocated_3(uint256) := ϕ(['tokenAllocated_2', 'tokenAllocated_1'])
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_115 = CONVERT router_8 to address
[i]Type for TMP_115

Name: TMP_115 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
TMP_116(bool) = HIGH_LEVEL_CALL, dest:WAVAX_20(IWAVAX), function:approve, arguments:['TMP_115', 'wavaxReserve_17']  
[i]Type for TMP_116

Name: TMP_116 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
WAVAX_21(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_20', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
token_10(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_9', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_9(IJoeRouter02) := ϕ(['router_11', 'router_8', 'router_1'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_9(IJoeFactory) := ϕ(['factory_1', 'factory_8', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_9(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_8'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
wavaxReserve_18(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_17', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_108(uint8) = HIGH_LEVEL_CALL, dest:token_8(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_108

Name: TMP_108 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6
Fields: 
Finance Type: undef
floorPrice_8(uint256) := ϕ(['floorPrice_1', 'floorPrice_8', 'floorPrice_7'])
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
WAVAX_20(IWAVAX) := ϕ(['WAVAX_13', 'WAVAX_8', 'WAVAX_29', 'WAVAX_2', 'WAVAX_19', 'WAVAX_30', 'WAVAX_24', 'WAVAX_21', 'WAVAX_23'])
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
token_9(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_8', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_8(IJoeRouter02) := ϕ(['router_11', 'router_1', 'router_7'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_8(IJoeFactory) := ϕ(['factory_1', 'factory_7', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_8(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_7', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
tokenIncentivesBalance_8(uint256) := ϕ(['tokenIncentivesBalance_13', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14'])
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesForUsers_8(uint256) := ϕ(['tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9'])
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
wavaxReserve_17(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_24', 'wavaxReserve_16', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_109(uint256) = 10 (c)** TMP_108
[i]Type for TMP_109

Name: TMP_109 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_110(uint256) = wavaxReserve_17 (c)* TMP_109
[i]Type for TMP_110

Name: TMP_110 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_111(uint256) = TMP_110 (c)/ floorPrice_8
Finance type key: (0, 40)
Finance type key: (0, 40)
[i]Type for TMP_111

Name: TMP_111 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
tokenAllocated_2(uint256) := TMP_111(uint256)
Finance type key: (0, -1)
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_117 = CONVERT router_9 to address
[i]Type for TMP_117

Name: TMP_117 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
TMP_118(bool) = HIGH_LEVEL_CALL, dest:token_10(IERC20Metadata), function:approve, arguments:['TMP_117', 'tokenAllocated_3']  
[i]Type for TMP_118

Name: TMP_118 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_11(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_22', 'token_21', 'token_25', 'token_11', 'token_10', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
router_10(IJoeRouter02) := ϕ(['router_11', 'router_9', 'router_1'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_10(IJoeFactory) := ϕ(['factory_1', 'factory_12', 'factory_9'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_10(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_9', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
wavaxReserve_19(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_24', 'wavaxReserve_18', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_112(uint256) = tokenIncentivesForUsers_8 (c)* tokenAllocated_2
Finance type key: (0, 0)
[i]Type for TMP_112

Name: TMP_112 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_113(uint256) = TMP_112 (c)/ tokenReserve_8
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_113

Name: TMP_113 Function: createPair
Num: -1
Den: -999
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: price/exchange rate
tokenIncentivesForUsers_9(uint256) := TMP_113(uint256)
Finance type key: (40, -1)
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -1
Den: -999
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: price/exchange rate
TMP_119 = CONVERT this to address
[i]Type for TMP_119

Name: TMP_119 Function: createPair
Num: 
Den: 
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:router_10(IJoeRouter02), function:addLiquidity, arguments:['wavaxAddress_1', 'tokenAddress_1', 'wavaxReserve_19', 'tokenAllocated_3', 'wavaxReserve_19', 'tokenAllocated_3', 'TMP_119', 'block.timestamp']  
[i]Type for TUPLE_0

Name: TUPLE_0 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
router_11(IJoeRouter02) := ϕ(['router_11', 'router_1', 'router_10'])
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
factory_11(IJoeFactory) := ϕ(['factory_1', 'factory_12', 'factory_10'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_11(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_10', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
wavaxReserve_20(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_24', 'wavaxReserve_19', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
lpSupply_1(uint256)= UNPACK TUPLE_0 index: 2 
[i]Type for lpSupply

Name: lpSupply Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_114(uint256) = tokenIncentivesBalance_8 (c)- tokenIncentivesForUsers_9
Handling trace

Name: tokenIncentivesForUsers Function: createPair
Num: -1
Den: -999
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: price/exchange rate

Name: tokenIncentivesBalance Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
d:{-999: -1}
[i]Type for TMP_114

Name: TMP_114 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenIncentiveIssuerRefund_1(uint256) := TMP_114(uint256)
Finance type key: (-1, -1)
[i]Type for tokenIncentiveIssuerRefund

Name: tokenIncentiveIssuerRefund Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(address) = HIGH_LEVEL_CALL, dest:factory_11(IJoeFactory), function:getPair, arguments:['tokenAddress_1', 'wavaxAddress_1']  
[i]Type for TMP_120

Name: TMP_120 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
factory_12(IJoeFactory) := ϕ(['factory_1', 'factory_11', 'factory_12'])
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
tokenReserve_12(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_20', 'tokenReserve_1', 'tokenReserve_13', 'tokenReserve_11'])
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
wavaxReserve_21(uint256) := ϕ(['wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_20', 'wavaxReserve_24', 'wavaxReserve_22'])
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_121 = CONVERT TMP_120 to IJoePair
[i]Type for TMP_121

Name: TMP_121 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
pair_1(IJoePair) := TMP_121(IJoePair)
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
wavaxAllocated_1(uint256) := wavaxReserve_21(uint256)
Finance type key: (0, -1)
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
wavaxReserve_22(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
tokenReserve_13(uint256) = tokenReserve_12 (c)- tokenAllocated_3
Finance type key: (0, 0)
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_122 = CONVERT pair_1 to address
[i]Type for TMP_122

Name: TMP_122 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef



withdrawLiquidity
issuer_5(address) := ϕ(['issuer_10', 'issuer_12', 'issuer_8', 'issuer_4', 'issuer_0', 'issuer_13', 'issuer_1'])
[i]Type for issuer

Name: issuer Function: withdrawLiquidity
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
token_12(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: withdrawLiquidity
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
getUserInfo_10(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9', 'getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0'])
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pair_2(IJoePair) := ϕ(['pair_0', 'pair_1', 'pair_7', 'pair_9'])
[i]Type for pair

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
lpSupply_2(uint256) := ϕ(['lpSupply_5', 'lpSupply_1', 'lpSupply_0'])
[i]Type for lpSupply

Name: lpSupply Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenReserve_14(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20'])
[i]Type for tokenReserve

Name: tokenReserve Function: withdrawLiquidity
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
MODIFIER_CALL, LaunchEvent.timelockElapsed()()
issuer_14(address) := ϕ(['issuer_10', 'issuer_12', 'issuer_8', 'issuer_4', 'issuer_0', 'issuer_13', 'issuer_1'])
[i]Type for issuer

Name: issuer Function: timelockElapsed
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
auctionStart_4(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
[i]Type for auctionStart

Name: auctionStart Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_DURATION_4(uint256) := ϕ(['PHASE_ONE_DURATION_0', 'PHASE_ONE_DURATION_1'])
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_TWO_DURATION_3(uint256) := ϕ(['PHASE_TWO_DURATION_1', 'PHASE_TWO_DURATION_0'])
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
userTimelock_2(uint256) := ϕ(['userTimelock_0', 'userTimelock_1'])
[i]Type for userTimelock

Name: userTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
issuerTimelock_2(uint256) := ϕ(['issuerTimelock_0', 'issuerTimelock_1'])
[i]Type for issuerTimelock

Name: issuerTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_230(uint256) = auctionStart_4 (c)+ PHASE_ONE_DURATION_4
[i]Type for TMP_230

Name: TMP_230 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_231(uint256) = TMP_230 (c)+ PHASE_TWO_DURATION_3
[i]Type for TMP_231

Name: TMP_231 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
phase3Start_1(uint256) := TMP_231(uint256)
Finance type key: (-1, -1)
[i]Type for phase3Start

Name: phase3Start Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_232(bool) = msg.sender == issuer_14
[i]Type for TMP_232

Name: TMP_232 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_236(uint256) = phase3Start_1 (c)+ userTimelock_2
[i]Type for TMP_236

Name: TMP_236 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_237(bool) = block.timestamp > TMP_236
[i]Type for TMP_237

Name: TMP_237 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_238(None) = SOLIDITY_CALL require(bool,string)(TMP_237,LaunchEvent: can't withdraw before user's timelock)
[i]Type for TMP_238

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_233(uint256) = phase3Start_1 (c)+ issuerTimelock_2
[i]Type for TMP_233

Name: TMP_233 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_234(bool) = block.timestamp > TMP_233
[i]Type for TMP_234

Name: TMP_234 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_235(None) = SOLIDITY_CALL require(bool,string)(TMP_234,LaunchEvent: can't withdraw before issuer's timelock)
[i]Type for TMP_235

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
issuer_14(address) := ϕ(['issuer_10', 'issuer_12', 'issuer_8', 'issuer_4', 'issuer_0', 'issuer_13', 'issuer_1'])
[i]Type for issuer

Name: issuer Function: timelockElapsed
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
auctionStart_4(uint256) := ϕ(['auctionStart_0', 'auctionStart_1'])
[i]Type for auctionStart

Name: auctionStart Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_ONE_DURATION_4(uint256) := ϕ(['PHASE_ONE_DURATION_0', 'PHASE_ONE_DURATION_1'])
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
PHASE_TWO_DURATION_3(uint256) := ϕ(['PHASE_TWO_DURATION_1', 'PHASE_TWO_DURATION_0'])
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
userTimelock_2(uint256) := ϕ(['userTimelock_0', 'userTimelock_1'])
[i]Type for userTimelock

Name: userTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
issuerTimelock_2(uint256) := ϕ(['issuerTimelock_0', 'issuerTimelock_1'])
[i]Type for issuerTimelock

Name: issuerTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_230(uint256) = auctionStart_4 (c)+ PHASE_ONE_DURATION_4
[i]Type for TMP_230

Name: TMP_230 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_231(uint256) = TMP_230 (c)+ PHASE_TWO_DURATION_3
[i]Type for TMP_231

Name: TMP_231 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
phase3Start_1(uint256) := TMP_231(uint256)
Finance type key: (-1, -1)
[i]Type for phase3Start

Name: phase3Start Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_232(bool) = msg.sender == issuer_14
[i]Type for TMP_232

Name: TMP_232 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_236(uint256) = phase3Start_1 (c)+ userTimelock_2
[i]Type for TMP_236

Name: TMP_236 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_237(bool) = block.timestamp > TMP_236
[i]Type for TMP_237

Name: TMP_237 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_238(None) = SOLIDITY_CALL require(bool,string)(TMP_237,LaunchEvent: can't withdraw before user's timelock)
[i]Type for TMP_238

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_233(uint256) = phase3Start_1 (c)+ issuerTimelock_2
[i]Type for TMP_233

Name: TMP_233 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_234(bool) = block.timestamp > TMP_233
[i]Type for TMP_234

Name: TMP_234 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_235(None) = SOLIDITY_CALL require(bool,string)(TMP_234,LaunchEvent: can't withdraw before issuer's timelock)
[i]Type for TMP_235

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_126 = CONVERT pair_4 to address
[i]Type for TMP_126

Name: TMP_126 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
TMP_127 = CONVERT 0 to address
[i]Type for TMP_127

Name: TMP_127 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_128(bool) = TMP_126 != TMP_127
[i]Type for TMP_128

Name: TMP_128 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_129(None) = SOLIDITY_CALL require(bool,string)(TMP_128,LaunchEvent: pair not created)
[i]Type for TMP_129

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_39(LaunchEvent.UserInfo) -> getUserInfo_12[msg.sender]
[i]Type for REF_39

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_39(LaunchEvent.UserInfo)
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_40(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
[i]Type for REF_40

Name: REF_40 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_130 = ! REF_40 
[i]Type for TMP_130

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_131(None) = SOLIDITY_CALL require(bool,string)(TMP_130,LaunchEvent: liquidity already withdrawn)
[i]Type for TMP_131

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_132(uint256) = INTERNAL_CALL, LaunchEvent.pairBalance(address)(msg.sender)
_user_1(address) := ϕ(['msg.sender'])
[i]Type for _user

Name: _user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
getUserInfo_20(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9', 'getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0'])
[i]Type for getUserInfo

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
wavaxAllocated_4(uint256) := ϕ(['wavaxAllocated_0', 'wavaxAllocated_1', 'wavaxAllocated_3'])
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
lpSupply_6(uint256) := ϕ(['lpSupply_5', 'lpSupply_1', 'lpSupply_0'])
[i]Type for lpSupply

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_61(LaunchEvent.UserInfo) -> getUserInfo_20[_user_1]
[i]Type for REF_61

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_1(LaunchEvent.UserInfo) := REF_61(LaunchEvent.UserInfo)
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_200(bool) = wavaxAllocated_4 == 0
[i]Type for TMP_200

Name: TMP_200 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_62(bool) -> user_1.hasWithdrawnPair
[i]Type for REF_62

Name: REF_62 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_201(bool) = TMP_200 || REF_62
[i]Type for TMP_201

Name: TMP_201 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_63(uint256) -> user_1.balance
[i]Type for REF_63

Name: REF_63 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_202(uint256) = REF_63 (c)* lpSupply_6
[i]Type for TMP_202

Name: TMP_202 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_203(uint256) = TMP_202 (c)/ wavaxAllocated_4
[i]Type for TMP_203

Name: TMP_203 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_204(uint256) = TMP_203 (c)/ 2
[i]Type for TMP_204

Name: TMP_204 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
RETURN TMP_204
RETURN 0
_user_1(address) := ϕ(['msg.sender'])
[i]Type for _user

Name: _user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
getUserInfo_20(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9', 'getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0'])
[i]Type for getUserInfo

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
wavaxAllocated_4(uint256) := ϕ(['wavaxAllocated_0', 'wavaxAllocated_1', 'wavaxAllocated_3'])
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
lpSupply_6(uint256) := ϕ(['lpSupply_5', 'lpSupply_1', 'lpSupply_0'])
[i]Type for lpSupply

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_61(LaunchEvent.UserInfo) -> getUserInfo_20[_user_1]
[i]Type for REF_61

Name: getUserInfo Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_1(LaunchEvent.UserInfo) := REF_61(LaunchEvent.UserInfo)
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
TMP_200(bool) = wavaxAllocated_4 == 0
[i]Type for TMP_200

Name: TMP_200 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_62(bool) -> user_1.hasWithdrawnPair
[i]Type for REF_62

Name: REF_62 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_201(bool) = TMP_200 || REF_62
[i]Type for TMP_201

Name: TMP_201 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_63(uint256) -> user_1.balance
[i]Type for REF_63

Name: REF_63 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_202(uint256) = REF_63 (c)* lpSupply_6
[i]Type for TMP_202

Name: TMP_202 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_203(uint256) = TMP_202 (c)/ wavaxAllocated_4
[i]Type for TMP_203

Name: TMP_203 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_204(uint256) = TMP_203 (c)/ 2
[i]Type for TMP_204

Name: TMP_204 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
RETURN TMP_204
RETURN 0
[i]Type for TMP_132

Name: TMP_132 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance_1(uint256) := TMP_132(uint256)
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_41(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
[i]Type for REF_41

Name: REF_41 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
REF_41 (->user_2 (-> ['getUserInfo'])) := True(bool)
Finance type key: (-1, -1)
[i]Type for REF_41

Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
getUserInfo_13(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_133(bool) = msg.sender == issuer_8
[i]Type for TMP_133

Name: TMP_133 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_139 = CONVERT pair_5 to address
[i]Type for TMP_139

Name: TMP_139 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
TMP_134(uint256) = lpSupply_5 (c)/ 2
[i]Type for TMP_134

Name: TMP_134 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
balance_2(uint256) := TMP_134(uint256)
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
balance_3(uint256) := ϕ(['balance_1', 'balance_2'])
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_135 = CONVERT pair_5 to address
[i]Type for TMP_135

Name: TMP_135 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
TMP_141(bool) = HIGH_LEVEL_CALL, dest:pair_6(IJoePair), function:transfer, arguments:['msg.sender', 'balance_3']  
[i]Type for TMP_141

Name: TMP_141 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pair_7(IJoePair) := ϕ(['pair_1', 'pair_7', 'pair_9', 'pair_6'])
[i]Type for pair

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
TMP_137(bool) = tokenReserve_17 > 0
[i]Type for TMP_137

Name: TMP_137 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := tokenReserve_17(uint256)
Finance type key: (0, -1)
[i]Type for amount

Name: amount Function: withdrawLiquidity
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
tokenReserve_18(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for tokenReserve

Name: tokenReserve Function: withdrawLiquidity
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_138(bool) = HIGH_LEVEL_CALL, dest:token_15(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_1']  
[i]Type for TMP_138

Name: TMP_138 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_16(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: withdrawLiquidity
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
pair_6(IJoePair) := ϕ(['pair_1', 'pair_7', 'pair_9', 'pair_5'])
[i]Type for pair

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
issuer_5(address) := ϕ(['issuer_10', 'issuer_12', 'issuer_8', 'issuer_4', 'issuer_0', 'issuer_13', 'issuer_1'])
[i]Type for issuer

Name: issuer Function: withdrawLiquidity
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
token_12(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: withdrawLiquidity
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
getUserInfo_10(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9', 'getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0'])
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pair_2(IJoePair) := ϕ(['pair_0', 'pair_1', 'pair_7', 'pair_9'])
[i]Type for pair

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
lpSupply_2(uint256) := ϕ(['lpSupply_5', 'lpSupply_1', 'lpSupply_0'])
[i]Type for lpSupply

Name: lpSupply Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tokenReserve_14(uint256) := ϕ(['tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17', 'tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20'])
[i]Type for tokenReserve

Name: tokenReserve Function: withdrawLiquidity
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
MODIFIER_CALL, LaunchEvent.timelockElapsed()()
TMP_126 = CONVERT pair_4 to address
[i]Type for TMP_126

Name: TMP_126 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
TMP_127 = CONVERT 0 to address
[i]Type for TMP_127

Name: TMP_127 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_128(bool) = TMP_126 != TMP_127
[i]Type for TMP_128

Name: TMP_128 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_129(None) = SOLIDITY_CALL require(bool,string)(TMP_128,LaunchEvent: pair not created)
[i]Type for TMP_129

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_39(LaunchEvent.UserInfo) -> getUserInfo_12[msg.sender]
[i]Type for REF_39

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_39(LaunchEvent.UserInfo)
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
REF_40(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
[i]Type for REF_40

Name: REF_40 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_130 = ! REF_40 
[i]Type for TMP_130

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_131(None) = SOLIDITY_CALL require(bool,string)(TMP_130,LaunchEvent: liquidity already withdrawn)
[i]Type for TMP_131

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_132(uint256) = INTERNAL_CALL, LaunchEvent.pairBalance(address)(msg.sender)
[i]Type for TMP_132

Name: TMP_132 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balance_1(uint256) := TMP_132(uint256)
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_41(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
[i]Type for REF_41

Name: REF_41 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
REF_41 (->user_2 (-> ['getUserInfo'])) := True(bool)
Finance type key: (-1, -1)
[i]Type for REF_41

Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
getUserInfo_13(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_133(bool) = msg.sender == issuer_8
[i]Type for TMP_133

Name: TMP_133 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_139 = CONVERT pair_5 to address
[i]Type for TMP_139

Name: TMP_139 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
TMP_134(uint256) = lpSupply_5 (c)/ 2
[i]Type for TMP_134

Name: TMP_134 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
balance_2(uint256) := TMP_134(uint256)
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
balance_3(uint256) := ϕ(['balance_1', 'balance_2'])
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_135 = CONVERT pair_5 to address
[i]Type for TMP_135

Name: TMP_135 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
TMP_141(bool) = HIGH_LEVEL_CALL, dest:pair_6(IJoePair), function:transfer, arguments:['msg.sender', 'balance_3']  
[i]Type for TMP_141

Name: TMP_141 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pair_7(IJoePair) := ϕ(['pair_1', 'pair_7', 'pair_9', 'pair_6'])
[i]Type for pair

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
TMP_137(bool) = tokenReserve_17 > 0
[i]Type for TMP_137

Name: TMP_137 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_1(uint256) := tokenReserve_17(uint256)
Finance type key: (0, -1)
[i]Type for amount

Name: amount Function: withdrawLiquidity
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: raw balance
tokenReserve_18(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for tokenReserve

Name: tokenReserve Function: withdrawLiquidity
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_138(bool) = HIGH_LEVEL_CALL, dest:token_15(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_1']  
[i]Type for TMP_138

Name: TMP_138 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
token_16(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: withdrawLiquidity
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
pair_6(IJoePair) := ϕ(['pair_1', 'pair_7', 'pair_9', 'pair_5'])
[i]Type for pair

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef



withdrawIncentives
issuer_9(address) := ϕ(['issuer_10', 'issuer_12', 'issuer_8', 'issuer_4', 'issuer_0', 'issuer_13', 'issuer_1'])
[i]Type for issuer

Name: issuer Function: withdrawIncentives
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
token_17(IERC20Metadata) := ϕ(['token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25', 'token_11', 'token_19', 'token_15'])
[i]Type for token

Name: token Function: withdrawIncentives
Num: -1
Den: -1
Address: -999
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
getUserInfo_14(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_4', 'getUserInfo_9', 'getUserInfo_20', 'getUserInfo_13', 'getUserInfo_0'])
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pair_8(IJoePair) := ϕ(['pair_0', 'pair_1', 'pair_7', 'pair_9'])
[i]Type for pair

Name: pair Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
wavaxAllocated_2(uint256) := ϕ(['wavaxAllocated_0', 'wavaxAllocated_1', 'wavaxAllocated_3'])
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
tokenIncentivesBalance_9(uint256) := ϕ(['tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14'])
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: -999
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
tokenIncentivesForUsers_10(uint256) := ϕ(['tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_0', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9'])
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: withdrawIncentives
Num: -1
Den: -999
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
tokenIncentiveIssuerRefund_2(uint256) := ϕ(['tokenIncentiveIssuerRefund_0', 'tokenIncentiveIssuerRefund_1', 'tokenIncentiveIssuerRefund_3'])
[i]Type for tokenIncentiveIssuerRefund

Name: tokenIncentiveIssuerRefund Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
TMP_144 = CONVERT pair_9 to address
[i]Type for TMP_144

Name: TMP_144 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
TMP_145 = CONVERT 0 to address
[i]Type for TMP_145

Name: TMP_145 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_146(bool) = TMP_144 != TMP_145
[i]Type for TMP_146

Name: TMP_146 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,LaunchEvent: pair not created)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
[i]Type for REF_44

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_44(LaunchEvent.UserInfo)
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_45(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
[i]Type for REF_45

Name: REF_45 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_148 = ! REF_45 
[i]Type for TMP_148

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,LaunchEvent: incentives already withdrawn)
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_46(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
[i]Type for REF_46

Name: REF_46 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
[i]Type for user

Name: user Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives
Finance Type: undef
REF_46 (->user_2 (-> ['getUserInfo'])) := True(bool)
Finance type key: (-1, -1)
[i]Type for REF_46

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
getUserInfo_16(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_150(bool) = msg.sender == issuer_10
[i]Type for TMP_150

Name: TMP_150 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_2(uint256) := tokenIncentiveIssuerRefund_3(uint256)
Finance type key: (-1, -1)
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amount_3(uint256) := ϕ(['amount_2', 'amount_1'])
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_47(uint256) -> user_2 (-> ['getUserInfo']).balance
[i]Type for REF_47

Name: user.balance Function: withdrawIncentives
Num: g, l, o, b, a, l, :, w, a, v, a, x
Den: -, 1
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_151(uint256) = REF_47 (c)* tokenIncentivesForUsers_11
[i]Type for TMP_151

Name: TMP_151 Function: withdrawIncentives
Num: g, l, o, b, a, l, :, w, a, v, a, x
Den: -, 1, -999
Address: u
Norm: 18
LF: None
Value: 0
Fields: 
Finance Type: raw balance
TMP_152(uint256) = TMP_151 (c)/ wavaxAllocated_3
Finance type key: (0, 0)
Finance type key: (0, 0)
Executing Group 23
[*] Tested 4 warnings for Rocket Joe
Group 23 complete
Elapsed time: 11.198922604 seconds
Testing complete
