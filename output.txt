Switched global version to 0.6.12
Checking ContextUpgradeable
Checking MathUpgradeable
Checking SafeMathUpgradeable
Checking Initializable
Checking IERC20Upgradeable
Checking SafeERC20Upgradeable
Checking AddressUpgradeable
Checking PausableUpgradeable
Checking BaseStrategy
Checking SettAccessControl
Checking IController
Checking ISettV3
Checking IStrategy
Checking ICvxLocker
Checking IDelegateRegistry
Checking IUniswapRouterV2
Checking MyStrategy
Finance file: MyStrategy_ftypes.txt
Add to address_to_label {'global:governance': 1}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994}
Add to address_to_label {'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
Reading f file...
['[*c]', 'MyStrategy']
['[sef]', 'CONTROLLER', 'vaults', '1', '{c, [-1], [-1], 0, VAULT}']
['[sef]', 'CONTROLLER', 'rewards']
['[sef]', 'SUSHI_ROUTER', 'swapExactTokensForTokens']
['[sef]', 'LOCKER', 'balanceOf', '1', '{c, [2], [-1], 0, f:0}']
['[sef]', 'LOCKER', 'maximumBoostPayment']
['[sef]', 'CVX_VAULT', 'getPricePerFullShare', '1', '{c, 2, 1, 18}']
['[sef]', 'LOCKER', 'lockedBalanceOf']
['[sef]', 'CVX', 'balanceOf', '1', '{c, [2], [-1], 0, f:0}']
['[sef]', 'WANT', 'balanceOf', '1', '{c, [1], [-1], 0, f:0}']
['[sef]', 'REWARD', 'balanceOf', '1', '{c, [1], [-1], 0. f:0}']
['[t]', 'global', 'LOCKER', '-1', '-1', '0', 'LOCKER']
['[t]', 'global', 'this', '-1', '-1', '0']
['[t]', 'global', 'CVX', '-1', '-1', '0', 'CVX']
['[t]', 'global', 'CVX_VAULT', '-1', '-1', '0', 'CVX_VAULT']
['[t]', 'global', 'SUSHI_ROUTER', '-1', '-1', '0', 'SUSHI_ROUTER']
['[t]', 'global', 'WETH', '-1', '-1', '0', 'WETH']
['[t]', 'global', 'reward', '-1', '-1', '0', 'REWARD']
['[t]', 'global', 'lpComponent', '-1', '-1', '0', 'LP']
['[t]', 'global', 'want', '-1', '-1', '0', 'WANT']
['[t]', 'global', 'controller', '-1', '-1', '0', 'CONTROLLER']
['[t]', 'global', 'performanceFeeGovernance', '-1', '-1', '0', 'FEEGOV']
['[t]', 'global', 'performanceFeeStrategist', '-1', '-1', '0', 'FEESTRAT']
['[t]', 'global', 'strategist', '-1', '-1', '0', 'STRAT']
['[t]', 'global', 'DELEGATE', '-1', '-1', '0', 'DELEGATE']
['[t]', 'global', 'DELEGATED_SPACE', '-1', '-1', '0', 'DELEGAT_SPACE']
['[t]', 'global', 'SNAPSHOT', '-1', '-1', '0']
['[t]', 'global', 'MAX_BPS', '-1', '-1', '0']
['[t]', 'global', 'withdrawalSafetyCheck', '-1', '-1', '0']
['[t]', 'global', 'harvestOnRebalance', '-1', '-1', '0']
['[t]', 'global', 'processLocksOnReinvest', '-1', '-1', '0']
['[t]', 'global', 'processLocksOnRebalance', '-1', '-1', '0']
['[t]', 'global', 'MAX_FEE', '-1', '-1', '0', 'f:12']
['[t]', 'global', 'uniswap']
['[t]', 'global', 'withdrawalFee', 'f:12']
['[t]', 'global', 'governance']
['[t]', 'global', 'keeper']
['[t]', 'global', 'withdrawalMaxDeviationThreshold']
['[t]', 'global', 'guardian']
['[t]', '_transferToVault', '_amount', '1', '-1', '0', 'f:0']
['[t]', '_processFee', 'token', '-1', '-1', '0']
['[t]', '_processFee', 'amount', '1', '-1', '0', 'f:0']
['[t]', '_processFee', 'feeBps', '-1', '-1', '0']
['[t]', '_processFee', 'recipient', '-1', '-1', '0']
['[t]', 'CVXToWant', 'cvx', '2', '-1', '0', 'f:0']
['[t]', 'getProtectedTokens', '_asset', '-1', '-1', '0']
['[t]', '_withdrawSome', '_amount', '1', '-1', '0', 'f:0']
['[t]', 'harvest', 'governancePerformanceFee', '-1', '-1', '0. f:12']
['[t]', 'harvest', 'strategistPerformanceFee', '-1', '-1', '0', 'f:12']
['[t]', '_onlyNotProtectedTokens', '_asset', '1', '-1', '0']
['[t]', 'manualRebalance', 'toLock', '-1', '-1', '0']
['[t]', 'wantToCVX', 'want', '1', '-1', '0', 'f:0']
['']
Finding type for CVX_VAULT(ISettV3 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
(-1, -1, 'u', None, -1, -1)
Finding type for controller(address ... )
prev address? u
Head Addr: 9
    Norm: 0
    Set: {9}
    Fin: NULL
Finding type for CVX(address ... )
prev address? u
Head Addr: 4
    Norm: 6
    Set: {4}
    Fin: NULL
Finding type for LOCKER(ICvxLocker ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
(-1, -1, 'u', None, -1, -1)
Finding type for MAX_BPS(uint256 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
(-1, -1, 'u', None, -1, -1)
Finding type for harvestOnRebalance(bool ... )
Finding type for processLocksOnRebalance(bool ... )
Finding type for want(address ... )
prev address? u
Head Addr: 10
    Norm: 6
    Set: {10}
    Fin: NULL
Finding type for DELEGATE(address ... )
prev address? u
Head Addr: 5
    Norm: 0
    Set: {5}
    Fin: NULL
Finding type for DELEGATED_SPACE(bytes32 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
(-1, -1, 'u', None, -1, -1)
Finding type for SNAPSHOT(IDelegateRegistry ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
(-1, -1, 'u', None, -1, -1)
Finding type for SUSHI_ROUTER(address ... )
prev address? u
Head Addr: 6
    Norm: 0
    Set: {6}
    Fin: NULL
Finding type for reward(address ... )
prev address? u
Head Addr: 7
    Norm: 6
    Set: {7}
    Fin: NULL
Finding type for _paused(bool ... )
Finding type for MAX_FEE(uint256 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
(-1, -1, 'u', None, -1, 12)
Finding type for _initialized(bool ... )
Finding type for _initializing(bool ... )
Finding type for withdrawalSafetyCheck(bool ... )
Finding type for lpComponent(address ... )
prev address? u
Head Addr: 12
    Norm: 0
    Set: {12}
    Fin: NULL
Finding type for withdrawalFee(uint256 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
(-1, -1, 'u', None, -1, 12)
Finding type for governance(address ... )
prev address? u
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Finding type for keeper(address ... )
prev address? u
Head Addr: 8
    Norm: 0
    Set: {8}
    Fin: NULL
Finding type for withdrawalMaxDeviationThreshold(uint256 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
(-1, -1, 'u', None, -1, -1)
Finding type for WETH(address ... )
prev address? u
Head Addr: 13
    Norm: 18
    Set: {13}
    Fin: NULL
Finding type for uniswap(address ... )
prev address? u
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
Finding type for strategist(address ... )
prev address? u
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
Finding type for performanceFeeGovernance(uint256 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
(-1, -1, 'u', None, -1, -1)
Finding type for performanceFeeStrategist(uint256 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
(-1, -1, 'u', None, -1, -1)
Finding type for guardian(address ... )
prev address? u
Head Addr: 11
    Norm: 0
    Set: {11}
    Fin: NULL
Finding type for processLocksOnReinvest(bool ... )



initialize
Finding type for _governance(address ... )
prev address? u
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Finding type for _strategist(address ... )
prev address? u
Head Addr: -998
    Norm: 0
    Set: {-998}
    Fin: NULL
Finding type for _controller(address ... )
prev address? u
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Finding type for _keeper(address ... )
prev address? u
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Finding type for _guardian(address ... )
prev address? u
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Finding type for _wantConfig(address[3] ... )
prev address? u
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
Finding type for _feeConfig(uint256[3] ... )
Finding type for _locker(address ... )
prev address? u
Changed here
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: _governance
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: _strategist
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: _controller
    fields: []
    fintype: -1
Param: 3
    num: []
    den: []
    norm: u
    link: _keeper
    fields: []
    fintype: -1
Param: 4
    num: []
    den: []
    norm: u
    link: _guardian
    fields: []
    fintype: -1
Param: 5
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 6
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 7
    num: []
    den: []
    norm: u
    link: _locker
    fields: []
    fintype: -1


CVX_1(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
SUSHI_ROUTER_1(address) := ϕ(['SUSHI_ROUTER_0', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
SNAPSHOT_1(IDelegateRegistry) := ϕ(['SNAPSHOT_4', 'SNAPSHOT_0'])
DELEGATE_1(address) := ϕ(['DELEGATE_4', 'DELEGATE_0'])
DELEGATED_SPACE_1(bytes32) := ϕ(['DELEGATED_SPACE_4', 'DELEGATED_SPACE_0'])
CVX_VAULT_1(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
MODIFIER_CALL, Initializable.initializer()()
INTERNAL_CALL, BaseStrategy.__BaseStrategy_init(address,address,address,address,address)(_governance_1,_strategist_1,_controller_1,_keeper_1,_guardian_1)
REF_91(address) -> _wantConfig_1[0]
want_22(address) := REF_91(address)
REF_92(address) -> _wantConfig_1[1]
lpComponent_1(address) := REF_92(address)
REF_93(address) -> _wantConfig_1[2]
reward_1(address) := REF_93(address)
REF_94(uint256) -> _feeConfig_1[0]
performanceFeeGovernance_2(uint256) := REF_94(uint256)
REF_95(uint256) -> _feeConfig_1[1]
performanceFeeStrategist_2(uint256) := REF_95(uint256)
REF_96(uint256) -> _feeConfig_1[2]
withdrawalFee_3(uint256) := REF_96(uint256)
TMP_460 = CONVERT _locker_1 to ICvxLocker
LOCKER_1(ICvxLocker) := TMP_460(ICvxLocker)
TMP_461 = CONVERT CVX_3 to IERC20Upgradeable
TMP_463(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_461', '_locker_1', 'TMP_463'] 
TMP_465 = CONVERT CVX_3 to IERC20Upgradeable
TMP_466 = CONVERT CVX_VAULT_3 to address
TMP_468(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_465', 'TMP_466', 'TMP_468'] 
TMP_470 = CONVERT reward_1 to IERC20Upgradeable
TMP_472(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_470', 'SUSHI_ROUTER_3', 'TMP_472'] 
HIGH_LEVEL_CALL, dest:SNAPSHOT_3(IDelegateRegistry), function:setDelegate, arguments:['DELEGATED_SPACE_3', 'DELEGATE_3']  
SNAPSHOT_4(IDelegateRegistry) := ϕ(['SNAPSHOT_3', 'SNAPSHOT_4'])
DELEGATE_4(address) := ϕ(['DELEGATE_4', 'DELEGATE_3'])
DELEGATED_SPACE_4(bytes32) := ϕ(['DELEGATED_SPACE_4', 'DELEGATED_SPACE_3'])


Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
CVX_1
CVX
Name: CVX, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
SUSHI_ROUTER_1
SUSHI_ROUTER
Name: SUSHI_ROUTER, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
weee
SNAPSHOT_1
SNAPSHOT
Name: SNAPSHOT, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
DELEGATE_1
DELEGATE
Name: DELEGATE, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: 5
Norm: u
LF: DELEGATE
Value: u
Fields: 
Finance Type: undef
weee
DELEGATED_SPACE_1
DELEGATED_SPACE
Name: DELEGATED_SPACE, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_1
CVX_VAULT
Name: CVX_VAULT, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_1(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: initialize
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
SUSHI_ROUTER_1(address) := ϕ(['SUSHI_ROUTER_0', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
XXXX
SNAPSHOT_1(IDelegateRegistry) := ϕ(['SNAPSHOT_4', 'SNAPSHOT_0'])
Phi
[i]Type for SNAPSHOT

Name: SNAPSHOT Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
DELEGATE_1(address) := ϕ(['DELEGATE_4', 'DELEGATE_0'])
Phi
[i]Type for DELEGATE

Name: DELEGATE Function: initialize
Num: -1
Den: -1
Address: 5
Norm: u
LF: DELEGATE
Value: u
Fields: 
Finance Type: undef
XXXX
DELEGATED_SPACE_1(bytes32) := ϕ(['DELEGATED_SPACE_4', 'DELEGATED_SPACE_0'])
Phi
[i]Type for DELEGATED_SPACE

Name: DELEGATED_SPACE Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_1(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, Initializable.initializer()()
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_controller_1
_controller_1
_controller
p.norm: 0

Name: _controller_1 Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef
_guardian_1
_guardian_1
_guardian
p.norm: 0

Name: _guardian_1 Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef
_strategist_1
_strategist_1
_strategist
p.norm: 0

Name: _strategist_1 Function: None
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef
_governance_1
_governance_1
_governance
p.norm: 0

Name: _governance_1 Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef
_keeper_1
_keeper_1
_keeper
p.norm: 0

Name: _keeper_1 Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, BaseStrategy.__BaseStrategy_init(address,address,address,address,address)(_governance_1,_strategist_1,_controller_1,_keeper_1,_guardian_1)
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_wantConfig_1
_wantConfig_1
_wantConfig
p.norm: 0

Name: _wantConfig_1 Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
want_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
want_22
want
Name: want, Num: 22

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_91(address) -> _wantConfig_1[0]
INDEX
[i]Type for REF_91

Name: REF_91 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
want_22(address) := REF_91(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for want

Name: want Function: initialize
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
Copied want
 To type: None
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_wantConfig_1
_wantConfig_1
_wantConfig

Name: _wantConfig_1 Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lpComponent_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lpComponent_1
lpComponent
Name: lpComponent, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: 12
Norm: u
LF: lpComponent
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_92(address) -> _wantConfig_1[1]
INDEX
[i]Type for REF_92

Name: REF_92 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lpComponent_1(address) := REF_92(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lpComponent

Name: lpComponent Function: initialize
Num: -1
Den: -1
Address: 12
Norm: u
LF: lpComponent
Value: u
Fields: 
Finance Type: undef
XXXX
Copied lpComponent
 To type: None
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_wantConfig_1
_wantConfig_1
_wantConfig

Name: _wantConfig_1 Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reward_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reward_1
reward
Name: reward, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_93(address) -> _wantConfig_1[2]
INDEX
[i]Type for REF_93

Name: REF_93 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
reward_1(address) := REF_93(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reward

Name: reward Function: initialize
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reward
 To type: None
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeConfig_1
_feeConfig_1
_feeConfig
p.norm: 0
Name: _feeConfig, Num: 1

Name: _feeConfig_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
performanceFeeGovernance_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
performanceFeeGovernance_2
performanceFeeGovernance
Name: performanceFeeGovernance, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_94(uint256) -> _feeConfig_1[0]
INDEX
[i]Type for REF_94

Name: REF_94 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
performanceFeeGovernance_2(uint256) := REF_94(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for performanceFeeGovernance

Name: performanceFeeGovernance Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied performanceFeeGovernance
 To type: None

Name: performanceFeeGovernance Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeConfig_1
_feeConfig_1
_feeConfig
p.norm: 0
Name: _feeConfig, Num: 1

Name: _feeConfig_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
performanceFeeStrategist_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
performanceFeeStrategist_2
performanceFeeStrategist
Name: performanceFeeStrategist, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_95(uint256) -> _feeConfig_1[1]
INDEX
[i]Type for REF_95

Name: REF_95 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
performanceFeeStrategist_2(uint256) := REF_95(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for performanceFeeStrategist

Name: performanceFeeStrategist Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied performanceFeeStrategist
 To type: None

Name: performanceFeeStrategist Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeConfig_1
_feeConfig_1
_feeConfig
p.norm: 0
Name: _feeConfig, Num: 1

Name: _feeConfig_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawalFee_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawalFee_3
withdrawalFee
Name: withdrawalFee, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_96(uint256) -> _feeConfig_1[2]
INDEX
[i]Type for REF_96

Name: REF_96 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
withdrawalFee_3(uint256) := REF_96(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for withdrawalFee

Name: withdrawalFee Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied withdrawalFee
 To type: None

Name: withdrawalFee Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_locker_1
_locker_1
_locker
p.norm: 0

Name: _locker_1 Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
LOCKER_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
LOCKER_1
LOCKER
Name: LOCKER, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_460 = CONVERT _locker_1 to ICvxLocker
Converting _locker_1

Name: _locker_1 Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
init
end
CvxLocker
[i]Type for TMP_460

Name: TMP_460 Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_1(ICvxLocker) := TMP_460(ICvxLocker)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for LOCKER

Name: LOCKER Function: initialize
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
Copied LOCKER
 To type: None

Name: LOCKER Function: initialize
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_3
CVX_3
CVX
Name: CVX, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
_locker_1
_locker_1
_locker

Name: _locker Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_461 = CONVERT CVX_3 to IERC20Upgradeable
Converting CVX_3

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_461

Name: TMP_461 Function: initialize
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_463(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_463

Name: TMP_463 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 115792089237316195423570985008687907853269984665640564039457584007913129639935
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_461', '_locker_1', 'TMP_463'] 
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_3
CVX_3
CVX

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
CVX_VAULT_3
CVX_VAULT_3
CVX_VAULT
Name: CVX_VAULT, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_465 = CONVERT CVX_3 to IERC20Upgradeable
Converting CVX_3

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_465

Name: TMP_465 Function: initialize
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_466 = CONVERT CVX_VAULT_3 to address
Converting CVX_VAULT_3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_466

Name: TMP_466 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_468(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_468

Name: TMP_468 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 115792089237316195423570985008687907853269984665640564039457584007913129639935
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_465', 'TMP_466', 'TMP_468'] 
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
SUSHI_ROUTER_3
SUSHI_ROUTER_3
SUSHI_ROUTER
Name: SUSHI_ROUTER, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
reward_1
reward_1
reward

Name: reward Function: initialize
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_470 = CONVERT reward_1 to IERC20Upgradeable
Converting reward_1

Name: reward Function: initialize
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_470

Name: TMP_470 Function: initialize
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_472(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_472

Name: TMP_472 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 115792089237316195423570985008687907853269984665640564039457584007913129639935
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_470', 'SUSHI_ROUTER_3', 'TMP_472'] 
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
SNAPSHOT_3
SNAPSHOT_3
SNAPSHOT
Name: SNAPSHOT, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
DELEGATE_3
DELEGATE_3
DELEGATE
Name: DELEGATE, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: 5
Norm: u
LF: DELEGATE
Value: u
Fields: 
Finance Type: undef
DELEGATED_SPACE_3
DELEGATED_SPACE_3
DELEGATED_SPACE
Name: DELEGATED_SPACE, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
SNAPSHOT_4
SNAPSHOT
Name: SNAPSHOT, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
DELEGATE_4
DELEGATE
Name: DELEGATE, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: 5
Norm: u
LF: DELEGATE
Value: u
Fields: 
Finance Type: undef
weee
DELEGATED_SPACE_4
DELEGATED_SPACE
Name: DELEGATED_SPACE, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:SNAPSHOT_3(IDelegateRegistry), function:setDelegate, arguments:['DELEGATED_SPACE_3', 'DELEGATE_3']  
High Call: setDelegate
SNAPSHOT_4(IDelegateRegistry) := ϕ(['SNAPSHOT_3', 'SNAPSHOT_4'])
Phi
[i]Type for SNAPSHOT

Name: SNAPSHOT Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
DELEGATE_4(address) := ϕ(['DELEGATE_4', 'DELEGATE_3'])
Phi
[i]Type for DELEGATE

Name: DELEGATE Function: initialize
Num: -1
Den: -1
Address: 5
Norm: u
LF: DELEGATE
Value: u
Fields: 
Finance Type: undef
XXXX
DELEGATED_SPACE_4(bytes32) := ϕ(['DELEGATED_SPACE_4', 'DELEGATED_SPACE_3'])
Phi
[i]Type for DELEGATED_SPACE

Name: DELEGATED_SPACE Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


CVX_1(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
SUSHI_ROUTER_1(address) := ϕ(['SUSHI_ROUTER_0', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
SNAPSHOT_1(IDelegateRegistry) := ϕ(['SNAPSHOT_4', 'SNAPSHOT_0'])
DELEGATE_1(address) := ϕ(['DELEGATE_4', 'DELEGATE_0'])
DELEGATED_SPACE_1(bytes32) := ϕ(['DELEGATED_SPACE_4', 'DELEGATED_SPACE_0'])
CVX_VAULT_1(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
MODIFIER_CALL, Initializable.initializer()()
INTERNAL_CALL, BaseStrategy.__BaseStrategy_init(address,address,address,address,address)(_governance_1,_strategist_1,_controller_1,_keeper_1,_guardian_1)
REF_91(address) -> _wantConfig_1[0]
want_22(address) := REF_91(address)
REF_92(address) -> _wantConfig_1[1]
lpComponent_1(address) := REF_92(address)
REF_93(address) -> _wantConfig_1[2]
reward_1(address) := REF_93(address)
REF_94(uint256) -> _feeConfig_1[0]
performanceFeeGovernance_2(uint256) := REF_94(uint256)
REF_95(uint256) -> _feeConfig_1[1]
performanceFeeStrategist_2(uint256) := REF_95(uint256)
REF_96(uint256) -> _feeConfig_1[2]
withdrawalFee_3(uint256) := REF_96(uint256)
TMP_460 = CONVERT _locker_1 to ICvxLocker
LOCKER_1(ICvxLocker) := TMP_460(ICvxLocker)
TMP_461 = CONVERT CVX_3 to IERC20Upgradeable
TMP_463(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_461', '_locker_1', 'TMP_463'] 
TMP_465 = CONVERT CVX_3 to IERC20Upgradeable
TMP_466 = CONVERT CVX_VAULT_3 to address
TMP_468(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_465', 'TMP_466', 'TMP_468'] 
TMP_470 = CONVERT reward_1 to IERC20Upgradeable
TMP_472(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_470', 'SUSHI_ROUTER_3', 'TMP_472'] 
HIGH_LEVEL_CALL, dest:SNAPSHOT_3(IDelegateRegistry), function:setDelegate, arguments:['DELEGATED_SPACE_3', 'DELEGATE_3']  
SNAPSHOT_4(IDelegateRegistry) := ϕ(['SNAPSHOT_3', 'SNAPSHOT_4'])
DELEGATE_4(address) := ϕ(['DELEGATE_4', 'DELEGATE_3'])
DELEGATED_SPACE_4(bytes32) := ϕ(['DELEGATED_SPACE_4', 'DELEGATED_SPACE_3'])


Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
CVX_1
CVX

Name: CVX Function: initialize
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
SUSHI_ROUTER_1
SUSHI_ROUTER

Name: SUSHI_ROUTER Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
weee
SNAPSHOT_1
SNAPSHOT

Name: SNAPSHOT Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
DELEGATE_1
DELEGATE

Name: DELEGATE Function: initialize
Num: -1
Den: -1
Address: 5
Norm: u
LF: DELEGATE
Value: u
Fields: 
Finance Type: undef
weee
DELEGATED_SPACE_1
DELEGATED_SPACE

Name: DELEGATED_SPACE Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_1
CVX_VAULT

Name: CVX_VAULT Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_1(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: initialize
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
SUSHI_ROUTER_1(address) := ϕ(['SUSHI_ROUTER_0', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
XXXX
SNAPSHOT_1(IDelegateRegistry) := ϕ(['SNAPSHOT_4', 'SNAPSHOT_0'])
Phi
[i]Type for SNAPSHOT

Name: SNAPSHOT Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
DELEGATE_1(address) := ϕ(['DELEGATE_4', 'DELEGATE_0'])
Phi
[i]Type for DELEGATE

Name: DELEGATE Function: initialize
Num: -1
Den: -1
Address: 5
Norm: u
LF: DELEGATE
Value: u
Fields: 
Finance Type: undef
XXXX
DELEGATED_SPACE_1(bytes32) := ϕ(['DELEGATED_SPACE_4', 'DELEGATED_SPACE_0'])
Phi
[i]Type for DELEGATED_SPACE

Name: DELEGATED_SPACE Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_1(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, Initializable.initializer()()
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_controller_1
_controller_1
_controller

Name: _controller_1 Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef
_guardian_1
_guardian_1
_guardian

Name: _guardian_1 Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef
_strategist_1
_strategist_1
_strategist

Name: _strategist_1 Function: None
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef
_governance_1
_governance_1
_governance

Name: _governance_1 Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef
_keeper_1
_keeper_1
_keeper

Name: _keeper_1 Function: None
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef
End popogation
weee
INTERNAL_CALL, BaseStrategy.__BaseStrategy_init(address,address,address,address,address)(_governance_1,_strategist_1,_controller_1,_keeper_1,_guardian_1)
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_wantConfig_1
_wantConfig_1
_wantConfig

Name: _wantConfig_1 Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
want_22

Name: want Function: initialize
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
want_22
want

Name: want Function: initialize
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_91(address) -> _wantConfig_1[0]
INDEX
[i]Type for REF_91

Name: REF_91 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
want_22(address) := REF_91(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for want

Name: want Function: initialize
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
Copied want
 To type: None
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_wantConfig_1
_wantConfig_1
_wantConfig

Name: _wantConfig_1 Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lpComponent_1

Name: lpComponent Function: initialize
Num: -1
Den: -1
Address: 12
Norm: u
LF: lpComponent
Value: u
Fields: 
Finance Type: undef
lpComponent_1
lpComponent

Name: lpComponent Function: initialize
Num: -1
Den: -1
Address: 12
Norm: u
LF: lpComponent
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_92(address) -> _wantConfig_1[1]
INDEX
[i]Type for REF_92

Name: REF_92 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
lpComponent_1(address) := REF_92(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for lpComponent

Name: lpComponent Function: initialize
Num: -1
Den: -1
Address: 12
Norm: u
LF: lpComponent
Value: u
Fields: 
Finance Type: undef
XXXX
Copied lpComponent
 To type: None
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_wantConfig_1
_wantConfig_1
_wantConfig

Name: _wantConfig_1 Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reward_1

Name: reward Function: initialize
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
reward_1
reward

Name: reward Function: initialize
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_93(address) -> _wantConfig_1[2]
INDEX
[i]Type for REF_93

Name: REF_93 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
reward_1(address) := REF_93(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for reward

Name: reward Function: initialize
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
Copied reward
 To type: None
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeConfig_1
_feeConfig_1
_feeConfig
p.norm: 0
Name: _feeConfig, Num: 1

Name: _feeConfig_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
performanceFeeGovernance_2

Name: performanceFeeGovernance Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
performanceFeeGovernance_2
performanceFeeGovernance

Name: performanceFeeGovernance Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_94(uint256) -> _feeConfig_1[0]
INDEX
[i]Type for REF_94

Name: REF_94 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
performanceFeeGovernance_2(uint256) := REF_94(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for performanceFeeGovernance

Name: performanceFeeGovernance Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied performanceFeeGovernance
 To type: None

Name: performanceFeeGovernance Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeConfig_1
_feeConfig_1
_feeConfig
p.norm: 0
Name: _feeConfig, Num: 1

Name: _feeConfig_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
performanceFeeStrategist_2

Name: performanceFeeStrategist Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
performanceFeeStrategist_2
performanceFeeStrategist

Name: performanceFeeStrategist Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_95(uint256) -> _feeConfig_1[1]
INDEX
[i]Type for REF_95

Name: REF_95 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
performanceFeeStrategist_2(uint256) := REF_95(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for performanceFeeStrategist

Name: performanceFeeStrategist Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied performanceFeeStrategist
 To type: None

Name: performanceFeeStrategist Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_feeConfig_1
_feeConfig_1
_feeConfig
p.norm: 0
Name: _feeConfig, Num: 1

Name: _feeConfig_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawalFee_3

Name: withdrawalFee Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawalFee_3
withdrawalFee

Name: withdrawalFee Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
REF_96(uint256) -> _feeConfig_1[2]
INDEX
[i]Type for REF_96

Name: REF_96 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
withdrawalFee_3(uint256) := REF_96(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for withdrawalFee

Name: withdrawalFee Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied withdrawalFee
 To type: None

Name: withdrawalFee Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_locker_1
_locker_1
_locker

Name: _locker Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
LOCKER_1

Name: LOCKER Function: initialize
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
LOCKER_1
LOCKER

Name: LOCKER Function: initialize
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_460 = CONVERT _locker_1 to ICvxLocker
Converting _locker_1

Name: _locker Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
init
end
CvxLocker
[i]Type for TMP_460

Name: TMP_460 Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_1(ICvxLocker) := TMP_460(ICvxLocker)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for LOCKER

Name: LOCKER Function: initialize
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
Copied LOCKER
 To type: None

Name: LOCKER Function: initialize
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_3
CVX_3
CVX

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
_locker_1
_locker_1
_locker

Name: _locker Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_461 = CONVERT CVX_3 to IERC20Upgradeable
Converting CVX_3

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_461

Name: TMP_461 Function: initialize
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_463(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_463

Name: TMP_463 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 115792089237316195423570985008687907853269984665640564039457584007913129639935
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_461', '_locker_1', 'TMP_463'] 
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_3
CVX_3
CVX

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
CVX_VAULT_3
CVX_VAULT_3
CVX_VAULT

Name: CVX_VAULT Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_465 = CONVERT CVX_3 to IERC20Upgradeable
Converting CVX_3

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_465

Name: TMP_465 Function: initialize
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_466 = CONVERT CVX_VAULT_3 to address
Converting CVX_VAULT_3

Name: CVX_VAULT Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_466

Name: TMP_466 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_468(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_468

Name: TMP_468 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 115792089237316195423570985008687907853269984665640564039457584007913129639935
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_465', 'TMP_466', 'TMP_468'] 
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
SUSHI_ROUTER_3
SUSHI_ROUTER_3
SUSHI_ROUTER

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
reward_1
reward_1
reward

Name: reward Function: initialize
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_470 = CONVERT reward_1 to IERC20Upgradeable
Converting reward_1

Name: reward Function: initialize
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_470

Name: TMP_470 Function: initialize
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_472(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_472

Name: TMP_472 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 115792089237316195423570985008687907853269984665640564039457584007913129639935
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeApprove(IERC20Upgradeable,address,uint256), arguments:['TMP_470', 'SUSHI_ROUTER_3', 'TMP_472'] 
Rembmered parameters?

Name: _governance Function: initialize
Num: 
Den: 
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef

Name: _strategist Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: _strategist
Value: u
Fields: 
Finance Type: undef

Name: _controller Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: _controller
Value: u
Fields: 
Finance Type: undef

Name: _keeper Function: initialize
Num: 
Den: 
Address: -996
Norm: u
LF: _keeper
Value: u
Fields: 
Finance Type: undef

Name: _guardian Function: initialize
Num: 
Den: 
Address: -995
Norm: u
LF: _guardian
Value: u
Fields: 
Finance Type: undef

Name: _wantConfig Function: initialize
Num: 
Den: 
Address: -994
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _feeConfig Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _locker Function: initialize
Num: 
Den: 
Address: -993
Norm: u
LF: _locker
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
SNAPSHOT_3
SNAPSHOT_3
SNAPSHOT

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
DELEGATE_3
DELEGATE_3
DELEGATE

Name: None Function: None
Num: -1
Den: -1
Address: 5
Norm: u
LF: DELEGATE
Value: u
Fields: 
Finance Type: undef
DELEGATED_SPACE_3
DELEGATED_SPACE_3
DELEGATED_SPACE

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
SNAPSHOT_4
SNAPSHOT

Name: SNAPSHOT Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
DELEGATE_4
DELEGATE

Name: DELEGATE Function: initialize
Num: -1
Den: -1
Address: 5
Norm: u
LF: DELEGATE
Value: u
Fields: 
Finance Type: undef
weee
DELEGATED_SPACE_4
DELEGATED_SPACE

Name: DELEGATED_SPACE Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:SNAPSHOT_3(IDelegateRegistry), function:setDelegate, arguments:['DELEGATED_SPACE_3', 'DELEGATE_3']  
High Call: setDelegate
SNAPSHOT_4(IDelegateRegistry) := ϕ(['SNAPSHOT_3', 'SNAPSHOT_4'])
Phi
[i]Type for SNAPSHOT

Name: SNAPSHOT Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
DELEGATE_4(address) := ϕ(['DELEGATE_4', 'DELEGATE_3'])
Phi
[i]Type for DELEGATE

Name: DELEGATE Function: initialize
Num: -1
Den: -1
Address: 5
Norm: u
LF: DELEGATE
Value: u
Fields: 
Finance Type: undef
XXXX
DELEGATED_SPACE_4(bytes32) := ϕ(['DELEGATED_SPACE_4', 'DELEGATED_SPACE_3'])
Phi
[i]Type for DELEGATED_SPACE

Name: DELEGATED_SPACE Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



setWithdrawalSafetyCheck
Finding type for newWithdrawalSafetyCheck(bool ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


INTERNAL_CALL, SettAccessControl._onlyGovernance()()
withdrawalSafetyCheck_1(bool) := newWithdrawalSafetyCheck_1(bool)


Rembmered parameters?

Name: newWithdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: newWithdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?

Name: newWithdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newWithdrawalSafetyCheck_1
newWithdrawalSafetyCheck_1
newWithdrawalSafetyCheck
p.norm: 0
Name: newWithdrawalSafetyCheck, Num: 1

Name: newWithdrawalSafetyCheck_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawalSafetyCheck_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawalSafetyCheck_1
withdrawalSafetyCheck
Name: withdrawalSafetyCheck, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
withdrawalSafetyCheck_1(bool) := newWithdrawalSafetyCheck_1(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for withdrawalSafetyCheck

Name: withdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied withdrawalSafetyCheck
 To type: None

Name: withdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


INTERNAL_CALL, SettAccessControl._onlyGovernance()()
withdrawalSafetyCheck_1(bool) := newWithdrawalSafetyCheck_1(bool)


Rembmered parameters?

Name: newWithdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: newWithdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?

Name: newWithdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newWithdrawalSafetyCheck_1
newWithdrawalSafetyCheck_1
newWithdrawalSafetyCheck
p.norm: 0
Name: newWithdrawalSafetyCheck, Num: 1

Name: newWithdrawalSafetyCheck_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawalSafetyCheck_1

Name: withdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
withdrawalSafetyCheck_1
withdrawalSafetyCheck

Name: withdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
withdrawalSafetyCheck_1(bool) := newWithdrawalSafetyCheck_1(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for withdrawalSafetyCheck

Name: withdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied withdrawalSafetyCheck
 To type: None

Name: withdrawalSafetyCheck Function: setWithdrawalSafetyCheck
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



setHarvestOnRebalance
Finding type for newHarvestOnRebalance(bool ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


INTERNAL_CALL, SettAccessControl._onlyGovernance()()
harvestOnRebalance_1(bool) := newHarvestOnRebalance_1(bool)


Rembmered parameters?

Name: newHarvestOnRebalance Function: setHarvestOnRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: newHarvestOnRebalance Function: setHarvestOnRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?

Name: newHarvestOnRebalance Function: setHarvestOnRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newHarvestOnRebalance_1
newHarvestOnRebalance_1
newHarvestOnRebalance
p.norm: 0
Name: newHarvestOnRebalance, Num: 1

Name: newHarvestOnRebalance_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
harvestOnRebalance_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
harvestOnRebalance_1
harvestOnRebalance
Name: harvestOnRebalance, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
harvestOnRebalance_1(bool) := newHarvestOnRebalance_1(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for harvestOnRebalance

Name: harvestOnRebalance Function: setHarvestOnRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied harvestOnRebalance
 To type: None

Name: harvestOnRebalance Function: setHarvestOnRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


INTERNAL_CALL, SettAccessControl._onlyGovernance()()
harvestOnRebalance_1(bool) := newHarvestOnRebalance_1(bool)


Rembmered parameters?

Name: newHarvestOnRebalance Function: setHarvestOnRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: newHarvestOnRebalance Function: setHarvestOnRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?

Name: newHarvestOnRebalance Function: setHarvestOnRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newHarvestOnRebalance_1
newHarvestOnRebalance_1
newHarvestOnRebalance
p.norm: 0
Name: newHarvestOnRebalance, Num: 1

Name: newHarvestOnRebalance_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
harvestOnRebalance_1

Name: harvestOnRebalance Function: setHarvestOnRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
harvestOnRebalance_1
harvestOnRebalance

Name: harvestOnRebalance Function: setHarvestOnRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
harvestOnRebalance_1(bool) := newHarvestOnRebalance_1(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for harvestOnRebalance

Name: harvestOnRebalance Function: setHarvestOnRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied harvestOnRebalance
 To type: None

Name: harvestOnRebalance Function: setHarvestOnRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



setProcessLocksOnReinvest
Finding type for newProcessLocksOnReinvest(bool ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


INTERNAL_CALL, SettAccessControl._onlyGovernance()()
processLocksOnReinvest_1(bool) := newProcessLocksOnReinvest_1(bool)


Rembmered parameters?

Name: newProcessLocksOnReinvest Function: setProcessLocksOnReinvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: newProcessLocksOnReinvest Function: setProcessLocksOnReinvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?

Name: newProcessLocksOnReinvest Function: setProcessLocksOnReinvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newProcessLocksOnReinvest_1
newProcessLocksOnReinvest_1
newProcessLocksOnReinvest
p.norm: 0
Name: newProcessLocksOnReinvest, Num: 1

Name: newProcessLocksOnReinvest_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
processLocksOnReinvest_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
processLocksOnReinvest_1
processLocksOnReinvest
Name: processLocksOnReinvest, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
processLocksOnReinvest_1(bool) := newProcessLocksOnReinvest_1(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for processLocksOnReinvest

Name: processLocksOnReinvest Function: setProcessLocksOnReinvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied processLocksOnReinvest
 To type: None

Name: processLocksOnReinvest Function: setProcessLocksOnReinvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


INTERNAL_CALL, SettAccessControl._onlyGovernance()()
processLocksOnReinvest_1(bool) := newProcessLocksOnReinvest_1(bool)


Rembmered parameters?

Name: newProcessLocksOnReinvest Function: setProcessLocksOnReinvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: newProcessLocksOnReinvest Function: setProcessLocksOnReinvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?

Name: newProcessLocksOnReinvest Function: setProcessLocksOnReinvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newProcessLocksOnReinvest_1
newProcessLocksOnReinvest_1
newProcessLocksOnReinvest
p.norm: 0
Name: newProcessLocksOnReinvest, Num: 1

Name: newProcessLocksOnReinvest_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
processLocksOnReinvest_1

Name: processLocksOnReinvest Function: setProcessLocksOnReinvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
processLocksOnReinvest_1
processLocksOnReinvest

Name: processLocksOnReinvest Function: setProcessLocksOnReinvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
processLocksOnReinvest_1(bool) := newProcessLocksOnReinvest_1(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for processLocksOnReinvest

Name: processLocksOnReinvest Function: setProcessLocksOnReinvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied processLocksOnReinvest
 To type: None

Name: processLocksOnReinvest Function: setProcessLocksOnReinvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



setProcessLocksOnRebalance
Finding type for newProcessLocksOnRebalance(bool ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


INTERNAL_CALL, SettAccessControl._onlyGovernance()()
processLocksOnRebalance_1(bool) := newProcessLocksOnRebalance_1(bool)


Rembmered parameters?

Name: newProcessLocksOnRebalance Function: setProcessLocksOnRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: newProcessLocksOnRebalance Function: setProcessLocksOnRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?

Name: newProcessLocksOnRebalance Function: setProcessLocksOnRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newProcessLocksOnRebalance_1
newProcessLocksOnRebalance_1
newProcessLocksOnRebalance
p.norm: 0
Name: newProcessLocksOnRebalance, Num: 1

Name: newProcessLocksOnRebalance_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
processLocksOnRebalance_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
processLocksOnRebalance_1
processLocksOnRebalance
Name: processLocksOnRebalance, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
processLocksOnRebalance_1(bool) := newProcessLocksOnRebalance_1(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for processLocksOnRebalance

Name: processLocksOnRebalance Function: setProcessLocksOnRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied processLocksOnRebalance
 To type: None

Name: processLocksOnRebalance Function: setProcessLocksOnRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


INTERNAL_CALL, SettAccessControl._onlyGovernance()()
processLocksOnRebalance_1(bool) := newProcessLocksOnRebalance_1(bool)


Rembmered parameters?

Name: newProcessLocksOnRebalance Function: setProcessLocksOnRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: newProcessLocksOnRebalance Function: setProcessLocksOnRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?

Name: newProcessLocksOnRebalance Function: setProcessLocksOnRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newProcessLocksOnRebalance_1
newProcessLocksOnRebalance_1
newProcessLocksOnRebalance
p.norm: 0
Name: newProcessLocksOnRebalance, Num: 1

Name: newProcessLocksOnRebalance_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
processLocksOnRebalance_1

Name: processLocksOnRebalance Function: setProcessLocksOnRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
processLocksOnRebalance_1
processLocksOnRebalance

Name: processLocksOnRebalance Function: setProcessLocksOnRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
processLocksOnRebalance_1(bool) := newProcessLocksOnRebalance_1(bool)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for processLocksOnRebalance

Name: processLocksOnRebalance Function: setProcessLocksOnRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied processLocksOnRebalance
 To type: None

Name: processLocksOnRebalance Function: setProcessLocksOnRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



getName


RETURN veCVX Voting Strategy


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN veCVX Voting Strategy
init
end


RETURN veCVX Voting Strategy


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN veCVX Voting Strategy
init
end



version


RETURN 1.0


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN 1.0
init
end


RETURN 1.0


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN 1.0
init
end



CVXToWant
Finding type for cvx(uint256 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
(-1, -1, 'u', None, -1, 0)
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0


cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_4', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
bCVXToCVX_1(uint256) := TMP_480(uint256)
TMP_481(uint256) = 10 ** 18
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
RETURN TMP_483


Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
cvx_1
cvx
p.norm: 0
Name: cvx, Num: 1

Name: cvx_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
CVX_VAULT_4
CVX_VAULT
Name: CVX_VAULT, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
Phi
[i]Type for cvx

Name: cvx Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
CVX_VAULT_4
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_5
CVX_VAULT
Name: CVX_VAULT, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_480

Name: TMP_480 Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_4', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_480(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
cvx_1
cvx_1
cvx
p.norm: 0
Name: cvx, Num: 1

Name: cvx_1 Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_481(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_481

Name: TMP_481 Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:u rval:1000000000000000000
[i]Type for TMP_482

Name: TMP_482 Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_483

Name: TMP_483 Function: CVXToWant
Num: 10
Den: 4
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_483
init
end


cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_4', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
bCVXToCVX_1(uint256) := TMP_480(uint256)
TMP_481(uint256) = 10 ** 18
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
RETURN TMP_483


Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
cvx_1
cvx
p.norm: 0
Name: cvx, Num: 1

Name: cvx_1 Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
Phi
[i]Type for cvx

Name: cvx Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
CVX_VAULT_4
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_5
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_480

Name: TMP_480 Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_4', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_480(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
cvx_1
cvx_1
cvx
p.norm: 0
Name: cvx, Num: 1

Name: cvx_1 Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_481(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_481

Name: TMP_481 Function: CVXToWant
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:u rval:1000000000000000000
[i]Type for TMP_482

Name: TMP_482 Function: CVXToWant
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_483

Name: TMP_483 Function: CVXToWant
Num: 10
Den: 4
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_483
init
end



wantToCVX
Finding type for want(uint256 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
(-1, -1, 'u', None, -1, 0)
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: 0


want_1(uint256) := ϕ(['balanceOfWant_1'])
CVX_VAULT_6(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
TMP_484(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_6(ISettV3), function:getPricePerFullShare, arguments:[]  
CVX_VAULT_7(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_6', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
bCVXToCVX_1(uint256) := TMP_484(uint256)
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['want_1', 'bCVXToCVX_1'] 
TMP_486(uint256) = 10 ** 18
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_485', 'TMP_486'] 
RETURN TMP_487


Rembmered parameters?

Name: want Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
want_1
want
p.norm: 0
Name: want, Num: 1

Name: want_1 Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
weee
CVX_VAULT_6
CVX_VAULT
Name: CVX_VAULT, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
want_1(uint256) := ϕ(['balanceOfWant_1'])
Phi
[i]Type for want

Name: want Function: wantToCVX
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_6(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: want Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
CVX_VAULT_6
CVX_VAULT_6
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_7
CVX_VAULT
Name: CVX_VAULT, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_484(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_6(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_484

Name: TMP_484 Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_7(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_6', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_484(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: want Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
want_1
want_1
want

Name: want Function: wantToCVX
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['want_1', 'bCVXToCVX_1'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_485

Name: TMP_485 Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_486(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_486

Name: TMP_486 Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_485', 'TMP_486'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:1000000000000000000
[i]Type for TMP_487

Name: TMP_487 Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_487
init
end


want_1(uint256) := ϕ(['balanceOfWant_1'])
CVX_VAULT_6(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
TMP_484(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_6(ISettV3), function:getPricePerFullShare, arguments:[]  
CVX_VAULT_7(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_6', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
bCVXToCVX_1(uint256) := TMP_484(uint256)
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['want_1', 'bCVXToCVX_1'] 
TMP_486(uint256) = 10 ** 18
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_485', 'TMP_486'] 
RETURN TMP_487


Rembmered parameters?

Name: want Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
want_1
want
p.norm: 0
Name: want, Num: 1

Name: want_1 Function: wantToCVX
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
weee
CVX_VAULT_6
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
want_1(uint256) := ϕ(['balanceOfWant_1'])
Phi
[i]Type for want

Name: want Function: wantToCVX
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_6(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: want Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
CVX_VAULT_6
CVX_VAULT_6
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_7
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_484(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_6(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_484

Name: TMP_484 Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_7(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_6', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_484(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: want Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
want_1
want_1
want

Name: want Function: wantToCVX
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['want_1', 'bCVXToCVX_1'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_485

Name: TMP_485 Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_486(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_486

Name: TMP_486 Function: wantToCVX
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_485', 'TMP_486'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:1000000000000000000
[i]Type for TMP_487

Name: TMP_487 Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_487
init
end



balanceOfPool


CVX_4(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
LOCKER_2(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_8(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
withdrawalSafetyCheck_2(bool) := ϕ(['withdrawalSafetyCheck_0', 'withdrawalSafetyCheck_4', 'withdrawalSafetyCheck_1'])
CONDITION withdrawalSafetyCheck_2
TMP_488(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_8(ISettV3), function:getPricePerFullShare, arguments:[]  
CVX_5(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_4', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_3(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_2', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_9(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_8'])
bCVXToCVX_1(uint256) := TMP_488(uint256)
TMP_489(uint256) = 10 ** 18
TMP_490(bool) = bCVXToCVX_1 > TMP_489
TMP_491(None) = SOLIDITY_CALL require(bool,string)(TMP_490,Loss Of Peg)
TMP_492 = CONVERT this to address
TMP_493(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_3(ICvxLocker), function:lockedBalanceOf, arguments:['TMP_492']  
CVX_6(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_5', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_4(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_3', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
TMP_494(uint256) = INTERNAL_CALL, MyStrategy.CVXToWant(uint256)(TMP_493)
TMP_495 = CONVERT CVX_7 to IERC20Upgradeable
TMP_496 = CONVERT this to address
TMP_497(uint256) = HIGH_LEVEL_CALL, dest:TMP_495(IERC20Upgradeable), function:balanceOf, arguments:['TMP_496']  
CVX_8(address) := ϕ(['CVX_26', 'CVX_7', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_6(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_5', 'LOCKER_35', 'LOCKER_1'])
TMP_498(uint256) = INTERNAL_CALL, MyStrategy.CVXToWant(uint256)(TMP_497)
TMP_499(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['TMP_494', 'TMP_498'] 
valueInLocker_1(uint256) := TMP_499(uint256)
RETURN valueInLocker_1


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
CVX_4
CVX
Name: CVX, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_2
LOCKER
Name: LOCKER, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_8
CVX_VAULT
Name: CVX_VAULT, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
withdrawalSafetyCheck_2
withdrawalSafetyCheck
Name: withdrawalSafetyCheck, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_4(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_2(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_8(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawalSafetyCheck_2(bool) := ϕ(['withdrawalSafetyCheck_0', 'withdrawalSafetyCheck_4', 'withdrawalSafetyCheck_1'])
Phi
[i]Type for withdrawalSafetyCheck

Name: withdrawalSafetyCheck Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
withdrawalSafetyCheck_2
withdrawalSafetyCheck_2
withdrawalSafetyCheck

Name: withdrawalSafetyCheck Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_VAULT_8
CVX_VAULT_8
CVX_VAULT

Name: CVX_VAULT Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
CVX_5
CVX
Name: CVX, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_3
LOCKER
Name: LOCKER, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_9
CVX_VAULT
Name: CVX_VAULT, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_488(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_8(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_488

Name: TMP_488 Function: balanceOfPool
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_5(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_4', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_3(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_2', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_9(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_8'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_488(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: balanceOfPool
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: balanceOfPool
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_489(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_489

Name: TMP_489 Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_490(bool) = bCVXToCVX_1 > TMP_489
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
[i]Type for TMP_490

Name: TMP_490 Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_491(None) = SOLIDITY_CALL require(bool,string)(TMP_490,Loss Of Peg)
[i]Type for TMP_491

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_7
CVX_7
CVX
Name: CVX, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
LOCKER_3
LOCKER_3
LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
valueInLocker_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
valueInLocker_1
valueInLocker
Name: valueInLocker, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
CVX_6
CVX
Name: CVX, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_4
LOCKER
Name: LOCKER, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
weee
weee
weee
weee
CVX_8
CVX
Name: CVX, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_6
LOCKER
Name: LOCKER, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
weee
weee
weee
TMP_492 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 14
14
14
[i]Type for TMP_492

Name: TMP_492 Function: balanceOfPool
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_493(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_3(ICvxLocker), function:lockedBalanceOf, arguments:['TMP_492']  
High Call: lockedBalanceOf
Running querryfc
Written func info: CvxLocker, lockedBalanceOf
Retvar: ('c', ['global:CVX'], ['-1'], 6, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [-1], 6, "'u'", None, -1)
[i]Type for TMP_493

Name: TMP_493 Function: balanceOfPool
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_6(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_5', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_4(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_3', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_494(uint256) = INTERNAL_CALL, MyStrategy.CVXToWant(uint256)(TMP_493)
init
end
[[4], [-1], 6, None, [], -1, None, "'u'"]

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cvx_1
cvx
p.norm: 0

Name: cvx_1 Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
weee
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
Phi
[i]Type for cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_VAULT_4
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_5
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_480

Name: TMP_480 Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_4', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_480(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cvx_1
cvx_1
cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_481(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_481

Name: TMP_481 Function: CVXToWant
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:'u' rval:1000000000000000000
[i]Type for TMP_482

Name: TMP_482 Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_483

Name: TMP_483 Function: CVXToWant
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_483
init
end

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cvx_1
cvx
p.norm: 0

Name: cvx_1 Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
weee
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
Phi
[i]Type for cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_VAULT_4
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_5
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_480

Name: TMP_480 Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_4', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_480(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cvx_1
cvx_1
cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_481(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_481

Name: TMP_481 Function: CVXToWant
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:'u' rval:1000000000000000000
[i]Type for TMP_482

Name: TMP_482 Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_483

Name: TMP_483 Function: CVXToWant
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_483
init
end
[i]Type for TMP_494

Name: TMP_494 Function: balanceOfPool
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_495 = CONVERT CVX_7 to IERC20Upgradeable
Converting CVX_7

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_495

Name: TMP_495 Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_496 = CONVERT this to address
Converting this
14
[i]Type for TMP_496

Name: TMP_496 Function: balanceOfPool
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_497(uint256) = HIGH_LEVEL_CALL, dest:TMP_495(IERC20Upgradeable), function:balanceOf, arguments:['TMP_496']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_497

Name: TMP_497 Function: balanceOfPool
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_8(address) := ϕ(['CVX_26', 'CVX_7', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_6(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_5', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_498(uint256) = INTERNAL_CALL, MyStrategy.CVXToWant(uint256)(TMP_497)
init
end
[[4], [-1], 6, None, [], 0, 'u', 'u']

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
cvx_1
cvx
p.norm: 0

Name: cvx_1 Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
Phi
[i]Type for cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
CVX_VAULT_4
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_5
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_480

Name: TMP_480 Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_4', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_480(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
cvx_1
cvx_1
cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_481(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_481

Name: TMP_481 Function: CVXToWant
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:u rval:1000000000000000000
[i]Type for TMP_482

Name: TMP_482 Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_483

Name: TMP_483 Function: CVXToWant
Num: 10
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_483
init
end

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
cvx_1
cvx
p.norm: 0

Name: cvx_1 Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
Phi
[i]Type for cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
CVX_VAULT_4
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_5
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_480

Name: TMP_480 Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_4', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_480(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
cvx_1
cvx_1
cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_481(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_481

Name: TMP_481 Function: CVXToWant
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:u rval:1000000000000000000
[i]Type for TMP_482

Name: TMP_482 Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_483

Name: TMP_483 Function: CVXToWant
Num: 10
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_483
init
end
[i]Type for TMP_498

Name: TMP_498 Function: balanceOfPool
Num: 10
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_499(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['TMP_494', 'TMP_498'] 

Name: TMP_494 Function: balanceOfPool
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_498 Function: balanceOfPool
Num: 10
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
init
end
lval:u rval:u
[i]Type for TMP_499

Name: TMP_499 Function: balanceOfPool
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
valueInLocker_1(uint256) := TMP_499(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for valueInLocker

Name: valueInLocker Function: balanceOfPool
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
valueInLocker_1
valueInLocker_1
valueInLocker

Name: valueInLocker Function: balanceOfPool
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
RETURN valueInLocker_1
init
end


CVX_4(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
LOCKER_2(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_8(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
withdrawalSafetyCheck_2(bool) := ϕ(['withdrawalSafetyCheck_0', 'withdrawalSafetyCheck_4', 'withdrawalSafetyCheck_1'])
CONDITION withdrawalSafetyCheck_2
TMP_488(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_8(ISettV3), function:getPricePerFullShare, arguments:[]  
CVX_5(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_4', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_3(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_2', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_9(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_8'])
bCVXToCVX_1(uint256) := TMP_488(uint256)
TMP_489(uint256) = 10 ** 18
TMP_490(bool) = bCVXToCVX_1 > TMP_489
TMP_491(None) = SOLIDITY_CALL require(bool,string)(TMP_490,Loss Of Peg)
TMP_492 = CONVERT this to address
TMP_493(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_3(ICvxLocker), function:lockedBalanceOf, arguments:['TMP_492']  
CVX_6(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_5', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_4(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_3', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
TMP_494(uint256) = INTERNAL_CALL, MyStrategy.CVXToWant(uint256)(TMP_493)
TMP_495 = CONVERT CVX_7 to IERC20Upgradeable
TMP_496 = CONVERT this to address
TMP_497(uint256) = HIGH_LEVEL_CALL, dest:TMP_495(IERC20Upgradeable), function:balanceOf, arguments:['TMP_496']  
CVX_8(address) := ϕ(['CVX_26', 'CVX_7', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_6(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_5', 'LOCKER_35', 'LOCKER_1'])
TMP_498(uint256) = INTERNAL_CALL, MyStrategy.CVXToWant(uint256)(TMP_497)
TMP_499(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['TMP_494', 'TMP_498'] 
valueInLocker_1(uint256) := TMP_499(uint256)
RETURN valueInLocker_1


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
CVX_4
CVX

Name: CVX Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_2
LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_8
CVX_VAULT

Name: CVX_VAULT Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
withdrawalSafetyCheck_2
withdrawalSafetyCheck

Name: withdrawalSafetyCheck Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_4(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_2(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_8(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
withdrawalSafetyCheck_2(bool) := ϕ(['withdrawalSafetyCheck_0', 'withdrawalSafetyCheck_4', 'withdrawalSafetyCheck_1'])
Phi
[i]Type for withdrawalSafetyCheck

Name: withdrawalSafetyCheck Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
withdrawalSafetyCheck_2
withdrawalSafetyCheck_2
withdrawalSafetyCheck

Name: withdrawalSafetyCheck Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_VAULT_8
CVX_VAULT_8
CVX_VAULT

Name: CVX_VAULT Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: balanceOfPool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: balanceOfPool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_5
CVX

Name: CVX Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_3
LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_9
CVX_VAULT

Name: CVX_VAULT Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_488(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_8(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_488

Name: TMP_488 Function: balanceOfPool
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_5(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_4', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_3(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_2', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_9(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_8'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: balanceOfPool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_488(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: balanceOfPool
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: balanceOfPool
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_489(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_489

Name: TMP_489 Function: balanceOfPool
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_490(bool) = bCVXToCVX_1 > TMP_489
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
[i]Type for TMP_490

Name: TMP_490 Function: balanceOfPool
Num: 4
Den: 10
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_491(None) = SOLIDITY_CALL require(bool,string)(TMP_490,Loss Of Peg)
[i]Type for TMP_491

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_7
CVX_7
CVX

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
LOCKER_3
LOCKER_3
LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
valueInLocker_1

Name: valueInLocker Function: balanceOfPool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
valueInLocker_1
valueInLocker
Name: valueInLocker, Num: 1

Name: valueInLocker Function: balanceOfPool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
CVX_6
CVX

Name: CVX Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_4
LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
weee
weee
weee
weee
CVX_8
CVX

Name: CVX Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_6
LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
weee
weee
weee
TMP_492 = CONVERT this to address
Converting this
14
[i]Type for TMP_492

Name: TMP_492 Function: balanceOfPool
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_493(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_3(ICvxLocker), function:lockedBalanceOf, arguments:['TMP_492']  
High Call: lockedBalanceOf
Running querryfc
Written func info: CvxLocker, lockedBalanceOf
Retvar: ('c', ['global:CVX'], ['-1'], 6, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [-1], 6, "'u'", None, -1)
[i]Type for TMP_493

Name: TMP_493 Function: balanceOfPool
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_6(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_5', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_4(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_3', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_494(uint256) = INTERNAL_CALL, MyStrategy.CVXToWant(uint256)(TMP_493)
init
end
[[4], [-1], 6, None, [], -1, None, "'u'"]

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cvx_1
cvx
p.norm: 0

Name: cvx_1 Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
weee
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
Phi
[i]Type for cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_VAULT_4
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_5
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_480

Name: TMP_480 Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_4', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_480(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cvx_1
cvx_1
cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_481(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_481

Name: TMP_481 Function: CVXToWant
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:'u' rval:1000000000000000000
[i]Type for TMP_482

Name: TMP_482 Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_483

Name: TMP_483 Function: CVXToWant
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_483
init
end

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
cvx_1
cvx
p.norm: 0

Name: cvx_1 Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
weee
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
Phi
[i]Type for cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_VAULT_4
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_5
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_480

Name: TMP_480 Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_4', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_480(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cvx_1
cvx_1
cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_481(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_481

Name: TMP_481 Function: CVXToWant
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:'u' rval:1000000000000000000
[i]Type for TMP_482

Name: TMP_482 Function: CVXToWant
Num: 4
Den: -1
Address: None
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_483

Name: TMP_483 Function: CVXToWant
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_483
init
end
[i]Type for TMP_494

Name: TMP_494 Function: balanceOfPool
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_495 = CONVERT CVX_7 to IERC20Upgradeable
Converting CVX_7

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_495

Name: TMP_495 Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_496 = CONVERT this to address
Converting this
14
[i]Type for TMP_496

Name: TMP_496 Function: balanceOfPool
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_497(uint256) = HIGH_LEVEL_CALL, dest:TMP_495(IERC20Upgradeable), function:balanceOf, arguments:['TMP_496']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_497

Name: TMP_497 Function: balanceOfPool
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_8(address) := ϕ(['CVX_26', 'CVX_7', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: balanceOfPool
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_6(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_5', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: balanceOfPool
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_498(uint256) = INTERNAL_CALL, MyStrategy.CVXToWant(uint256)(TMP_497)
init
end
[[4], [-1], 6, None, [], 0, 'u', 'u']

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
cvx_1
cvx
p.norm: 0

Name: cvx_1 Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
Phi
[i]Type for cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
CVX_VAULT_4
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_5
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_480

Name: TMP_480 Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_4', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_480(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
cvx_1
cvx_1
cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_481(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_481

Name: TMP_481 Function: CVXToWant
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:u rval:1000000000000000000
[i]Type for TMP_482

Name: TMP_482 Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_483

Name: TMP_483 Function: CVXToWant
Num: 10
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_483
init
end

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
cvx_1
cvx
p.norm: 0

Name: cvx_1 Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
cvx_1(uint256) := ϕ(['TMP_493', 'TMP_497'])
Phi
[i]Type for cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_4(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
CVX_VAULT_4
CVX_VAULT_4
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: CVXToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_5
CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_480(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_4(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_480

Name: TMP_480 Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_5(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_4', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: CVXToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_480(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
cvx_1
cvx_1
cvx

Name: cvx Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: CVXToWant
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_481(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_481

Name: TMP_481 Function: CVXToWant
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_482(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['cvx_1', 'TMP_481'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:u rval:1000000000000000000
[i]Type for TMP_482

Name: TMP_482 Function: CVXToWant
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_483(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_482', 'bCVXToCVX_1'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_483

Name: TMP_483 Function: CVXToWant
Num: 10
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_483
init
end
[i]Type for TMP_498

Name: TMP_498 Function: balanceOfPool
Num: 10
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_499(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['TMP_494', 'TMP_498'] 

Name: TMP_494 Function: balanceOfPool
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_498 Function: balanceOfPool
Num: 10
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
A: 0 B: 0
x
y
A: 0 B: 0
<class 'int'>
<class 'int'>
lnorm: 0 rnorm: 0
init
end
lval:u rval:u
[i]Type for TMP_499

Name: TMP_499 Function: balanceOfPool
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
valueInLocker_1(uint256) := TMP_499(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for valueInLocker

Name: valueInLocker Function: balanceOfPool
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
valueInLocker_1
valueInLocker_1
valueInLocker

Name: valueInLocker Function: balanceOfPool
Num: 10
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
RETURN valueInLocker_1
init
end



isTendable


RETURN False


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN False
init
end


RETURN False


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN False
init
end



getProtectedTokens


want_23(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
lpComponent_2(address) := ϕ(['lpComponent_0', 'lpComponent_1'])
reward_2(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
CVX_10(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
TMP_501 = new address[](4)
protectedTokens_1(address[]) := TMP_501(address)
REF_111(address) -> protectedTokens_1[0]
protectedTokens_2(address[]) := ϕ(['protectedTokens_1'])
REF_111 (->protectedTokens_2) := want_23(address)
REF_112(address) -> protectedTokens_2[1]
protectedTokens_3(address[]) := ϕ(['protectedTokens_2'])
REF_112 (->protectedTokens_3) := lpComponent_2(address)
REF_113(address) -> protectedTokens_3[2]
protectedTokens_4(address[]) := ϕ(['protectedTokens_3'])
REF_113 (->protectedTokens_4) := reward_2(address)
REF_114(address) -> protectedTokens_4[3]
protectedTokens_5(address[]) := ϕ(['protectedTokens_4'])
REF_114 (->protectedTokens_5) := CVX_10(address)
RETURN protectedTokens_5


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
want_23
want
Name: want, Num: 23

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
lpComponent_2
lpComponent
Name: lpComponent, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: 12
Norm: u
LF: lpComponent
Value: u
Fields: 
Finance Type: undef
weee
reward_2
reward
Name: reward, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
CVX_10
CVX
Name: CVX, Num: 10

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
want_23(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: getProtectedTokens
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
lpComponent_2(address) := ϕ(['lpComponent_0', 'lpComponent_1'])
Phi
[i]Type for lpComponent

Name: lpComponent Function: getProtectedTokens
Num: -1
Den: -1
Address: 12
Norm: u
LF: lpComponent
Value: u
Fields: 
Finance Type: undef
XXXX
reward_2(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
Phi
[i]Type for reward

Name: reward Function: getProtectedTokens
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_10(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: getProtectedTokens
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
protectedTokens_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
protectedTokens_1
protectedTokens
Name: protectedTokens, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_501 = new address[](4)
[i]Type for TMP_501

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
protectedTokens_1(address[]) := TMP_501(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
want_23
want_23
want

Name: want Function: getProtectedTokens
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
protectedTokens_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
protectedTokens_2
protectedTokens
Name: protectedTokens, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
protectedTokens_2
protectedTokens
Name: protectedTokens, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_111(address) -> protectedTokens_1[0]
INDEX
[i]Type for REF_111

Name: REF_111 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
protectedTokens_2(address[]) := ϕ(['protectedTokens_1'])
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_111 (->protectedTokens_2) := want_23(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_111

Name: REF_111 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
lpComponent_2
lpComponent_2
lpComponent

Name: lpComponent Function: getProtectedTokens
Num: -1
Den: -1
Address: 12
Norm: u
LF: lpComponent
Value: u
Fields: 
Finance Type: undef
protectedTokens_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
protectedTokens_3
protectedTokens
Name: protectedTokens, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
protectedTokens_3
protectedTokens
Name: protectedTokens, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_112(address) -> protectedTokens_2[1]
INDEX
[i]Type for REF_112

Name: REF_112 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
protectedTokens_3(address[]) := ϕ(['protectedTokens_2'])
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_112 (->protectedTokens_3) := lpComponent_2(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_112

Name: REF_112 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reward_2
reward_2
reward

Name: reward Function: getProtectedTokens
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
protectedTokens_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
protectedTokens_4
protectedTokens
Name: protectedTokens, Num: 4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
protectedTokens_4
protectedTokens
Name: protectedTokens, Num: 4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_113(address) -> protectedTokens_3[2]
INDEX
[i]Type for REF_113

Name: REF_113 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
protectedTokens_4(address[]) := ϕ(['protectedTokens_3'])
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_113 (->protectedTokens_4) := reward_2(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_113

Name: REF_113 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_10
CVX_10
CVX

Name: CVX Function: getProtectedTokens
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
protectedTokens_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
protectedTokens_5
protectedTokens
Name: protectedTokens, Num: 5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
protectedTokens_5
protectedTokens
Name: protectedTokens, Num: 5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_114(address) -> protectedTokens_4[3]
INDEX
[i]Type for REF_114

Name: REF_114 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
protectedTokens_5(address[]) := ϕ(['protectedTokens_4'])
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_114 (->protectedTokens_5) := CVX_10(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_114

Name: REF_114 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
protectedTokens_5
protectedTokens_5
protectedTokens
Name: protectedTokens, Num: 5

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN protectedTokens_5
init
end


want_23(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
lpComponent_2(address) := ϕ(['lpComponent_0', 'lpComponent_1'])
reward_2(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
CVX_10(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
TMP_501 = new address[](4)
protectedTokens_1(address[]) := TMP_501(address)
REF_111(address) -> protectedTokens_1[0]
protectedTokens_2(address[]) := ϕ(['protectedTokens_1'])
REF_111 (->protectedTokens_2) := want_23(address)
REF_112(address) -> protectedTokens_2[1]
protectedTokens_3(address[]) := ϕ(['protectedTokens_2'])
REF_112 (->protectedTokens_3) := lpComponent_2(address)
REF_113(address) -> protectedTokens_3[2]
protectedTokens_4(address[]) := ϕ(['protectedTokens_3'])
REF_113 (->protectedTokens_4) := reward_2(address)
REF_114(address) -> protectedTokens_4[3]
protectedTokens_5(address[]) := ϕ(['protectedTokens_4'])
REF_114 (->protectedTokens_5) := CVX_10(address)
RETURN protectedTokens_5


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
want_23
want

Name: want Function: getProtectedTokens
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
lpComponent_2
lpComponent

Name: lpComponent Function: getProtectedTokens
Num: -1
Den: -1
Address: 12
Norm: u
LF: lpComponent
Value: u
Fields: 
Finance Type: undef
weee
reward_2
reward

Name: reward Function: getProtectedTokens
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
CVX_10
CVX

Name: CVX Function: getProtectedTokens
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
want_23(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: getProtectedTokens
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
lpComponent_2(address) := ϕ(['lpComponent_0', 'lpComponent_1'])
Phi
[i]Type for lpComponent

Name: lpComponent Function: getProtectedTokens
Num: -1
Den: -1
Address: 12
Norm: u
LF: lpComponent
Value: u
Fields: 
Finance Type: undef
XXXX
reward_2(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
Phi
[i]Type for reward

Name: reward Function: getProtectedTokens
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_10(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: getProtectedTokens
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
protectedTokens_1

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
protectedTokens_1
protectedTokens
Name: protectedTokens, Num: 1

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_501 = new address[](4)
[i]Type for TMP_501

Name: TMP_501 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
protectedTokens_1(address[]) := TMP_501(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
want_23
want_23
want

Name: want Function: getProtectedTokens
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
protectedTokens_2

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
protectedTokens_2
protectedTokens
Name: protectedTokens, Num: 2

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
protectedTokens_2
protectedTokens
Name: protectedTokens, Num: 2

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_111(address) -> protectedTokens_1[0]
INDEX
[i]Type for REF_111

Name: REF_111 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
protectedTokens_2(address[]) := ϕ(['protectedTokens_1'])
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_111 (->protectedTokens_2) := want_23(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_111

Name: REF_111 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
lpComponent_2
lpComponent_2
lpComponent

Name: lpComponent Function: getProtectedTokens
Num: -1
Den: -1
Address: 12
Norm: u
LF: lpComponent
Value: u
Fields: 
Finance Type: undef
protectedTokens_3

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
protectedTokens_3
protectedTokens
Name: protectedTokens, Num: 3

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
protectedTokens_3
protectedTokens
Name: protectedTokens, Num: 3

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_112(address) -> protectedTokens_2[1]
INDEX
[i]Type for REF_112

Name: REF_112 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
protectedTokens_3(address[]) := ϕ(['protectedTokens_2'])
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_112 (->protectedTokens_3) := lpComponent_2(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_112

Name: REF_112 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reward_2
reward_2
reward

Name: reward Function: getProtectedTokens
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
protectedTokens_4

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
protectedTokens_4
protectedTokens
Name: protectedTokens, Num: 4

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
protectedTokens_4
protectedTokens
Name: protectedTokens, Num: 4

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_113(address) -> protectedTokens_3[2]
INDEX
[i]Type for REF_113

Name: REF_113 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
protectedTokens_4(address[]) := ϕ(['protectedTokens_3'])
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_113 (->protectedTokens_4) := reward_2(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_113

Name: REF_113 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_10
CVX_10
CVX

Name: CVX Function: getProtectedTokens
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
protectedTokens_5

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
protectedTokens_5
protectedTokens
Name: protectedTokens, Num: 5

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
protectedTokens_5
protectedTokens
Name: protectedTokens, Num: 5

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_114(address) -> protectedTokens_4[3]
INDEX
[i]Type for REF_114

Name: REF_114 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
protectedTokens_5(address[]) := ϕ(['protectedTokens_4'])
Phi
[i]Type for protectedTokens

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_114 (->protectedTokens_5) := CVX_10(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_114

Name: REF_114 Function: getProtectedTokens
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
protectedTokens_5
protectedTokens_5
protectedTokens
Name: protectedTokens, Num: 5

Name: protectedTokens Function: getProtectedTokens
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
RETURN protectedTokens_5
init
end



setKeepReward
Finding type for _setKeepReward(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


INTERNAL_CALL, SettAccessControl._onlyGovernance()()


Rembmered parameters?

Name: _setKeepReward Function: setKeepReward
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: _setKeepReward Function: setKeepReward
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()


INTERNAL_CALL, SettAccessControl._onlyGovernance()()


Rembmered parameters?

Name: _setKeepReward Function: setKeepReward
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: _setKeepReward Function: setKeepReward
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()



_onlyNotProtectedTokens



_deposit



prepareWithdrawAll


CVX_14(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
LOCKER_13(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_12(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
HIGH_LEVEL_CALL, dest:LOCKER_14(ICvxLocker), function:processExpiredLocks, arguments:['False']  
CVX_16(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_15', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_15(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_14', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_14(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_13', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
TMP_518 = CONVERT CVX_16 to IERC20Upgradeable
TMP_519 = CONVERT this to address
TMP_520(uint256) = HIGH_LEVEL_CALL, dest:TMP_518(IERC20Upgradeable), function:balanceOf, arguments:['TMP_519']  
CVX_17(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_16', 'CVX_21'])
CVX_VAULT_15(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_14', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
toDeposit_1(uint256) := TMP_520(uint256)
TMP_521(bool) = toDeposit_1 > 0
CONDITION TMP_521
HIGH_LEVEL_CALL, dest:CVX_VAULT_15(ISettV3), function:deposit, arguments:['toDeposit_1']  
CVX_VAULT_16(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
CVX_14
CVX
Name: CVX, Num: 14

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_13
LOCKER
Name: LOCKER, Num: 13

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_12
CVX_VAULT
Name: CVX_VAULT, Num: 12

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_14(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_13(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: prepareWithdrawAll
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_12(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
governance_4
governance
Name: governance, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
weee
governance_4(address) := ϕ(['governance_0', 'governance_1', 'governance_7'])
Phi
[i]Type for governance

Name: governance Function: _onlyGovernance
Num: -1
Den: -1
Address: 1
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
governance_4
governance_4
governance

Name: governance Function: _onlyGovernance
Num: -1
Den: -1
Address: 1
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_431(bool) = msg.sender == governance_4
[i]Type for TMP_431

Name: TMP_431 Function: _onlyGovernance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_432(None) = SOLIDITY_CALL require(bool,string)(TMP_431,onlyGovernance)
[i]Type for TMP_432

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
governance_4
governance

Name: governance Function: _onlyGovernance
Num: -1
Den: -1
Address: 1
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
weee
governance_4(address) := ϕ(['governance_0', 'governance_1', 'governance_7'])
Phi
[i]Type for governance

Name: governance Function: _onlyGovernance
Num: -1
Den: -1
Address: 1
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
governance_4
governance_4
governance

Name: governance Function: _onlyGovernance
Num: -1
Den: -1
Address: 1
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_431(bool) = msg.sender == governance_4
[i]Type for TMP_431

Name: TMP_431 Function: _onlyGovernance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_432(None) = SOLIDITY_CALL require(bool,string)(TMP_431,onlyGovernance)
[i]Type for TMP_432

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
LOCKER_14
LOCKER_14
LOCKER
Name: LOCKER, Num: 14

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
CVX_16
CVX
Name: CVX, Num: 16

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_15
LOCKER
Name: LOCKER, Num: 15

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_14
CVX_VAULT
Name: CVX_VAULT, Num: 14

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:LOCKER_14(ICvxLocker), function:processExpiredLocks, arguments:['False']  
High Call: processExpiredLocks
CVX_16(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_15', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_15(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_14', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: prepareWithdrawAll
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_14(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_13', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_16
CVX_16
CVX

Name: CVX Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
toDeposit_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toDeposit_1
toDeposit
Name: toDeposit, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
CVX_17
CVX
Name: CVX, Num: 17

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_15
CVX_VAULT
Name: CVX_VAULT, Num: 15

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_518 = CONVERT CVX_16 to IERC20Upgradeable
Converting CVX_16

Name: CVX Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_518

Name: TMP_518 Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_519 = CONVERT this to address
Converting this
14
[i]Type for TMP_519

Name: TMP_519 Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_520(uint256) = HIGH_LEVEL_CALL, dest:TMP_518(IERC20Upgradeable), function:balanceOf, arguments:['TMP_519']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_520

Name: TMP_520 Function: prepareWithdrawAll
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_17(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_16', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_15(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_14', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
toDeposit_1(uint256) := TMP_520(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toDeposit

Name: toDeposit Function: prepareWithdrawAll
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: prepareWithdrawAll
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_521(bool) = toDeposit_1 > 0
init
end
init
end
A: 6 B: 0
x
y
A: 6 B: 0
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 0
[i]Type for TMP_521

Name: TMP_521 Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: prepareWithdrawAll
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
CVX_VAULT_15
CVX_VAULT_15
CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_16
CVX_VAULT
Name: CVX_VAULT, Num: 16

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:CVX_VAULT_15(ISettV3), function:deposit, arguments:['toDeposit_1']  
High Call: deposit
CVX_VAULT_16(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


CVX_14(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
LOCKER_13(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_12(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
HIGH_LEVEL_CALL, dest:LOCKER_14(ICvxLocker), function:processExpiredLocks, arguments:['False']  
CVX_16(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_15', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_15(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_14', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_14(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_13', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
TMP_518 = CONVERT CVX_16 to IERC20Upgradeable
TMP_519 = CONVERT this to address
TMP_520(uint256) = HIGH_LEVEL_CALL, dest:TMP_518(IERC20Upgradeable), function:balanceOf, arguments:['TMP_519']  
CVX_17(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_16', 'CVX_21'])
CVX_VAULT_15(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_14', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
toDeposit_1(uint256) := TMP_520(uint256)
TMP_521(bool) = toDeposit_1 > 0
CONDITION TMP_521
HIGH_LEVEL_CALL, dest:CVX_VAULT_15(ISettV3), function:deposit, arguments:['toDeposit_1']  
CVX_VAULT_16(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
CVX_14
CVX

Name: CVX Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_13
LOCKER

Name: LOCKER Function: prepareWithdrawAll
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_12
CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_14(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_13(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: prepareWithdrawAll
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_12(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
LOCKER_14
LOCKER_14
LOCKER

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
CVX_16
CVX

Name: CVX Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_15
LOCKER

Name: LOCKER Function: prepareWithdrawAll
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_14
CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:LOCKER_14(ICvxLocker), function:processExpiredLocks, arguments:['False']  
High Call: processExpiredLocks
CVX_16(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_15', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_15(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_14', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: prepareWithdrawAll
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_14(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_13', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_16
CVX_16
CVX

Name: CVX Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
toDeposit_1

Name: toDeposit Function: prepareWithdrawAll
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
toDeposit_1
toDeposit
Name: toDeposit, Num: 1

Name: toDeposit Function: prepareWithdrawAll
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
CVX_17
CVX

Name: CVX Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_15
CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_518 = CONVERT CVX_16 to IERC20Upgradeable
Converting CVX_16

Name: CVX Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_518

Name: TMP_518 Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_519 = CONVERT this to address
Converting this
14
[i]Type for TMP_519

Name: TMP_519 Function: prepareWithdrawAll
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_520(uint256) = HIGH_LEVEL_CALL, dest:TMP_518(IERC20Upgradeable), function:balanceOf, arguments:['TMP_519']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_520

Name: TMP_520 Function: prepareWithdrawAll
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_17(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_16', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: prepareWithdrawAll
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_15(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_14', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
toDeposit_1(uint256) := TMP_520(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toDeposit

Name: toDeposit Function: prepareWithdrawAll
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: prepareWithdrawAll
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_521(bool) = toDeposit_1 > 0
init
end
init
end
A: 6 B: 0
x
y
A: 6 B: 0
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 0
[i]Type for TMP_521

Name: TMP_521 Function: prepareWithdrawAll
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: prepareWithdrawAll
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
CVX_VAULT_15
CVX_VAULT_15
CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_16
CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:CVX_VAULT_15(ISettV3), function:deposit, arguments:['toDeposit_1']  
High Call: deposit
CVX_VAULT_16(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: prepareWithdrawAll
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



_withdrawAll



_withdrawSome



harvest


want_26(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
reward_3(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
LOCKER_19(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyAuthorizedActors()()
TMP_544 = CONVERT want_28 to IERC20Upgradeable
TMP_545 = CONVERT this to address
TMP_546(uint256) = HIGH_LEVEL_CALL, dest:TMP_544(IERC20Upgradeable), function:balanceOf, arguments:['TMP_545']  
want_29(address) := ϕ(['want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_28', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
reward_6(address) := ϕ(['reward_12', 'reward_10', 'reward_5', 'reward_1'])
LOCKER_22(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_21', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
_before_1(uint256) := TMP_546(uint256)
TMP_547 = CONVERT reward_6 to IERC20Upgradeable
TMP_548 = CONVERT this to address
TMP_549(uint256) = HIGH_LEVEL_CALL, dest:TMP_547(IERC20Upgradeable), function:balanceOf, arguments:['TMP_548']  
want_30(address) := ϕ(['want_6', 'want_21', 'want_29', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
reward_7(address) := ϕ(['reward_12', 'reward_10', 'reward_1', 'reward_6'])
LOCKER_23(ICvxLocker) := ϕ(['LOCKER_22', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
_beforeCVX_1(uint256) := TMP_549(uint256)
TMP_550 = CONVERT this to address
HIGH_LEVEL_CALL, dest:LOCKER_23(ICvxLocker), function:getReward, arguments:['TMP_550', 'False']  
want_31(address) := ϕ(['want_30', 'want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
reward_8(address) := ϕ(['reward_12', 'reward_10', 'reward_7', 'reward_1'])
LOCKER_24(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_23', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
TMP_552 = CONVERT reward_8 to IERC20Upgradeable
TMP_553 = CONVERT this to address
TMP_554(uint256) = HIGH_LEVEL_CALL, dest:TMP_552(IERC20Upgradeable), function:balanceOf, arguments:['TMP_553']  
want_32(address) := ϕ(['want_31', 'want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
reward_9(address) := ϕ(['reward_12', 'reward_10', 'reward_8', 'reward_1'])
TMP_555(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['TMP_554', '_beforeCVX_1'] 
earnedReward_1(uint256) := TMP_555(uint256)
TUPLE_4(uint256,uint256) = INTERNAL_CALL, MyStrategy._processRewardsFees(uint256,address)(earnedReward_1,reward_9)
governancePerformanceFee_1(uint256)= UNPACK TUPLE_4 index: 0 
strategistPerformanceFee_1(uint256)= UNPACK TUPLE_4 index: 1 
INTERNAL_CALL, MyStrategy._swapcvxCRVToWant()()
TMP_557 = CONVERT want_34 to IERC20Upgradeable
TMP_558 = CONVERT this to address
TMP_559(uint256) = HIGH_LEVEL_CALL, dest:TMP_557(IERC20Upgradeable), function:balanceOf, arguments:['TMP_558']  
want_35(address) := ϕ(['want_6', 'want_21', 'want_34', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
TMP_560(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['TMP_559', '_before_1'] 
earned_1(uint256) := TMP_560(uint256)
Emit Harvest(earned_1,block.number)
RETURN earned_1


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
want_26
want
Name: want, Num: 26

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
reward_3
reward
Name: reward, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_19
LOCKER
Name: LOCKER, Num: 19

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
want_26(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
reward_3(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
Phi
[i]Type for reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_19(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
_paused_5
_paused
Name: _paused, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
_paused_5(bool) := ϕ(['_paused_3', '_paused_1', '_paused_0', '_paused_4'])
Phi
[i]Type for _paused

Name: _paused Function: whenNotPaused
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
_paused_5
_paused_5
_paused

Name: _paused Function: whenNotPaused
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_668 = ! _paused_5 
[i]Type for TMP_668

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_669(None) = SOLIDITY_CALL require(bool,string)(TMP_668,Pausable: paused)
[i]Type for TMP_669

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
_paused_5
_paused

Name: _paused Function: whenNotPaused
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
_paused_5(bool) := ϕ(['_paused_3', '_paused_1', '_paused_0', '_paused_4'])
Phi
[i]Type for _paused

Name: _paused Function: whenNotPaused
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
_paused_5
_paused_5
_paused

Name: _paused Function: whenNotPaused
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_668 = ! _paused_5 
[i]Type for TMP_668

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_669(None) = SOLIDITY_CALL require(bool,string)(TMP_668,Pausable: paused)
[i]Type for TMP_669

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyAuthorizedActors()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
governance_6
governance
Name: governance, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
weee
keeper_3
keeper
Name: keeper, Num: 3

Name: None Function: None
Num: -1
Den: -1
Address: 8
Norm: u
LF: keeper
Value: u
Fields: 
Finance Type: undef
weee
governance_6(address) := ϕ(['governance_0', 'governance_1', 'governance_7'])
Phi
[i]Type for governance

Name: governance Function: _onlyAuthorizedActors
Num: -1
Den: -1
Address: 1
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
XXXX
keeper_3(address) := ϕ(['keeper_4', 'keeper_1', 'keeper_0'])
Phi
[i]Type for keeper

Name: keeper Function: _onlyAuthorizedActors
Num: -1
Den: -1
Address: 8
Norm: u
LF: keeper
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
keeper_3
keeper_3
keeper

Name: keeper Function: _onlyAuthorizedActors
Num: -1
Den: -1
Address: 8
Norm: u
LF: keeper
Value: u
Fields: 
Finance Type: undef
governance_6
governance_6
governance

Name: governance Function: _onlyAuthorizedActors
Num: -1
Den: -1
Address: 1
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_437(bool) = msg.sender == keeper_3
[i]Type for TMP_437

Name: TMP_437 Function: _onlyAuthorizedActors
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_438(bool) = msg.sender == governance_6
[i]Type for TMP_438

Name: TMP_438 Function: _onlyAuthorizedActors
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_439(bool) = TMP_437 || TMP_438
[i]Type for TMP_439

Name: TMP_439 Function: _onlyAuthorizedActors
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_440(None) = SOLIDITY_CALL require(bool,string)(TMP_439,onlyAuthorizedActors)
[i]Type for TMP_440

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
governance_6
governance

Name: governance Function: _onlyAuthorizedActors
Num: -1
Den: -1
Address: 1
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
weee
keeper_3
keeper

Name: keeper Function: _onlyAuthorizedActors
Num: -1
Den: -1
Address: 8
Norm: u
LF: keeper
Value: u
Fields: 
Finance Type: undef
weee
governance_6(address) := ϕ(['governance_0', 'governance_1', 'governance_7'])
Phi
[i]Type for governance

Name: governance Function: _onlyAuthorizedActors
Num: -1
Den: -1
Address: 1
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
XXXX
keeper_3(address) := ϕ(['keeper_4', 'keeper_1', 'keeper_0'])
Phi
[i]Type for keeper

Name: keeper Function: _onlyAuthorizedActors
Num: -1
Den: -1
Address: 8
Norm: u
LF: keeper
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
keeper_3
keeper_3
keeper

Name: keeper Function: _onlyAuthorizedActors
Num: -1
Den: -1
Address: 8
Norm: u
LF: keeper
Value: u
Fields: 
Finance Type: undef
governance_6
governance_6
governance

Name: governance Function: _onlyAuthorizedActors
Num: -1
Den: -1
Address: 1
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_437(bool) = msg.sender == keeper_3
[i]Type for TMP_437

Name: TMP_437 Function: _onlyAuthorizedActors
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_438(bool) = msg.sender == governance_6
[i]Type for TMP_438

Name: TMP_438 Function: _onlyAuthorizedActors
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_439(bool) = TMP_437 || TMP_438
[i]Type for TMP_439

Name: TMP_439 Function: _onlyAuthorizedActors
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_440(None) = SOLIDITY_CALL require(bool,string)(TMP_439,onlyAuthorizedActors)
[i]Type for TMP_440

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
want_28
want_28
want
Name: want, Num: 28

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
_before_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_before_1
_before
Name: _before, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
want_29
want
Name: want, Num: 29

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
reward_6
reward
Name: reward, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_22
LOCKER
Name: LOCKER, Num: 22

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_544 = CONVERT want_28 to IERC20Upgradeable
Converting want_28

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_544

Name: TMP_544 Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_545 = CONVERT this to address
Converting this
14
[i]Type for TMP_545

Name: TMP_545 Function: harvest
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_546(uint256) = HIGH_LEVEL_CALL, dest:TMP_544(IERC20Upgradeable), function:balanceOf, arguments:['TMP_545']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
10
[i]Type for TMP_546

Name: TMP_546 Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_29(address) := ϕ(['want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_28', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
reward_6(address) := ϕ(['reward_12', 'reward_10', 'reward_5', 'reward_1'])
Phi
[i]Type for reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_22(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_21', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
_before_1(uint256) := TMP_546(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for _before

Name: _before Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reward_6
reward_6
reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
_beforeCVX_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_beforeCVX_1
_beforeCVX
Name: _beforeCVX, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
want_30
want
Name: want, Num: 30

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
reward_7
reward
Name: reward, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_23
LOCKER
Name: LOCKER, Num: 23

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_547 = CONVERT reward_6 to IERC20Upgradeable
Converting reward_6

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_547

Name: TMP_547 Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_548 = CONVERT this to address
Converting this
14
[i]Type for TMP_548

Name: TMP_548 Function: harvest
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_549(uint256) = HIGH_LEVEL_CALL, dest:TMP_547(IERC20Upgradeable), function:balanceOf, arguments:['TMP_548']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
7
[i]Type for TMP_549

Name: TMP_549 Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_30(address) := ϕ(['want_6', 'want_21', 'want_29', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
reward_7(address) := ϕ(['reward_12', 'reward_10', 'reward_1', 'reward_6'])
Phi
[i]Type for reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_23(ICvxLocker) := ϕ(['LOCKER_22', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
_beforeCVX_1(uint256) := TMP_549(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for _beforeCVX

Name: _beforeCVX Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
LOCKER_23
LOCKER_23
LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
want_31
want
Name: want, Num: 31

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
reward_8
reward
Name: reward, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_24
LOCKER
Name: LOCKER, Num: 24

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
TMP_550 = CONVERT this to address
Converting this
14
[i]Type for TMP_550

Name: TMP_550 Function: harvest
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:LOCKER_23(ICvxLocker), function:getReward, arguments:['TMP_550', 'False']  
High Call: getReward
want_31(address) := ϕ(['want_30', 'want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
reward_8(address) := ϕ(['reward_12', 'reward_10', 'reward_7', 'reward_1'])
Phi
[i]Type for reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_24(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_23', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
_beforeCVX_1
_beforeCVX_1
_beforeCVX

Name: _beforeCVX Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
reward_8
reward_8
reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
earnedReward_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
earnedReward_1
earnedReward
Name: earnedReward, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
want_32
want
Name: want, Num: 32

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
reward_9
reward
Name: reward, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
weee
weee
TMP_552 = CONVERT reward_8 to IERC20Upgradeable
Converting reward_8

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_552

Name: TMP_552 Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_553 = CONVERT this to address
Converting this
14
[i]Type for TMP_553

Name: TMP_553 Function: harvest
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_554(uint256) = HIGH_LEVEL_CALL, dest:TMP_552(IERC20Upgradeable), function:balanceOf, arguments:['TMP_553']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
7
[i]Type for TMP_554

Name: TMP_554 Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_32(address) := ϕ(['want_31', 'want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
reward_9(address) := ϕ(['reward_12', 'reward_10', 'reward_8', 'reward_1'])
Phi
[i]Type for reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_555(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['TMP_554', '_beforeCVX_1'] 
SUB1
init
end
init
end
A: 6 B: 6
x
y
A: 6 B: 6
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 6
Finance type key: (0, 0)
SUB

Name: TMP_554 Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: _beforeCVX Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for TMP_555

Name: TMP_555 Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
earnedReward_1(uint256) := TMP_555(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for earnedReward

Name: earnedReward Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
earnedReward_1
earnedReward_1
earnedReward

Name: earnedReward Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
reward_9
reward_9
reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
strategistPerformanceFee_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
strategistPerformanceFee_1
strategistPerformanceFee
Name: strategistPerformanceFee, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
governancePerformanceFee_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
governancePerformanceFee_1
governancePerformanceFee
Name: governancePerformanceFee, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TUPLE_4(uint256,uint256) = INTERNAL_CALL, MyStrategy._processRewardsFees(uint256,address)(earnedReward_1,reward_9)
init
end
init
end
[[7], [-1], 6, None, [], 0, 'u', 'u']

Name: _amount Function: None
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
[[-1], [-1], 'u', 'reward', [], -1, 7, 'u']

Name: _token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: _amount Function: None
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: _token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _amount Function: None
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: _token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
_amount_1
_amount
p.norm: 0

Name: _amount_1 Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
_token_1
_token
p.norm: 0

Name: _token_1 Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
performanceFeeGovernance_6
performanceFeeGovernance
Name: performanceFeeGovernance, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
performanceFeeStrategist_7
performanceFeeStrategist
Name: performanceFeeStrategist, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
controller_17
controller
Name: controller, Num: 17

Name: None Function: None
Num: -1
Den: -1
Address: 9
Norm: u
LF: controller
Value: u
Fields: 
Finance Type: undef
weee
strategist_8
strategist
Name: strategist, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
weee
_amount_1(uint256) := ϕ(['earnedReward_1'])
Phi
[i]Type for _amount

Name: _amount Function: _processRewardsFees
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_token_1(address) := ϕ(['reward_9'])
Phi
[i]Type for _token

Name: _token Function: _processRewardsFees
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
performanceFeeGovernance_6(uint256) := ϕ(['performanceFeeGovernance_1', 'performanceFeeGovernance_8', 'performanceFeeGovernance_2', 'performanceFeeGovernance_0', 'performanceFeeGovernance_5'])
Phi
[i]Type for performanceFeeGovernance

Name: performanceFeeGovernance Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
performanceFeeStrategist_7(uint256) := ϕ(['performanceFeeStrategist_0', 'performanceFeeStrategist_10', 'performanceFeeStrategist_2', 'performanceFeeStrategist_1', 'performanceFeeStrategist_6'])
Phi
[i]Type for performanceFeeStrategist

Name: performanceFeeStrategist Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
controller_17(address) := ϕ(['controller_9', 'controller_16', 'controller_19', 'controller_1', 'controller_11', 'controller_4', 'controller_13', 'controller_0'])
Phi
[i]Type for controller

Name: controller Function: _processRewardsFees
Num: -1
Den: -1
Address: 9
Norm: u
LF: controller
Value: u
Fields: 
Finance Type: undef
XXXX
strategist_8(address) := ϕ(['strategist_11', 'strategist_0', 'strategist_3', 'strategist_7', 'strategist_1'])
Phi
[i]Type for strategist

Name: strategist Function: _processRewardsFees
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _amount Function: None
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: _token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
performanceFeeGovernance_7
performanceFeeGovernance_7
performanceFeeGovernance
Name: performanceFeeGovernance, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token_1
_token_1
_token

Name: _token Function: _processRewardsFees
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
controller_17
controller_17
controller

Name: controller Function: _processRewardsFees
Num: -1
Den: -1
Address: 9
Norm: u
LF: controller
Value: u
Fields: 
Finance Type: undef
_amount_1
_amount_1
_amount

Name: _amount Function: _processRewardsFees
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
governanceRewardsFee_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
governanceRewardsFee_1
governanceRewardsFee
Name: governanceRewardsFee, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
performanceFeeGovernance_7
performanceFeeGovernance

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
performanceFeeStrategist_8
performanceFeeStrategist
Name: performanceFeeStrategist, Num: 8

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
controller_18
controller
Name: controller, Num: 18

Name: None Function: None
Num: -1
Den: -1
Address: 9
Norm: u
LF: controller
Value: u
Fields: 
Finance Type: undef
weee
strategist_9
strategist
Name: strategist, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
weee
weee
weee
TMP_584 = CONVERT controller_17 to IController
Converting controller_17

Name: controller Function: _processRewardsFees
Num: -1
Den: -1
Address: 9
Norm: u
LF: controller
Value: u
Fields: 
Finance Type: undef
init
end
Controller
[i]Type for TMP_584

Name: TMP_584 Function: _processRewardsFees
Num: -1
Den: -1
Address: 9
Norm: u
LF: Controller
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_585(address) = HIGH_LEVEL_CALL, dest:TMP_584(IController), function:rewards, arguments:[]  
High Call: rewards
Running querryfc
Written func info: Controller, rewards
[i]Type for TMP_585

Name: TMP_585 Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
performanceFeeGovernance_7(uint256) := ϕ(['performanceFeeGovernance_1', 'performanceFeeGovernance_8', 'performanceFeeGovernance_6', 'performanceFeeGovernance_2', 'performanceFeeGovernance_5'])
Phi
[i]Type for performanceFeeGovernance

Name: performanceFeeGovernance Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
performanceFeeStrategist_8(uint256) := ϕ(['performanceFeeStrategist_10', 'performanceFeeStrategist_2', 'performanceFeeStrategist_1', 'performanceFeeStrategist_7', 'performanceFeeStrategist_6'])
Phi
[i]Type for performanceFeeStrategist

Name: performanceFeeStrategist Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
controller_18(address) := ϕ(['controller_9', 'controller_16', 'controller_17', 'controller_19', 'controller_1', 'controller_11', 'controller_4', 'controller_13'])
Phi
[i]Type for controller

Name: controller Function: _processRewardsFees
Num: -1
Den: -1
Address: 9
Norm: u
LF: controller
Value: u
Fields: 
Finance Type: undef
XXXX
strategist_9(address) := ϕ(['strategist_11', 'strategist_3', 'strategist_7', 'strategist_8', 'strategist_1'])
Phi
[i]Type for strategist

Name: strategist Function: _processRewardsFees
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_586(uint256) = INTERNAL_CALL, BaseStrategy._processFee(address,uint256,uint256,address)(_token_1,_amount_1,performanceFeeGovernance_7,TMP_585)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'reward', [], -1, 7, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
[[7], [-1], 'u', None, [], 0, 'u', 'u']

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: 0

Name: token_1 Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
feeBps_1
feeBps
p.norm: 0

Name: feeBps_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
recipient_1
recipient
p.norm: 0

Name: recipient_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
weee
MAX_FEE_16
MAX_FEE
Name: MAX_FEE, Num: 16

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['_token_1', 'want_37', 'want_38'])
Phi
[i]Type for token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['_amount_1', '_amount_1'])
Phi
[i]Type for amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
feeBps_1(uint256) := ϕ(['performanceFeeStrategist_5', 'performanceFeeGovernance_7', 'performanceFeeStrategist_9', 'performanceFeeGovernance_4'])
Phi
[i]Type for feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := ϕ(['TMP_585', 'TMP_581', 'strategist_6', 'strategist_10'])
Phi
[i]Type for recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_16(uint256) := ϕ(['MAX_FEE_14', 'MAX_FEE_6', 'MAX_FEE_13', 'MAX_FEE_2', 'MAX_FEE_8', 'MAX_FEE_4', 'MAX_FEE_0'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_390(bool) = feeBps_1 == 0
[i]Type for TMP_390

Name: TMP_390 Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MAX_FEE_16
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1
fee
Name: fee, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['amount_1', 'feeBps_1'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_391

Name: TMP_391 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_391', 'MAX_FEE_16'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_392

Name: TMP_392 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
fee_1(uint256) := TMP_392(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
recipient_1
recipient_1
recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_393 = CONVERT token_1 to IERC20Upgradeable
Converting token_1

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_393

Name: TMP_393 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['TMP_393', 'recipient_1', 'fee_1'] 
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
RETURN fee_1
init
end
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN 0
init
end

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: 0

Name: token_1 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
feeBps_1
feeBps
p.norm: 0

Name: feeBps_1 Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
recipient_1
recipient
p.norm: 0

Name: recipient_1 Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
weee
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['_token_1', 'want_37', 'want_38'])
Phi
[i]Type for token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['_amount_1', '_amount_1'])
Phi
[i]Type for amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
feeBps_1(uint256) := ϕ(['performanceFeeStrategist_5', 'performanceFeeGovernance_7', 'performanceFeeStrategist_9', 'performanceFeeGovernance_4'])
Phi
[i]Type for feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := ϕ(['TMP_585', 'TMP_581', 'strategist_6', 'strategist_10'])
Phi
[i]Type for recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_16(uint256) := ϕ(['MAX_FEE_14', 'MAX_FEE_6', 'MAX_FEE_13', 'MAX_FEE_2', 'MAX_FEE_8', 'MAX_FEE_4', 'MAX_FEE_0'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_390(bool) = feeBps_1 == 0
[i]Type for TMP_390

Name: TMP_390 Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MAX_FEE_16
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
fee_1
fee
Name: fee, Num: 1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['amount_1', 'feeBps_1'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_391

Name: TMP_391 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_391', 'MAX_FEE_16'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_392

Name: TMP_392 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
fee_1(uint256) := TMP_392(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
recipient_1
recipient_1
recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_393 = CONVERT token_1 to IERC20Upgradeable
Converting token_1

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_393

Name: TMP_393 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['TMP_393', 'recipient_1', 'fee_1'] 
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
RETURN fee_1
init
end
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN 0
init
end
([-1], [-1], 0, None, -1)
[i]Type for TMP_586

Name: TMP_586 Function: _processRewardsFees
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
governanceRewardsFee_1(uint256) := TMP_586(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for governanceRewardsFee

Name: governanceRewardsFee Function: _processRewardsFees
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _amount Function: None
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: _token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_token_1
_token_1
_token

Name: _token Function: _processRewardsFees
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
_amount_1
_amount_1
_amount

Name: _amount Function: _processRewardsFees
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
performanceFeeStrategist_9
performanceFeeStrategist_9
performanceFeeStrategist
Name: performanceFeeStrategist, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
strategist_10
strategist_10
strategist
Name: strategist, Num: 10

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
strategistRewardsFee_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
strategistRewardsFee_1
strategistRewardsFee
Name: strategistRewardsFee, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_587(uint256) = INTERNAL_CALL, BaseStrategy._processFee(address,uint256,uint256,address)(_token_1,_amount_1,performanceFeeStrategist_9,strategist_10)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'reward', [], -1, 7, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
[[7], [-1], 'u', None, [], 0, 'u', 'u']

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'strategist', [], -1, 2, 'u']

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: 0

Name: token_1 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
feeBps_1
feeBps
p.norm: 0

Name: feeBps_1 Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
recipient_1
recipient
p.norm: 0

Name: recipient_1 Function: _processFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
weee
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['_token_1', 'want_37', 'want_38'])
Phi
[i]Type for token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['_amount_1', '_amount_1'])
Phi
[i]Type for amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
feeBps_1(uint256) := ϕ(['performanceFeeStrategist_5', 'performanceFeeGovernance_7', 'performanceFeeStrategist_9', 'performanceFeeGovernance_4'])
Phi
[i]Type for feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := ϕ(['TMP_585', 'TMP_581', 'strategist_6', 'strategist_10'])
Phi
[i]Type for recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_16(uint256) := ϕ(['MAX_FEE_14', 'MAX_FEE_6', 'MAX_FEE_13', 'MAX_FEE_2', 'MAX_FEE_8', 'MAX_FEE_4', 'MAX_FEE_0'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_390(bool) = feeBps_1 == 0
[i]Type for TMP_390

Name: TMP_390 Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MAX_FEE_16
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
fee_1
fee
Name: fee, Num: 1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['amount_1', 'feeBps_1'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_391

Name: TMP_391 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_391', 'MAX_FEE_16'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_392

Name: TMP_392 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
fee_1(uint256) := TMP_392(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
recipient_1
recipient_1
recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_393 = CONVERT token_1 to IERC20Upgradeable
Converting token_1

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_393

Name: TMP_393 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['TMP_393', 'recipient_1', 'fee_1'] 
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
RETURN fee_1
init
end
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN 0
init
end

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: 0

Name: token_1 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
feeBps_1
feeBps
p.norm: 0

Name: feeBps_1 Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
recipient_1
recipient
p.norm: 0

Name: recipient_1 Function: _processFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
weee
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['_token_1', 'want_37', 'want_38'])
Phi
[i]Type for token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['_amount_1', '_amount_1'])
Phi
[i]Type for amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
feeBps_1(uint256) := ϕ(['performanceFeeStrategist_5', 'performanceFeeGovernance_7', 'performanceFeeStrategist_9', 'performanceFeeGovernance_4'])
Phi
[i]Type for feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := ϕ(['TMP_585', 'TMP_581', 'strategist_6', 'strategist_10'])
Phi
[i]Type for recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_16(uint256) := ϕ(['MAX_FEE_14', 'MAX_FEE_6', 'MAX_FEE_13', 'MAX_FEE_2', 'MAX_FEE_8', 'MAX_FEE_4', 'MAX_FEE_0'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_390(bool) = feeBps_1 == 0
[i]Type for TMP_390

Name: TMP_390 Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MAX_FEE_16
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
fee_1
fee
Name: fee, Num: 1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['amount_1', 'feeBps_1'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_391

Name: TMP_391 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_391', 'MAX_FEE_16'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_392

Name: TMP_392 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
fee_1(uint256) := TMP_392(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
recipient_1
recipient_1
recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_393 = CONVERT token_1 to IERC20Upgradeable
Converting token_1

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_393

Name: TMP_393 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['TMP_393', 'recipient_1', 'fee_1'] 
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
RETURN fee_1
init
end
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN 0
init
end
([-1], [-1], 0, None, -1)
[i]Type for TMP_587

Name: TMP_587 Function: _processRewardsFees
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
strategistRewardsFee_1(uint256) := TMP_587(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for strategistRewardsFee

Name: strategistRewardsFee Function: _processRewardsFees
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX

Name: _amount Function: None
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: _token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: _amount Function: None
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: _token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
_amount_1
_amount
p.norm: 0

Name: _amount_1 Function: _processRewardsFees
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
_token_1
_token
p.norm: 0

Name: _token_1 Function: _processRewardsFees
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
performanceFeeGovernance_6
performanceFeeGovernance

Name: performanceFeeGovernance Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
performanceFeeStrategist_7
performanceFeeStrategist

Name: performanceFeeStrategist Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
controller_17
controller

Name: controller Function: _processRewardsFees
Num: -1
Den: -1
Address: 9
Norm: u
LF: controller
Value: u
Fields: 
Finance Type: undef
weee
strategist_8
strategist

Name: strategist Function: _processRewardsFees
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
weee
_amount_1(uint256) := ϕ(['earnedReward_1'])
Phi
[i]Type for _amount

Name: _amount Function: _processRewardsFees
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_token_1(address) := ϕ(['reward_9'])
Phi
[i]Type for _token

Name: _token Function: _processRewardsFees
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
performanceFeeGovernance_6(uint256) := ϕ(['performanceFeeGovernance_1', 'performanceFeeGovernance_8', 'performanceFeeGovernance_2', 'performanceFeeGovernance_0', 'performanceFeeGovernance_5'])
Phi
[i]Type for performanceFeeGovernance

Name: performanceFeeGovernance Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
performanceFeeStrategist_7(uint256) := ϕ(['performanceFeeStrategist_0', 'performanceFeeStrategist_10', 'performanceFeeStrategist_2', 'performanceFeeStrategist_1', 'performanceFeeStrategist_6'])
Phi
[i]Type for performanceFeeStrategist

Name: performanceFeeStrategist Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
controller_17(address) := ϕ(['controller_9', 'controller_16', 'controller_19', 'controller_1', 'controller_11', 'controller_4', 'controller_13', 'controller_0'])
Phi
[i]Type for controller

Name: controller Function: _processRewardsFees
Num: -1
Den: -1
Address: 9
Norm: u
LF: controller
Value: u
Fields: 
Finance Type: undef
XXXX
strategist_8(address) := ϕ(['strategist_11', 'strategist_0', 'strategist_3', 'strategist_7', 'strategist_1'])
Phi
[i]Type for strategist

Name: strategist Function: _processRewardsFees
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _amount Function: None
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: _token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
performanceFeeGovernance_7
performanceFeeGovernance_7
performanceFeeGovernance

Name: performanceFeeGovernance Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_token_1
_token_1
_token

Name: _token Function: _processRewardsFees
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
controller_17
controller_17
controller

Name: controller Function: _processRewardsFees
Num: -1
Den: -1
Address: 9
Norm: u
LF: controller
Value: u
Fields: 
Finance Type: undef
_amount_1
_amount_1
_amount

Name: _amount Function: _processRewardsFees
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
governanceRewardsFee_1

Name: governanceRewardsFee Function: _processRewardsFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
governanceRewardsFee_1
governanceRewardsFee
Name: governanceRewardsFee, Num: 1

Name: governanceRewardsFee Function: _processRewardsFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
performanceFeeGovernance_7
performanceFeeGovernance

Name: performanceFeeGovernance Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
performanceFeeStrategist_8
performanceFeeStrategist

Name: performanceFeeStrategist Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
controller_18
controller

Name: controller Function: _processRewardsFees
Num: -1
Den: -1
Address: 9
Norm: u
LF: controller
Value: u
Fields: 
Finance Type: undef
weee
strategist_9
strategist

Name: strategist Function: _processRewardsFees
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
weee
weee
weee
TMP_584 = CONVERT controller_17 to IController
Converting controller_17

Name: controller Function: _processRewardsFees
Num: -1
Den: -1
Address: 9
Norm: u
LF: controller
Value: u
Fields: 
Finance Type: undef
init
end
Controller
[i]Type for TMP_584

Name: TMP_584 Function: _processRewardsFees
Num: -1
Den: -1
Address: 9
Norm: u
LF: Controller
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_585(address) = HIGH_LEVEL_CALL, dest:TMP_584(IController), function:rewards, arguments:[]  
High Call: rewards
Running querryfc
Written func info: Controller, rewards
[i]Type for TMP_585

Name: TMP_585 Function: _processRewardsFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
performanceFeeGovernance_7(uint256) := ϕ(['performanceFeeGovernance_1', 'performanceFeeGovernance_8', 'performanceFeeGovernance_6', 'performanceFeeGovernance_2', 'performanceFeeGovernance_5'])
Phi
[i]Type for performanceFeeGovernance

Name: performanceFeeGovernance Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
performanceFeeStrategist_8(uint256) := ϕ(['performanceFeeStrategist_10', 'performanceFeeStrategist_2', 'performanceFeeStrategist_1', 'performanceFeeStrategist_7', 'performanceFeeStrategist_6'])
Phi
[i]Type for performanceFeeStrategist

Name: performanceFeeStrategist Function: _processRewardsFees
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
controller_18(address) := ϕ(['controller_9', 'controller_16', 'controller_17', 'controller_19', 'controller_1', 'controller_11', 'controller_4', 'controller_13'])
Phi
[i]Type for controller

Name: controller Function: _processRewardsFees
Num: -1
Den: -1
Address: 9
Norm: u
LF: controller
Value: u
Fields: 
Finance Type: undef
XXXX
strategist_9(address) := ϕ(['strategist_11', 'strategist_3', 'strategist_7', 'strategist_8', 'strategist_1'])
Phi
[i]Type for strategist

Name: strategist Function: _processRewardsFees
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_586(uint256) = INTERNAL_CALL, BaseStrategy._processFee(address,uint256,uint256,address)(_token_1,_amount_1,performanceFeeGovernance_7,TMP_585)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'reward', [], -1, 7, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
[[7], [-1], 'u', None, [], 0, 'u', 'u']

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: 0

Name: token_1 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
feeBps_1
feeBps
p.norm: 0

Name: feeBps_1 Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
recipient_1
recipient
p.norm: 0
Name: recipient, Num: 1

Name: recipient_1 Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
weee
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['_token_1', 'want_37', 'want_38'])
Phi
[i]Type for token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['_amount_1', '_amount_1'])
Phi
[i]Type for amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
feeBps_1(uint256) := ϕ(['performanceFeeStrategist_5', 'performanceFeeGovernance_7', 'performanceFeeStrategist_9', 'performanceFeeGovernance_4'])
Phi
[i]Type for feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := ϕ(['TMP_585', 'TMP_581', 'strategist_6', 'strategist_10'])
Phi
[i]Type for recipient

Name: recipient Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_16(uint256) := ϕ(['MAX_FEE_14', 'MAX_FEE_6', 'MAX_FEE_13', 'MAX_FEE_2', 'MAX_FEE_8', 'MAX_FEE_4', 'MAX_FEE_0'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_390(bool) = feeBps_1 == 0
[i]Type for TMP_390

Name: TMP_390 Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MAX_FEE_16
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
fee_1
fee
Name: fee, Num: 1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['amount_1', 'feeBps_1'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_391

Name: TMP_391 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_391', 'MAX_FEE_16'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_392

Name: TMP_392 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
fee_1(uint256) := TMP_392(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
recipient_1
recipient_1
recipient
p.norm: 0
Name: recipient, Num: 1

Name: recipient_1 Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_393 = CONVERT token_1 to IERC20Upgradeable
Converting token_1

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_393

Name: TMP_393 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['TMP_393', 'recipient_1', 'fee_1'] 
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
RETURN fee_1
init
end
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN 0
init
end

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: 0

Name: token_1 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
feeBps_1
feeBps
p.norm: 0

Name: feeBps_1 Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
recipient_1
recipient
p.norm: 0
Name: recipient, Num: 1

Name: recipient_1 Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
weee
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['_token_1', 'want_37', 'want_38'])
Phi
[i]Type for token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['_amount_1', '_amount_1'])
Phi
[i]Type for amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
feeBps_1(uint256) := ϕ(['performanceFeeStrategist_5', 'performanceFeeGovernance_7', 'performanceFeeStrategist_9', 'performanceFeeGovernance_4'])
Phi
[i]Type for feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := ϕ(['TMP_585', 'TMP_581', 'strategist_6', 'strategist_10'])
Phi
[i]Type for recipient

Name: recipient Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_16(uint256) := ϕ(['MAX_FEE_14', 'MAX_FEE_6', 'MAX_FEE_13', 'MAX_FEE_2', 'MAX_FEE_8', 'MAX_FEE_4', 'MAX_FEE_0'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_390(bool) = feeBps_1 == 0
[i]Type for TMP_390

Name: TMP_390 Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MAX_FEE_16
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
fee_1
fee
Name: fee, Num: 1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['amount_1', 'feeBps_1'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_391

Name: TMP_391 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_391', 'MAX_FEE_16'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_392

Name: TMP_392 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
fee_1(uint256) := TMP_392(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
recipient_1
recipient_1
recipient
p.norm: 0
Name: recipient, Num: 1

Name: recipient_1 Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_393 = CONVERT token_1 to IERC20Upgradeable
Converting token_1

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_393

Name: TMP_393 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['TMP_393', 'recipient_1', 'fee_1'] 
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
RETURN fee_1
init
end
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: 
Den: 
Address: u
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN 0
init
end
([-1], [-1], 0, None, -1)
[i]Type for TMP_586

Name: TMP_586 Function: _processRewardsFees
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
governanceRewardsFee_1(uint256) := TMP_586(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for governanceRewardsFee

Name: governanceRewardsFee Function: _processRewardsFees
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: _amount Function: None
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: _token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
_token_1
_token_1
_token

Name: _token Function: _processRewardsFees
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
_amount_1
_amount_1
_amount

Name: _amount Function: _processRewardsFees
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
performanceFeeStrategist_9
performanceFeeStrategist_9
performanceFeeStrategist

Name: performanceFeeStrategist Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
strategist_10
strategist_10
strategist

Name: strategist Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
strategistRewardsFee_1

Name: strategistRewardsFee Function: _processRewardsFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
strategistRewardsFee_1
strategistRewardsFee
Name: strategistRewardsFee, Num: 1

Name: strategistRewardsFee Function: _processRewardsFees
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_587(uint256) = INTERNAL_CALL, BaseStrategy._processFee(address,uint256,uint256,address)(_token_1,_amount_1,performanceFeeStrategist_9,strategist_10)
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', 'reward', [], -1, 7, 'u']

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
[[7], [-1], 'u', None, [], 0, 'u', 'u']

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', 'strategist', [], -1, 2, 'u']

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: 0

Name: token_1 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
feeBps_1
feeBps
p.norm: 0

Name: feeBps_1 Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
recipient_1
recipient
p.norm: 0

Name: recipient_1 Function: _processFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
weee
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['_token_1', 'want_37', 'want_38'])
Phi
[i]Type for token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['_amount_1', '_amount_1'])
Phi
[i]Type for amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
feeBps_1(uint256) := ϕ(['performanceFeeStrategist_5', 'performanceFeeGovernance_7', 'performanceFeeStrategist_9', 'performanceFeeGovernance_4'])
Phi
[i]Type for feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := ϕ(['TMP_585', 'TMP_581', 'strategist_6', 'strategist_10'])
Phi
[i]Type for recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_16(uint256) := ϕ(['MAX_FEE_14', 'MAX_FEE_6', 'MAX_FEE_13', 'MAX_FEE_2', 'MAX_FEE_8', 'MAX_FEE_4', 'MAX_FEE_0'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_390(bool) = feeBps_1 == 0
[i]Type for TMP_390

Name: TMP_390 Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MAX_FEE_16
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
fee_1
fee
Name: fee, Num: 1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['amount_1', 'feeBps_1'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_391

Name: TMP_391 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_391', 'MAX_FEE_16'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_392

Name: TMP_392 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
fee_1(uint256) := TMP_392(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
recipient_1
recipient_1
recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_393 = CONVERT token_1 to IERC20Upgradeable
Converting token_1

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_393

Name: TMP_393 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['TMP_393', 'recipient_1', 'fee_1'] 
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
RETURN fee_1
init
end
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN 0
init
end

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
token_1
token
p.norm: 0

Name: token_1 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
amount_1
amount
p.norm: 0

Name: amount_1 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
weee
feeBps_1
feeBps
p.norm: 0

Name: feeBps_1 Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
recipient_1
recipient
p.norm: 0

Name: recipient_1 Function: _processFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
weee
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
token_1(address) := ϕ(['_token_1', 'want_37', 'want_38'])
Phi
[i]Type for token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['_amount_1', '_amount_1'])
Phi
[i]Type for amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
feeBps_1(uint256) := ϕ(['performanceFeeStrategist_5', 'performanceFeeGovernance_7', 'performanceFeeStrategist_9', 'performanceFeeGovernance_4'])
Phi
[i]Type for feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := ϕ(['TMP_585', 'TMP_581', 'strategist_6', 'strategist_10'])
Phi
[i]Type for recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_FEE_16(uint256) := ϕ(['MAX_FEE_14', 'MAX_FEE_6', 'MAX_FEE_13', 'MAX_FEE_2', 'MAX_FEE_8', 'MAX_FEE_4', 'MAX_FEE_0'])
Phi
[i]Type for MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_390(bool) = feeBps_1 == 0
[i]Type for TMP_390

Name: TMP_390 Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
amount_1
amount_1
amount

Name: amount Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MAX_FEE_16
MAX_FEE_16
MAX_FEE

Name: MAX_FEE Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
feeBps_1
feeBps_1
feeBps

Name: feeBps Function: _processFee
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
fee_1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
fee_1
fee
Name: fee, Num: 1

Name: fee Function: _processFee
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['amount_1', 'feeBps_1'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_391

Name: TMP_391 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_392(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_391', 'MAX_FEE_16'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_392

Name: TMP_392 Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
fee_1(uint256) := TMP_392(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
recipient_1
recipient_1
recipient

Name: recipient Function: _processFee
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
token_1
token_1
token

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_393 = CONVERT token_1 to IERC20Upgradeable
Converting token_1

Name: token Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_393

Name: TMP_393 Function: _processFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
LIBRARY_CALL, dest:SafeERC20Upgradeable, function:SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable,address,uint256), arguments:['TMP_393', 'recipient_1', 'fee_1'] 
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
fee_1
fee_1
fee

Name: fee Function: _processFee
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
RETURN fee_1
init
end
Rembmered parameters?

Name: token Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef

Name: amount Function: None
Num: 7
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: feeBps Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: recipient Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: strategist
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
RETURN 0
init
end
([-1], [-1], 0, None, -1)
[i]Type for TMP_587

Name: TMP_587 Function: _processRewardsFees
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
strategistRewardsFee_1(uint256) := TMP_587(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for strategistRewardsFee

Name: strategistRewardsFee Function: _processRewardsFees
Num: -1
Den: -1
Address: -1
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TUPLE_4

Name: TUPLE_4 Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
governancePerformanceFee_1(uint256)= UNPACK TUPLE_4 index: 0 
Finding type for governancePerformanceFee(uint256 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
(-1, -1, 'u', None, -1, 12)
[i]Type for governancePerformanceFee

Name: governancePerformanceFee Function: harvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
XXXX
strategistPerformanceFee_1(uint256)= UNPACK TUPLE_4 index: 1 
Finding type for strategistPerformanceFee(uint256 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
(-1, -1, 'u', None, -1, 12)
[i]Type for strategistPerformanceFee

Name: strategistPerformanceFee Function: harvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, MyStrategy._swapcvxCRVToWant()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
reward_11
reward
Name: reward, Num: 11

Name: None Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
WETH_1
WETH
Name: WETH, Num: 1

Name: None Function: None
Num: -1
Den: -1
Address: 13
Norm: u
LF: WETH
Value: u
Fields: 
Finance Type: undef
weee
CVX_18
CVX
Name: CVX, Num: 18

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
SUSHI_ROUTER_4
SUSHI_ROUTER
Name: SUSHI_ROUTER, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_20
CVX_VAULT
Name: CVX_VAULT, Num: 20

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reward_11(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
Phi
[i]Type for reward

Name: reward Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
WETH_1(address) := ϕ(['WETH_0', 'WETH_2'])
Phi
[i]Type for WETH

Name: WETH Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 13
Norm: u
LF: WETH
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_18(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
SUSHI_ROUTER_4(address) := ϕ(['SUSHI_ROUTER_0', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_20(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reward_11
reward_11
reward

Name: reward Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
toSwap_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toSwap_1
toSwap
Name: toSwap, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
reward_12
reward
Name: reward, Num: 12

Name: None Function: None
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
WETH_2
WETH
Name: WETH, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: 13
Norm: u
LF: WETH
Value: u
Fields: 
Finance Type: undef
weee
CVX_19
CVX
Name: CVX, Num: 19

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
SUSHI_ROUTER_5
SUSHI_ROUTER
Name: SUSHI_ROUTER, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_21
CVX_VAULT
Name: CVX_VAULT, Num: 21

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_566 = CONVERT reward_11 to IERC20Upgradeable
Converting reward_11

Name: reward Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_566

Name: TMP_566 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_567 = CONVERT this to address
Converting this
14
[i]Type for TMP_567

Name: TMP_567 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_568(uint256) = HIGH_LEVEL_CALL, dest:TMP_566(IERC20Upgradeable), function:balanceOf, arguments:['TMP_567']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
7
[i]Type for TMP_568

Name: TMP_568 Function: _swapcvxCRVToWant
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
reward_12(address) := ϕ(['reward_12', 'reward_10', 'reward_1', 'reward_11'])
Phi
[i]Type for reward

Name: reward Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
WETH_2(address) := ϕ(['WETH_2', 'WETH_1'])
Phi
[i]Type for WETH

Name: WETH Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 13
Norm: u
LF: WETH
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_19(address) := ϕ(['CVX_18', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
SUSHI_ROUTER_5(address) := ϕ(['SUSHI_ROUTER_4', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_21(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_20', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
toSwap_1(uint256) := TMP_568(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toSwap

Name: toSwap Function: _swapcvxCRVToWant
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toSwap_1
toSwap_1
toSwap

Name: toSwap Function: _swapcvxCRVToWant
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_569(bool) = toSwap_1 == 0
[i]Type for TMP_569

Name: TMP_569 Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
path_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
path_1
path
Name: path, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_571 = new address[](3)
[i]Type for TMP_571

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
path_1(address[]) := TMP_571(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reward_12
reward_12
reward

Name: reward Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
path_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
path_2
path
Name: path, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
path_2
path
Name: path, Num: 2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_138(address) -> path_1[0]
INDEX
[i]Type for REF_138

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
path_2(address[]) := ϕ(['path_1'])
Phi
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_138 (->path_2) := reward_12(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_138

Name: REF_138 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
WETH_2
WETH_2
WETH

Name: WETH Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 13
Norm: u
LF: WETH
Value: u
Fields: 
Finance Type: undef
path_3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
path_3
path
Name: path, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
path_3
path
Name: path, Num: 3

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_139(address) -> path_2[1]
INDEX
[i]Type for REF_139

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
path_3(address[]) := ϕ(['path_2'])
Phi
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_139 (->path_3) := WETH_2(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_139

Name: REF_139 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 13
Norm: u
LF: WETH
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_19
CVX_19
CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
path_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
path_4
path
Name: path, Num: 4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
path_4
path
Name: path, Num: 4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_140(address) -> path_3[2]
INDEX
[i]Type for REF_140

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
path_4(address[]) := ϕ(['path_3'])
Phi
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_140 (->path_4) := CVX_19(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_140

Name: REF_140 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toSwap_1
toSwap_1
toSwap

Name: toSwap Function: _swapcvxCRVToWant
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
SUSHI_ROUTER_5
SUSHI_ROUTER_5
SUSHI_ROUTER

Name: SUSHI_ROUTER Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
path_4
path_4
path
Name: path, Num: 4

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
CVX_20
CVX
Name: CVX, Num: 20

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
SUSHI_ROUTER_6
SUSHI_ROUTER
Name: SUSHI_ROUTER, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_22
CVX_VAULT
Name: CVX_VAULT, Num: 22

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_572 = CONVERT SUSHI_ROUTER_5 to IUniswapRouterV2
Converting SUSHI_ROUTER_5

Name: SUSHI_ROUTER Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
init
end
UniswapRouterV2
[i]Type for TMP_572

Name: TMP_572 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: UniswapRouterV2
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_573 = CONVERT this to address
Converting this
14
[i]Type for TMP_573

Name: TMP_573 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_574(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_572(IUniswapRouterV2), function:swapExactTokensForTokens, arguments:['toSwap_1', '0', 'path_4', 'TMP_573', 'now']  
High Call: swapExactTokensForTokens
Running querryfc
Written func info: UniswapRouterV2, swapExactTokensForTokens
Handling balance function!
6
Finding type for hlc_0(uint256[] ... )
[i]Type for TMP_574

Name: TMP_574 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_20(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
SUSHI_ROUTER_6(address) := ϕ(['SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_22(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_20
CVX_20
CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
toDeposit_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toDeposit_1
toDeposit
Name: toDeposit, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
CVX_21
CVX
Name: CVX, Num: 21

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_23
CVX_VAULT
Name: CVX_VAULT, Num: 23

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_575 = CONVERT CVX_20 to IERC20Upgradeable
Converting CVX_20

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_575

Name: TMP_575 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_576 = CONVERT this to address
Converting this
14
[i]Type for TMP_576

Name: TMP_576 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_577(uint256) = HIGH_LEVEL_CALL, dest:TMP_575(IERC20Upgradeable), function:balanceOf, arguments:['TMP_576']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_577

Name: TMP_577 Function: _swapcvxCRVToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_21(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_20', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_23(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_22'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
toDeposit_1(uint256) := TMP_577(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toDeposit

Name: toDeposit Function: _swapcvxCRVToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: _swapcvxCRVToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_578(bool) = toDeposit_1 > 0
init
end
init
end
A: 6 B: 0
x
y
A: 6 B: 0
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 0
[i]Type for TMP_578

Name: TMP_578 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_VAULT_23
CVX_VAULT_23
CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: _swapcvxCRVToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
CVX_VAULT_24
CVX_VAULT
Name: CVX_VAULT, Num: 24

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:CVX_VAULT_23(ISettV3), function:deposit, arguments:['toDeposit_1']  
High Call: deposit
CVX_VAULT_24(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
reward_11
reward

Name: reward Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
WETH_1
WETH

Name: WETH Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 13
Norm: u
LF: WETH
Value: u
Fields: 
Finance Type: undef
weee
CVX_18
CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
SUSHI_ROUTER_4
SUSHI_ROUTER

Name: SUSHI_ROUTER Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_20
CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
reward_11(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
Phi
[i]Type for reward

Name: reward Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
WETH_1(address) := ϕ(['WETH_0', 'WETH_2'])
Phi
[i]Type for WETH

Name: WETH Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 13
Norm: u
LF: WETH
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_18(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
SUSHI_ROUTER_4(address) := ϕ(['SUSHI_ROUTER_0', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_20(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reward_11
reward_11
reward

Name: reward Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
toSwap_1

Name: toSwap Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
toSwap_1
toSwap
Name: toSwap, Num: 1

Name: toSwap Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
reward_12
reward

Name: reward Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
WETH_2
WETH

Name: WETH Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 13
Norm: u
LF: WETH
Value: u
Fields: 
Finance Type: undef
weee
CVX_19
CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
SUSHI_ROUTER_5
SUSHI_ROUTER

Name: SUSHI_ROUTER Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_21
CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_566 = CONVERT reward_11 to IERC20Upgradeable
Converting reward_11

Name: reward Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_566

Name: TMP_566 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_567 = CONVERT this to address
Converting this
14
[i]Type for TMP_567

Name: TMP_567 Function: _swapcvxCRVToWant
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_568(uint256) = HIGH_LEVEL_CALL, dest:TMP_566(IERC20Upgradeable), function:balanceOf, arguments:['TMP_567']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
7
[i]Type for TMP_568

Name: TMP_568 Function: _swapcvxCRVToWant
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
reward_12(address) := ϕ(['reward_12', 'reward_10', 'reward_1', 'reward_11'])
Phi
[i]Type for reward

Name: reward Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
WETH_2(address) := ϕ(['WETH_2', 'WETH_1'])
Phi
[i]Type for WETH

Name: WETH Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 13
Norm: u
LF: WETH
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_19(address) := ϕ(['CVX_18', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
SUSHI_ROUTER_5(address) := ϕ(['SUSHI_ROUTER_4', 'SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_21(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_20', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
toSwap_1(uint256) := TMP_568(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toSwap

Name: toSwap Function: _swapcvxCRVToWant
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toSwap_1
toSwap_1
toSwap

Name: toSwap Function: _swapcvxCRVToWant
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_569(bool) = toSwap_1 == 0
[i]Type for TMP_569

Name: TMP_569 Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
path_1

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
path_1
path
Name: path, Num: 1

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_571 = new address[](3)
[i]Type for TMP_571

Name: TMP_571 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
path_1(address[]) := TMP_571(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reward_12
reward_12
reward

Name: reward Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
path_2

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
path_2
path
Name: path, Num: 2

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
path_2
path
Name: path, Num: 2

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_138(address) -> path_1[0]
INDEX
[i]Type for REF_138

Name: path Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
path_2(address[]) := ϕ(['path_1'])
Phi
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_138 (->path_2) := reward_12(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_138

Name: REF_138 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
WETH_2
WETH_2
WETH

Name: WETH Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 13
Norm: u
LF: WETH
Value: u
Fields: 
Finance Type: undef
path_3

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
path_3
path
Name: path, Num: 3

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
path_3
path
Name: path, Num: 3

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_139(address) -> path_2[1]
INDEX
[i]Type for REF_139

Name: path Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: WETH
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
path_3(address[]) := ϕ(['path_2'])
Phi
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_139 (->path_3) := WETH_2(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_139

Name: REF_139 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: WETH
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_19
CVX_19
CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
path_4

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
path_4
path
Name: path, Num: 4

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
path_4
path
Name: path, Num: 4

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
REF_140(address) -> path_3[2]
INDEX
[i]Type for REF_140

Name: path Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
path_4(address[]) := ϕ(['path_3'])
Phi
[i]Type for path

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_140 (->path_4) := CVX_19(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_140

Name: REF_140 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toSwap_1
toSwap_1
toSwap

Name: toSwap Function: _swapcvxCRVToWant
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
SUSHI_ROUTER_5
SUSHI_ROUTER_5
SUSHI_ROUTER

Name: SUSHI_ROUTER Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
path_4
path_4
path
Name: path, Num: 4

Name: path Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
CVX_20
CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
SUSHI_ROUTER_6
SUSHI_ROUTER

Name: SUSHI_ROUTER Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_22
CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_572 = CONVERT SUSHI_ROUTER_5 to IUniswapRouterV2
Converting SUSHI_ROUTER_5

Name: SUSHI_ROUTER Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
init
end
UniswapRouterV2
[i]Type for TMP_572

Name: TMP_572 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: UniswapRouterV2
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_573 = CONVERT this to address
Converting this
14
[i]Type for TMP_573

Name: TMP_573 Function: _swapcvxCRVToWant
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_574(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_572(IUniswapRouterV2), function:swapExactTokensForTokens, arguments:['toSwap_1', '0', 'path_4', 'TMP_573', 'now']  
High Call: swapExactTokensForTokens
Running querryfc
Written func info: UniswapRouterV2, swapExactTokensForTokens
Handling balance function!
6
Finding type for hlc_1(uint256[] ... )
[i]Type for TMP_574

Name: TMP_574 Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_20(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
SUSHI_ROUTER_6(address) := ϕ(['SUSHI_ROUTER_6', 'SUSHI_ROUTER_3', 'SUSHI_ROUTER_5'])
Phi
[i]Type for SUSHI_ROUTER

Name: SUSHI_ROUTER Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 6
Norm: u
LF: SUSHI_ROUTER
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_22(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_20
CVX_20
CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
toDeposit_1

Name: toDeposit Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
toDeposit_1
toDeposit
Name: toDeposit, Num: 1

Name: toDeposit Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
CVX_21
CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_23
CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_575 = CONVERT CVX_20 to IERC20Upgradeable
Converting CVX_20

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_575

Name: TMP_575 Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_576 = CONVERT this to address
Converting this
14
[i]Type for TMP_576

Name: TMP_576 Function: _swapcvxCRVToWant
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_577(uint256) = HIGH_LEVEL_CALL, dest:TMP_575(IERC20Upgradeable), function:balanceOf, arguments:['TMP_576']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_577

Name: TMP_577 Function: _swapcvxCRVToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_21(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_20', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_23(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_22'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
toDeposit_1(uint256) := TMP_577(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toDeposit

Name: toDeposit Function: _swapcvxCRVToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: _swapcvxCRVToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_578(bool) = toDeposit_1 > 0
init
end
init
end
A: 6 B: 0
x
y
A: 6 B: 0
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 0
[i]Type for TMP_578

Name: TMP_578 Function: _swapcvxCRVToWant
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_VAULT_23
CVX_VAULT_23
CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: _swapcvxCRVToWant
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
CVX_VAULT_24
CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:CVX_VAULT_23(ISettV3), function:deposit, arguments:['toDeposit_1']  
High Call: deposit
CVX_VAULT_24(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: _swapcvxCRVToWant
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
_before_1
_before_1
_before

Name: _before Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
want_34
want_34
want
Name: want, Num: 34

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
earned_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
earned_1
earned
Name: earned, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
want_35
want
Name: want, Num: 35

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
weee
weee
TMP_557 = CONVERT want_34 to IERC20Upgradeable
Converting want_34

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_557

Name: TMP_557 Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_558 = CONVERT this to address
Converting this
14
[i]Type for TMP_558

Name: TMP_558 Function: harvest
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_559(uint256) = HIGH_LEVEL_CALL, dest:TMP_557(IERC20Upgradeable), function:balanceOf, arguments:['TMP_558']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
10
[i]Type for TMP_559

Name: TMP_559 Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_35(address) := ϕ(['want_6', 'want_21', 'want_34', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_560(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['TMP_559', '_before_1'] 
SUB1
init
end
init
end
A: 6 B: 6
x
y
A: 6 B: 6
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 6
Finance type key: (0, 0)
SUB

Name: TMP_559 Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: _before Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for TMP_560

Name: TMP_560 Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
earned_1(uint256) := TMP_560(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for earned

Name: earned Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
earned_1
earned_1
earned

Name: earned Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
Rembmered parameters?
Propogating parameters and globals to SSA variables...
earned_1
earned_1
earned

Name: earned Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
RETURN earned_1
init
end


want_26(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
reward_3(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
LOCKER_19(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyAuthorizedActors()()
TMP_544 = CONVERT want_28 to IERC20Upgradeable
TMP_545 = CONVERT this to address
TMP_546(uint256) = HIGH_LEVEL_CALL, dest:TMP_544(IERC20Upgradeable), function:balanceOf, arguments:['TMP_545']  
want_29(address) := ϕ(['want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_28', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
reward_6(address) := ϕ(['reward_12', 'reward_10', 'reward_5', 'reward_1'])
LOCKER_22(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_21', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
_before_1(uint256) := TMP_546(uint256)
TMP_547 = CONVERT reward_6 to IERC20Upgradeable
TMP_548 = CONVERT this to address
TMP_549(uint256) = HIGH_LEVEL_CALL, dest:TMP_547(IERC20Upgradeable), function:balanceOf, arguments:['TMP_548']  
want_30(address) := ϕ(['want_6', 'want_21', 'want_29', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
reward_7(address) := ϕ(['reward_12', 'reward_10', 'reward_1', 'reward_6'])
LOCKER_23(ICvxLocker) := ϕ(['LOCKER_22', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
_beforeCVX_1(uint256) := TMP_549(uint256)
TMP_550 = CONVERT this to address
HIGH_LEVEL_CALL, dest:LOCKER_23(ICvxLocker), function:getReward, arguments:['TMP_550', 'False']  
want_31(address) := ϕ(['want_30', 'want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
reward_8(address) := ϕ(['reward_12', 'reward_10', 'reward_7', 'reward_1'])
LOCKER_24(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_23', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
TMP_552 = CONVERT reward_8 to IERC20Upgradeable
TMP_553 = CONVERT this to address
TMP_554(uint256) = HIGH_LEVEL_CALL, dest:TMP_552(IERC20Upgradeable), function:balanceOf, arguments:['TMP_553']  
want_32(address) := ϕ(['want_31', 'want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
reward_9(address) := ϕ(['reward_12', 'reward_10', 'reward_8', 'reward_1'])
TMP_555(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['TMP_554', '_beforeCVX_1'] 
earnedReward_1(uint256) := TMP_555(uint256)
TUPLE_4(uint256,uint256) = INTERNAL_CALL, MyStrategy._processRewardsFees(uint256,address)(earnedReward_1,reward_9)
governancePerformanceFee_1(uint256)= UNPACK TUPLE_4 index: 0 
strategistPerformanceFee_1(uint256)= UNPACK TUPLE_4 index: 1 
INTERNAL_CALL, MyStrategy._swapcvxCRVToWant()()
TMP_557 = CONVERT want_34 to IERC20Upgradeable
TMP_558 = CONVERT this to address
TMP_559(uint256) = HIGH_LEVEL_CALL, dest:TMP_557(IERC20Upgradeable), function:balanceOf, arguments:['TMP_558']  
want_35(address) := ϕ(['want_6', 'want_21', 'want_34', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
TMP_560(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['TMP_559', '_before_1'] 
earned_1(uint256) := TMP_560(uint256)
Emit Harvest(earned_1,block.number)
RETURN earned_1


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
want_26
want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
reward_3
reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_19
LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
want_26(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
reward_3(address) := ϕ(['reward_12', 'reward_10', 'reward_0', 'reward_1'])
Phi
[i]Type for reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_19(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyAuthorizedActors()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
want_28
want_28
want

Name: want Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
_before_1

Name: _before Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
_before_1
_before
Name: _before, Num: 1

Name: _before Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
want_29
want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
reward_6
reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_22
LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_544 = CONVERT want_28 to IERC20Upgradeable
Converting want_28

Name: want Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_544

Name: TMP_544 Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_545 = CONVERT this to address
Converting this
14
[i]Type for TMP_545

Name: TMP_545 Function: harvest
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_546(uint256) = HIGH_LEVEL_CALL, dest:TMP_544(IERC20Upgradeable), function:balanceOf, arguments:['TMP_545']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
10
[i]Type for TMP_546

Name: TMP_546 Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_29(address) := ϕ(['want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_28', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
reward_6(address) := ϕ(['reward_12', 'reward_10', 'reward_5', 'reward_1'])
Phi
[i]Type for reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_22(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_21', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
_before_1(uint256) := TMP_546(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for _before

Name: _before Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
reward_6
reward_6
reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
_beforeCVX_1

Name: _beforeCVX Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
_beforeCVX_1
_beforeCVX
Name: _beforeCVX, Num: 1

Name: _beforeCVX Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
want_30
want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
reward_7
reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_23
LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_547 = CONVERT reward_6 to IERC20Upgradeable
Converting reward_6

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_547

Name: TMP_547 Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_548 = CONVERT this to address
Converting this
14
[i]Type for TMP_548

Name: TMP_548 Function: harvest
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_549(uint256) = HIGH_LEVEL_CALL, dest:TMP_547(IERC20Upgradeable), function:balanceOf, arguments:['TMP_548']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
7
[i]Type for TMP_549

Name: TMP_549 Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_30(address) := ϕ(['want_6', 'want_21', 'want_29', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
reward_7(address) := ϕ(['reward_12', 'reward_10', 'reward_1', 'reward_6'])
Phi
[i]Type for reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_23(ICvxLocker) := ϕ(['LOCKER_22', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
_beforeCVX_1(uint256) := TMP_549(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for _beforeCVX

Name: _beforeCVX Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
LOCKER_23
LOCKER_23
LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
want_31
want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
reward_8
reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_24
LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
TMP_550 = CONVERT this to address
Converting this
14
[i]Type for TMP_550

Name: TMP_550 Function: harvest
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:LOCKER_23(ICvxLocker), function:getReward, arguments:['TMP_550', 'False']  
High Call: getReward
want_31(address) := ϕ(['want_30', 'want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
reward_8(address) := ϕ(['reward_12', 'reward_10', 'reward_7', 'reward_1'])
Phi
[i]Type for reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_24(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_23', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: harvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
_beforeCVX_1
_beforeCVX_1
_beforeCVX

Name: _beforeCVX Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
reward_8
reward_8
reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
earnedReward_1

Name: earnedReward Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
earnedReward_1
earnedReward
Name: earnedReward, Num: 1

Name: earnedReward Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
want_32
want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
reward_9
reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
weee
weee
weee
TMP_552 = CONVERT reward_8 to IERC20Upgradeable
Converting reward_8

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_552

Name: TMP_552 Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_553 = CONVERT this to address
Converting this
14
[i]Type for TMP_553

Name: TMP_553 Function: harvest
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_554(uint256) = HIGH_LEVEL_CALL, dest:TMP_552(IERC20Upgradeable), function:balanceOf, arguments:['TMP_553']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
7
[i]Type for TMP_554

Name: TMP_554 Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_32(address) := ϕ(['want_31', 'want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
reward_9(address) := ϕ(['reward_12', 'reward_10', 'reward_8', 'reward_1'])
Phi
[i]Type for reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_555(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['TMP_554', '_beforeCVX_1'] 
SUB1
init
end
init
end
A: 6 B: 6
x
y
A: 6 B: 6
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 6
Finance type key: (0, 0)
SUB

Name: TMP_554 Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: _beforeCVX Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for TMP_555

Name: TMP_555 Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
earnedReward_1(uint256) := TMP_555(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for earnedReward

Name: earnedReward Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
earnedReward_1
earnedReward_1
earnedReward

Name: earnedReward Function: harvest
Num: 7
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
reward_9
reward_9
reward

Name: reward Function: harvest
Num: -1
Den: -1
Address: 7
Norm: u
LF: reward
Value: u
Fields: 
Finance Type: undef
strategistPerformanceFee_1

Name: strategistPerformanceFee Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
strategistPerformanceFee_1
strategistPerformanceFee
Name: strategistPerformanceFee, Num: 1

Name: strategistPerformanceFee Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
governancePerformanceFee_1

Name: governancePerformanceFee Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
governancePerformanceFee_1
governancePerformanceFee
Name: governancePerformanceFee, Num: 1

Name: governancePerformanceFee Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
End popogation
weee
weee
weee
TUPLE_4(uint256,uint256) = INTERNAL_CALL, MyStrategy._processRewardsFees(uint256,address)(earnedReward_1,reward_9)
init
end
init
end
init
end
[i]Type for TUPLE_4

Name: TUPLE_4 Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
governancePerformanceFee_1(uint256)= UNPACK TUPLE_4 index: 0 
Finding type for governancePerformanceFee(uint256 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
(-1, -1, 'u', None, -1, 12)
[i]Type for governancePerformanceFee

Name: governancePerformanceFee Function: harvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
XXXX
strategistPerformanceFee_1(uint256)= UNPACK TUPLE_4 index: 1 
Finding type for strategistPerformanceFee(uint256 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
(-1, -1, 'u', None, -1, 12)
[i]Type for strategistPerformanceFee

Name: strategistPerformanceFee Function: harvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: simple fee ratio
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, MyStrategy._swapcvxCRVToWant()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
_before_1
_before_1
_before

Name: _before Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
want_34
want_34
want

Name: want Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
earned_1

Name: earned Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
earned_1
earned
Name: earned, Num: 1

Name: earned Function: harvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
want_35
want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
weee
weee
TMP_557 = CONVERT want_34 to IERC20Upgradeable
Converting want_34

Name: want Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_557

Name: TMP_557 Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_558 = CONVERT this to address
Converting this
14
[i]Type for TMP_558

Name: TMP_558 Function: harvest
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_559(uint256) = HIGH_LEVEL_CALL, dest:TMP_557(IERC20Upgradeable), function:balanceOf, arguments:['TMP_558']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
10
[i]Type for TMP_559

Name: TMP_559 Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_35(address) := ϕ(['want_6', 'want_21', 'want_34', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: harvest
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_560(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['TMP_559', '_before_1'] 
SUB1
init
end
init
end
A: 6 B: 6
x
y
A: 6 B: 6
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 6
Finance type key: (0, 0)
SUB

Name: TMP_559 Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: _before Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for TMP_560

Name: TMP_560 Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
earned_1(uint256) := TMP_560(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for earned

Name: earned Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
earned_1
earned_1
earned

Name: earned Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
Rembmered parameters?
Propogating parameters and globals to SSA variables...
earned_1
earned_1
earned

Name: earned Function: harvest
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
RETURN earned_1
init
end



tend


MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyAuthorizedActors()()
TMP_564(None) = SOLIDITY_CALL revert()()


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyAuthorizedActors()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
TMP_564(None) = SOLIDITY_CALL revert()()
[i]Type for TMP_564

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyAuthorizedActors()()
TMP_564(None) = SOLIDITY_CALL revert()()


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyAuthorizedActors()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
TMP_564(None) = SOLIDITY_CALL revert()()
[i]Type for TMP_564

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



_swapcvxCRVToWant



_processPerformanceFees



_processRewardsFees



reinvest


CVX_22(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
LOCKER_25(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
processLocksOnReinvest_2(bool) := ϕ(['processLocksOnReinvest_1', 'processLocksOnReinvest_0', 'processLocksOnReinvest_4'])
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
CONDITION processLocksOnReinvest_4
HIGH_LEVEL_CALL, dest:LOCKER_27(ICvxLocker), function:processExpiredLocks, arguments:['False']  
CVX_25(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_24', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_28(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_27', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
TMP_590 = CONVERT CVX_25 to IERC20Upgradeable
TMP_591 = CONVERT this to address
TMP_592(uint256) = HIGH_LEVEL_CALL, dest:TMP_590(IERC20Upgradeable), function:balanceOf, arguments:['TMP_591']  
CVX_26(address) := ϕ(['CVX_26', 'CVX_25', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_29(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_28', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
toDeposit_1(uint256) := TMP_592(uint256)
TMP_593 = CONVERT this to address
TMP_594(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_29(ICvxLocker), function:maximumBoostPayment, arguments:[]  
LOCKER_30(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_29', 'LOCKER_35', 'LOCKER_1'])
HIGH_LEVEL_CALL, dest:LOCKER_30(ICvxLocker), function:lock, arguments:['TMP_593', 'toDeposit_1', 'TMP_594']  
LOCKER_31(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1', 'LOCKER_30'])


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
CVX_22
CVX
Name: CVX, Num: 22

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_25
LOCKER
Name: LOCKER, Num: 25

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
processLocksOnReinvest_2
processLocksOnReinvest
Name: processLocksOnReinvest, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_22(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_25(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
processLocksOnReinvest_2(bool) := ϕ(['processLocksOnReinvest_1', 'processLocksOnReinvest_0', 'processLocksOnReinvest_4'])
Phi
[i]Type for processLocksOnReinvest

Name: processLocksOnReinvest Function: reinvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
processLocksOnReinvest_4
processLocksOnReinvest_4
processLocksOnReinvest
Name: processLocksOnReinvest, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
LOCKER_27
LOCKER_27
LOCKER
Name: LOCKER, Num: 27

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
CVX_25
CVX
Name: CVX, Num: 25

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_28
LOCKER
Name: LOCKER, Num: 28

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:LOCKER_27(ICvxLocker), function:processExpiredLocks, arguments:['False']  
High Call: processExpiredLocks
CVX_25(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_24', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_28(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_27', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_25
CVX_25
CVX

Name: CVX Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
toDeposit_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toDeposit_1
toDeposit
Name: toDeposit, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
CVX_26
CVX
Name: CVX, Num: 26

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_29
LOCKER
Name: LOCKER, Num: 29

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_590 = CONVERT CVX_25 to IERC20Upgradeable
Converting CVX_25

Name: CVX Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_590

Name: TMP_590 Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_591 = CONVERT this to address
Converting this
14
[i]Type for TMP_591

Name: TMP_591 Function: reinvest
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_592(uint256) = HIGH_LEVEL_CALL, dest:TMP_590(IERC20Upgradeable), function:balanceOf, arguments:['TMP_591']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_592

Name: TMP_592 Function: reinvest
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_26(address) := ϕ(['CVX_26', 'CVX_25', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_29(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_28', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
toDeposit_1(uint256) := TMP_592(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toDeposit

Name: toDeposit Function: reinvest
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: reinvest
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
LOCKER_29
LOCKER_29
LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
LOCKER_30
LOCKER_30
LOCKER
Name: LOCKER, Num: 30

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
LOCKER_30
LOCKER

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
weee
LOCKER_31
LOCKER
Name: LOCKER, Num: 31

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
TMP_593 = CONVERT this to address
Converting this
14
[i]Type for TMP_593

Name: TMP_593 Function: reinvest
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_594(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_29(ICvxLocker), function:maximumBoostPayment, arguments:[]  
High Call: maximumBoostPayment
Running querryfc
Written func info: CvxLocker, maximumBoostPayment
Handling balance function!
-993
Finding type for hlc_0(uint256 ... )
[i]Type for TMP_594

Name: TMP_594 Function: reinvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_30(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_29', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:LOCKER_30(ICvxLocker), function:lock, arguments:['TMP_593', 'toDeposit_1', 'TMP_594']  
High Call: lock
LOCKER_31(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1', 'LOCKER_30'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX


CVX_22(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
LOCKER_25(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
processLocksOnReinvest_2(bool) := ϕ(['processLocksOnReinvest_1', 'processLocksOnReinvest_0', 'processLocksOnReinvest_4'])
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
CONDITION processLocksOnReinvest_4
HIGH_LEVEL_CALL, dest:LOCKER_27(ICvxLocker), function:processExpiredLocks, arguments:['False']  
CVX_25(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_24', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_28(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_27', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
TMP_590 = CONVERT CVX_25 to IERC20Upgradeable
TMP_591 = CONVERT this to address
TMP_592(uint256) = HIGH_LEVEL_CALL, dest:TMP_590(IERC20Upgradeable), function:balanceOf, arguments:['TMP_591']  
CVX_26(address) := ϕ(['CVX_26', 'CVX_25', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_29(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_28', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
toDeposit_1(uint256) := TMP_592(uint256)
TMP_593 = CONVERT this to address
TMP_594(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_29(ICvxLocker), function:maximumBoostPayment, arguments:[]  
LOCKER_30(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_29', 'LOCKER_35', 'LOCKER_1'])
HIGH_LEVEL_CALL, dest:LOCKER_30(ICvxLocker), function:lock, arguments:['TMP_593', 'toDeposit_1', 'TMP_594']  
LOCKER_31(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1', 'LOCKER_30'])


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
CVX_22
CVX

Name: CVX Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_25
LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
processLocksOnReinvest_2
processLocksOnReinvest

Name: processLocksOnReinvest Function: reinvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_22(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_25(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
processLocksOnReinvest_2(bool) := ϕ(['processLocksOnReinvest_1', 'processLocksOnReinvest_0', 'processLocksOnReinvest_4'])
Phi
[i]Type for processLocksOnReinvest

Name: processLocksOnReinvest Function: reinvest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
processLocksOnReinvest_4
processLocksOnReinvest_4
processLocksOnReinvest

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?
Propogating parameters and globals to SSA variables...
LOCKER_27
LOCKER_27
LOCKER

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
CVX_25
CVX

Name: CVX Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_28
LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:LOCKER_27(ICvxLocker), function:processExpiredLocks, arguments:['False']  
High Call: processExpiredLocks
CVX_25(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_24', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_28(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_27', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_25
CVX_25
CVX

Name: CVX Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
toDeposit_1

Name: toDeposit Function: reinvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
toDeposit_1
toDeposit
Name: toDeposit, Num: 1

Name: toDeposit Function: reinvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
CVX_26
CVX

Name: CVX Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_29
LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_590 = CONVERT CVX_25 to IERC20Upgradeable
Converting CVX_25

Name: CVX Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_590

Name: TMP_590 Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_591 = CONVERT this to address
Converting this
14
[i]Type for TMP_591

Name: TMP_591 Function: reinvest
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_592(uint256) = HIGH_LEVEL_CALL, dest:TMP_590(IERC20Upgradeable), function:balanceOf, arguments:['TMP_591']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_592

Name: TMP_592 Function: reinvest
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_26(address) := ϕ(['CVX_26', 'CVX_25', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: reinvest
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_29(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_28', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
toDeposit_1(uint256) := TMP_592(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toDeposit

Name: toDeposit Function: reinvest
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: reinvest
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
LOCKER_29
LOCKER_29
LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
LOCKER_30
LOCKER_30
LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
LOCKER_30
LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
weee
LOCKER_31
LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
TMP_593 = CONVERT this to address
Converting this
14
[i]Type for TMP_593

Name: TMP_593 Function: reinvest
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_594(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_29(ICvxLocker), function:maximumBoostPayment, arguments:[]  
High Call: maximumBoostPayment
Running querryfc
Written func info: CvxLocker, maximumBoostPayment
Handling balance function!
-993
Finding type for hlc_1(uint256 ... )
[i]Type for TMP_594

Name: TMP_594 Function: reinvest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_30(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_29', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:LOCKER_30(ICvxLocker), function:lock, arguments:['TMP_593', 'toDeposit_1', 'TMP_594']  
High Call: lock
LOCKER_31(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1', 'LOCKER_30'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: reinvest
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX



manualProcessExpiredLocks


LOCKER_32(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
HIGH_LEVEL_CALL, dest:LOCKER_34(ICvxLocker), function:processExpiredLocks, arguments:['False']  
LOCKER_35(ICvxLocker) := ϕ(['LOCKER_34', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
LOCKER_32
LOCKER
Name: LOCKER, Num: 32

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_32(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualProcessExpiredLocks
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
LOCKER_34
LOCKER_34
LOCKER
Name: LOCKER, Num: 34

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
LOCKER_35
LOCKER
Name: LOCKER, Num: 35

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:LOCKER_34(ICvxLocker), function:processExpiredLocks, arguments:['False']  
High Call: processExpiredLocks
LOCKER_35(ICvxLocker) := ϕ(['LOCKER_34', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualProcessExpiredLocks
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX


LOCKER_32(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
HIGH_LEVEL_CALL, dest:LOCKER_34(ICvxLocker), function:processExpiredLocks, arguments:['False']  
LOCKER_35(ICvxLocker) := ϕ(['LOCKER_34', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
LOCKER_32
LOCKER

Name: LOCKER Function: manualProcessExpiredLocks
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_32(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualProcessExpiredLocks
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
LOCKER_34
LOCKER_34
LOCKER

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
LOCKER_35
LOCKER

Name: LOCKER Function: manualProcessExpiredLocks
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:LOCKER_34(ICvxLocker), function:processExpiredLocks, arguments:['False']  
High Call: processExpiredLocks
LOCKER_35(ICvxLocker) := ϕ(['LOCKER_34', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualProcessExpiredLocks
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX



manualDepositCVXIntoVault


CVX_27(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
CVX_VAULT_25(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
TMP_601 = CONVERT CVX_29 to IERC20Upgradeable
TMP_602 = CONVERT this to address
TMP_603(uint256) = HIGH_LEVEL_CALL, dest:TMP_601(IERC20Upgradeable), function:balanceOf, arguments:['TMP_602']  
CVX_30(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_29', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
CVX_VAULT_28(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_27', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
toDeposit_1(uint256) := TMP_603(uint256)
TMP_604(bool) = toDeposit_1 > 0
CONDITION TMP_604
HIGH_LEVEL_CALL, dest:CVX_VAULT_28(ISettV3), function:deposit, arguments:['toDeposit_1']  
CVX_VAULT_29(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
CVX_27
CVX
Name: CVX, Num: 27

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_25
CVX_VAULT
Name: CVX_VAULT, Num: 25

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_27(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_25(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_29
CVX_29
CVX
Name: CVX, Num: 29

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
toDeposit_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toDeposit_1
toDeposit
Name: toDeposit, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
CVX_30
CVX
Name: CVX, Num: 30

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_28
CVX_VAULT
Name: CVX_VAULT, Num: 28

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_601 = CONVERT CVX_29 to IERC20Upgradeable
Converting CVX_29

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_601

Name: TMP_601 Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_602 = CONVERT this to address
Converting this
14
[i]Type for TMP_602

Name: TMP_602 Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_603(uint256) = HIGH_LEVEL_CALL, dest:TMP_601(IERC20Upgradeable), function:balanceOf, arguments:['TMP_602']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_603

Name: TMP_603 Function: manualDepositCVXIntoVault
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_30(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_29', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_28(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_27', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
toDeposit_1(uint256) := TMP_603(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toDeposit

Name: toDeposit Function: manualDepositCVXIntoVault
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: manualDepositCVXIntoVault
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_604(bool) = toDeposit_1 > 0
init
end
init
end
A: 6 B: 0
x
y
A: 6 B: 0
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 0
[i]Type for TMP_604

Name: TMP_604 Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_VAULT_28
CVX_VAULT_28
CVX_VAULT

Name: CVX_VAULT Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: manualDepositCVXIntoVault
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
CVX_VAULT_29
CVX_VAULT
Name: CVX_VAULT, Num: 29

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:CVX_VAULT_28(ISettV3), function:deposit, arguments:['toDeposit_1']  
High Call: deposit
CVX_VAULT_29(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation


CVX_27(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
CVX_VAULT_25(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
TMP_601 = CONVERT CVX_29 to IERC20Upgradeable
TMP_602 = CONVERT this to address
TMP_603(uint256) = HIGH_LEVEL_CALL, dest:TMP_601(IERC20Upgradeable), function:balanceOf, arguments:['TMP_602']  
CVX_30(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_29', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
CVX_VAULT_28(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_27', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
toDeposit_1(uint256) := TMP_603(uint256)
TMP_604(bool) = toDeposit_1 > 0
CONDITION TMP_604
HIGH_LEVEL_CALL, dest:CVX_VAULT_28(ISettV3), function:deposit, arguments:['toDeposit_1']  
CVX_VAULT_29(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
CVX_27
CVX

Name: CVX Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_25
CVX_VAULT

Name: CVX_VAULT Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_27(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_25(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_29
CVX_29
CVX

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
toDeposit_1

Name: toDeposit Function: manualDepositCVXIntoVault
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
toDeposit_1
toDeposit
Name: toDeposit, Num: 1

Name: toDeposit Function: manualDepositCVXIntoVault
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
CVX_30
CVX

Name: CVX Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_28
CVX_VAULT

Name: CVX_VAULT Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_601 = CONVERT CVX_29 to IERC20Upgradeable
Converting CVX_29

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_601

Name: TMP_601 Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_602 = CONVERT this to address
Converting this
14
[i]Type for TMP_602

Name: TMP_602 Function: manualDepositCVXIntoVault
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_603(uint256) = HIGH_LEVEL_CALL, dest:TMP_601(IERC20Upgradeable), function:balanceOf, arguments:['TMP_602']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_603

Name: TMP_603 Function: manualDepositCVXIntoVault
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_30(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_29', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_28(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_27', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
toDeposit_1(uint256) := TMP_603(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toDeposit

Name: toDeposit Function: manualDepositCVXIntoVault
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: manualDepositCVXIntoVault
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_604(bool) = toDeposit_1 > 0
init
end
init
end
A: 6 B: 0
x
y
A: 6 B: 0
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 0
[i]Type for TMP_604

Name: TMP_604 Function: manualDepositCVXIntoVault
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
CVX_VAULT_28
CVX_VAULT_28
CVX_VAULT

Name: CVX_VAULT Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: manualDepositCVXIntoVault
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
CVX_VAULT_29
CVX_VAULT

Name: CVX_VAULT Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:CVX_VAULT_28(ISettV3), function:deposit, arguments:['toDeposit_1']  
High Call: deposit
CVX_VAULT_29(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualDepositCVXIntoVault
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation



manualSendbCVXToVault


want_40(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
TMP_608 = CONVERT want_42 to IERC20Upgradeable
TMP_609 = CONVERT this to address
TMP_610(uint256) = HIGH_LEVEL_CALL, dest:TMP_608(IERC20Upgradeable), function:balanceOf, arguments:['TMP_609']  
want_43(address) := ϕ(['want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_42', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
bCvxAmount_1(uint256) := TMP_610(uint256)
INTERNAL_CALL, BaseStrategy._transferToVault(uint256)(bCvxAmount_1)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
want_40
want
Name: want, Num: 40

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
want_40(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: manualSendbCVXToVault
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
want_42
want_42
want
Name: want, Num: 42

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
bCvxAmount_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCvxAmount_1
bCvxAmount
Name: bCvxAmount, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
want_43
want
Name: want, Num: 43

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_608 = CONVERT want_42 to IERC20Upgradeable
Converting want_42

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_608

Name: TMP_608 Function: manualSendbCVXToVault
Num: -1
Den: -1
Address: 10
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_609 = CONVERT this to address
Converting this
14
[i]Type for TMP_609

Name: TMP_609 Function: manualSendbCVXToVault
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_610(uint256) = HIGH_LEVEL_CALL, dest:TMP_608(IERC20Upgradeable), function:balanceOf, arguments:['TMP_609']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
10
[i]Type for TMP_610

Name: TMP_610 Function: manualSendbCVXToVault
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_43(address) := ϕ(['want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_42', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: manualSendbCVXToVault
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
bCvxAmount_1(uint256) := TMP_610(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for bCvxAmount

Name: bCvxAmount Function: manualSendbCVXToVault
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
bCvxAmount_1
bCvxAmount_1
bCvxAmount

Name: bCvxAmount Function: manualSendbCVXToVault
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
INTERNAL_CALL, BaseStrategy._transferToVault(uint256)(bCvxAmount_1)


want_40(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
TMP_608 = CONVERT want_42 to IERC20Upgradeable
TMP_609 = CONVERT this to address
TMP_610(uint256) = HIGH_LEVEL_CALL, dest:TMP_608(IERC20Upgradeable), function:balanceOf, arguments:['TMP_609']  
want_43(address) := ϕ(['want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_42', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
bCvxAmount_1(uint256) := TMP_610(uint256)
INTERNAL_CALL, BaseStrategy._transferToVault(uint256)(bCvxAmount_1)


Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
want_40
want

Name: want Function: manualSendbCVXToVault
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
want_40(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: manualSendbCVXToVault
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?
Propogating parameters and globals to SSA variables...
want_42
want_42
want

Name: want Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
bCvxAmount_1

Name: bCvxAmount Function: manualSendbCVXToVault
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
bCvxAmount_1
bCvxAmount
Name: bCvxAmount, Num: 1

Name: bCvxAmount Function: manualSendbCVXToVault
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
want_43
want

Name: want Function: manualSendbCVXToVault
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_608 = CONVERT want_42 to IERC20Upgradeable
Converting want_42

Name: want Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_608

Name: TMP_608 Function: manualSendbCVXToVault
Num: -1
Den: -1
Address: 10
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_609 = CONVERT this to address
Converting this
14
[i]Type for TMP_609

Name: TMP_609 Function: manualSendbCVXToVault
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_610(uint256) = HIGH_LEVEL_CALL, dest:TMP_608(IERC20Upgradeable), function:balanceOf, arguments:['TMP_609']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
10
[i]Type for TMP_610

Name: TMP_610 Function: manualSendbCVXToVault
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_43(address) := ϕ(['want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_42', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: manualSendbCVXToVault
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
bCvxAmount_1(uint256) := TMP_610(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for bCvxAmount

Name: bCvxAmount Function: manualSendbCVXToVault
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?
Propogating parameters and globals to SSA variables...
bCvxAmount_1
bCvxAmount_1
bCvxAmount

Name: bCvxAmount Function: manualSendbCVXToVault
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
INTERNAL_CALL, BaseStrategy._transferToVault(uint256)(bCvxAmount_1)



manualRebalance
Finding type for toLock(uint256 ... )
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
(-1, -1, 'u', None, -1, -1)
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


want_44(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
MAX_BPS_4(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_0', 'MAX_BPS_12', 'MAX_BPS_2'])
CVX_31(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
LOCKER_36(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_30(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
harvestOnRebalance_2(bool) := ϕ(['harvestOnRebalance_5', 'harvestOnRebalance_0', 'harvestOnRebalance_1', 'harvestOnRebalance_4'])
processLocksOnRebalance_2(bool) := ϕ(['processLocksOnRebalance_1', 'processLocksOnRebalance_0', 'processLocksOnRebalance_4'])
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
TMP_614(bool) = toLock_1 <= MAX_BPS_6
TMP_615(None) = SOLIDITY_CALL require(bool,string)(TMP_614,Max is 100%)
CONDITION processLocksOnRebalance_4
CONDITION harvestOnRebalance_5
HIGH_LEVEL_CALL, dest:LOCKER_38(ICvxLocker), function:processExpiredLocks, arguments:['False']  
want_47(address) := ϕ(['want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_46', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
MAX_BPS_7(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_6', 'MAX_BPS_12', 'MAX_BPS_2'])
CVX_34(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_33', 'CVX_45', 'CVX_21'])
LOCKER_39(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_38', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_33(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_32', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
harvestOnRebalance_5(bool) := ϕ(['harvestOnRebalance_5', 'harvestOnRebalance_1', 'harvestOnRebalance_4'])
TMP_617(uint256) = INTERNAL_CALL, MyStrategy.harvest()()
want_48(address) := ϕ(['want_35'])
LOCKER_40(ICvxLocker) := ϕ(['LOCKER_24'])
TMP_618 = CONVERT want_48 to IERC20Upgradeable
TMP_619 = CONVERT this to address
TMP_620(uint256) = HIGH_LEVEL_CALL, dest:TMP_618(IERC20Upgradeable), function:balanceOf, arguments:['TMP_619']  
want_49(address) := ϕ(['want_6', 'want_21', 'want_48', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
MAX_BPS_9(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_8', 'MAX_BPS_12', 'MAX_BPS_2'])
CVX_36(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_35', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_41(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1', 'LOCKER_40'])
CVX_VAULT_35(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_34', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
balanceOfWant_1(uint256) := TMP_620(uint256)
TMP_621 = CONVERT CVX_36 to IERC20Upgradeable
TMP_622 = CONVERT this to address
TMP_623(uint256) = HIGH_LEVEL_CALL, dest:TMP_621(IERC20Upgradeable), function:balanceOf, arguments:['TMP_622']  
MAX_BPS_10(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_9', 'MAX_BPS_12', 'MAX_BPS_2'])
CVX_37(address) := ϕ(['CVX_26', 'CVX_36', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_42(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_41', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_36(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_35', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
balanceOfCVX_1(uint256) := TMP_623(uint256)
TMP_624 = CONVERT this to address
TMP_625(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_42(ICvxLocker), function:balanceOf, arguments:['TMP_624']  
MAX_BPS_11(uint256) := ϕ(['MAX_BPS_10', 'MAX_BPS_3', 'MAX_BPS_12', 'MAX_BPS_2'])
CVX_38(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_37', 'CVX_21'])
LOCKER_43(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_42', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_37(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_36', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
balanceInLock_1(uint256) := TMP_625(uint256)
TMP_626(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['balanceOfCVX_1', 'balanceInLock_1'] 
TMP_627(uint256) = INTERNAL_CALL, MyStrategy.wantToCVX(uint256)(balanceOfWant_1)
CVX_VAULT_38(ISettV3) := ϕ(['CVX_VAULT_7'])
TMP_628(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['TMP_626', 'TMP_627'] 
totalCVXBalance_1(uint256) := TMP_628(uint256)
TMP_629(uint256) = 10 ** 18
TMP_630(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balanceInLock_1', 'TMP_629'] 
TMP_631(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_630', 'totalCVXBalance_1'] 
currentLockRatio_1(uint256) := TMP_631(uint256)
TMP_632(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['totalCVXBalance_1', 'toLock_1'] 
TMP_633(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_632', 'MAX_BPS_12'] 
newLockRatio_1(uint256) := TMP_633(uint256)
TMP_634(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['MAX_BPS_12', 'toLock_1'] 
TMP_635(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['totalCVXBalance_1', 'TMP_634'] 
TMP_636(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_635', 'MAX_BPS_12'] 
toWantRatio_1(uint256) := TMP_636(uint256)
TMP_637(bool) = newLockRatio_1 <= currentLockRatio_1
CONDITION TMP_637
TMP_638 = CONVERT CVX_39 to IERC20Upgradeable
TMP_639 = CONVERT this to address
TMP_640(uint256) = HIGH_LEVEL_CALL, dest:TMP_638(IERC20Upgradeable), function:balanceOf, arguments:['TMP_639']  
CVX_46(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
CVX_VAULT_46(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
toDeposit_1(uint256) := TMP_640(uint256)
TMP_643(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['newLockRatio_1', 'currentLockRatio_1'] 
cvxToLock_1(uint256) := TMP_643(uint256)
TMP_644 = CONVERT CVX_39 to IERC20Upgradeable
TMP_645 = CONVERT this to address
TMP_646(uint256) = HIGH_LEVEL_CALL, dest:TMP_644(IERC20Upgradeable), function:balanceOf, arguments:['TMP_645']  
CVX_40(address) := ϕ(['CVX_39', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_45(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_39(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_38', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
maxCVX_1(uint256) := TMP_646(uint256)
TMP_641(bool) = toDeposit_1 > 0
CONDITION TMP_641
TMP_647(bool) = cvxToLock_1 > maxCVX_1
CONDITION TMP_647
HIGH_LEVEL_CALL, dest:CVX_VAULT_46(ISettV3), function:deposit, arguments:['toDeposit_1']  
CVX_VAULT_47(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
TMP_651 = CONVERT this to address
TMP_652(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_45(ICvxLocker), function:maximumBoostPayment, arguments:[]  
CVX_43(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_42', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_48(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_42(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_41'])
HIGH_LEVEL_CALL, dest:LOCKER_48(ICvxLocker), function:lock, arguments:['TMP_651', 'cvxToLock_1', 'TMP_652']  
CVX_44(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_43', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_49(ICvxLocker) := ϕ(['LOCKER_48', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_43(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_42', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
TMP_648 = CONVERT this to address
TMP_649(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_45(ICvxLocker), function:maximumBoostPayment, arguments:[]  
CVX_41(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_40', 'CVX_21'])
LOCKER_46(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_45', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_40(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_39', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
HIGH_LEVEL_CALL, dest:LOCKER_46(ICvxLocker), function:lock, arguments:['TMP_648', 'maxCVX_1', 'TMP_649']  
CVX_42(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_41', 'CVX_45', 'CVX_21'])
LOCKER_47(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_46', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_41(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_40', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
TMP_654 = CONVERT CVX_44 to IERC20Upgradeable
TMP_655 = CONVERT this to address
TMP_656(uint256) = HIGH_LEVEL_CALL, dest:TMP_654(IERC20Upgradeable), function:balanceOf, arguments:['TMP_655']  
CVX_45(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_44', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
CVX_VAULT_44(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_43', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
cvxLeft_1(uint256) := TMP_656(uint256)
TMP_657(bool) = cvxLeft_1 > 0
CONDITION TMP_657
HIGH_LEVEL_CALL, dest:CVX_VAULT_44(ISettV3), function:deposit, arguments:['cvxLeft_1']  
CVX_VAULT_45(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])


Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
want_44
want
Name: want, Num: 44

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
MAX_BPS_4
MAX_BPS
Name: MAX_BPS, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_31
CVX
Name: CVX, Num: 31

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_36
LOCKER
Name: LOCKER, Num: 36

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_30
CVX_VAULT
Name: CVX_VAULT, Num: 30

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
harvestOnRebalance_2
harvestOnRebalance
Name: harvestOnRebalance, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
processLocksOnRebalance_2
processLocksOnRebalance
Name: processLocksOnRebalance, Num: 2

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
want_44(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_BPS_4(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_0', 'MAX_BPS_12', 'MAX_BPS_2'])
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_31(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_36(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_30(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
harvestOnRebalance_2(bool) := ϕ(['harvestOnRebalance_5', 'harvestOnRebalance_0', 'harvestOnRebalance_1', 'harvestOnRebalance_4'])
Phi
[i]Type for harvestOnRebalance

Name: harvestOnRebalance Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
processLocksOnRebalance_2(bool) := ϕ(['processLocksOnRebalance_1', 'processLocksOnRebalance_0', 'processLocksOnRebalance_4'])
Phi
[i]Type for processLocksOnRebalance

Name: processLocksOnRebalance Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
MAX_BPS_6
MAX_BPS_6
MAX_BPS
Name: MAX_BPS, Num: 6

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toLock_1
toLock_1
toLock
p.norm: 0
Name: toLock, Num: 1

Name: toLock_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_614(bool) = toLock_1 <= MAX_BPS_6
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
[i]Type for TMP_614

Name: TMP_614 Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_615(None) = SOLIDITY_CALL require(bool,string)(TMP_614,Max is 100%)
[i]Type for TMP_615

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
processLocksOnRebalance_4
processLocksOnRebalance_4
processLocksOnRebalance
Name: processLocksOnRebalance, Num: 4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
harvestOnRebalance_5
harvestOnRebalance_5
harvestOnRebalance
Name: harvestOnRebalance, Num: 5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
LOCKER_38
LOCKER_38
LOCKER
Name: LOCKER, Num: 38

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
want_47
want
Name: want, Num: 47

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
MAX_BPS_7
MAX_BPS
Name: MAX_BPS, Num: 7

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_34
CVX
Name: CVX, Num: 34

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_39
LOCKER
Name: LOCKER, Num: 39

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_33
CVX_VAULT
Name: CVX_VAULT, Num: 33

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
harvestOnRebalance_5
harvestOnRebalance

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:LOCKER_38(ICvxLocker), function:processExpiredLocks, arguments:['False']  
High Call: processExpiredLocks
want_47(address) := ϕ(['want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_46', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_BPS_7(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_6', 'MAX_BPS_12', 'MAX_BPS_2'])
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_34(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_33', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_39(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_38', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_33(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_32', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
harvestOnRebalance_5(bool) := ϕ(['harvestOnRebalance_5', 'harvestOnRebalance_1', 'harvestOnRebalance_4'])
Phi
[i]Type for harvestOnRebalance

Name: harvestOnRebalance Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
want_48
want
Name: want, Num: 48

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_40
LOCKER
Name: LOCKER, Num: 40

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
TMP_617(uint256) = INTERNAL_CALL, MyStrategy.harvest()()
init
end
[i]Type for TMP_617

Name: TMP_617 Function: manualRebalance
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_48(address) := ϕ(['want_35'])
Phi
[i]Type for want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_40(ICvxLocker) := ϕ(['LOCKER_24'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
want_48
want_48
want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
balanceOfWant_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOfWant_1
balanceOfWant
Name: balanceOfWant, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
want_49
want
Name: want, Num: 49

Name: None Function: None
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
MAX_BPS_9
MAX_BPS
Name: MAX_BPS, Num: 9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_36
CVX
Name: CVX, Num: 36

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_41
LOCKER
Name: LOCKER, Num: 41

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_35
CVX_VAULT
Name: CVX_VAULT, Num: 35

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_618 = CONVERT want_48 to IERC20Upgradeable
Converting want_48

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_618

Name: TMP_618 Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_619 = CONVERT this to address
Converting this
14
[i]Type for TMP_619

Name: TMP_619 Function: manualRebalance
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_620(uint256) = HIGH_LEVEL_CALL, dest:TMP_618(IERC20Upgradeable), function:balanceOf, arguments:['TMP_619']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
10
[i]Type for TMP_620

Name: TMP_620 Function: manualRebalance
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_49(address) := ϕ(['want_6', 'want_21', 'want_48', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_BPS_9(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_8', 'MAX_BPS_12', 'MAX_BPS_2'])
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_36(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_35', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_41(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1', 'LOCKER_40'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_35(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_34', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOfWant_1(uint256) := TMP_620(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for balanceOfWant

Name: balanceOfWant Function: manualRebalance
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_36
CVX_36
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
balanceOfCVX_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceOfCVX_1
balanceOfCVX
Name: balanceOfCVX, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
MAX_BPS_10
MAX_BPS
Name: MAX_BPS, Num: 10

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_37
CVX
Name: CVX, Num: 37

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_42
LOCKER
Name: LOCKER, Num: 42

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_36
CVX_VAULT
Name: CVX_VAULT, Num: 36

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_621 = CONVERT CVX_36 to IERC20Upgradeable
Converting CVX_36

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_621

Name: TMP_621 Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_622 = CONVERT this to address
Converting this
14
[i]Type for TMP_622

Name: TMP_622 Function: manualRebalance
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_623(uint256) = HIGH_LEVEL_CALL, dest:TMP_621(IERC20Upgradeable), function:balanceOf, arguments:['TMP_622']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_623

Name: TMP_623 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
MAX_BPS_10(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_9', 'MAX_BPS_12', 'MAX_BPS_2'])
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_37(address) := ϕ(['CVX_26', 'CVX_36', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_42(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_41', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_36(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_35', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOfCVX_1(uint256) := TMP_623(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for balanceOfCVX

Name: balanceOfCVX Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
LOCKER_42
LOCKER_42
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
balanceInLock_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceInLock_1
balanceInLock
Name: balanceInLock, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
MAX_BPS_11
MAX_BPS
Name: MAX_BPS, Num: 11

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_38
CVX
Name: CVX, Num: 38

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_43
LOCKER
Name: LOCKER, Num: 43

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_37
CVX_VAULT
Name: CVX_VAULT, Num: 37

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_624 = CONVERT this to address
Converting this
14
[i]Type for TMP_624

Name: TMP_624 Function: manualRebalance
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_625(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_42(ICvxLocker), function:balanceOf, arguments:['TMP_624']  
High Call: balanceOf
Running querryfc
Written func info: CvxLocker, balanceOf
Retvar: ('c', ['global:CVX'], ['-1'], 6, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [-1], 6, "'u'", None, -1)
[i]Type for TMP_625

Name: TMP_625 Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
MAX_BPS_11(uint256) := ϕ(['MAX_BPS_10', 'MAX_BPS_3', 'MAX_BPS_12', 'MAX_BPS_2'])
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_38(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_37', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_43(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_42', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_37(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_36', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceInLock_1(uint256) := TMP_625(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balanceInLock

Name: balanceInLock Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
balanceOfCVX_1
balanceOfCVX_1
balanceOfCVX

Name: balanceOfCVX Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
balanceInLock_1
balanceInLock_1
balanceInLock

Name: balanceInLock Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balanceOfWant_1
balanceOfWant_1
balanceOfWant

Name: balanceOfWant Function: manualRebalance
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
totalCVXBalance_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalCVXBalance_1
totalCVXBalance
Name: totalCVXBalance, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
CVX_VAULT_38
CVX_VAULT
Name: CVX_VAULT, Num: 38

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
weee
TMP_626(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['balanceOfCVX_1', 'balanceInLock_1'] 

Name: balanceOfCVX Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: balanceInLock Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
init
end
init
end
A: 6 B: 6
x
y
A: 6 B: 6
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 6
init
end
lval:u rval:'u'
[i]Type for TMP_626

Name: TMP_626 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_627(uint256) = INTERNAL_CALL, MyStrategy.wantToCVX(uint256)(balanceOfWant_1)
init
end
[[10], [-1], 6, None, [], 0, 'u', 'u']

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
want_1
want
p.norm: 0

Name: want_1 Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
weee
CVX_VAULT_6
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
want_1(uint256) := ϕ(['balanceOfWant_1'])
Phi
[i]Type for want

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_6(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
CVX_VAULT_6
CVX_VAULT_6
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_7
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_484(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_6(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_484

Name: TMP_484 Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_7(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_6', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_484(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
want_1
want_1
want

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['want_1', 'bCVXToCVX_1'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_485

Name: TMP_485 Function: wantToCVX
Num: 4
Den: -1
Address: None
Norm: 18
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_486(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_486

Name: TMP_486 Function: wantToCVX
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_485', 'TMP_486'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:1000000000000000000
[i]Type for TMP_487

Name: TMP_487 Function: wantToCVX
Num: 4
Den: -1
Address: None
Norm: 0
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_487
init
end

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
want_1
want
p.norm: 0

Name: want_1 Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
weee
CVX_VAULT_6
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
want_1(uint256) := ϕ(['balanceOfWant_1'])
Phi
[i]Type for want

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_6(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
CVX_VAULT_6
CVX_VAULT_6
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_7
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_484(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_6(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_484

Name: TMP_484 Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_7(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_6', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_484(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
want_1
want_1
want

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['want_1', 'bCVXToCVX_1'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_485

Name: TMP_485 Function: wantToCVX
Num: 4
Den: -1
Address: None
Norm: 18
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_486(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_486

Name: TMP_486 Function: wantToCVX
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_485', 'TMP_486'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:1000000000000000000
[i]Type for TMP_487

Name: TMP_487 Function: wantToCVX
Num: 4
Den: -1
Address: None
Norm: 0
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_487
init
end
[i]Type for TMP_627

Name: TMP_627 Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 0
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_38(ISettV3) := ϕ(['CVX_VAULT_7'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_628(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['TMP_626', 'TMP_627'] 

Name: TMP_626 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_627 Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 0
LF: want
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
A: 6 B: 0
x
y
A: 6 B: 0
<class 'int'>
<class 'int'>
z
Error with TMP_628 in function manualRebalance
Error with: TMP_628 in function manualRebalance
lnorm: 6 rnorm: 0
Finance type key: (0, 0)
init
end
lval:u rval:u
[i]Type for TMP_628

Name: TMP_628 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
totalCVXBalance_1(uint256) := TMP_628(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for totalCVXBalance

Name: totalCVXBalance Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
totalCVXBalance_1
totalCVXBalance_1
totalCVXBalance

Name: totalCVXBalance Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
balanceInLock_1
balanceInLock_1
balanceInLock

Name: balanceInLock Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
currentLockRatio_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
currentLockRatio_1
currentLockRatio
Name: currentLockRatio, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_629(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_629

Name: TMP_629 Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_630(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balanceInLock_1', 'TMP_629'] 
init
end
init
end
A: 6 B: 18
x
y
A: 6 B: 18
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 18
init
end
lval:'u' rval:1000000000000000000
[i]Type for TMP_630

Name: TMP_630 Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_631(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_630', 'totalCVXBalance_1'] 
init
end
init
end
A: 24 B: u
x
lnorm: 24 rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_631

Name: TMP_631 Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
currentLockRatio_1(uint256) := TMP_631(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for currentLockRatio

Name: currentLockRatio Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
totalCVXBalance_1
totalCVXBalance_1
totalCVXBalance

Name: totalCVXBalance Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MAX_BPS_12
MAX_BPS_12
MAX_BPS
Name: MAX_BPS, Num: 12

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toLock_1
toLock_1
toLock
p.norm: 0
Name: toLock, Num: 1

Name: toLock_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newLockRatio_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newLockRatio_1
newLockRatio
Name: newLockRatio, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
TMP_632(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['totalCVXBalance_1', 'toLock_1'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_632

Name: TMP_632 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_633(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_632', 'MAX_BPS_12'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_633

Name: TMP_633 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
newLockRatio_1(uint256) := TMP_633(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for newLockRatio

Name: newLockRatio Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
totalCVXBalance_1
totalCVXBalance_1
totalCVXBalance

Name: totalCVXBalance Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MAX_BPS_12
MAX_BPS_12
MAX_BPS

Name: MAX_BPS Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toLock_1
toLock_1
toLock
p.norm: 0
Name: toLock, Num: 1

Name: toLock_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toWantRatio_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toWantRatio_1
toWantRatio
Name: toWantRatio, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
weee
TMP_634(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['MAX_BPS_12', 'toLock_1'] 
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: MAX_BPS Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: toLock Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_634

Name: TMP_634 Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_635(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['totalCVXBalance_1', 'TMP_634'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_635

Name: TMP_635 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_636(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_635', 'MAX_BPS_12'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_636

Name: TMP_636 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
toWantRatio_1(uint256) := TMP_636(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toWantRatio

Name: toWantRatio Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newLockRatio_1
newLockRatio_1
newLockRatio

Name: newLockRatio Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
currentLockRatio_1
currentLockRatio_1
currentLockRatio

Name: currentLockRatio Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_637(bool) = newLockRatio_1 <= currentLockRatio_1
init
end
init
end
A: u B: 24
x
lnorm: u rnorm: 24
Finance type key: (0, 0)
[i]Type for TMP_637

Name: TMP_637 Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_39
CVX_39
CVX
Name: CVX, Num: 39

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
toDeposit_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toDeposit_1
toDeposit
Name: toDeposit, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
CVX_46
CVX
Name: CVX, Num: 46

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_46
CVX_VAULT
Name: CVX_VAULT, Num: 46

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_638 = CONVERT CVX_39 to IERC20Upgradeable
Converting CVX_39

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_638

Name: TMP_638 Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_639 = CONVERT this to address
Converting this
14
[i]Type for TMP_639

Name: TMP_639 Function: manualRebalance
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_640(uint256) = HIGH_LEVEL_CALL, dest:TMP_638(IERC20Upgradeable), function:balanceOf, arguments:['TMP_639']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_640

Name: TMP_640 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_46(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_46(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
toDeposit_1(uint256) := TMP_640(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toDeposit

Name: toDeposit Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newLockRatio_1
newLockRatio_1
newLockRatio

Name: newLockRatio Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
currentLockRatio_1
currentLockRatio_1
currentLockRatio

Name: currentLockRatio Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
cvxToLock_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cvxToLock_1
cvxToLock
Name: cvxToLock, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_643(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['newLockRatio_1', 'currentLockRatio_1'] 
SUB1
init
end
init
end
A: u B: 24
x
lnorm: u rnorm: 24
Finance type key: (0, 0)
SUB

Name: newLockRatio Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: currentLockRatio Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for TMP_643

Name: TMP_643 Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
cvxToLock_1(uint256) := TMP_643(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for cvxToLock

Name: cvxToLock Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_39
CVX_39
CVX

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
maxCVX_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
maxCVX_1
maxCVX
Name: maxCVX, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
CVX_40
CVX
Name: CVX, Num: 40

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_45
LOCKER
Name: LOCKER, Num: 45

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_39
CVX_VAULT
Name: CVX_VAULT, Num: 39

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_644 = CONVERT CVX_39 to IERC20Upgradeable
Converting CVX_39

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_644

Name: TMP_644 Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_645 = CONVERT this to address
Converting this
14
[i]Type for TMP_645

Name: TMP_645 Function: manualRebalance
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_646(uint256) = HIGH_LEVEL_CALL, dest:TMP_644(IERC20Upgradeable), function:balanceOf, arguments:['TMP_645']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_646

Name: TMP_646 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_40(address) := ϕ(['CVX_39', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_45(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_39(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_38', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxCVX_1(uint256) := TMP_646(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for maxCVX

Name: maxCVX Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_641(bool) = toDeposit_1 > 0
init
end
init
end
A: 6 B: 0
x
y
A: 6 B: 0
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 0
[i]Type for TMP_641

Name: TMP_641 Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cvxToLock_1
cvxToLock_1
cvxToLock

Name: cvxToLock Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
maxCVX_1
maxCVX_1
maxCVX

Name: maxCVX Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_647(bool) = cvxToLock_1 > maxCVX_1
init
end
init
end
A: 24 B: 6
x
y
A: 24 B: 6
<class 'int'>
<class 'int'>
lnorm: 24 rnorm: 6
Finance type key: (0, 0)
[i]Type for TMP_647

Name: TMP_647 Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
CVX_VAULT_46
CVX_VAULT_46
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_47
CVX_VAULT
Name: CVX_VAULT, Num: 47

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:CVX_VAULT_46(ISettV3), function:deposit, arguments:['toDeposit_1']  
High Call: deposit
CVX_VAULT_47(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
LOCKER_45
LOCKER_45
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
cvxToLock_1
cvxToLock_1
cvxToLock

Name: cvxToLock Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
LOCKER_48
LOCKER_48
LOCKER
Name: LOCKER, Num: 48

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
CVX_43
CVX
Name: CVX, Num: 43

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_48
LOCKER

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_42
CVX_VAULT
Name: CVX_VAULT, Num: 42

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
CVX_44
CVX
Name: CVX, Num: 44

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_49
LOCKER
Name: LOCKER, Num: 49

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_43
CVX_VAULT
Name: CVX_VAULT, Num: 43

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_651 = CONVERT this to address
Converting this
14
[i]Type for TMP_651

Name: TMP_651 Function: manualRebalance
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_652(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_45(ICvxLocker), function:maximumBoostPayment, arguments:[]  
High Call: maximumBoostPayment
Running querryfc
Written func info: CvxLocker, maximumBoostPayment
Handling balance function!
-993
Finding type for hlc_0(uint256 ... )
[i]Type for TMP_652

Name: TMP_652 Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_43(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_42', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_48(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_42(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_41'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:LOCKER_48(ICvxLocker), function:lock, arguments:['TMP_651', 'cvxToLock_1', 'TMP_652']  
High Call: lock
CVX_44(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_43', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_49(ICvxLocker) := ϕ(['LOCKER_48', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_43(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_42', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
LOCKER_45
LOCKER_45
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
LOCKER_46
LOCKER_46
LOCKER
Name: LOCKER, Num: 46

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
maxCVX_1
maxCVX_1
maxCVX

Name: maxCVX Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
CVX_41
CVX
Name: CVX, Num: 41

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_46
LOCKER

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_40
CVX_VAULT
Name: CVX_VAULT, Num: 40

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
CVX_42
CVX
Name: CVX, Num: 42

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_47
LOCKER
Name: LOCKER, Num: 47

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_41
CVX_VAULT
Name: CVX_VAULT, Num: 41

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_648 = CONVERT this to address
Converting this
14
[i]Type for TMP_648

Name: TMP_648 Function: manualRebalance
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_649(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_45(ICvxLocker), function:maximumBoostPayment, arguments:[]  
High Call: maximumBoostPayment
Running querryfc
Written func info: CvxLocker, maximumBoostPayment
Handling balance function!
-993
Finding type for hlc_1(uint256 ... )
[i]Type for TMP_649

Name: TMP_649 Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_41(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_40', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_46(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_45', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_40(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_39', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:LOCKER_46(ICvxLocker), function:lock, arguments:['TMP_648', 'maxCVX_1', 'TMP_649']  
High Call: lock
CVX_42(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_41', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_47(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_46', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_41(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_40', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_44
CVX_44
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
cvxLeft_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cvxLeft_1
cvxLeft
Name: cvxLeft, Num: 1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
weee
CVX_45
CVX
Name: CVX, Num: 45

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_44
CVX_VAULT
Name: CVX_VAULT, Num: 44

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_654 = CONVERT CVX_44 to IERC20Upgradeable
Converting CVX_44

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_654

Name: TMP_654 Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_655 = CONVERT this to address
Converting this
14
[i]Type for TMP_655

Name: TMP_655 Function: manualRebalance
Num: -1
Den: -1
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_656(uint256) = HIGH_LEVEL_CALL, dest:TMP_654(IERC20Upgradeable), function:balanceOf, arguments:['TMP_655']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_656

Name: TMP_656 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_45(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_44', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_44(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_43', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cvxLeft_1(uint256) := TMP_656(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for cvxLeft

Name: cvxLeft Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cvxLeft_1
cvxLeft_1
cvxLeft

Name: cvxLeft Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_657(bool) = cvxLeft_1 > 0
init
end
init
end
A: 6 B: 0
x
y
A: 6 B: 0
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 0
[i]Type for TMP_657

Name: TMP_657 Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_VAULT_44
CVX_VAULT_44
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cvxLeft_1
cvxLeft_1
cvxLeft

Name: cvxLeft Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
CVX_VAULT_45
CVX_VAULT
Name: CVX_VAULT, Num: 45

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:CVX_VAULT_44(ISettV3), function:deposit, arguments:['cvxLeft_1']  
High Call: deposit
CVX_VAULT_45(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


want_44(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
MAX_BPS_4(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_0', 'MAX_BPS_12', 'MAX_BPS_2'])
CVX_31(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
LOCKER_36(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_30(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
harvestOnRebalance_2(bool) := ϕ(['harvestOnRebalance_5', 'harvestOnRebalance_0', 'harvestOnRebalance_1', 'harvestOnRebalance_4'])
processLocksOnRebalance_2(bool) := ϕ(['processLocksOnRebalance_1', 'processLocksOnRebalance_0', 'processLocksOnRebalance_4'])
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
TMP_614(bool) = toLock_1 <= MAX_BPS_6
TMP_615(None) = SOLIDITY_CALL require(bool,string)(TMP_614,Max is 100%)
CONDITION processLocksOnRebalance_4
CONDITION harvestOnRebalance_5
HIGH_LEVEL_CALL, dest:LOCKER_38(ICvxLocker), function:processExpiredLocks, arguments:['False']  
want_47(address) := ϕ(['want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_46', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
MAX_BPS_7(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_6', 'MAX_BPS_12', 'MAX_BPS_2'])
CVX_34(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_33', 'CVX_45', 'CVX_21'])
LOCKER_39(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_38', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_33(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_32', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
harvestOnRebalance_5(bool) := ϕ(['harvestOnRebalance_5', 'harvestOnRebalance_1', 'harvestOnRebalance_4'])
TMP_617(uint256) = INTERNAL_CALL, MyStrategy.harvest()()
want_48(address) := ϕ(['want_35'])
LOCKER_40(ICvxLocker) := ϕ(['LOCKER_24'])
TMP_618 = CONVERT want_48 to IERC20Upgradeable
TMP_619 = CONVERT this to address
TMP_620(uint256) = HIGH_LEVEL_CALL, dest:TMP_618(IERC20Upgradeable), function:balanceOf, arguments:['TMP_619']  
want_49(address) := ϕ(['want_6', 'want_21', 'want_48', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
MAX_BPS_9(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_8', 'MAX_BPS_12', 'MAX_BPS_2'])
CVX_36(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_35', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_41(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1', 'LOCKER_40'])
CVX_VAULT_35(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_34', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
balanceOfWant_1(uint256) := TMP_620(uint256)
TMP_621 = CONVERT CVX_36 to IERC20Upgradeable
TMP_622 = CONVERT this to address
TMP_623(uint256) = HIGH_LEVEL_CALL, dest:TMP_621(IERC20Upgradeable), function:balanceOf, arguments:['TMP_622']  
MAX_BPS_10(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_9', 'MAX_BPS_12', 'MAX_BPS_2'])
CVX_37(address) := ϕ(['CVX_26', 'CVX_36', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_42(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_41', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_36(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_35', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
balanceOfCVX_1(uint256) := TMP_623(uint256)
TMP_624 = CONVERT this to address
TMP_625(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_42(ICvxLocker), function:balanceOf, arguments:['TMP_624']  
MAX_BPS_11(uint256) := ϕ(['MAX_BPS_10', 'MAX_BPS_3', 'MAX_BPS_12', 'MAX_BPS_2'])
CVX_38(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_37', 'CVX_21'])
LOCKER_43(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_42', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_37(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_36', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
balanceInLock_1(uint256) := TMP_625(uint256)
TMP_626(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['balanceOfCVX_1', 'balanceInLock_1'] 
TMP_627(uint256) = INTERNAL_CALL, MyStrategy.wantToCVX(uint256)(balanceOfWant_1)
CVX_VAULT_38(ISettV3) := ϕ(['CVX_VAULT_7'])
TMP_628(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['TMP_626', 'TMP_627'] 
totalCVXBalance_1(uint256) := TMP_628(uint256)
TMP_629(uint256) = 10 ** 18
TMP_630(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balanceInLock_1', 'TMP_629'] 
TMP_631(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_630', 'totalCVXBalance_1'] 
currentLockRatio_1(uint256) := TMP_631(uint256)
TMP_632(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['totalCVXBalance_1', 'toLock_1'] 
TMP_633(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_632', 'MAX_BPS_12'] 
newLockRatio_1(uint256) := TMP_633(uint256)
TMP_634(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['MAX_BPS_12', 'toLock_1'] 
TMP_635(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['totalCVXBalance_1', 'TMP_634'] 
TMP_636(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_635', 'MAX_BPS_12'] 
toWantRatio_1(uint256) := TMP_636(uint256)
TMP_637(bool) = newLockRatio_1 <= currentLockRatio_1
CONDITION TMP_637
TMP_638 = CONVERT CVX_39 to IERC20Upgradeable
TMP_639 = CONVERT this to address
TMP_640(uint256) = HIGH_LEVEL_CALL, dest:TMP_638(IERC20Upgradeable), function:balanceOf, arguments:['TMP_639']  
CVX_46(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
CVX_VAULT_46(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
toDeposit_1(uint256) := TMP_640(uint256)
TMP_643(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['newLockRatio_1', 'currentLockRatio_1'] 
cvxToLock_1(uint256) := TMP_643(uint256)
TMP_644 = CONVERT CVX_39 to IERC20Upgradeable
TMP_645 = CONVERT this to address
TMP_646(uint256) = HIGH_LEVEL_CALL, dest:TMP_644(IERC20Upgradeable), function:balanceOf, arguments:['TMP_645']  
CVX_40(address) := ϕ(['CVX_39', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_45(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_39(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_38', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
maxCVX_1(uint256) := TMP_646(uint256)
TMP_641(bool) = toDeposit_1 > 0
CONDITION TMP_641
TMP_647(bool) = cvxToLock_1 > maxCVX_1
CONDITION TMP_647
HIGH_LEVEL_CALL, dest:CVX_VAULT_46(ISettV3), function:deposit, arguments:['toDeposit_1']  
CVX_VAULT_47(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
TMP_651 = CONVERT this to address
TMP_652(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_45(ICvxLocker), function:maximumBoostPayment, arguments:[]  
CVX_43(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_42', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_48(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_42(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_41'])
HIGH_LEVEL_CALL, dest:LOCKER_48(ICvxLocker), function:lock, arguments:['TMP_651', 'cvxToLock_1', 'TMP_652']  
CVX_44(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_43', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
LOCKER_49(ICvxLocker) := ϕ(['LOCKER_48', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_43(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_42', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
TMP_648 = CONVERT this to address
TMP_649(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_45(ICvxLocker), function:maximumBoostPayment, arguments:[]  
CVX_41(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_40', 'CVX_21'])
LOCKER_46(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_45', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_40(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_39', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
HIGH_LEVEL_CALL, dest:LOCKER_46(ICvxLocker), function:lock, arguments:['TMP_648', 'maxCVX_1', 'TMP_649']  
CVX_42(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_41', 'CVX_45', 'CVX_21'])
LOCKER_47(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_46', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
CVX_VAULT_41(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_40', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
TMP_654 = CONVERT CVX_44 to IERC20Upgradeable
TMP_655 = CONVERT this to address
TMP_656(uint256) = HIGH_LEVEL_CALL, dest:TMP_654(IERC20Upgradeable), function:balanceOf, arguments:['TMP_655']  
CVX_45(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_44', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
CVX_VAULT_44(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_43', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
cvxLeft_1(uint256) := TMP_656(uint256)
TMP_657(bool) = cvxLeft_1 > 0
CONDITION TMP_657
HIGH_LEVEL_CALL, dest:CVX_VAULT_44(ISettV3), function:deposit, arguments:['cvxLeft_1']  
CVX_VAULT_45(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])


Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
want_44
want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
MAX_BPS_4
MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_31
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_36
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_30
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
harvestOnRebalance_2
harvestOnRebalance

Name: harvestOnRebalance Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
processLocksOnRebalance_2
processLocksOnRebalance

Name: processLocksOnRebalance Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
want_44(address) := ϕ(['want_6', 'want_21', 'want_0', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_BPS_4(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_0', 'MAX_BPS_12', 'MAX_BPS_2'])
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_31(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_0', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_36(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_0', 'LOCKER_12', 'LOCKER_18', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_30(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
harvestOnRebalance_2(bool) := ϕ(['harvestOnRebalance_5', 'harvestOnRebalance_0', 'harvestOnRebalance_1', 'harvestOnRebalance_4'])
Phi
[i]Type for harvestOnRebalance

Name: harvestOnRebalance Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
processLocksOnRebalance_2(bool) := ϕ(['processLocksOnRebalance_1', 'processLocksOnRebalance_0', 'processLocksOnRebalance_4'])
Phi
[i]Type for processLocksOnRebalance

Name: processLocksOnRebalance Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
MODIFIER_CALL, PausableUpgradeable.whenNotPaused()()
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
INTERNAL_CALL, SettAccessControl._onlyGovernance()()
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
MAX_BPS_6
MAX_BPS_6
MAX_BPS

Name: MAX_BPS Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toLock_1
toLock_1
toLock
p.norm: 0
Name: toLock, Num: 1

Name: toLock_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
TMP_614(bool) = toLock_1 <= MAX_BPS_6
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
[i]Type for TMP_614

Name: TMP_614 Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_615(None) = SOLIDITY_CALL require(bool,string)(TMP_614,Max is 100%)
[i]Type for TMP_615

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
processLocksOnRebalance_4
processLocksOnRebalance_4
processLocksOnRebalance

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
harvestOnRebalance_5
harvestOnRebalance_5
harvestOnRebalance

Name: harvestOnRebalance Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
LOCKER_38
LOCKER_38
LOCKER

Name: None Function: None
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
want_47
want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
MAX_BPS_7
MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_34
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_39
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_33
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
harvestOnRebalance_5
harvestOnRebalance

Name: harvestOnRebalance Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:LOCKER_38(ICvxLocker), function:processExpiredLocks, arguments:['False']  
High Call: processExpiredLocks
want_47(address) := ϕ(['want_6', 'want_21', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_46', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_BPS_7(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_6', 'MAX_BPS_12', 'MAX_BPS_2'])
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_34(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_33', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_39(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_38', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_33(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_32', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
harvestOnRebalance_5(bool) := ϕ(['harvestOnRebalance_5', 'harvestOnRebalance_1', 'harvestOnRebalance_4'])
Phi
[i]Type for harvestOnRebalance

Name: harvestOnRebalance Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
weee
want_48
want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_40
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
TMP_617(uint256) = INTERNAL_CALL, MyStrategy.harvest()()
init
end
[i]Type for TMP_617

Name: TMP_617 Function: manualRebalance
Num: 10
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_48(address) := ϕ(['want_35'])
Phi
[i]Type for want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_40(ICvxLocker) := ϕ(['LOCKER_24'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
want_48
want_48
want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
balanceOfWant_1

Name: balanceOfWant Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
balanceOfWant_1
balanceOfWant
Name: balanceOfWant, Num: 1

Name: balanceOfWant Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
want_49
want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
weee
MAX_BPS_9
MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_36
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_41
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_35
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_618 = CONVERT want_48 to IERC20Upgradeable
Converting want_48

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_618

Name: TMP_618 Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_619 = CONVERT this to address
Converting this
14
[i]Type for TMP_619

Name: TMP_619 Function: manualRebalance
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_620(uint256) = HIGH_LEVEL_CALL, dest:TMP_618(IERC20Upgradeable), function:balanceOf, arguments:['TMP_619']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
10
[i]Type for TMP_620

Name: TMP_620 Function: manualRebalance
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
want_49(address) := ϕ(['want_6', 'want_21', 'want_48', 'want_2', 'want_25', 'want_39', 'want_22', 'want_35', 'want_17', 'want_19', 'want_12', 'want_43', 'want_49'])
Phi
[i]Type for want

Name: want Function: manualRebalance
Num: -1
Den: -1
Address: 10
Norm: u
LF: want
Value: u
Fields: 
Finance Type: undef
XXXX
MAX_BPS_9(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_8', 'MAX_BPS_12', 'MAX_BPS_2'])
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_36(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_35', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_41(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1', 'LOCKER_40'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_35(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_34', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOfWant_1(uint256) := TMP_620(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for balanceOfWant

Name: balanceOfWant Function: manualRebalance
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_36
CVX_36
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
balanceOfCVX_1

Name: balanceOfCVX Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
balanceOfCVX_1
balanceOfCVX
Name: balanceOfCVX, Num: 1

Name: balanceOfCVX Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
MAX_BPS_10
MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_37
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_42
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_36
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_621 = CONVERT CVX_36 to IERC20Upgradeable
Converting CVX_36

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_621

Name: TMP_621 Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_622 = CONVERT this to address
Converting this
14
[i]Type for TMP_622

Name: TMP_622 Function: manualRebalance
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_623(uint256) = HIGH_LEVEL_CALL, dest:TMP_621(IERC20Upgradeable), function:balanceOf, arguments:['TMP_622']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_623

Name: TMP_623 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
MAX_BPS_10(uint256) := ϕ(['MAX_BPS_3', 'MAX_BPS_9', 'MAX_BPS_12', 'MAX_BPS_2'])
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_37(address) := ϕ(['CVX_26', 'CVX_36', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_42(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_41', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_36(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_35', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceOfCVX_1(uint256) := TMP_623(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for balanceOfCVX

Name: balanceOfCVX Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
LOCKER_42
LOCKER_42
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
balanceInLock_1

Name: balanceInLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balanceInLock_1
balanceInLock
Name: balanceInLock, Num: 1

Name: balanceInLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
weee
MAX_BPS_11
MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
CVX_38
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_43
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_37
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_624 = CONVERT this to address
Converting this
14
[i]Type for TMP_624

Name: TMP_624 Function: manualRebalance
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_625(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_42(ICvxLocker), function:balanceOf, arguments:['TMP_624']  
High Call: balanceOf
Running querryfc
Written func info: CvxLocker, balanceOf
Retvar: ('c', ['global:CVX'], ['-1'], 6, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [-1], 6, "'u'", None, -1)
[i]Type for TMP_625

Name: TMP_625 Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
MAX_BPS_11(uint256) := ϕ(['MAX_BPS_10', 'MAX_BPS_3', 'MAX_BPS_12', 'MAX_BPS_2'])
Phi
[i]Type for MAX_BPS

Name: MAX_BPS Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_38(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_37', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_43(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_42', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_37(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_36', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balanceInLock_1(uint256) := TMP_625(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balanceInLock

Name: balanceInLock Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
balanceOfCVX_1
balanceOfCVX_1
balanceOfCVX

Name: balanceOfCVX Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
balanceInLock_1
balanceInLock_1
balanceInLock

Name: balanceInLock Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
balanceOfWant_1
balanceOfWant_1
balanceOfWant

Name: balanceOfWant Function: manualRebalance
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
totalCVXBalance_1

Name: totalCVXBalance Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
totalCVXBalance_1
totalCVXBalance
Name: totalCVXBalance, Num: 1

Name: totalCVXBalance Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
CVX_VAULT_38
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
weee
TMP_626(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['balanceOfCVX_1', 'balanceInLock_1'] 

Name: balanceOfCVX Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: balanceInLock Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
init
end
init
end
A: 6 B: 6
x
y
A: 6 B: 6
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 6
init
end
lval:u rval:'u'
[i]Type for TMP_626

Name: TMP_626 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_627(uint256) = INTERNAL_CALL, MyStrategy.wantToCVX(uint256)(balanceOfWant_1)
init
end
[[10], [-1], 6, None, [], 0, 'u', 'u']

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
want_1
want
p.norm: 0

Name: want_1 Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
weee
CVX_VAULT_6
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
want_1(uint256) := ϕ(['balanceOfWant_1'])
Phi
[i]Type for want

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_6(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
CVX_VAULT_6
CVX_VAULT_6
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_7
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_484(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_6(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_484

Name: TMP_484 Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_7(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_6', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_484(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
want_1
want_1
want

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['want_1', 'bCVXToCVX_1'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_485

Name: TMP_485 Function: wantToCVX
Num: 4
Den: -1
Address: None
Norm: 18
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_486(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_486

Name: TMP_486 Function: wantToCVX
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_485', 'TMP_486'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:1000000000000000000
[i]Type for TMP_487

Name: TMP_487 Function: wantToCVX
Num: 4
Den: -1
Address: None
Norm: 0
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_487
init
end

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Rembmered parameters?

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
want_1
want
p.norm: 0

Name: want_1 Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
weee
CVX_VAULT_6
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
want_1(uint256) := ϕ(['balanceOfWant_1'])
Phi
[i]Type for want

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_6(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_0', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
CVX_VAULT_6
CVX_VAULT_6
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bCVXToCVX_1

Name: bCVXToCVX Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
bCVXToCVX_1
bCVXToCVX
Name: bCVXToCVX, Num: 1

Name: bCVXToCVX Function: wantToCVX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_7
CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_484(uint256) = HIGH_LEVEL_CALL, dest:CVX_VAULT_6(ISettV3), function:getPricePerFullShare, arguments:[]  
High Call: getPricePerFullShare
Running querryfc
Written func info: CVX_VAULT, getPricePerFullShare
Retvar: ('c', ['global:CVX'], ['global:want'], 18, "'u'", None)
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
{'global:governance': 1, 'global:strategist': 2, 'global:uniswap': 3, 'global:CVX': 4, 'global:DELEGATE': 5, 'global:SUSHI_ROUTER': 6, 'global:reward': 7, 'global:keeper': 8, 'global:controller': 9, 'global:want': 10, 'global:guardian': 11, 'global:lpComponent': 12, 'global:WETH': 13, 'initialize:_governance': -999, 'initialize:_strategist': -998, 'initialize:_controller': -997, 'initialize:_keeper': -996, 'initialize:_guardian': -995, 'initialize:_wantConfig': -994, 'initialize:_locker': -993, 'balanceOfPool:TMP_492': 14, 'global:this': 14}
([4], [10], 18, "'u'", None, -1)
[i]Type for TMP_484

Name: TMP_484 Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_7(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_6', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: wantToCVX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bCVXToCVX_1(uint256) := TMP_484(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bCVXToCVX

Name: bCVXToCVX Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
bCVXToCVX_1
bCVXToCVX_1
bCVXToCVX

Name: bCVXToCVX Function: wantToCVX
Num: 4
Den: 10
Address: None
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
want_1
want_1
want

Name: want Function: wantToCVX
Num: 10
Den: -1
Address: u
Norm: u
LF: want
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
TMP_485(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['want_1', 'bCVXToCVX_1'] 
init
end
init
end
A: u B: 18
x
lnorm: u rnorm: 18
init
end
lval:u rval:'u'
[i]Type for TMP_485

Name: TMP_485 Function: wantToCVX
Num: 4
Den: -1
Address: None
Norm: 18
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_486(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_486

Name: TMP_486 Function: wantToCVX
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_485', 'TMP_486'] 
init
end
init
end
A: 18 B: 18
x
y
A: 18 B: 18
<class 'int'>
<class 'int'>
lnorm: 18 rnorm: 18
init
end
lval:u rval:1000000000000000000
[i]Type for TMP_487

Name: TMP_487 Function: wantToCVX
Num: 4
Den: -1
Address: None
Norm: 0
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_487
init
end
[i]Type for TMP_627

Name: TMP_627 Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 0
LF: want
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_VAULT_38(ISettV3) := ϕ(['CVX_VAULT_7'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_628(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['TMP_626', 'TMP_627'] 

Name: TMP_626 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_627 Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 0
LF: want
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
A: 6 B: 0
x
y
A: 6 B: 0
<class 'int'>
<class 'int'>
z
lnorm: 6 rnorm: 0
Finance type key: (0, 0)
init
end
lval:u rval:u
[i]Type for TMP_628

Name: TMP_628 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
totalCVXBalance_1(uint256) := TMP_628(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for totalCVXBalance

Name: totalCVXBalance Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
totalCVXBalance_1
totalCVXBalance_1
totalCVXBalance

Name: totalCVXBalance Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
balanceInLock_1
balanceInLock_1
balanceInLock

Name: balanceInLock Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
currentLockRatio_1

Name: currentLockRatio Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
currentLockRatio_1
currentLockRatio
Name: currentLockRatio, Num: 1

Name: currentLockRatio Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
TMP_629(uint256) = 10 ** 18
init
end
init
end
lval:10 rval:18
[i]Type for TMP_629

Name: TMP_629 Function: manualRebalance
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_630(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balanceInLock_1', 'TMP_629'] 
init
end
init
end
A: 6 B: 18
x
y
A: 6 B: 18
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 18
init
end
lval:'u' rval:1000000000000000000
[i]Type for TMP_630

Name: TMP_630 Function: manualRebalance
Num: 4
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_631(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_630', 'totalCVXBalance_1'] 
init
end
init
end
A: 24 B: u
x
lnorm: 24 rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_631

Name: TMP_631 Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
currentLockRatio_1(uint256) := TMP_631(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for currentLockRatio

Name: currentLockRatio Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
totalCVXBalance_1
totalCVXBalance_1
totalCVXBalance

Name: totalCVXBalance Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MAX_BPS_12
MAX_BPS_12
MAX_BPS

Name: MAX_BPS Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toLock_1
toLock_1
toLock
p.norm: 0
Name: toLock, Num: 1

Name: toLock_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newLockRatio_1

Name: newLockRatio Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
newLockRatio_1
newLockRatio
Name: newLockRatio, Num: 1

Name: newLockRatio Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
TMP_632(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['totalCVXBalance_1', 'toLock_1'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_632

Name: TMP_632 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_633(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_632', 'MAX_BPS_12'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_633

Name: TMP_633 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
newLockRatio_1(uint256) := TMP_633(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for newLockRatio

Name: newLockRatio Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
totalCVXBalance_1
totalCVXBalance_1
totalCVXBalance

Name: totalCVXBalance Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
MAX_BPS_12
MAX_BPS_12
MAX_BPS

Name: MAX_BPS Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toLock_1
toLock_1
toLock
p.norm: 0
Name: toLock, Num: 1

Name: toLock_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
toWantRatio_1

Name: toWantRatio Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
toWantRatio_1
toWantRatio
Name: toWantRatio, Num: 1

Name: toWantRatio Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
weee
TMP_634(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['MAX_BPS_12', 'toLock_1'] 
SUB1
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
SUB

Name: MAX_BPS Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: toLock Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
lval:u rval:u
[i]Type for TMP_634

Name: TMP_634 Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_635(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['totalCVXBalance_1', 'TMP_634'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_635

Name: TMP_635 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_636(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_635', 'MAX_BPS_12'] 
init
end
init
end
A: u B: u
x
lnorm: u rnorm: u
init
end
lval:u rval:u
[i]Type for TMP_636

Name: TMP_636 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
toWantRatio_1(uint256) := TMP_636(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toWantRatio

Name: toWantRatio Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newLockRatio_1
newLockRatio_1
newLockRatio

Name: newLockRatio Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
currentLockRatio_1
currentLockRatio_1
currentLockRatio

Name: currentLockRatio Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_637(bool) = newLockRatio_1 <= currentLockRatio_1
init
end
init
end
A: u B: 24
x
lnorm: u rnorm: 24
Finance type key: (0, 0)
[i]Type for TMP_637

Name: TMP_637 Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_39
CVX_39
CVX

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
toDeposit_1

Name: toDeposit Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
toDeposit_1
toDeposit
Name: toDeposit, Num: 1

Name: toDeposit Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
CVX_46
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_46
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_638 = CONVERT CVX_39 to IERC20Upgradeable
Converting CVX_39

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_638

Name: TMP_638 Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_639 = CONVERT this to address
Converting this
14
[i]Type for TMP_639

Name: TMP_639 Function: manualRebalance
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_640(uint256) = HIGH_LEVEL_CALL, dest:TMP_638(IERC20Upgradeable), function:balanceOf, arguments:['TMP_639']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_640

Name: TMP_640 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_46(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_46(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
toDeposit_1(uint256) := TMP_640(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for toDeposit

Name: toDeposit Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
newLockRatio_1
newLockRatio_1
newLockRatio

Name: newLockRatio Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
currentLockRatio_1
currentLockRatio_1
currentLockRatio

Name: currentLockRatio Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
cvxToLock_1

Name: cvxToLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cvxToLock_1
cvxToLock
Name: cvxToLock, Num: 1

Name: cvxToLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_643(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256), arguments:['newLockRatio_1', 'currentLockRatio_1'] 
SUB1
init
end
init
end
A: u B: 24
x
lnorm: u rnorm: 24
Finance type key: (0, 0)
SUB

Name: newLockRatio Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: currentLockRatio Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
lval:u rval:u
[i]Type for TMP_643

Name: TMP_643 Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
cvxToLock_1(uint256) := TMP_643(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for cvxToLock

Name: cvxToLock Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_39
CVX_39
CVX

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
maxCVX_1

Name: maxCVX Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
maxCVX_1
maxCVX
Name: maxCVX, Num: 1

Name: maxCVX Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
CVX_40
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_45
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_39
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_644 = CONVERT CVX_39 to IERC20Upgradeable
Converting CVX_39

Name: CVX Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_644

Name: TMP_644 Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_645 = CONVERT this to address
Converting this
14
[i]Type for TMP_645

Name: TMP_645 Function: manualRebalance
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_646(uint256) = HIGH_LEVEL_CALL, dest:TMP_644(IERC20Upgradeable), function:balanceOf, arguments:['TMP_645']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_646

Name: TMP_646 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_40(address) := ϕ(['CVX_39', 'CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_45(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_39(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_38', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxCVX_1(uint256) := TMP_646(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for maxCVX

Name: maxCVX Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_641(bool) = toDeposit_1 > 0
init
end
init
end
A: 6 B: 0
x
y
A: 6 B: 0
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 0
[i]Type for TMP_641

Name: TMP_641 Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cvxToLock_1
cvxToLock_1
cvxToLock

Name: cvxToLock Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
maxCVX_1
maxCVX_1
maxCVX

Name: maxCVX Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_647(bool) = cvxToLock_1 > maxCVX_1
init
end
init
end
A: 24 B: 6
x
y
A: 24 B: 6
<class 'int'>
<class 'int'>
lnorm: 24 rnorm: 6
Finance type key: (0, 0)
[i]Type for TMP_647

Name: TMP_647 Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
toDeposit_1
toDeposit_1
toDeposit

Name: toDeposit Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
CVX_VAULT_46
CVX_VAULT_46
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
weee
CVX_VAULT_47
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:CVX_VAULT_46(ISettV3), function:deposit, arguments:['toDeposit_1']  
High Call: deposit
CVX_VAULT_47(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
LOCKER_45
LOCKER_45
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
cvxToLock_1
cvxToLock_1
cvxToLock

Name: cvxToLock Function: manualRebalance
Num: -1
Den: -1
Address: None
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
LOCKER_48
LOCKER_48
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
End popogation
weee
weee
CVX_43
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_48
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_42
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
CVX_44
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_49
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_43
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_651 = CONVERT this to address
Converting this
14
[i]Type for TMP_651

Name: TMP_651 Function: manualRebalance
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_652(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_45(ICvxLocker), function:maximumBoostPayment, arguments:[]  
High Call: maximumBoostPayment
Running querryfc
Written func info: CvxLocker, maximumBoostPayment
Handling balance function!
-993
Finding type for hlc_0(uint256 ... )
[i]Type for TMP_652

Name: TMP_652 Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_43(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_42', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_48(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_42(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18', 'CVX_VAULT_41'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:LOCKER_48(ICvxLocker), function:lock, arguments:['TMP_651', 'cvxToLock_1', 'TMP_652']  
High Call: lock
CVX_44(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_43', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_49(ICvxLocker) := ϕ(['LOCKER_48', 'LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_43(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_42', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
LOCKER_45
LOCKER_45
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
LOCKER_46
LOCKER_46
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
maxCVX_1
maxCVX_1
maxCVX

Name: maxCVX Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
CVX_41
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_46
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_40
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
CVX_42
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
LOCKER_47
LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_41
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
TMP_648 = CONVERT this to address
Converting this
14
[i]Type for TMP_648

Name: TMP_648 Function: manualRebalance
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_649(uint256) = HIGH_LEVEL_CALL, dest:LOCKER_45(ICvxLocker), function:maximumBoostPayment, arguments:[]  
High Call: maximumBoostPayment
Running querryfc
Written func info: CvxLocker, maximumBoostPayment
Handling balance function!
-993
Finding type for hlc_1(uint256 ... )
[i]Type for TMP_649

Name: TMP_649 Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_41(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_40', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_46(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_15', 'LOCKER_45', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_40(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_39', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
HIGH_LEVEL_CALL, dest:LOCKER_46(ICvxLocker), function:lock, arguments:['TMP_648', 'maxCVX_1', 'TMP_649']  
High Call: lock
CVX_42(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_41', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
LOCKER_47(ICvxLocker) := ϕ(['LOCKER_47', 'LOCKER_18', 'LOCKER_12', 'LOCKER_7', 'LOCKER_24', 'LOCKER_46', 'LOCKER_15', 'LOCKER_49', 'LOCKER_44', 'LOCKER_31', 'LOCKER_35', 'LOCKER_1'])
Phi
[i]Type for LOCKER

Name: LOCKER Function: manualRebalance
Num: -1
Den: -1
Address: -993
Norm: u
LF: CvxLocker
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_41(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_40', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_44
CVX_44
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
cvxLeft_1

Name: cvxLeft Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
cvxLeft_1
cvxLeft
Name: cvxLeft, Num: 1

Name: cvxLeft Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
weee
CVX_45
CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
weee
CVX_VAULT_44
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
weee
TMP_654 = CONVERT CVX_44 to IERC20Upgradeable
Converting CVX_44

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
init
end
ERC20Upgradeable
[i]Type for TMP_654

Name: TMP_654 Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: ERC20Upgradeable
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_655 = CONVERT this to address
Converting this
14
[i]Type for TMP_655

Name: TMP_655 Function: manualRebalance
Num: 
Den: 
Address: 14
Norm: u
LF: MyStrategy
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_656(uint256) = HIGH_LEVEL_CALL, dest:TMP_654(IERC20Upgradeable), function:balanceOf, arguments:['TMP_655']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Upgradeable, balanceOf
Handling balance function!
4
[i]Type for TMP_656

Name: TMP_656 Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
CVX_45(address) := ϕ(['CVX_26', 'CVX_30', 'CVX_44', 'CVX_3', 'CVX_17', 'CVX_46', 'CVX_13', 'CVX_19', 'CVX_9', 'CVX_45', 'CVX_21'])
Phi
[i]Type for CVX

Name: CVX Function: manualRebalance
Num: -1
Den: -1
Address: 4
Norm: u
LF: CVX
Value: u
Fields: 
Finance Type: undef
XXXX
CVX_VAULT_44(ISettV3) := ϕ(['CVX_VAULT_46', 'CVX_VAULT_43', 'CVX_VAULT_7', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_9', 'CVX_VAULT_21', 'CVX_VAULT_24', 'CVX_VAULT_28', 'CVX_VAULT_15', 'CVX_VAULT_45', 'CVX_VAULT_3', 'CVX_VAULT_23', 'CVX_VAULT_5', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_11', 'CVX_VAULT_44', 'CVX_VAULT_18'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
cvxLeft_1(uint256) := TMP_656(uint256)
asgn
init
end
Finance type key: (0, -1)
[i]Type for cvxLeft

Name: cvxLeft Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
cvxLeft_1
cvxLeft_1
cvxLeft

Name: cvxLeft Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
weee
TMP_657(bool) = cvxLeft_1 > 0
init
end
init
end
A: 6 B: 0
x
y
A: 6 B: 0
<class 'int'>
<class 'int'>
lnorm: 6 rnorm: 0
[i]Type for TMP_657

Name: TMP_657 Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Rembmered parameters?

Name: toLock Function: manualRebalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
CVX_VAULT_44
CVX_VAULT_44
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
cvxLeft_1
cvxLeft_1
cvxLeft

Name: cvxLeft Function: manualRebalance
Num: 4
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
weee
CVX_VAULT_45
CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
weee
HIGH_LEVEL_CALL, dest:CVX_VAULT_44(ISettV3), function:deposit, arguments:['cvxLeft_1']  
High Call: deposit
CVX_VAULT_45(ISettV3) := ϕ(['CVX_VAULT_45', 'CVX_VAULT_11', 'CVX_VAULT_3', 'CVX_VAULT_46', 'CVX_VAULT_24', 'CVX_VAULT_44', 'CVX_VAULT_7', 'CVX_VAULT_23', 'CVX_VAULT_18', 'CVX_VAULT_29', 'CVX_VAULT_16', 'CVX_VAULT_5', 'CVX_VAULT_9', 'CVX_VAULT_28', 'CVX_VAULT_47', 'CVX_VAULT_19', 'CVX_VAULT_15', 'CVX_VAULT_21'])
Phi
[i]Type for CVX_VAULT

Name: CVX_VAULT Function: manualRebalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



slitherConstructorVariables



slitherConstructorConstantVariables
Address: 1, Label: global:governance
Address: 2, Label: global:strategist
Address: 3, Label: global:uniswap
Address: 4, Label: global:CVX
Address: 5, Label: global:DELEGATE
Address: 6, Label: global:SUSHI_ROUTER
Address: 7, Label: global:reward
Address: 8, Label: global:keeper
Address: 9, Label: global:controller
Address: 10, Label: global:want
Address: 11, Label: global:guardian
Address: 12, Label: global:lpComponent
Address: 13, Label: global:WETH
Address: -999, Label: initialize:_governance
Address: -998, Label: initialize:_strategist
Address: -997, Label: initialize:_controller
Address: -996, Label: initialize:_keeper
Address: -995, Label: initialize:_guardian
Address: -994, Label: initialize:_wantConfig
Address: -993, Label: initialize:_locker
Address: 14, Label: balanceOfPool:TMP_492
Address: 14, Label: global:this
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
Head Addr: 3
    Norm: 0
    Set: {3}
    Fin: NULL
Head Addr: 4
    Norm: 6
    Set: {4}
    Fin: NULL
Head Addr: 5
    Norm: 0
    Set: {5}
    Fin: NULL
Head Addr: 6
    Norm: 0
    Set: {6}
    Fin: NULL
Head Addr: 7
    Norm: 6
    Set: {7}
    Fin: NULL
Head Addr: 8
    Norm: 0
    Set: {8}
    Fin: NULL
Head Addr: 9
    Norm: 0
    Set: {9}
    Fin: NULL
Head Addr: 10
    Norm: 6
    Set: {10}
    Fin: NULL
Head Addr: 11
    Norm: 0
    Set: {11}
    Fin: NULL
Head Addr: 12
    Norm: 0
    Set: {12}
    Fin: NULL
Head Addr: 13
    Norm: 18
    Set: {13}
    Fin: NULL
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 0
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Head Addr: 14
    Norm: *
    Set: {14}
    Fin: NULL
Function count: 36
Executing Group 8
[*] Tested 2 warnings for veCVX
Group 8 complete
Testing complete
