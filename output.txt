Switched global version to 0.8.9



pairExists
token0_1(address) := ϕ(['token0_1'])
[i]Type for token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_1(address) := ϕ(['token1_1'])
[i]Type for token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_2', '_pairExists_1', '_pairExists_0'])
[i]Type for _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash0_1(bytes32) := TMP_18(bytes32)
Finance type key: (-1, -1)
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash1_1(bytes32) := TMP_20(bytes32)
Finance type key: (-1, -1)
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_2(bool) -> _pairExists_1[pairHash0_1]
[i]Type for REF_2

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(bool) -> _pairExists_1[pairHash1_1]
[i]Type for REF_3

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_21(bool) = REF_2 || REF_3
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_21
token0_1(address) := ϕ(['token0_1'])
[i]Type for token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -999
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_1(address) := ϕ(['token1_1'])
[i]Type for token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -998
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_2', '_pairExists_1', '_pairExists_0'])
[i]Type for _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: TMP_18 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash0_1(bytes32) := TMP_18(bytes32)
Finance type key: (-1, -1)
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash1_1(bytes32) := TMP_20(bytes32)
Finance type key: (-1, -1)
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_2(bool) -> _pairExists_1[pairHash0_1]
[i]Type for REF_2

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(bool) -> _pairExists_1[pairHash1_1]
[i]Type for REF_3

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_21(bool) = REF_2 || REF_3
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_21



consult
token_1(address) := ϕ(['USDV_1', 'VADER_2', 'VADER_4'])
[i]Type for token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairCount_1(uint256) := REF_4(uint256)
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumNative_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint256) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_22(bool) = i_2 < pairCount_1
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i]Type for REF_5

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_6(address) -> pairData_1.token0
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
Error with TMP_55 in function consult
Error with: TMP_55 in function consult
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_3(uint256) := ϕ(['sumUSD_2', 'sumUSD_1'])
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_4(uint256) = sumUSD_1 (c)+ result_3
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_45 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_3', '_pairs_19', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = sumUSD_3 (c)* TMP_46
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
Error with TMP_48 in function consult
Error with: TMP_48 in function consult
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
result_2(uint256) := TMP_48(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_11(uint224) -> REF_10._x
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(uint256) := i_2(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint256) = i_2 (c)+ 1
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(address) -> pairData_1.token1
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_13(address) -> _aggregators_1[REF_12]
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i]Type for price

Name: price Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_34 = CONVERT price_1 to uint256
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: -1
Den: -1
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumUSD_2(uint256) = sumUSD_1 (c)+ TMP_36
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_39 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_2', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = sumUSD_2 (c)* TMP_40
Error with TMP_41 in function consult
Error with: TMP_41 in function consult
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1(uint256) := TMP_42(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
token_1(address) := ϕ(['USDV_1', 'VADER_2', 'VADER_4'])
[i]Type for token

Name: token Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: token
Value: u
Fields: 
Finance Type: undef
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairCount_1(uint256) := REF_4(uint256)
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumNative_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint256) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_22(bool) = i_2 < pairCount_1
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_6(address) -> pairData_1.token0
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_3(uint256) := ϕ(['sumUSD_2', 'sumUSD_1'])
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_4(uint256) = sumUSD_1 (c)+ result_3
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_45 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_3', '_pairs_19', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = sumUSD_3 (c)* TMP_46
Error with TMP_47 in function consult
Error with: TMP_47 in function consult
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
result_2(uint256) := TMP_48(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_11(uint224) -> REF_10._x
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(uint256) := i_2(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint256) = i_2 (c)+ 1
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(address) -> pairData_1.token1
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_13(address) -> _aggregators_1[REF_12]
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i]Type for price

Name: price Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_34 = CONVERT price_1 to uint256
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumUSD_2(uint256) = sumUSD_1 (c)+ TMP_36
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_39 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: 
Den: 
Address: -997
Norm: *
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_2', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = sumUSD_2 (c)* TMP_40
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1(uint256) := TMP_42(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef



getRate
VADER_1(address) := ϕ(['VADER_0', 'VADER_3', 'VADER_15', 'VADER_5', 'VADER_12', 'VADER_8'])
[i]Type for VADER

Name: VADER Function: getRate
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
USDV_1(address) := ϕ(['USDV_8', 'USDV_0', 'USDV_5', 'USDV_2'])
[i]Type for USDV

Name: USDV Function: getRate
Num: -1
Den: -1
Address: 2
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
TMP_56(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(USDV_1)
token_1(address) := ϕ(['USDV_1', 'VADER_2', 'VADER_4'])
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairCount_1(uint256) := REF_4(uint256)
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumNative_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint256) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_22(bool) = i_2 < pairCount_1
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_6(address) -> pairData_1.token0
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_3(uint256) := ϕ(['sumUSD_2', 'sumUSD_1'])
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_4(uint256) = sumUSD_1 (c)+ result_3
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_45 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_3', '_pairs_19', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = sumUSD_3 (c)* TMP_46
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
result_2(uint256) := TMP_48(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_11(uint224) -> REF_10._x
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(uint256) := i_2(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint256) = i_2 (c)+ 1
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(address) -> pairData_1.token1
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_13(address) -> _aggregators_1[REF_12]
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i]Type for price

Name: price Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_34 = CONVERT price_1 to uint256
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumUSD_2(uint256) = sumUSD_1 (c)+ TMP_36
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_39 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_2', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = sumUSD_2 (c)* TMP_40
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1(uint256) := TMP_42(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
token_1(address) := ϕ(['USDV_1', 'VADER_2', 'VADER_4'])
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairCount_1(uint256) := REF_4(uint256)
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumNative_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint256) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_22(bool) = i_2 < pairCount_1
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_6(address) -> pairData_1.token0
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_3(uint256) := ϕ(['sumUSD_2', 'sumUSD_1'])
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_4(uint256) = sumUSD_1 (c)+ result_3
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_45 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_3', '_pairs_19', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = sumUSD_3 (c)* TMP_46
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
result_2(uint256) := TMP_48(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_11(uint224) -> REF_10._x
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(uint256) := i_2(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint256) = i_2 (c)+ 1
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(address) -> pairData_1.token1
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_13(address) -> _aggregators_1[REF_12]
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i]Type for price

Name: price Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_34 = CONVERT price_1 to uint256
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumUSD_2(uint256) = sumUSD_1 (c)+ TMP_36
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_39 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_2', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = sumUSD_2 (c)* TMP_40
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1(uint256) := TMP_42(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
[i]Type for TMP_56

Name: TMP_56 Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tUSDInUSDV_1(uint256) := TMP_56(uint256)
Finance type key: (-1, -1)
[i]Type for tUSDInUSDV

Name: tUSDInUSDV Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_57(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(VADER_2)
token_1(address) := ϕ(['USDV_1', 'VADER_2', 'VADER_4'])
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairCount_1(uint256) := REF_4(uint256)
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumNative_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint256) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_22(bool) = i_2 < pairCount_1
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_6(address) -> pairData_1.token0
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_3(uint256) := ϕ(['sumUSD_2', 'sumUSD_1'])
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_4(uint256) = sumUSD_1 (c)+ result_3
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_45 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_3', '_pairs_19', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = sumUSD_3 (c)* TMP_46
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
result_2(uint256) := TMP_48(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_11(uint224) -> REF_10._x
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(uint256) := i_2(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint256) = i_2 (c)+ 1
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(address) -> pairData_1.token1
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_13(address) -> _aggregators_1[REF_12]
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i]Type for price

Name: price Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_34 = CONVERT price_1 to uint256
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumUSD_2(uint256) = sumUSD_1 (c)+ TMP_36
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_39 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_2', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = sumUSD_2 (c)* TMP_40
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1(uint256) := TMP_42(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
token_1(address) := ϕ(['USDV_1', 'VADER_2', 'VADER_4'])
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairCount_1(uint256) := REF_4(uint256)
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumNative_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint256) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_22(bool) = i_2 < pairCount_1
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_6(address) -> pairData_1.token0
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_3(uint256) := ϕ(['sumUSD_2', 'sumUSD_1'])
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_4(uint256) = sumUSD_1 (c)+ result_3
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_45 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_3', '_pairs_19', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = sumUSD_3 (c)* TMP_46
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
result_2(uint256) := TMP_48(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_11(uint224) -> REF_10._x
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(uint256) := i_2(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint256) = i_2 (c)+ 1
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(address) -> pairData_1.token1
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_13(address) -> _aggregators_1[REF_12]
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i]Type for price

Name: price Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_34 = CONVERT price_1 to uint256
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumUSD_2(uint256) = sumUSD_1 (c)+ TMP_36
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_39 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_2', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = sumUSD_2 (c)* TMP_40
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1(uint256) := TMP_42(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tUSDInVader_1(uint256) := TMP_57(uint256)
Finance type key: (-1, -1)
[i]Type for tUSDInVader

Name: tUSDInVader Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_58(uint256) = tUSDInUSDV_1 (c)/ tUSDInVader_1
[i]Type for TMP_58

Name: TMP_58 Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
result_1(uint256) := TMP_58(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
VADER_1(address) := ϕ(['VADER_0', 'VADER_3', 'VADER_15', 'VADER_5', 'VADER_12', 'VADER_8'])
[i]Type for VADER

Name: VADER Function: getRate
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
USDV_1(address) := ϕ(['USDV_8', 'USDV_0', 'USDV_5', 'USDV_2'])
[i]Type for USDV

Name: USDV Function: getRate
Num: -1
Den: -1
Address: 2
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
TMP_56(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(USDV_1)
token_1(address) := ϕ(['USDV_1', 'VADER_2', 'VADER_4'])
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairCount_1(uint256) := REF_4(uint256)
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumNative_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint256) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_22(bool) = i_2 < pairCount_1
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_6(address) -> pairData_1.token0
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_3(uint256) := ϕ(['sumUSD_2', 'sumUSD_1'])
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_4(uint256) = sumUSD_1 (c)+ result_3
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_45 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_3', '_pairs_19', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = sumUSD_3 (c)* TMP_46
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
result_2(uint256) := TMP_48(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_11(uint224) -> REF_10._x
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(uint256) := i_2(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint256) = i_2 (c)+ 1
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(address) -> pairData_1.token1
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_13(address) -> _aggregators_1[REF_12]
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i]Type for price

Name: price Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_34 = CONVERT price_1 to uint256
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumUSD_2(uint256) = sumUSD_1 (c)+ TMP_36
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_39 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_2', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = sumUSD_2 (c)* TMP_40
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1(uint256) := TMP_42(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
token_1(address) := ϕ(['USDV_1', 'VADER_2', 'VADER_4'])
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairCount_1(uint256) := REF_4(uint256)
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumNative_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint256) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_22(bool) = i_2 < pairCount_1
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_6(address) -> pairData_1.token0
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_3(uint256) := ϕ(['sumUSD_2', 'sumUSD_1'])
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_4(uint256) = sumUSD_1 (c)+ result_3
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_45 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_3', '_pairs_19', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = sumUSD_3 (c)* TMP_46
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
result_2(uint256) := TMP_48(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_11(uint224) -> REF_10._x
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(uint256) := i_2(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint256) = i_2 (c)+ 1
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(address) -> pairData_1.token1
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_13(address) -> _aggregators_1[REF_12]
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i]Type for price

Name: price Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_34 = CONVERT price_1 to uint256
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumUSD_2(uint256) = sumUSD_1 (c)+ TMP_36
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_39 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 2
Norm: 6
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_2', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = sumUSD_2 (c)* TMP_40
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1(uint256) := TMP_42(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
[i]Type for TMP_56

Name: TMP_56 Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tUSDInUSDV_1(uint256) := TMP_56(uint256)
Finance type key: (-1, -1)
[i]Type for tUSDInUSDV

Name: tUSDInUSDV Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_57(uint256) = INTERNAL_CALL, TwapOracle.consult(address)(VADER_2)
token_1(address) := ϕ(['USDV_1', 'VADER_2', 'VADER_4'])
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairCount_1(uint256) := REF_4(uint256)
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumNative_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint256) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_22(bool) = i_2 < pairCount_1
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_6(address) -> pairData_1.token0
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_3(uint256) := ϕ(['sumUSD_2', 'sumUSD_1'])
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_4(uint256) = sumUSD_1 (c)+ result_3
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_45 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_3', '_pairs_19', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = sumUSD_3 (c)* TMP_46
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
result_2(uint256) := TMP_48(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_11(uint224) -> REF_10._x
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(uint256) := i_2(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint256) = i_2 (c)+ 1
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(address) -> pairData_1.token1
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_13(address) -> _aggregators_1[REF_12]
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i]Type for price

Name: price Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_34 = CONVERT price_1 to uint256
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumUSD_2(uint256) = sumUSD_1 (c)+ TMP_36
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_39 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_2', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = sumUSD_2 (c)* TMP_40
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1(uint256) := TMP_42(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
token_1(address) := ϕ(['USDV_1', 'VADER_2', 'VADER_4'])
[i]Type for token

Name: token Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
_aggregators_1(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_1(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_4 -> LENGTH _pairs_1
[i]Type for REF_4

Name: REF_4 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairCount_1(uint256) := REF_4(uint256)
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumNative_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint256) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_22(bool) = i_2 < pairCount_1
[i]Type for TMP_22

Name: TMP_22 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_5(TwapOracle.PairData) -> _pairs_1[i_2]
[i]Type for REF_5

Name: _pairs Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_1(TwapOracle.PairData) := REF_5(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, price1Average, _x, token1
Finance Type: undef
TMP_50(bool) = sumNative_1 != 0
[i]Type for TMP_50

Name: TMP_50 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_6(address) -> pairData_1.token0
[i]Type for REF_6

Name: REF_6 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_23(bool) = token_1 == REF_6
[i]Type for TMP_23

Name: TMP_23 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_52

Name: TMP_52 Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_53(uint8) = HIGH_LEVEL_CALL, dest:TMP_52(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_53

Name: TMP_53 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_54(uint256) = sumUSD_1 (c)* TMP_53
[i]Type for TMP_54

Name: TMP_54 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ sumNative_1
[i]Type for TMP_55

Name: TMP_55 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
result_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumNative_3(uint256) := ϕ(['sumNative_2', 'sumNative_1'])
[i]Type for sumNative

Name: sumNative Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
sumUSD_3(uint256) := ϕ(['sumUSD_2', 'sumUSD_1'])
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_43(bool) = sumNative_3 != 0
[i]Type for TMP_43

Name: TMP_43 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_44(None) = SOLIDITY_CALL require(bool,string)(TMP_43,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_7(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_7

Name: REF_7 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_24(FixedPoint.uq144x112) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.mul(FixedPoint.uq112x112,uint256), arguments:['REF_7', '1'] 
[i]Type for TMP_24

Name: TMP_24 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_25(uint144) = LIBRARY_CALL, dest:FixedPoint, function:FixedPoint.decode144(FixedPoint.uq144x112), arguments:['TMP_24'] 
[i]Type for TMP_25

Name: TMP_25 Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
sumNative_2(uint256) = sumNative_1 (c)+ TMP_25
[i]Type for sumNative

Name: sumNative Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
sumUSD_4(uint256) = sumUSD_1 (c)+ result_3
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
TMP_45 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_45

Name: TMP_45 Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_46(uint8) = HIGH_LEVEL_CALL, dest:TMP_45(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_46

Name: TMP_46 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_4(mapping(address => address)) := ϕ(['_aggregators_3', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_4(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_3', '_pairs_19', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = sumUSD_3 (c)* TMP_46
[i]Type for TMP_47

Name: TMP_47 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_48(uint256) = TMP_47 (c)/ sumNative_3
[i]Type for TMP_48

Name: TMP_48 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
result_2(uint256) := TMP_48(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
REF_10(FixedPoint.uq112x112) -> pairData_1.price1Average
[i]Type for REF_10

Name: REF_10 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_11(uint224) -> REF_10._x
[i]Type for REF_11

Name: REF_11 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_26(bool) = REF_11 != 0
[i]Type for TMP_26

Name: TMP_26 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(uint256) := i_2(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_49

Name: TMP_49 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint256) = i_2 (c)+ 1
[i]Type for i

Name: i Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_27(bool) = sumNative_2 != 0
[i]Type for TMP_27

Name: TMP_27 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)
[i]Type for TMP_28

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(address) -> pairData_1.token1
[i]Type for REF_12

Name: REF_12 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_13(address) -> _aggregators_1[REF_12]
[i]Type for REF_13

Name: _aggregators Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29 = CONVERT REF_13 to AggregatorV3Interface
[i]Type for TMP_29

Name: TMP_29 Function: consult
Num: 
Den: 
Address: 3
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
TUPLE_0(uint80,int256,uint256,uint256,uint80) = HIGH_LEVEL_CALL, dest:TMP_29(AggregatorV3Interface), function:latestRoundData, arguments:[]  
[i]Type for TUPLE_0

Name: TUPLE_0 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_aggregators_2(mapping(address => address)) := ϕ(['_aggregators_1', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_2(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
roundID_1(uint80)= UNPACK TUPLE_0 index: 0 
[i]Type for roundID

Name: roundID Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price_1(int256)= UNPACK TUPLE_0 index: 1 
[i]Type for price

Name: price Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
answeredInRound_1(uint80)= UNPACK TUPLE_0 index: 4 
[i]Type for answeredInRound

Name: answeredInRound Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(bool) = answeredInRound_1 >= roundID_1
[i]Type for TMP_30

Name: TMP_30 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,TwapOracle::consult: stale chainlink price)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(bool) = price_1 != 0
[i]Type for TMP_32

Name: TMP_32 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,TwapOracle::consult: chainlink malfunction)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_34 = CONVERT price_1 to uint256
[i]Type for TMP_34

Name: TMP_34 Function: consult
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_35(uint256) = 10 (c)** 10
[i]Type for TMP_35

Name: TMP_35 Function: consult
Num: 
Den: 
Address: u
Norm: 10
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_36(uint256) = TMP_34 (c)* TMP_35
[i]Type for TMP_36

Name: TMP_36 Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
sumUSD_2(uint256) = sumUSD_1 (c)+ TMP_36
[i]Type for sumUSD

Name: sumUSD Function: consult
Num: 1
Den: 2
Address: u
Norm: 22
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_37(bool) = sumNative_2 != 0
[i]Type for TMP_37

Name: TMP_37 Function: consult
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_38(None) = SOLIDITY_CALL require(bool,string)(TMP_37,TwapOracle::consult: Sum of native is zero)
[i]Type for TMP_38

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_39 = CONVERT token_1 to IERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: consult
Num: -1
Den: -1
Address: 1
Norm: 18
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
TMP_40(uint8) = HIGH_LEVEL_CALL, dest:TMP_39(IERC20Metadata), function:decimals, arguments:[]  
[i]Type for TMP_40

Name: TMP_40 Function: consult
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_aggregators_3(mapping(address => address)) := ϕ(['_aggregators_2', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: consult
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_3(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_2', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: consult
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = sumUSD_2 (c)* TMP_40
[i]Type for TMP_41

Name: TMP_41 Function: consult
Num: 1
Den: 2
Address: u
Norm: u
LF: None
Value: 10000000000
Fields: 
Finance Type: undef
TMP_42(uint256) = TMP_41 (c)/ sumNative_2
[i]Type for TMP_42

Name: TMP_42 Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
result_1(uint256) := TMP_42(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: consult
Num: 1
Den: 2
Address: u
Norm: 10
LF: None
Value: 0
Fields: 
Finance Type: undef
[i]Type for TMP_57

Name: TMP_57 Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
tUSDInVader_1(uint256) := TMP_57(uint256)
Finance type key: (-1, -1)
[i]Type for tUSDInVader

Name: tUSDInVader Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_58(uint256) = tUSDInUSDV_1 (c)/ tUSDInVader_1
[i]Type for TMP_58

Name: TMP_58 Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
result_1(uint256) := TMP_58(uint256)
Finance type key: (-1, -1)
[i]Type for result

Name: result Function: getRate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



initialize
VADER_6(address) := ϕ(['VADER_0', 'VADER_3', 'VADER_15', 'VADER_5', 'VADER_12', 'VADER_8'])
[i]Type for VADER

Name: VADER Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
USDV_3(address) := ϕ(['USDV_8', 'USDV_0', 'USDV_5', 'USDV_2'])
[i]Type for USDV

Name: USDV Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, Ownable.onlyOwner()()
INTERNAL_CALL, Ownable._checkOwner()()
TMP_2(address) = INTERNAL_CALL, Ownable.owner()()
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
[i]Type for _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 4
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
RETURN _owner_1
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
[i]Type for _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 4
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
RETURN _owner_1
[i]Type for TMP_2

Name: TMP_2 Function: _checkOwner
Num: -1
Den: -1
Address: 4
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
TMP_3(address) = INTERNAL_CALL, Context._msgSender()()
RETURN msg.sender
RETURN msg.sender
[i]Type for TMP_3

Name: TMP_3 Function: _checkOwner
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_4(bool) = TMP_2 == TMP_3
[i]Type for TMP_4

Name: TMP_4 Function: _checkOwner
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,Ownable: caller is not the owner)
[i]Type for TMP_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_2(address) = INTERNAL_CALL, Ownable.owner()()
[i]Type for TMP_2

Name: TMP_2 Function: _checkOwner
Num: -1
Den: -1
Address: 4
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
TMP_3(address) = INTERNAL_CALL, Context._msgSender()()
[i]Type for TMP_3

Name: TMP_3 Function: _checkOwner
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_4(bool) = TMP_2 == TMP_3
[i]Type for TMP_4

Name: TMP_4 Function: _checkOwner
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,Ownable: caller is not the owner)
[i]Type for TMP_5

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, Ownable._checkOwner()()
TMP_66 = CONVERT 0 to address
[i]Type for TMP_66

Name: TMP_66 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_67(bool) = VADER_7 == TMP_66
[i]Type for TMP_67

Name: TMP_67 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,TwapOracle::initialize: Vader already set)
[i]Type for TMP_68

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_69 = CONVERT 0 to address
[i]Type for TMP_69

Name: TMP_69 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_70(bool) = USDV_4 == TMP_69
[i]Type for TMP_70

Name: TMP_70 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,TwapOracle::initialize: USDV already set)
[i]Type for TMP_71

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_72 = CONVERT 0 to address
[i]Type for TMP_72

Name: TMP_72 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_73(bool) = _usdv_1 != TMP_72
[i]Type for TMP_73

Name: TMP_73 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,TwapOracle::initialize: can not set to a zero address)
[i]Type for TMP_74

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_75 = CONVERT 0 to address
[i]Type for TMP_75

Name: TMP_75 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_76(bool) = _vader_1 != TMP_75
[i]Type for TMP_76

Name: TMP_76 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,TwapOracle::initialize: can not set to a zero address)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
VADER_8(address) := _vader_1(address)
Finance type key: (-1, -1)
[i]Type for VADER

Name: VADER Function: initialize
Num: -1
Den: -1
Address: -995
Norm: 18
LF: _vader
Value: u
Fields: 
Finance Type: undef
USDV_5(address) := _usdv_1(address)
Finance type key: (-1, -1)
[i]Type for USDV

Name: USDV Function: initialize
Num: -1
Den: -1
Address: -996
Norm: 6
LF: _usdv
Value: u
Fields: 
Finance Type: undef
VADER_6(address) := ϕ(['VADER_0', 'VADER_3', 'VADER_15', 'VADER_5', 'VADER_12', 'VADER_8'])
[i]Type for VADER

Name: VADER Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
USDV_3(address) := ϕ(['USDV_8', 'USDV_0', 'USDV_5', 'USDV_2'])
[i]Type for USDV

Name: USDV Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, Ownable.onlyOwner()()
TMP_66 = CONVERT 0 to address
[i]Type for TMP_66

Name: TMP_66 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_67(bool) = VADER_7 == TMP_66
[i]Type for TMP_67

Name: TMP_67 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_68(None) = SOLIDITY_CALL require(bool,string)(TMP_67,TwapOracle::initialize: Vader already set)
[i]Type for TMP_68

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_69 = CONVERT 0 to address
[i]Type for TMP_69

Name: TMP_69 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_70(bool) = USDV_4 == TMP_69
[i]Type for TMP_70

Name: TMP_70 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_71(None) = SOLIDITY_CALL require(bool,string)(TMP_70,TwapOracle::initialize: USDV already set)
[i]Type for TMP_71

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_72 = CONVERT 0 to address
[i]Type for TMP_72

Name: TMP_72 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_73(bool) = _usdv_1 != TMP_72
[i]Type for TMP_73

Name: TMP_73 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_74(None) = SOLIDITY_CALL require(bool,string)(TMP_73,TwapOracle::initialize: can not set to a zero address)
[i]Type for TMP_74

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_75 = CONVERT 0 to address
[i]Type for TMP_75

Name: TMP_75 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_76(bool) = _vader_1 != TMP_75
[i]Type for TMP_76

Name: TMP_76 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,TwapOracle::initialize: can not set to a zero address)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
VADER_8(address) := _vader_1(address)
Finance type key: (-1, -1)
[i]Type for VADER

Name: VADER Function: initialize
Num: -1
Den: -1
Address: -995
Norm: 18
LF: _vader
Value: u
Fields: 
Finance Type: undef
USDV_5(address) := _usdv_1(address)
Finance type key: (-1, -1)
[i]Type for USDV

Name: USDV Function: initialize
Num: -1
Den: -1
Address: -996
Norm: 6
LF: _usdv
Value: u
Fields: 
Finance Type: undef



registerAggregator
_aggregators_5(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: registerAggregator
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, Ownable.onlyOwner()()
MODIFIER_CALL, TwapOracle.initialized()()
VADER_17(address) := ϕ(['VADER_0', 'VADER_3', 'VADER_15', 'VADER_5', 'VADER_12', 'VADER_8'])
[i]Type for VADER

Name: VADER Function: initialized
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
USDV_9(address) := ϕ(['USDV_8', 'USDV_0', 'USDV_5', 'USDV_2'])
[i]Type for USDV

Name: USDV Function: initialized
Num: -1
Den: -1
Address: 2
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
TMP_142 = CONVERT 0 to address
[i]Type for TMP_142

Name: TMP_142 Function: initialized
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_143(bool) = VADER_17 != TMP_142
[i]Type for TMP_143

Name: TMP_143 Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_144 = CONVERT 0 to address
[i]Type for TMP_144

Name: TMP_144 Function: initialized
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_145(bool) = USDV_9 != TMP_144
[i]Type for TMP_145

Name: TMP_145 Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_146(bool) = TMP_143 && TMP_145
[i]Type for TMP_146

Name: TMP_146 Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,TwapOracle::initialized: not initialized)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
VADER_17(address) := ϕ(['VADER_0', 'VADER_3', 'VADER_15', 'VADER_5', 'VADER_12', 'VADER_8'])
[i]Type for VADER

Name: VADER Function: initialized
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
USDV_9(address) := ϕ(['USDV_8', 'USDV_0', 'USDV_5', 'USDV_2'])
[i]Type for USDV

Name: USDV Function: initialized
Num: -1
Den: -1
Address: 2
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
TMP_142 = CONVERT 0 to address
[i]Type for TMP_142

Name: TMP_142 Function: initialized
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_143(bool) = VADER_17 != TMP_142
[i]Type for TMP_143

Name: TMP_143 Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_144 = CONVERT 0 to address
[i]Type for TMP_144

Name: TMP_144 Function: initialized
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_145(bool) = USDV_9 != TMP_144
[i]Type for TMP_145

Name: TMP_145 Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_146(bool) = TMP_143 && TMP_145
[i]Type for TMP_146

Name: TMP_146 Function: initialized
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,TwapOracle::initialized: not initialized)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80 = CONVERT 0 to address
[i]Type for TMP_80

Name: TMP_80 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = asset_1 != TMP_80
[i]Type for TMP_81

Name: TMP_81 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,TwapOracle::registerAggregator: asset zero address provided)
[i]Type for TMP_82

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83 = CONVERT 0 to address
[i]Type for TMP_83

Name: TMP_83 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_84(bool) = aggregator_1 != TMP_83
[i]Type for TMP_84

Name: TMP_84 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85(None) = SOLIDITY_CALL require(bool,string)(TMP_84,TwapOracle::registerAggregator: aggregator zero address provided)
[i]Type for TMP_85

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_18(address) -> _aggregators_7[asset_1]
[i]Type for REF_18

Name: None Function: None
Num: -994
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86 = CONVERT 0 to address
[i]Type for TMP_86

Name: TMP_86 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_87(bool) = REF_18 == TMP_86
[i]Type for TMP_87

Name: TMP_87 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,TwapOracle::registerAggregator: aggregator already exists)
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19(address) -> _aggregators_7[asset_1]
[i]Type for REF_19

Name: None Function: None
Num: -994
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_aggregators_8(mapping(address => address)) := ϕ(['_aggregators_7'])
[i]Type for _aggregators

Name: _aggregators Function: registerAggregator
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19 (->_aggregators_8) := aggregator_1(address)
Handling trace

Name: aggregator_1 Function: registerAggregator
Num: 
Den: 
Address: -993
Norm: u
LF: aggregator
Value: u
Fields: 
Finance Type: undef

Name: REF_19 Function: registerAggregator
Num: -994
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d:{-994: -1}
Error with REF_19 in function registerAggregator
Error with: REF_19 in function registerAggregator
Finance type key: (-1, -1)
[i]Type for REF_19

Name: REF_19 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_aggregators_5(mapping(address => address)) := ϕ(['_aggregators_0', '_aggregators_4', '_aggregators_8'])
[i]Type for _aggregators

Name: _aggregators Function: registerAggregator
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, Ownable.onlyOwner()()
MODIFIER_CALL, TwapOracle.initialized()()
TMP_80 = CONVERT 0 to address
[i]Type for TMP_80

Name: TMP_80 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(bool) = asset_1 != TMP_80
[i]Type for TMP_81

Name: TMP_81 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,TwapOracle::registerAggregator: asset zero address provided)
[i]Type for TMP_82

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83 = CONVERT 0 to address
[i]Type for TMP_83

Name: TMP_83 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_84(bool) = aggregator_1 != TMP_83
[i]Type for TMP_84

Name: TMP_84 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85(None) = SOLIDITY_CALL require(bool,string)(TMP_84,TwapOracle::registerAggregator: aggregator zero address provided)
[i]Type for TMP_85

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_18(address) -> _aggregators_7[asset_1]
[i]Type for REF_18

Name: None Function: None
Num: -994
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_86 = CONVERT 0 to address
[i]Type for TMP_86

Name: TMP_86 Function: registerAggregator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_87(bool) = REF_18 == TMP_86
[i]Type for TMP_87

Name: TMP_87 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_88(None) = SOLIDITY_CALL require(bool,string)(TMP_87,TwapOracle::registerAggregator: aggregator already exists)
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19(address) -> _aggregators_7[asset_1]
[i]Type for REF_19

Name: None Function: None
Num: -994
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_aggregators_8(mapping(address => address)) := ϕ(['_aggregators_7'])
[i]Type for _aggregators

Name: _aggregators Function: registerAggregator
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_19 (->_aggregators_8) := aggregator_1(address)
Handling trace

Name: aggregator_1 Function: registerAggregator
Num: 
Den: 
Address: -993
Norm: u
LF: aggregator
Value: u
Fields: 
Finance Type: undef

Name: REF_19 Function: registerAggregator
Num: -994
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
d:{-994: -1}
Finance type key: (-1, -1)
[i]Type for REF_19

Name: REF_19 Function: registerAggregator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



registerPair
VADER_9(address) := ϕ(['VADER_0', 'VADER_3', 'VADER_15', 'VADER_5', 'VADER_12', 'VADER_8'])
[i]Type for VADER

Name: VADER Function: registerPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
USDV_6(address) := ϕ(['USDV_8', 'USDV_0', 'USDV_5', 'USDV_2'])
[i]Type for USDV

Name: USDV Function: registerPair
Num: -1
Den: -1
Address: 2
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
_vaderPool_2(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_7', '_vaderPool_0', '_vaderPool_1'])
[i]Type for _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_5(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, Ownable.onlyOwner()()
MODIFIER_CALL, TwapOracle.initialized()()
TMP_91(bool) = token0_1 == VADER_11
[i]Type for TMP_91

Name: TMP_91 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(bool) = token0_1 == USDV_8
[i]Type for TMP_92

Name: TMP_92 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_93(bool) = TMP_91 || TMP_92
[i]Type for TMP_93

Name: TMP_93 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,TwapOracle::registerPair: Invalid token0 address)
[i]Type for TMP_94

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95(bool) = token0_1 != token1_1
[i]Type for TMP_95

Name: TMP_95 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,TwapOracle::registerPair: Same token address)
[i]Type for TMP_96

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_97(bool) = INTERNAL_CALL, TwapOracle.pairExists(address,address)(token0_1,token1_1)
token0_1(address) := ϕ(['token0_1'])
[i]Type for token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_1(address) := ϕ(['token1_1'])
[i]Type for token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_2', '_pairExists_1', '_pairExists_0'])
[i]Type for _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: TMP_18 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash0_1(bytes32) := TMP_18(bytes32)
Finance type key: (-1, -1)
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash1_1(bytes32) := TMP_20(bytes32)
Finance type key: (-1, -1)
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_2(bool) -> _pairExists_1[pairHash0_1]
[i]Type for REF_2

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(bool) -> _pairExists_1[pairHash1_1]
[i]Type for REF_3

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_21(bool) = REF_2 || REF_3
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_21
token0_1(address) := ϕ(['token0_1'])
[i]Type for token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_1(address) := ϕ(['token1_1'])
[i]Type for token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_2', '_pairExists_1', '_pairExists_0'])
[i]Type for _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: TMP_18 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash0_1(bytes32) := TMP_18(bytes32)
Finance type key: (-1, -1)
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash1_1(bytes32) := TMP_20(bytes32)
Finance type key: (-1, -1)
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_2(bool) -> _pairExists_1[pairHash0_1]
[i]Type for REF_2

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(bool) -> _pairExists_1[pairHash1_1]
[i]Type for REF_3

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_21(bool) = REF_2 || REF_3
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_21
[i]Type for TMP_97

Name: TMP_97 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_98 = ! TMP_97 
[i]Type for TMP_98

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,TwapOracle::registerPair: Pair exists)
[i]Type for TMP_99

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(bool) = token0_1 == VADER_12
[i]Type for TMP_100

Name: TMP_100 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_107 = CONVERT _vaderPool_5 to address
[i]Type for TMP_107

Name: TMP_107 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairAddr_1(address) := TMP_107(address)
Finance type key: (-1, -1)
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT factory_1 to IUniswapV2Factory
[i]Type for TMP_101

Name: TMP_101 Function: registerPair
Num: 
Den: 
Address: -992
Norm: u
LF: UniswapV2Factory
Value: u
Fields: 
Finance Type: undef
TMP_102(address) = HIGH_LEVEL_CALL, dest:TMP_101(IUniswapV2Factory), function:getPair, arguments:['token0_1', 'token1_1']  
[i]Type for TMP_102

Name: TMP_102 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_11(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_10', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to IUniswapV2Pair
[i]Type for TMP_103

Name: TMP_103 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
pair_1(IUniswapV2Pair) := TMP_103(IUniswapV2Pair)
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
TMP_108 = CONVERT token1_1 to IERC20
[i]Type for TMP_108

Name: TMP_108 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: ERC20
Value: u
Fields: 
Finance Type: undef
TUPLE_2(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_5(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_108']  
[i]Type for TUPLE_2

Name: TUPLE_2 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_vaderPool_6(IVaderPoolV2) := ϕ(['_vaderPool_7', '_vaderPool_10', '_vaderPool_5', '_vaderPool_1'])
[i]Type for _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_9(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_1', '_pairs_16', '_pairs_8'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price0CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 0 
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
price1CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 1 
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_104 = CONVERT pair_1 to address
[i]Type for TMP_104

Name: TMP_104 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
pairAddr_2(address) := TMP_104(address)
Finance type key: (-1, -1)
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
TMP_109 = CONVERT token1_1 to IERC20
[i]Type for TMP_109

Name: TMP_109 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: ERC20
Value: u
Fields: 
Finance Type: undef
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_6(IVaderPoolV2), function:getReserves, arguments:['TMP_109']  
[i]Type for TUPLE_3

Name: TUPLE_3 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_vaderPool_7(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_6', '_vaderPool_5', '_vaderPool_7', '_vaderPool_1'])
[i]Type for _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_10(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_1', '_pairs_9', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_1(uint112)= UNPACK TUPLE_3 index: 0 
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: 1
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
reserve1_1(uint112)= UNPACK TUPLE_3 index: 1 
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
blockTimestampLast_1(uint32)= UNPACK TUPLE_3 index: 2 
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairAddr_3(address) := ϕ(['pairAddr_1', 'pairAddr_2'])
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price0CumulativeLast_3(uint256) := ϕ(['price0CumulativeLast_1', 'price0CumulativeLast_2'])
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
price1CumulativeLast_3(uint256) := ϕ(['price1CumulativeLast_1', 'price1CumulativeLast_2'])
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
reserve0_3(uint112) := ϕ(['reserve0_2', 'reserve0_1'])
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: 1
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
reserve1_3(uint112) := ϕ(['reserve1_2', 'reserve1_1'])
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
blockTimestampLast_3(uint32) := ϕ(['blockTimestampLast_2', 'blockTimestampLast_1'])
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price0CumulativeLast, arguments:[]  
[i]Type for TMP_105

Name: TMP_105 Function: registerPair
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_pairs_12(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_11', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price0CumulativeLast_2(uint256) := TMP_105(uint256)
Finance type key: (-1, -1)
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_110(bool) = reserve0_3 != 0
[i]Type for TMP_110

Name: TMP_110 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_111(bool) = reserve1_3 != 0
[i]Type for TMP_111

Name: TMP_111 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_112(bool) = TMP_110 && TMP_111
[i]Type for TMP_112

Name: TMP_112 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,TwapOracle::registerPair: No reserves)
[i]Type for TMP_113

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price1CumulativeLast, arguments:[]  
[i]Type for TMP_106

Name: TMP_106 Function: registerPair
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_pairs_13(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_1', '_pairs_16', '_pairs_12'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price1CumulativeLast_2(uint256) := TMP_106(uint256)
Finance type key: (-1, -1)
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_114(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_114

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_115(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_114)
[i]Type for TMP_115

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_27(bool) -> _pairExists_1[TMP_115]
[i]Type for REF_27

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairExists_2(mapping(bytes32 => bool)) := ϕ(['_pairExists_1'])
[i]Type for _pairExists

Name: _pairExists Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_27 (->_pairExists_2) := True(bool)
Finance type key: (-1, -1)
[i]Type for REF_27

Name: REF_27 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
TUPLE_1(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
[i]Type for TUPLE_1

Name: TUPLE_1 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_14(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_1', '_pairs_16', '_pairs_13'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_2(uint112)= UNPACK TUPLE_1 index: 0 
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: 1
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
reserve1_2(uint112)= UNPACK TUPLE_1 index: 1 
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
blockTimestampLast_2(uint32)= UNPACK TUPLE_1 index: 2 
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116 = new uq112x112(0)
[i]Type for TMP_116

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_117 = new uq112x112(0)
[i]Type for TMP_117

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_118 = new PairData(pairAddr_3,token0_1,token1_1,price0CumulativeLast_3,price1CumulativeLast_3,blockTimestampLast_3,TMP_116,TMP_117)
[i]Type for TMP_118

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_31 -> LENGTH _pairs_14
[i]Type for REF_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(uint256) := REF_31(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_120

Name: TMP_120 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_121(uint256) = TMP_120 (c)+ 1
[i]Type for TMP_121

Name: TMP_121 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
_pairs_15(TwapOracle.PairData[]) := ϕ(['_pairs_14'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_31 (->_pairs_15) := TMP_121(uint256)
Finance type key: (-1, -1)
[i]Type for REF_31

Name: REF_31 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
REF_32(TwapOracle.PairData) -> _pairs_15[TMP_120]
[i]Type for REF_32

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_16(TwapOracle.PairData[]) := ϕ(['_pairs_15'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_32 (->_pairs_16) := TMP_118(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for REF_32

Name: REF_32 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
VADER_9(address) := ϕ(['VADER_0', 'VADER_3', 'VADER_15', 'VADER_5', 'VADER_12', 'VADER_8'])
[i]Type for VADER

Name: VADER Function: registerPair
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
USDV_6(address) := ϕ(['USDV_8', 'USDV_0', 'USDV_5', 'USDV_2'])
[i]Type for USDV

Name: USDV Function: registerPair
Num: -1
Den: -1
Address: 2
Norm: 6
LF: USDV
Value: u
Fields: 
Finance Type: undef
_vaderPool_2(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_7', '_vaderPool_0', '_vaderPool_1'])
[i]Type for _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_5(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, Ownable.onlyOwner()()
MODIFIER_CALL, TwapOracle.initialized()()
TMP_91(bool) = token0_1 == VADER_11
[i]Type for TMP_91

Name: TMP_91 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92(bool) = token0_1 == USDV_8
[i]Type for TMP_92

Name: TMP_92 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_93(bool) = TMP_91 || TMP_92
[i]Type for TMP_93

Name: TMP_93 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,TwapOracle::registerPair: Invalid token0 address)
[i]Type for TMP_94

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_95(bool) = token0_1 != token1_1
[i]Type for TMP_95

Name: TMP_95 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,TwapOracle::registerPair: Same token address)
[i]Type for TMP_96

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_97(bool) = INTERNAL_CALL, TwapOracle.pairExists(address,address)(token0_1,token1_1)
token0_1(address) := ϕ(['token0_1'])
[i]Type for token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_1(address) := ϕ(['token1_1'])
[i]Type for token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_2', '_pairExists_1', '_pairExists_0'])
[i]Type for _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: TMP_18 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash0_1(bytes32) := TMP_18(bytes32)
Finance type key: (-1, -1)
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash1_1(bytes32) := TMP_20(bytes32)
Finance type key: (-1, -1)
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_2(bool) -> _pairExists_1[pairHash0_1]
[i]Type for REF_2

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(bool) -> _pairExists_1[pairHash1_1]
[i]Type for REF_3

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_21(bool) = REF_2 || REF_3
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_21
token0_1(address) := ϕ(['token0_1'])
[i]Type for token0

Name: token0 Function: pairExists
Num: 
Den: 
Address: -991
Norm: 18
LF: token0
Value: u
Fields: 
Finance Type: undef
token1_1(address) := ϕ(['token1_1'])
[i]Type for token1

Name: token1 Function: pairExists
Num: 
Den: 
Address: -990
Norm: 6
LF: token1
Value: u
Fields: 
Finance Type: undef
_pairExists_1(mapping(bytes32 => bool)) := ϕ(['_pairExists_2', '_pairExists_1', '_pairExists_0'])
[i]Type for _pairExists

Name: _pairExists Function: pairExists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_17(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_17

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_18(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_17)
[i]Type for TMP_18

Name: TMP_18 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash0_1(bytes32) := TMP_18(bytes32)
Finance type key: (-1, -1)
[i]Type for pairHash0

Name: pairHash0 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_19(bytes) = SOLIDITY_CALL abi.encodePacked()(token1_1,token0_1)
[i]Type for TMP_19

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_20(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_19)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairHash1_1(bytes32) := TMP_20(bytes32)
Finance type key: (-1, -1)
[i]Type for pairHash1

Name: pairHash1 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_2(bool) -> _pairExists_1[pairHash0_1]
[i]Type for REF_2

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_3(bool) -> _pairExists_1[pairHash1_1]
[i]Type for REF_3

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_21(bool) = REF_2 || REF_3
[i]Type for TMP_21

Name: TMP_21 Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_21
[i]Type for TMP_97

Name: TMP_97 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_98 = ! TMP_97 
[i]Type for TMP_98

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_99(None) = SOLIDITY_CALL require(bool,string)(TMP_98,TwapOracle::registerPair: Pair exists)
[i]Type for TMP_99

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_100(bool) = token0_1 == VADER_12
[i]Type for TMP_100

Name: TMP_100 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_107 = CONVERT _vaderPool_5 to address
[i]Type for TMP_107

Name: TMP_107 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairAddr_1(address) := TMP_107(address)
Finance type key: (-1, -1)
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_101 = CONVERT factory_1 to IUniswapV2Factory
[i]Type for TMP_101

Name: TMP_101 Function: registerPair
Num: 
Den: 
Address: -992
Norm: u
LF: UniswapV2Factory
Value: u
Fields: 
Finance Type: undef
TMP_102(address) = HIGH_LEVEL_CALL, dest:TMP_101(IUniswapV2Factory), function:getPair, arguments:['token0_1', 'token1_1']  
[i]Type for TMP_102

Name: TMP_102 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_11(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_10', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_103 = CONVERT TMP_102 to IUniswapV2Pair
[i]Type for TMP_103

Name: TMP_103 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
pair_1(IUniswapV2Pair) := TMP_103(IUniswapV2Pair)
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
TMP_108 = CONVERT token1_1 to IERC20
[i]Type for TMP_108

Name: TMP_108 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: ERC20
Value: u
Fields: 
Finance Type: undef
TUPLE_2(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_5(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_108']  
[i]Type for TUPLE_2

Name: TUPLE_2 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_vaderPool_6(IVaderPoolV2) := ϕ(['_vaderPool_7', '_vaderPool_10', '_vaderPool_5', '_vaderPool_1'])
[i]Type for _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_9(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_1', '_pairs_16', '_pairs_8'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price0CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 0 
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
price1CumulativeLast_1(uint256)= UNPACK TUPLE_2 index: 1 
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_104 = CONVERT pair_1 to address
[i]Type for TMP_104

Name: TMP_104 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
pairAddr_2(address) := TMP_104(address)
Finance type key: (-1, -1)
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: UniswapV2Pair
Value: u
Fields: 
Finance Type: undef
TMP_109 = CONVERT token1_1 to IERC20
[i]Type for TMP_109

Name: TMP_109 Function: registerPair
Num: 
Den: 
Address: -990
Norm: 6
LF: ERC20
Value: u
Fields: 
Finance Type: undef
TUPLE_3(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_6(IVaderPoolV2), function:getReserves, arguments:['TMP_109']  
[i]Type for TUPLE_3

Name: TUPLE_3 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_vaderPool_7(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_6', '_vaderPool_5', '_vaderPool_7', '_vaderPool_1'])
[i]Type for _vaderPool

Name: _vaderPool Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_10(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_1', '_pairs_9', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_1(uint112)= UNPACK TUPLE_3 index: 0 
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: 1
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
reserve1_1(uint112)= UNPACK TUPLE_3 index: 1 
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
blockTimestampLast_1(uint32)= UNPACK TUPLE_3 index: 2 
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairAddr_3(address) := ϕ(['pairAddr_1', 'pairAddr_2'])
[i]Type for pairAddr

Name: pairAddr Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price0CumulativeLast_3(uint256) := ϕ(['price0CumulativeLast_1', 'price0CumulativeLast_2'])
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
price1CumulativeLast_3(uint256) := ϕ(['price1CumulativeLast_1', 'price1CumulativeLast_2'])
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
reserve0_3(uint112) := ϕ(['reserve0_2', 'reserve0_1'])
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: 1
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
reserve1_3(uint112) := ϕ(['reserve1_2', 'reserve1_1'])
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
blockTimestampLast_3(uint32) := ϕ(['blockTimestampLast_2', 'blockTimestampLast_1'])
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_105(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price0CumulativeLast, arguments:[]  
[i]Type for TMP_105

Name: TMP_105 Function: registerPair
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_pairs_12(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_11', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price0CumulativeLast_2(uint256) := TMP_105(uint256)
Finance type key: (-1, -1)
[i]Type for price0CumulativeLast

Name: price0CumulativeLast Function: registerPair
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_110(bool) = reserve0_3 != 0
[i]Type for TMP_110

Name: TMP_110 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_111(bool) = reserve1_3 != 0
[i]Type for TMP_111

Name: TMP_111 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_112(bool) = TMP_110 && TMP_111
[i]Type for TMP_112

Name: TMP_112 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_113(None) = SOLIDITY_CALL require(bool,string)(TMP_112,TwapOracle::registerPair: No reserves)
[i]Type for TMP_113

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:price1CumulativeLast, arguments:[]  
[i]Type for TMP_106

Name: TMP_106 Function: registerPair
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
_pairs_13(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_1', '_pairs_16', '_pairs_12'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price1CumulativeLast_2(uint256) := TMP_106(uint256)
Finance type key: (-1, -1)
[i]Type for price1CumulativeLast

Name: price1CumulativeLast Function: registerPair
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_114(bytes) = SOLIDITY_CALL abi.encodePacked()(token0_1,token1_1)
[i]Type for TMP_114

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_115(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_114)
[i]Type for TMP_115

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_27(bool) -> _pairExists_1[TMP_115]
[i]Type for REF_27

Name: _pairExists Function: pairExists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairExists_2(mapping(bytes32 => bool)) := ϕ(['_pairExists_1'])
[i]Type for _pairExists

Name: _pairExists Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_27 (->_pairExists_2) := True(bool)
Finance type key: (-1, -1)
[i]Type for REF_27

Name: REF_27 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
TUPLE_1(uint112,uint112,uint32) = HIGH_LEVEL_CALL, dest:pair_1(IUniswapV2Pair), function:getReserves, arguments:[]  
[i]Type for TUPLE_1

Name: TUPLE_1 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_14(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_1', '_pairs_16', '_pairs_13'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserve0_2(uint112)= UNPACK TUPLE_1 index: 0 
[i]Type for reserve0

Name: reserve0 Function: registerPair
Num: 1
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
reserve1_2(uint112)= UNPACK TUPLE_1 index: 1 
[i]Type for reserve1

Name: reserve1 Function: registerPair
Num: 2
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
blockTimestampLast_2(uint32)= UNPACK TUPLE_1 index: 2 
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116 = new uq112x112(0)
[i]Type for TMP_116

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_117 = new uq112x112(0)
[i]Type for TMP_117

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_118 = new PairData(pairAddr_3,token0_1,token1_1,price0CumulativeLast_3,price1CumulativeLast_3,blockTimestampLast_3,TMP_116,TMP_117)
[i]Type for TMP_118

Name: TMP_118 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_31 -> LENGTH _pairs_14
[i]Type for REF_31

Name: REF_31 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_120(uint256) := REF_31(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_120

Name: TMP_120 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
TMP_121(uint256) = TMP_120 (c)+ 1
[i]Type for TMP_121

Name: TMP_121 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
_pairs_15(TwapOracle.PairData[]) := ϕ(['_pairs_14'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_31 (->_pairs_15) := TMP_121(uint256)
Finance type key: (-1, -1)
[i]Type for REF_31

Name: REF_31 Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
REF_32(TwapOracle.PairData) -> _pairs_15[TMP_120]
[i]Type for REF_32

Name: _pairs Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_16(TwapOracle.PairData[]) := ϕ(['_pairs_15'])
[i]Type for _pairs

Name: _pairs Function: registerPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_32 (->_pairs_16) := TMP_118(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for REF_32

Name: REF_32 Function: registerPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



update
VADER_13(address) := ϕ(['VADER_0', 'VADER_3', 'VADER_15', 'VADER_5', 'VADER_12', 'VADER_8'])
[i]Type for VADER

Name: VADER Function: update
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
_vaderPool_8(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_7', '_vaderPool_0', '_vaderPool_1'])
[i]Type for _vaderPool

Name: _vaderPool Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_updatePeriod_2(uint256) := ϕ(['_updatePeriod_0', '_updatePeriod_1', '_updatePeriod_4'])
[i]Type for _updatePeriod

Name: _updatePeriod Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_17(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, Ownable.onlyOwner()()
MODIFIER_CALL, TwapOracle.initialized()()
REF_33 -> LENGTH _pairs_19
[i]Type for REF_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairCount_1(uint256) := REF_33(uint256)
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint256) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_124(bool) = i_2 < pairCount_1
[i]Type for TMP_124

Name: TMP_124 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_34(TwapOracle.PairData) -> _pairs_19[i_2]
[i]Type for REF_34

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_1 (-> ['_pairs'])(TwapOracle.PairData) := REF_34(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_45(address) -> pairData_1 (-> ['_pairs']).token0
[i]Type for REF_45

Name: REF_45 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_139(bool) = REF_45 == VADER_15
[i]Type for TMP_139

Name: TMP_139 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_47(address) -> pairData_1 (-> ['_pairs']).pair
[i]Type for REF_47

Name: REF_47 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TUPLE_4(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['REF_47'] 
[i]Type for TUPLE_4

Name: TUPLE_4 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price0Cumulative_1(uint256)= UNPACK TUPLE_4 index: 0 
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
price1Cumulative_1(uint256)= UNPACK TUPLE_4 index: 1 
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
blockTimestamp_1(uint32)= UNPACK TUPLE_4 index: 2 
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_49(address) -> pairData_1 (-> ['_pairs']).token1
[i]Type for REF_49

Name: REF_49 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_140 = CONVERT REF_49 to IERC20
[i]Type for TMP_140

Name: TMP_140 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: ERC20
Value: u
Fields: 
Finance Type: undef
TUPLE_5(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_10(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_140']  
[i]Type for TUPLE_5

Name: TUPLE_5 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
VADER_16(address) := ϕ(['VADER_3', 'VADER_15', 'VADER_5', 'VADER_12', 'VADER_8'])
[i]Type for VADER

Name: VADER Function: update
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
_vaderPool_11(IVaderPoolV2) := ϕ(['_vaderPool_7', '_vaderPool_10', '_vaderPool_5', '_vaderPool_1'])
[i]Type for _vaderPool

Name: _vaderPool Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_updatePeriod_5(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4'])
[i]Type for _updatePeriod

Name: _updatePeriod Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_20(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price0Cumulative_2(uint256)= UNPACK TUPLE_5 index: 0 
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
price1Cumulative_2(uint256)= UNPACK TUPLE_5 index: 1 
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
blockTimestamp_2(uint32)= UNPACK TUPLE_5 index: 2 
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price0Cumulative_3(uint256) := ϕ(['price0Cumulative_1', 'price0Cumulative_2'])
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
price1Cumulative_3(uint256) := ϕ(['price1Cumulative_1', 'price1Cumulative_2'])
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
blockTimestamp_3(uint32) := ϕ(['blockTimestamp_1', 'blockTimestamp_2'])
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_35(uint32) -> pairData_1 (-> ['_pairs']).blockTimestampLast
[i]Type for REF_35

Name: REF_35 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_125(uint32) = blockTimestamp_3 (c)- REF_35
[i]Type for TMP_125

Name: TMP_125 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
timeElapsed_1(uint32) := TMP_125(uint32)
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_126(bool) = timeElapsed_1 >= _updatePeriod_5
[i]Type for TMP_126

Name: TMP_126 Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,TwapOracle::update: Period not elapsed)
[i]Type for TMP_127

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_36(FixedPoint.uq112x112) -> pairData_1 (-> ['_pairs']).price0Average
[i]Type for REF_36

Name: REF_36 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_38(uint256) -> pairData_1 (-> ['_pairs']).price0CumulativeLast
[i]Type for REF_38

Name: REF_38 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_128(uint256) = price0Cumulative_3 - REF_38
[i]Type for TMP_128

Name: TMP_128 Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_129(uint256) = TMP_128 / timeElapsed_1
[i]Type for TMP_129

Name: TMP_129 Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_130 = CONVERT TMP_129 to uint224
[i]Type for TMP_130

Name: TMP_130 Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_131 = new uq112x112(TMP_130)
[i]Type for TMP_131

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_2 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_1 (-> ['_pairs'])"])
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, token0, pair, token1, blockTimestampLast, price0CumulativeLast
Finance Type: undef
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
Finance type key: (-1, -1)
[i]Type for REF_36

Name: REF_36 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
_pairs_21(TwapOracle.PairData[]) := ϕ(["pairData_2 (-> ['_pairs'])"])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_39(FixedPoint.uq112x112) -> pairData_2 (-> ['_pairs']).price1Average
[i]Type for REF_39

Name: REF_39 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_41(uint256) -> pairData_2 (-> ['_pairs']).price1CumulativeLast
[i]Type for REF_41

Name: REF_41 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_132(uint256) = price1Cumulative_3 - REF_41
[i]Type for TMP_132

Name: TMP_132 Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_133(uint256) = TMP_132 / timeElapsed_1
[i]Type for TMP_133

Name: TMP_133 Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_134 = CONVERT TMP_133 to uint224
[i]Type for TMP_134

Name: TMP_134 Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_135 = new uq112x112(TMP_134)
[i]Type for TMP_135

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_3 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_2 (-> ['_pairs'])"])
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, pair, token1, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
Finance type key: (-1, -1)
[i]Type for REF_39

Name: REF_39 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
_pairs_22(TwapOracle.PairData[]) := ϕ(["pairData_3 (-> ['_pairs'])"])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_42(uint256) -> pairData_3 (-> ['_pairs']).price0CumulativeLast
[i]Type for REF_42

Name: REF_42 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
pairData_4 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_3 (-> ['_pairs'])"])
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, pair, token1, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
REF_42 (->pairData_4 (-> ['_pairs'])) := price0Cumulative_3(uint256)
Finance type key: (-1, -1)
[i]Type for REF_42

Name: REF_42 Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
_pairs_23(TwapOracle.PairData[]) := ϕ(["pairData_4 (-> ['_pairs'])"])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_43(uint256) -> pairData_4 (-> ['_pairs']).price1CumulativeLast
[i]Type for REF_43

Name: REF_43 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
pairData_5 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_4 (-> ['_pairs'])"])
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, pair, token1, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
REF_43 (->pairData_5 (-> ['_pairs'])) := price1Cumulative_3(uint256)
Finance type key: (-1, -1)
[i]Type for REF_43

Name: REF_43 Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
_pairs_24(TwapOracle.PairData[]) := ϕ(["pairData_5 (-> ['_pairs'])"])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_44(uint32) -> pairData_5 (-> ['_pairs']).blockTimestampLast
[i]Type for REF_44

Name: REF_44 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
pairData_6 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_5 (-> ['_pairs'])"])
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, token0, pair, token1, blockTimestampLast, price0CumulativeLast, price1CumulativeLast
Finance Type: undef
REF_44 (->pairData_6 (-> ['_pairs'])) := blockTimestamp_3(uint32)
Finance type key: (-1, -1)
[i]Type for REF_44

Name: REF_44 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
_pairs_25(TwapOracle.PairData[]) := ϕ(["pairData_6 (-> ['_pairs'])"])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_136(uint256) := i_2(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_136

Name: TMP_136 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint256) = i_2 (c)+ 1
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
VADER_13(address) := ϕ(['VADER_0', 'VADER_3', 'VADER_15', 'VADER_5', 'VADER_12', 'VADER_8'])
[i]Type for VADER

Name: VADER Function: update
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
_vaderPool_8(IVaderPoolV2) := ϕ(['_vaderPool_10', '_vaderPool_5', '_vaderPool_7', '_vaderPool_0', '_vaderPool_1'])
[i]Type for _vaderPool

Name: _vaderPool Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_updatePeriod_2(uint256) := ϕ(['_updatePeriod_0', '_updatePeriod_1', '_updatePeriod_4'])
[i]Type for _updatePeriod

Name: _updatePeriod Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_17(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_19', '_pairs_0', '_pairs_1', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, Ownable.onlyOwner()()
MODIFIER_CALL, TwapOracle.initialized()()
REF_33 -> LENGTH _pairs_19
[i]Type for REF_33

Name: REF_33 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairCount_1(uint256) := REF_33(uint256)
Finance type key: (-1, -1)
[i]Type for pairCount

Name: pairCount Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_1(uint256) := 0(uint256)
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
i_2(uint256) := ϕ(['i_1', 'i_3'])
[i]Type for i

Name: i Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_124(bool) = i_2 < pairCount_1
[i]Type for TMP_124

Name: TMP_124 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_34(TwapOracle.PairData) -> _pairs_19[i_2]
[i]Type for REF_34

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_1 (-> ['_pairs'])(TwapOracle.PairData) := REF_34(TwapOracle.PairData)
Finance type key: (-1, -1)
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: token0, pair, token1, blockTimestampLast, price0CumulativeLast
Finance Type: undef
REF_45(address) -> pairData_1 (-> ['_pairs']).token0
[i]Type for REF_45

Name: REF_45 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_139(bool) = REF_45 == VADER_15
[i]Type for TMP_139

Name: TMP_139 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_47(address) -> pairData_1 (-> ['_pairs']).pair
[i]Type for REF_47

Name: REF_47 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TUPLE_4(uint256,uint256,uint32) = LIBRARY_CALL, dest:UniswapV2OracleLibrary, function:UniswapV2OracleLibrary.currentCumulativePrices(address), arguments:['REF_47'] 
[i]Type for TUPLE_4

Name: TUPLE_4 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price0Cumulative_1(uint256)= UNPACK TUPLE_4 index: 0 
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
price1Cumulative_1(uint256)= UNPACK TUPLE_4 index: 1 
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
blockTimestamp_1(uint32)= UNPACK TUPLE_4 index: 2 
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_49(address) -> pairData_1 (-> ['_pairs']).token1
[i]Type for REF_49

Name: REF_49 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_140 = CONVERT REF_49 to IERC20
[i]Type for TMP_140

Name: TMP_140 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: ERC20
Value: u
Fields: 
Finance Type: undef
TUPLE_5(uint256,uint256,uint32) = HIGH_LEVEL_CALL, dest:_vaderPool_10(IVaderPoolV2), function:cumulativePrices, arguments:['TMP_140']  
[i]Type for TUPLE_5

Name: TUPLE_5 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
VADER_16(address) := ϕ(['VADER_3', 'VADER_15', 'VADER_5', 'VADER_12', 'VADER_8'])
[i]Type for VADER

Name: VADER Function: update
Num: -1
Den: -1
Address: 1
Norm: 18
LF: VADER
Value: u
Fields: 
Finance Type: undef
_vaderPool_11(IVaderPoolV2) := ϕ(['_vaderPool_7', '_vaderPool_10', '_vaderPool_5', '_vaderPool_1'])
[i]Type for _vaderPool

Name: _vaderPool Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_updatePeriod_5(uint256) := ϕ(['_updatePeriod_1', '_updatePeriod_4'])
[i]Type for _updatePeriod

Name: _updatePeriod Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pairs_20(TwapOracle.PairData[]) := ϕ(['_pairs_4', '_pairs_1', '_pairs_19', '_pairs_16'])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price0Cumulative_2(uint256)= UNPACK TUPLE_5 index: 0 
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
price1Cumulative_2(uint256)= UNPACK TUPLE_5 index: 1 
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
blockTimestamp_2(uint32)= UNPACK TUPLE_5 index: 2 
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
price0Cumulative_3(uint256) := ϕ(['price0Cumulative_1', 'price0Cumulative_2'])
[i]Type for price0Cumulative

Name: price0Cumulative Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
price1Cumulative_3(uint256) := ϕ(['price1Cumulative_1', 'price1Cumulative_2'])
[i]Type for price1Cumulative

Name: price1Cumulative Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
blockTimestamp_3(uint32) := ϕ(['blockTimestamp_1', 'blockTimestamp_2'])
[i]Type for blockTimestamp

Name: blockTimestamp Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_35(uint32) -> pairData_1 (-> ['_pairs']).blockTimestampLast
[i]Type for REF_35

Name: REF_35 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_125(uint32) = blockTimestamp_3 (c)- REF_35
[i]Type for TMP_125

Name: TMP_125 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
timeElapsed_1(uint32) := TMP_125(uint32)
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_126(bool) = timeElapsed_1 >= _updatePeriod_5
[i]Type for TMP_126

Name: TMP_126 Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_127(None) = SOLIDITY_CALL require(bool,string)(TMP_126,TwapOracle::update: Period not elapsed)
[i]Type for TMP_127

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_36(FixedPoint.uq112x112) -> pairData_1 (-> ['_pairs']).price0Average
[i]Type for REF_36

Name: REF_36 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_38(uint256) -> pairData_1 (-> ['_pairs']).price0CumulativeLast
[i]Type for REF_38

Name: REF_38 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_128(uint256) = price0Cumulative_3 - REF_38
[i]Type for TMP_128

Name: TMP_128 Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_129(uint256) = TMP_128 / timeElapsed_1
[i]Type for TMP_129

Name: TMP_129 Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_130 = CONVERT TMP_129 to uint224
[i]Type for TMP_130

Name: TMP_130 Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_131 = new uq112x112(TMP_130)
[i]Type for TMP_131

Name: TMP_131 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_2 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_1 (-> ['_pairs'])"])
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price0Average, price1CumulativeLast, token0, pair, token1, blockTimestampLast, price0CumulativeLast
Finance Type: undef
REF_36 (->pairData_2 (-> ['_pairs'])) := TMP_131(FixedPoint.uq112x112)
Finance type key: (-1, -1)
[i]Type for REF_36

Name: REF_36 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
_pairs_21(TwapOracle.PairData[]) := ϕ(["pairData_2 (-> ['_pairs'])"])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_39(FixedPoint.uq112x112) -> pairData_2 (-> ['_pairs']).price1Average
[i]Type for REF_39

Name: REF_39 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
REF_41(uint256) -> pairData_2 (-> ['_pairs']).price1CumulativeLast
[i]Type for REF_41

Name: REF_41 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
TMP_132(uint256) = price1Cumulative_3 - REF_41
[i]Type for TMP_132

Name: TMP_132 Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_133(uint256) = TMP_132 / timeElapsed_1
[i]Type for TMP_133

Name: TMP_133 Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_134 = CONVERT TMP_133 to uint224
[i]Type for TMP_134

Name: TMP_134 Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_135 = new uq112x112(TMP_134)
[i]Type for TMP_135

Name: TMP_135 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pairData_3 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_2 (-> ['_pairs'])"])
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, pair, token1, blockTimestampLast, price0CumulativeLast
Finance Type: undef
REF_39 (->pairData_3 (-> ['_pairs'])) := TMP_135(FixedPoint.uq112x112)
Finance type key: (-1, -1)
[i]Type for REF_39

Name: REF_39 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
_pairs_22(TwapOracle.PairData[]) := ϕ(["pairData_3 (-> ['_pairs'])"])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_42(uint256) -> pairData_3 (-> ['_pairs']).price0CumulativeLast
[i]Type for REF_42

Name: REF_42 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
pairData_4 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_3 (-> ['_pairs'])"])
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, pair, token1, blockTimestampLast, price0CumulativeLast
Finance Type: undef
REF_42 (->pairData_4 (-> ['_pairs'])) := price0Cumulative_3(uint256)
Finance type key: (-1, -1)
[i]Type for REF_42

Name: REF_42 Function: update
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
_pairs_23(TwapOracle.PairData[]) := ϕ(["pairData_4 (-> ['_pairs'])"])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_43(uint256) -> pairData_4 (-> ['_pairs']).price1CumulativeLast
[i]Type for REF_43

Name: REF_43 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
pairData_5 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_4 (-> ['_pairs'])"])
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, pair, token1, blockTimestampLast, price0CumulativeLast
Finance Type: undef
REF_43 (->pairData_5 (-> ['_pairs'])) := price1Cumulative_3(uint256)
Finance type key: (-1, -1)
[i]Type for REF_43

Name: REF_43 Function: update
Num: 2
Den: 1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
_pairs_24(TwapOracle.PairData[]) := ϕ(["pairData_5 (-> ['_pairs'])"])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_44(uint32) -> pairData_5 (-> ['_pairs']).blockTimestampLast
[i]Type for REF_44

Name: REF_44 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
pairData_6 (-> ['_pairs'])(TwapOracle.PairData) := ϕ(["pairData_5 (-> ['_pairs'])"])
[i]Type for pairData

Name: pairData Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: price1Average, price0Average, price1CumulativeLast, token0, pair, token1, blockTimestampLast, price0CumulativeLast
Finance Type: undef
REF_44 (->pairData_6 (-> ['_pairs'])) := blockTimestamp_3(uint32)
Finance type key: (-1, -1)
[i]Type for REF_44

Name: REF_44 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
_pairs_25(TwapOracle.PairData[]) := ϕ(["pairData_6 (-> ['_pairs'])"])
[i]Type for _pairs

Name: _pairs Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_136(uint256) := i_2(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_136

Name: TMP_136 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
i_3(uint256) = i_2 (c)+ 1
[i]Type for i

Name: i Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Function count: 18



calculateLiquidityUnits
ONE_1(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ONE_3(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
vaderAsset_1(uint256) := TMP_10(uint256)
Finance type key: (-1, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetVader_1(uint256) := TMP_11(uint256)
Finance type key: (-1, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
denominator_1(uint256) := TMP_14(uint256)
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_45(bool) = a_1 > b_1
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_46
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_45(bool) = a_1 > b_1
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_46
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_17
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ONE_3(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
vaderAsset_1(uint256) := TMP_10(uint256)
Finance type key: (-1, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetVader_1(uint256) := TMP_11(uint256)
Finance type key: (-1, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
denominator_1(uint256) := TMP_14(uint256)
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_17
[i]Type for TMP_0

Name: TMP_0 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ONE_2(uint256) := ϕ(['ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
slip_1(uint256) := TMP_0(uint256)
Finance type key: (-1, -1)
[i]Type for slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i]Type for TMP_1

Name: TMP_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
[i]Type for TMP_2

Name: TMP_2 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_1 (c)+ TMP_2
[i]Type for TMP_3

Name: TMP_3 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
poolUnitFactor_1(uint256) := TMP_3(uint256)
Finance type key: (-1, -1)
[i]Type for poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_4(uint256) = ONE_2 (c)* 2
[i]Type for TMP_4

Name: TMP_4 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
[i]Type for TMP_5

Name: TMP_5 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
[i]Type for TMP_6

Name: TMP_6 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
denominator_1(uint256) := TMP_6(uint256)
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
[i]Type for TMP_7

Name: TMP_7 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_8(uint256) = TMP_7 (c)/ denominator_1
[i]Type for TMP_8

Name: TMP_8 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_9(uint256) = TMP_8 (c)* slip_1
[i]Type for TMP_9

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
RETURN TMP_9
ONE_1(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
[i]Type for TMP_0

Name: TMP_0 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ONE_2(uint256) := ϕ(['ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
slip_1(uint256) := TMP_0(uint256)
Finance type key: (-1, -1)
[i]Type for slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i]Type for TMP_1

Name: TMP_1 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
[i]Type for TMP_2

Name: TMP_2 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_3(uint256) = TMP_1 (c)+ TMP_2
[i]Type for TMP_3

Name: TMP_3 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
poolUnitFactor_1(uint256) := TMP_3(uint256)
Finance type key: (-1, -1)
[i]Type for poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_4(uint256) = ONE_2 (c)* 2
[i]Type for TMP_4

Name: TMP_4 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
[i]Type for TMP_5

Name: TMP_5 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
[i]Type for TMP_6

Name: TMP_6 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
denominator_1(uint256) := TMP_6(uint256)
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
[i]Type for TMP_7

Name: TMP_7 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_8(uint256) = TMP_7 (c)/ denominator_1
[i]Type for TMP_8

Name: TMP_8 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_9(uint256) = TMP_8 (c)* slip_1
[i]Type for TMP_9

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
RETURN TMP_9



calculateSlipAdjustment
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ONE_3(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
vaderAsset_1(uint256) := TMP_10(uint256)
Finance type key: (-1, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetVader_1(uint256) := TMP_11(uint256)
Finance type key: (-1, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
denominator_1(uint256) := TMP_14(uint256)
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_17
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
ONE_3(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
vaderAsset_1(uint256) := TMP_10(uint256)
Finance type key: (-1, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
assetVader_1(uint256) := TMP_11(uint256)
Finance type key: (-1, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_14(uint256) = TMP_12 (c)* TMP_13
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
denominator_1(uint256) := TMP_14(uint256)
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_16(uint256) = TMP_15 (c)/ denominator_1
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_17



calculateLoss
TMP_18(uint256) = originalAsset_1 (c)* releasedVader_1
[i]Type for TMP_18

Name: TMP_18 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_19(uint256) = TMP_18 (c)/ releasedAsset_1
[i]Type for TMP_19

Name: TMP_19 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_20(uint256) = TMP_19 (c)+ originalVader_1
[i]Type for TMP_20

Name: TMP_20 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
originalValue_1(uint256) := TMP_20(uint256)
Finance type key: (-1, -1)
[i]Type for originalValue

Name: originalValue Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_21(uint256) = releasedAsset_1 (c)* releasedVader_1
[i]Type for TMP_21

Name: TMP_21 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_22(uint256) = TMP_21 (c)/ releasedAsset_1
[i]Type for TMP_22

Name: TMP_22 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_23(uint256) = TMP_22 (c)+ releasedVader_1
[i]Type for TMP_23

Name: TMP_23 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
releasedValue_1(uint256) := TMP_23(uint256)
Finance type key: (-1, -1)
[i]Type for releasedValue

Name: releasedValue Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_24(bool) = originalValue_1 > releasedValue_1
[i]Type for TMP_24

Name: TMP_24 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_25(uint256) = originalValue_1 (c)- releasedValue_1
[i]Type for TMP_25

Name: TMP_25 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
loss_1(uint256) := TMP_25(uint256)
Finance type key: (-1, -1)
[i]Type for loss

Name: loss Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_18(uint256) = originalAsset_1 (c)* releasedVader_1
[i]Type for TMP_18

Name: TMP_18 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_19(uint256) = TMP_18 (c)/ releasedAsset_1
[i]Type for TMP_19

Name: TMP_19 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_20(uint256) = TMP_19 (c)+ originalVader_1
[i]Type for TMP_20

Name: TMP_20 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
originalValue_1(uint256) := TMP_20(uint256)
Finance type key: (-1, -1)
[i]Type for originalValue

Name: originalValue Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_21(uint256) = releasedAsset_1 (c)* releasedVader_1
[i]Type for TMP_21

Name: TMP_21 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_22(uint256) = TMP_21 (c)/ releasedAsset_1
[i]Type for TMP_22

Name: TMP_22 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_23(uint256) = TMP_22 (c)+ releasedVader_1
[i]Type for TMP_23

Name: TMP_23 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
releasedValue_1(uint256) := TMP_23(uint256)
Finance type key: (-1, -1)
[i]Type for releasedValue

Name: releasedValue Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_24(bool) = originalValue_1 > releasedValue_1
[i]Type for TMP_24

Name: TMP_24 Function: calculateLoss
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_25(uint256) = originalValue_1 (c)- releasedValue_1
[i]Type for TMP_25

Name: TMP_25 Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
loss_1(uint256) := TMP_25(uint256)
Finance type key: (-1, -1)
[i]Type for loss

Name: loss Function: calculateLoss
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



calculateSwap
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (-1, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_48(uint256) = a_1 (c)* a_1
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_48(uint256) = a_1 (c)* a_1
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(uint256) = numerator_1 (c)/ denominator_1
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amountOut_1
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (-1, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_30(uint256) = numerator_1 (c)/ denominator_1
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (-1, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN amountOut_1



calculateSwapReverse
TMP_31(uint256) = reserveIn_1 (c)* reserveOut_1
[i]Type for TMP_31

Name: TMP_31 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XY_1(uint256) := TMP_31(uint256)
Finance type key: (-1, -1)
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(uint256) = amountOut_1 (c)* 2
[i]Type for TMP_32

Name: TMP_32 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
y2_1(uint256) := TMP_32(uint256)
Finance type key: (-1, -1)
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_33(uint256) = y2_1 (c)* 2
[i]Type for TMP_33

Name: TMP_33 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
y4_1(uint256) := TMP_33(uint256)
Finance type key: (-1, -1)
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
TMP_34(bool) = y4_1 < reserveOut_1
[i]Type for TMP_34

Name: TMP_34 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_35

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_36(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(bool) = a_1 > 3
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_1(uint256) := a_1(uint256)
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_50(uint256) = a_1 (c)/ 2
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_51(uint256) = TMP_50 (c)+ 1
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
x_1(uint256) := TMP_51(uint256)
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_4(uint256) := 1(uint256)
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
c_2(uint256) := ϕ(['c_1', 'c_3'])
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52(bool) = x_2 < c_2
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_3(uint256) := x_2(uint256)
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_53(uint256) = a_1 (c)/ x_2
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_54(uint256) = TMP_53 (c)+ x_2
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ 2
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
x_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(bool) = a_1 > 3
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_1(uint256) := a_1(uint256)
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_50(uint256) = a_1 (c)/ 2
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_51(uint256) = TMP_50 (c)+ 1
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
x_1(uint256) := TMP_51(uint256)
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_4(uint256) := 1(uint256)
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
c_2(uint256) := ϕ(['c_1', 'c_3'])
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52(bool) = x_2 < c_2
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_3(uint256) := x_2(uint256)
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_53(uint256) = a_1 (c)/ x_2
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_54(uint256) = TMP_53 (c)+ x_2
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ 2
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
x_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
[i]Type for TMP_36

Name: TMP_36 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_37(uint256) = reserveOut_1 (c)- y4_1
[i]Type for TMP_37

Name: TMP_37 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
TMP_38(uint256) = reserveIn_1 (c)* TMP_37
[i]Type for TMP_38

Name: TMP_38 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
TMP_39(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_38)
[i]Type for TMP_39

Name: TMP_39 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_40(uint256) = TMP_36 (c)* TMP_39
[i]Type for TMP_40

Name: TMP_40 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
numeratorA_1(uint256) := TMP_40(uint256)
Finance type key: (-1, -1)
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = y2_1 (c)* reserveIn_1
[i]Type for TMP_41

Name: TMP_41 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
numeratorB_1(uint256) := TMP_41(uint256)
Finance type key: (-1, -1)
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
numeratorC_1(uint256) := XY_1(uint256)
Finance type key: (-1, -1)
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_42(uint256) = numeratorC_1 (c)- numeratorA_1
[i]Type for TMP_42

Name: TMP_42 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_43(uint256) = TMP_42 (c)- numeratorB_1
[i]Type for TMP_43

Name: TMP_43 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
numerator_1(uint256) := TMP_43(uint256)
Finance type key: (-1, -1)
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
denominator_1(uint256) := y2_1(uint256)
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_44(uint256) = numerator_1 (c)/ denominator_1
[i]Type for TMP_44

Name: TMP_44 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
amountIn_1(uint256) := TMP_44(uint256)
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
RETURN amountIn_1
TMP_31(uint256) = reserveIn_1 (c)* reserveOut_1
[i]Type for TMP_31

Name: TMP_31 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XY_1(uint256) := TMP_31(uint256)
Finance type key: (-1, -1)
[i]Type for XY

Name: XY Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_32(uint256) = amountOut_1 (c)* 2
[i]Type for TMP_32

Name: TMP_32 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
y2_1(uint256) := TMP_32(uint256)
Finance type key: (-1, -1)
[i]Type for y2

Name: y2 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_33(uint256) = y2_1 (c)* 2
[i]Type for TMP_33

Name: TMP_33 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
y4_1(uint256) := TMP_33(uint256)
Finance type key: (-1, -1)
[i]Type for y4

Name: y4 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
TMP_34(bool) = y4_1 < reserveOut_1
[i]Type for TMP_34

Name: TMP_34 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool))
[i]Type for TMP_35

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_36(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(XY_1)
[i]Type for TMP_36

Name: TMP_36 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_37(uint256) = reserveOut_1 (c)- y4_1
[i]Type for TMP_37

Name: TMP_37 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
TMP_38(uint256) = reserveIn_1 (c)* TMP_37
[i]Type for TMP_38

Name: TMP_38 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
TMP_39(uint256) = INTERNAL_CALL, VaderMath.root(uint256)(TMP_38)
[i]Type for TMP_39

Name: TMP_39 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_40(uint256) = TMP_36 (c)* TMP_39
[i]Type for TMP_40

Name: TMP_40 Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
numeratorA_1(uint256) := TMP_40(uint256)
Finance type key: (-1, -1)
[i]Type for numeratorA

Name: numeratorA Function: calculateSwapReverse
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_41(uint256) = y2_1 (c)* reserveIn_1
[i]Type for TMP_41

Name: TMP_41 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
numeratorB_1(uint256) := TMP_41(uint256)
Finance type key: (-1, -1)
[i]Type for numeratorB

Name: numeratorB Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
numeratorC_1(uint256) := XY_1(uint256)
Finance type key: (-1, -1)
[i]Type for numeratorC

Name: numeratorC Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_42(uint256) = numeratorC_1 (c)- numeratorA_1
[i]Type for TMP_42

Name: TMP_42 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_43(uint256) = TMP_42 (c)- numeratorB_1
[i]Type for TMP_43

Name: TMP_43 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
numerator_1(uint256) := TMP_43(uint256)
Finance type key: (-1, -1)
[i]Type for numerator

Name: numerator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
denominator_1(uint256) := y2_1(uint256)
Finance type key: (-1, -1)
[i]Type for denominator

Name: denominator Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_44(uint256) = numerator_1 (c)/ denominator_1
[i]Type for TMP_44

Name: TMP_44 Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
amountIn_1(uint256) := TMP_44(uint256)
Finance type key: (-1, -1)
[i]Type for amountIn

Name: amountIn Function: calculateSwapReverse
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
RETURN amountIn_1



delta
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_45(bool) = a_1 > b_1
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_46
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_45(bool) = a_1 > b_1
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_46



pow
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_48(uint256) = a_1 (c)* a_1
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_48(uint256) = a_1 (c)* a_1
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_48



root
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(bool) = a_1 > 3
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_1(uint256) := a_1(uint256)
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_50(uint256) = a_1 (c)/ 2
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_51(uint256) = TMP_50 (c)+ 1
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
x_1(uint256) := TMP_51(uint256)
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_4(uint256) := 1(uint256)
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
c_2(uint256) := ϕ(['c_1', 'c_3'])
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52(bool) = x_2 < c_2
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_3(uint256) := x_2(uint256)
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_53(uint256) = a_1 (c)/ x_2
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_54(uint256) = TMP_53 (c)+ x_2
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ 2
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
x_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
a_1(uint256) := ϕ(['XY_1', 'TMP_38'])
[i]Type for a

Name: a Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_49(bool) = a_1 > 3
[i]Type for TMP_49

Name: TMP_49 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_1(uint256) := a_1(uint256)
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_50(uint256) = a_1 (c)/ 2
[i]Type for TMP_50

Name: TMP_50 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_51(uint256) = TMP_50 (c)+ 1
[i]Type for TMP_51

Name: TMP_51 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
x_1(uint256) := TMP_51(uint256)
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
TMP_56(bool) = a_1 != 0
[i]Type for TMP_56

Name: TMP_56 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_4(uint256) := 1(uint256)
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
c_2(uint256) := ϕ(['c_1', 'c_3'])
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
x_2(uint256) := ϕ(['x_1', 'x_3'])
[i]Type for x

Name: x Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_52(bool) = x_2 < c_2
[i]Type for TMP_52

Name: TMP_52 Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
c_3(uint256) := x_2(uint256)
Finance type key: (-1, -1)
[i]Type for c

Name: c Function: root
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_53(uint256) = a_1 (c)/ x_2
[i]Type for TMP_53

Name: TMP_53 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_54(uint256) = TMP_53 (c)+ x_2
[i]Type for TMP_54

Name: TMP_54 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_55(uint256) = TMP_54 (c)/ 2
[i]Type for TMP_55

Name: TMP_55 Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
x_3(uint256) := TMP_55(uint256)
Finance type key: (-1, -1)
[i]Type for x

Name: x Function: root
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Function count: 12



mint
nativeAsset_2(IERC20) := ϕ(['nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13', 'nativeAsset_9', 'nativeAsset_1'])
[i]Type for nativeAsset

Name: nativeAsset Function: mint
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
foreignAsset_2(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
[i]Type for foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
positionId_1(uint256) := ϕ(['positionId_0', 'positionId_6'])
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_1(uint256) := ϕ(['totalSupply_0', 'totalSupply_13', 'totalSupply_6'])
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
INTERNAL_CALL, ReentrancyGuard._nonReentrantBefore()()
_ENTERED_1(uint256) := ϕ(['_ENTERED_0'])
[i]Type for _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_status_2(uint256) := ϕ(['_status_4', '_status_0', '_status_3', '_status_1'])
[i]Type for _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0(bool) = _status_2 != _ENTERED_1
[i]Type for TMP_0

Name: TMP_0 Function: _nonReentrantBefore
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,ReentrancyGuard: reentrant call)
[i]Type for TMP_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_status_3(uint256) := _ENTERED_1(uint256)
Finance type key: (-1, -1)
[i]Type for _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_ENTERED_1(uint256) := ϕ(['_ENTERED_0'])
[i]Type for _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_status_2(uint256) := ϕ(['_status_4', '_status_0', '_status_3', '_status_1'])
[i]Type for _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0(bool) = _status_2 != _ENTERED_1
[i]Type for TMP_0

Name: TMP_0 Function: _nonReentrantBefore
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,ReentrancyGuard: reentrant call)
[i]Type for TMP_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_status_3(uint256) := _ENTERED_1(uint256)
Finance type key: (-1, -1)
[i]Type for _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, ReentrancyGuard._nonReentrantAfter()()
_NOT_ENTERED_2(uint256) := ϕ(['_NOT_ENTERED_0'])
[i]Type for _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_status_4(uint256) := _NOT_ENTERED_2(uint256)
Finance type key: (-1, -1)
[i]Type for _status

Name: _status Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_NOT_ENTERED_2(uint256) := ϕ(['_NOT_ENTERED_0'])
[i]Type for _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_status_4(uint256) := _NOT_ENTERED_2(uint256)
Finance type key: (-1, -1)
[i]Type for _status

Name: _status Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, ReentrancyGuard._nonReentrantBefore()()
INTERNAL_CALL, ReentrancyGuard._nonReentrantAfter()()
TUPLE_0(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
_reserveNative_1(uint112) := ϕ(['_reserveNative_0', '_reserveNative_2'])
[i]Type for _reserveNative

Name: _reserveNative Function: getReserves
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
_reserveForeign_1(uint112) := ϕ(['_reserveForeign_2', '_reserveForeign_0'])
[i]Type for _reserveForeign

Name: _reserveForeign Function: getReserves
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
_blockTimestampLast_1(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserveNative_1(uint112) := _reserveNative_1(uint112)
Finance type key: (0, -1)
[i]Type for reserveNative

Name: reserveNative Function: getReserves
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
reserveForeign_1(uint112) := _reserveForeign_1(uint112)
Finance type key: (0, -1)
[i]Type for reserveForeign

Name: reserveForeign Function: getReserves
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
blockTimestampLast_1(uint32) := _blockTimestampLast_1(uint32)
Finance type key: (-1, -1)
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN reserveNative_1,reserveForeign_1,blockTimestampLast_1
_reserveNative_1(uint112) := ϕ(['_reserveNative_0', '_reserveNative_2'])
[i]Type for _reserveNative

Name: _reserveNative Function: getReserves
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
_reserveForeign_1(uint112) := ϕ(['_reserveForeign_2', '_reserveForeign_0'])
[i]Type for _reserveForeign

Name: _reserveForeign Function: getReserves
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
_blockTimestampLast_1(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserveNative_1(uint112) := _reserveNative_1(uint112)
Finance type key: (0, -1)
[i]Type for reserveNative

Name: reserveNative Function: getReserves
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
reserveForeign_1(uint112) := _reserveForeign_1(uint112)
Finance type key: (0, -1)
[i]Type for reserveForeign

Name: reserveForeign Function: getReserves
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
blockTimestampLast_1(uint32) := _blockTimestampLast_1(uint32)
Finance type key: (-1, -1)
[i]Type for blockTimestampLast

Name: blockTimestampLast Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN reserveNative_1,reserveForeign_1,blockTimestampLast_1
[i]Type for TUPLE_0

Name: TUPLE_0 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserveNative_1(uint112)= UNPACK TUPLE_0 index: 0 
[i]Type for reserveNative

Name: reserveNative Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
reserveForeign_1(uint112)= UNPACK TUPLE_0 index: 1 
[i]Type for reserveForeign

Name: reserveForeign Function: mint
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_139 = CONVERT this to address
[i]Type for TMP_139

Name: TMP_139 Function: mint
Num: -1
Den: -1
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_140(uint256) = HIGH_LEVEL_CALL, dest:nativeAsset_4(IERC20), function:balanceOf, arguments:['TMP_139']  
[i]Type for TMP_140

Name: TMP_140 Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
nativeAsset_5(IERC20) := ϕ(['nativeAsset_5', 'nativeAsset_13', 'nativeAsset_4', 'nativeAsset_9', 'nativeAsset_1'])
[i]Type for nativeAsset

Name: nativeAsset Function: mint
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
foreignAsset_5(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_4', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10'])
[i]Type for foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
positionId_4(uint256) := ϕ(['positionId_3', 'positionId_6'])
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_4(uint256) := ϕ(['totalSupply_3', 'totalSupply_13', 'totalSupply_6'])
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceNative_1(uint256) := TMP_140(uint256)
Finance type key: (0, -1)
[i]Type for balanceNative

Name: balanceNative Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_141 = CONVERT this to address
[i]Type for TMP_141

Name: TMP_141 Function: mint
Num: -1
Den: -1
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_142(uint256) = HIGH_LEVEL_CALL, dest:foreignAsset_5(IERC20), function:balanceOf, arguments:['TMP_141']  
[i]Type for TMP_142

Name: TMP_142 Function: mint
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignAsset_6(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_5'])
[i]Type for foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
positionId_5(uint256) := ϕ(['positionId_4', 'positionId_6'])
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_5(uint256) := ϕ(['totalSupply_4', 'totalSupply_13', 'totalSupply_6'])
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceForeign_1(uint256) := TMP_142(uint256)
Finance type key: (0, -1)
[i]Type for balanceForeign

Name: balanceForeign Function: mint
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_143(uint256) = balanceNative_1 (c)- reserveNative_1
Finance type key: (0, 0)
[i]Type for TMP_143

Name: TMP_143 Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
nativeDeposit_1(uint256) := TMP_143(uint256)
Finance type key: (0, -1)
[i]Type for nativeDeposit

Name: nativeDeposit Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_144(uint256) = balanceForeign_1 (c)- reserveForeign_1
Finance type key: (0, 0)
[i]Type for TMP_144

Name: TMP_144 Function: mint
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignDeposit_1(uint256) := TMP_144(uint256)
Finance type key: (0, -1)
[i]Type for foreignDeposit

Name: foreignDeposit Function: mint
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
totalLiquidityUnits_1(uint256) := totalSupply_5(uint256)
Finance type key: (-1, -1)
[i]Type for totalLiquidityUnits

Name: totalLiquidityUnits Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_145(bool) = totalLiquidityUnits_1 == 0
[i]Type for TMP_145

Name: TMP_145 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1(uint256) := nativeDeposit_1(uint256)
Finance type key: (0, -1)
[i]Type for liquidity

Name: liquidity Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_146(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateLiquidityUnits(uint256,uint256,uint256,uint256,uint256), arguments:['nativeDeposit_1', 'reserveNative_1', 'foreignDeposit_1', 'reserveForeign_1', 'totalLiquidityUnits_1'] 
ONE_1(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
ONE_3(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderAsset_1(uint256) := TMP_10(uint256)
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetVader_1(uint256) := TMP_11(uint256)
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Finance type key: (0, 0)
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_14(uint256) = TMP_12 (c)* TMP_13
Finance type key: (0, 0)
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_14(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_16(uint256) = TMP_15 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN TMP_17
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
ONE_3(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderAsset_1(uint256) := TMP_10(uint256)
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetVader_1(uint256) := TMP_11(uint256)
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Finance type key: (0, 0)
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_14(uint256) = TMP_12 (c)* TMP_13
Finance type key: (0, 0)
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_14(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_16(uint256) = TMP_15 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN TMP_17
[i]Type for TMP_0

Name: TMP_0 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
ONE_2(uint256) := ϕ(['ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
slip_1(uint256) := TMP_0(uint256)
Finance type key: (40, -1)
[i]Type for slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_1

Name: TMP_1 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_2

Name: TMP_2 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_3(uint256) = TMP_1 (c)+ TMP_2
Finance type key: (0, 0)
[i]Type for TMP_3

Name: TMP_3 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
poolUnitFactor_1(uint256) := TMP_3(uint256)
Finance type key: (0, -1)
[i]Type for poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_4(uint256) = ONE_2 (c)* 2
[i]Type for TMP_4

Name: TMP_4 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
[i]Type for TMP_5

Name: TMP_5 Function: calculateLiquidityUnits
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 2
Fields: 
Finance Type: raw balance
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_6

Name: TMP_6 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: 2
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_6(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: 2
Fields: 
Finance Type: raw balance
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
[i]Type for TMP_7

Name: TMP_7 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_8(uint256) = TMP_7 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_8

Name: TMP_8 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: price/exchange rate
TMP_9(uint256) = TMP_8 (c)* slip_1
Finance type key: (40, 40)
Error with TMP_9 in function calculateLiquidityUnits
Error with: TMP_9 in function calculateLiquidityUnits
[i]Type for TMP_9

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
RETURN TMP_9
ONE_1(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
ONE_3(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderAsset_1(uint256) := TMP_10(uint256)
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetVader_1(uint256) := TMP_11(uint256)
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Finance type key: (0, 0)
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_14(uint256) = TMP_12 (c)* TMP_13
Finance type key: (0, 0)
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_14(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_16(uint256) = TMP_15 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN TMP_17
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
ONE_3(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderAsset_1(uint256) := TMP_10(uint256)
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetVader_1(uint256) := TMP_11(uint256)
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Finance type key: (0, 0)
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_14(uint256) = TMP_12 (c)* TMP_13
Finance type key: (0, 0)
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_14(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_16(uint256) = TMP_15 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN TMP_17
[i]Type for TMP_0

Name: TMP_0 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
ONE_2(uint256) := ϕ(['ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
slip_1(uint256) := TMP_0(uint256)
Finance type key: (40, -1)
[i]Type for slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_1

Name: TMP_1 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_2

Name: TMP_2 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_3(uint256) = TMP_1 (c)+ TMP_2
Finance type key: (0, 0)
[i]Type for TMP_3

Name: TMP_3 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
poolUnitFactor_1(uint256) := TMP_3(uint256)
Finance type key: (0, -1)
[i]Type for poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_4(uint256) = ONE_2 (c)* 2
[i]Type for TMP_4

Name: TMP_4 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
[i]Type for TMP_5

Name: TMP_5 Function: calculateLiquidityUnits
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 2
Fields: 
Finance Type: raw balance
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_6

Name: TMP_6 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: 2
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_6(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: 2
Fields: 
Finance Type: raw balance
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
[i]Type for TMP_7

Name: TMP_7 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_8(uint256) = TMP_7 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_8

Name: TMP_8 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: price/exchange rate
TMP_9(uint256) = TMP_8 (c)* slip_1
Finance type key: (40, 40)
[i]Type for TMP_9

Name: TMP_9 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
RETURN TMP_9
[i]Type for TMP_146

Name: TMP_146 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
liquidity_2(uint256) := TMP_146(uint256)
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
liquidity_3(uint256) := ϕ(['liquidity_1', 'liquidity_2'])
[i]Type for liquidity

Name: liquidity Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_147(bool) = liquidity_3 > 0
[i]Type for TMP_147

Name: TMP_147 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_148(None) = SOLIDITY_CALL require(bool,string)(TMP_147,BasePool::mint: Insufficient Liquidity Provided)
[i]Type for TMP_148

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_149(uint256) := positionId_5(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_149

Name: TMP_149 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positionId_6(uint256) = positionId_5 (c)+ 1
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
id_1(uint256) := TMP_149(uint256)
Finance type key: (-1, -1)
[i]Type for id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
totalSupply_6(uint256) = totalSupply_5 (c)+ liquidity_3
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
INTERNAL_CALL, ERC721._mint(address,uint256)(to_1,id_1)
to_1(address) := ϕ(['to_1', 'to_1'])
[i]Type for to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
tokenId_1(uint256) := ϕ(['id_1', 'tokenId_1'])
[i]Type for tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_balances_2(mapping(address => uint256)) := ϕ(['_balances_1', '_balances_6', '_balances_19', '_balances_11', '_balances_0', '_balances_17'])
[i]Type for _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_79 = CONVERT 0 to address
[i]Type for TMP_79

Name: TMP_79 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = to_1 != TMP_79
[i]Type for TMP_80

Name: TMP_80 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(None) = SOLIDITY_CALL require(bool,string)(TMP_80,ERC721: mint to the zero address)
[i]Type for TMP_81

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i]Type for tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_0', '_owners_1', '_owners_8', '_owners_7', '_owners_2'])
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_10(address) -> _owners_1[tokenId_1]
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN REF_10
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i]Type for tokenId

Name: tokenId Function: _ownerOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_owners_1(mapping(uint256 => address)) := ϕ(['_owners_0', '_owners_1', '_owners_8', '_owners_7', '_owners_2'])
[i]Type for _owners

Name: _owners Function: _ownerOf
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_10(address) -> _owners_1[tokenId_1]
[i]Type for REF_10

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN REF_10
[i]Type for TMP_64

Name: TMP_64 Function: _exists
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_65 = CONVERT 0 to address
[i]Type for TMP_65

Name: TMP_65 Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_66(bool) = TMP_64 != TMP_65
[i]Type for TMP_66

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_66
tokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1'])
[i]Type for tokenId

Name: tokenId Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_64(address) = INTERNAL_CALL, ERC721._ownerOf(uint256)(tokenId_1)
[i]Type for TMP_64

Name: TMP_64 Function: _exists
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_65 = CONVERT 0 to address
[i]Type for TMP_65

Name: TMP_65 Function: _exists
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_66(bool) = TMP_64 != TMP_65
[i]Type for TMP_66

Name: TMP_66 Function: _exists
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN TMP_66
[i]Type for TMP_82

Name: TMP_82 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83 = ! TMP_82 
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,ERC721: token already minted)
[i]Type for TMP_84

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT 0 to address
[i]Type for TMP_85

Name: TMP_85 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, ERC721._beforeTokenTransfer(address,address,uint256,uint256)(TMP_85,to_1,tokenId_1,1)
from_1(address) := ϕ(['from_1', 'TMP_85', 'owner_1'])
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
to_1(address) := ϕ(['TMP_95', 'to_1', 'to_1'])
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i]Type for firstTokenId

Name: firstTokenId Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
from_1(address) := ϕ(['from_1', 'TMP_85', 'owner_1'])
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
to_1(address) := ϕ(['TMP_95', 'to_1', 'to_1'])
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -998
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i]Type for firstTokenId

Name: firstTokenId Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_87(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
[i]Type for TMP_87

Name: TMP_87 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_88 = ! TMP_87 
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,ERC721: token already minted)
[i]Type for TMP_89

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(uint256) -> _balances_5[to_1]
[i]Type for REF_12

Name: None Function: None
Num: -998
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_balances_6(mapping(address => uint256)) := ϕ(['_balances_5'])
[i]Type for _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(-> _balances_6) = REF_12 + 1
[i]Type for REF_12

Name: REF_12 Function: _mint
Num: -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
REF_13(address) -> _owners_1[tokenId_1]
[i]Type for REF_13

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_owners_2(mapping(uint256 => address)) := ϕ(['_owners_1'])
[i]Type for _owners

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_13 (->_owners_2) := to_1(address)
Finance type key: (-1, -1)
[i]Type for REF_13

Name: REF_13 Function: _mint
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_90 = CONVERT 0 to address
[i]Type for TMP_90

Name: TMP_90 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92 = CONVERT 0 to address
[i]Type for TMP_92

Name: TMP_92 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, ERC721._afterTokenTransfer(address,address,uint256,uint256)(TMP_92,to_1,tokenId_1,1)
from_1(address) := ϕ(['from_1', 'owner_2', 'TMP_92'])
[i]Type for from

Name: from Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
to_1(address) := ϕ(['TMP_100', 'to_1', 'to_1'])
[i]Type for to

Name: to Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i]Type for firstTokenId

Name: firstTokenId Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
from_1(address) := ϕ(['from_1', 'owner_2', 'TMP_92'])
[i]Type for from

Name: from Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: from
Value: u
Fields: 
Finance Type: undef
to_1(address) := ϕ(['TMP_100', 'to_1', 'to_1'])
[i]Type for to

Name: to Function: _afterTokenTransfer
Num: 
Den: 
Address: -998
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
firstTokenId_1(uint256) := ϕ(['tokenId_1', 'tokenId_1', 'tokenId_1'])
[i]Type for firstTokenId

Name: firstTokenId Function: _afterTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1(address) := ϕ(['to_1', 'to_1'])
[i]Type for to

Name: to Function: _mint
Num: 
Den: 
Address: -998
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
tokenId_1(uint256) := ϕ(['id_1', 'tokenId_1'])
[i]Type for tokenId

Name: tokenId Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_balances_2(mapping(address => uint256)) := ϕ(['_balances_1', '_balances_6', '_balances_19', '_balances_11', '_balances_0', '_balances_17'])
[i]Type for _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_79 = CONVERT 0 to address
[i]Type for TMP_79

Name: TMP_79 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_80(bool) = to_1 != TMP_79
[i]Type for TMP_80

Name: TMP_80 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_81(None) = SOLIDITY_CALL require(bool,string)(TMP_80,ERC721: mint to the zero address)
[i]Type for TMP_81

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_82(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
[i]Type for TMP_82

Name: TMP_82 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_83 = ! TMP_82 
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_84(None) = SOLIDITY_CALL require(bool,string)(TMP_83,ERC721: token already minted)
[i]Type for TMP_84

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_85 = CONVERT 0 to address
[i]Type for TMP_85

Name: TMP_85 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, ERC721._beforeTokenTransfer(address,address,uint256,uint256)(TMP_85,to_1,tokenId_1,1)
TMP_87(bool) = INTERNAL_CALL, ERC721._exists(uint256)(tokenId_1)
[i]Type for TMP_87

Name: TMP_87 Function: _mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_88 = ! TMP_87 
[i]Type for TMP_88

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,ERC721: token already minted)
[i]Type for TMP_89

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(uint256) -> _balances_5[to_1]
[i]Type for REF_12

Name: None Function: None
Num: -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
_balances_6(mapping(address => uint256)) := ϕ(['_balances_5'])
[i]Type for _balances

Name: _balances Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_12(-> _balances_6) = REF_12 + 1
[i]Type for REF_12

Name: REF_12 Function: _mint
Num: -998
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
REF_13(address) -> _owners_1[tokenId_1]
[i]Type for REF_13

Name: _owners Function: _ownerOf
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_owners_2(mapping(uint256 => address)) := ϕ(['_owners_1'])
[i]Type for _owners

Name: _owners Function: _mint
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_13 (->_owners_2) := to_1(address)
Finance type key: (-1, -1)
[i]Type for REF_13

Name: REF_13 Function: _mint
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_90 = CONVERT 0 to address
[i]Type for TMP_90

Name: TMP_90 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_92 = CONVERT 0 to address
[i]Type for TMP_92

Name: TMP_92 Function: _mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, ERC721._afterTokenTransfer(address,address,uint256,uint256)(TMP_92,to_1,tokenId_1,1)
REF_41(IBasePool.Position) -> positions_0[id_1]
[i]Type for REF_41

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_151 = new Position(block.timestamp,liquidity_3,nativeDeposit_1,foreignDeposit_1)
[i]Type for TMP_151

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_1(mapping(uint256 => IBasePool.Position)) := ϕ(['positions_0'])
[i]Type for positions

Name: positions Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_41 (->positions_1) := TMP_151(IBasePool.Position)
Finance type key: (-1, -1)
[i]Type for REF_41

Name: REF_41 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(balanceNative_1,balanceForeign_1,reserveNative_1,reserveForeign_1)
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
reserveNative_1(uint112) := ϕ(['nativeReserve_1', 'reserveNative_1', 'reserveNative_1'])
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
reserveForeign_1(uint112) := ϕ(['reserveForeign_1', 'reserveForeign_1', 'foreignReserve_1'])
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
TMP_236(bool) = balanceNative_1 <= TMP_235
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
Finance type key: (-1, -1)
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
TMP_239(bool) = balanceForeign_1 <= TMP_238
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_240(bool) = TMP_236 && TMP_239
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_242(uint256) = 2 (c)** 32
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: -1
Den: -1
Address: u
Norm: 32
LF: None
Value: 4294967296
Fields: 
Finance Type: undef
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_244 = CONVERT TMP_243 to uint32
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
blockTimestamp_1(uint32) := TMP_244(uint32)
Finance type key: (-1, -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
timeElapsed_1(uint32) := TMP_245(uint32)
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_246(bool) = timeElapsed_1 > 0
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_247(bool) = reserveNative_1 != 0
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_248(bool) = TMP_246 && TMP_247
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_249(bool) = reserveForeign_1 != 0
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_250(bool) = TMP_248 && TMP_249
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: 5
Den: 4
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_253 = CONVERT TMP_252 to uint256
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: 5
Den: 4
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: 5
Den: 4
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 5
Den: 4
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_259 = CONVERT balanceNative_1 to uint112
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
_reserveNative_2(uint112) := TMP_259(uint112)
Finance type key: (0, -1)
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_260 = CONVERT balanceForeign_1 to uint112
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
_reserveForeign_2(uint112) := TMP_260(uint112)
Finance type key: (0, -1)
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: 4
Den: 5
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_257 = CONVERT TMP_256 to uint256
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: 4
Den: 5
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: 4
Den: 5
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 4
Den: 5
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
Finance type key: (-1, -1)
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
balanceNative_1(uint256) := ϕ(['nativeBalance_2', 'nativeBalance_2', 'balanceNative_1'])
[i]Type for balanceNative

Name: balanceNative Function: _update
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
balanceForeign_1(uint256) := ϕ(['foreignBalance_2', 'balanceForeign_1', 'foreignBalance_2'])
[i]Type for balanceForeign

Name: balanceForeign Function: _update
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
reserveNative_1(uint112) := ϕ(['nativeReserve_1', 'reserveNative_1', 'reserveNative_1'])
[i]Type for reserveNative

Name: reserveNative Function: _update
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
reserveForeign_1(uint112) := ϕ(['reserveForeign_1', 'reserveForeign_1', 'foreignReserve_1'])
[i]Type for reserveForeign

Name: reserveForeign Function: _update
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
priceNativeCumulativeLast_1(uint256) := ϕ(['priceNativeCumulativeLast_0', 'priceNativeCumulativeLast_2'])
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 5
Den: 4
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
priceForeignCumulativeLast_1(uint256) := ϕ(['priceForeignCumulativeLast_2', 'priceForeignCumulativeLast_0'])
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 4
Den: 5
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
_blockTimestampLast_2(uint32) := ϕ(['_blockTimestampLast_0', '_blockTimestampLast_3'])
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_235(uint112) := 5192296858534827628530496329220095(uint112)
Finance type key: (-1, -1)
[i]Type for TMP_235

Name: TMP_235 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
TMP_236(bool) = balanceNative_1 <= TMP_235
[i]Type for TMP_236

Name: TMP_236 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_238(uint112) := 5192296858534827628530496329220095(uint112)
Finance type key: (-1, -1)
[i]Type for TMP_238

Name: TMP_238 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5192296858534827628530496329220095
Fields: 
Finance Type: undef
TMP_239(bool) = balanceForeign_1 <= TMP_238
[i]Type for TMP_239

Name: TMP_239 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_240(bool) = TMP_236 && TMP_239
[i]Type for TMP_240

Name: TMP_240 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,BasePool::_update: Balance Overflow)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_242(uint256) = 2 (c)** 32
[i]Type for TMP_242

Name: TMP_242 Function: _update
Num: 
Den: 
Address: u
Norm: 32
LF: None
Value: 4294967296
Fields: 
Finance Type: undef
TMP_243(uint256) = block.timestamp (c)% TMP_242
[i]Type for TMP_243

Name: TMP_243 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_244 = CONVERT TMP_243 to uint32
[i]Type for TMP_244

Name: TMP_244 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
blockTimestamp_1(uint32) := TMP_244(uint32)
Finance type key: (-1, -1)
[i]Type for blockTimestamp

Name: blockTimestamp Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_245(uint32) = blockTimestamp_1 (c)- _blockTimestampLast_2
[i]Type for TMP_245

Name: TMP_245 Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
timeElapsed_1(uint32) := TMP_245(uint32)
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_246(bool) = timeElapsed_1 > 0
[i]Type for TMP_246

Name: TMP_246 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_247(bool) = reserveNative_1 != 0
[i]Type for TMP_247

Name: TMP_247 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_248(bool) = TMP_246 && TMP_247
[i]Type for TMP_248

Name: TMP_248 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_249(bool) = reserveForeign_1 != 0
[i]Type for TMP_249

Name: TMP_249 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_250(bool) = TMP_248 && TMP_249
[i]Type for TMP_250

Name: TMP_250 Function: _update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_251(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveForeign_1'] 
[i]Type for TMP_251

Name: TMP_251 Function: _update
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_252(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_251', 'reserveNative_1'] 
[i]Type for TMP_252

Name: TMP_252 Function: _update
Num: 5
Den: 4
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_253 = CONVERT TMP_252 to uint256
[i]Type for TMP_253

Name: TMP_253 Function: _update
Num: 5
Den: 4
Address: u
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_254(uint256) = TMP_253 (c)* timeElapsed_1
[i]Type for TMP_254

Name: TMP_254 Function: _update
Num: 5
Den: 4
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
priceNativeCumulativeLast_2(uint256) = priceNativeCumulativeLast_1 (c)+ TMP_254
[i]Type for priceNativeCumulativeLast

Name: priceNativeCumulativeLast Function: _update
Num: 5
Den: 4
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_259 = CONVERT balanceNative_1 to uint112
[i]Type for TMP_259

Name: TMP_259 Function: _update
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
_reserveNative_2(uint112) := TMP_259(uint112)
Finance type key: (0, -1)
[i]Type for _reserveNative

Name: _reserveNative Function: _update
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_260 = CONVERT balanceForeign_1 to uint112
[i]Type for TMP_260

Name: TMP_260 Function: _update
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
_reserveForeign_2(uint112) := TMP_260(uint112)
Finance type key: (0, -1)
[i]Type for _reserveForeign

Name: _reserveForeign Function: _update
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_255(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.encode(uint112), arguments:['reserveNative_1'] 
[i]Type for TMP_255

Name: TMP_255 Function: _update
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_256(uint224) = LIBRARY_CALL, dest:UQ112x112, function:UQ112x112.uqdiv(uint224,uint112), arguments:['TMP_255', 'reserveForeign_1'] 
[i]Type for TMP_256

Name: TMP_256 Function: _update
Num: 4
Den: 5
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_257 = CONVERT TMP_256 to uint256
[i]Type for TMP_257

Name: TMP_257 Function: _update
Num: 4
Den: 5
Address: u
Norm: 18
LF: None
Value: 'u'
Fields: 
Finance Type: undef
TMP_258(uint256) = TMP_257 (c)* timeElapsed_1
[i]Type for TMP_258

Name: TMP_258 Function: _update
Num: 4
Den: 5
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
priceForeignCumulativeLast_2(uint256) = priceForeignCumulativeLast_1 (c)+ TMP_258
[i]Type for priceForeignCumulativeLast

Name: priceForeignCumulativeLast Function: _update
Num: 4
Den: 5
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
_blockTimestampLast_3(uint32) := blockTimestamp_1(uint32)
Finance type key: (-1, -1)
[i]Type for _blockTimestampLast

Name: _blockTimestampLast Function: _update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeAsset_2(IERC20) := ϕ(['nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13', 'nativeAsset_9', 'nativeAsset_1'])
[i]Type for nativeAsset

Name: nativeAsset Function: mint
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
foreignAsset_2(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
[i]Type for foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
positionId_1(uint256) := ϕ(['positionId_0', 'positionId_6'])
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
totalSupply_1(uint256) := ϕ(['totalSupply_0', 'totalSupply_13', 'totalSupply_6'])
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
TUPLE_0(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
[i]Type for TUPLE_0

Name: TUPLE_0 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
reserveNative_1(uint112)= UNPACK TUPLE_0 index: 0 
[i]Type for reserveNative

Name: reserveNative Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
reserveForeign_1(uint112)= UNPACK TUPLE_0 index: 1 
[i]Type for reserveForeign

Name: reserveForeign Function: mint
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_139 = CONVERT this to address
[i]Type for TMP_139

Name: TMP_139 Function: mint
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_140(uint256) = HIGH_LEVEL_CALL, dest:nativeAsset_4(IERC20), function:balanceOf, arguments:['TMP_139']  
[i]Type for TMP_140

Name: TMP_140 Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
nativeAsset_5(IERC20) := ϕ(['nativeAsset_5', 'nativeAsset_13', 'nativeAsset_4', 'nativeAsset_9', 'nativeAsset_1'])
[i]Type for nativeAsset

Name: nativeAsset Function: mint
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
foreignAsset_5(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_4', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10'])
[i]Type for foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
positionId_4(uint256) := ϕ(['positionId_3', 'positionId_6'])
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
totalSupply_4(uint256) := ϕ(['totalSupply_3', 'totalSupply_13', 'totalSupply_6'])
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
balanceNative_1(uint256) := TMP_140(uint256)
Finance type key: (0, -1)
[i]Type for balanceNative

Name: balanceNative Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_141 = CONVERT this to address
[i]Type for TMP_141

Name: TMP_141 Function: mint
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_142(uint256) = HIGH_LEVEL_CALL, dest:foreignAsset_5(IERC20), function:balanceOf, arguments:['TMP_141']  
[i]Type for TMP_142

Name: TMP_142 Function: mint
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignAsset_6(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_5'])
[i]Type for foreignAsset

Name: foreignAsset Function: mint
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
positionId_5(uint256) := ϕ(['positionId_4', 'positionId_6'])
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
totalSupply_5(uint256) := ϕ(['totalSupply_4', 'totalSupply_13', 'totalSupply_6'])
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
balanceForeign_1(uint256) := TMP_142(uint256)
Finance type key: (0, -1)
[i]Type for balanceForeign

Name: balanceForeign Function: mint
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_143(uint256) = balanceNative_1 (c)- reserveNative_1
Finance type key: (0, 0)
[i]Type for TMP_143

Name: TMP_143 Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
nativeDeposit_1(uint256) := TMP_143(uint256)
Finance type key: (0, -1)
[i]Type for nativeDeposit

Name: nativeDeposit Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_144(uint256) = balanceForeign_1 (c)- reserveForeign_1
Finance type key: (0, 0)
[i]Type for TMP_144

Name: TMP_144 Function: mint
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignDeposit_1(uint256) := TMP_144(uint256)
Finance type key: (0, -1)
[i]Type for foreignDeposit

Name: foreignDeposit Function: mint
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
totalLiquidityUnits_1(uint256) := totalSupply_5(uint256)
Finance type key: (0, -1)
[i]Type for totalLiquidityUnits

Name: totalLiquidityUnits Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_145(bool) = totalLiquidityUnits_1 == 0
[i]Type for TMP_145

Name: TMP_145 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
liquidity_1(uint256) := nativeDeposit_1(uint256)
Finance type key: (0, -1)
[i]Type for liquidity

Name: liquidity Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_146(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateLiquidityUnits(uint256,uint256,uint256,uint256,uint256), arguments:['nativeDeposit_1', 'reserveNative_1', 'foreignDeposit_1', 'reserveForeign_1', 'totalLiquidityUnits_1'] 
ONE_1(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
ONE_3(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderAsset_1(uint256) := TMP_10(uint256)
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetVader_1(uint256) := TMP_11(uint256)
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Finance type key: (0, 0)
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_14(uint256) = TMP_12 (c)* TMP_13
Finance type key: (0, 0)
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_14(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_16(uint256) = TMP_15 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN TMP_17
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
ONE_3(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderAsset_1(uint256) := TMP_10(uint256)
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetVader_1(uint256) := TMP_11(uint256)
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Finance type key: (0, 0)
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_14(uint256) = TMP_12 (c)* TMP_13
Finance type key: (0, 0)
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_14(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_16(uint256) = TMP_15 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN TMP_17
[i]Type for TMP_0

Name: TMP_0 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
ONE_2(uint256) := ϕ(['ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
slip_1(uint256) := TMP_0(uint256)
Finance type key: (40, -1)
[i]Type for slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_1

Name: TMP_1 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_2

Name: TMP_2 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_3(uint256) = TMP_1 (c)+ TMP_2
Finance type key: (0, 0)
[i]Type for TMP_3

Name: TMP_3 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
poolUnitFactor_1(uint256) := TMP_3(uint256)
Finance type key: (0, -1)
[i]Type for poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_4(uint256) = ONE_2 (c)* 2
[i]Type for TMP_4

Name: TMP_4 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
[i]Type for TMP_5

Name: TMP_5 Function: calculateLiquidityUnits
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 2
Fields: 
Finance Type: raw balance
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_6

Name: TMP_6 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: 2
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_6(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: 2
Fields: 
Finance Type: raw balance
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
Finance type key: (0, 0)
[i]Type for TMP_7

Name: TMP_7 Function: calculateLiquidityUnits
Num: 4, 4, 5
Den: -1
Address: u
Norm: 42
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_8(uint256) = TMP_7 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_8

Name: TMP_8 Function: calculateLiquidityUnits
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 2
Fields: 
Finance Type: price/exchange rate
TMP_9(uint256) = TMP_8 (c)* slip_1
Finance type key: (40, 40)
[i]Type for TMP_9

Name: TMP_9 Function: calculateLiquidityUnits
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
RETURN TMP_9
ONE_1(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_0(uint256) = INTERNAL_CALL, VaderMath.calculateSlipAdjustment(uint256,uint256,uint256,uint256)(vaderDeposited_1,vaderBalance_1,assetDeposited_1,assetBalance_1)
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
ONE_3(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderAsset_1(uint256) := TMP_10(uint256)
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetVader_1(uint256) := TMP_11(uint256)
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Finance type key: (0, 0)
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_14(uint256) = TMP_12 (c)* TMP_13
Finance type key: (0, 0)
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_14(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_16(uint256) = TMP_15 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN TMP_17
vaderDeposited_1(uint256) := ϕ(['vaderDeposited_1'])
[i]Type for vaderDeposited

Name: vaderDeposited Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderBalance_1(uint256) := ϕ(['vaderBalance_1'])
[i]Type for vaderBalance

Name: vaderBalance Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetDeposited_1(uint256) := ϕ(['assetDeposited_1'])
[i]Type for assetDeposited

Name: assetDeposited Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetBalance_1(uint256) := ϕ(['assetBalance_1'])
[i]Type for assetBalance

Name: assetBalance Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
ONE_3(uint256) := ϕ(['ONE_0', 'ONE_2', 'ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_10(uint256) = vaderBalance_1 (c)* assetDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_10

Name: TMP_10 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
vaderAsset_1(uint256) := TMP_10(uint256)
Finance type key: (0, -1)
[i]Type for vaderAsset

Name: vaderAsset Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_11(uint256) = assetBalance_1 (c)* vaderDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_11

Name: TMP_11 Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
assetVader_1(uint256) := TMP_11(uint256)
Finance type key: (0, -1)
[i]Type for assetVader

Name: assetVader Function: calculateSlipAdjustment
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_12(uint256) = vaderDeposited_1 (c)+ vaderBalance_1
Finance type key: (0, 0)
[i]Type for TMP_12

Name: TMP_12 Function: calculateSlipAdjustment
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_13(uint256) = assetDeposited_1 (c)+ assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_13

Name: TMP_13 Function: calculateSlipAdjustment
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_14(uint256) = TMP_12 (c)* TMP_13
Finance type key: (0, 0)
[i]Type for TMP_14

Name: TMP_14 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_14(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_15(uint256) = INTERNAL_CALL, VaderMath.delta(uint256,uint256)(vaderAsset_1,assetVader_1)
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
a_1(uint256) := ϕ(['vaderAsset_1'])
[i]Type for a

Name: a Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
b_1(uint256) := ϕ(['assetVader_1'])
[i]Type for b

Name: b Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_45(bool) = a_1 > b_1
Finance type key: (0, 0)
[i]Type for TMP_45

Name: TMP_45 Function: delta
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_47(uint256) = b_1 (c)- a_1
Finance type key: (0, 0)
[i]Type for TMP_47

Name: TMP_47 Function: delta
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_47
TMP_46(uint256) = a_1 (c)- b_1
Finance type key: (0, 0)
[i]Type for TMP_46

Name: TMP_46 Function: delta
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_46
[i]Type for TMP_15

Name: TMP_15 Function: calculateSlipAdjustment
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_16(uint256) = TMP_15 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_16

Name: TMP_16 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_17(uint256) = ONE_4 (c)- TMP_16
[i]Type for TMP_17

Name: TMP_17 Function: calculateSlipAdjustment
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN TMP_17
[i]Type for TMP_0

Name: TMP_0 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
ONE_2(uint256) := ϕ(['ONE_4'])
[i]Type for ONE

Name: ONE Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
slip_1(uint256) := TMP_0(uint256)
Finance type key: (40, -1)
[i]Type for slip

Name: slip Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_1(uint256) = vaderBalance_1 (c)* assetDeposited_1
Finance type key: (0, 0)
[i]Type for TMP_1

Name: TMP_1 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_2(uint256) = vaderDeposited_1 (c)* assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_2

Name: TMP_2 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_3(uint256) = TMP_1 (c)+ TMP_2
Finance type key: (0, 0)
[i]Type for TMP_3

Name: TMP_3 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
poolUnitFactor_1(uint256) := TMP_3(uint256)
Finance type key: (0, -1)
[i]Type for poolUnitFactor

Name: poolUnitFactor Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_4(uint256) = ONE_2 (c)* 2
[i]Type for TMP_4

Name: TMP_4 Function: calculateLiquidityUnits
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
TMP_5(uint256) = TMP_4 (c)* vaderBalance_1
[i]Type for TMP_5

Name: TMP_5 Function: calculateLiquidityUnits
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 2
Fields: 
Finance Type: raw balance
TMP_6(uint256) = TMP_5 (c)* assetBalance_1
Finance type key: (0, 0)
[i]Type for TMP_6

Name: TMP_6 Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: 2
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_6(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateLiquidityUnits
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: 2
Fields: 
Finance Type: raw balance
TMP_7(uint256) = totalPoolUnits_1 (c)* poolUnitFactor_1
Finance type key: (0, 0)
[i]Type for TMP_7

Name: TMP_7 Function: calculateLiquidityUnits
Num: 4, 4, 5
Den: -1
Address: u
Norm: 42
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_8(uint256) = TMP_7 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_8

Name: TMP_8 Function: calculateLiquidityUnits
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: 2
Fields: 
Finance Type: price/exchange rate
TMP_9(uint256) = TMP_8 (c)* slip_1
Finance type key: (40, 40)
[i]Type for TMP_9

Name: TMP_9 Function: calculateLiquidityUnits
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
RETURN TMP_9
[i]Type for TMP_146

Name: TMP_146 Function: mint
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
liquidity_2(uint256) := TMP_146(uint256)
Finance type key: (-1, -1)
[i]Type for liquidity

Name: liquidity Function: mint
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
liquidity_3(uint256) := ϕ(['liquidity_1', 'liquidity_2'])
[i]Type for liquidity

Name: liquidity Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_147(bool) = liquidity_3 > 0
[i]Type for TMP_147

Name: TMP_147 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_148(None) = SOLIDITY_CALL require(bool,string)(TMP_147,BasePool::mint: Insufficient Liquidity Provided)
[i]Type for TMP_148

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_149(uint256) := positionId_5(uint256)
Finance type key: (-1, -1)
[i]Type for TMP_149

Name: TMP_149 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
positionId_6(uint256) = positionId_5 (c)+ 1
[i]Type for positionId

Name: positionId Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
id_1(uint256) := TMP_149(uint256)
Finance type key: (-1, -1)
[i]Type for id

Name: id Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
totalSupply_6(uint256) = totalSupply_5 (c)+ liquidity_3
Finance type key: (0, 0)
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
INTERNAL_CALL, ERC721._mint(address,uint256)(to_1,id_1)
REF_41(IBasePool.Position) -> positions_0[id_1]
[i]Type for REF_41

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_151 = new Position(block.timestamp,liquidity_3,nativeDeposit_1,foreignDeposit_1)
[i]Type for TMP_151

Name: TMP_151 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
positions_1(mapping(uint256 => IBasePool.Position)) := ϕ(['positions_0'])
[i]Type for positions

Name: positions Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_41 (->positions_1) := TMP_151(IBasePool.Position)
Finance type key: (-1, -1)
[i]Type for REF_41

Name: REF_41 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(balanceNative_1,balanceForeign_1,reserveNative_1,reserveForeign_1)



swap
TMP_184(uint256) = INTERNAL_CALL, BasePool.swap(uint256,uint256,address)(nativeAmountIn_1,foreignAmountIn_1,to_1)
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1(address) := ϕ(['to_1'])
[i]Type for to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
nativeAsset_10(IERC20) := ϕ(['nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13', 'nativeAsset_9', 'nativeAsset_1'])
[i]Type for nativeAsset

Name: nativeAsset Function: swap
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
[i]Type for foreignAsset

Name: foreignAsset Function: swap
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, GasThrottle.validateGas()()
TMP_185(bool) = nativeAmountIn_1 > 0
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_186(bool) = foreignAmountIn_1 == 0
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_187(bool) = TMP_185 && TMP_186
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_188(bool) = nativeAmountIn_1 == 0
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_189(bool) = foreignAmountIn_1 > 0
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_190(bool) = TMP_188 && TMP_189
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_191(bool) = TMP_187 || TMP_190
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Finance type key: (-1, -1)
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Finance type key: (-1, -1)
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_193 = CONVERT this to address
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: -1
Den: -1
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
nativeBalance_1(uint256) := TMP_194(uint256)
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_195 = CONVERT this to address
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: -1
Den: -1
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignBalance_1(uint256) := TMP_196(uint256)
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_197 = CONVERT _nativeAsset_1 to address
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_198(bool) = to_1 != TMP_197
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_199 = CONVERT _foreignAsset_1 to address
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_200(bool) = to_1 != TMP_199
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_201(bool) = TMP_198 && TMP_200
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_203(bool) = foreignAmountIn_1 > 0
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Finance type key: (0, 0)
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Finance type key: (0, 0)
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Finance type key: (0, 0)
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
nativeAmountOut_1(uint256) := TMP_209(uint256)
Finance type key: (40, -1)
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Finance type key: (0, 0)
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_210(bool) = nativeAmountOut_1 > 0
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Error with TMP_211 in function swap
Error with: TMP_211 in function swap
Finance type key: (40, 0)
Handling trace

Name: nativeAmountOut Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate

Name: nativeReserve Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
d:{4: 0}
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_212(bool) = TMP_210 && TMP_211
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
foreignAmountOut_1(uint256) := TMP_220(uint256)
Finance type key: (40, -1)
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
TMP_221(bool) = foreignAmountOut_1 > 0
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Finance type key: (40, 0)
Error with TMP_222 in function swap
Error with: TMP_222 in function swap
Handling trace

Name: foreignAmountOut Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate

Name: foreignReserve Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
d:{5: 0}
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_223(bool) = TMP_221 && TMP_222
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_226 = CONVERT this to address
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: -1
Den: -1
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
nativeBalance_2(uint256) := TMP_227(uint256)
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
TMP_228 = CONVERT this to address
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: -1
Den: -1
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignBalance_2(uint256) := TMP_229(uint256)
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
RETURN nativeAmountOut_2
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1(address) := ϕ(['to_1'])
[i]Type for to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
nativeAsset_10(IERC20) := ϕ(['nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13', 'nativeAsset_9', 'nativeAsset_1'])
[i]Type for nativeAsset

Name: nativeAsset Function: swap
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
[i]Type for foreignAsset

Name: foreignAsset Function: swap
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, GasThrottle.validateGas()()
TMP_185(bool) = nativeAmountIn_1 > 0
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_186(bool) = foreignAmountIn_1 == 0
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_187(bool) = TMP_185 && TMP_186
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_188(bool) = nativeAmountIn_1 == 0
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_189(bool) = foreignAmountIn_1 > 0
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_190(bool) = TMP_188 && TMP_189
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_191(bool) = TMP_187 || TMP_190
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Finance type key: (-1, -1)
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Finance type key: (-1, -1)
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_193 = CONVERT this to address
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
nativeBalance_1(uint256) := TMP_194(uint256)
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_195 = CONVERT this to address
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignBalance_1(uint256) := TMP_196(uint256)
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_197 = CONVERT _nativeAsset_1 to address
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_198(bool) = to_1 != TMP_197
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_199 = CONVERT _foreignAsset_1 to address
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_200(bool) = to_1 != TMP_199
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_201(bool) = TMP_198 && TMP_200
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_203(bool) = foreignAmountIn_1 > 0
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Finance type key: (0, 0)
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Finance type key: (0, 0)
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Finance type key: (0, 0)
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
nativeAmountOut_1(uint256) := TMP_209(uint256)
Finance type key: (40, -1)
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Finance type key: (0, 0)
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_210(bool) = nativeAmountOut_1 > 0
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Finance type key: (40, 0)
Handling trace

Name: nativeAmountOut Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate

Name: nativeReserve Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
d:{4: 0}
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_212(bool) = TMP_210 && TMP_211
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
foreignAmountOut_1(uint256) := TMP_220(uint256)
Finance type key: (40, -1)
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
TMP_221(bool) = foreignAmountOut_1 > 0
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Finance type key: (40, 0)
Handling trace

Name: foreignAmountOut Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate

Name: foreignReserve Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
d:{5: 0}
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_223(bool) = TMP_221 && TMP_222
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_226 = CONVERT this to address
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
nativeBalance_2(uint256) := TMP_227(uint256)
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
TMP_228 = CONVERT this to address
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignBalance_2(uint256) := TMP_229(uint256)
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
RETURN nativeAmountOut_2
[i]Type for TMP_184

Name: TMP_184 Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN TMP_184
TMP_184(uint256) = INTERNAL_CALL, BasePool.swap(uint256,uint256,address)(nativeAmountIn_1,foreignAmountIn_1,to_1)
[i]Type for TMP_184

Name: TMP_184 Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN TMP_184



swap
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1(address) := ϕ(['to_1'])
[i]Type for to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
nativeAsset_10(IERC20) := ϕ(['nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13', 'nativeAsset_9', 'nativeAsset_1'])
[i]Type for nativeAsset

Name: nativeAsset Function: swap
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
[i]Type for foreignAsset

Name: foreignAsset Function: swap
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, GasThrottle.validateGas()()
TMP_185(bool) = nativeAmountIn_1 > 0
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_186(bool) = foreignAmountIn_1 == 0
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_187(bool) = TMP_185 && TMP_186
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_188(bool) = nativeAmountIn_1 == 0
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_189(bool) = foreignAmountIn_1 > 0
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_190(bool) = TMP_188 && TMP_189
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_191(bool) = TMP_187 || TMP_190
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Finance type key: (-1, -1)
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Finance type key: (-1, -1)
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_193 = CONVERT this to address
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
nativeBalance_1(uint256) := TMP_194(uint256)
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_195 = CONVERT this to address
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignBalance_1(uint256) := TMP_196(uint256)
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_197 = CONVERT _nativeAsset_1 to address
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_198(bool) = to_1 != TMP_197
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_199 = CONVERT _foreignAsset_1 to address
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_200(bool) = to_1 != TMP_199
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_201(bool) = TMP_198 && TMP_200
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_203(bool) = foreignAmountIn_1 > 0
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Finance type key: (0, 0)
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Finance type key: (0, 0)
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Finance type key: (0, 0)
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
nativeAmountOut_1(uint256) := TMP_209(uint256)
Finance type key: (40, -1)
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Finance type key: (0, 0)
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_210(bool) = nativeAmountOut_1 > 0
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Finance type key: (40, 0)
Handling trace

Name: nativeAmountOut Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate

Name: nativeReserve Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
d:{4: 0}
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_212(bool) = TMP_210 && TMP_211
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
foreignAmountOut_1(uint256) := TMP_220(uint256)
Finance type key: (40, -1)
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
TMP_221(bool) = foreignAmountOut_1 > 0
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Finance type key: (40, 0)
Handling trace

Name: foreignAmountOut Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate

Name: foreignReserve Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
d:{5: 0}
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_223(bool) = TMP_221 && TMP_222
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_226 = CONVERT this to address
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
nativeBalance_2(uint256) := TMP_227(uint256)
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
TMP_228 = CONVERT this to address
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignBalance_2(uint256) := TMP_229(uint256)
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
RETURN nativeAmountOut_2
nativeAmountIn_1(uint256) := ϕ(['nativeAmountIn_1'])
[i]Type for nativeAmountIn

Name: nativeAmountIn Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignAmountIn_1(uint256) := ϕ(['foreignAmountIn_1'])
[i]Type for foreignAmountIn

Name: foreignAmountIn Function: swap
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
to_1(address) := ϕ(['to_1'])
[i]Type for to

Name: to Function: swap
Num: 
Den: 
Address: -999
Norm: u
LF: to
Value: u
Fields: 
Finance Type: undef
nativeAsset_10(IERC20) := ϕ(['nativeAsset_5', 'nativeAsset_0', 'nativeAsset_13', 'nativeAsset_9', 'nativeAsset_1'])
[i]Type for nativeAsset

Name: nativeAsset Function: swap
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
foreignAsset_11(IERC20) := ϕ(['foreignAsset_14', 'foreignAsset_1', 'foreignAsset_6', 'foreignAsset_10', 'foreignAsset_0'])
[i]Type for foreignAsset

Name: foreignAsset Function: swap
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, GasThrottle.validateGas()()
TMP_185(bool) = nativeAmountIn_1 > 0
[i]Type for TMP_185

Name: TMP_185 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_186(bool) = foreignAmountIn_1 == 0
[i]Type for TMP_186

Name: TMP_186 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_187(bool) = TMP_185 && TMP_186
[i]Type for TMP_187

Name: TMP_187 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_188(bool) = nativeAmountIn_1 == 0
[i]Type for TMP_188

Name: TMP_188 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_189(bool) = foreignAmountIn_1 > 0
[i]Type for TMP_189

Name: TMP_189 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_190(bool) = TMP_188 && TMP_189
[i]Type for TMP_190

Name: TMP_190 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_191(bool) = TMP_187 || TMP_190
[i]Type for TMP_191

Name: TMP_191 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_192(None) = SOLIDITY_CALL require(bool,string)(TMP_191,BasePool::swap: Only One-Sided Swaps Supported)
[i]Type for TMP_192

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TUPLE_2(uint112,uint112,uint32) = INTERNAL_CALL, BasePool.getReserves()()
[i]Type for TUPLE_2

Name: TUPLE_2 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeReserve_1(uint112)= UNPACK TUPLE_2 index: 0 
[i]Type for nativeReserve

Name: nativeReserve Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignReserve_1(uint112)= UNPACK TUPLE_2 index: 1 
[i]Type for foreignReserve

Name: foreignReserve Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
_nativeAsset_1(IERC20) := nativeAsset_13(IERC20)
Finance type key: (-1, -1)
[i]Type for _nativeAsset

Name: _nativeAsset Function: swap
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
_foreignAsset_1(IERC20) := foreignAsset_14(IERC20)
Finance type key: (-1, -1)
[i]Type for _foreignAsset

Name: _foreignAsset Function: swap
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_193 = CONVERT this to address
[i]Type for TMP_193

Name: TMP_193 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_194(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_193']  
[i]Type for TMP_194

Name: TMP_194 Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
nativeBalance_1(uint256) := TMP_194(uint256)
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_195 = CONVERT this to address
[i]Type for TMP_195

Name: TMP_195 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_196(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_195']  
[i]Type for TMP_196

Name: TMP_196 Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignBalance_1(uint256) := TMP_196(uint256)
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_197 = CONVERT _nativeAsset_1 to address
[i]Type for TMP_197

Name: TMP_197 Function: swap
Num: -1
Den: -1
Address: 4
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_198(bool) = to_1 != TMP_197
[i]Type for TMP_198

Name: TMP_198 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_199 = CONVERT _foreignAsset_1 to address
[i]Type for TMP_199

Name: TMP_199 Function: swap
Num: -1
Den: -1
Address: 5
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_200(bool) = to_1 != TMP_199
[i]Type for TMP_200

Name: TMP_200 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_201(bool) = TMP_198 && TMP_200
[i]Type for TMP_201

Name: TMP_201 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,BasePool::swap: Invalid Receiver)
[i]Type for TMP_202

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_203(bool) = foreignAmountIn_1 > 0
[i]Type for TMP_203

Name: TMP_203 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_204(uint256) = foreignBalance_1 (c)- foreignReserve_1
Finance type key: (0, 0)
[i]Type for TMP_204

Name: TMP_204 Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_205(bool) = foreignAmountIn_1 <= TMP_204
[i]Type for TMP_205

Name: TMP_205 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_206(None) = SOLIDITY_CALL require(bool,string)(TMP_205,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_206

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_207(bool) = foreignAmountIn_1 <= foreignReserve_1
[i]Type for TMP_207

Name: TMP_207 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_215(uint256) = nativeBalance_1 (c)- nativeReserve_1
Finance type key: (0, 0)
[i]Type for TMP_215

Name: TMP_215 Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_216(bool) = nativeAmountIn_1 <= TMP_215
Finance type key: (0, 0)
[i]Type for TMP_216

Name: TMP_216 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_217(None) = SOLIDITY_CALL require(bool,string)(TMP_216,BasePool::swap: Insufficient Tokens Provided)
[i]Type for TMP_217

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_209(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['foreignAmountIn_1', 'foreignReserve_1', 'nativeReserve_1'] 
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 5, 4
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 5, 5
Den: -1
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
[i]Type for TMP_209

Name: TMP_209 Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
nativeAmountOut_1(uint256) := TMP_209(uint256)
Finance type key: (40, -1)
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_218(bool) = nativeAmountIn_1 <= nativeReserve_1
Finance type key: (0, 0)
[i]Type for TMP_218

Name: TMP_218 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_219(None) = SOLIDITY_CALL require(bool,string)(TMP_218,BasePool::swap: Unfavourable Trade)
[i]Type for TMP_219

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_210(bool) = nativeAmountOut_1 > 0
[i]Type for TMP_210

Name: TMP_210 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_211(bool) = nativeAmountOut_1 <= nativeReserve_1
Finance type key: (40, 0)
Handling trace

Name: nativeAmountOut Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate

Name: nativeReserve Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
d:{4: 0}
[i]Type for TMP_211

Name: TMP_211 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_212(bool) = TMP_210 && TMP_211
[i]Type for TMP_212

Name: TMP_212 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_213(None) = SOLIDITY_CALL require(bool,string)(TMP_212,BasePool::swap: Swap Impossible)
[i]Type for TMP_213

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_220(uint256) = LIBRARY_CALL, dest:VaderMath, function:VaderMath.calculateSwap(uint256,uint256,uint256), arguments:['nativeAmountIn_1', 'nativeReserve_1', 'foreignReserve_1'] 
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
TMP_26(uint256) = amountIn_1 (c)* reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_26

Name: TMP_26 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_27(uint256) = TMP_26 (c)* reserveOut_1
Finance type key: (0, 0)
[i]Type for TMP_27

Name: TMP_27 Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
numerator_1(uint256) := TMP_27(uint256)
Finance type key: (0, -1)
[i]Type for numerator

Name: numerator Function: calculateSwap
Num: 4, 5
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_28(uint256) = amountIn_1 (c)+ reserveIn_1
Finance type key: (0, 0)
[i]Type for TMP_28

Name: TMP_28 Function: calculateSwap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_29(uint256) = INTERNAL_CALL, VaderMath.pow(uint256)(TMP_28)
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
a_1(uint256) := ϕ(['TMP_28'])
[i]Type for a

Name: a Function: pow
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_48(uint256) = a_1 (c)* a_1
Finance type key: (0, 0)
[i]Type for TMP_48

Name: TMP_48 Function: pow
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
RETURN TMP_48
[i]Type for TMP_29

Name: TMP_29 Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
denominator_1(uint256) := TMP_29(uint256)
Finance type key: (0, -1)
[i]Type for denominator

Name: denominator Function: calculateSwap
Num: 4, 4
Den: -1
Address: u
Norm: 36
LF: None
Value: u
Fields: 
Finance Type: raw balance
TMP_30(uint256) = numerator_1 (c)/ denominator_1
Finance type key: (0, 0)
Finance type key: (0, 0)
[i]Type for TMP_30

Name: TMP_30 Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
amountOut_1(uint256) := TMP_30(uint256)
Finance type key: (40, -1)
[i]Type for amountOut

Name: amountOut Function: calculateSwap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
RETURN amountOut_1
[i]Type for TMP_220

Name: TMP_220 Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
foreignAmountOut_1(uint256) := TMP_220(uint256)
Finance type key: (40, -1)
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_nativeAsset_1', 'to_1', 'nativeAmountOut_1'] 
TMP_221(bool) = foreignAmountOut_1 > 0
[i]Type for TMP_221

Name: TMP_221 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_222(bool) = foreignAmountOut_1 <= foreignReserve_1
Finance type key: (40, 0)
Handling trace

Name: foreignAmountOut Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate

Name: foreignReserve Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
d:{5: 0}
[i]Type for TMP_222

Name: TMP_222 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_223(bool) = TMP_221 && TMP_222
[i]Type for TMP_223

Name: TMP_223 Function: swap
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_224(None) = SOLIDITY_CALL require(bool,string)(TMP_223,BasePool::swap: Swap Impossible)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
nativeAmountOut_2(uint256) := ϕ(['nativeAmountOut_1', 'nativeAmountOut_0'])
[i]Type for nativeAmountOut

Name: nativeAmountOut Function: swap
Num: 4
Den: 5
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
foreignAmountOut_2(uint256) := ϕ(['foreignAmountOut_1', 'foreignAmountOut_0'])
[i]Type for foreignAmountOut

Name: foreignAmountOut Function: swap
Num: 5
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
TMP_226 = CONVERT this to address
[i]Type for TMP_226

Name: TMP_226 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_227(uint256) = HIGH_LEVEL_CALL, dest:_nativeAsset_1(IERC20), function:balanceOf, arguments:['TMP_226']  
[i]Type for TMP_227

Name: TMP_227 Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
nativeBalance_2(uint256) := TMP_227(uint256)
Finance type key: (0, -1)
[i]Type for nativeBalance

Name: nativeBalance Function: swap
Num: 4
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['_foreignAsset_1', 'to_1', 'foreignAmountOut_1'] 
TMP_228 = CONVERT this to address
[i]Type for TMP_228

Name: TMP_228 Function: swap
Num: 
Den: 
Address: 6
Norm: u
LF: BasePool
Value: u
Fields: 
Finance Type: undef
TMP_229(uint256) = HIGH_LEVEL_CALL, dest:_foreignAsset_1(IERC20), function:balanceOf, arguments:['TMP_228']  
[i]Type for TMP_229

Name: TMP_229 Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
foreignBalance_2(uint256) := TMP_229(uint256)
Finance type key: (0, -1)
[i]Type for foreignBalance

Name: foreignBalance Function: swap
Num: 5
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
INTERNAL_CALL, BasePool._update(uint256,uint256,uint112,uint112)(nativeBalance_2,foreignBalance_2,nativeReserve_1,foreignReserve_1)
RETURN nativeAmountOut_2
Function count: 65
