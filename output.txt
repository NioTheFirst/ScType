Switched global version to 0.6.12
Checking ICoreOracle
Checking WrappedIbbtc
Checking ContextUpgradeable
Checking SafeMathUpgradeable
Checking Initializable
Checking ERC20Upgradeable
Checking IERC20Upgradeable
Checking AddressUpgradeable
Add to address_to_label {'global:pendingGovernance': 1}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992, 'sharesOf:account': -991}
Add to address_to_label {'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992, 'sharesOf:account': -991, 'balanceOf:account': -990}
State_var: _name
Finding type for _name(string ... )
State_var: _allowances
Finding type for _allowances(mapping(address => mapping(address => uint256)) ... )
State_var: ibbtc
Finding type for ibbtc(ERC20Upgradeable ... )
State_var: pendingGovernance
Finding type for pendingGovernance(address ... )
prev address? u
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
State_var: governance
Finding type for governance(address ... )
prev address? u
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
State_var: _totalSupply
Finding type for _totalSupply(uint256 ... )
State_var: oracle
Finding type for oracle(ICoreOracle ... )
State_var: _balances
Finding type for _balances(mapping(address => uint256) ... )
State_var: _initialized
Finding type for _initialized(bool ... )
State_var: _initializing
Finding type for _initializing(bool ... )
State_var: _decimals
Finding type for _decimals(uint8 ... )
State_var: _symbol
Finding type for _symbol(string ... )



initialize
Finding type for _governance(address ... )
prev address? u
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Finding type for _ibbtc(address ... )
prev address? u
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Finding type for _oracle(address ... )
prev address? u
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: _governance
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: _ibbtc
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: _oracle
    fields: []
    fintype: -1


MODIFIER_CALL, Initializable.initializer()()
INTERNAL_CALL, ERC20Upgradeable.__ERC20_init(string,string)(Wrapped Interest-Bearing Bitcoin,wibBTC)
governance_1(address) := _governance_1(address)
TMP_62 = CONVERT _oracle_1 to ICoreOracle
oracle_1(ICoreOracle) := TMP_62(ICoreOracle)
TMP_63 = CONVERT _ibbtc_1 to ERC20Upgradeable
ibbtc_1(ERC20Upgradeable) := TMP_63(ERC20Upgradeable)
Emit SetOracle(_oracle_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Initializable.initializer()()
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ERC20Upgradeable.__ERC20_init(string,string)(Wrapped Interest-Bearing Bitcoin,wibBTC)
Propogating parameters and globals to SSA variables...
Name: governance, Num: 1
Globalname: governance
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
End popogation
governance_1(address) := _governance_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for governance

Name: governance Function: initialize
Num: -1
Den: -1
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 1
Globalname: oracle
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_62 = CONVERT _oracle_1 to ICoreOracle
Converting _oracle_1

Name: _oracle_1 Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: _oracle
Value: u
Fields: 
Finance Type: undef
init
end
CoreOracle
[i]Type for TMP_62

Name: TMP_62 Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
oracle_1(ICoreOracle) := TMP_62(ICoreOracle)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: initialize
Num: -1
Den: -1
Address: -997
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: ibbtc, Num: 1
Globalname: ibbtc
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_63 = CONVERT _ibbtc_1 to ERC20Upgradeable
Converting _ibbtc_1

Name: _ibbtc_1 Function: None
Num: 
Den: 
Address: -998
Norm: u
LF: _ibbtc
Value: u
Fields: 
Finance Type: undef
init
end
UNKNOWN
[i]Type for TMP_63

Name: TMP_63 Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
ibbtc_1(ERC20Upgradeable) := TMP_63(ERC20Upgradeable)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for ibbtc

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


MODIFIER_CALL, Initializable.initializer()()
INTERNAL_CALL, ERC20Upgradeable.__ERC20_init(string,string)(Wrapped Interest-Bearing Bitcoin,wibBTC)
governance_1(address) := _governance_1(address)
TMP_62 = CONVERT _oracle_1 to ICoreOracle
oracle_1(ICoreOracle) := TMP_62(ICoreOracle)
TMP_63 = CONVERT _ibbtc_1 to ERC20Upgradeable
ibbtc_1(ERC20Upgradeable) := TMP_63(ERC20Upgradeable)
Emit SetOracle(_oracle_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Initializable.initializer()()
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ERC20Upgradeable.__ERC20_init(string,string)(Wrapped Interest-Bearing Bitcoin,wibBTC)
Propogating parameters and globals to SSA variables...
End popogation
governance_1(address) := _governance_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for governance

Name: governance Function: initialize
Num: -1
Den: -1
Address: -999
Norm: u
LF: _governance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_62 = CONVERT _oracle_1 to ICoreOracle
Converting _oracle_1

Name: _oracle Function: None
Num: 
Den: 
Address: -997
Norm: u
LF: _oracle
Value: u
Fields: 
Finance Type: undef
init
end
CoreOracle
[i]Type for TMP_62

Name: TMP_62 Function: initialize
Num: 
Den: 
Address: -997
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
oracle_1(ICoreOracle) := TMP_62(ICoreOracle)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: initialize
Num: -1
Den: -1
Address: -997
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_63 = CONVERT _ibbtc_1 to ERC20Upgradeable
Converting _ibbtc_1

Name: _ibbtc Function: None
Num: 
Den: 
Address: -998
Norm: u
LF: _ibbtc
Value: u
Fields: 
Finance Type: undef
init
end
UNKNOWN
[i]Type for TMP_63

Name: TMP_63 Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
ibbtc_1(ERC20Upgradeable) := TMP_63(ERC20Upgradeable)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for ibbtc

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



setPendingGovernance
Finding type for _pendingGovernance(address ... )
prev address? u
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: _pendingGovernance
    fields: []
    fintype: -1


MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
pendingGovernance_1(address) := _pendingGovernance_1(address)
Emit SetPendingGovernance(pendingGovernance_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
Propogating parameters and globals to SSA variables...
Name: pendingGovernance, Num: 1
Globalname: pendingGovernance
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef
End popogation
pendingGovernance_1(address) := _pendingGovernance_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for pendingGovernance

Name: pendingGovernance Function: setPendingGovernance
Num: -1
Den: -1
Address: -996
Norm: u
LF: _pendingGovernance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
pendingGovernance_1(address) := _pendingGovernance_1(address)
Emit SetPendingGovernance(pendingGovernance_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
Propogating parameters and globals to SSA variables...
End popogation
pendingGovernance_1(address) := _pendingGovernance_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for pendingGovernance

Name: pendingGovernance Function: setPendingGovernance
Num: -1
Den: -1
Address: -996
Norm: u
LF: _pendingGovernance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



setOracle
Finding type for _oracle(address ... )
prev address? u
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: _oracle
    fields: []
    fintype: -1


MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
TMP_68 = CONVERT _oracle_1 to ICoreOracle
oracle_2(ICoreOracle) := TMP_68(ICoreOracle)
Emit SetOracle(_oracle_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
Propogating parameters and globals to SSA variables...
Name: oracle, Num: 2
Globalname: oracle
global...

Name: oracle Function: initialize
Num: -1
Den: -1
Address: -997
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_68 = CONVERT _oracle_1 to ICoreOracle
Converting _oracle_1

Name: _oracle_1 Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: _oracle
Value: u
Fields: 
Finance Type: undef
init
end
CoreOracle
[i]Type for TMP_68

Name: TMP_68 Function: setOracle
Num: 
Den: 
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
oracle_2(ICoreOracle) := TMP_68(ICoreOracle)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: setOracle
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
TMP_68 = CONVERT _oracle_1 to ICoreOracle
oracle_2(ICoreOracle) := TMP_68(ICoreOracle)
Emit SetOracle(_oracle_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, WrappedIbbtc.onlyGovernance()()
Propogating parameters and globals to SSA variables...
End popogation
TMP_68 = CONVERT _oracle_1 to ICoreOracle
Converting _oracle_1

Name: _oracle Function: None
Num: 
Den: 
Address: -995
Norm: u
LF: _oracle
Value: u
Fields: 
Finance Type: undef
init
end
CoreOracle
[i]Type for TMP_68

Name: TMP_68 Function: setOracle
Num: 
Den: 
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
oracle_2(ICoreOracle) := TMP_68(ICoreOracle)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for oracle

Name: oracle Function: setOracle
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



acceptPendingGovernance


pendingGovernance_2(address) := ϕ(['pendingGovernance_0', 'pendingGovernance_3', 'pendingGovernance_1'])
MODIFIER_CALL, WrappedIbbtc.onlyPendingGovernance()()
governance_2(address) := pendingGovernance_3(address)
Emit AcceptPendingGovernance(pendingGovernance_3)


Propogating parameters and globals to SSA variables...
End popogation
Name: pendingGovernance, Num: 2
Globalname: pendingGovernance
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef
Phid
pendingGovernance_2(address) := ϕ(['pendingGovernance_0', 'pendingGovernance_3', 'pendingGovernance_1'])
Phi
[i]Type for pendingGovernance

Name: pendingGovernance Function: acceptPendingGovernance
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, WrappedIbbtc.onlyPendingGovernance()()
Propogating parameters and globals to SSA variables...
Name: pendingGovernance, Num: 3
Globalname: pendingGovernance
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef
Name: governance, Num: 2
Globalname: governance
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
End popogation
governance_2(address) := pendingGovernance_3(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for governance

Name: governance Function: acceptPendingGovernance
Num: -1
Den: -1
Address: 2
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


pendingGovernance_2(address) := ϕ(['pendingGovernance_0', 'pendingGovernance_3', 'pendingGovernance_1'])
MODIFIER_CALL, WrappedIbbtc.onlyPendingGovernance()()
governance_2(address) := pendingGovernance_3(address)
Emit AcceptPendingGovernance(pendingGovernance_3)


Propogating parameters and globals to SSA variables...
End popogation

Name: pendingGovernance Function: acceptPendingGovernance
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef
Phid
pendingGovernance_2(address) := ϕ(['pendingGovernance_0', 'pendingGovernance_3', 'pendingGovernance_1'])
Phi
[i]Type for pendingGovernance

Name: pendingGovernance Function: acceptPendingGovernance
Num: -1
Den: -1
Address: 1
Norm: u
LF: pendingGovernance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, WrappedIbbtc.onlyPendingGovernance()()
Propogating parameters and globals to SSA variables...
End popogation
governance_2(address) := pendingGovernance_3(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for governance

Name: governance Function: acceptPendingGovernance
Num: -1
Den: -1
Address: 2
Norm: u
LF: governance
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



mint
Finding type for _shares(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


ibbtc_2(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
TMP_73(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
TMP_74 = CONVERT this to address
TMP_75(bool) = HIGH_LEVEL_CALL, dest:ibbtc_3(ERC20Upgradeable), function:transferFrom, arguments:['TMP_73', 'TMP_74', '_shares_1']  
ibbtc_4(ERC20Upgradeable) := ϕ(['ibbtc_3', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)
TMP_77(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
INTERNAL_CALL, ERC20Upgradeable._mint(address,uint256)(TMP_77,_shares_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: ibbtc, Num: 2
Globalname: ibbtc
global...

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
ibbtc_2(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: mint
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: ibbtc, Num: 3
Globalname: ibbtc
global...

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Name: _shares, Num: 1
Globalname: _shares
End popogation
Name: ibbtc, Num: 4
Globalname: ibbtc
global...

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
TMP_73(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_73

Name: TMP_73 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_74 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 3
3
3
[i]Type for TMP_74

Name: TMP_74 Function: mint
Num: -1
Den: -1
Address: 3
Norm: u
LF: WrappedIbbtc
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(bool) = HIGH_LEVEL_CALL, dest:ibbtc_3(ERC20Upgradeable), function:transferFrom, arguments:['TMP_73', 'TMP_74', '_shares_1']  
High Call: transferFrom
Running querryfc
[i]Type for TMP_75

Name: TMP_75 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ibbtc_4(ERC20Upgradeable) := ϕ(['ibbtc_3', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: mint
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)
[i]Type for TMP_76

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _shares, Num: 1
Globalname: _shares
End popogation
TMP_77(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_77

Name: TMP_77 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC20Upgradeable._mint(address,uint256)(TMP_77,_shares_1)


ibbtc_2(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
TMP_73(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
TMP_74 = CONVERT this to address
TMP_75(bool) = HIGH_LEVEL_CALL, dest:ibbtc_3(ERC20Upgradeable), function:transferFrom, arguments:['TMP_73', 'TMP_74', '_shares_1']  
ibbtc_4(ERC20Upgradeable) := ϕ(['ibbtc_3', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)
TMP_77(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
INTERNAL_CALL, ERC20Upgradeable._mint(address,uint256)(TMP_77,_shares_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: ibbtc Function: mint
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
ibbtc_2(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: mint
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _shares, Num: 1
Globalname: _shares
End popogation

Name: ibbtc Function: mint
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
TMP_73(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_73

Name: TMP_73 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_74 = CONVERT this to address
Converting this
3
[i]Type for TMP_74

Name: TMP_74 Function: mint
Num: 
Den: 
Address: 3
Norm: u
LF: WrappedIbbtc
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(bool) = HIGH_LEVEL_CALL, dest:ibbtc_3(ERC20Upgradeable), function:transferFrom, arguments:['TMP_73', 'TMP_74', '_shares_1']  
High Call: transferFrom
Running querryfc
[i]Type for TMP_75

Name: TMP_75 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ibbtc_4(ERC20Upgradeable) := ϕ(['ibbtc_3', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: mint
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)
[i]Type for TMP_76

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _shares, Num: 1
Globalname: _shares
End popogation
TMP_77(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_77

Name: TMP_77 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC20Upgradeable._mint(address,uint256)(TMP_77,_shares_1)
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



burn
Finding type for _shares(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


ibbtc_5(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
TMP_79(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
INTERNAL_CALL, ERC20Upgradeable._burn(address,uint256)(TMP_79,_shares_1)
TMP_81(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
TMP_82(bool) = HIGH_LEVEL_CALL, dest:ibbtc_8(ERC20Upgradeable), function:transfer, arguments:['TMP_81', '_shares_1']  
ibbtc_9(ERC20Upgradeable) := ϕ(['ibbtc_8', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)


Propogating parameters and globals to SSA variables...
End popogation
Name: ibbtc, Num: 5
Globalname: ibbtc
global...

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
ibbtc_5(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: burn
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _shares, Num: 1
Globalname: _shares
End popogation
TMP_79(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_79

Name: TMP_79 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC20Upgradeable._burn(address,uint256)(TMP_79,_shares_1)
Propogating parameters and globals to SSA variables...
Name: _shares, Num: 1
Globalname: _shares
Name: ibbtc, Num: 8
Globalname: ibbtc
global...

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
End popogation
Name: ibbtc, Num: 9
Globalname: ibbtc
global...

Name: ibbtc Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
TMP_81(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_81

Name: TMP_81 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82(bool) = HIGH_LEVEL_CALL, dest:ibbtc_8(ERC20Upgradeable), function:transfer, arguments:['TMP_81', '_shares_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_82

Name: TMP_82 Function: burn
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ibbtc_9(ERC20Upgradeable) := ϕ(['ibbtc_8', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: burn
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


ibbtc_5(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
TMP_79(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
INTERNAL_CALL, ERC20Upgradeable._burn(address,uint256)(TMP_79,_shares_1)
TMP_81(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
TMP_82(bool) = HIGH_LEVEL_CALL, dest:ibbtc_8(ERC20Upgradeable), function:transfer, arguments:['TMP_81', '_shares_1']  
ibbtc_9(ERC20Upgradeable) := ϕ(['ibbtc_8', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)


Propogating parameters and globals to SSA variables...
End popogation

Name: ibbtc Function: burn
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
ibbtc_5(ERC20Upgradeable) := ϕ(['ibbtc_0', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: burn
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _shares, Num: 1
Globalname: _shares
End popogation
TMP_79(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_79

Name: TMP_79 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC20Upgradeable._burn(address,uint256)(TMP_79,_shares_1)
Propogating parameters and globals to SSA variables...
Name: _shares, Num: 1
Globalname: _shares
End popogation

Name: ibbtc Function: burn
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
Phid
TMP_81(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_81

Name: TMP_81 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82(bool) = HIGH_LEVEL_CALL, dest:ibbtc_8(ERC20Upgradeable), function:transfer, arguments:['TMP_81', '_shares_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_82

Name: TMP_82 Function: burn
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ibbtc_9(ERC20Upgradeable) := ϕ(['ibbtc_8', 'ibbtc_4', 'ibbtc_9', 'ibbtc_1'])
Phi
[i]Type for ibbtc

Name: ibbtc Function: burn
Num: -1
Den: -1
Address: -998
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)
[i]Type for TMP_83

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



transferFrom
Finding type for sender(address ... )
prev address? u
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
Finding type for recipient(address ... )
prev address? u
Changed here
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Finding type for amount(uint256 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: sender
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: recipient
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


_allowances_16(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_1', '_allowances_14', '_allowances_6', '_allowances_21', '_allowances_0', '_allowances_10', '_allowances_15'])
TMP_84(uint256) = INTERNAL_CALL, WrappedIbbtc.balanceToShares(uint256)(amount_1)
amountInShares_1(uint256) := TMP_84(uint256)
INTERNAL_CALL, ERC20Upgradeable._transfer(address,address,uint256)(sender_1,recipient_1,amountInShares_1)
TMP_86(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
REF_31(mapping(address => uint256)) -> _allowances_19[sender_1]
TMP_87(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
REF_32(uint256) -> REF_31[TMP_87]
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_32', 'amountInShares_1', 'ERC20: transfer amount exceeds allowance'] 
INTERNAL_CALL, ERC20Upgradeable._approve(address,address,uint256)(sender_1,TMP_86,TMP_88)
_allowances_21(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_15'])
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Name: _allowances, Num: 16
Globalname: _allowances
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_allowances_16(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_1', '_allowances_14', '_allowances_6', '_allowances_21', '_allowances_0', '_allowances_10', '_allowances_15'])
Phi
[i]Type for _allowances

Name: _allowances Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
Name: amountInShares, Num: 1
Globalname: amountInShares
End popogation
TMP_84(uint256) = INTERNAL_CALL, WrappedIbbtc.balanceToShares(uint256)(amount_1)
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: balance Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: balance, Num: 1
Globalname: balance

Name: balance_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
balance_1(uint256) := ϕ(['amount_1', 'amount_1'])
Phi
init
end
[i]Type for balance

Name: balance Function: balanceToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: balance, Num: 1
Globalname: balance
End popogation
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balance_1', '1000000000000000000'] 
testing mul...
init
end
init
end

Name: balance_1 Function: balanceToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
[i]Type for TMP_102

Name: TMP_102 Function: balanceToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
Propogating parameters and globals to SSA variables...
End popogation
Name: oracle, Num: 3
Globalname: oracle
global...

Name: oracle Function: setOracle
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
Phid
oracle_3(ICoreOracle) := ϕ(['oracle_0', 'oracle_4', 'oracle_2', 'oracle_1'])
Phi
[i]Type for oracle

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: oracle, Num: 4
Globalname: oracle
global...

Name: oracle Function: setOracle
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
Phid
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:oracle_3(ICoreOracle), function:pricePerShare, arguments:[]  
High Call: pricePerShare
Running querryfc
Written func info: CoreOracle, pricePerShare
Retvar: ('c', ['global:token'], ['global:share'], 0, "'u'", None)
{'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992, 'sharesOf:account': -991, 'balanceOf:account': -990, 'mint:TMP_74': 3, 'global:this': 3}
{'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992, 'sharesOf:account': -991, 'balanceOf:account': -990, 'mint:TMP_74': 3, 'global:this': 3}
([-1], [-1], 0, "'u'", None, -1)
[i]Type for TMP_93

Name: TMP_93 Function: pricePerShare
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
oracle_4(ICoreOracle) := ϕ(['oracle_4', 'oracle_2', 'oracle_3', 'oracle_1'])
Phi
[i]Type for oracle

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_93
RETURN
init
end

Name: TMP_93 Function: pricePerShare
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
Phid
oracle_3(ICoreOracle) := ϕ(['oracle_0', 'oracle_4', 'oracle_2', 'oracle_1'])
Phi
[i]Type for oracle

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
Phid
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:oracle_3(ICoreOracle), function:pricePerShare, arguments:[]  
High Call: pricePerShare
Running querryfc
Written func info: CoreOracle, pricePerShare
Retvar: ('c', ['global:token'], ['global:share'], 0, "'u'", None)
{'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992, 'sharesOf:account': -991, 'balanceOf:account': -990, 'mint:TMP_74': 3, 'global:this': 3}
{'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992, 'sharesOf:account': -991, 'balanceOf:account': -990, 'mint:TMP_74': 3, 'global:this': 3}
([-1], [-1], 0, "'u'", None, -1)
[i]Type for TMP_93

Name: TMP_93 Function: pricePerShare
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
oracle_4(ICoreOracle) := ϕ(['oracle_4', 'oracle_2', 'oracle_3', 'oracle_1'])
Phi
[i]Type for oracle

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_93
RETURN
init
end

Name: TMP_93 Function: pricePerShare
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
[i]Type for TMP_103

Name: TMP_103 Function: balanceToShares
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_102', 'TMP_103'] 
init
end
init
end
lnorm: 18 rnorm: 0
init
end
[i]Type for TMP_104

Name: TMP_104 Function: balanceToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_104
RETURN
init
end

Name: TMP_104 Function: balanceToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: balance, Num: 1
Globalname: balance

Name: balance_1 Function: balanceToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
balance_1(uint256) := ϕ(['amount_1', 'amount_1'])
Phi
init
end
[i]Type for balance

Name: balance Function: balanceToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: balance, Num: 1
Globalname: balance
End popogation
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balance_1', '1000000000000000000'] 
testing mul...
init
end
init
end

Name: balance_1 Function: balanceToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
[i]Type for TMP_102

Name: TMP_102 Function: balanceToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
init
end
[i]Type for TMP_103

Name: TMP_103 Function: balanceToShares
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_102', 'TMP_103'] 
init
end
init
end
lnorm: 18 rnorm: u
init
end
[i]Type for TMP_104

Name: TMP_104 Function: balanceToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_104
RETURN
init
end

Name: TMP_104 Function: balanceToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_84

Name: TMP_84 Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountInShares_1(uint256) := TMP_84(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amountInShares

Name: amountInShares Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ERC20Upgradeable._transfer(address,address,uint256)(sender_1,recipient_1,amountInShares_1)
init
end
init
end
init
end
[[], [], 'u', 'sender', [], -1, -994, 'u']

Name: sender Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', 'recipient', [], -1, -993, 'u']

Name: recipient Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 18, None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: sender_1 Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: recipient_1 Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _balances, Num: 2
Globalname: _balances
global...

Name: PIC_8 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
sender_1(address) := ϕ(['sender_1', 'TMP_4', 'TMP_91', 'sender_1'])
Phi
[i]Type for sender

Name: sender Function: _transfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'recipient_1'])
Phi
[i]Type for recipient

Name: recipient Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amountInShares_1', 'amountInShares_1', 'amount_1', 'amount_1'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_2(mapping(address => uint256)) := ϕ(['_balances_0', '_balances_8', '_balances_5', '_balances_11', '_balances_1', '_balances_12'])
Phi
[i]Type for _balances

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_21 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_21

Name: TMP_21 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = sender_1 != TMP_21
[i]Type for TMP_22

Name: TMP_22 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,ERC20: transfer from the zero address)
[i]Type for TMP_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_24 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_24

Name: TMP_24 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_25(bool) = recipient_1 != TMP_24
[i]Type for TMP_25

Name: TMP_25 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,ERC20: transfer to the zero address)
[i]Type for TMP_26

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ERC20Upgradeable._beforeTokenTransfer(address,address,uint256)(sender_1,recipient_1,amount_1)
init
end
init
end
init
end
[[], [], 'u', 'sender', [], -1, -994, 'u']

Name: from Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', 'recipient', [], -1, -993, 'u']

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 18, None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: from_1 Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: to_1 Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
from_1(address) := ϕ(['sender_1', 'TMP_34', 'account_1'])
Phi
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['account_1', 'recipient_1', 'TMP_43'])
Phi
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount_1', 'amount_1', 'amount_1'])
Phi
[i]Type for amount

Name: amount Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: from_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: to_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
from_1(address) := ϕ(['sender_1', 'TMP_34', 'account_1'])
Phi
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['account_1', 'recipient_1', 'TMP_43'])
Phi
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount_1', 'amount_1', 'amount_1'])
Phi
[i]Type for amount

Name: amount Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _balances, Num: 3
Globalname: _balances
global...

Name: PIC_8 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _balances, Num: 4
Globalname: _balances
global...

Name: PIC_8 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_12(uint256) -> _balances_3[sender_1]
INDEX
[i]Type for REF_12

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_13(uint256) -> _balances_3[sender_1]
INDEX
[i]Type for REF_13

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_13', 'amount_1', 'ERC20: transfer amount exceeds balance'] 
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_28

Name: TMP_28 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_4(mapping(address => uint256)) := ϕ(['_balances_3'])
Phi
[i]Type for _balances

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_12 (->_balances_4) := TMP_28(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_12

Name: REF_12 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: _balances, Num: 5
Globalname: _balances
global...

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_15(uint256) -> _balances_4[recipient_1]
INDEX
[i]Type for REF_15

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_16(uint256) -> _balances_4[recipient_1]
INDEX
[i]Type for REF_16

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['REF_16', 'amount_1'] 
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_29

Name: TMP_29 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_5(mapping(address => uint256)) := ϕ(['_balances_4'])
Phi
[i]Type for _balances

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_15 (->_balances_5) := TMP_29(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_15

Name: REF_15 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: sender_1 Function: _transfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: recipient_1 Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
sender_1(address) := ϕ(['sender_1', 'TMP_4', 'TMP_91', 'sender_1'])
Phi
[i]Type for sender

Name: sender Function: _transfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'recipient_1'])
Phi
[i]Type for recipient

Name: recipient Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amountInShares_1', 'amountInShares_1', 'amount_1', 'amount_1'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_2(mapping(address => uint256)) := ϕ(['_balances_0', '_balances_8', '_balances_5', '_balances_11', '_balances_1', '_balances_12'])
Phi
[i]Type for _balances

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_21 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_21

Name: TMP_21 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = sender_1 != TMP_21
[i]Type for TMP_22

Name: TMP_22 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,ERC20: transfer from the zero address)
[i]Type for TMP_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_24 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_24

Name: TMP_24 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_25(bool) = recipient_1 != TMP_24
[i]Type for TMP_25

Name: TMP_25 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,ERC20: transfer to the zero address)
[i]Type for TMP_26

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ERC20Upgradeable._beforeTokenTransfer(address,address,uint256)(sender_1,recipient_1,amount_1)
init
end
init
end
init
end
Propogating parameters and globals to SSA variables...
End popogation

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_12(uint256) -> _balances_3[sender_1]
INDEX
[i]Type for REF_12

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_13(uint256) -> _balances_3[sender_1]
INDEX
[i]Type for REF_13

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_13', 'amount_1', 'ERC20: transfer amount exceeds balance'] 
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_28

Name: TMP_28 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_4(mapping(address => uint256)) := ϕ(['_balances_3'])
Phi
[i]Type for _balances

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_12 (->_balances_4) := TMP_28(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_12

Name: REF_12 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_15(uint256) -> _balances_4[recipient_1]
INDEX
[i]Type for REF_15

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_16(uint256) -> _balances_4[recipient_1]
INDEX
[i]Type for REF_16

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['REF_16', 'amount_1'] 
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_29

Name: TMP_29 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_5(mapping(address => uint256)) := ϕ(['_balances_4'])
Phi
[i]Type for _balances

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_15 (->_balances_5) := TMP_29(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_15

Name: REF_15 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _allowances, Num: 19
Globalname: _allowances
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Name: _allowances, Num: 21
Globalname: _allowances
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_86(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN msg.sender
RETURN
init
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN msg.sender
RETURN
init
[i]Type for TMP_86

Name: TMP_86 Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_31(mapping(address => uint256)) -> _allowances_19[sender_1]
INDEX
[i]Type for REF_31

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_87(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
init
end
[i]Type for TMP_87

Name: TMP_87 Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_32(uint256) -> REF_31[TMP_87]
INDEX
[i]Type for REF_32

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_32', 'amountInShares_1', 'ERC20: transfer amount exceeds allowance'] 
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_88

Name: TMP_88 Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC20Upgradeable._approve(address,address,uint256)(sender_1,TMP_86,TMP_88)
init
end
init
end
init
end
[[], [], 'u', 'sender', [], -1, -994, 'u']

Name: owner Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: spender Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: spender
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 18, None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: owner_1 Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: spender_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: spender
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
owner_1(address) := ϕ(['TMP_13', 'sender_1', 'TMP_6', 'sender_1', 'TMP_17'])
Phi
[i]Type for owner

Name: owner Function: _approve
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
spender_1(address) := ϕ(['TMP_9', 'TMP_86', 'spender_1', 'spender_1', 'spender_1'])
Phi
[i]Type for spender

Name: spender Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: spender
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount_1', 'TMP_19', 'TMP_11', 'TMP_88', 'TMP_15'])
Phi
[i]Type for amount

Name: amount Function: _approve
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_49 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_49

Name: TMP_49 Function: _approve
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_50(bool) = owner_1 != TMP_49
[i]Type for TMP_50

Name: TMP_50 Function: _approve
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,ERC20: approve from the zero address)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_52 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_52

Name: TMP_52 Function: _approve
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(bool) = spender_1 != TMP_52
[i]Type for TMP_53

Name: TMP_53 Function: _approve
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(None) = SOLIDITY_CALL require(bool,string)(TMP_53,ERC20: approve to the zero address)
[i]Type for TMP_54

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _allowances, Num: 15
Globalname: _allowances
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_26(mapping(address => uint256)) -> _allowances_14[owner_1]
INDEX
[i]Type for REF_26

Name: None Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_27(uint256) -> REF_26[spender_1]
INDEX
[i]Type for REF_27

Name: None Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_allowances_15(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_14'])
Phi
[i]Type for _allowances

Name: _allowances Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27 (->_allowances_15) := amount_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_27

Name: REF_27 Function: _approve
Num: 
Den: 
Address: -994
Norm: 18
LF: sender
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: owner_1 Function: _approve
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: spender_1 Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: spender
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: _approve
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
owner_1(address) := ϕ(['TMP_13', 'sender_1', 'TMP_6', 'sender_1', 'TMP_17'])
Phi
[i]Type for owner

Name: owner Function: _approve
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
spender_1(address) := ϕ(['TMP_9', 'TMP_86', 'spender_1', 'spender_1', 'spender_1'])
Phi
[i]Type for spender

Name: spender Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: spender
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount_1', 'TMP_19', 'TMP_11', 'TMP_88', 'TMP_15'])
Phi
[i]Type for amount

Name: amount Function: _approve
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_49 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_49

Name: TMP_49 Function: _approve
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_50(bool) = owner_1 != TMP_49
[i]Type for TMP_50

Name: TMP_50 Function: _approve
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,ERC20: approve from the zero address)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_52 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_52

Name: TMP_52 Function: _approve
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(bool) = spender_1 != TMP_52
[i]Type for TMP_53

Name: TMP_53 Function: _approve
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(None) = SOLIDITY_CALL require(bool,string)(TMP_53,ERC20: approve to the zero address)
[i]Type for TMP_54

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: _allowances Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_26(mapping(address => uint256)) -> _allowances_14[owner_1]
INDEX
[i]Type for REF_26

Name: None Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_27(uint256) -> REF_26[spender_1]
INDEX
[i]Type for REF_27

Name: None Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_allowances_15(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_14'])
Phi
[i]Type for _allowances

Name: _allowances Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27 (->_allowances_15) := amount_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_27

Name: REF_27 Function: _approve
Num: 
Den: 
Address: -994
Norm: 18
LF: sender
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
_allowances_21(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_15'])
Phi
[i]Type for _allowances

Name: _allowances Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef


_allowances_16(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_1', '_allowances_14', '_allowances_6', '_allowances_21', '_allowances_0', '_allowances_10', '_allowances_15'])
TMP_84(uint256) = INTERNAL_CALL, WrappedIbbtc.balanceToShares(uint256)(amount_1)
amountInShares_1(uint256) := TMP_84(uint256)
INTERNAL_CALL, ERC20Upgradeable._transfer(address,address,uint256)(sender_1,recipient_1,amountInShares_1)
TMP_86(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
REF_31(mapping(address => uint256)) -> _allowances_19[sender_1]
TMP_87(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
REF_32(uint256) -> REF_31[TMP_87]
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_32', 'amountInShares_1', 'ERC20: transfer amount exceeds allowance'] 
INTERNAL_CALL, ERC20Upgradeable._approve(address,address,uint256)(sender_1,TMP_86,TMP_88)
_allowances_21(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_15'])
RETURN True


Propogating parameters and globals to SSA variables...
End popogation

Name: _allowances Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_allowances_16(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_1', '_allowances_14', '_allowances_6', '_allowances_21', '_allowances_0', '_allowances_10', '_allowances_15'])
Phi
[i]Type for _allowances

Name: _allowances Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
Name: amountInShares, Num: 1
Globalname: amountInShares
End popogation
TMP_84(uint256) = INTERNAL_CALL, WrappedIbbtc.balanceToShares(uint256)(amount_1)
init
end
init
end
[i]Type for TMP_84

Name: TMP_84 Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountInShares_1(uint256) := TMP_84(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amountInShares

Name: amountInShares Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ERC20Upgradeable._transfer(address,address,uint256)(sender_1,recipient_1,amountInShares_1)
init
end
init
end
init
end
[[], [], 'u', 'sender', [], -1, -994, 'u']

Name: sender Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', 'recipient', [], -1, -993, 'u']

Name: recipient Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: sender_1 Function: _transfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: recipient_1 Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
sender_1(address) := ϕ(['sender_1', 'TMP_4', 'TMP_91', 'sender_1'])
Phi
[i]Type for sender

Name: sender Function: _transfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'recipient_1'])
Phi
[i]Type for recipient

Name: recipient Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amountInShares_1', 'amountInShares_1', 'amount_1', 'amount_1'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_2(mapping(address => uint256)) := ϕ(['_balances_0', '_balances_8', '_balances_5', '_balances_11', '_balances_1', '_balances_12'])
Phi
[i]Type for _balances

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_21 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_21

Name: TMP_21 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = sender_1 != TMP_21
[i]Type for TMP_22

Name: TMP_22 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,ERC20: transfer from the zero address)
[i]Type for TMP_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_24 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_24

Name: TMP_24 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_25(bool) = recipient_1 != TMP_24
[i]Type for TMP_25

Name: TMP_25 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,ERC20: transfer to the zero address)
[i]Type for TMP_26

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ERC20Upgradeable._beforeTokenTransfer(address,address,uint256)(sender_1,recipient_1,amount_1)
init
end
init
end
init
end
[[], [], 'u', 'sender', [], -1, -994, 'u']

Name: from Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', 'recipient', [], -1, -993, 'u']

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: from_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: to_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
from_1(address) := ϕ(['sender_1', 'TMP_34', 'account_1'])
Phi
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['account_1', 'recipient_1', 'TMP_43'])
Phi
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount_1', 'amount_1', 'amount_1'])
Phi
[i]Type for amount

Name: amount Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: from_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: to_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
from_1(address) := ϕ(['sender_1', 'TMP_34', 'account_1'])
Phi
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['account_1', 'recipient_1', 'TMP_43'])
Phi
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount_1', 'amount_1', 'amount_1'])
Phi
[i]Type for amount

Name: amount Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_12(uint256) -> _balances_3[sender_1]
INDEX
[i]Type for REF_12

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_13(uint256) -> _balances_3[sender_1]
INDEX
[i]Type for REF_13

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_13', 'amount_1', 'ERC20: transfer amount exceeds balance'] 
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_28

Name: TMP_28 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_4(mapping(address => uint256)) := ϕ(['_balances_3'])
Phi
[i]Type for _balances

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_12 (->_balances_4) := TMP_28(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_12

Name: REF_12 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_15(uint256) -> _balances_4[recipient_1]
INDEX
[i]Type for REF_15

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_16(uint256) -> _balances_4[recipient_1]
INDEX
[i]Type for REF_16

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['REF_16', 'amount_1'] 
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_29

Name: TMP_29 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_5(mapping(address => uint256)) := ϕ(['_balances_4'])
Phi
[i]Type for _balances

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_15 (->_balances_5) := TMP_29(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_15

Name: REF_15 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: sender_1 Function: _transfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: recipient_1 Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
sender_1(address) := ϕ(['sender_1', 'TMP_4', 'TMP_91', 'sender_1'])
Phi
[i]Type for sender

Name: sender Function: _transfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
recipient_1(address) := ϕ(['recipient_1', 'recipient_1', 'recipient_1', 'recipient_1'])
Phi
[i]Type for recipient

Name: recipient Function: _transfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amountInShares_1', 'amountInShares_1', 'amount_1', 'amount_1'])
Phi
[i]Type for amount

Name: amount Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_2(mapping(address => uint256)) := ϕ(['_balances_0', '_balances_8', '_balances_5', '_balances_11', '_balances_1', '_balances_12'])
Phi
[i]Type for _balances

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_21 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_21

Name: TMP_21 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(bool) = sender_1 != TMP_21
[i]Type for TMP_22

Name: TMP_22 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(None) = SOLIDITY_CALL require(bool,string)(TMP_22,ERC20: transfer from the zero address)
[i]Type for TMP_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_24 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_24

Name: TMP_24 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_25(bool) = recipient_1 != TMP_24
[i]Type for TMP_25

Name: TMP_25 Function: _transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_26(None) = SOLIDITY_CALL require(bool,string)(TMP_25,ERC20: transfer to the zero address)
[i]Type for TMP_26

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ERC20Upgradeable._beforeTokenTransfer(address,address,uint256)(sender_1,recipient_1,amount_1)
init
end
init
end
init
end
[[], [], 'u', 'sender', [], -1, -994, 'u']

Name: from Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', 'recipient', [], -1, -993, 'u']

Name: to Function: None
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: from_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: to_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
from_1(address) := ϕ(['sender_1', 'TMP_34', 'account_1'])
Phi
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['account_1', 'recipient_1', 'TMP_43'])
Phi
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount_1', 'amount_1', 'amount_1'])
Phi
[i]Type for amount

Name: amount Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: from_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: to_1 Function: _beforeTokenTransfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
from_1(address) := ϕ(['sender_1', 'TMP_34', 'account_1'])
Phi
[i]Type for from

Name: from Function: _beforeTokenTransfer
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
to_1(address) := ϕ(['account_1', 'recipient_1', 'TMP_43'])
Phi
[i]Type for to

Name: to Function: _beforeTokenTransfer
Num: 
Den: 
Address: -993
Norm: u
LF: recipient
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount_1', 'amount_1', 'amount_1'])
Phi
[i]Type for amount

Name: amount Function: _beforeTokenTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_12(uint256) -> _balances_3[sender_1]
INDEX
[i]Type for REF_12

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_13(uint256) -> _balances_3[sender_1]
INDEX
[i]Type for REF_13

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_13', 'amount_1', 'ERC20: transfer amount exceeds balance'] 
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_28

Name: TMP_28 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_4(mapping(address => uint256)) := ϕ(['_balances_3'])
Phi
[i]Type for _balances

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_12 (->_balances_4) := TMP_28(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_12

Name: REF_12 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_15(uint256) -> _balances_4[recipient_1]
INDEX
[i]Type for REF_15

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_16(uint256) -> _balances_4[recipient_1]
INDEX
[i]Type for REF_16

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.add(uint256,uint256), arguments:['REF_16', 'amount_1'] 
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_29

Name: TMP_29 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_5(mapping(address => uint256)) := ϕ(['_balances_4'])
Phi
[i]Type for _balances

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_15 (->_balances_5) := TMP_29(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_15

Name: REF_15 Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: _allowances Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_86(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
init
end
[i]Type for TMP_86

Name: TMP_86 Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_31(mapping(address => uint256)) -> _allowances_19[sender_1]
INDEX
[i]Type for REF_31

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_87(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
init
end
[i]Type for TMP_87

Name: TMP_87 Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_32(uint256) -> REF_31[TMP_87]
INDEX
[i]Type for REF_32

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.sub(uint256,uint256,string), arguments:['REF_32', 'amountInShares_1', 'ERC20: transfer amount exceeds allowance'] 
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_88

Name: TMP_88 Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC20Upgradeable._approve(address,address,uint256)(sender_1,TMP_86,TMP_88)
init
end
init
end
init
end
[[], [], 'u', 'sender', [], -1, -994, 'u']

Name: owner Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: spender Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: spender
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: owner_1 Function: _approve
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: spender_1 Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: spender
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
owner_1(address) := ϕ(['TMP_13', 'sender_1', 'TMP_6', 'sender_1', 'TMP_17'])
Phi
[i]Type for owner

Name: owner Function: _approve
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
spender_1(address) := ϕ(['TMP_9', 'TMP_86', 'spender_1', 'spender_1', 'spender_1'])
Phi
[i]Type for spender

Name: spender Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: spender
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount_1', 'TMP_19', 'TMP_11', 'TMP_88', 'TMP_15'])
Phi
[i]Type for amount

Name: amount Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_49 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_49

Name: TMP_49 Function: _approve
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_50(bool) = owner_1 != TMP_49
[i]Type for TMP_50

Name: TMP_50 Function: _approve
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,ERC20: approve from the zero address)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_52 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_52

Name: TMP_52 Function: _approve
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(bool) = spender_1 != TMP_52
[i]Type for TMP_53

Name: TMP_53 Function: _approve
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(None) = SOLIDITY_CALL require(bool,string)(TMP_53,ERC20: approve to the zero address)
[i]Type for TMP_54

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: _allowances Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_26(mapping(address => uint256)) -> _allowances_14[owner_1]
INDEX
[i]Type for REF_26

Name: None Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_27(uint256) -> REF_26[spender_1]
INDEX
[i]Type for REF_27

Name: None Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_allowances_15(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_14'])
Phi
[i]Type for _allowances

Name: _allowances Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27 (->_allowances_15) := amount_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_27

Name: REF_27 Function: _approve
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: owner_1 Function: _approve
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Phid

Name: spender_1 Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: spender
Value: u
Fields: 
Finance Type: undef
Phid

Name: amount_1 Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
owner_1(address) := ϕ(['TMP_13', 'sender_1', 'TMP_6', 'sender_1', 'TMP_17'])
Phi
[i]Type for owner

Name: owner Function: _approve
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
XXXX
spender_1(address) := ϕ(['TMP_9', 'TMP_86', 'spender_1', 'spender_1', 'spender_1'])
Phi
[i]Type for spender

Name: spender Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: spender
Value: u
Fields: 
Finance Type: undef
XXXX
amount_1(uint256) := ϕ(['amount_1', 'TMP_19', 'TMP_11', 'TMP_88', 'TMP_15'])
Phi
[i]Type for amount

Name: amount Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_49 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_49

Name: TMP_49 Function: _approve
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_50(bool) = owner_1 != TMP_49
[i]Type for TMP_50

Name: TMP_50 Function: _approve
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(None) = SOLIDITY_CALL require(bool,string)(TMP_50,ERC20: approve from the zero address)
[i]Type for TMP_51

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_52 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_52

Name: TMP_52 Function: _approve
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(bool) = spender_1 != TMP_52
[i]Type for TMP_53

Name: TMP_53 Function: _approve
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(None) = SOLIDITY_CALL require(bool,string)(TMP_53,ERC20: approve to the zero address)
[i]Type for TMP_54

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: _allowances Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_26(mapping(address => uint256)) -> _allowances_14[owner_1]
INDEX
[i]Type for REF_26

Name: None Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_27(uint256) -> REF_26[spender_1]
INDEX
[i]Type for REF_27

Name: None Function: None
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
_allowances_15(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_14'])
Phi
[i]Type for _allowances

Name: _allowances Function: _approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_27 (->_allowances_15) := amount_1(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_27

Name: REF_27 Function: _approve
Num: 
Den: 
Address: -994
Norm: u
LF: sender
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
_allowances_21(mapping(address => mapping(address => uint256))) := ϕ(['_allowances_15'])
Phi
[i]Type for _allowances

Name: _allowances Function: transferFrom
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



transfer
Finding type for recipient(address ... )
prev address? u
Head Addr: -992
    Norm: 0
    Set: {-992}
    Fin: NULL
Finding type for amount(uint256 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: recipient
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


TMP_90(uint256) = INTERNAL_CALL, WrappedIbbtc.balanceToShares(uint256)(amount_1)
amountInShares_1(uint256) := TMP_90(uint256)
TMP_91(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
INTERNAL_CALL, ERC20Upgradeable._transfer(address,address,uint256)(TMP_91,recipient_1,amountInShares_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
Name: amountInShares, Num: 1
Globalname: amountInShares
End popogation
TMP_90(uint256) = INTERNAL_CALL, WrappedIbbtc.balanceToShares(uint256)(amount_1)
[i]Type for TMP_90

Name: TMP_90 Function: transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountInShares_1(uint256) := TMP_90(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amountInShares

Name: amountInShares Function: transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amountInShares, Num: 1
Globalname: amountInShares
End popogation
TMP_91(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_91

Name: TMP_91 Function: transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC20Upgradeable._transfer(address,address,uint256)(TMP_91,recipient_1,amountInShares_1)
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef


TMP_90(uint256) = INTERNAL_CALL, WrappedIbbtc.balanceToShares(uint256)(amount_1)
amountInShares_1(uint256) := TMP_90(uint256)
TMP_91(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
INTERNAL_CALL, ERC20Upgradeable._transfer(address,address,uint256)(TMP_91,recipient_1,amountInShares_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
Name: amountInShares, Num: 1
Globalname: amountInShares
End popogation
TMP_90(uint256) = INTERNAL_CALL, WrappedIbbtc.balanceToShares(uint256)(amount_1)
[i]Type for TMP_90

Name: TMP_90 Function: transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amountInShares_1(uint256) := TMP_90(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for amountInShares

Name: amountInShares Function: transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amountInShares, Num: 1
Globalname: amountInShares
End popogation
TMP_91(address) = INTERNAL_CALL, ContextUpgradeable._msgSender()()
[i]Type for TMP_91

Name: TMP_91 Function: transfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, ERC20Upgradeable._transfer(address,address,uint256)(TMP_91,recipient_1,amountInShares_1)
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



pricePerShare


oracle_3(ICoreOracle) := ϕ(['oracle_0', 'oracle_4', 'oracle_2', 'oracle_1'])
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:oracle_3(ICoreOracle), function:pricePerShare, arguments:[]  
oracle_4(ICoreOracle) := ϕ(['oracle_4', 'oracle_2', 'oracle_3', 'oracle_1'])
RETURN TMP_93


Propogating parameters and globals to SSA variables...
End popogation

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
Phid
oracle_3(ICoreOracle) := ϕ(['oracle_0', 'oracle_4', 'oracle_2', 'oracle_1'])
Phi
[i]Type for oracle

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
Phid
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:oracle_3(ICoreOracle), function:pricePerShare, arguments:[]  
High Call: pricePerShare
Running querryfc
Written func info: CoreOracle, pricePerShare
Retvar: ('c', ['global:token'], ['global:share'], 0, "'u'", None)
{'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992, 'sharesOf:account': -991, 'balanceOf:account': -990, 'mint:TMP_74': 3, 'global:this': 3}
{'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992, 'sharesOf:account': -991, 'balanceOf:account': -990, 'mint:TMP_74': 3, 'global:this': 3}
([-1], [-1], 0, "'u'", None, -1)
[i]Type for TMP_93

Name: TMP_93 Function: pricePerShare
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
oracle_4(ICoreOracle) := ϕ(['oracle_4', 'oracle_2', 'oracle_3', 'oracle_1'])
Phi
[i]Type for oracle

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_93
RETURN
init
end

Name: TMP_93 Function: pricePerShare
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef


oracle_3(ICoreOracle) := ϕ(['oracle_0', 'oracle_4', 'oracle_2', 'oracle_1'])
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:oracle_3(ICoreOracle), function:pricePerShare, arguments:[]  
oracle_4(ICoreOracle) := ϕ(['oracle_4', 'oracle_2', 'oracle_3', 'oracle_1'])
RETURN TMP_93


Propogating parameters and globals to SSA variables...
End popogation

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
Phid
oracle_3(ICoreOracle) := ϕ(['oracle_0', 'oracle_4', 'oracle_2', 'oracle_1'])
Phi
[i]Type for oracle

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
Phid
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:oracle_3(ICoreOracle), function:pricePerShare, arguments:[]  
High Call: pricePerShare
Running querryfc
Written func info: CoreOracle, pricePerShare
Retvar: ('c', ['global:token'], ['global:share'], 0, "'u'", None)
{'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992, 'sharesOf:account': -991, 'balanceOf:account': -990, 'mint:TMP_74': 3, 'global:this': 3}
{'global:pendingGovernance': 1, 'global:governance': 2, 'initialize:_governance': -999, 'initialize:_ibbtc': -998, 'initialize:_oracle': -997, 'setPendingGovernance:_pendingGovernance': -996, 'setOracle:_oracle': -995, 'transferFrom:sender': -994, 'transferFrom:recipient': -993, 'transfer:recipient': -992, 'sharesOf:account': -991, 'balanceOf:account': -990, 'mint:TMP_74': 3, 'global:this': 3}
([-1], [-1], 0, "'u'", None, -1)
[i]Type for TMP_93

Name: TMP_93 Function: pricePerShare
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
oracle_4(ICoreOracle) := ϕ(['oracle_4', 'oracle_2', 'oracle_3', 'oracle_1'])
Phi
[i]Type for oracle

Name: oracle Function: pricePerShare
Num: -1
Den: -1
Address: -995
Norm: u
LF: CoreOracle
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_93
RETURN
init
end

Name: TMP_93 Function: pricePerShare
Num: -1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



sharesOf
Finding type for account(address ... )
prev address? u
Head Addr: -991
    Norm: 0
    Set: {-991}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: account
    fields: []
    fintype: -1


account_1(address) := ϕ(['account_1'])
_balances_12(mapping(address => uint256)) := ϕ(['_balances_0', '_balances_8', '_balances_5', '_balances_11', '_balances_1', '_balances_12'])
REF_35(uint256) -> _balances_12[account_1]
RETURN REF_35


Propogating parameters and globals to SSA variables...
End popogation

Name: account_1 Function: None
Num: 
Den: 
Address: -991
Norm: u
LF: account
Value: u
Fields: 
Finance Type: undef
Phid
Name: _balances, Num: 12
Globalname: _balances
global...

Name: _balances Function: _transfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
account_1(address) := ϕ(['account_1'])
Phi
[i]Type for account

Name: account Function: sharesOf
Num: 
Den: 
Address: -991
Norm: u
LF: account
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_12(mapping(address => uint256)) := ϕ(['_balances_0', '_balances_8', '_balances_5', '_balances_11', '_balances_1', '_balances_12'])
Phi
[i]Type for _balances

Name: _balances Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_35(uint256) -> _balances_12[account_1]
INDEX
[i]Type for REF_35

Name: REF_35 Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_35
RETURN
init
end

Name: REF_35 Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


account_1(address) := ϕ(['account_1'])
_balances_12(mapping(address => uint256)) := ϕ(['_balances_0', '_balances_8', '_balances_5', '_balances_11', '_balances_1', '_balances_12'])
REF_35(uint256) -> _balances_12[account_1]
RETURN REF_35


Propogating parameters and globals to SSA variables...
End popogation

Name: account_1 Function: sharesOf
Num: 
Den: 
Address: -991
Norm: u
LF: account
Value: u
Fields: 
Finance Type: undef
Phid

Name: _balances Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
account_1(address) := ϕ(['account_1'])
Phi
[i]Type for account

Name: account Function: sharesOf
Num: 
Den: 
Address: -991
Norm: u
LF: account
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_12(mapping(address => uint256)) := ϕ(['_balances_0', '_balances_8', '_balances_5', '_balances_11', '_balances_1', '_balances_12'])
Phi
[i]Type for _balances

Name: _balances Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_35(uint256) -> _balances_12[account_1]
INDEX
[i]Type for REF_35

Name: REF_35 Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_35
RETURN
init
end

Name: REF_35 Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



balanceOf
Finding type for account(address ... )
prev address? u
Head Addr: -990
    Norm: 0
    Set: {-990}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: account
    fields: []
    fintype: -1


TMP_94(uint256) = INTERNAL_CALL, WrappedIbbtc.sharesOf(address)(account_1)
TMP_95(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['TMP_94', 'TMP_95'] 
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_96', '1000000000000000000'] 
RETURN TMP_97


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_94(uint256) = INTERNAL_CALL, WrappedIbbtc.sharesOf(address)(account_1)
init
end
[[], [], 'u', 'account', [], -1, -990, 'u']

Name: account Function: sharesOf
Num: 
Den: 
Address: -990
Norm: u
LF: account
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: account_1 Function: sharesOf
Num: 
Den: 
Address: -990
Norm: u
LF: account
Value: u
Fields: 
Finance Type: undef
Phid

Name: _balances Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
account_1(address) := ϕ(['account_1'])
Phi
[i]Type for account

Name: account Function: sharesOf
Num: 
Den: 
Address: -990
Norm: u
LF: account
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_12(mapping(address => uint256)) := ϕ(['_balances_0', '_balances_8', '_balances_5', '_balances_11', '_balances_1', '_balances_12'])
Phi
[i]Type for _balances

Name: _balances Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_35(uint256) -> _balances_12[account_1]
INDEX
[i]Type for REF_35

Name: _balances Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_35
RETURN
init
end

Name: _balances Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: account_1 Function: sharesOf
Num: 
Den: 
Address: -990
Norm: u
LF: account
Value: u
Fields: 
Finance Type: undef
Phid

Name: _balances Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
account_1(address) := ϕ(['account_1'])
Phi
[i]Type for account

Name: account Function: sharesOf
Num: 
Den: 
Address: -990
Norm: u
LF: account
Value: u
Fields: 
Finance Type: undef
XXXX
_balances_12(mapping(address => uint256)) := ϕ(['_balances_0', '_balances_8', '_balances_5', '_balances_11', '_balances_1', '_balances_12'])
Phi
[i]Type for _balances

Name: _balances Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_35(uint256) -> _balances_12[account_1]
INDEX
[i]Type for REF_35

Name: _balances Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
RETURN REF_35
RETURN
init
end

Name: _balances Function: sharesOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_94

Name: TMP_94 Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_95(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
init
end
[i]Type for TMP_95

Name: TMP_95 Function: balanceOf
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['TMP_94', 'TMP_95'] 
testing mul...
init
end
init
end

Name: TMP_94 Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_95 Function: balanceOf
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_96

Name: TMP_96 Function: balanceOf
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_96', '1000000000000000000'] 
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_97

Name: TMP_97 Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_97
RETURN
init
end

Name: TMP_97 Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef


TMP_94(uint256) = INTERNAL_CALL, WrappedIbbtc.sharesOf(address)(account_1)
TMP_95(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['TMP_94', 'TMP_95'] 
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_96', '1000000000000000000'] 
RETURN TMP_97


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_94(uint256) = INTERNAL_CALL, WrappedIbbtc.sharesOf(address)(account_1)
init
end
init
end
[i]Type for TMP_94

Name: TMP_94 Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_95(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
init
end
[i]Type for TMP_95

Name: TMP_95 Function: balanceOf
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['TMP_94', 'TMP_95'] 
testing mul...
init
end
init
end

Name: TMP_94 Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_95 Function: balanceOf
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_96

Name: TMP_96 Function: balanceOf
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_96', '1000000000000000000'] 
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_97

Name: TMP_97 Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_97
RETURN
init
end

Name: TMP_97 Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



totalShares


_totalSupply_8(uint256) := ϕ(['_totalSupply_0', '_totalSupply_4', '_totalSupply_7'])
RETURN _totalSupply_8


Propogating parameters and globals to SSA variables...
End popogation
Name: _totalSupply, Num: 8
Globalname: _totalSupply
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_totalSupply_8(uint256) := ϕ(['_totalSupply_0', '_totalSupply_4', '_totalSupply_7'])
Phi
[i]Type for _totalSupply

Name: _totalSupply Function: totalShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN _totalSupply_8
RETURN
init
end

Name: _totalSupply Function: totalShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


_totalSupply_8(uint256) := ϕ(['_totalSupply_0', '_totalSupply_4', '_totalSupply_7'])
RETURN _totalSupply_8


Propogating parameters and globals to SSA variables...
End popogation

Name: _totalSupply Function: totalShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_totalSupply_8(uint256) := ϕ(['_totalSupply_0', '_totalSupply_4', '_totalSupply_7'])
Phi
[i]Type for _totalSupply

Name: _totalSupply Function: totalShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN _totalSupply_8
RETURN
init
end

Name: _totalSupply Function: totalShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



totalSupply


TMP_98(uint256) = INTERNAL_CALL, WrappedIbbtc.totalShares()()
TMP_99(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['TMP_98', 'TMP_99'] 
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_100', '1000000000000000000'] 
RETURN TMP_101


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_98(uint256) = INTERNAL_CALL, WrappedIbbtc.totalShares()()
Propogating parameters and globals to SSA variables...
End popogation

Name: _totalSupply Function: totalShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_totalSupply_8(uint256) := ϕ(['_totalSupply_0', '_totalSupply_4', '_totalSupply_7'])
Phi
[i]Type for _totalSupply

Name: _totalSupply Function: totalShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN _totalSupply_8
RETURN
init
end

Name: _totalSupply Function: totalShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _totalSupply Function: totalShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_totalSupply_8(uint256) := ϕ(['_totalSupply_0', '_totalSupply_4', '_totalSupply_7'])
Phi
[i]Type for _totalSupply

Name: _totalSupply Function: totalShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN _totalSupply_8
RETURN
init
end

Name: _totalSupply Function: totalShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_98

Name: TMP_98 Function: totalSupply
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
init
end
[i]Type for TMP_99

Name: TMP_99 Function: totalSupply
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['TMP_98', 'TMP_99'] 
testing mul...
init
end
init
end

Name: TMP_98 Function: totalSupply
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_99 Function: totalSupply
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_100

Name: TMP_100 Function: totalSupply
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_100', '1000000000000000000'] 
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_101

Name: TMP_101 Function: totalSupply
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_101
RETURN
init
end

Name: TMP_101 Function: totalSupply
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef


TMP_98(uint256) = INTERNAL_CALL, WrappedIbbtc.totalShares()()
TMP_99(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['TMP_98', 'TMP_99'] 
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_100', '1000000000000000000'] 
RETURN TMP_101


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_98(uint256) = INTERNAL_CALL, WrappedIbbtc.totalShares()()
init
end
[i]Type for TMP_98

Name: TMP_98 Function: totalSupply
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
init
end
[i]Type for TMP_99

Name: TMP_99 Function: totalSupply
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['TMP_98', 'TMP_99'] 
testing mul...
init
end
init
end

Name: TMP_98 Function: totalSupply
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_99 Function: totalSupply
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_100

Name: TMP_100 Function: totalSupply
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_100', '1000000000000000000'] 
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_101

Name: TMP_101 Function: totalSupply
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_101
RETURN
init
end

Name: TMP_101 Function: totalSupply
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



balanceToShares
Finding type for balance(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


balance_1(uint256) := ϕ(['amount_1', 'amount_1'])
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balance_1', '1000000000000000000'] 
TMP_103(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_102', 'TMP_103'] 
RETURN TMP_104


Propogating parameters and globals to SSA variables...
End popogation
Name: balance, Num: 1
Globalname: balance

Name: balance_1 Function: balanceToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
balance_1(uint256) := ϕ(['amount_1', 'amount_1'])
Phi
init
end
[i]Type for balance

Name: balance Function: balanceToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: balance, Num: 1
Globalname: balance
End popogation
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balance_1', '1000000000000000000'] 
testing mul...
init
end
init
end

Name: balance_1 Function: balanceToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
[i]Type for TMP_102

Name: TMP_102 Function: balanceToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
init
end
[i]Type for TMP_103

Name: TMP_103 Function: balanceToShares
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_102', 'TMP_103'] 
init
end
init
end
lnorm: 18 rnorm: u
init
end
[i]Type for TMP_104

Name: TMP_104 Function: balanceToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_104
RETURN
init
end

Name: TMP_104 Function: balanceToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef


balance_1(uint256) := ϕ(['amount_1', 'amount_1'])
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balance_1', '1000000000000000000'] 
TMP_103(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_102', 'TMP_103'] 
RETURN TMP_104


Propogating parameters and globals to SSA variables...
End popogation
Name: balance, Num: 1
Globalname: balance

Name: balance_1 Function: balanceToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
balance_1(uint256) := ϕ(['amount_1', 'amount_1'])
Phi
init
end
[i]Type for balance

Name: balance Function: balanceToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: balance, Num: 1
Globalname: balance
End popogation
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['balance_1', '1000000000000000000'] 
testing mul...
init
end
init
end

Name: balance_1 Function: balanceToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
[i]Type for TMP_102

Name: TMP_102 Function: balanceToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
init
end
[i]Type for TMP_103

Name: TMP_103 Function: balanceToShares
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_102', 'TMP_103'] 
init
end
init
end
lnorm: 18 rnorm: u
init
end
[i]Type for TMP_104

Name: TMP_104 Function: balanceToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_104
RETURN
init
end

Name: TMP_104 Function: balanceToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol



sharesToBalance
Finding type for shares(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


TMP_105(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['shares_1', 'TMP_105'] 
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_106', '1000000000000000000'] 
RETURN TMP_107


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
TMP_105(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
init
end
[i]Type for TMP_105

Name: TMP_105 Function: sharesToBalance
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['shares_1', 'TMP_105'] 
testing mul...
init
end
init
end

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_105 Function: sharesToBalance
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_106

Name: TMP_106 Function: sharesToBalance
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_106', '1000000000000000000'] 
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_107

Name: TMP_107 Function: sharesToBalance
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_107
RETURN
init
end

Name: TMP_107 Function: sharesToBalance
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef


TMP_105(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['shares_1', 'TMP_105'] 
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_106', '1000000000000000000'] 
RETURN TMP_107


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
TMP_105(uint256) = INTERNAL_CALL, WrappedIbbtc.pricePerShare()()
init
end
[i]Type for TMP_105

Name: TMP_105 Function: sharesToBalance
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.mul(uint256,uint256), arguments:['shares_1', 'TMP_105'] 
testing mul...
init
end
init
end

Name: shares Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_105 Function: sharesToBalance
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_106

Name: TMP_106 Function: sharesToBalance
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMathUpgradeable, function:SafeMathUpgradeable.div(uint256,uint256), arguments:['TMP_106', '1000000000000000000'] 
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_107

Name: TMP_107 Function: sharesToBalance
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_107
RETURN
init
end

Name: TMP_107 Function: sharesToBalance
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: _name
State_var: _allowances
State_var: ibbtc
State_var: pendingGovernance
State_var: governance
State_var: _totalSupply
State_var: oracle
State_var: _balances
State_var: _initialized
State_var: _initializing
State_var: _decimals
State_var: _symbol
Address: 1, Label: global:pendingGovernance
Address: 2, Label: global:governance
Address: -999, Label: initialize:_governance
Address: -998, Label: initialize:_ibbtc
Address: -997, Label: initialize:_oracle
Address: -996, Label: setPendingGovernance:_pendingGovernance
Address: -995, Label: setOracle:_oracle
Address: -994, Label: transferFrom:sender
Address: -993, Label: transferFrom:recipient
Address: -992, Label: transfer:recipient
Address: -991, Label: sharesOf:account
Address: -990, Label: balanceOf:account
Address: 3, Label: mint:TMP_74
Address: 3, Label: global:this
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Head Addr: -992
    Norm: 0
    Set: {-992}
    Fin: NULL
Head Addr: -991
    Norm: 0
    Set: {-991}
    Fin: NULL
Head Addr: -990
    Norm: 0
    Set: {-990}
    Fin: NULL
Head Addr: 3
    Norm: *
    Set: {3}
    Fin: NULL
Function count: 27
Executing Group 14
[*] Tested 1 warnings for Badger Dao p2
Group 14 complete
Testing complete
