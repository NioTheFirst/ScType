Switched global version to 0.8.4
Analyzed_contracts_count: 1
total compilations: 7, contracts: 1
contract name: LibMath
Mark functions Adding: LibMath, toInt256, False
[*]Marked
Mark functions Adding: LibMath, abs, False
[*]Marked
Mark functions Adding: LibMath, sum, False
[*]Marked
Mark functions Adding: LibMath, sumN, False
[*]Marked
Mark functions Adding: LibMath, mean, False
[X]No Binary
Mark functions Adding: LibMath, meanN, False
[X]No Binary
Mark functions Adding: LibMath, min, False
[*]Marked
Mark functions Adding: LibMath, signedMin, False
[*]Marked
Mark functions Adding: LibMath, slitherConstructorConstantVariables, False
[X]No Binary
State_var: POSITIVE_INT256_MAX
Finding type for POSITIVE_INT256_MAX(uint256 ... )
Value: u
querrying!!!
Source address: u
Saved name: POSITIVE_INT256_MAX

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Running check on LibMath
Reading Function: toInt256
Checking funcion...



toInt256
Finding type for x(uint256 ... )
Value: u
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
FIND RETURN
ENTRY_POINT
toInt256(uint256)
ENTRY_POINT
EXPRESSION require(bool,string)(x <= POSITIVE_INT256_MAX,uint256 overflow)
RETURN int256(x)


POSITIVE_INT256_MAX_1(uint256) := Ï•(['POSITIVE_INT256_MAX_0'])
TMP_0(bool) = x_1 <= POSITIVE_INT256_MAX_1
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,uint256 overflow)
TMP_2 = CONVERT x_1 to int256
RETURN TMP_2


Propogating parameters and globals to SSA variables...
[]
[]
Currently ommitted
Executing Group 4
[*] Tested 1 warning for Tracer
Group 4 complete
Testing complete
