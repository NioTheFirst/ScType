Switched global version to 0.8.4
Analyzed_contracts_count: 1
total compilations: -1
Checking IIdleToken
Name: balanceOf, [<slither.core.cfg.node.Node object at 0x7fa4c41c3310>, <slither.core.cfg.node.Node object at 0x7fa4c4106610>]
Name: tokenPriceWithFee, [<slither.core.cfg.node.Node object at 0x7fa4c41068b0>, <slither.core.cfg.node.Node object at 0x7fa4c4106850>]
Name: mintIdleToken, [<slither.core.cfg.node.Node object at 0x7fa4c4106a90>, <slither.core.cfg.node.Node object at 0x7fa4c4106bb0>]
Name: redeemIdleToken, [<slither.core.cfg.node.Node object at 0x7fa4c4106d30>, <slither.core.cfg.node.Node object at 0x7fa4c4106e80>]
Name: slitherConstructorVariables, [<slither.core.cfg.node.Node object at 0x7fa4c40a1100>, <slither.core.cfg.node.Node object at 0x7fa4c40a1520>, <slither.core.cfg.node.Node object at 0x7fa4c40a1670>]
End Checking...
Finance file: IIdleToken_ftypes.txt
Add to address_to_label {'balanceOf:a': -999}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2}
Reading f file...
['[*c]', 'IIdleToken']
['']
['[xf]', 'redeemIdleToken']
['[t]', 'global', 'balance', 'f: 0']
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3}
['[t]', 'global', 'tPWF', 'global:tokA', 'global:tokB', '12', 'f: 40']
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3}
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3}
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4}
['[ta]', 'global', 'tokA', '6']
Head Addr: 1
    Norm: u
    Set: {1}
    Fin: undef
['[ta]', 'global', 'tokB', '18']
Head Addr: 2
    Norm: u
    Set: {2}
    Fin: undef
['[t]', 'global', 'tokenToShare', 'global:tokB', 'global:tokA', '-12', 'f:40']
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4}
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4}
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4}
Checking... balanceOf Visibility: external
[<slither.core.cfg.node.Node object at 0x7fa4c41c3310>, <slither.core.cfg.node.Node object at 0x7fa4c4106610>]
Mark functions Adding: IIdleToken, balanceOf
Checking... tokenPriceWithFee Visibility: external
[<slither.core.cfg.node.Node object at 0x7fa4c41068b0>, <slither.core.cfg.node.Node object at 0x7fa4c4106850>]
Mark functions Adding: IIdleToken, tokenPriceWithFee
Checking... mintIdleToken Visibility: external
[<slither.core.cfg.node.Node object at 0x7fa4c4106a90>, <slither.core.cfg.node.Node object at 0x7fa4c4106bb0>]
Mark functions Adding: IIdleToken, mintIdleToken
Checking... redeemIdleToken Visibility: external
[<slither.core.cfg.node.Node object at 0x7fa4c4106d30>, <slither.core.cfg.node.Node object at 0x7fa4c4106e80>]
Mark functions Adding: IIdleToken, redeemIdleToken
Checking... slitherConstructorVariables Visibility: internal
[<slither.core.cfg.node.Node object at 0x7fa4c40a1100>, <slither.core.cfg.node.Node object at 0x7fa4c40a1520>, <slither.core.cfg.node.Node object at 0x7fa4c40a1670>]
Mark functions Adding: IIdleToken, slitherConstructorVariables
State_var: tokenToShare
Finding type for tokenToShare(uint256 ... )
(2, 1, -12, 'u', 4, 40)
[*]Type fetched successfully
querrying!!!
Source address: u
Saved name: tokenToShare

Name: PIC_1 Function: None
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
State_var: balance
Finding type for balance(uint256 ... )
(-1, -1, 'u', 'u', 3, 0)
[*]Type fetched successfully
querrying!!!
Source address: u
Saved name: balance

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
State_var: tPWF
Finding type for tPWF(uint256 ... )
(1, 2, 12, 'u', 4, 40)
[*]Type fetched successfully
querrying!!!
Source address: u
Saved name: tPWF

Name: PIC_3 Function: None
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate



balanceOf
Finding type for a(address ... )
prev address? u
Head Addr: -999
    Norm: 6
    Set: {-999}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: 6
    link: a
    fields: []
    fintype: -1
FIND RETURN
ENTRY_POINT
balanceOf(address)
ENTRY_POINT
RETURN (balance)


balance_1(uint256) := ϕ(['balance_0'])
RETURN balance_1


Propogating parameters and globals to SSA variables...
End popogation
Name: balance, Num: 1
Globalname: balance
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid
balance_1(uint256) := ϕ(['balance_0'])
Phi
[i]Type for balance

Name: balance Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN balance_1
RETURN
init
end

Name: balance Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance


balance_1(uint256) := ϕ(['balance_0'])
RETURN balance_1


Propogating parameters and globals to SSA variables...
End popogation

Name: balance Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid
balance_1(uint256) := ϕ(['balance_0'])
Phi
[i]Type for balance

Name: balance Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN balance_1
RETURN
init
end

Name: balance Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance



tokenPriceWithFee
Finding type for a(address ... )
prev address? u
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: 6
    link: a
    fields: []
    fintype: -1
FIND RETURN
ENTRY_POINT
tokenPriceWithFee(address)
ENTRY_POINT
RETURN (tPWF)


tPWF_1(uint256) := ϕ(['tPWF_0'])
RETURN tPWF_1


Propogating parameters and globals to SSA variables...
End popogation
Name: tPWF, Num: 1
Globalname: tPWF
global...

Name: PIC_3 Function: None
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Source address: u

Name: None Function: None
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Phid
tPWF_1(uint256) := ϕ(['tPWF_0'])
Phi
[i]Type for tPWF

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN tPWF_1
RETURN
init
end

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate


tPWF_1(uint256) := ϕ(['tPWF_0'])
RETURN tPWF_1


Propogating parameters and globals to SSA variables...
End popogation

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Phid
tPWF_1(uint256) := ϕ(['tPWF_0'])
Phi
[i]Type for tPWF

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN tPWF_1
RETURN
init
end

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate



mintIdleToken
Finding type for amt(uint256 ... )
Value: u
Finding type for b(bool ... )
Finding type for a(address ... )
prev address? u
Head Addr: -997
    Norm: 6
    Set: {-997}
    Fin: NULL
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: 6
    link: a
    fields: []
    fintype: -1
FIND RETURN
ENTRY_POINT
mintIdleToken(uint256,bool,address)
ENTRY_POINT
RETURN (amt)


RETURN amt_1


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: amt, Num: 1
Globalname: amt
End popogation
RETURN amt_1
RETURN
init
end

Name: amt Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


RETURN amt_1


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: amt, Num: 1
Globalname: amt
End popogation
RETURN amt_1
RETURN
init
end

Name: amt Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef



redeemIdleToken
Finding type for share(uint256 ... )
Value: u
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
FIND RETURN
ENTRY_POINT
redeemIdleToken(uint256)
ENTRY_POINT
RETURN (share * tokenToShare)


tokenToShare_1(uint256) := ϕ(['tokenToShare_0'])
TMP_0(uint256) = share_1 (c)* tokenToShare_1
RETURN TMP_0


Propogating parameters and globals to SSA variables...
End popogation
Name: tokenToShare, Num: 1
Globalname: tokenToShare
global...

Name: PIC_1 Function: None
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Source address: u

Name: None Function: None
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Phid
tokenToShare_1(uint256) := ϕ(['tokenToShare_0'])
Phi
[i]Type for tokenToShare

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: share, Num: 1
Globalname: share
End popogation
TMP_0(uint256) = share_1 (c)* tokenToShare_1
testing mul...
init
end
init
end

Name: share Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
lnorm: u rnorm: -12
init
end
_______________

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate

Name: TMP_0 Function: redeemIdleToken
Num: 
Den: 
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
RETURN TMP_0
RETURN
init
end

Name: TMP_0 Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate


tokenToShare_1(uint256) := ϕ(['tokenToShare_0'])
TMP_0(uint256) = share_1 (c)* tokenToShare_1
RETURN TMP_0


Propogating parameters and globals to SSA variables...
End popogation

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Phid
tokenToShare_1(uint256) := ϕ(['tokenToShare_0'])
Phi
[i]Type for tokenToShare

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: share, Num: 1
Globalname: share
End popogation
TMP_0(uint256) = share_1 (c)* tokenToShare_1
testing mul...
init
end
init
end

Name: share Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
lnorm: u rnorm: -12
init
end
_______________

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate

Name: TMP_0 Function: redeemIdleToken
Num: 
Den: 
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
RETURN TMP_0
RETURN
init
end

Name: TMP_0 Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Source address: u



slitherConstructorVariables
Address: -999, Label: balanceOf:a
Address: -998, Label: tokenPriceWithFee:a
Address: -997, Label: mintIdleToken:a
Address: 1, Label: global:tokA
Address: 2, Label: global:tokB
Address: 3, Label: global:f: 0
Address: 4, Label: global:u
Head Addr: -999
    Norm: 6
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: 6
    Set: {-997}
    Fin: NULL
Head Addr: 1
    Norm: u
    Set: {1}
    Fin: undef
Head Addr: 2
    Norm: u
    Set: {2}
    Fin: undef
Head Addr: 3
    Norm: u
    Set: {3}
    Fin: NULL
Head Addr: 4
    Norm: u
    Set: {4}
    Fin: NULL
Function count: 4
Analyzed_contracts_count: 2
total compilations: -1
Checking IdleYieldSource
Name: initialize, [<slither.core.cfg.node.Node object at 0x7fa4c419e910>, <slither.core.cfg.node.Node object at 0x7fa4c3f50130>, <slither.core.cfg.node.Node object at 0x7fa4c3f501c0>]
Name: depositToken, [<slither.core.cfg.node.Node object at 0x7fa4c3f50550>, <slither.core.cfg.node.Node object at 0x7fa4c3f50610>]
Name: _totalShare, [<slither.core.cfg.node.Node object at 0x7fa4c3f50730>, <slither.core.cfg.node.Node object at 0x7fa4c3f50850>]
Name: _tokenToShares, [<slither.core.cfg.node.Node object at 0x7fa4c3f50be0>, <slither.core.cfg.node.Node object at 0x7fa4c3f50f70>, <slither.core.cfg.node.Node object at 0x7fa4c3f68040>]
Name: _sharesToToken, [<slither.core.cfg.node.Node object at 0x7fa4c3f50ac0>, <slither.core.cfg.node.Node object at 0x7fa4c3f68640>]
Name: _price, [<slither.core.cfg.node.Node object at 0x7fa4c3f68970>, <slither.core.cfg.node.Node object at 0x7fa4c3f68bb0>]
Name: _depositToIdle, [<slither.core.cfg.node.Node object at 0x7fa4c3f68b80>, <slither.core.cfg.node.Node object at 0x7fa4c3f752e0>]
Name: supplyTokenTo, [<slither.core.cfg.node.Node object at 0x7fa4c3f75430>, <slither.core.cfg.node.Node object at 0x7fa4c3f75c10>, <slither.core.cfg.node.Node object at 0x7fa4c3f75d00>, <slither.core.cfg.node.Node object at 0x7fa4c3f75dc0>]
Name: redeemToken, [<slither.core.cfg.node.Node object at 0x7fa4c3f802b0>, <slither.core.cfg.node.Node object at 0x7fa4c3f807f0>, <slither.core.cfg.node.Node object at 0x7fa4c3f80970>, <slither.core.cfg.node.Node object at 0x7fa4c3f80a60>, <slither.core.cfg.node.Node object at 0x7fa4c3f80b20>, <slither.core.cfg.node.Node object at 0x7fa4c3f80be0>]
Name: transferERC20, [<slither.core.cfg.node.Node object at 0x7fa4c3f0f790>, <slither.core.cfg.node.Node object at 0x7fa4c3f0fdf0>, <slither.core.cfg.node.Node object at 0x7fa4c3f0feb0>]
Name: sponsor, [<slither.core.cfg.node.Node object at 0x7fa4c3f0fdc0>, <slither.core.cfg.node.Node object at 0x7fa4c3f1b820>, <slither.core.cfg.node.Node object at 0x7fa4c3f1b8e0>]
Name: slitherConstructorConstantVariables, [<slither.core.cfg.node.Node object at 0x7fa4c3f29670>]
Checking IIdleToken
Name: balanceOf, []
Name: tokenPriceWithFee, []
Name: mintIdleToken, []
Name: redeemIdleToken, []
End Checking...
Finance file: IdleYieldSource_ftypes.txt
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994}
Add to address_to_label {'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
Reading f file...
['[*c]', 'IdleYieldSource']
['[xf]', 'transferERC20']
['[t]', 'global', 'ONE_IDLE_TOKEN', '-1', '-1', '0']
['[t]', 'global', 'idleToken', '-1', '-1', '0', 'IIdleToken']
['[t]', 'global', 'underlyingAsset']
['[t]', 'redeemToken', 'redeemAmount', '1', '-1', '0', 'f:0']
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
Checking... initialize Visibility: public
[<slither.core.cfg.node.Node object at 0x7fa4c419e910>, <slither.core.cfg.node.Node object at 0x7fa4c3f50130>, <slither.core.cfg.node.Node object at 0x7fa4c3f501c0>]
Mark functions Adding: IdleYieldSource, initialize
Checking... depositToken Visibility: external
[<slither.core.cfg.node.Node object at 0x7fa4c3f50550>, <slither.core.cfg.node.Node object at 0x7fa4c3f50610>]
Mark functions Adding: IdleYieldSource, depositToken
Checking... _totalShare Visibility: internal
[<slither.core.cfg.node.Node object at 0x7fa4c3f50730>, <slither.core.cfg.node.Node object at 0x7fa4c3f50850>]
Mark functions Adding: IdleYieldSource, _totalShare
Checking... _tokenToShares Visibility: internal
[<slither.core.cfg.node.Node object at 0x7fa4c3f50be0>, <slither.core.cfg.node.Node object at 0x7fa4c3f50f70>, <slither.core.cfg.node.Node object at 0x7fa4c3f68040>]
Mark functions Adding: IdleYieldSource, _tokenToShares
Checking... _sharesToToken Visibility: internal
[<slither.core.cfg.node.Node object at 0x7fa4c3f50ac0>, <slither.core.cfg.node.Node object at 0x7fa4c3f68640>]
Mark functions Adding: IdleYieldSource, _sharesToToken
Checking... _price Visibility: internal
[<slither.core.cfg.node.Node object at 0x7fa4c3f68970>, <slither.core.cfg.node.Node object at 0x7fa4c3f68bb0>]
Mark functions Adding: IdleYieldSource, _price
Checking... _depositToIdle Visibility: internal
[<slither.core.cfg.node.Node object at 0x7fa4c3f68b80>, <slither.core.cfg.node.Node object at 0x7fa4c3f752e0>]
Mark functions Adding: IdleYieldSource, _depositToIdle
Checking... supplyTokenTo Visibility: external
[<slither.core.cfg.node.Node object at 0x7fa4c3f75430>, <slither.core.cfg.node.Node object at 0x7fa4c3f75c10>, <slither.core.cfg.node.Node object at 0x7fa4c3f75d00>, <slither.core.cfg.node.Node object at 0x7fa4c3f75dc0>]
Mark functions Adding: IdleYieldSource, supplyTokenTo
Checking... redeemToken Visibility: external
[<slither.core.cfg.node.Node object at 0x7fa4c3f802b0>, <slither.core.cfg.node.Node object at 0x7fa4c3f807f0>, <slither.core.cfg.node.Node object at 0x7fa4c3f80970>, <slither.core.cfg.node.Node object at 0x7fa4c3f80a60>, <slither.core.cfg.node.Node object at 0x7fa4c3f80b20>, <slither.core.cfg.node.Node object at 0x7fa4c3f80be0>]
Mark functions Adding: IdleYieldSource, redeemToken
Checking... transferERC20 Visibility: external
[<slither.core.cfg.node.Node object at 0x7fa4c3f0f790>, <slither.core.cfg.node.Node object at 0x7fa4c3f0fdf0>, <slither.core.cfg.node.Node object at 0x7fa4c3f0feb0>]
Mark functions Adding: IdleYieldSource, transferERC20
Checking... sponsor Visibility: external
[<slither.core.cfg.node.Node object at 0x7fa4c3f0fdc0>, <slither.core.cfg.node.Node object at 0x7fa4c3f1b820>, <slither.core.cfg.node.Node object at 0x7fa4c3f1b8e0>]
Mark functions Adding: IdleYieldSource, sponsor
Checking... slitherConstructorConstantVariables Visibility: internal
[<slither.core.cfg.node.Node object at 0x7fa4c3f29670>]
Mark functions Adding: IdleYieldSource, slitherConstructorConstantVariables
State_var: underlyingAsset
Finding type for underlyingAsset(address ... )
prev address? u
Head Addr: 6
    Norm: 6
    Set: {6}
    Fin: NULL
querrying!!!
Source address: 6
Saved name: underlyingAsset

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: 6
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef
State_var: ONE_IDLE_TOKEN
Finding type for ONE_IDLE_TOKEN(uint256 ... )
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
(-1, -1, 'u', None, 4, -1)
[*]Type fetched successfully
querrying!!!
Source address: u
Saved name: ONE_IDLE_TOKEN

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: idleToken
Finding type for idleToken(address ... )
prev address? u
Head Addr: 5
    Norm: 0
    Set: {5}
    Fin: NULL
querrying!!!
Source address: 5
Saved name: idleToken

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Finance file: IIdleToken_ftypes.txt
Reading f file...
['[*c]', 'IIdleToken']
['']
['[xf]', 'redeemIdleToken']
['[t]', 'global', 'balance', 'f: 0']
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
['[t]', 'global', 'tPWF', 'global:tokA', 'global:tokB', '12', 'f: 40']
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
['[ta]', 'global', 'tokA', '6']
Head Addr: 1
    Norm: u
    Set: {1}
    Fin: undef
['[ta]', 'global', 'tokB', '18']
Head Addr: 2
    Norm: u
    Set: {2}
    Fin: undef
['[t]', 'global', 'tokenToShare', 'global:tokB', 'global:tokA', '-12', 'f:40']
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
{'balanceOf:a': -999, 'tokenPriceWithFee:a': -998, 'mintIdleToken:a': -997, 'global:tokA': 1, 'global:tokB': 2, 'global:f: 0': 3, 'global:u': 4, 'global:idleToken': 5, 'global:underlyingAsset': 6, 'initialize:_idleToken': -996, 'supplyTokenTo:to': -995, 'transferERC20:erc20Token': -994, 'transferERC20:to': -993}
Checking... balanceOf Visibility: external
[]
Mark functions Adding: IIdleToken, balanceOf
Checking... tokenPriceWithFee Visibility: external
[]
Mark functions Adding: IIdleToken, tokenPriceWithFee
Checking... mintIdleToken Visibility: external
[]
Mark functions Adding: IIdleToken, mintIdleToken
Checking... redeemIdleToken Visibility: external
[]
Mark functions Adding: IIdleToken, redeemIdleToken



initialize
Finding type for _idleToken(address ... )
prev address? u
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: 0
    link: _idleToken
    fields: []
    fintype: -1
FIND RETURN
ENTRY_POINT
initialize(address)
ENTRY_POINT
EXPRESSION idleToken = _idleToken
EXPRESSION IdleYieldSourceInitialized(idleToken)


idleToken_1(address) := _idleToken_1(address)
Emit IdleYieldSourceInitialized(idleToken_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: -996
Name: idleToken, Num: 1
Globalname: idleToken
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 5
End popogation
idleToken_1(address) := _idleToken_1(address)
asgn
init
end
_______________

Name: _idleToken Function: None
Num: 
Den: 
Address: -996
Norm: 0
LF: _idleToken
Value: u
Fields: 
Finance Type: undef

Name: idleToken Function: initialize
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: -996
Finance type key: (-1, -1)
[i]Type for idleToken

Name: idleToken Function: initialize
Num: -1
Den: -1
Address: -996
Norm: 0
LF: _idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


idleToken_1(address) := _idleToken_1(address)
Emit IdleYieldSourceInitialized(idleToken_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
idleToken_1(address) := _idleToken_1(address)
asgn
init
end
_______________

Name: _idleToken Function: None
Num: 
Den: 
Address: -996
Norm: 0
LF: _idleToken
Value: u
Fields: 
Finance Type: undef

Name: idleToken Function: initialize
Num: -1
Den: -1
Address: -996
Norm: 0
LF: _idleToken
Value: u
Fields: 
Finance Type: undef
Source address: -996
Finance type key: (-1, -1)
[i]Type for idleToken

Name: idleToken Function: initialize
Num: -1
Den: -1
Address: -996
Norm: 0
LF: _idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation



depositToken
FIND RETURN
ENTRY_POINT
depositToken()
ENTRY_POINT
RETURN underlyingAsset


underlyingAsset_1(address) := ϕ(['underlyingAsset_0'])
RETURN underlyingAsset_1


Propogating parameters and globals to SSA variables...
End popogation
Name: underlyingAsset, Num: 1
Globalname: underlyingAsset
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: 6
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef
Phid
underlyingAsset_1(address) := ϕ(['underlyingAsset_0'])
Phi
[i]Type for underlyingAsset

Name: underlyingAsset Function: depositToken
Num: -1
Den: -1
Address: 6
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN underlyingAsset_1
RETURN
init
end

Name: underlyingAsset Function: depositToken
Num: -1
Den: -1
Address: 6
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef


underlyingAsset_1(address) := ϕ(['underlyingAsset_0'])
RETURN underlyingAsset_1


Propogating parameters and globals to SSA variables...
End popogation

Name: underlyingAsset Function: depositToken
Num: -1
Den: -1
Address: 6
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef
Phid
underlyingAsset_1(address) := ϕ(['underlyingAsset_0'])
Phi
[i]Type for underlyingAsset

Name: underlyingAsset Function: depositToken
Num: -1
Den: -1
Address: 6
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN underlyingAsset_1
RETURN
init
end

Name: underlyingAsset Function: depositToken
Num: -1
Den: -1
Address: 6
Norm: 6
LF: underlyingAsset
Value: u
Fields: 
Finance Type: undef



_totalShare



_tokenToShares



_sharesToToken



_price



_depositToIdle



supplyTokenTo
Finding type for mintAmount(uint256 ... )
Value: u
Finding type for to(address ... )
prev address? u
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: 0
    link: to
    fields: []
    fintype: -1
FIND RETURN
ENTRY_POINT
supplyTokenTo(uint256,address)
ENTRY_POINT
NEW VARIABLE mintedTokenShares = _tokenToShares(mintAmount)
EXPRESSION _depositToIdle(mintAmount)
EXPRESSION SuppliedTokenTo(msg.sender,mintedTokenShares,mintAmount,to)


TMP_16(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(mintAmount_1)
mintedTokenShares_1(uint256) := TMP_16(uint256)
TMP_17(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(mintAmount_1)
Emit SuppliedTokenTo(msg.sender,mintedTokenShares_1,mintAmount_1,to_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: mintAmount, Num: 1
Globalname: mintAmount
Name: mintedTokenShares, Num: 1
Globalname: mintedTokenShares
End popogation
TMP_16(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(mintAmount_1)
[i]Type for TMP_16

Name: TMP_16 Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
mintedTokenShares_1(uint256) := TMP_16(uint256)
asgn
init
end
_______________

Name: TMP_16 Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: mintedTokenShares Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for mintedTokenShares

Name: mintedTokenShares Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: mintAmount, Num: 1
Globalname: mintAmount
End popogation
TMP_17(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(mintAmount_1)
[i]Type for TMP_17

Name: TMP_17 Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: mintAmount, Num: 1
Globalname: mintAmount
Name: mintedTokenShares, Num: 1
Globalname: mintedTokenShares
Source address: -995
End popogation


TMP_16(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(mintAmount_1)
mintedTokenShares_1(uint256) := TMP_16(uint256)
TMP_17(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(mintAmount_1)
Emit SuppliedTokenTo(msg.sender,mintedTokenShares_1,mintAmount_1,to_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: mintAmount, Num: 1
Globalname: mintAmount
Name: mintedTokenShares, Num: 1
Globalname: mintedTokenShares
End popogation
TMP_16(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(mintAmount_1)
[i]Type for TMP_16

Name: TMP_16 Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
mintedTokenShares_1(uint256) := TMP_16(uint256)
asgn
init
end
_______________

Name: TMP_16 Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: mintedTokenShares Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for mintedTokenShares

Name: mintedTokenShares Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: mintAmount, Num: 1
Globalname: mintAmount
End popogation
TMP_17(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(mintAmount_1)
[i]Type for TMP_17

Name: TMP_17 Function: supplyTokenTo
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: mintAmount, Num: 1
Globalname: mintAmount
Name: mintedTokenShares, Num: 1
Globalname: mintedTokenShares
End popogation



redeemToken
Finding type for redeemAmount(uint256 ... )
(2, -1, 18, 'u', 4, 0)
[*]Type fetched successfully
Param: 0
    num: [2]
    den: [-1]
    norm: 18
    link: None
    fields: []
    fintype: 0
FIND RETURN
ENTRY_POINT
redeemToken(uint256)
ENTRY_POINT
NEW VARIABLE a = 1 + 1
NEW VARIABLE redeemedShare = _tokenToShares(redeemAmount)
EXPRESSION redeemedUnderlyingAsset = IIdleToken(idleToken).redeemIdleToken(redeemedShare)
EXPRESSION redeemedUnderlyingAsset += redeemedShare
EXPRESSION RedeemedToken(msg.sender,redeemedShare,redeemAmount)


idleToken_8(address) := ϕ(['idleToken_7', 'idleToken_1', 'idleToken_0', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
TMP_19(int256) = 1 (c)+ 1
a_1(int256) := TMP_19(int256)
TMP_20(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(redeemAmount_1)
redeemedShare_1(uint256) := TMP_20(uint256)
TMP_21 = CONVERT idleToken_9 to IIdleToken
TMP_22(uint256) = HIGH_LEVEL_CALL, dest:TMP_21(IIdleToken), function:redeemIdleToken, arguments:['redeemedShare_1']  
idleToken_10(address) := ϕ(['idleToken_7', 'idleToken_9', 'idleToken_1', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
redeemedUnderlyingAsset_1(uint256) := TMP_22(uint256)
redeemedUnderlyingAsset_2(uint256) = redeemedUnderlyingAsset_1 (c)+ redeemedShare_1
Emit RedeemedToken(msg.sender,redeemedShare_1,redeemAmount_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: idleToken, Num: 8
Globalname: idleToken
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 5

Name: None Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
idleToken_8(address) := ϕ(['idleToken_7', 'idleToken_1', 'idleToken_0', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
Phi
[i]Type for idleToken

Name: idleToken Function: redeemToken
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: a, Num: 1
Globalname: a
End popogation
TMP_19(int256) = 1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_19 Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_19

Name: TMP_19 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
a_1(int256) := TMP_19(int256)
asgn
init
end
_______________

Name: TMP_19 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef

Name: a Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for a

Name: a Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: redeemAmount, Num: 1
Globalname: redeemAmount
Name: redeemedShare, Num: 1
Globalname: redeemedShare
End popogation
TMP_20(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(redeemAmount_1)
init
end
[[], [], 18, None, [], 0, 'u', 'u']

Name: tokens Function: None
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
FIND RETURN
ENTRY_POINT
_tokenToShares(uint256)
ENTRY_POINT
EXPRESSION shares = (tokens * ONE_IDLE_TOKEN) / _price()
RETURN shares
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: tokens, Num: 1
Globalname: tokens

Name: tokens_1 Function: None
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid
Name: ONE_IDLE_TOKEN, Num: 1
Globalname: ONE_IDLE_TOKEN
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
tokens_1(uint256) := ϕ(['mintAmount_1', 'redeemAmount_1'])
Phi

Name: mintAmount_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: redeemAmount Function: None
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance


END==================================
[i]Type for tokens

Name: tokens Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
ONE_IDLE_TOKEN_1(uint256) := ϕ(['ONE_IDLE_TOKEN_2', 'ONE_IDLE_TOKEN_4', 'ONE_IDLE_TOKEN_0'])
Phi
[i]Type for ONE_IDLE_TOKEN

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: tokens, Num: 1
Globalname: tokens
Name: shares, Num: 1
Globalname: shares
End popogation
TMP_4(uint256) = tokens_1 (c)* ONE_IDLE_TOKEN_1
testing mul...
init
end
init
end

Name: tokens_1 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 18 rnorm: u
init
end
_______________

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_4 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
[i]Type for TMP_4

Name: TMP_4 Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_5(uint256) = INTERNAL_CALL, IdleYieldSource._price()()
FIND RETURN
ENTRY_POINT
_price()
ENTRY_POINT
RETURN IIdleToken(idleToken).tokenPriceWithFee(address(this))
Propogating parameters and globals to SSA variables...
End popogation
Name: idleToken, Num: 4
Globalname: idleToken
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 5

Name: None Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
idleToken_4(address) := ϕ(['idleToken_7', 'idleToken_1', 'idleToken_0', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
Phi
[i]Type for idleToken

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: idleToken, Num: 5
Globalname: idleToken
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 5

Name: None Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
TMP_10 = CONVERT idleToken_4 to IIdleToken
Converting idleToken_4

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef

Name: TMP_10 Function: _price
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 5
IdleToken
[i]Type for TMP_10

Name: TMP_10 Function: _price
Num: -1
Den: -1
Address: 5
Norm: 0
LF: IdleToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_11 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 7
7
7
[i]Type for TMP_11

Name: TMP_11 Function: _price
Num: -1
Den: -1
Address: 7
Norm: u
LF: IdleYieldSource
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_12(uint256) = HIGH_LEVEL_CALL, dest:TMP_10(IIdleToken), function:tokenPriceWithFee, arguments:['TMP_11']  
High Call: tokenPriceWithFee
Running querryfc
Found: tokenPriceWithFee
init
end
High level cal param_cache
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: IdleYieldSource
    fields: []
    fintype: -1
[[-1], [-1], 'u', 'IdleYieldSource', [], -1, 7, 'u']

Name: a Function: tokenPriceWithFee
Num: -1
Den: -1
Address: 7
Norm: u
LF: IdleYieldSource
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
tokenPriceWithFee(address)
ENTRY_POINT
RETURN (tPWF)
Propogating parameters and globals to SSA variables...
End popogation

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Phid
tPWF_1(uint256) := ϕ(['tPWF_0'])
Phi
[i]Type for tPWF

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN tPWF_1
RETURN
init
end

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Propogating parameters and globals to SSA variables...
End popogation

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Phid
tPWF_1(uint256) := ϕ(['tPWF_0'])
Phi
[i]Type for tPWF

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN tPWF_1
RETURN
init
end

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Source address: u
Source address: u
[i]Type for TMP_12

Name: TMP_12 Function: _price
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
idleToken_5(address) := ϕ(['idleToken_7', 'idleToken_4', 'idleToken_1', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
Phi
[i]Type for idleToken

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_12
RETURN
init
end

Name: TMP_12 Function: _price
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Propogating parameters and globals to SSA variables...
End popogation

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
idleToken_4(address) := ϕ(['idleToken_7', 'idleToken_1', 'idleToken_0', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
Phi
[i]Type for idleToken

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
TMP_10 = CONVERT idleToken_4 to IIdleToken
Converting idleToken_4

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef

Name: TMP_10 Function: _price
Num: 
Den: 
Address: u
Norm: u
LF: IdleToken
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 5
IdleToken
[i]Type for TMP_10

Name: TMP_10 Function: _price
Num: -1
Den: -1
Address: 5
Norm: 0
LF: IdleToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_11 = CONVERT this to address
Converting this
7
[i]Type for TMP_11

Name: TMP_11 Function: _price
Num: 
Den: 
Address: 7
Norm: u
LF: IdleYieldSource
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_12(uint256) = HIGH_LEVEL_CALL, dest:TMP_10(IIdleToken), function:tokenPriceWithFee, arguments:['TMP_11']  
High Call: tokenPriceWithFee
Running querryfc
Found: tokenPriceWithFee
init
end
High level cal param_cache
Param: 0
    num: []
    den: []
    norm: u
    link: IdleYieldSource
    fields: []
    fintype: -1
[[], [], 'u', 'IdleYieldSource', [], -1, 7, 'u']

Name: a Function: tokenPriceWithFee
Num: 
Den: 
Address: 7
Norm: u
LF: IdleYieldSource
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
tokenPriceWithFee(address)
ENTRY_POINT
RETURN (tPWF)
Propogating parameters and globals to SSA variables...
End popogation

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Phid
tPWF_1(uint256) := ϕ(['tPWF_0'])
Phi
[i]Type for tPWF

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN tPWF_1
RETURN
init
end

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Propogating parameters and globals to SSA variables...
End popogation

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Phid
tPWF_1(uint256) := ϕ(['tPWF_0'])
Phi
[i]Type for tPWF

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN tPWF_1
RETURN
init
end

Name: tPWF Function: tokenPriceWithFee
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Source address: u
Source address: u
[i]Type for TMP_12

Name: TMP_12 Function: _price
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
idleToken_5(address) := ϕ(['idleToken_7', 'idleToken_4', 'idleToken_1', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
Phi
[i]Type for idleToken

Name: idleToken Function: _price
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_12
RETURN
init
end

Name: TMP_12 Function: _price
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Source address: u
Source address: u
[i]Type for TMP_5

Name: TMP_5 Function: _tokenToShares
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
TMP_6(uint256) = TMP_4 (c)/ TMP_5
init
end
init
end
lnorm: 18 rnorm: 12
Finance type key: (0, 40)
init
end
Source address: u
init
end
init
end
lnorm: 18 rnorm: 12
Finance type key: (0, 40)
init
end
Source address: u
2
1
[i]Type for TMP_6

Name: TMP_6 Function: _tokenToShares
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
shares_1(uint256) := TMP_6(uint256)
asgn
init
end
_______________

Name: TMP_6 Function: _tokenToShares
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: shares Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (0, -1)
[i]Type for shares

Name: shares Function: _tokenToShares
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN shares_1
RETURN
init
end

Name: shares Function: _tokenToShares
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: tokens, Num: 1
Globalname: tokens

Name: tokens_1 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
tokens_1(uint256) := ϕ(['mintAmount_1', 'redeemAmount_1'])
Phi

Name: mintAmount_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: redeemAmount Function: None
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance


END==================================
[i]Type for tokens

Name: tokens Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
ONE_IDLE_TOKEN_1(uint256) := ϕ(['ONE_IDLE_TOKEN_2', 'ONE_IDLE_TOKEN_4', 'ONE_IDLE_TOKEN_0'])
Phi
[i]Type for ONE_IDLE_TOKEN

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: tokens, Num: 1
Globalname: tokens
Name: shares, Num: 1
Globalname: shares
End popogation
TMP_4(uint256) = tokens_1 (c)* ONE_IDLE_TOKEN_1
testing mul...
init
end
init
end

Name: tokens_1 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 18 rnorm: u
init
end
_______________

Name: ONE_IDLE_TOKEN Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_4 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
[i]Type for TMP_4

Name: TMP_4 Function: _tokenToShares
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_5(uint256) = INTERNAL_CALL, IdleYieldSource._price()()
init
end
_______________

Name: PIC_10 Function: None
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate

Name: TMP_5 Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Source address: u
[i]Type for TMP_5

Name: TMP_5 Function: _tokenToShares
Num: 1
Den: 2
Address: u
Norm: 12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
TMP_6(uint256) = TMP_4 (c)/ TMP_5
init
end
init
end
lnorm: 18 rnorm: 12
Finance type key: (0, 40)
init
end
Source address: u
init
end
init
end
lnorm: 18 rnorm: 12
Finance type key: (0, 40)
init
end
Source address: u
2
1
[i]Type for TMP_6

Name: TMP_6 Function: _tokenToShares
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
shares_1(uint256) := TMP_6(uint256)
asgn
init
end
_______________

Name: TMP_6 Function: _tokenToShares
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: shares Function: _tokenToShares
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
Finance type key: (0, -1)
[i]Type for shares

Name: shares Function: _tokenToShares
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN shares_1
RETURN
init
end

Name: shares Function: _tokenToShares
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
Source address: u
[i]Type for TMP_20

Name: TMP_20 Function: redeemToken
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
redeemedShare_1(uint256) := TMP_20(uint256)
asgn
init
end
_______________

Name: TMP_20 Function: redeemToken
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: redeemedShare Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (0, -1)
[i]Type for redeemedShare

Name: redeemedShare Function: redeemToken
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: idleToken, Num: 9
Globalname: idleToken
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 5
Name: redeemedUnderlyingAsset, Num: 1
Globalname: redeemedUnderlyingAsset
End popogation
Name: idleToken, Num: 10
Globalname: idleToken
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 5

Name: None Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
TMP_21 = CONVERT idleToken_9 to IIdleToken
Converting idleToken_9

Name: None Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: idleToken Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef

Name: TMP_21 Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 5
IdleToken
[i]Type for TMP_21

Name: TMP_21 Function: redeemToken
Num: -1
Den: -1
Address: 5
Norm: 0
LF: IdleToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(uint256) = HIGH_LEVEL_CALL, dest:TMP_21(IIdleToken), function:redeemIdleToken, arguments:['redeemedShare_1']  
High Call: redeemIdleToken
Running querryfc
Found: redeemIdleToken
init
end
High level cal param_cache
Param: 0
    num: [2]
    den: [1]
    norm: 6
    link: None
    fields: []
    fintype: 0
[[2], [1], 6, None, [], 0, 'u', 'u']

Name: share Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
FIND RETURN
ENTRY_POINT
redeemIdleToken(uint256)
ENTRY_POINT
RETURN (share * tokenToShare)
Propogating parameters and globals to SSA variables...
End popogation

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Phid
tokenToShare_1(uint256) := ϕ(['tokenToShare_0'])
Phi
[i]Type for tokenToShare

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
End popogation
TMP_0(uint256) = share_1 (c)* tokenToShare_1
testing mul...
init
end
init
end

Name: share Function: None
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
lnorm: 6 rnorm: -12
Finance type key: (0, 40)
Source address: u
Source address: u
init
end
_______________

Name: PIC_20 Function: None
Num: 2, 2
Den: 1, 1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_0 Function: redeemIdleToken
Num: 
Den: 
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: redeemIdleToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_0
RETURN
init
end

Name: TMP_0 Function: redeemIdleToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Phid
tokenToShare_1(uint256) := ϕ(['tokenToShare_0'])
Phi
[i]Type for tokenToShare

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_0(uint256) = share_1 (c)* tokenToShare_1
testing mul...
init
end
init
end

Name: share Function: None
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
lnorm: 6 rnorm: -12
Finance type key: (0, 40)
Source address: u
Source address: u
init
end
_______________

Name: PIC_21 Function: None
Num: 2, 2
Den: 1, 1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_0 Function: redeemIdleToken
Num: 
Den: 
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: redeemIdleToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_0
RETURN
init
end

Name: TMP_0 Function: redeemIdleToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
Source address: u
[i]Type for TMP_22

Name: TMP_22 Function: redeemToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
idleToken_10(address) := ϕ(['idleToken_7', 'idleToken_9', 'idleToken_1', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
Phi
[i]Type for idleToken

Name: idleToken Function: redeemToken
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
redeemedUnderlyingAsset_1(uint256) := TMP_22(uint256)
asgn
init
end
_______________

Name: TMP_22 Function: redeemToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: redeemedUnderlyingAsset Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (0, -1)
[i]Type for redeemedUnderlyingAsset

Name: redeemedUnderlyingAsset Function: redeemToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: redeemedUnderlyingAsset, Num: 2
Globalname: redeemedUnderlyingAsset
End popogation
redeemedUnderlyingAsset_2(uint256) = redeemedUnderlyingAsset_1 (c)+ redeemedShare_1
init
end
init
end
Error with redeemedUnderlyingAsset in function redeemToken
Error with: redeemedUnderlyingAsset in function redeemToken
[i]Type for redeemedUnderlyingAsset

Name: redeemedUnderlyingAsset Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: redeemAmount, Num: 1
Globalname: redeemAmount
End popogation


idleToken_8(address) := ϕ(['idleToken_7', 'idleToken_1', 'idleToken_0', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
TMP_19(int256) = 1 (c)+ 1
a_1(int256) := TMP_19(int256)
TMP_20(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(redeemAmount_1)
redeemedShare_1(uint256) := TMP_20(uint256)
TMP_21 = CONVERT idleToken_9 to IIdleToken
TMP_22(uint256) = HIGH_LEVEL_CALL, dest:TMP_21(IIdleToken), function:redeemIdleToken, arguments:['redeemedShare_1']  
idleToken_10(address) := ϕ(['idleToken_7', 'idleToken_9', 'idleToken_1', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
redeemedUnderlyingAsset_1(uint256) := TMP_22(uint256)
redeemedUnderlyingAsset_2(uint256) = redeemedUnderlyingAsset_1 (c)+ redeemedShare_1
Emit RedeemedToken(msg.sender,redeemedShare_1,redeemAmount_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: idleToken Function: redeemToken
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
idleToken_8(address) := ϕ(['idleToken_7', 'idleToken_1', 'idleToken_0', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
Phi
[i]Type for idleToken

Name: idleToken Function: redeemToken
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: a, Num: 1
Globalname: a
End popogation
TMP_19(int256) = 1 (c)+ 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_19 Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_19

Name: TMP_19 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
a_1(int256) := TMP_19(int256)
asgn
init
end
_______________

Name: TMP_19 Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef

Name: a Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for a

Name: a Function: redeemToken
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: redeemAmount, Num: 1
Globalname: redeemAmount
Name: redeemedShare, Num: 1
Globalname: redeemedShare
End popogation
TMP_20(uint256) = INTERNAL_CALL, IdleYieldSource._tokenToShares(uint256)(redeemAmount_1)
init
end
init
end
_______________

Name: PIC_19 Function: None
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_20 Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_20

Name: TMP_20 Function: redeemToken
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
redeemedShare_1(uint256) := TMP_20(uint256)
asgn
init
end
_______________

Name: TMP_20 Function: redeemToken
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: redeemedShare Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
Finance type key: (0, -1)
[i]Type for redeemedShare

Name: redeemedShare Function: redeemToken
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: redeemedUnderlyingAsset, Num: 1
Globalname: redeemedUnderlyingAsset
End popogation

Name: idleToken Function: redeemToken
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
TMP_21 = CONVERT idleToken_9 to IIdleToken
Converting idleToken_9

Name: idleToken Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: idleToken Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef

Name: TMP_21 Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: IdleToken
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 5
IdleToken
[i]Type for TMP_21

Name: TMP_21 Function: redeemToken
Num: -1
Den: -1
Address: 5
Norm: 0
LF: IdleToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22(uint256) = HIGH_LEVEL_CALL, dest:TMP_21(IIdleToken), function:redeemIdleToken, arguments:['redeemedShare_1']  
High Call: redeemIdleToken
Running querryfc
Found: redeemIdleToken
init
end
High level cal param_cache
Param: 0
    num: [2]
    den: [1]
    norm: 6
    link: None
    fields: []
    fintype: 0
[[2], [1], 6, None, [], 0, 'u', 'u']

Name: share Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
FIND RETURN
ENTRY_POINT
redeemIdleToken(uint256)
ENTRY_POINT
RETURN (share * tokenToShare)
Propogating parameters and globals to SSA variables...
End popogation

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Phid
tokenToShare_1(uint256) := ϕ(['tokenToShare_0'])
Phi
[i]Type for tokenToShare

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_0(uint256) = share_1 (c)* tokenToShare_1
testing mul...
init
end
init
end

Name: share Function: None
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
lnorm: 6 rnorm: -12
Finance type key: (0, 40)
Source address: u
Source address: u
init
end
_______________

Name: PIC_23 Function: None
Num: 2, 2
Den: 1, 1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_0 Function: redeemIdleToken
Num: 
Den: 
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: redeemIdleToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_0
RETURN
init
end

Name: TMP_0 Function: redeemIdleToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
Phid
tokenToShare_1(uint256) := ϕ(['tokenToShare_0'])
Phi
[i]Type for tokenToShare

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_0(uint256) = share_1 (c)* tokenToShare_1
testing mul...
init
end
init
end

Name: share Function: None
Num: 2
Den: 1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: tokenToShare Function: redeemIdleToken
Num: 2
Den: 1
Address: u
Norm: -12
LF: None
Value: u
Fields: 
Finance Type: price/exchange rate
lnorm: 6 rnorm: -12
Finance type key: (0, 40)
Source address: u
Source address: u
init
end
_______________

Name: PIC_24 Function: None
Num: 2, 2
Den: 1, 1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_0 Function: redeemIdleToken
Num: 
Den: 
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_0

Name: TMP_0 Function: redeemIdleToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_0
RETURN
init
end

Name: TMP_0 Function: redeemIdleToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
Source address: u
[i]Type for TMP_22

Name: TMP_22 Function: redeemToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
idleToken_10(address) := ϕ(['idleToken_7', 'idleToken_9', 'idleToken_1', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
Phi
[i]Type for idleToken

Name: idleToken Function: redeemToken
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
redeemedUnderlyingAsset_1(uint256) := TMP_22(uint256)
asgn
init
end
_______________

Name: TMP_22 Function: redeemToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: redeemedUnderlyingAsset Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
Finance type key: (0, -1)
[i]Type for redeemedUnderlyingAsset

Name: redeemedUnderlyingAsset Function: redeemToken
Num: 2, 2
Den: 1, 1
Address: u
Norm: -6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: redeemedUnderlyingAsset, Num: 2
Globalname: redeemedUnderlyingAsset
End popogation
redeemedUnderlyingAsset_2(uint256) = redeemedUnderlyingAsset_1 (c)+ redeemedShare_1
init
end
init
end
[i]Type for redeemedUnderlyingAsset

Name: redeemedUnderlyingAsset Function: redeemToken
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: redeemAmount, Num: 1
Globalname: redeemAmount
End popogation
Source address: u



transferERC20
Finding type for erc20Token(address ... )
prev address? u
Head Addr: -994
    Norm: 6
    Set: {-994}
    Fin: NULL
Finding type for to(address ... )
prev address? u
Changed here
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Finding type for amount(uint256 ... )
Value: u
Param: 0
    num: []
    den: []
    norm: 6
    link: erc20Token
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: 0
    link: to
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
FIND RETURN
ENTRY_POINT
transferERC20(address,address,uint256)
ENTRY_POINT
EXPRESSION require(bool,string)(erc20Token != idleToken,IdleYieldSource/idleDai-transfer-not-allowed)
EXPRESSION TransferredERC20(msg.sender,to,amount,erc20Token)


idleToken_11(address) := ϕ(['idleToken_7', 'idleToken_1', 'idleToken_0', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
TMP_24(bool) = erc20Token_1 != idleToken_11
TMP_25(None) = SOLIDITY_CALL require(bool,string)(TMP_24,IdleYieldSource/idleDai-transfer-not-allowed)
Emit TransferredERC20(msg.sender,to_1,amount_1,erc20Token_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: idleToken, Num: 11
Globalname: idleToken
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Source address: 5

Name: None Function: None
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
idleToken_11(address) := ϕ(['idleToken_7', 'idleToken_1', 'idleToken_0', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
Phi
[i]Type for idleToken

Name: idleToken Function: transferERC20
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: -994
End popogation
TMP_24(bool) = erc20Token_1 != idleToken_11
[i]Type for TMP_24

Name: TMP_24 Function: transferERC20
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_25(None) = SOLIDITY_CALL require(bool,string)(TMP_24,IdleYieldSource/idleDai-transfer-not-allowed)
[i]Type for TMP_25

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: -993
Source address: u
Name: amount, Num: 1
Globalname: amount
End popogation


idleToken_11(address) := ϕ(['idleToken_7', 'idleToken_1', 'idleToken_0', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
TMP_24(bool) = erc20Token_1 != idleToken_11
TMP_25(None) = SOLIDITY_CALL require(bool,string)(TMP_24,IdleYieldSource/idleDai-transfer-not-allowed)
Emit TransferredERC20(msg.sender,to_1,amount_1,erc20Token_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: idleToken Function: transferERC20
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
Phid
idleToken_11(address) := ϕ(['idleToken_7', 'idleToken_1', 'idleToken_0', 'idleToken_10', 'idleToken_3', 'idleToken_5'])
Phi
[i]Type for idleToken

Name: idleToken Function: transferERC20
Num: -1
Den: -1
Address: 5
Norm: 0
LF: idleToken
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_24(bool) = erc20Token_1 != idleToken_11
[i]Type for TMP_24

Name: TMP_24 Function: transferERC20
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_25(None) = SOLIDITY_CALL require(bool,string)(TMP_24,IdleYieldSource/idleDai-transfer-not-allowed)
[i]Type for TMP_25

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: amount, Num: 1
Globalname: amount
End popogation



sponsor
Finding type for amount(uint256 ... )
Value: u
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
FIND RETURN
ENTRY_POINT
sponsor(uint256)
ENTRY_POINT
EXPRESSION _depositToIdle(amount)
EXPRESSION Sponsored(msg.sender,amount)


TMP_27(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(amount_1)
Emit Sponsored(msg.sender,amount_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: amount, Num: 1
Globalname: amount
End popogation
TMP_27(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(amount_1)
[i]Type for TMP_27

Name: TMP_27 Function: sponsor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: amount, Num: 1
Globalname: amount
End popogation


TMP_27(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(amount_1)
Emit Sponsored(msg.sender,amount_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: amount, Num: 1
Globalname: amount
End popogation
TMP_27(uint256) = INTERNAL_CALL, IdleYieldSource._depositToIdle(uint256)(amount_1)
[i]Type for TMP_27

Name: TMP_27 Function: sponsor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: amount, Num: 1
Globalname: amount
End popogation



slitherConstructorConstantVariables
Address: -999, Label: balanceOf:a
Address: -998, Label: tokenPriceWithFee:a
Address: -997, Label: mintIdleToken:a
Address: 1, Label: global:tokA
Address: 2, Label: global:tokB
Address: 3, Label: global:f: 0
Address: 4, Label: global:u
Address: 5, Label: global:idleToken
Address: 6, Label: global:underlyingAsset
Address: -996, Label: initialize:_idleToken
Address: -995, Label: supplyTokenTo:to
Address: -994, Label: transferERC20:erc20Token
Address: -993, Label: transferERC20:to
Address: 7, Label: _price:TMP_11
Address: 7, Label: global:this
Head Addr: -999
    Norm: 6
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: 6
    Set: {-997}
    Fin: NULL
Head Addr: 1
    Norm: u
    Set: {1}
    Fin: undef
Head Addr: 2
    Norm: u
    Set: {2}
    Fin: undef
Head Addr: 3
    Norm: u
    Set: {3}
    Fin: NULL
Head Addr: 4
    Norm: u
    Set: {4}
    Fin: NULL
Head Addr: 5
    Norm: 0
    Set: {5}
    Fin: NULL
Head Addr: 6
    Norm: 6
    Set: {6}
    Fin: NULL
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Head Addr: -994
    Norm: 6
    Set: {-994}
    Fin: NULL
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Head Addr: 7
    Norm: u
    Set: {7}
    Fin: NULL
Function count: 16
Executing Group 3
[*] Tested 1 warning for PoolTogether
Group 3 complete
Testing complete
