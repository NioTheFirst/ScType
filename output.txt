Switched global version to 0.8.3
Checking BaseLending
Checking HourlyBondSubscriptionLending
Finance file: HourlyBondSubscriptionLending_ftypes.txt
IN KEY: global_hourlyBondAccounts_amount
IN KEY: global_hourlyBondMetadata.yieldAccumulator_accumulatorFP
IN KEY: updateHourlyBondAmount_bond_amount
Reading f file...
['[t*]', 'global', 'hourlyBondAccounts', 'amount', 'f: 0']
OUT KEY: global_hourlyBondAccounts_amount
IN KEY: global_hourlyBondAccounts_amount
['[t*]', 'global', 'hourlyBondMetadata.yieldAccumulator', 'accumulatorFP', 'f: 20']
OUT KEY: global_hourlyBondMetadata.yieldAccumulator_accumulatorFP
IN KEY: global_hourlyBondMetadata.yieldAccumulator_accumulatorFP
['[t*]', 'updateHourlyBondAmount', 'bond', 'amount', 'f:0']
OUT KEY: updateHourlyBondAmount_bond_amount
IN KEY: updateHourlyBondAmount_bond_amount
Finding type for FP32(uint256 ... )
Finding type for hourlyBondAccounts(mapping(address => mapping(address => HourlyBond)) ... )
Finding type for hourlyBondMetadata(mapping(address => HourlyBondSubscriptionLending.HourlyBondMetadata) ... )
Finding type for lendingMeta(mapping(address => BaseLending.LendingMetadata) ... )
Finding type for borrowYieldAccumulators(mapping(address => BaseLending.YieldAccumulator) ... )
Finding type for borrowingFactorPercent(uint256 ... )
Finding type for maxHourlyYieldFP(uint256 ... )
Finding type for yieldChangePerSecondFP(uint256 ... )
Finding type for withdrawalWindow(uint256 ... )



setWithdrawalWindow
Finding type for window(uint256 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


withdrawalWindow_1(uint256) := window_1(uint256)


window_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
window
withdrawalWindow_1(uint256) := window_1(uint256)
[i]Type for withdrawalWindow

Name: withdrawalWindow Function: setWithdrawalWindow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


withdrawalWindow_1(uint256) := window_1(uint256)


window_1

Name: window Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
window
withdrawalWindow_1(uint256) := window_1(uint256)
[i]Type for withdrawalWindow

Name: withdrawalWindow Function: setWithdrawalWindow
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX



_makeHourlyBond



updateHourlyBondAmount
Finding type for issuer(address ... )
prev address? u
-999
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Finding type for bond(HourlyBond ... )
Param: 0
    num: []
    den: []
    norm: u
    link: issuer
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


issuer_1(address) := ϕ(['issuer_1'])
bond_1(HourlyBond) := ϕ(["bond_1 (-> ['hourlyBondAccounts'])"])
lendingMeta_5(mapping(address => BaseLending.LendingMetadata)) := ϕ(['lendingMeta_4', 'lendingMeta_1', 'lendingMeta_10', 'lendingMeta_8', 'lendingMeta_12', 'lendingMeta_0'])
hourlyBondMetadata_3(mapping(address => HourlyBondSubscriptionLending.HourlyBondMetadata)) := ϕ(['hourlyBondMetadata_4', 'hourlyBondMetadata_0', 'hourlyBondMetadata_2', 'hourlyBondMetadata_6', 'hourlyBondMetadata_7'])
REF_22(uint256) -> bond_1.yieldQuotientFP
yieldQuotientFP_1(uint256) := REF_22(uint256)
TMP_54(bool) = yieldQuotientFP_1 > 0
CONDITION TMP_54
REF_23(HourlyBondSubscriptionLending.HourlyBondMetadata) -> hourlyBondMetadata_3[issuer_1]
TMP_55(BaseLending.YieldAccumulator) = INTERNAL_CALL, HourlyBondSubscriptionLending.getUpdatedHourlyYield(address,HourlyBondSubscriptionLending.HourlyBondMetadata)(issuer_1,REF_23)
lendingMeta_6(mapping(address => BaseLending.LendingMetadata)) := ϕ(['lendingMeta_12'])
yA_1 (-> ['TMP_55'])(BaseLending.YieldAccumulator) := TMP_55(BaseLending.YieldAccumulator)
REF_24(uint256) -> bond_1.amount
oldAmount_1(uint256) := REF_24(uint256)
REF_25(uint256) -> bond_1.amount
REF_26(uint256) -> bond_1.amount
REF_27(uint256) -> yA_1 (-> ['TMP_55']).accumulatorFP
TMP_56(uint256) = INTERNAL_CALL, BaseLending.applyInterest(uint256,uint256,uint256)(REF_26,REF_27,yieldQuotientFP_1)
bond_2(HourlyBond) := ϕ(['bond_1'])
REF_25 (->bond_2) := TMP_56(uint256)
REF_28(uint256) -> bond_2.amount
TMP_57(uint256) = REF_28 (c)- oldAmount_1
deltaAmount_1(uint256) := TMP_57(uint256)
REF_29(BaseLending.LendingMetadata) -> lendingMeta_7[issuer_1]
REF_30(uint256) -> REF_29.totalLending
lendingMeta_8(mapping(address => BaseLending.LendingMetadata)) := ϕ(['lendingMeta_7'])
REF_30(-> lendingMeta_8) = REF_30 (c)+ deltaAmount_1


issuer_1(address) := ϕ(['issuer_1'])
[i]Type for issuer

Name: issuer Function: updateHourlyBondAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bond_1(HourlyBond) := ϕ(["bond_1 (-> ['hourlyBondAccounts'])"])
[i]Type for bond

Name: bond Function: updateHourlyBondAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lendingMeta_5(mapping(address => BaseLending.LendingMetadata)) := ϕ(['lendingMeta_4', 'lendingMeta_1', 'lendingMeta_10', 'lendingMeta_8', 'lendingMeta_12', 'lendingMeta_0'])
[i]Type for lendingMeta

Name: lendingMeta Function: updateHourlyBondAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
hourlyBondMetadata_3(mapping(address => HourlyBondSubscriptionLending.HourlyBondMetadata)) := ϕ(['hourlyBondMetadata_4', 'hourlyBondMetadata_0', 'hourlyBondMetadata_2', 'hourlyBondMetadata_6', 'hourlyBondMetadata_7'])
[i]Type for hourlyBondMetadata

Name: hourlyBondMetadata Function: updateHourlyBondAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bond_1

Name: bond Function: updateHourlyBondAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
bond
REF_22(uint256) -> bond_1.yieldQuotientFP
MEMBER
Executing Group 1
[*] Tested 1 warning for MarginSwap
Group 1 complete
Testing complete
